[
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n''') == '5 1 8 6'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"5\"\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"1 8 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\nassert solution('6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6') == '5\\n1 6 5'\nassert solution('4\\n1 2\\n2 3\\n3 4') == '1\\n1 4 3'\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5') == '1\\n5 4 2'\nassert solution('6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6') == '2\\n3 4 1'\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 4 3\\n5 2 4\") == \"3\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n\") == \"5\\n1 8 6\""
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8''') == '5 1 8 6'\n\n\"\"\"\n\n\nimport sys\nimport networkx as nx\nimport re"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\n---"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\"\"\""
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8''') == '5 1 8 6'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2\\n3 4\\n1 3\") == '5\\n1 3 6'\nassert solution(\"8 6\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n\") == '5\\n1 8 6'\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10\\n10 2 8 1 2 4 1 20 4 5') == '20 8'\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10\\n10 2 8 1 2 4 1 20 4 5') == '20 8'\n\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10\\n10 2 8 1 2 4 1 20 4 5') == '20 8'\n\"\"\"\n\nn = int(input())\nnums = [int(i) for i in input().split()]\n\nfreq = {}\nfor num in nums:\n    if num not in freq:\n        freq[num] = 0\n    freq[num] += 1\n\ncount = 1\nans = [1, 1]\nwhile count < n:\n    if ans[-1] in freq:\n        count += freq[ans[-1]]\n        ans.append(ans[-1])\n    else:\n        count += 1\n        ans.append(ans[-1])\n    if ans[-1] in freq and ans[-2] in freq:\n        if freq[ans[-1]] == freq[ans[-2]]:\n            count += freq[ans[-2]]\n            ans.append(ans[-2])\n        else:\n            count += freq[ans[-2]]\n            ans.append(ans[-1])\n    elif ans[-1] in freq:\n        count += freq[ans[-1]]\n        ans.append(ans[-1])\n    elif ans[-2] in freq:\n        count += freq[ans[-2]]\n        ans.append(ans[-2])\n\nprint(ans[1], ans[-2])\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\nassert solution(\"4\\n6 5 4 1 2 3\") == \"4 6\"\n\n\"\"\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == '20 8'\n\"\"\"\n\nfrom typing import List\n\nn = int(input())\ndivs = [int(i) for i in input().split()]\ndivs.sort()\nans = []\nfor d in divs:\n    if d == 1 or d == n:\n        ans.append(d)\n    else:\n        ans.append(d)\n        ans.append(d)\nprint(*ans)\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10\\n10 2 8 1 2 4 1 20 4 5') == '20 8'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\") == \"2 4\"\n\"\"\"\n\nfrom collections import Counter\nfrom sys import stdin\n\nn = int(stdin.readline())\na = Counter(map(int, stdin.readline().split()))\n\nx = y = 1\n\nfor key in a:\n    if a[key] & 1:\n        x *= key\n    else:\n        y *= key\n\nprint(x, y)\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == 24\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'\nassert solution('5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6') == '56'\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'\n\"\"\"\n\nn, m, k = list(map(int, stdin.split()))\narr = [list(map(int, stdin.split())) for _ in range(n)]\n\ncandidates = [0] * m\nfor row in arr:\n    num = len(row) // 2\n    for idx in range(num):\n        candidates[idx] += row[idx]\n\nfor idx in range(num, m):\n    candidates[idx] += row[idx]\n\nresult = 0\nfor candidate in candidates:\n    if candidate % k == 0:\n        result += candidate\n    else:\n        result -= candidate\n\nprint(result)\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n\"\"\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == 24\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == 56\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n\") == \"24\"\n\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\\n\") == \"56\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n') == 24\n\"\"\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 4 3 2') == '4\\nLRRR'\nassert solution('7\\n1 3 5 6 5 4 2') == '6\\nLRLRRR'\n\"\"\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 4 3 2\\n\") == '4\\nLRRR'\nassert solution(\"7\\n1 3 5 6 5 4 2\\n\") == '6\\nLRLRRR'\nassert solution(\"3\\n2 2 2\\n\") == '1\\nR'\nassert solution(\"4\\n1 2 4 3\\n\") == '4\\nLLRR'\n\n\"\"\"\nimport sys\n\ninput_data = sys.stdin.readlines()\nn = int(input_data[0])\na = list(map(int, input_data[1].split()))"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 4 3 2') == '4'\nassert solution('1 3 5 6 5 4 2') == '6'\nassert solution('1 3 5 6 5 4 2') == '6'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nLRRL\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nRLRRR\"\nassert solution(\"3\\n2 2 2\") == \"1\\nRR\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRR\"\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 4 3 2\\n') == '4\\nLRRR\\n', \"It's not LRRR\"\nassert solution('7\\n1 3 5 6 5 4 2\\n') == '6\\nLRLRRR\\n', \"It's not LRLRRR\"\nassert solution('3\\n2 2 2\\n') == '1\\nR\\n', \"It's not R\"\nassert solution('4\\n1 2 4 3\\n') == '4\\nLLRR\\n', \"It's not LLRR\"\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nRRR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nRLR\"\nassert solution(\"3\\n2 2 2\") == \"1\\nR\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLL\"\n\n\"\"\"\n\nfrom collections import deque\nfrom typing import List, Union\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 4 3 2') == '4\\nLRRR'\nassert solution('7\\n1 3 5 6 5 4 2') == '6\\nLRLRRR'\nassert solution('3\\n2 2 2') == '1\\nR'\nassert solution('4\\n1 2 4 3') == '4\\nLLRR'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(expected)\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 4 3 2\\n\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\\n\") == \"6\\nLRLRRR\"\nassert solution(\"3\\n2 2 2\\n\") == \"1\\nR\"\nassert solution(\"4\\n1 2 4 3\\n\") == \"4\\nLLRR\"\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 4 3 2') == '4'\nassert solution('1 3 5 6 5 4 2') == '6'\nassert solution('1 3 5 6 5 4 2') == '6'\nassert solution('1 3 5 6 5 4 2') == '6'\nassert solution('1 3 5 6 5 4 2') == '6'\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 1 4 7\") == \"3\"\nassert solution(\"4 5 1 4 7 10\") == \"6\"\nassert solution(\"3 5 1 4 7 10\") == \"6\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5 6\") == \"1\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 4 4 7 4 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == \"3\"\nassert solution(\"5\\n2 2 5 2 5\") == \"3\"\nassert solution(\"4\\n1 3 3 7\") == \"-1\"\nassert solution(\"2\\n2 8\") == \"3\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 5 2\") == \"3\"\nassert solution(\"5\\n2 3 5 2 5\") == \"3\"\nassert solution(\"4\\n1 3 7 4\") == \"-1\"\nassert solution(\"2\\n2 8\") == \"3\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == 3\n\"\"\"\n\nfrom math import inf\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == \"3\"\nassert solution(\"5\\n1 4 4 7 4 1\") == \"3\"\nassert solution(\"4\\n1 3 3 7\") == \"-1\"\nassert solution(\"2\\n2 8\") == \"3\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 2 5 2 5\") == \"3\"\nassert solution(\"3\\n1 3 3 7\") == \"-1\"\nassert solution(\"3\\n2 2 5 2 5\") == \"3\"\nassert solution(\"4\\n2 2 5 2 5\") == \"3\"\nassert solution(\"5\\n1 3 3 7\") == \"-1\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 2 5 2 5\") == \"3\"\nassert solution(\"6\\n1 4 4 7 4 1\") == \"3\"\nassert solution(\"5\\n1 3 3 7\") == \"3\"\nassert solution(\"4\\n2 2 5 2 5\") == \"3\"\nassert solution(\"2\\n2 8\") == \"3\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == D\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3) == -1\nassert solution(2) == 3\nassert solution(2) == 3\nassert solution(6) == 3\nassert solution(6) == 3\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 2 4 4\\n1 1 3 5\\n3 1 5 5\"\n) == \"NO\"\n\nassert solution(\n    \"5 2 10 5\\n3 1 7 6\\n8 1 11 7\"\n) == \"YES\"\n\nassert solution(\n    \"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\"\n) == \"YES\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"1 1 3 5\") == \"NO\"\nassert solution(\"3 1 5 5\") == \"YES\"\n\nassert solution(\"0 0 4 6\") == \"NO\"\nassert solution(\"0 0 7 4\") == \"YES\""
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 4 6\") == \"NO\"\nassert solution(\"0 0 7 4\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2 4 4\\n1 1 3 5\\n3 1 5 5') == 'NO'\nassert solution('3 3 7 5\\n0 0 4 6\\n0 0 7 4') == 'YES'\nassert solution('5 2 10 5\\n3 1 7 6\\n8 1 11 7') == 'YES'\nassert solution('0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000') == 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'NO'\nassert solution('2 2 4 4') == 'NO'\nassert solution('1 1 3 5') == 'NO'\nassert solution('3 1 5 5') == 'YES'\nassert solution('0 0 4 6') == 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 2 4 4''') == 'NO'\nassert solution('''3 1 7 5''') == 'YES'\nassert solution('''5 2 10 5''') == 'YES'\nassert solution('''0 0 1000000 1000000''') == 'YES'\nassert solution('''0 0 499999 1000000''') == 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 5\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\nassert solution(\"0 0 499999 1000000\") == \"YES\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\n\nsolution(stdin)"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1098\") == 20\n\"\"\"\n\nimport math\n\nn = int(input())"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1098\") == 20\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(123) == 2\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1098) == 20\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1098') == 20\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19\n\"\"\"\n\nfrom typing import List\n\nn = int(input())\n\ncount = 0\n\nwhile True:\n    if n < 10:\n        count += 1\n        break\n    n_str = str(n)\n    if n_str[-1] == '0':\n        n = int(n_str[:-1])\n    else:\n        n = int(n_str[:-1] + str(int(n_str[-1]) + 1))\n    count += 1\n\nprint(count)\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1098') == 20\n\"\"\""
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1098\") == 20\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n0 0 2 4\\n\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\nassert solution(\"7\\n4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\n\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\nassert solution(\"5\\n2 1 0 0 0\") == \"2 1 4 5 3\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\n\"\"\"\n\n\nn = int(stdin.readline())\ns = stdin.readline().split()\n\nb = []\nfor i in s:\n    if i == '0':\n        b.append(i)\n    else:\n        b.append(i)\n\nprint(' '.join(b))\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n5\\n0\\n2\\n4') == '5\\n3\\n1\\n2\\n4'\nassert solution('7\\n7\\n0\\n0\\n1\\n4\\n0\\n6') == '7\\n3\\n1\\n2\\n4\\n5\\n6'\nassert solution('5\\n5\\n0\\n2\\n4') == '5\\n3\\n1\\n2\\n4'\nassert solution('7\\n7\\n0\\n0\\n1\\n4\\n0\\n6') == '7\\n3\\n1\\n2\\n4\\n5\\n6'\n\nassert solution('7\\n7\\n0\\n0\\n1\\n4\\n0\\n6') == '7\\n3\\n1\\n2\\n4\\n5\\n6'\n\"\"\""
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 0 0 2 4') == '5 3 1 2 4'\nassert solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6'\nassert solution('7 4 0 3 0 5 1') == '7 4 2 3 6 5 1'\nassert solution('7 4 0 3 0 5 1') == '7 4 2 3 6 5 1'\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\n\nfor i in range(n):\n    if arr[i] == 0:\n        arr[i] = n\n        n -= 1\n\nprint(*arr)"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\n\n\"\"\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n5 0 0 2 4\\n\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\\n\") == \"7 4 2 3 6 5 1\"\nassert solution(\"7\\n7 4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n5 0 0 2 4\\n') == '5 3 1 2 4'\nassert solution('7\\n7 0 0 1 4 0 6\\n') == '7 3 2 1 4 5 6'\nassert solution('7\\n7 4 0 3 0 5 1\\n') == '7 4 2 3 6 5 1'\nassert solution('5\\n2 1 0 0 0\\n') == '2 1 4 5 3'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n5 0 0 2 4\\n\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\\n\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\nassert solution(\"5\\n2 1 0 0 0\\n\") == \"2 1 4 5 3\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 1') == 'YES\\n2 1 1 2 1'\nassert solution('5 2\\n2 1 1 2 1') == 'NO'\n\nprint('The local tests are done. Try to solve the `A` on `Problems -> IDLE`.')\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 2\n1 2 2 3\n''') == 'YES\\n1 1 2 2'\nassert solution('''5 2\n3 2 1 2 1\n''') == 'YES\\n2 1 1 2 1'\nassert solution('''5 2\n2 1 1 2 1\n''') == 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n\nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass C:\n    color: int\n    i: int\n\n@dataclass\nclass S:\n    i: int\n    j: int\n    color: int\n\n@dataclass\nclass F:\n    i: int\n    j: int\n    c: List[C]"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 1') == 'YES\\n2 1 1 2 1'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 3') == 'YES\\n2 1 1 2 1'\n\n\"\"\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\nassert solution(\"11 6 1\") == \"9\"\nassert solution(\"11 6 0\") == \"7\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 5 2\") == \"1\"\n\nassert solution(\"11 5 1\") == \"3\""
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11 5 2') == '1'\nassert solution('11 5 1') == '3'\nassert solution('11 5 0') == '0'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\n\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n\n\n-----Test 2-----\n\nInput\n10 2 3\n101010\n\nOutput\n1\n\nInput\n10 2 4\n101010\n\nOutput\n3\n\n\n-----Test 3-----\n\nInput\n11 5 2\n110101001010\n\nOutput\n2\n\n\n-----Test 4-----\n\nInput\n11 5 1\n110101001010\n\nOutput\n4\n\n\n-----Test 5-----\n\nInput\n1000 5 2\n111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 5 2\\n11010100101') == '1'\nassert solution('11 5 1\\n11010100101') == '3'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\n\"\"\"\n\nimport math\nimport sys\n\nsys.setrecursionlimit(1500)\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11 5 2') == '1'\nassert solution('11 5 1') == '3'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11 5 2') == '1'\nassert solution('11 5 1') == '3'\nassert solution('11 5 0') == '0'\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"4\\n1 2 2 1\\n4\\n1 2 2 1\") == \"YES\\nYES\\nNO\\nYES\"\n\"\"\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 1\\n3\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n3\\n1 2 2 3 2\") == \"NO\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"YES\"\nassert solution(\"4\\n1 2 2 1\\n4\\n1 2 2 1\") == \"NO\"\n\n\"\"\"\n\nimport sys\nimport os\nimport time\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\n\n\"\"\"\n\nfrom collections import Counter\nimport re\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 2 1\\n3\\n1 1 2\") == \"YES\"\nassert solution(\"5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"YES\"\nassert solution(\"5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"NO\"\nassert solution(\"5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"6\\n2\\n1 1\\n4\\n1 1 2\\n3\\n1 1 2 2\\n3\\n1 1 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n\"\"\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\n\nassert solution(\"\"\"\n5\n4\n1 2 1 3\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n\"\"\") == \"NO\\nNO\\nNO\\nYES\\nYES\"\n\n\"\"\"\nfrom typing import List, Set, Tuple\n\nimport re\nimport math\nimport functools"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1337\") == \"1557\"\nassert solution(\"11111\") == \"99999\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1337\") == \"1553\"\nassert solution(\"5\\n11111\") == \"99999\"\nassert solution(\"2\\n33\") == \"33\"\n\"\"\"\n\nimport itertools\nimport sys\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"33\") == \"33\"\nassert solution(\"1 1 1 1 1 1 1 1 1\") == \"9999\"\n\nprint(solution(\"1337\"))\nprint(solution(\"11111\"))\nprint(solution(\"33\"))\nprint(solution(\"1 1 1 1 1 1 1 1 1\"))\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n4\n1337\n1 2 5 4 6 6 3 1 9\n\"\"\"\n) == \"1557\"\n\nassert solution(\n\"\"\"\n5\n11111\n9 8 7 6 5 4 3 2 1\n\"\"\"\n) == \"99999\"\n\nassert solution(\n\"\"\"\n2\n33\n1 1 1 1 1 1 1 1 1\n\"\"\"\n) == \"33\"\nprint(\"Passed!\")\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1337') == '1553'\nassert solution('11111') == '99999'\nassert solution('9998') == '99999'\nassert solution('55555') == '99995'\nassert solution('55555') == '99995'\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1337') == '1553'\nassert solution('11111') == '99999'\n\"\"\"\n\na = int(input())\na_str = input()\nf_str = input()"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1337\") == \"1557\"\nassert solution(\"5\\n11111\") == \"99999\"\n\n\"\"\"\n\n\n\"\"\"\nDynamic Programming\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1337\") == \"1557\"\nassert solution(\"11111\") == \"99999\"\nprint(solution(\"1337\"))\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"4\\n1337\"\n) == \"1557\"\n\nassert solution(\n    \"5\\n11111\"\n) == \"99999\"\n\nassert solution(\n    \"2\\n33\"\n) == \"33\"\n\nprint('Hooray!')\n\n\"\"\""
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"33\") == \"33\"\nprint(\"PASSED\")\n\n\"\"\""
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48'\nprint(\"The local tests are done. Click on 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38'\n\"\"\""
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\"\n\n\"\"\""
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46') == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\"\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('123 321 456') == '3'\nassert solution('5 10 15') == '2'\nassert solution('15 18 21') == '4'\nassert solution('100 100 101') == '3'\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46') == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48'\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 5\\n2 3 5\") == \"1\\n2 2 3\"\nassert solution(\"3 3 3\\n3 3 3\") == \"0\\n3 3 3\"\nassert solution(\"5 5 5\\n5 5 5\") == \"0\\n5 5 5\"\n\nassert solution(\"5 2 6\\n5 2 6\") == \"2\\n1 2 4\"\nassert solution(\"5 2 6\\n6 2 6\") == \"3\\n1 2 3\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 3\") == \"1 1 1\"\nassert solution(\"1 1 2\") == \"2 2 2\"\nassert solution(\"1 1 1\") == \"0 0 0\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import gcd\nfrom functools import reduce\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == ''\nassert solution('123 321 456') == ''\nassert solution('5 10 15') == ''\nassert solution('15 18 21') == ''\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8\\n1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46') == '\\n1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48'"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\nassert solution('3\\n1 3 3') == '2'\nassert solution('4\\n1 3 3 7') == '2'\nassert solution('6\\n1 100000 1 2 3 100 2') == '0'\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 3 7\") == '2'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n1 3 3 7''') == 2\nassert solution('''2\n1 100000''') == 0\nassert solution('''4\n1 3 3 7''') == 2\nassert solution('''2\n1 100000''') == 0\nassert solution('''6\n1 2 3 6 6 5''') == 2\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\nassert solution(\"1\\n100000\") == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\nassert solution(\"10\\n1 1 2 3 4 5 6 7 8 9 10\") == \"0\"\nassert solution(\"10\\n1 10 10 10 10 10 10 10 10 10\") == \"0\"\n\nassert solution(\"1\\n10\") == \"0\""
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"1 2 3 1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\""
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"0\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\""
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 1 1 0 4 3 4 4\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"3 2 1 10 3\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"3 2 10 3\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"3 2 10 3\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"3 2 10 3\") == \"2 2 2 1 1 0 4 3 4 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n\"\"\""
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 1\") == \"1 2 3 0 3\"\n\"\"\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2\\n1 3 1\\n1 5 1') == '1 2 3 0 3'\nassert solution('3 2\\n1 3 1\\n1 2 1') == '-1'\nassert solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5 2\n1 3 1\n1 5 1\"\"\") == \"\"\"1 2 3 0 3 \n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '-1'\nassert solution('1 3 1\\n1 5 1') == '1 2 3 0 3'\nassert solution('1 3 1\\n1 2 1\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2\\n1 3 1\\n1 5 1') == '1 2 3 0 3'\nassert solution('3 2\\n1 3 1\\n1 2 1') == '-1'\nassert solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nimport sys\n\ninputs = sys.stdin.readlines()\nn, m = map(int, inputs[0].split())"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(123) == '-1'\nassert solution(120) == '7'\nassert solution(123) == '-1'\nassert solution(120) == '7'\nassert solution(123) == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n\n\n\"\"\""
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aba') == 'ababababa'\nassert solution('cat') == 'catcat'\n\"\"\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aba\") == \"ababababa\"\nassert solution(\"cat\") == \"catcat\"\nassert solution(\"abacaba\") == \"abacababacababacaba\"\n\nassert solution(\"aaaaaaa\") == \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'aa'\nassert solution('aab') == 'aba'\nassert solution('abc') == 'abcabc'"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\", 3) == \"aba\"\nassert solution(\"cat\", 2) == \"catcat\"\nassert solution(\"cccccc\", 3) == \"cccccccc\"\nassert solution(\"a\", 4) == \"aaaaaaaa\"\nassert solution(\"b\", 1) == \"bbbbbbbb\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aba') == 'ababababa'\nassert solution('cat') == 'catcat'\n\nprint(solution(stdin.readlines()))\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aba\") == \"abababa\"\nassert solution(\"cat\") == \"catcat\"\n\n\"\"\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aba\") == \"ababababa\"\nassert solution(\"cat\") == \"catcat\"\nassert solution(\"dog\") == \"dogdog\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aba\", 3) == \"abababa\"\nprint(solution(\"aba\", 3))\nassert solution(\"cat\", 2) == \"catcat\"\nprint(solution(\"cat\", 2))\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aba') == 'ababababa'\n\nassert solution('cat') == 'catcat'\n\nassert solution('abc') == 'abcabcabc'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 5 1 2 2\") == \"3\\n4 1 5\"\nassert solution(\"4\\n8 3 5 2\") == \"2\\n1 4\"\nassert solution(\"5\\n2 1 2 4 3\") == \"0\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 1 2 2\") == \"3 4 1 5\"\nassert solution(\"4 3 5 2\") == \"0\"\nassert solution(\"5 1 2 4 3\") == \"1 4\"\n\"\"\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 1 2 2\") == \"3 4 1 5\"\nassert solution(\"4 3 5 2\") == \"0\"\nassert solution(\"5 1 2 4 3\") == \"0\"\nassert solution(\"8 3 5 2\") == \"2 1 4\"\n\"\"\""
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"3\\n1 2 3\") == \"1\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 2 4 3\") == \"0\"\nassert solution(\"2 5 1 2 2\") == \"3\"\nassert solution(\"8 3 5 2\") == \"2\"\nassert solution(\"8 3 5 2\") == \"2\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '0\\n0'\nassert solution('5\\n2 1 2 4 3') == '2\\n1 4'\nassert solution('5\\n2 1 2 2') == '0\\n0'\nassert solution('5\\n1 1 1 1 1') == '0\\n0'\nassert solution('5\\n2 2 2 2') == '0\\n0'\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 1 2 2') == '3 4 1 5'\nassert solution('4 3 5 2') == '0'\nassert solution('8 3 5 2') == '2 1 4'\n\n\n\n\"\"\"\n\nimport sys\nfrom collections import deque\nfrom typing import Dict, List, Deque, Tuple, Set"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 1 2 2\") == \"3 1 4\"\nassert solution(\"4 3 5 2\") == \"0\"\nassert solution(\"5 1 2 4 3\") == \"2 1 4\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 5 1 2\") == \"2\"\nassert solution(\"5\\n2 1 2 4 3\") == \"0\"\nassert solution(\"5\\n8 3 5 2\") == \"1\"\nassert solution(\"5\\n2 1 2 4 3\") == \"0\"\nassert solution(\"5\\n4 2 2 4 1\") == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3 5 2\") == \"0\"\nassert solution(\"2 1 2 4 3\") == \"2\"\nassert solution(\"1 2 3 4 5\") == \"0\"\nassert solution(\"7 7 7 7 7\") == \"7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n asdf\") == \"4\"\nassert solution(\"5 6\\n aaaaa\") == \"15\"\nassert solution(\"5 7\\n aaaaa\") == \"-1\"\nassert solution(\"10 100\\n ajihiushda\") == \"233\""
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5\\nasdf') == 4\n\nassert solution('5 6\\naaaaa') == 15\n\nassert solution('5 7\\naaaaa') == -1\n\nassert solution('10 100\\najihiushda') == 233\n\"\"\"\n\nimport sys\nimport heapq\nimport math\n\ns = input().split()\nn, k = int(s[0]), int(s[1])\n\ns = input()\n\nt = []\nfor c in s:\n    heapq.heappush(t, c)\n\ncost = 0\nwhile len(t) > k:\n    c = heapq.heappop(t)\n    cost += n - len(c)\n\nprint(cost)\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ajihiushda\") == 233\nassert solution(\"aaaaa\") == 15\nassert solution(\"asdf\") == 4\nassert solution(\"asd\") == 1\nassert solution(\"adf\") == 2\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 asdf\") == 4\nassert solution(\"5 6 ajihiushda\") == 15\nassert solution(\"5 7 ajihiushda\") == -1\n\"\"\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 asdf\") == \"4\"\nassert solution(\"5 6 aaaa\") == \"15\"\nassert solution(\"5 7 aaaa\") == \"-1\"\nassert solution(\"10 100 ajihiushda\") == \"233\"\n\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == 233\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 asdf\") == \"4\"\nassert solution(\"5 6 aaaaa\") == \"15\"\nassert solution(\"5 7 aaaaa\") == \"-1\"\nassert solution(\"10 100 ajihiushda\") == \"233\"\nprint(\"All test cases passed.\")\n\n-----\n2.  Input\n    7 6\n    asdza\n\nOutput\n    -1"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\", \"asdf\") == \"4\"\nassert solution(\"5 6\", \"aaaaa\") == \"15\"\nassert solution(\"5 7\", \"aaaaa\") == \"-1\"\nassert solution(\"10 100\", \"ajihiushda\") == \"233\"\n\"\"\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == 233\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution('4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'YES\\n1 2\\n1 3\\n4 1\\n2 3'\nassert solution('4 4 3\\n1 2\\n1 4\\n2 3\\n3 4') == 'NO'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n') == 'YES\\n2 1\\n2 3\\n3 4\\n'\nassert solution('4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n') == 'YES\\n1 2\\n1 3\\n4 1\\n'\n\"\"\"\nimport sys\nfrom math import ceil, floor\n\nsys.setrecursionlimit(10 ** 6)\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected_output\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == 'YES\\n1 2\\n1 4\\n4 1\\n3 2\\n2 3'\n\"\"\""
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n3 4\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n2 3\\n3 4\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n2 3\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\nassert solution(\"4 4 3\\n1 2\\n1 3\\n2 3\\n3 4\") == \"NO\"\n\n\"\"\"\nfrom collections import defaultdict, deque\nfrom typing import Dict, List, Set, Deque"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\"\n) == \"YES\\n2 1\\n2 3\\n3 4\"\n\nassert solution(\n    \"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\"\n) == \"YES\\n1 2\\n1 3\\n4 1\\n2 3\\n3 4\"\n\nassert solution(\n    \"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\"\n) == \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n2 1\\n2 3\\n3 4\\n\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n1 2\\n1 4\\n3 2\\n3 4\\n\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\\n\") == \"NO\\n\"\nassert solution(\"4 4 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"NO\\n\"\nassert solution(\"4 4 2\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"NO\\n\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(solution.test_cases[0]) == \"02:30\"\nassert solution(solution.test_cases[1]) == \"03:02\"\nassert solution(solution.test_cases[2]) == \"01:02\"\nassert solution(solution.test_cases[3]) == \"23:59\"\nassert solution(solution.test_cases[4]) == \"00:14\"\n\nprint('The local tests are done. Click on \"Check\" for more details about implementation.')\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:00\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\n\"\"\"\n\nh1, m1 = map(int, stdin.readline().split(\":\"))\nh2, m2 = map(int, stdin.readline().split(\":\"))\n\nresult = None"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:00') == '11:00'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\nassert solution('03:02') == '03:02'\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\nassert solution(\"03:02\") == \"03:02\"\nassert solution(\"11:10\") == \"11:11\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10:00 11:00\") == \"10:30\"\nassert solution(\"11:10 11:12\") == \"11:11\"\nassert solution(\"01:02 03:02\") == \"02:02\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10:00 11:00\") == \"10:30\"\nassert solution(\"11:10 11:12\") == \"11:11\"\nassert solution(\"01:02 03:02\") == \"02:02\"\n\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:30\"\nassert solution(\"11:10\") == \"11:11\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3) == \"1\"\nassert solution(8) == \"3\"\nassert solution(27) == \"5\"\nassert solution(42) == \"6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\n\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == 1\nprint(solution(\"2\"))\nassert solution(\"3\") == 2\nprint(solution(\"4\"))\nassert solution(\"5\") == 3\nprint(solution(\"6\"))\nassert solution(\"27\") == 5\nprint(solution(\"42\"))\nprint(solution(\"79\"))\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\nassert solution('1') == 1\n\"\"\"\n\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(2) == 1\n\n\"\"\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\nprint('Test pass.')\n\n---\nclass Solution:\n    def fizzBuzz(self, n: int) -> List[str]:\n        res = [str(i) for i in range(1, n+1)]\n        return res if n < 3 else [f'{i}' if i%3!=0 and i%5!=0 else 'FizzBuzz'[i//3%2::2] for i in range(1,n+1)]\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 1\n\"\"\"\n\na = int(input())\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"4\") == 2\nassert solution(\"27\") == 5\nassert solution(\"42\") == 6\n\nprint(\"Try to solve the problem by writing one line of code.\nDon't forget to check your solution!\")\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\nassert solution('64') == 10\n\"\"\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\nassert solution('1') == '1'\n\nassert solution('2') == '1'\n\nassert solution('3') == '2'\n\nassert solution('4') == '2'"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 5\") == \"7\"\nassert solution(\"4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"3 10\\n1 5\\n0 4\") == \"2\"\nassert solution(\"5 10\\n4 5\\n1 2\\n9 20\\n0 4\") == \"0\"\nassert solution(\"2 10\\n4 5\\n1 2\\n9 20\\n0 4\") == \"7\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4\n1 3\n2 6\n0 4\n3 3\n\"\"\") == '1'\n\nassert solution(\"\"\"\n5\n2 6\n1 3\n0 4\n1 20\n0 4\n\"\"\") == '2'\n\nassert solution(\"\"\"\n3\n4 5\n1 2\n9 20\n\"\"\") == '0'\n\nassert solution(\"\"\"\n2\n3 10\n1 5\n\"\"\") == '7'\n\nassert solution(\"\"\"\n2\n3 10\n1 5\n\"\"\") == '7'\n\"\"\""
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == '1'\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == '2'\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == '0'\nassert solution(\"2\\n3 10\\n1 5\") == '7'\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 3\\n2 6\\n0 4\\n3 3') == '1'\nassert solution('5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4') == '2'\nassert solution('3\\n4 5\\n1 2\\n9 20') == '0'\nassert solution('2\\n3 10\\n1 5') == '7'\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4') == '0'\nassert solution('3 2\\n1 5') == '2'\nassert solution('2 1\\n3 5') == '2'\n\n'''"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == '1\\n'\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == '2\\n'\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == '0\\n'\nassert solution(\"2\\n3 10\\n1 5\") == '7\\n'\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == '0\\n'\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 3\\n2 6\\n0 4\\n3 3') == '1\\n'\nassert solution('5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4') == '2\\n'\nassert solution('3\\n4 5\\n1 2\\n9 20') == '0\\n'\nassert solution('2\\n3 10\\n1 5') == '7\\n'\n\nassert solution('5\\n4 5\\n1 2\\n9 20\\n1 5') == '0\\n'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 1 2 5') == 'YES'\nassert solution('3 5 3') == 'NO'\nassert solution('10 10') == 'YES'\n\"\"\""
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'YES'\nassert solution('1\\n3\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\nassert solution('10\\n10') == 'NO'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\n\nimport unittest\nclass TestVova(unittest.TestCase):\n    def test_example(self):\n        assert solution('5\\n2 1 1 2 5') == 'YES'\n    def test_example2(self):\n        assert solution('3\\n4 5 3') == 'NO'\n    def test_example3(self):\n        "
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 1 1 2 5\\n\") == \"YES\"\nassert solution(\"3\\n4 5 3\\n\") == \"NO\"\nassert solution(\"2\\n10 10\\n\") == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5 3') == 'NO'\nassert solution('2 1 1 2 5') == 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 1 2 5\") == \"YES\"\nassert solution(\"5 2 1 2 5\") == \"YES\"\nassert solution(\"3 4 5\") == \"NO\"\nassert solution(\"10 10\") == \"YES\"\nassert solution(\"1 1 1 1 1\") == \"YES\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aaaaa') == '15'\nassert solution('asdf') == '4'\nassert solution('aaaaa') == '15'\nassert solution('a') == '1'\nassert solution('aaaaa') == '15'\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\najihiushda\") == 4\nassert solution(\"5 6\\naaaaa\") == 15\nassert solution(\"5 7\\naaaaa\") == -1\n\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == 233\nassert solution(\"zasdfasdf\") == -1\n\"\"\""
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"asdf\") == \"4\"\nassert solution(\"aaaaa\") == \"15\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"aaaaa\") == 15\nassert solution(\"aaaaa\") == 15\nassert solution(\"aaaaa\") == 15\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 asdf\") == \"4\"\nassert solution(\"5 6 ajihiushda\") == \"15\"\nassert solution(\"5 7 ajihiushda\") == \"-1\"\nassert solution(\"10 100 ajihiushda\") == \"233\"\n\n\n\n\n\"\"\""
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\", \"asdf\") == 4\nassert solution(\"5 6\", \"aaaaa\") == 15\nassert solution(\"5 7\", \"aaaaa\") == -1\n\n---"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"asdf\", 5, 4) == \"asdf\"\nassert solution(\"aaaaa\", 5, 4) == \"aaaaa\"\nassert solution(\"aaaaa\", 6, 5) == \"aaaaa\"\nassert solution(\"aaaaa\", 7, 6) == -1\nassert solution(\"aaaaa\", 7, 7) == -1\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\najihiushda\") == \"233\"\nassert solution(\"5 7\\naaaaa\") == \"-1\"\nassert solution(\"10 100\\najihiushda\") == \"233\"\n\"\"\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(s=\"ajihiushda\") == 233\n\n\"\"\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\n\n\"\"\"\n\nimport numpy as np\n\nn = list(map(int, input().split()))"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 100 1') == '3'\nassert solution('2 100 1') == '4'\nassert solution('30 20 10') == '39'\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n\n\"\"\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\n\nprint('The local tests are done. Click on \"Check\" to earn cool rewards!')\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 1\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\""
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1\") == '4'\nassert solution(\"3 2 2\") == '7'\nassert solution(\"1 100 1\") == '3'\nassert solution(\"30 20 10\") == '39'"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 1') == '4'\nassert solution('2 1 1') == '3'\nassert solution('1 100 1') == '3'\n\"\"\""
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1 1\\n') == \"4\"\nassert solution('2 1 1\\n') == \"3\"\nassert solution('3 2 2\\n') == \"7\"\nassert solution('1 100 1\\n') == \"3\"\nassert solution('30 20 10\\n') == \"39\"\n\"\"\"\n\na, b, c = list(map(int, input().split()))\n\nmax_days = max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\") == \"YES\"\nassert solution(\"6 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\") == \"NO\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\") == \"YES\"\nassert solution(\"6 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\") == 'YES'\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\") == 'NO'\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\") == 'YES'\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\") == 'NO'\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\") == 'YES'\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n1 1') == \"YES\"\nassert solution('3 4\\n1 2\\n5 6\\n5 7') == \"NO\"\nassert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n7 4') == \"NO\"\nassert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2') == \"YES\"\nassert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2') == \"NO\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4') == 'YES'\nassert solution('5 5') == 'NO'\n\"\"\"\n\nimport sys\nsys.path.insert(0, './../')\n\nimport unittest\nfrom ddt import ddt, data, unpack\nfrom src.ch_4 import solution\n\n\n@ddt\nclass TestCh4(unittest.TestCase):\n\n    @data(\n        ('3 4', 'YES'),\n        ('4 4', 'NO'),\n    )\n    @unpack\n    def test_solution(self, stdin: str, expected: str):\n        self.assertEqual(solution(stdin), expected)\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7\\n7 4\\n8 9\\n9 8\") == 'YES'\nassert solution(\"1 1\\n1 2\\n2 2\\n1 1\") == 'NO'\nassert solution(\"5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\") == 'NO'\nassert solution(\"5 8\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\") == 'YES'\n\n-----Big-O-----\n\nFor the given test cases:\n\nThe number of test cases is $t$ ($1 \\le t \\le 100$, $1 \\le n \\le 100$, $1 \\le m \\le 100$)\n\nThe number of types of tiles is $n$ ($1 \\le n \\le 100$)\n\nThe complexity is O(n^2)\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\\n\") == \"YES\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\\n\") == \"NO\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\\n\") == \"NO\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\\n\") == \"NO\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\\n\") == \"NO\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\") == \"YES\"\n\"\"\"\n\nfrom collections import defaultdict, deque"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4') == 'YES'\nassert solution('3 4') == 'NO'\nassert solution('1 2') == 'YES'\nassert solution('100 100') == 'NO'\nassert solution('1 1') == 'YES'\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n1 2\\n4 5\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2') == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 4\n1 2\n5 6\n5 7\n7 4\n8 9''') == 'YES'\nassert solution('''3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1''') == 'NO'\nassert solution('''3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1''') == 'NO'\nassert solution('''3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1''') == 'YES'\nassert solution('''3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1''') == 'NO'\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n\") == \"0\"\nassert solution(\"5\\n\") == \"1\"\nassert solution(\"6\\n\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"1\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '0'\nassert solution('5') == '1'\nassert solution('6') == '1'\n\nassert solution('1, 2, 3') == '0'\nassert solution('1, 3, 4, 5, 2, 6') == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n') == '0'\nassert solution('5\\n') == '1'\nassert solution('6\\n') == '1'"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n') == '0\\n'\nassert solution('5\\n') == '1\\n'\nassert solution('6\\n') == '1\\n'\n\n---\n\n'''"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n') == '0'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n') == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1\\n2\\n3\\n4\\n5') == '0'\nassert solution('5\\n1\\n2\\n3\\n4\\n5') == '1'\nassert solution('6\\n1\\n2\\n3\\n4\\n5') == '1'\n\"\"\"\nimport sys\n\nfrom stdin_get_number import get_int\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(((()))())\") == 4\nassert solution(\"(()(((()()((()())(())))((()))())(()))(()((()())(()()))(()((()())(()()))()((()))(()(())(((()(()()(((()))(((((()))())(()))(())((())((()))(((())(((()))(())(((()(((((((((((((((((((((()))(((((((((((((((((((()(((((())((()))()(())((()(((((((()(()(((())((((((((((((()()(((())))((())((()(((((()(((())((((((((((((((((((((((((((((((((((((((()(((((((((((()(())((((((((((((((((((((((((((((((((((((((((((((((((()(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"(())()\") == 4\nassert solution(\"(()((()())()))\") == 1\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"()))()\") == \"5\"\nassert solution(\"(()))()\") == \"4\"\nassert solution(\"((()))()\") == \"0\"\nassert solution(\"(()(()))()\") == \"4\"\nassert solution(\"())\") == \"0\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()))()\") == 4\nassert solution(\"((()))\") == 4\nassert solution(\"((((((()))))))\") == 0\nassert solution
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"()))()\") == \"5\"\nassert solution
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"()))()\") == \"5\"\nassert solution(\"(((()))\") == \"4\"\nassert solution(\"((((()))()\") == \"0\""
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()()))()\") == 4\nassert solution(\"((((()))()()()))\") == 10\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('()))()') == 5\nassert solution('(()))') == 4\nassert solution('()()())') == 1\nassert solution('()(()())') == 1\nassert solution('(()())()') == 4\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()))()\") == 4\nassert solution(\"((()))\") == 4\nassert solution(\"(()(()))\") == 4\nassert solution(\"()((()))\") == 4\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"((()))\") == 5\nassert solution(\"((()()))()\") == 2\nassert solution(\"(()(()))()\") == 0\nassert solution(\"()((()))()\") == 5\nassert solution(\"(()())\") == 4\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n\nprint(\"Test finished.\")\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\n\"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n5071\n\"\"\"\n) == \"4\"\n\"\"\"\n\n\"\"\"\n)"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5071\") == 4\nassert solution(\"705\") == 1\nassert solution(\"1241367\") == -1\n\n\n\n\"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"505\") == 1\nassert solution(\"1070\") == 1\nassert solution(\"505\") == 1\nassert solution(\"1070\") == 1\nassert solution(\"505\") == 1\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5071') == 4\nassert solution('705') == 1\nassert solution('1241367') == -1\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n\n\n----\n\n\u0418\u043d\u043e\u0433\u0434\u0430 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0434\u0430\u043d\u043d\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u043e \u0447\u0438\u0441\u043b\u043e, \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u044b \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u044e.\n\u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0430\u043f\u0438\u0448\u0435\u0442\u0435 \u043a\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0442\u043e \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0438 \u043f\u043e \u0434\u0440\u0443\u0433\u0438\u043c \u0441\u043b\u0443\u0447\u0430\u044f\u043c.\n\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0432\u043e\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438?\n\n\u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 N \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0435\u0435 \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430\u0446\u0435\u043b\u043e \u043d\u0430 25.\n\n\u041f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0430:\n\u041e\u0447\u0435\u043d\u044c \u043f\u0440\u043e\u0441\u0442\u043e! \u0412\u043e\u0442 \u043e\u0434\u043d\u0438 \u0441\u043f\u043e\u0441\u043e\u0431:\n\n\u0412 \u0432\u0430\u0448\u0435\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, 5071. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 num \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430 '5701'.\n\u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0443 '5701' \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c.\n\u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u043e 5701, \u043d\u0443\u0436\u043d\u043e \u0443\u043c\u043d\u043e\u0436\u0438\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0430 10 \u0438 \u043f\u0440\u0438\u0431\u0430\u0432\u0438\u0442\u044c \u043a \u043d\u0435\u043c\u0443 1. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u0441\u044f \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e res:\n\nres = num * 10 + 1\n\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 res \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c.\n\u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u043d\u0435 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430\u0446\u0435\u043b\u043e \u043d\u0430 25, \u0442\u043e\u0433\u0434\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0443:\n\n\"No solution\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacbecfd\") == \"2\"\nassert solution(\"aaabbcbb\") == \"2\"\nassert solution(\"abcdedc\") == \"3\"\nassert solution(\"abcde\") == \"1\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('aa') == '1'\nassert solution('ab') == '2'\nassert solution('aab') == '2'\nassert solution('abab') == '1 1 2 2'\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abracadabra\") == \"2 1 1 2 2 2 1 2 3 3 2 1 3 1 1 2 3 3\"\nassert solution(\"deeedbbcccbdaa\") == \"3 2 1 2 3 2 1 1 2 2 3 2 1 1 2 3 2 3\"\nassert solution(\"qqqqq\") == \"1 1 1 1 1 1\"\nassert solution(\"bcbabcbacd\") == \"3 2 1 2 1 2 3 3 3 3 1 1 1 1 2 3 3 2 3 1\"\nassert solution(\"bacbacbac\") == \"3 2 1 2 1 1 1 1 2 2 1 1 1 1\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abacbecfd') == '2'\nassert solution('aaabbcbb') == '2'\nassert solution('abcdedc') == '3'\nassert solution('abcde') == '1'"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacbecfd\") == \"2\"\n\nassert solution(\"aaabbcbb\") == \"2\"\n\nassert solution(\"abcdedc\") == \"3\"\n\nassert solution(\"abcde\") == \"1\"\n\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"26\"\n\nprint(\"OK\")"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(example1) == solution(example2)\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacbecfd\") == 2\nassert solution(\"aaabbcbb\") == 2\nassert solution(\"abcdedc\") == 3\nassert solution(\"abcde\") == 1\nassert solution(\"abbabbbc\") == 2\n\"\"\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacbecfd\") == \"2\"\nassert solution(\"aaabbcbb\") == \"2\"\nassert solution(\"abcdedc\") == \"3\"\nassert solution(\"abcde\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacbecfd\") == 2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcd\") == 1\nassert solution(\"aabcde\") == 2\nassert solution(\"abcde\") == 1\nassert solution(\"abcdef\") == 4\nassert solution(\"abcdedc\") == 2\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a\") == \"YES\"\nassert solution(\"aba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"ba\") == \"YES\"\nassert solution(\"aba\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\\n\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\\n\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\\n\"\nassert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\\n\") == \"NO\\n\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"qwerty\") == \"YES\"\nassert solution(\"qwerty\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\na\naba\nabacaba\nba\naba\n\n''') == 'YES\\na\\nba\\naba\\naba\\nabacaba'\n\nassert solution('''5\na\nabacaba\nba\naba\nabab\n\n''') == 'NO'\n\n\nassert solution('''3\nqwerty\nqwerty\nqwerty\n\n''') == 'YES\\nqwerty\\nqwerty\\nqwerty'\n\n\nassert solution('''5\na\nabacaba\nba\naba\nabab\n\n''') == 'NO'\n\n\nassert solution('''1\na\n\n''') == 'YES\\na'\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcd\\nabcd\") == \"YES\\nabcd\\nabcd\"\nassert solution(\"qwerty\\nqwerty\\nqwerty\") == \"YES\\nqwerty\\nqwerty\\nqwerty\""
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\\n\"\nassert solution(\"q\\nq\\nq\\n\") == \"YES\\nq\\nq\\nq\\n\"\nassert solution(\"qwerty\\nqwerty\\nqwerty\\n\") == \"YES\\nqwerty\\nqwerty\\nqwerty\\n\"\nassert solution(\"a\\nabacaba\\nba\\naba\\nabab\") == \"NO\""
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aba\") == \"YES\"\nassert solution(\"qwerty\") == \"NO\"\nassert solution(\"qwerty\") == \"NO\"\nassert solution(\"qwerty\") == \"YES\"\nassert solution(\"qwerty\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aba\\nabacaba\\nba\\na\\nabab\") == \"YES\\na\\nba\\na\\nabacaba\"\n\"\"\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\\n\"\nassert solution(\"qwerty\\nqwerty\\nqwerty\\n\") == \"YES\\nqwerty\\nqwerty\\nqwerty\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\n\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\n\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n\"\"\"\n\nn, k = map(int, input().split())\na = [int(i) for i in input().split()]"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 3 1 5 1 6 4') == 5\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(int(input()))\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 3 1 5 1 6 4') == 5\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''8 4\n4 2 3 1 5 1 6 4''') == '5'\nassert solution('''5 2\n3 1 2 1 3''') == '0'\nassert solution('''5 100\n12 34 55 43 21''') == '5'\nassert solution('''5 100\n11 9 11 9 11''') == '0'\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 4\") == \"5\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"5 100\") == \"5\"\n\"\"\"\n\n\nfrom math import ceil"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 3 1 5 1 6 4\") == 5\n\"\"\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '4 4'\n    ) == 12\n\nassert solution(\n    '3 9'\n    ) == 14\n\nassert solution(\n    '9 3'\n    ) == 14\n\nassert solution(\n    '506 2708'\n    ) == 3218\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n\n\"\"\""
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n\nprint(\"Successfully tested.\")"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4') == '12'\nassert solution('4 6') == '12'\nassert solution('6 9') == '14'\nassert solution('1 9') == '14'\nassert solution('9 3') == '14'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n\"\"\"\n\na, b = map(int, input().split())\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '2'\nassert solution('2 3') == '3'\nassert solution('4 6') == '6'\nassert solution('4 4') == '0'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcd\") == \"0110\"\n\n-----\nInput\n4\nacd\n\nOutput\nYES\n11\n\nInput\n3\nabc\n\nOutput\nYES\n11\n\nInput\n2\nab\n\nOutput\nNO\n\nInput\n1\na\n\nOutput\nYES\n01\n\n-----\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcd\") == \"YES\"\nassert solution(\"aabcde\") == \"YES\"\nassert solution(\"ababcbac\") == \"NO\"\nassert solution(\"abcbacd\") == \"YES\"\nassert solution(\"abcbacde\") == \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacbecfd\") == 'YES'\nassert solution(\"aaabbcbb\") == 'YES'\nassert solution(\"abcde\") == 'YES'\nassert solution(\"abcdeeef\") == 'NO'\nassert solution(\"abcdedc\") == 'YES'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abacbecfd') == 'YES\\n001010101'\nassert solution('aaabbcbb') == 'YES\\n01011011'\nassert solution('abcde') == 'YES\\n00000'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcdedc\") == \"YES\", \"case1, stdout: 11\"\nassert solution(\"aaabbcbb\") == \"YES\", \"case2, stdout: 1011\"\nassert solution(\"abacbecfd\") == \"NO\", \"case3, stdout: No\"\nassert solution(\"abc\") == \"YES\", \"case4, stdout: 00\"\nassert solution(\"abac\") == \"YES\", \"case5, stdout: 0101\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abacbecfd') == 'YES'\nassert solution('abcdedc') == 'YES'\nassert solution('abcde') == 'YES'\nassert solution('aaaabbbb') == 'NO'\nassert solution('aaabbcbb') == 'YES'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aaabbcbb\") == \"YES\"\nassert solution(\"abacbecfd\") == \"YES\"\nassert solution(\"abcdedc\") == \"NO\"\nassert solution(\"abcde\") == \"YES\"\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\n\"\"\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacbecfd\") == \"NO\"\nassert solution(\"aaabbcbb\") == \"YES\"\nassert solution(\"abcdedc\") == \"NO\"\nassert solution(\"abcde\") == \"YES\"\nassert solution(\"a\") == \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'NO'\nassert solution('abcde') == 'YES'\nassert solution('abcd') == 'NO'\nassert solution('abcc') == 'NO'\nassert solution('abb') == 'NO'\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n\") == \"25\\n\"\nassert solution(\"1 1\\n\") == \"-1\\n\"\nassert solution(\"2 2\\n\") == \"25\\n\"\nassert solution(\"1 1\\n\") == \"-1\\n\"\nassert solution(\"1 5\\n\") == \"10\\n\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2') == 25\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '2 2'\n) == '25'\n\nassert solution(\n    '2 3'\n) == '5'\n\nassert solution(\n    '4 7'\n) == '-1'"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"1 1\") == \"-1\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"25\"\n\"\"\"\n\n\"\"\"\nProblem\n\nFind the lowest price before tax that gives the amount of consumption tax to be A yen and B yen, respectively.\n\nConstraints\n\n1 \u2264 A \u2264 B \u2264 100\n\nInput\n\nA B\n\nOutput\n\nThe lowest price before tax that gives the amount of consumption tax to be A yen and B yen, respectively.\n\nSample Input\n\n2 2\n\nSample Output\n\n25\n\"\"\""
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"./input.txt\") == \"26\"\n\"\"\"\n\nimport sys\n\nimport math\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"25\"\n\n---\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n\") == \"25\"\nassert solution(\"1 1\\n\") == \"-1\"\nassert solution(\"1 10\\n\") == \"10\"\nassert solution(\"10 10\\n\") == \"10\"\nassert solution(\"100 100\\n\") == \"100\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n\") == '25'\nassert solution(\"1 10\\n\") == '-1'\nassert solution(\"4 10\\n\") == '5'\nassert solution(\"2 8\\n\") == '6'\nassert solution(\"1 1\\n\") == '1'\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"25\"\n\"\"\""
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2') == 'YES\\n1 2'\nassert solution('4 1') == 'YES\\n1'\nassert solution('8 3') == 'NO'\nassert solution('10 3') == 'NO'\nassert solution('6 4') == 'YES\\n3 2 1'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('26 6') == 'YES'\nassert solution('8 3') == 'NO'\nassert solution('1 1') == 'YES'\nassert solution('9 4') == 'NO'\n\nprint(solution('26 6'))\nprint(solution('8 3'))\nprint(solution('1 1'))\nprint(solution('9 4'))\n\"\"\"\n\nn, k = [int(i) for i in input().split()]\n\nnum = [0] * k\nl = 0\n\nfor i in range(k):\n    num[i] = int(input())\n\nfor i in range(1, k):\n    if num[i - 1] >= num[i] <= 2 * num[i - 1]:\n        l += 1"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"26 6\") == \"YES\\n1 2 4 5 6 8\"\nassert solution(\"8 3\") == \"NO\\n\"\nassert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"9 4\") == \"NO\\n\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 6\") == \"NO\"\nassert solution(\"8 3\") == \"YES\\n1 2 4 5 6 8\"\nassert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"9 4\") == \"NO\"\nassert solution(\"1 1\") == \"YES\\n1\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"26 6\\n1 2 4 5 6 8\\n\") == \"YES\\n1 2 4 5 6 8\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"26 6\") == \"YES\\n1 2 4 5 6 8\"\nassert solution(\"8 3\") == \"NO\\n\"\nassert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"9 4\") == \"NO\\n\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n2 2\\n3 3\\n4 4\\n5 5') == 'YES\\n1 1 2 3 3 4\\n'\nassert solution('1 2\\n2 1\\n2 3\\n3 1\\n3 2\\n3 3\\n4 4\\n5 5') == 'YES\\n1 1 2 3 2 3 3\\n'\nassert solution('1 2\\n2 1\\n2 3\\n3 1\\n3 2\\n3 3\\n4 4\\n5 5') == 'YES\\n1 1 2 3 2 3\\n'\nassert solution('1 2\\n2 1\\n2 3\\n3 1\\n3 2\\n3 3\\n4 4\\n5 5') == 'YES\\n1 1 2 3 2 3\\n'\nassert solution('1 2\\n2 1\\n2 3\\n3 1\\n3 2\\n3 3\\n4 4\\n5 5') == 'YES\\n1 1 2 3 2 3\\n'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('26 6') == 'YES\\n1 2 4 5 6 8'\n\n-----Explanation-----\n\nThe array [1, 2, 4, 5, 6, 8] satisfies all the conditions of the problem, so this is the answer.\n\n\"\"\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 6\") == \"YES\"\nassert solution(\"8 6\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''8 9\n1 2 3 4 5 6 7 8''') == '''YES\n1 2 4 5 6 7 8 \n'''\n\nassert solution('''7 7\n1 2 3 4 5 6 7''') == '''NO\n'''\n\nassert solution('''10 10\n1 2 3 4 5 6 7 8 9 10''') == '''YES\n1 2 3 4 5 6 7 8 9 10 \n'''\n\nassert solution('''3 2\n1 2 3''') == '''NO\n'''\n\nassert solution('''9 9\n1 2 3 4 5 6 7 8 9''') == '''YES\n1 2 3 4 5 6 7 8 9 \n'''"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == '3'\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == '3'\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == '5'\n\nassert solution('3 4\\n1 -1\\n4 3') == '0'\nassert solution('3 4\\n1 -1\\n4 3\\n1 3') == '1'\nassert solution('3 4\\n4 6\\n10 -2\\n8 -1\\n1 -1\\n4 3\\n1 3') == '3'\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\n\n\"\"\"\n\nn, r = map(int, input().split())\n\narr = []\nfor _ in range(n):\n    a, b = map(int, input().split())\n    arr.append((a, b))\n\ndp = [0 for _ in range(r + 1)]\ndp[0] = 1\n\nfor a, b in arr:\n    for i in range(r + 1):\n        if dp[i] == 0:\n            continue\n        if i + a <= r:\n            dp[i + a] = max(dp[i + a], dp[i] + 1)\n        if i + b <= r:\n            dp[i + b] = max(dp[i + b], dp[i])\n\nprint(max(dp))\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == '3'\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == 3\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(sol(input()))"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\""
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('1 2\\n3 4') == 3"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\nprint(solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\"))"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\n\"\"\""
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\\n\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\\n\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\\n\") == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\\n\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\\n\") == \"NO\\n\"\n\n\"\"\"\nfrom __future__ import annotations\n\nfrom collections import defaultdict\nfrom dataclasses import dataclass, field\nfrom itertools import permutations\nfrom typing import Iterator, NamedTuple, Sequence\n\n\n@dataclass\nclass Matrix:\n    n: int\n    data: tuple[int,...]\n\n    @property\n    def rows(self) -> Iterator[Sequence[int]]:\n        return iter(self.data)\n\n    @property\n    def cols(self) -> Iterator[Sequence[int]]:\n        return iter(tuple(row) for row in self.data)\n\n    def transpose(self) -> Matrix:\n        return Matrix(self.n, tuple(zip(*self.data)))\n\n    def reverse(self) -> Matrix:\n        return Matrix(self.n, tuple(reversed(self.data)))\n\n    def transposed(self) -> Matrix:\n        return Matrix(self.n, tuple(zip(*self.data)))\n\n    def reversed(self) -> Matrix:\n        return Matrix(self.n, tuple(reversed(self.data)))\n\n    def __repr__(self) -> str:\n        return f\"{self.data}\"\n\n\n@dataclass\nclass Solution:\n    n: int\n    matrix: Matrix\n\n    def has_pair(self) -> bool:\n        # Transpose matrix and check if matrix[i][j] is the same as matrix[j][i].\n        transposed = self.matrix.transpose()\n        return all(self.matrix.data[i][j] == transposed.data[j][i] for i, j in permutations(range(self.n), 2))\n\n    def has_palindrome(self) -> bool:\n        # Transpose matrix and check if reversed matrix is palindrome.\n        reversed_matrix = self.matrix.reversed()\n        return self.matrix.has_pair() and reversed_matrix.has_pair()\n\n    def is_palindrome(self) -> bool:\n        # Check if each number is the same in each row and each column.\n        return all(self.matrix.data[i][j] == self.matrix.data[j][i] for i, j in permutations(range(self.n), 2))\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\n    \"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\n    \"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\n\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\n\n\n'''"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'NO'\nassert solution('1') == 'YES'\nassert solution('1 1 1 1 1 3 3 3 3') == 'YES'\nassert solution('1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'YES'\nassert solution('1 1 1 1 1 3 3 3 3') == 'YES'\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'NO'\nassert solution('1\\n10') == 'YES\\n10'\nassert solution('6\\n7 2 9 1 8 7 3 2 9 3 9 5 3') == 'NO'\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"4\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3\") == \"YES\\n1 3 1\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\nassert solution(\"4\\n2 3 4 1 2\") == \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\n\n\n-----SOLUTION-----\nn = int(input())"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"\nassert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 'YES'\nassert solution('3 5\\n4 -5\\n4 -2\\n1 3\\n') == 'YES'\nassert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n') == 'YES'\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"YES\"\n\"\"\"\n\n\n\"\"\"\nThis problem is the same as the solution to the problem Minimum Swaps to Make the Array Increasing. We can use the same approach, but the idea is to keep track of the \"quality\" of the array to start with.\n\"\"\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\nassert solution(\"4 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n\n-----Test2-----\n\nInput\n4 4\n5 2\n5 -3\n2 1\n4 -2\n\nOutput\nYES\n\nInput\n4 4\n5 2\n5 -3\n2 1\n4 -2\n\nOutput\nYES\n\nInput\n3 5\n5 2\n5 -3\n2 1\n4 -2\n\nOutput\nNO\n\n-----Test3-----\n\nInput\n1 5\n5 2\n5 -3\n2 1\n4 -2\n\nOutput\nYES\n\n-----Test4-----\n\nInput\n3 10\n10 0\n10 -10\n30 0\n\nOutput\nNO\n\n-----Test5-----\n\nInput\n3 10\n10 0\n10 -10\n30 0\n\nOutput\nNO\n\n-----Test6-----\n\nInput\n1 4\n4 1\n4 -1\n\nOutput\nYES\n\n\"\"\""
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\") == \"NO\"\n\n\"\"\"\n\nimport sys\n\n\nclass Vertex:\n    def __init__(self, key):\n        self.id = key\n        self.connectedTo = {}\n        self.color = 'white'\n        self.dist = sys.maxsize\n        self.pred = None\n        self.disc = 0\n        self.fin = 0\n\n    def addNeighbor(self, nbr, weight=0):\n        self.connectedTo[nbr] = weight\n\n    def setColor(self, color):\n        self.color = color\n\n    def setDistance(self, d):\n        self.dist = d\n\n    def setPred(self, p):\n        self.pred = p\n\n    def setDiscovery(self, dtime):\n        self.disc = dtime\n\n    def setFinish(self, ftime):\n        self.fin = ftime\n\n    def getFinish(self):\n        return self.fin\n\n    def getDiscovery(self):\n        return self.disc\n\n    def getPred(self):\n        return self.pred\n\n    def getDistance(self):\n        return self.dist\n\n    def getColor(self):\n        return self.color\n\n    def getConnections(self):\n        return self.connectedTo.keys()\n\n    def getWeight(self, nbr):\n        return self.connectedTo[nbr]\n\n    def __str__(self):\n        return str(self.id) + \":color \" + self.color + \":disc \" + str(self.disc) + \":fin \" + str(self.fin) + \":dist \" + str(self.dist) + \":pred \\n\\t[\" + str(self.pred) + \"]\\n\"\n\n\nclass Graph:\n    def __init__(self):\n        self.vertList = {}\n        self.numVertices = 0\n\n    def addVertex(self, key):\n        self.numVertices = self.numVertices + 1\n        newVertex = Vertex(key)\n        self.vertList[key] = newVertex\n        return newVertex\n\n    def getVertex(self, n):\n        if n in self.vertList:\n            return self.vertList[n]\n        else:\n            return None\n\n    def __contains__(self, n):\n        return n in self.vertList\n\n    def addEdge(self, f, t, cost=0):\n        if f not in self.vertList:\n            nv = self.addVertex(f)\n        if t not in self.vertList:\n            nv = self.addVertex(t)\n        self.vertList[f].addNeighbor(self.vertList[t], cost)\n\n    def getVertices(self):\n        return self.vertList.keys()\n\n    def __iter__(self):\n        return iter(self.vertList.values())\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 4\n5 2\n5 -3\n2 1\n4 -2''') == 'YES'\nassert solution('''3 10\n10 0\n10 -10\n30 0''') == 'NO'\nassert solution('''3 4\n4 6\n10 -2\n8 -1''') == 'YES'\nassert solution('''4 4\n5 2\n5 -3\n2 1\n4 -2''') == 'YES'"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 10\"\n) == \"YES\"\nassert solution(\n    \"3 4\"\n) == \"YES\"\nassert solution(\n    \"4 -5\"\n) == \"YES\"\nassert solution(\n    \"4 -2\"\n) == \"YES\"\nassert solution(\n    \"1 3\"\n) == \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(7) + '\\n' + str(3) + '\\n' + str([1, 2, 1])) == 'YES\\n0 1 0 2 2 0 3 '\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0\"\n\nprint(\"It is all good. Let's check it now\")\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\""
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\n\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\n\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n\nassert solution(\"100 1 5\\n1\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n\nassert solution(\"100 1 100\\n1\") == \"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 3 2\\n1 2 1') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('10 1 11\\n1') == 'YES\\n0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5\\n2') == 'YES\\n0 0 0 0 1 1 0 0 0 0'\nassert solution('100 3 19\\n18 21 6 8') == 'NO'\nassert solution('100 1 100\\n2') == 'YES\\n0 0 0 0 1 1 0 0 0 0'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7 3 2\n1 2 1''') == 'YES\\n0 1 0 2 2 0 3 '\nassert solution('''10 1 11\n1''') == 'YES\\n0 0 0 0 0 0 0 0 0 1 '\nassert solution('''10 1 5\n2''') == 'YES\\n0 0 0 0 1 1 0 0 0 0 '\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 3 2\\n1 2 1') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('10 1 11\\n1') == 'YES\\n0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5\\n2') == 'YES\\n0 0 0 0 1 1 0 0 0 0'\nassert solution('7 3 2\\n1 2 1\\n3') == 'NO'\nassert solution('10 1 11\\n1\\n3') == 'NO'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 1 11') == 'YES\\n0 0 0 0 0 0 0 0 0 1')\nassert solution('10 1 5') == 'YES\\n0 0 0 0 1 1 0 0 0 0')"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0\""
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('test') == 'tst'\nassert solution('asdfasdf') == 'asd'\n\"\"\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abbabab') == 3\nassert solution('bb') == 1\nassert solution('abcdef') == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('bbaba') == 3\nassert solution('baaba') == 2\nassert solution('abcde') == 0\nassert solution('asdfasdf') == 3\nassert solution('aaaaa') == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"test\") == \"3\"\nassert solution(\"tst\") == \"3\"\nassert solution(\"tt\") == \"2\"\nassert solution(\"et\") == \"3\"\nassert solution(\"\") == \"0\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcdefg\", \"fghij\") == 3\nassert solution(\"abcdefg\", \"fghijklmnopqrst\") == 0\nassert solution(\"abcdefg\", \"fghij\") == 3\nassert solution(\"abcdefg\", \"fghijklmnopqrstuvwxyz\") == 0\nassert solution(\"abcdebf\", \"dbgfe\") == 1\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abcde') == '3', f'Expected 3 but got {solution(\"abcde\")}'\nassert solution('asdfasdf') == '3', f'Expected 3 but got {solution(\"asdfasdf\")}'\nassert solution('aa') == '0', f'Expected 0 but got {solution(\"aa\")}'\nassert solution('bb') == '0', f'Expected 0 but got {solution(\"bb\")}'\nassert solution('a') == '0', f'Expected 0 but got {solution(\"a\")}'\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"test\") == \"t\"\nassert solution(\"tst\") == \"tt\"\nassert solution(\"tt\") == \"\"\nassert solution(\"et\") == \"e\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('ab') == ''\nassert solution('abcd') == ''\nassert solution('abc') == ''\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('bbaba') == 3\nassert solution('bb') == 1\nassert solution('a') == 0\nassert solution('sadfasdf') == 3\nassert solution('asdfasdf') == 3\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 2\nassert solution(\"baaba\") == 2\nassert solution(\"abcde\") == 0\n\"\"\"\n\nimport collections\n\n\nclass Solutions:\n    def solution(self, s1: str, s2: str) -> int:\n        i, j = 0, 0\n        while i < len(s1) and j < len(s2):\n            if s1[i] == s2[j]:\n                i += 1\n            j += 1\n        return len(s1) - i\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(2.572479)) == \"10 3\"\nassert solution(str(4.024922)) == \"9 9\"\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\""
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2.572479') == '10 3'\nassert solution('1.200000') == '3 2'\nassert solution('4.024922') == '9 9'\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\n\nprint(solution(stdin.strip()))\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4.024922\") == '9 9'\n\n\n-----Problem-----\n\nThe function accepts a string, which is the number in base 10, and converts it to the base which is equal to 10. Your function should return the base, as well as the number in the new base.\n\n---Constraints---\n\nThe number is given in the string format.\nThe number is between 0.000001 and 5.0, inclusive.\nThe base is between 2 and 36, inclusive.\nIt is guaranteed that the string is valid for the specified base.\nIt is guaranteed that the number is a valid base 10 number.\nThe number is a valid base 10 number.\nIt is guaranteed that the string will be valid after you convert it.\nYou can assume that all letters in the string are in lower case.\nYou can assume that all spaces in the string are the same.\n\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4.024922') == '9 9'\nassert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''6 3 3''') == 'YES\nassert solution('''6 2 3''') == 'NO\nassert solution('''10 4 3''') == 'YES\nassert solution('''8 5 3''') == 'YES\n'''"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3 3\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3 3\\n\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\\n\"\n\nassert solution(\"10 4 3\\n\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\\n\"\n\nassert solution(\"8 5 3\\n\") == \"YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7\\n\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3 3\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\"\n\nassert solution(\"6 2 3\") == \"NO\"\n\nassert solution(\"10 4 3\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\n\n\"\"\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 3 3\\n') == 'YES'\nassert solution('10 4 3\\n') == 'YES'\nassert solution('8 5 3\\n') == 'YES'\nassert solution('6 2 3\\n') == 'NO'\nassert solution('8 4 3\\n') == 'NO'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''6 3 3''') == 'YES'\nassert solution('''6 2 3''') == 'NO'\nassert solution('''10 4 3''') == 'YES'\nassert solution('''8 5 3''') == 'YES'\nassert solution('''8 5 4''') == 'NO'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 3\\n\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\\n\"\nassert solution(\"6 2 3\\n\") == \"NO\\n\"\nassert solution(\"10 4 3\\n\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\\n\"\nassert solution(\"8 5 3\\n\") == \"YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7\\n\"\nassert solution(\"8 10 3\\n\") == \"NO\\n\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\""
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 2\") == \"1100\"\nassert solution(\"2 2 2\") == \"101100\"\nassert solution(\"2 1 1\") == \"110010\"\nassert solution(\"1 3 1\") == \"111010\"\nassert solution(\"1 2 1\") == \"111010\""
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 1\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\"\nassert solution(\"2 2 1\") == \"1100\"\nassert solution(\"1 1 1\") == \"11\"\nassert solution(\"1 100 100\") == \"101101\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11101\") == \"01010\"\nassert solution(\"101110\") == \"01010\"\nassert solution(\"1110111\") == \"101101\"\nassert solution(\"1111111111111111111111111111111111\") == \"1110111111111111111111111111111110\"\nassert solution
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"01010\") == \"1100\"\nassert solution(\"111001\") == \"110100\"\nassert solution(\"11010\") == \"101100\"\n\n\"\"\""
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11101110\") == \"1100110011001100110011110\"\nassert solution(\"01110\") == \"111011100110011001100110011001100110011001100110011001100110011001100110011001100111010\"\nassert solution(\"0111\") == \"1110111001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001110\"\nassert solution
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1\") == \"1100\"\nassert solution(\"2 3 1\") == \"101100\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11 1 0') == '1101'\nassert solution('11 2 0') == '1110'\nassert solution('11 3 0') == '1111'\nassert solution('11 4 0') == '11110'\nassert solution('11 5 0') == '11111'\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '101100'\nassert solution('3 2 1') == '111010'\nassert solution('5 3 6') == '01010100'\n\n\"\"\""
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"102030\") == \"101010\"\n\"\"\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_data) == test_solution\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"bb\"\n\"\"\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ab') == 'ac'\nassert solution('ca') == 'bb'\nassert solution('bb') == 'cc'\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"bb\"\nassert solution(\"bb\") == \"bc\"\n\"\"\"\n\n\"\"\"\nn = int(input())\ns, t = input(), input()"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"cb\"\nassert solution(\"bb\") == \"bc\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bc\") == \"cb\"\nassert solution(\"ca\") == \"cab\"\nassert solution(\"cc\") == \"ccc\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ab\") == \"cac\"\nassert solution(\"ca\") == \"cbac\"\nassert solution(\"bb\") == \"cbacbc\"\nassert solution(\"bc\") == \"cbac\"\nassert solution(\"cb\") == \"cbac\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ab\") == \"acb\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ab\") == \"acb\"\nassert solution(\"ca\") == \"cab\"\nassert solution(\"bb\") == \"cba\"\n\nassert solution(\"ab\") == \"cba\"\nassert solution(\"ca\") == \"cab\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aa\") == \"cacbacbab\"\n\"\"\"\n\nn = int(input())\ns = input()\nt = input()\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ab') == 'ac'\nassert solution('ca') == 'bb'\nassert solution('bb') == 'ca'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"5 1 2 4\") == \"5 1 4 2\"\nassert solution(\"4 1 2 3\") == \"4 1 3 2\"\n\nprint(\"Success\")\n\n-----\n\n\u041f\u043e\u043b\u0438\u043a\u0430\u0440\u043f \u0441\u043e\u0437\u0434\u0430\u043b \u0441\u0432\u043e\u0439 \u0448\u0438\u0444\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u043b\u0438\u0433\u0430\u0440\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0437\u0430\u043c\u0435\u043d\u044b. \u041f\u043e\u043b\u0438\u043a\u0430\u0440\u043f \u0437\u0430\u043f\u0438\u0441\u0430\u043b \u0432 \u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0441\u0432\u043e\u044e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0430\u043b\u0438 \u043d\u0430 \u0432\u0445\u043e\u0434\u0435. \u0412 \u043e\u0431\u0449\u0435\u043c \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u043f\u043e\u043b\u0438\u0433\u0430\u0440\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u043c\u0435\u043d\u0430, \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043d\u0430\u0437\u043e\u0432\u0435\u043c \u044d\u0442\u043e \u043f\u043e\u043b\u0438\u0433\u0430\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0437\u0430\u043c\u0435\u043d\u043e\u0439. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u043b\u0438\u0433\u0430\u0440\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0437\u0430\u043c\u0435\u043d\u044b \u0434\u043b\u044f \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u043f\u0440\u0438\u043a\u043e\u043b\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0441\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f, \u043e\u043d \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n\u041f\u043e\u043b\u0438\u043a\u0430\u0440\u043f \u0437\u0430\u043f\u0438\u0441\u0430\u043b \u0432 \u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0430\u043b\u0438 \u043d\u0430 \u0432\u0445\u043e\u0434\u0435. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 -1 \u0434\u043e $n-1$ (\u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e). \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0431\u0443\u0434\u0435\u043c \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043e\u043a, \u0433\u0434\u0435 \u043a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u2014 \u044d\u0442\u043e \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0430\u044f \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u0415\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432 \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u0438\u043d\u0434\u0435\u043a\u0441 \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445, \u0442\u043e \u043e\u043d\u0430 \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u043f\u043e\u043b\u0438\u0433\u0430\u0440\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0437\u0430\u043c\u0435\u043d\u044b. \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u043e\u043b\u0438\u0433\u0430\u0440\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0437\u0430\u043c\u0435\u043d\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043e\u0441\u0442\u0430\u0442\u044c\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0438\u0437 \u043d\u043e\u043b\u0435\u0439 \u0438 \u0435\u0434\u0438\u043d\u0438\u0446. \u041f\u043e\u043b\u0438\u043a\u0430\u0440\u043f \u0437\u0430\u043f\u0438\u0441\u0430\u043b \u043f\u043e\u043b\u0438\u0433\u0430\u0440\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0437\u0430\u043c\u0435\u043d\u0443 \u0432 \u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0441\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043d\u0430\u0439\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0443, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0443\u044e \u0438\u0437 $n-1$ \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043f\u043e\u043b\u0438\u0433\u0430\u0440\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0437\u0430\u043c\u0435\u043d\u043e\u0439, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0438 \u0441\u0438\u043c\u0432\u043e\u043b \u0437\u0430\u043c\u0435\u043d\u044b. \u0415\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0435 \u043f\u043e\u043b\u0438\u0433\u0430\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0437\u0430\u043c\u0435\u043d\u0430, \u0442\u043e \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 \u2014 \u0447\u0438\u0441\u043b\u043e $-1$, \u0430 \u0437\u0430\u0442\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0442 \u0434\u043b\u044f \u043f\u043e\u043b\u0438\u0433\u0430\u0440\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0437\u0430\u043c\u0435\u043d\u044b.\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e $n$, \u043e\u0431\u043e\u0437\u043d\u0430\ufffd"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"5 1 4 -2\") == \"5 1 4 2 3\"\nassert solution(\"4 1 -1\") == \"4 1\"\nassert solution(\"1 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"1 1 1\") == \"1 2 3 4\"\n\"\"\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"5 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"4 1 2\") == \"-1\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n-1 2 2\") == \"1 2 3 4 5\"\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"\n\"\"\""
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 1 2') == '3 1 2'\nassert solution('5\\n1 1 1 1') == '1 2 3 4 5'\nassert solution('5\\n1 1 1 1') == '1 2 3 4 5'\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n-2 1\") == \"3 1 2\"\n\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"\n\nassert solution(\"4\\n-1 2 2\") == \"-1\"\nassert solution(\"5\\n-1 2 2\") == \"2 1 3 4 5\"\nassert solution(\"6\\n-1 2 2\") == \"2 1 3 4 5 6\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n4 3 2 1 6 5\") == \"5 1 2 3 4 6\"\nassert solution(\"4\\n1 1 1 1\") == \"1 2 3 4\"\nassert solution(\"3\\n-1 2\") == \"1 2\"\nassert solution(\"6\\n4 3 2 1 6 5\") == \"5 1 2 3 4 6\"\nassert solution(\"3\\n-1 2\") == \"1 2\""
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n\"\"\""
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"5 1 2\") == \"5 1 2\"\nassert solution(\"4 1 2\") == \"4 2 1\"\n\"\"\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\n\nassert solution(\"5 1 2\") == \"5 1 2\"\n\nassert solution(\"5 1 1 1\") == \"1 2 3 4 5\"\n\nassert solution(\"5 1 -1\") == \"1 2 3 4 5\"\nassert solution(\"5 1 -2\") == \"1 3 4 5\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\nassert solution('9\\n9 9 9 9 9 9 9 9 9 9') == '0'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\nassert solution('4\\n1 2 3 4') == '1'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 4 1 2\") == \"0\"\nassert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\""
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 2 2 3 3\") == \"2\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n\"\"\"\n\nn = int(stdin.readline().strip())\ncoordinate = list(map(int, stdin.readline().strip().split(' ')))\n\ncoordinate.sort()"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3\\n') == '1'\nassert solution('5\\n2 2 2 3 3\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"5\"\nassert solution(\"5\") == \"0\"\n\n'''"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''10''') == '''5'''\nassert solution('''100''') == '''25'''\n\n-----\n'''\n\nfor line in stdin.split('\\n'):\n    if line!= '':\n        n = line\n\nprint(len(n) // 2)\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(10) == 5\nassert solution(20) == 8\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"5\"\nprint(solution(\"10\"))\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"5\"\nassert solution(\"100\") == \"10\"\nassert solution(\"10000\") == \"50\"\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n\nimport math\n\nN = int(input())\n\nmin_moves = int(math.log2(N))\nprint(min_moves)\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == '5'\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == '5'\nassert solution('1') == '0'\nassert solution('2') == '0'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"5\"\nassert solution(\"5\") == \"5\"\nassert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == '5'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"15\\n5 5 5\\n5 5 5\") == \"0 15\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n\n\"\"\""
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1'\nassert solution('15\\n5 5 5\\n5 5 5') == '0 15'\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334'\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 0 0\") == \"0 1\"\nassert solution(\"5 5 5\") == \"0 15\"\nassert solution(\"0 1 1\") == \"0 1\"\nassert solution(\"1 1 0\") == \"1 1\"\nassert solution(\"3 3 3\") == \"0 15\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1\") == \"0 1\"\nassert solution(\"1 1 0\") == \"1 1\"\nassert solution(\"3 5 6\") == \"0 0\"\nassert solution(\"1 0 1 0\") == \"0 1\"\nassert solution(\"1 0 1 0 1 0 0 1 1 0 1 1 0 0 1 1 0 1 1 0 0 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 0 0') == '3 3'\nassert solution('2 1 1') == '0 1'\nassert solution('1 1 1') == '1 2'\nassert solution('4 4 6') == '0 6'\nassert solution('1 1 1') == '1 2'\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1'\nassert solution('15\\n5 5 5\\n5 5 5') == '0 15'\nassert solution('3\\n0 0 3\\n3 0 0') == '3 3'\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334'\n\"\"\""
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"0 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n\"\"\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 0 1 1\") == \"0 1\"\nassert solution(\"1 1 0\") == \"0 1\"\nassert solution(\"3 0 0\") == \"3 3\"\nassert solution(\"0 0 3\") == \"0 1\"\nassert solution(\"1 1 0\") == \"0 1\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 0 0') == '0 1'\nassert solution('0 1 1') == '0 1'\nassert solution('3 2 3') == '1 2'\nassert solution('5 5 5') == '0 15'\nassert solution('5 5 5') == '0 15'\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"1\\n1 0 1\\n1 1 0\") == \"0 1\"\nassert solution(\"15\\n5 5 5\\n5 5 5\") == \"0 15\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"3 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n\n\"\"\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3\\n') == '3\\n7 7\\n2 3\\n4 5\\n'\n\"\"\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 2 2 1 5 3\\n') == '3\\n7 7\\n2 3\\n4 5'\n\nsolution(stdin)"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\\n4 5\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\\n2 2\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\\n1 1\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\\n2 2\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10000)"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\\n\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\\n\") == \"2\\n3 4\\n1 1\\n2 2\\n\"\nassert solution(\"4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\\n\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\nassert solution('4\\n1 1 1 1') == '4'\n\"\"\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\"\nassert solution(\"4\\n1 1\") == \"1\\n1 1\"\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\nA = list(map(int, sys.stdin.readline().strip().split()))\n\nA.sort()\n\nresult = {}\n\nfor i in range(N - 1, -1, -1):\n    for j in range(i - 1, -1, -1):\n        if A[i] + A[j] not in result:\n            result[A[i] + A[j]] = [(i, j)]\n        else:\n            result[A[i] + A[j]].append((i, j))\n\n    if A[i] in result:\n        for j in result[A[i]]:\n            if i in j:\n                result[A[i]].append((i, j[0]))\n                result[A[i]].append((i, j[1]))\n\nfor i in sorted(list(result.keys())):\n    for j in result[i]:\n        if i == j[0] + j[1] and j[0] < j[1]:\n            print(j[0] + 1, j[1] + 1)\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"7 4 1 2 2 1 5 3\") == \"3\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\\n\") == \"2\\n3 4\\n1 1\\n2 2\"\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\\n\") == \"2\\n3 4\\n1 1\\n2 2\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\\n4 5\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 2') == 'NO'\nassert solution('3 1 1') == 'YES'\n\nassert solution('3 1 2') == 'NO'\nassert solution('3 1 1') == 'YES'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 3 1 2\") == \"NO\"\nassert solution(\"3 3 3 1 2\") == \"YES\"\n\nprint(solution(input()))\n\n---\n\nclass Stack:\n    def __init__(self, size):\n        self.size = size\n        self.items = [None for _ in range(size)]\n        self.len = 0\n    \n    def is_empty(self):\n        return self.len == 0\n    \n    def is_full(self):\n        return self.len == self.size\n    \n    def peek(self):\n        return self.items[self.len - 1]\n    \n    def push(self, item):\n        if not self.is_full():\n            self.items[self.len] = item\n            self.len += 1\n    \n    def pop(self):\n        if not self.is_empty():\n            self.len -= 1\n            return self.items[self.len]\n    \n    def __str__(self):\n        return str(self.items)"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 2 2\") == \"YES\"\n\nfrom collections import deque\nfrom collections import namedtuple\nimport numpy as np\n\nclass Node(namedtuple('Node', ['left', 'right', 'value'])):\n    def __init__(self, left=None, right=None, value=0):\n        self.left = left\n        self.right = right\n        self.value = value"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"1 2 3\") == \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 2\") == \"YES\"\nassert solution(\"4 3 2\") == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 3 1 2\") == \"YES\"\nprint(solution(input()))"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 2 3') == 'YES'\nassert solution('3 1 2') == 'NO'\nassert solution('5 3 2 1') == 'YES'\nassert solution('3 1 2 4') == 'NO'\nassert solution('3 1 2 3') == 'YES'\n\n\"\"\"\n\n\n\nimport sys\n\nn = int(sys.stdin.readline())\nl = list(map(int, sys.stdin.readline().split()))\nst = []\n\nfor i in l:\n    while st and st[-1][0] > i:\n        st.pop()\n    if st and st[-1][0] == i:\n        st[-1][1] += 1\n    else:\n        st.append([i, 1])\n\nprint('YES' if not st else 'NO')\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 3 1 2\") == \"NO\"\nassert solution(\"3 3 3 2 2\") == \"YES\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\narr = [int(x) for x in sys.stdin.readline().split()]\n\nstack = []\n\nfor i in arr:\n    while stack and i > stack[-1]:\n        stack.pop()\n    if not stack:\n        stack.append(i)\n    else:\n        stack.append(i)"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\nassert solution(\"abcd\") == \"accd\"\nassert solution(\"abdc\") == \"accd\"\n\n\"\"\"\n\n\"\"\"\n--------------------\n\"\"\""
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\nassert solution(\"abcd\") == \"accd\"\nassert solution(\"accd\") == \"accd\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcdef\", \"abdfec\") == \"4 5 4 5\"\n\"\"\""
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'abc'\nassert solution('abcdef') == 'abdcef'\nassert solution('abdfec') == 'abdcef'\nassert solution('accd') == 'accd'\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abcd\") == \"accd\"\nassert solution(\"acbdef\") == \"accdfe\"\n\n\"\"\"\n\nimport collections\nimport itertools"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\nassert solution(\"abcd\") == -1\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\nassert solution(\"abcd\") == \"accd\"\n\"\"\""
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\nassert solution(\"abdfec\") == \"abdcef\"\n\"\"\""
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\nassert solution(\"accd\") == -1\nassert solution(\"abcd\") == 0\n\"\"\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\nassert solution(\"accd\") == \"-1\"\nassert solution(\"abcd\") == \"0\"\nassert solution(\"abc\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba\") == \"PS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"b\") == \"P\"\nassert solution(\"ab\") == \"SP\"\nassert solution(\"abab\") == \"SP\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ba\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"abab\") == \"PPSS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"aba\") == \"PS\"\n\"\"\""
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abab\") == \"PSPS\"\n\nassert solution(\"a\") == \"PPS\"\n\nassert solution(\"aa\") == \"PS\"\n\nassert solution(\"a\") == \"PS\"\n\nassert solution(\"aaaaa\") == \"SPPSPSPS\""
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ba\") == \"PS\"\nassert solution(\"a\") == \"S\"\nassert solution(\"abab\") == \"PSPSPS\"\nassert solution(\"a\") == \"SPS\"\nassert solution(\"aba\") == \"PSPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ababa\") == \"PSPSPSPS\"\nassert solution(\"aaa\") in {\"SSPP\", \"PSPS\"}\nassert solution(\"ac\") in {\"PS\", \"S\"}\nassert solution(\"a\") == \"PS\"\n\n\"\"\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aba\") == \"S\"\nassert solution(\"abab\") == \"SPS\"\nassert solution(\"aaaa\") == \"SPS\"\n\nassert solution(\"a\") == \"P\"\nassert solution(\"ac\") == \"PS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aba\") == \"SP\"\nassert solution(\"abc\") == \"PS\"\nassert solution(\"abab\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"a\") == \"PS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\na\\nabab\\na\\naba\\nbaba\\nab\\naba\") == \"PSPSPSPS\"\nassert solution(\"3\\na\\nc\\n\") == \"PPS\"\nassert solution(\"2\\na\\nc\\n\") == \"PS\"\n\nimport re\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ba') == 'SPPSPSPS'\nassert solution('a') == 'PPSS'\nassert solution('abab') == 'PPSS'\nassert solution('a') == 'PPS'\nassert solution('aba') == 'PSPS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a\") == \"PS\"\nassert solution(\"ba\") == \"SPPSPSPS\"\nassert solution(\"abab\") == \"PSPSPSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"aa\") == \"PS\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\nassert solution(\"1 2 4 7 9 10\") == 1\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"2 4 6 8 10\") == \"1\"\n\"\"\""
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 4 6 8 10''') == '1'\nassert solution('''2 4 6 8 10''') == '1'\n\n-----Place-holder-----\n\"\"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4 6 8 10') == '1'\n\"\"\"\n\ndata = [int(i) for i in stdin.split()]\n\nprint(int(data[-1]!= sum(data) - data[-1]))\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\""
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4 5') == '1 4'\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(solution(str(input())))\nprint(solution(str(input())))"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 6 8 10') == 1\n\"\"\"\n\na = input().split(' ')\ncount = 0\nfor i in a:\n    if int(i) < 0:\n        count += 1\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\\n\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\\n\") == \"0\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"0\"\nassert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\n\"\"\""
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"0\"\nassert solution(\"5\\n1 1 1 1\") == \"0\"\nassert solution(\"5\\n0 1 0 1\") == \"0\"\nassert solution(\"6\\n0 1 0 1\") == \"0\"\nassert solution(\"6\\n1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 1 0 1 1 0 1 0 1 0') == '2'\nassert solution('5 1 1 0 0 0') == '0'\nassert solution('4 1 1 1') == '0'\n\"\"\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 1 1 1\") == \"0\"\nassert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\nassert solution(\"4\\n0 0 0 1\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 1 1 1') == '0'\nassert solution('5\\n1 1 1 1') == '0'\nassert solution('6\\n1 1 1 1') == '0'\nassert solution('7\\n1 1 1 1') == '0'\nassert solution('8\\n1 1 1 1') == '1'\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 1 1 1\\n\") == \"0\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"0\"\nassert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\\n\") == \"2\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"0\"\nassert solution(\"4\\n0 1 1 1\\n\") == \"0\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 3 4 5\\n') == '2'\n\"\"\"\nfrom typing import List\n\na: List[int] = list(map(int, input().split()))\ncount = 0\nfor i in a:\n    for j in a:\n        if i % j == 0:\n            count += 1\nprint(count)\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n1 2 3 4 5\n''') == '1'\n\nassert solution('''6\n6 90 12 18 30 18\n''') == '4'\n\n\"\"\"\nimport sys\nfrom typing import List, Tuple"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 3 4 5\\n') == '1'\nassert solution('6\\n6 90 12 18 30 18\\n') == '4'\n\"\"\"\n\n\nfrom math import gcd\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a1) == a2"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 4 5') == '2'\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"2\"\nassert solution(\"6\\n6 90 12 18 30 18\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4 5') == '1'\nassert solution('6 90 12 18 30 18') == '4'\n\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 4 5') == '1'\nassert solution('5\\n1 2 3 4 5\\n2') == '2'\nassert solution('5\\n1 2 3 4 5\\n6') == '4'\nassert solution('6\\n6 90 12 18 30 18') == '4'\n\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n''') == '1'\n\nassert solution('''\n6\n6 90 12 18 30 18\n''') == '4'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\nassert solution('1\\n2') == '1'\n\nassert solution('2\\n3\\n4') == '2'\n\nassert solution('3\\n3\\n2\\n3\\n4') == '4'\n\nassert solution('4\\n4\\n4\\n4\\n4') == '4'"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"1\\n\"\nassert solution(\"4\\n1 2 3 4\") == \"2\\n\"\nassert solution(\"3\\n1 1 1\") == \"1\\n\"\nassert solution(\"4\\n1 2 3 4\") == \"2\\n\"\nassert solution(\"8\\n1 1 1 1 2 2 3 3\") == \"1\\n\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n1 2 3 3 2 2 1\") == \"1\"\nassert solution(\"4\\n1 2 2 3\") == \"2\"\nassert solution(\"1\\n100\") == \"1\"\nassert solution(\"3\\n1 2 3\") == \"1\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3 4') == '2'\nassert solution('4\\n1 2 3 3') == '1'\nassert solution('4\\n1 2 1 2') == '2'\nassert solution('4\\n1 2 2 1') == '3'\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n100\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2\\n3\\n1') == 2\nassert solution('7\\n1\\n2\\n3\\n4\\n5\\n6\\n7') == 2\nassert solution('1') == 1\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 2 4 3 3 2\") == 2\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 4 3 3 2') == '2'\nassert solution('100') == '1'\nprint('The local tests are done. Try to solve the task on your own!')\n\n-----\nSample Input:\n\n6\n1 2 4 3 3 2\n\nSample Output:\n\n2\n\n-----\nSample Input:\n\n3\n1 2 3\n\nSample Output:\n\n3\n\n-----\nSample Input:\n\n3\n1 2 3\n\nSample Output:\n\n2\n\n------\nSample Input:\n\n5\n1 1 1 1 2\n\nSample Output:\n\n3\n\n\"\"\"\n\nn = int(input())\n\na = list(map(int, input().split()))\n\ns = set(a)\n\nprint(len(s))\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\") == 2\nassert solution(\"4\\n1 1 1 1\") == 1\nassert solution(\"3\\n1 2 3\") == 0\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input) == OUTPUT\n\n----"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 4 3 3 2\") == \"2\"\nassert solution(\"100\") == \"1\"\nassert solution(\"100 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\") == \"1\"\nassert solution(\"20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"3\"\nassert solution(\"20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\") == \"4\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2\") == \"3\"\nassert solution(\"5 3\") == \"2\"\nassert solution(\"5 10\") == \"-1\"\nassert solution(\"10 3\") == \"3\"\nassert solution(\"5 4\") == \"-1\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 3') == '3'\nassert solution('6 2') == '3'\nassert solution('5 10') == '-1'\nassert solution('1 0 0 0 1') == '2'\nassert solution('0 0 1 1 0 1 0 0 0 1') == '2'\n\n\"\"\""
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"1\"\n\nassert solution(\"6 2\") == \"3\"\n\nassert solution(\"5 3\") == \"-1\"\n\nassert solution(\"10 3\") == \"2\"\n\nassert solution(\"6 10\") == \"-1\""
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n0 0 0 1 1\") == \"2\"\nassert solution(\"8 3\\n0 0 0 0 1 1 1 1\") == \"4\"\nassert solution(\"6 10\\n0 0 0 0 0 0 0 0 0 0\") == \"-1\"\n\nprint(\"Success!\")\n\n\"\"\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''6 2\n0 1 1 0 0 1\n''') == 3\n\nassert solution('''5 3\n1 0 0 0 1\n''') == 2\n\nassert solution('''5 10\n0 0 0 0 0\n''') == -1\n\nassert solution('''10 3\n0 0 1 1 0 1 0 0 0 1\n''') == 3\n\n\"\"\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''6 2\n0 1 1 0 0 1\n''') == '3'\n\nassert solution('''5 3\n0 0 0 0 0\n''') == '2'\n\nassert solution('''5 10\n0 0 0 0 0\n''') == '-1'\n\nassert solution('''10 3\n0 0 0 0 0 0 0 0 0 0 1\n''') == '3'\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == \"3\"\nassert solution(\"5 3\\n0 0 0 0 1\") == \"2\"\nassert solution(\"5 10\\n0 0 0 0 0\") == \"-1\"\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"6 2\n0 1 1 0 0 1\n\"\"\") == \"3\"\nassert solution(\"\"\"5 3\n0 0 0 0 1\n\"\"\") == \"2\"\nassert solution(\"\"\"5 10\n0 0 0 0 0\n\"\"\") == \"-1\"\nassert solution(\"\"\"10 3\n0 0 1 1 0 1 0 0 0 1\n\"\"\") == \"3\"\n\"\"\""
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == 3\nassert solution(\"5 3\\n1 0 0 0 1\") == 2\nassert solution(\"5 10\\n0 0 0 0 0\") == -1\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == 3"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 2\\n0 1 1 0 0 1') == '3'\nassert solution('5 3\\n1 0 0 0 1') == '2'\nassert solution('5 10\\n0 0 0 0 0') == '-1'\nassert solution('10 3\\n0 0 1 1 0 1 0 0 0 1') == '3'\nassert solution('10 10\\n0 0 0 0 0 0') == '-1'"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"10\") == \"7\"\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == 3\nassert solution(4) == 1\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('3') == '3'\nassert solution('2') == '1'\nassert solution('1') == ''\nassert solution('3') == '3'\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"3\"\n\"\"\"\n\nimport sys\nfrom typing import Tuple\n\nN = int(sys.stdin.readline())\n\nresult = 0\nfor i in range(1, N + 1):\n    for j in range(1, N + 1):\n        for k in range(1, N + 1):\n            if i * j + k == N:\n                result += 1\n\nprint(result)\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '5'\n\"\"\"\n\n\"\"\"\nC++"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3) == 3\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n') == '3'\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"(((())))\") == 2\nassert solution(\n\"()()()\") == 0\nassert solution(\n\"((()))\") == 2\nassert solution(\n\"()(()()(((((()()((((())))(((())))(())))))())()(()())(((()()))((((()()()))(())())()(()((())))(()))(())(()(()(())()(())()(()(())((()(((((())(((()))(((()))))))(()())(((())((((()))()(()()))(())()())(()(())(()(()())((())))((((())))((()))()))(()))(()(((((((((((((((((((((((())((((((((((((((((((((((((((((()))))))))))(()())(((()((()()(())()()(()(()(()()(((((((((()))()()(()(((((((((((((((((((((()))))))))))))))))))))))(((((()()()(())(((()(()((((((()))(())(()(()()(()(()(()((((()))))))))()()(()(()()()(()(()(()(()(()(((((((()))))))(((((()(()(((()()(((((((()(((((((((((((((((((((((((((((((((((((((()))))))))))))))(()(()))((((()(((()(())()()((()()(()(((((((()(((()(())((()()(()()(((((((((((()(()(()(((()(())()()(()((()(()(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('(((())') == 3\nassert solution('()()()') == 0\nassert solution('))((((') == 0\nassert solution(')(') == 1\nassert solution('())(()())') == 5\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('(((())))') == 0\nassert solution('())') == 0\nassert solution('()(()') == 1\nassert solution('(((()') == 2\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"()()\") == 0\nassert solution(\")(\") == 0\nassert solution(\"))(((((\") == 0\nassert solution(\"(((((((((((((((((((((((((((((((((((\") == 0\n\nassert solution(\"(\") == 1\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"(((()))\") == 1\nassert solution(\"((())())\") == 3\nassert solution(\"()()\") == 0\n\n\"\"\"\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"())\") == 0\nassert solution(\"(((\") == 3\n\"\"\"\n\nn = int(stdin.readline())\nlst = [stdin.readline().strip()]\n\nlst_out = []\n\nfor _ in range(n-1):\n    lst.append(stdin.readline().strip())\n\ncount = 0\nfor i in range(len(lst)):\n    if lst[i][0] == '(' and lst[i][-1] == ')':\n        count += 1\n    if lst[i][0] == ')' and lst[i][-1] == '(':\n        count += 1\nprint(count)"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"(((())\") == 3\n\n\"\"\"\n\n\"\"\"\nimport math\nimport sys\nsys.setrecursionlimit(1000000)"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"((((())\") == 3\n\nassert solution(\"()()(())\") == 2\n\nassert solution(\"()(()(()()((()())((()())(())))((()())()))(()(((())))((((())))((()))()(())()(())((((())))((((()())((()))(()((()(()(()(())(((())))(((()()()(()((())((()(()(((()((()()()()((((())((()(()())))((()))())))((()))(())))(((())(((()()()(()())((()()(())))((())(()((())(((())((())(()(())(((((())(()(()()()((()(((()(()(()(((((()(()(()(((((()(()(((((()())((()))(())))((((())))((()((((((((((()(()()(((()(()()()(()((()(((((((()(()(()()(((((((((()((()()(((()(()(()(()()((()(()(((()(())()))(()(()(()(()((()()()(()(()()(()))((()(()(()(()(((()(((()(())())(()(((((((((())((())(()(((((((((()()()()))(())()))(())()(()()(()()(((()())((((((((((((((((((((((((((((((((((()(()()(()(((()(((()(((((((((((((((((((((((((((((((((((((((((((()(()(()(((((()(((((())((((((((((((((((((((((((((((((((((((((((((((((((((((()(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"(((())\") == 3\nassert solution(\"(())((()())()\") == 6\nassert solution(\"())(\") == 0\nassert solution(\"(()())\") == 3\nassert solution(\"(()(()))\") == 5\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"()()\") == 0\nassert solution(\"()(())\") == 1\nassert solution(\"()(())(()())\") == 3\nassert solution(\"((()))\") == 1\n\"\"\""
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"baaba\") == 2\nassert solution(\"abcde\") == 0\n\"\"\"\n\n\n\n\"\"\"\nlongest_subsequence.py\n-----------------\nGiven two strings, find the longest subsequence present in both of them.\nA longest common subsequence is a subsequence which is common to all the\nstrings of input.\nExample: longest_common_subsequence(\"ABCDGH\", \"AEDFHR\")\nshould return \"ADH\"\nExplanation: ADH is a longest common subsequence of \"ABCDGH\" and \"AEDFHR\".\nAnother example: longest_common_subsequence(\"programming\", \"gaming\")\nshould return \"\".\nNote: The sequence of characters may have repeating characters.\nTIP: This problem follows the Longest Common Subsequence (LCS) pattern.\n\nSolution:\n    A Dynamic Programming based solution\n\nComplexity:\n    Time: O(M*N)\n    Space: O(M*N)\n\"\"\"\n\n\n\n\"\"\"\nlongest_subsequence_sol.py\n-----------------\nGiven a dictionary of words and a query string,\nreturn the longest possible substring of query which\nis present in dictionary.\nExample:\nInput: dictionary = [\u201ccat\u201d, \u201cbat\u201d, \u201chat\u201d, \u201ctree\u201d, \u201cdigest\u201d, \u201cmenu\u201d]\nquery = \u201ccat\u201d\nOutput: cat\nExplanation:\nThe longest substrings present in dictionary\nare {\u201ccat\u201d, \u201cat\u201d, \u201ca\u201d, \u201ct\u201d}, so the answer is \u201ccat\u201d.\n\nSolution:\n    We will use a sliding window to process the\n    string in a dynamic programming manner.\n    We will create a 2D array of size len(query)\n    and len(dictionary) and initialize it as 0.\n    We will start with a left and right pointer\n    for our sliding window. We will iterate through\n    the query and dictionary strings from right to\n    left and keep updating the value of array[i][j]\n    in a way that it stores the length of the maximum\n    subsequence present in the query string from i\n    to j.\n    If the element of query string is not present\n    in dictionary string, we will do not increment\n    the value of the array element.\n    If the element of query string is present\n    in dictionary string, we will increment the\n    value of the array element.\n    We will start the left pointer from index 0\n    and the right pointer from index 0.\n    We will move the left pointer to the right by\n    one position at a time and the right pointer\n    to the left by one position at a time and keep\n    checking for the condition mentioned above.\n    We will return the string which has the maximum\n    length sub sequence when the right pointer reaches\n    the end of the dictionary string and the left\n    pointer reaches the end of the query string.\n\nComplexity:\n    Time: O(m*n)\n    Space: O(m*n)\n\"\"\"\n\n\n\n\"\"\"\nlongest_subsequence_sol_v2.py\n-----------------\nGiven a dictionary of words and a query string,\nreturn the longest possible substring of query which\nis present in dictionary.\nExample:\nInput: dictionary = [\u201ccat\u201d, \u201cbat\u201d, \u201chat\u201d, \u201ctree\u201d, \u201cdigest\u201d, \u201cmenu\u201d]\nquery = \u201ccat\u201d\nOutput: cat\nExplanation:\nThe longest substrings present in dictionary\nare {\u201ccat\u201d, \u201cat\u201d, \u201ca\u201d, \u201ct\u201d}, so the answer is \u201ccat\u201d.\n\nSolution:\n    We will use a sliding window to process the\n    string in a dynamic programming manner.\n    We will create a 2D array of size len(query)\n    and len(dictionary) and initialize it as 0.\n    We will start with a left and right pointer\n    for our sliding window. We will iterate through\n    the query and dictionary strings from right to\n    left and keep updating the value of array[i][j]\n    in a way that it stores the length of the maximum\n    subsequence present in the query string from i\n    to j.\n    If the element of query string is not present\n    in dictionary string, we will do not increment\n    the value of the array element.\n    If the element of query string is present\n    in dictionary string, we will increment the\n    value of the array element.\n    We will start the left pointer from index 0\n    and the right pointer from index 0.\n    We will move the left pointer to the right by\n    one position at a time and the right pointer\n    to the left by one position at a time and keep\n    checking for the condition mentioned above.\n    We will return the string which has the maximum\n    length sub sequence when the right pointer reaches\n    the end of the dictionary string and the left\n    pointer reaches the end of the query string.\n\nComplexity:\n    Time: O(m*n)\n    Space: O(m*n)\n\"\"\"\n\n\n\n\"\"\"\nlongest_subsequence_sol_v3.py\n-----------------\nGiven a dictionary of words and a query string,\nreturn the longest possible substring of query which\nis present in dictionary.\nExample:\nInput: dictionary = [\u201ccat\u201d, \u201cbat\u201d, \u201chat\u201d, \u201ctree\u201d, \u201cdigest\u201d, \u201cmenu\u201d]\nquery = \u201ccat\u201d\nOutput: cat\nExplanation:\nThe longest substrings present in dictionary\nare {\u201ccat\u201d, \u201cat\u201d, \u201ca\u201d, \u201ct\u201d}, so the answer is \u201ccat\u201d.\n\nSolution:\n    We will use a sliding window to process the\n    string in a dynamic programming manner.\n    We will create a 2D array of size len(query)\n    and len(dictionary) and initialize it as 0.\n    We will start with a left and right pointer\n    for our sliding window. We will iterate through\n    the query and dictionary strings from right to\n    left and keep updating the value of array[i][j]\n    in a way that it stores the length of the maximum\n    subsequence present in the query string from i\n    to j.\n    If the element of query string is not present\n    in dictionary string, we will do not increment\n    the value of the array element.\n    If the element"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 1\nassert solution(\"tt\") == 0\nassert solution(\"et\") == 2\n\nassert solution(\"test\") == 3\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('test') == 'test'\nassert solution('test') == 'test'\nassert solution('test') == 'test'\n\"\"\"\n\ns1 = input()\ns2 = input()"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"test\") == 1, \"First example\"\nassert solution(\"tst\") == 1, \"Second example\"\nassert solution(\"tt\") == 0, \"Third example\"\nassert solution(\"et\") == 0, \"Fourth example\"\nassert solution(\"\") == 0, \"Fifth example\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('asdfasdf') == 3\nassert solution('bbaba') == 3\nassert solution('baaba') == 2\n\"\"\""
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"tst\") == \"st\"\nassert solution(\"tt\") == \"t\"\nassert solution(\"et\") == \"te\"\nassert solution(\"contest\") == \"\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"asdfasdf\") == 3\nassert solution(\"asdfasdf\") == 3\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"test\") == 2\nassert solution(\"tt\") == 0\nassert solution(\"testest\") == 4\nassert solution(\"asdfasdff\") == 4\n\"\"\""
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tt\") == 2\nassert solution(\"se\") == 2\nassert solution(\"s\") == 0\nassert solution(\"\") == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 1\nassert solution(\"baaba\") == 3\nassert solution(\"ab\") == 1\nassert solution(\"abcde\") == 0\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"0 2 1 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 1\") == 2\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 1 1') == '2'\nassert solution('2 1 1 1') == '2'\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a=1,b=2,c=1,d=1) == 2\n\"\"\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1 1\") == \"2\"\n\n-------\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 1 1') == '2'\n\"\"\"\n\na, b, c, d = map(int, input().split())"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 1 1') == '2'\nassert solution('1 2 1 1') == '2'\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom math import inf\nfrom typing import List, Tuple, Union, Dict\n\nfrom advent import get_input\nfrom advent.tools import timer\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7 2 4\") == \"12\"\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(    \"4 1 2 4 4 6 7\") == \"2\"\nassert solution(    \"3 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 1 4 4 6 7\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 1 4 4 6 7\\n\") == '2'\n\n---\n### Exercise 1\n\nThe number of items in a set A of n items is given by the formula n**k, where k is the set cardinality (the number of distinct items).\n\nWrite a program that finds the total number of sets with exactly 3 items.\n\n-----\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 4 6 7\\n\") == '2'\nassert solution(\"9 1 4 4 6 7\\n\") == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 1 4 4 6 7\\n\") == \"2\"\nassert solution(\"6 1 4 4 6 7\\n\") == \"2\"\nassert solution(\"7 1 4 4 6 7\\n\") == \"2\"\nassert solution(\"6 1 4 4 6 8\\n\") == \"0\"\nassert solution(\"9 1 4 4 6 8\\n\") == \"2\"\n\n\"\"\"\nimport sys\nimport time\nimport numpy as np"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 9 1 4 4 6 7\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 1 4 4 6 7\") == \"2\"\n\"\"\"\n\nfrom math import ceil\nfrom typing import List"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 1 4 4 6 7\\n\") == 2\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 1 2 3 4 5\") == \"3\"\nassert solution(\"7 1 2 3 4 5 6\") == \"2\"\nassert solution(\"2 1 2\") == \"1\"\nassert solution(\"10 10\") == \"1\"\nassert solution(\"7 1 2 3 4 5 6\") == \"2\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 6 9 10 3 4') == '2'\nassert solution('9 1 4 4 6 7') == '2'\nassert solution('4 1 4 6 7') == '1'\nassert solution('9 10 2 1 4 6 7') == '1'\nassert solution('3 5 2 4 1') == '0'\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == 3\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\nassert solution(\"9 20 16 18 16 14 16 10 17\\n19 20 20 15 20 12 20 11 20 15 20 19\") == \"4\"\nassert solution(\"10 20 16 18 16 14 16 10 17\\n19 20 20 15 20 12 20 11 20 15 20 19\") == \"6\"\nassert solution(\"10 20 16 18 16 14 16 10 17\\n19 20 20 15 20 12 20 11 20 15 20 19\") == \"6\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 24 21 23\\n16 17 14 20 20 11 22') == 3\n\"\"\"\n\nimport math"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 24 21 23') == 3"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\n\"\"\"\n\nimport sys\n\nn, h, l, r = [int(x) for x in sys.stdin.readline().split()]\narr = [int(x) for x in sys.stdin.readline().split()]\ngood = 0\nfor i in arr:\n    if i >= l and i <= r:\n        good += 1\nprint(good)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 24 21 23\\n16 17 14 20 20 11 22') == 3\n\"\"\"\n\nn, h, l, r = map(int, input().split())\ntimes = [int(input()) for _ in range(n)]"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5 7 6') == 3\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n7 24 21 23\n16 17 14 20 20 11 22\n''') == '3'\n\"\"\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\n\"\"\"\n\nn, h, l, r = list(map(int, input().strip().split()))\na = list(map(int, input().strip().split()))\ngood_times = 0\n\nfor i in range(n):\n    if l <= (a[i] + i) % h < r:\n        good_times += 1\nprint(good_times)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == 3\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1 2') == ''\nassert solution('1 2 3') == ''\nassert solution('1 2 3 4') == ''\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49') == 4\nassert solution('5\\n2 10 50 110 250') == 1\nassert solution('6\\n4 7 12 100 150 199') == 3\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(print(solution(str(input()))))\n\n\"\"\"\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n5 10 50 110 250\\n') == '3'\n\nassert solution('5\\n2 10 50 110 250\\n') == '1'\n\nassert solution('6\\n4 7 12 100 150 199\\n') == '3'\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\n\"\"\""
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''10\n1 2 5 6 7 10 21 23 24 49\n''') == '4'\n\nassert solution('''5\n2 10 50 110 250\n''') == '1'\n\nassert solution('''6\n4 7 12 100 150 199\n''') == '3'\n\n\"\"\"\n\n\nfrom collections import deque"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n10\n1 2 5 6 7 10 21 23 24 49\n''') == '4'\nassert solution('''\n5\n2 10 50 110 250\n''') == '1'\nassert solution('''\n6\n4 7 12 100 150 199\n''') == '3'"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\n\"\"\"\nimport collections\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49') == '4'\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(10) == 4\n\n\"\"\""
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n2 5 10 1 10 2') == '1 4'\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 8 3 6\") == \"1 2\"\nassert solution(\"5 2 11 3 7\") == \"2 4\"\nassert solution(\"6 2 5 10 1 10 2\") == \"1 4\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5\n2 4 8 3 6\"\"\") == \"1 2\"\nassert solution(\"\"\"5\n2 4 8 3 6\"\"\") == \"1 2\"\nassert solution(\"\"\"5\n2 11 3 7\"\"\") == \"2 4\"\nassert solution(\"\"\"6\n2 5 10 1 10 2\"\"\") == \"1 4\"\nassert solution(\"\"\"6\n2 5 10 1 10 2\"\"\") == \"1 4\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 4 8 3 6') == '1 2'\nassert solution('6\\n5 2 11 3 7') == '1 4'\n\"\"\"\n\n\"\"\"\n    MY ANSWER:\n    return (1,2)\n\n\"\"\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 4 8 3 6') == '1 2'\nassert solution('6\\n2 5 10 1 10 2') == '1 4'\n\n\n\"\"\"\n\nfrom typing import List\nfrom math import lcm\n\nn: int = int(input())\na: List[int] = [int(x) for x in input().split()]\n\nd: List[int] = [0] * n\nl: int = 1\nfor i in range(n):\n    d[i] = l\n    l = lcm(l, a[i])\n\nfor i in range(n - 1):\n    d[i] = lcm(d[i], d[i + 1])"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 11 3 7\") == \"2 4\"\n\nassert solution(\"6 2 11 3 7\") == \"1 4\"\n\nprint(solution(\"5 2 11 3 7\"))\nprint(solution(\"6 2 11 3 7\"))\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == '1 2'\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 8 3 6') == '1 2'\nassert solution('5 2 11 3 7') == '2 4'\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(121) == '021'\nassert solution(211200) == '211200'\nassert solution(120110) == '120120'\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"101010\") == \"111000\"\nassert solution(\"111101010\") == \"11101010\"\nassert solution(\"101010\") == \"101010\"\nassert solution(\"111101010\") == \"11101010\"\nassert solution(\"111101010\") == \"11101010\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"31\") == \"210\"\nassert solution(\"111\") == \"110\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"0123\") == \"0123\"\nassert solution(\"211200\") == \"211200\"\nassert solution(\"120110\") == \"120120\"\nassert solution(\"001110\") == \"001122\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12010\") == \"12010\"\nassert solution(\"10010\") == \"10110\"\nassert solution(\"11010\") == \"10110\"\nassert solution(\"11110\") == \"10110\"\nassert solution(\"11101\") == \"10110\""
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"120110\") == \"120120\"\nassert solution(\"211200\") == \"211200\"\n\"\"\""
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"121\") == \"021\"\n\nassert solution(\"120110\") == \"120120\"\n\nassert solution(\"120120\") == \"120120\"\n\nassert solution(\"120123\") == \"120123\"\n\nassert solution(\"1201020\") == \"1201020\""
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"121\") == \"021\"\n\"\"\"\n\nfrom typing import List\n\nfrom collections import Counter\n\n\nclass Solution:\n    def __init__(self, stdin: str) -> None:\n        self._stdin = stdin\n\n    def solution(self) -> str:\n        stdin = self._stdin\n        c = Counter(stdin)\n\n        c0 = c[\"0\"]\n        c1 = c[\"1\"]\n        c2 = c[\"2\"]\n\n        s = \"\"\n\n        while c0 > 0 and c1 > 0 and c2 > 0:\n            for c in \"012\":\n                if c0 > 0 and c == \"0\":\n                    s += \"0\"\n                    c0 -= 1\n                    c2 -= 1\n                elif c1 > 0 and c == \"1\":\n                    s += \"1\"\n                    c1 -= 1\n                    c0 -= 1\n                elif c2 > 0 and c == \"2\":\n                    s += \"2\"\n                    c2 -= 1\n                    c1 -= 1\n                else:\n                    raise AssertionError(f\"unknown state\")\n\n        if c0 > 0:\n            s += \"0\" * c0\n        elif c1 > 0:\n            s += \"1\" * c1\n        elif c2 > 0:\n            s += \"2\" * c2\n\n        return s\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n11101''') == '1011'\nassert solution('''3\n11101''') == '1011'\nassert solution('''3\n11101''') == '1011'\n\nassert solution('''3\n11101''') == '1011'\nassert solution('''3\n11101''') == '1011'\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"1111\") == \"11112\"\nassert solution(\"120110\") == \"120120\"\n\"\"\"\nimport math\n\nfrom collections import Counter\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1\\n2\\n3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 1\\n3\") == \"4\"\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n3\") == \"4\"\nassert solution(\"5 1\\n2 3 4 5\\n2 3 5\") == \"5\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n0\") == '4'\nassert solution(\"4 2\\n2 3\\n1 3\\n3 4\") == '1'\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1\\n3\\n') == '4'\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"6 1\\n3\\n\"\n) == \"4\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n2\") == \"4\"\nassert solution(\"6 1\\n3\\n4\") == \"4\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n3\") == \"4\"\nassert solution(\"7 1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"8\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 1\\n3\") == \"4\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\nbroken_steps = set(map(int, stdin.readline().split()))\ns = [0] * (n + 1)\ns[0] = 1\ns[1] = 1\nfor i in range(2, n + 1):\n    if i in broken_steps:\n        s[i] = 0\n    else:\n        s[i] = s[i - 1] + s[i - 2]\nprint(s[n] % 1000000007)\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n1') == '1'\nassert solution('3 1\\n1\\n2') == '4'\nassert solution('3 1\\n1\\n2\\n3') == '4'\nassert solution('3 3\\n1\\n2\\n3') == '12'\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 2 4\\n') == '2'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n\nimport sys\nfrom collections import namedtuple\n\nCoordinate = namedtuple('Coordinate', ['x', 'y'])\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('-1 2 3') == '-1'\nassert solution('-10 15 20') == '20'\nassert solution('-1 -1 -1') == '-1'\nassert solution('-10 -10 -10') == '0'"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n\nX, K, D = [int(n) for n in stdin.split(\" \")]"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 2 4') == '2'\nassert solution('4 2 2') == '1'\nassert solution('12 6 4') == '2'\n\"\"\"\n\n\"\"\"\nSolution Explanation:\n\nThe solution is straightforward.\nCreate a list of integers between 1 and the distance,\nthat will be the minimum possible distance.\nThe distance between two integer numbers is defined as\nthe difference of the absolute values of the two numbers.\nStart with the biggest number and go in the opposite direction.\nThe distance between two numbers is the sum of the distance between the two numbers and the difference\nbetween the two numbers.\nFor example:\n1 and 10 are distance 1\n10 and 20 are distance 9\n20 and 40 are distance 16\nTo check if the solution is valid, start with the biggest number and go in the opposite direction.\nThe distance between the numbers is the sum of the distance between the numbers\nand the difference between the numbers.\nIf the sum of the distance between the numbers and the difference between the numbers\nis less than the distance between the numbers, then the solution is valid.\nThis is the result of the solution for example 1, 10, 20.\nThe maximum distance from the biggest number is 10,\nthe distance between the numbers is 16.\nThe sum of the distance between the numbers and the difference between the numbers\nis 16, so this is not a valid solution.\nThe sum of the distance between the numbers and the difference between the numbers\nis 9, so this is also not a valid solution.\nThe sum of the distance between the numbers and the difference between the numbers\nis 1, and the distance between the numbers is 1, so this is also not a valid solution.\nFor example:\n1 and -1 are distance 1\n1 and -2 are distance 1\n-1 and -2 are distance 1\n-1 and -3 are distance 2\n-1 and -4 are distance 2\n-2 and -3 are distance 2\n-2 and -4 are distance 3\n-3 and -4 are distance 3\nThe distance between the numbers is the sum of the distance between the numbers\nand the difference between the numbers.\nThe distance between -4 and -3 is 3, and the sum of the distance between the numbers and the difference between the numbers is 3.\nTherefore, this is not a valid solution.\nFor example:\n1 and -1 are distance 1\n1 and -2 are distance 1\n-1 and -2 are distance 1\n-1 and -3 are distance 2\n-1 and -4 are distance 2\n-2 and -3 are distance 2\n-2 and -4 are distance 3\n-3 and -4 are distance 3\nThe distance between the numbers is the sum of the distance between the numbers\nand the difference between the numbers.\nThe distance between -4 and -3 is 3, and the sum of the distance between the numbers and the difference between the numbers is 3.\nTherefore, this is a valid solution.\n\"\"\""
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"2\"\nassert solution(\"-1 2 3\") == \"0\"\n\nfrom typing import List\nfrom collections import deque\n\nclass Solution:\n    def solve(self, A: List[int]) -> int:\n        x, k, d = A\n        \n        x_0 = abs(x)\n        \n        if x < 0:\n            x_0 = -x_0\n        \n        def bfs(x_0: int) -> int:\n            q = deque([x_0])\n            \n            dist = {x_0: 0}\n            while q:\n                x_i = q.popleft()\n                \n                if x_i > 0 and x_i - d in dist:\n                    return dist[x_i - d] + 1\n                \n                if x_i < 0 and x_i + d in dist:\n                    return dist[x_i + d] + 1\n                \n                for x_i_k in (x_i + d, x_i - d):\n                    if x_i_k not in dist:\n                        dist[x_i_k] = dist[x_i] + 1\n                        q.append(x_i_k)\n            \n            return -1\n        \n        return bfs(x_0)"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 4\") == \"2\"\nassert solution(\"10 7 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 1\\n2 2 2\\n3 3 3') == '1'\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 2 4') == '2'\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(11) == 2\nassert solution(14) == 0\nassert solution(61441) == 2\nassert solution(2128506) == 3\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('61441') == 2\nassert solution('571576') == 10\nassert solution('2128506') == 3\n\"\"\""
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 10\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 2\nassert solution('2128506') == 3\n\"\"\"\nimport math\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11') == 2\n\nassert solution('14') == 0\n\nassert solution('61441') == 10\n\nprint('Success')\n\nprint(solution('571576'))\n\"\"\"\nimport sys"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 10\nassert solution('571576') == 3\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11\") == \"2\"\nassert solution(\"14\") == \"0\"\nassert solution(\"61441\") == \"2\"\nassert solution(\"571576\") == \"10\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11') == '2'\nassert solution('14') == '0'\nassert solution('61441') == '2'\nassert solution('571576') == '10'\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 10\nassert solution('571576') == 3\nassert solution('2128506') == 3\nprint('Test pass.')\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 2\nassert solution('571576') == 10\nprint('All tests passed.')\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == 27\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == 1\n\"\"\"\n\nimport sys\n\ninput = int(sys.stdin.readline())"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"27\"\n'''"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3\n''') == '27'\n\nassert solution('''\n5\n''') == '12345'\n\nassert solution('''\n7\n''') == '1234567'\n\nassert solution('''\n1\n''') == '1'\n\nassert solution('''\n15\n''') == '123456789101112131415'\n'''"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == 2\nassert solution('2') == 6\nassert solution('3') == 7\nassert solution('4') == 9\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == 27\n\"\"\"\n\na = int(input())\nprint(a*a*a)\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '5'\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == 27\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == 27\n-----\n\n2"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == 27\n-----------------------------\n\nWrite a program that outputs the sum of all the multiples of 3 or 5 below 1000.\n-----Input-----\n\nThe input contains one integer n (1 \u2264 n \u2264 1000).\n\n\n-----Output-----\n\nOutput the sum of all the multiples of 3 or 5 below n.\n\n\n-----Example-----\nInput\n10\n\nOutput\n23\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n\"\"\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(13) == 1\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\nprint('You are awesome! All tests are done! Go Check it!')\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n\"\"\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\"\nassert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('927') == '1'\nassert solution('8') == '1'\nassert solution('88') == '0'\nassert solution('11') == '0'\nassert solution('12') == '1'\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 5 3 1') == 4\n\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 3 1') == 4\n\"\"\"\n\n\"\"\"\nHow it is used:\n\nFor testing purposes\n\nPrecondition:\n0 \u2264 n \u2264 100\n0 \u2264 ai \u2264 11\n\n\"\"\""
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5 3 1\") == 4\n\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n2 5 3 1''') == 4\n\n\"\"\"\n\n\nimport unittest\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 3 1\") == 4\nassert solution(\"2 5 3 1\") == 4\nassert solution(\"1 1 1 1\") == 1\n\"\"\"\n\nfrom collections import deque\nfrom itertools import accumulate"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5 3 1\") == 4\n\n\"\"\"\n\nfrom typing import List\n\nimport numpy as np\n\nfrom utils import read_input, print_output"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == ''\nassert solution('2 5 3 1') == ''\nassert solution('2 5 3 1 10 11 12') == ''\nassert solution('2 5 3 1 11 12') == ''\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 1\") == \"4\"\n\n\n\"\"\"\nimport random\n\n__all__ = [\"solution\"]\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5 3 1') == '4'\n\nassert solution('1 2 3 4') == '3'\nassert solution('2 5 3 7') == '4'\n\n-----Placeholder-----\n\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(example) == expected\n\n-----Solution-----\n\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 7') == '2'\nassert solution('8 1') == '8'\nassert solution('6 10') == '1'\nassert solution('999999733 999999732') == '999999733'\nassert solution('999999733 999999733') == '1'\n\"\"\"\n\nimport sys\nimport collections\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == 6\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\\n999999733 999999732\") == \"2\\n8\\n1\\n999999733\\n1\"\nassert solution(\"8 7\\n8 1\\n6 10\\n999999733 999999733\") == \"2\\n8\\n1\\n999999733\\n1\"\n\n\n\n\n-----TESTS-----\n\nInput\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n\nOutput\n2\n8\n1\n999999733\n1\n\n\"\"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733''') == '2\\n8\\n1\\n999999733\\n1'\n\nprint(solution(stdin))"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\n\n\"\"\"\n\nimport sys\n\nT = int(sys.stdin.readline().strip())\n\nfor _ in range(T):\n    n, k = map(int, sys.stdin.readline().strip().split())\n    print(k - 1 if n > k else 0)\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\nassert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\nassert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n\"\"\") == \"2\\n8\\n1\\n999999733\\n1\"\nassert solution(\"\"\"\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n\"\"\") == \"2\\n8\\n1\\n999999733\\n1\"\n\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n8 7\") == \"2\"\nassert solution(\"8 1\\n8 1\") == \"8\"\nassert solution(\"6 10\\n999999733 999999732\") == \"1\"\nassert solution(\"999999733 999999733\\n\") == \"1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\"\"\"\n\nn, m = map(int, input().split())\nlights = []\nfor _ in range(n):\n    lights.append(0)\nfor _ in range(m):\n    bulb, *states = map(int, input().split())\n    for i in range(len(states)):\n        lights[bulb - 1] += (1 if states[i] else -1)\nprint(lights.count(0))\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\") == 1\nassert solution(\"3 3\\n1 1 1\\n2 2 2\\n3 3 3\") == 0\nassert solution(\"5 5\\n1 3 3\\n2 5 5\\n4 6 6\\n5 6 6\\n2 4 4\\n3 5 4\") == 1\nassert solution(\"4 4\\n1 2 2\\n2 1 2\\n3 3 3\\n4 4 4\") == 1\nassert solution(\"4 4\\n2 2 2\\n1 3 3\\n4 4 4\\n3 3 3\") == 1\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n2 1 2\\n1 2') == '1'\nassert solution('4 2\\n2 1 1\\n1 2') == '2'\nassert solution('4 2\\n2 1 1\\n1 2') == '0'\nassert solution('4 1\\n2 1 2\\n1 2') == '3'\nassert solution('4 1\\n2 1 2\\n1 2') == '0'\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\"\"\"\n\n\nfrom collections import defaultdict\n\nn, m = map(int, stdin.readline().split())\n\nswitch = defaultdict(set)\nbulbs = defaultdict(set)\n\nfor i in range(1, n + 1):\n    switch[i] = set()\n    for j in range(1, m + 1):\n        a, b = map(int, stdin.readline().split())\n        if a == b:\n            continue\n        switch[i].add(b)\n        bulbs[j].add(a)\n\nfor i in range(1, m + 1):\n    if i in switch[1]:\n        bulbs[i].add(1)\n\nfor i in range(m + 1):\n    if len(bulbs[i]) == 1:\n        for j in range(1, n + 1):\n            if j in switch[i]:\n                bulbs[j].add(1)\n\nprint(sum(map(lambda x: len(x) % 2, bulbs.values())))\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == 1\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == 1\n\"\"\"\n\nfrom itertools import product\n\nn, m = [int(n) for n in stdin.readline().split()]\n\nswitches = [[int(n) for n in stdin.readline().split()] for _ in range(m)]\n\np = [int(n) for n in stdin.readline().split()]\n\nans = 0\nfor c in product((0, 1), repeat=n):\n    if c.count(1) % 2 == 0:\n        ok = True\n        for i in range(m):\n            if c[switches[i][0] - 1]!= switches[i][1]:\n                ok = False\n                break\n\n        if ok:\n            ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\") == '1'\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n--------------------------------------------------\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 9 0\") == \"5.000000000000\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\n\"\"\"\n\n\"\"\"\nWrong\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3 4 9 0) == '5.00000000000000000000'\nassert solution(0 0 0 0) == '0.00000000000000000000'\nassert solution(3 0 0 0) == '1.4500000000000001'\nassert solution(0 0 1 0) == '0.7071067811865476'\n\"\"\"\nimport math"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 9 0\") == \"5.00000000000000000000\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 9 0\") == '5.00000000000000000000'\n\"\"\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\"\n\nA, B, H, M = map(int, input().split())\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\nassert solution(\"6 8 3 0\") == \"8.00000000000000000000\"\nassert solution(\"1 2 9 0\") == \"10.00000000000000000000\"\nassert solution(\"1 2 3 0\") == \"13.00000000000000000000\"\n\"\"\""
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\") == \"8\"\n\"\"\"\n\nimport collections\nimport itertools\nimport math\nfrom typing import List\n\nfrom icontract import require, ensure, DBC\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"1\"\nassert solution(\"5 4\") == \"1\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"3 1\") == \"6\"\nassert solution(\"15 2\") == \"97\"\n\n\"\"\""
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2') == '8'\n\"\"\"\nimport math"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\") == \"8\"\n\nassert solution(\"3 1\") == \"6\"\n\nassert solution(\"15 2\") == \"97\"\n\"\"\""
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == \"8\"\nassert solution(\"3 1\\n1 1 1\") == \"6\"\nassert solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"97\"\n\nprint(\"Successfully passed all test cases!\")\n\n\n------Problem------\n\nThe index of median of a sequence of integers is the smallest index $i$ that guarantees the following property:\n\nthe number of elements in the left half of the sequence, that is, $a_1, a_2, \\dots, a_i$, is equal to the number of elements in the right half of the sequence, that is, $a_{i+1}, a_{i+2}, \\dots, a_n$.\n\nGiven an integer sequence $a_1, a_2, \\dots, a_n$ find the index of median and the number of elements in the left half.\n\nInput\n\nThe first line contains integers $n$ and $m$ \u2014 the length of the sequence and the required value of the median.\n\nThe second line contains an integer sequence $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 2\\cdot10^5$).\n\nOutput\n\nPrint two integers \u2014 the index of median and the number of elements in the left half of the sequence.\n\nConstraints\n1 <= n <= 2 * 10^5\n1 <= m <= 2 * 10^5\n1 <= a_i <= 2 * 10^5\nIt is guaranteed that the median of the sequence exists.\n\nExamples\nInput\n\n4 2\n1 2 3 4\n\nOutput\n\n2 4\n\nInput\n\n5 3\n1 2 3 1 2 3\n\nOutput\n\n4 4\n\nInput\n\n5 3\n4 5 4 5\n\nOutput\n\n1 4\n\nInput\n\n5 3\n4 3 4 3 1\n\nOutput\n\n3 6\n\nInput\n\n5 3\n1 3 1 2 2\n\nOutput\n\n0 1\n\nInput\n\n5 3\n3 2 3 1 2\n\nOutput\n\n1 0\n\nInput\n\n5 3\n3 3 3 3 1\n\nOutput\n\n3 0\n\nInput\n\n5 3\n4 3 1 3 2\n\nOutput\n\n2 4\n\nInput\n\n5 3\n4 4 3 2 1\n\nOutput\n\n0 2\n\nInput\n\n5 3\n4 1 2 1 1\n\nOutput\n\n1 1\n\nInput\n\n5 3\n2 2 2 2 1\n\nOutput\n\n4 4\n\nInput\n\n5 3\n1 1 2 2 3\n\nOutput\n\n1 4\n\nInput\n\n5 3\n2 2 1 1 3\n\nOutput\n\n3 0\n\nInput\n\n5 3\n3 2 2 2 1\n\nOutput\n\n2 3\n\nInput\n\n5 3\n2 2 1 1 2\n\nOutput\n\n0 1\n\nInput\n\n5 3\n2 2 1 2 1\n\nOutput\n\n2 3\n\nInput\n\n5 3\n1 1 1 2 2\n\nOutput\n\n0 2\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n4 0\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n5 0\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n5 0\n\nInput\n\n5 3\n1 1 1 1 2\n\nOutput\n\n1 2\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n5 0\n\nInput\n\n5 3\n1 1 1 1 2\n\nOutput\n\n1 2\n\nInput\n\n5 3\n1 1 1 2 1\n\nOutput\n\n1 2\n\nInput\n\n5 3\n1 1 2 2 1\n\nOutput\n\n1 2\n\nInput\n\n5 3\n1 1 1 2 1\n\nOutput\n\n1 2\n\nInput\n\n5 3\n1 1 2 2 2\n\nOutput\n\n1 3\n\nInput\n\n5 3\n1 2 1 1 1\n\nOutput\n\n0 2\n\nInput\n\n5 3\n1 2 1 1 1\n\nOutput\n\n0 2\n\nInput\n\n5 3\n1 2 1 1 1\n\nOutput\n\n0 2\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n4 0\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n4 0\n\nInput\n\n5 3\n2 2 1 1 1\n\nOutput\n\n0 1\n\nInput\n\n5 3\n2 1 2 2 1\n\nOutput\n\n1 1\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n4 0\n\nInput\n\n5 3\n1 1 1 1 2\n\nOutput\n\n1 2\n\nInput\n\n5 3\n1 1 1 1 2\n\nOutput\n\n1 2\n\nInput\n\n5 3\n1 1 1 2 1\n\nOutput\n\n1 2\n\nInput\n\n5 3\n2 1 1 2 1\n\nOutput\n\n0 1\n\nInput\n\n5 3\n1 1 1 2 1\n\nOutput\n\n1 2\n\nInput\n\n5 3\n1 1 1 2 1\n\nOutput\n\n1 2\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n4 0\n\nInput\n\n5 3\n1 1 1 1 2\n\nOutput\n\n1 2\n\nInput\n\n5 3\n1 1 1 1 2\n\nOutput\n\n1 2\n\nInput\n\n5 3\n2 1 1 2 1\n\nOutput\n\n0 1\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n4 0\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n5 0\n\nInput\n\n5 3\n1 2 1 1 1\n\nOutput\n\n0 1\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n4 0\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n5 0\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n5 0\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n5 0\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n5 0\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n5 0\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n5 0\n\nInput\n\n5 3\n1 2 1 2 1\n\nOutput"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 4\\n1 4 5 60 4') == '8'\nassert solution('3 1\\n1 1 1') == '6'\nassert solution('15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3') == '97'\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == \"8\"\n\nassert solution(\"3 1\\n1 1 1\") == \"6\"\nassert solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"97\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\") == \"8\"\nassert solution(\"1 4 5 60 4\") == \"8\"\nassert solution(\"1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"97\"\nassert solution(\"1 1 1\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 4 5 60 4\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"8\"\nassert solution(\"1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"97\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 4') == '2'\nassert solution('3 1') == '6'\nassert solution('15 2') == '97'\n\"\"\"\n\nfrom typing import List\nfrom bisect import bisect_left, bisect_right\nfrom collections import deque\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == '6\\n2\\n1 4'\n\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == '7\\n2\\n3 2'\n\nassert solution(\"1 0\\n1000000\") == '0\\n0'"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"5 4\") == \"2\"\nassert solution(\"2 -2 3 1 2\") == \"6\"\nassert solution(\"1 3\") == \"1 4\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"6 4\"\n) == \"6\"\nassert solution(\n    \"5 4\"\n) == \"7\"\nassert solution(\n    \"1 0\"\n) == \"0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 4') == '6'\nassert solution('6 5') == '7'\nassert solution('6 5') == '7'\nassert solution('3 4') == '0'\nassert solution('3 5') == '0'\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\"\nassert solution(\"1 0\") == \"0\\n0\""
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n\"\"\"\n\nfrom typing import List\n\nimport pytest\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 4\") == \"3 2\"\n\nassert solution(\"5 4\") == \"3 2\"\n\nassert solution(\"5 3\") == \"4 1\"\n\nassert solution(\"5 2\") == \"3 1\"\n\nassert solution(\"5 1\") == \"0\""
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"7\\n2\\n1 4\\n\"\n\"\"\""
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"7\\n2\\n1 4\\n\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\\n\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\\n\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('fced') == 'Yes'\nassert solution('xyz') == 'Yes'\nassert solution('r') == 'Yes'\nassert solution('dabcef') == 'No'\nassert solution('az') == 'No'\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"fced\\nxyz\\nr\") == \"Yes\"\nassert solution(\"fced\\nz\\nr\") == \"No\"\nassert solution(\"fced\\nz\\nr\") == \"No\"\nassert solution(\"a\\nb\") == \"No\"\nassert solution(\"xzz\\nyy\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abc\") == \"No\"\nassert solution(\"fced\") == \"Yes\"\nassert solution(\"abcdefg\") == \"No\"\nassert solution(\"az\") == \"No\"\nassert solution(\"aa\") == \"No\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\nb = [list(map(int, stdin.readline().split())) for _ in range(m)]\n\ndp = [float('-inf')] * n\nfor l, r in b:\n    dp[l - 1] = max(dp[l - 1], a[l - 1] - a[r - 1])\n\nq = [i + 1 for i, x in enumerate(dp) if x == max(dp)]\nprint(max(dp) + 1)\nprint(' '.join(map(str, q)))\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == '7\\n2\\n4 1'\n\nassert solution(\"4 5\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\\n1 3\\n\") == '7\\n2\\n3 2'\n\nassert solution(\"1 0\\n1000000\\n\") == '0\\n0'\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5') == '6\\n2\\n4 1'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5') == '6\\n2\\n4 1'\n\"\"\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\""
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n4 1'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3''') == '6\\n2\\n4 1'\nassert solution('''1 0\n1000000''') == '0\\n0'\n\nassert solution('''5 4\n2 -2 3 1 2\n3 5\n3 4\n2 4\n2 5''') == '7\\n2\\n3 2'\n\nassert solution('''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3''') == '6\\n2\\n4 1'\n\nassert solution('''5 4\n2 -2 3 1 2\n3 5\n3 4\n2 4\n2 5''') == '7\\n2\\n3 2'\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"7\\n2\\n4 1\\n\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == \"7\\n2\\n3 2\\n\"\nassert solution(\"1 0\\n1000000\\n\") == \"0\\n0\\n\"\nassert solution(\"10 10\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\\n7 1\\n8 1\\n9 1\\n10 1\\n\") == \"10\\n1\\n\"\n\n\"\"\""
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5') == '6\\n2\\n4 1'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n\n\"\"\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '0 0'\nassert solution('1 2') == '2 0'\nassert solution('0 0') == '0 0'\nassert solution('1 -2 3 1 2') == '6 2'\nassert solution('3 5') == '7 2'\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\"\n\"\"\""
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 5 4 3') == '4'\nassert solution('1 3 5 6 7 4') == '7'\nassert solution('1 2 5 4 3') == '4'\n\nassert solution('7 1 3 5 6 7 4 2') == '7'\nassert solution('7 1 3 5 6 7 4 2') == '7'\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4\\nLRRR'\n\nassert solution('7\\n1 3 5 6 7 4 2') == '7\\nLRLRLLL'\n\nassert solution('3\\n1 2 3') == '3\\nLLL'\n\nassert solution('4\\n1 2 4 3') == '4\\nLLRL'\n\n\"\"\"\n\nn = int(input())\nnums = list(map(int, input().split()))\n\nleft, right = 0, n-1\nleft_count, right_count = 0, 0\nmoves = 0\n\nwhile left < right:\n    if nums[left] > nums[right]:\n        right_count += 1\n        right -= 1\n    elif nums[left] < nums[right]:\n        left_count += 1\n        left += 1\n    moves += 1\n\nprint(moves)\nprint('L'*left_count + 'R'*right_count)\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\n\" + \"LRRR\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\n\" + \"LRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\n\" + \"LLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\n\" + \"LLRL\"\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == '4\\nLRRR'\nassert solution(\"7\\n1 3 5 6 7 4 2\") == '7\\nLRLRLLL'\nassert solution(\"3\\n1 2 3\") == '3\\nLLL'\n\"\"\"\nfrom tools import timing\n\n\"\"\"\nclass Solution:\n    def __init__(self):\n        self.res = 0\n\n    @timing\n    def solution(self, n):\n        arr = list(range(1, n + 1))\n        l = r = 0\n\n        while l < n:\n            if l == r:\n                self.res += 1\n                r += 1\n                l = r\n\n            elif arr[l] < arr[r]:\n                self.res += 1\n                l += 1\n\n            else:\n                self.res += 1\n                r += 1\n\n        return self.res\n\"\"\"\n\n\"\"\"\n2\n5\n2 1 5 4 3\n7\n1 3 5 6 7 4 2\n3\n1 2 3\n4\n1 2 4 3\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\nk = 1\ni, j = 0, n - 1\n\nwhile i <= j:\n    if arr[i] < arr[j]:\n        i += 1\n    else:\n        k += 1\n        j -= 1\n\nprint(k)"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1 5 4 3') == '4'\nassert solution('1 3 5 6 7 4 2') == '7'\nassert solution('1 2 3') == '3'\nassert solution('1 2 4 3') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\"\nassert solution(\"3\\n1 2 3\") == \"3\"\nassert solution(\"4\\n1 2 4 3\") == \"4\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 5 4 3\") == \"4\"\nassert solution(\"1 3 5 6 7 4\") == \"7\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2 4 3\") == \"4\"\nassert solution(\"1 2 5 4 3\") == \"4\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1 5 4 3') == 4\nassert solution('1 3 5 6 7 4') == 7\nassert solution('1 2 3') == 3\nassert solution('1 2') == 2\nassert solution('1') == 1\n\"\"\"\n\nimport sys\nfrom collections import deque\nfrom typing import List, Deque, Tuple\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 5 4 3\") == \"4\"\nassert solution(\"1 3 5 6 7 4\") == \"7\"\nassert solution(\"1 2 3\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 5 3 4') == 4\nassert solution('2\\n1 2') == 2\nassert solution('7\\n6 5 4 3 2 4 3') == 2\nassert solution('3\\n6 5 4 3 2 4 3') == 2\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"4\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\""
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"2\"\nassert solution(\"1 2 5 3 4\") == \"2\"\nassert solution(\"1 2 5 3 4\") == \"2\"\nassert solution(\"1 2 5 3 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 5 3 4') == 4\n\nassert solution('2\\n1 2') == 2\n\nassert solution('7\\n6 5 4 3 2 4 3') == 2\n    \"\"\"\n    pass"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 5 3 4') == '4'\nassert solution('2\\n1 2') == '2'\nassert solution('7\\n6 5 4 3 2 4 3') == '2'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4') == '4'\nassert solution('3\\n1 2 4') == '3'\nassert solution('2\\n1 2') == '2'"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 4\") == '4'\n\"\"\"\n\nimport sys\nimport math\nfrom typing import List\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == 4\n\"\"\"\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '1'\n\"\"\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 2 4 5') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 3 3') == '0'\nassert solution('1 2 3 3 1') == '3'\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n\") == \"2\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '1'\nassert solution('5 3\\n1 2 3 3 3') == '0'\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 3\n1 2 2 4 5\n''') == '1'\n\nassert solution('''5 3\n1 2 3 4 5\n''') == '2'\n\nassert solution('''5 3\n1 2 2 2 3\n''') == '0'\n\nassert solution('''5 3\n1 2 3 3 3\n''') == '0'\n\nassert solution('''5 3\n1 2 3 2 3\n''') == '0'"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 2 3 4 5\") == 1\nassert solution(\"1 2 2 4 5\") == 2\nassert solution(\"1 2 3 4 5\") == 2\nassert solution(\"1 2 3 3 3\") == 0\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"2\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\nassert solution(\"5 3\\n1 1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 2 4 5\\n') == '1'\nassert solution('1 2 2 4 5\\n') == '2'\nassert solution('1 2 3 4 5\\n') == '0'\n\"\"\""
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n1 2 3 4 5\") == \"2\"\nassert solution(\"6 7\\n1 2 3 3 3 3\\n\") == \"0\"\nassert solution(\"1 1\\n1\") == \"0\"\nassert solution(\"8 8\\n2 2 2 2 2 2 2 2\") == \"8\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"2\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n1 2 2 4 5\\n') == '1'\nassert solution('5 3\\n1 2 2 4 5\\n') == '2'\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3 2') == '4'\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 4\") == \"4\"\nassert solution(\"8 3 4\") == \"4\"\nassert solution(\"2 1 1\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3 4\") == '4'\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 3 4\\n') == '4'\n\"\"\"\n\nfrom math import gcd\n\nn, a, b = map(int, input().split())\nprint(gcd(a, b) * (n // gcd(a, b)))\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\n'''"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\"\n\n\"\"\"\n8 3 4\n0 1 0\n\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"8 3 4\"\n) == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"8 3 4\"\n) == \"4\"\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"8 3 4\"\n) == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n2\n8\n8 2 12 6 4 24 16 3\n1\n2\n\"\"\"\n) == \"\"\"\n48\n4\n\"\"\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n2\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == '48\\n4'\n\"\"\"\nfrom itertools import combinations, chain\nfrom math import prod"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n8 2 12 6 4 24 16 3') == '48'\nassert solution('1\\n2') == '-1'\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n8\\n2 12 6 4 24 16 3\") == \"48\"\nassert solution(\"1\\n2\") == \"1\"\nassert solution(\"4\\n3\\n2\\n1\\n4\\n5\") == \"-1\"\n\"\"\"\n\nfrom math import log2\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\") == \"48\"\n\"\"\""
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8\\n8 2 12 6 4 24 16 3') == '48'\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\") == \"48\"\n\"\"\"\n\nfrom collections import Counter\n\nimport sys\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n8\\n2\\n4\\n8\\n4\\n2\\n2\\n4\\n8\\n8\\n8\\n2\\n4\\n4\\n4\\n2\\n2\\n8\\n2\\n4\\n2\\n2\\n4\\n4\\n2\\n2\\n8\\n4\\n2\\n2\\n2\\n2\\n4\\n4\\n4\\n2\\n4\\n4\\n4\\n4\\n4\\n2\\n4\\n4\\n4\\n2\\n4\\n4\\n2\\n2\\n2\\n8\\n2\\n4\\n2\\n2\\n2\\n4\\n2\\n2\\n2\\n2\\n2\\n2\\n4\\n2\\n2\\n2\\n8\\n4\\n2\\n4\\n4\\n2\\n4\\n4\\n4\\n4\\n4\\n2\\n2\\n4\\n4\\n2\\n4\\n2\\n4\\n4\\n4\\n4\\n4\\n4\\n2\\n2\\n2\\n8\\n4\\n2\\n4\\n2\\n4\\n4\\n2\\n4\\n4\\n2\\n2\\n2\\n8\\n4\\n2\\n2\\n2\\n4\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n4\\n4\\n2\\n4\\n2\\n4\\n4\\n4\\n4\\n8\\n8\\n8\\n2\\n4\\n2\\n4\\n2\\n2\\n4\\n4\\n4\\n2\\n4\\n4\\n2\\n2\\n8\\n4\\n4\\n8\\n4\\n4\\n2\\n4\\n2\\n2\\n2\\n8\\n8\\n8\\n4\\n4\\n2\\n8\\n8\\n8\\n8\\n2\\n8\\n2\\n4\\n4\\n2\\n4\\n2\\n4\\n2\\n4\\n4\\n2\\n4\\n2\\n4\\n2\\n2\\n2\\n2\\n4\\n4\\n2\\n2\\n4\\n4\\n4\\n2\\n4\\n4\\n4\\n4\\n4\\n4\\n8\\n8\\n4\\n8\\n8\\n8\\n8\\n2\\n8\\n4\\n4\\n2\\n8\\n2\\n4\\n4\\n4\\n4\\n4\\n4\\n8\\n4\\n2\\n4\\n4\\n2\\n4\\n4\\n2\\n2\\n2\\n8\\n4\\n2\\n4\\n4\\n2\\n2\\n2\\n2\\n2\\n2\\n8\\n2\\n4\\n2\\n4\\n4\\n2\\n4\\n4\\n2\\n2\\n8\\n8\\n8\\n4\\n4\\n4\\n4\\n8\\n8\\n8\\n8\\n2\\n4\\n2\\n2\\n4\\n2\\n4\\n2\\n2\\n2\\n2\\n2\\n8\\n2\\n2\\n4\\n4\\n8\\n4\\n4\\n4\\n4\\n2\\n2\\n4\\n4\\n4\\n8\\n4\\n2\\n4\\n2\\n8\\n4\\n4\\n2\\n4\\n4\\n2\\n4\\n2\\n2\\n8\\n2\\n2\\n4\\n4\\n2\\n4\\n2\\n4\\n4\\n4\\n8\\n4\\n4\\n8\\n4\\n4\\n8\\n8\\n8\\n8\\n4\\n8\\n8\\n4\\n8\\n8\\n8\\n8\\n2\\n2\\n4\\n2\\n4\\n2\\n2\\n4\\n2\\n8\\n4\\n2\\n4\\n4\\n4\\n2\\n4\\n4\\n4\\n8\\n2\\n4\\n2\\n2\\n4\\n8\\n8\\n4\\n4\\n4\\n8\\n4\\n8\\n4\\n4\\n4\\n8\\n8\\n4\\n2\\n8\\n2\\n4\\n8\\n8\\n2\\n4\\n2\\n4\\n4\\n8\\n8\\n4\\n8\\n8\\n2\\n4\\n4\\n2\\n4\\n2\\n4\\n4\\n8\\n8\\n8\\n8\\n8\\n4\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n4\\n4\\n2\\n4\\n4\\n8\\n4\\n8\\n8\\n2\\n4\\n4\\n8\\n4\\n8\\n4\\n8\\n8\\n8\\n4\\n8\\n4\\n2\\n4\\n8\\n8\\n8\\n4\\n8\\n4\\n8\\n8\\n8\\n8\\n8\\n8\\n4\\n8\\n4\\n4\\n2\\n4\\n8\\n4\\n8\\n4\\n4\\n2\\n4\\n2\\n4\\n2\\n4\\n4\\n8\\n4\\n4\\n8\\n4\\n4\\n8\\n4\\n8\\n2\\n4\\n4\\n8\\n8\\n4\\n2\\n8\\n4\\n4\\n2\\n4\\n4\\n8\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n8\\n8\\n8\\n4\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n4\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n4\\n8\\n4\\n8\\n8\\n4\\n8\\n4\\n2\\n4\\n4\\n2\\n4\\n2\\n4\\n4\\n4\\n4\\n4\\n8\\n4\\n4\\n8\\n4\\n8\\n8"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n8\\n8 2 12 6 4 24 16 3\") == \"48\"\n\nassert solution(\"2\\n5\\n2 2 4 2\") == \"2\"\n\nassert solution(\"2\\n5\\n2 4 4\") == \"-1\"\n\n\"\"\"\n\n\n\n\"\"\"\n\n1 <= t <= 25\n2 <= n <= 300\n2 <= d_i <= 10000\nIt is guaranteed that all values d_i are distinct.\n\n\"\"\""
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\") == \"48\"\n\"\"\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 6 6 6 6\") == \"1 6\"\nassert solution(\"5 5 5 5 5\") == \"2 5\"\nassert solution(\"5 4 4 4\") == \"1 4\"\nassert solution(\"5 4 4 5\") == \"1 4\"\nassert solution(\"5 4 4 4\") == \"1 4\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 5 5 1 6 1\\n\") == \"3\\n5 6 1\\n\"\nassert solution(\"5\\n6 6 6 6 6\\n\") == \"1\\n6\\n\"\nassert solution(\"5\\n6 6 6 6 6\\n\") == \"1\\n6\\n\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5 5 1 6 1\\n\") == \"3\\n5 6 1\"\nassert solution(\"5\\n6 6 6 6 6\\n\") == \"1\\n6\"\n\"\"\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 5 5 1 6 1\") == \"3\\n5 6 1\"\nassert solution(\"5\\n2 4 2 4 4\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6 6 6 6\") == \"1 6\"\nassert solution(\"2 4 2 4 4\") == \"2 4\"\nassert solution(\"5 6 6 6 6\") == \"1 6\"\n\n\"\"\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"5\\n2 4 2 4 4\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"1\\n5\") == \"1\\n5\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n6 6 6 6 6\") == \"1\\n6\"\n\"\"\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 2 4 4\") == \"2\\n2 4\"\nassert solution(\"6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"5 6 6 6 6\") == \"1\\n6\"\nassert solution(\"5 6 7 8 9\") == \"1\\n7\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '1 2 3 4'\nassert solution('1 2 3 2 3') == '1 2 3 3'\nassert solution('1 2 3 2 2 3') == '1 2 3 2 2'\nassert solution('1 2 1 2 2 3 3') == '1 2 1 2 2 3 3'\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 5 5 1 6 1') == '3\\n5 6 1'\nassert solution('5\\n2 4 2 4 4') == '2\\n2 4'\nassert solution('5\\n6 6 6 6 6') == '1\\n6'"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('432') == '435'\n\"\"\""
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\nprint('The tests are done. No more input required.')\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(432) == 435\nassert solution(99) == 103\nassert solution(237) == 237\nassert solution(42) == 44\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\nassert solution(\"100\") == \"200\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"432\") == \"435\"\n\"\"\"\n\nimport sys\nfrom typing import Any\n\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_INT = int(INPUT_LINES[0])\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\nprint('Test pass.')\n\nfrom a1 import solution\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\nassert solution(\"1111\") == \"1112\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abac') == 'aac'\n\nassert solution('abc') == 'b'\n\nassert solution('abba') == 'aba'\n\nassert solution('ecoosdcefr') == 'codeforces'\n\nassert solution('dcefoas') == 'dcefoas'"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\""
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\n\nassert solution(\"aabac\") == \"aabac\"\n\nassert solution(\"ecoosdcefr\") == \"codeforces\""
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\"\"\"\n\n\nimport collections\n\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.children = dict()\n        self.indices = dict()\n\n\nclass Solution:\n    def __init__(self):\n        self.root = Node(None)\n        self.table = dict()\n        self.visited = set()\n\n    def insert(self, string):\n        if not string:\n            return None\n        if string in self.table:\n            return self.table[string]\n        node = self.root\n        for s in string:\n            if s not in node.children:\n                node.children[s] = Node(s)\n                node.children[s].indices[s] = 0\n                node = node.children[s]\n            else:\n                node = node.children[s]\n                node.indices[s] += 1\n        self.table[string] = node\n        return node\n\n    def find_next(self, node):\n        if not node:\n            return None\n        if node.indices == 0:\n            return None\n        if node.indices == len(node.children) - 1:\n            return self.find_next(node.children[node.data])\n        max_value = -1\n        res = None\n        for k, v in node.indices.items():\n            if v == max_value and res is None:\n                res = k\n            if v > max_value:\n                max_value = v\n                res = k\n        return self.find_next(node.children[res])\n\n    def solve(self, q: int, query: list) -> str:\n        res = []\n        for i in range(q):\n            stdin = query[i * 3]\n            m = int(query[i * 3 + 1])\n            b = [int(x) for x in query[i * 3 + 2].split(' ')]\n            self.root = self.insert(stdin)\n            node = self.insert(stdin)\n            self.visited = set()\n            self.visited.add(node)\n            for j in range(m):\n                node = self.insert(stdin)\n                self.visited.add(node)\n                node.indices[self.find_next(node)] -= 1\n            res.append(self.find_next(self.root))\n        return '\\n'.join(res)\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"abac\") == \"aac\""
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abac') == 'aac'\nassert solution('ecoosdcefr') == 'codeforces'\n\"\"\"\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\"\"\"\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aac\") == \"aac\"\nassert solution(\"aab\") == \"aab\"\nassert solution(\"aba\") == \"aba\"\nassert solution(\"bbc\") == \"bbc\"\nassert solution(\"codeforces\") == \"codeforces\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"ab\") == \"b\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == 'a'\nassert solution('26') == 'z'\nassert solution('27') == 'aa'\nassert solution('701') == 'zz'\nassert solution('18277') == 'zzz'\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"b\""
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == 'b'\nassert solution('1000000000000001') == 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2') == 'b'\nassert solution('3') == 'c'\nassert solution('4') == 'd'\nassert solution('5') == 'e'\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"b\"\nprint(solution(\"2\"))\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"b\"\nassert solution(\"1000000000000001\") == \"zzzzzz\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"b\"\n\"\"\""
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"a\"\nassert solution(\"2\") == \"b\"\nassert solution(\"26\") == \"z\"\n\"\"\""
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"b\"\n\n\"\"\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 'b'\nassert solution('1000000000000001') == 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"to be or not to be\") == \"TB or not TB\"\nassert solution(\"aa bb aa aa bb bb\") == \"AB aa AB bb\"\nassert solution(\"aa aa aa bb bb\") == \"AA AB Bb\"\n\"\"\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"to be or not to be\") == \"12\"\nassert solution(\"a ab a a b ab a a b c\") == \"13\"\nassert solution(\"aa bb aa aa bb bb\") == \"11\"\n\"\"\""
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('to be or not to be') == 12\nassert solution('a ab a a b ab a a b c') == 13\nassert solution('aa bb aa aa bb bb') == 11"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('abc') == 3\nassert solution('a ab a a b ab a a b c') == 11\nassert solution('aa bb aa aa bb bb') == 11\n\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\nto be or not to be\") == \"12\\n\"\nassert solution(\"10\\na ab a a b ab a a b c\") == \"13\\n\"\nassert solution(\"6\\naa bb aa aa bb bb\") == \"11\\n\""
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('to be or not to be') == 'TB or not TB'\nassert solution('a ab a a b ab a a b c') == 'a AAAB AAAB c'\nassert solution('aa bb aa aa bb bb') == 'AB aa AB bb'\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\nassert solution(\"aA bB aA aA bB bB\") == 11\n\n\n\"\"\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\nassert solution(\"aa bb aa aa bb bb\") == 11\n\na b a c d a b c d\n1 4\n\n----\nab aa ab bb\n0 3\n\n----\naa bb aa aa bb bb\n0 5\n\n----\naa bb aa aa bb bb\n0 5\n\n----\naa bb aa aa bb bb\n0 5\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\nto be or not to be\") == \"12\"\nassert solution(\"10\\na ab a a b ab a a b c\") == \"13\"\nassert solution(\"6\\naa bb aa aa bb bb\") == \"11\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2') == '20'\nassert solution('5 1\\n1 1 1 1 1') == '1'\nassert solution('4 2\\n1 2000 2000 2') == '4000'\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution([\"8\", \"3\"]) == '20'\nassert solution([\"5\", \"1\"]) == '1'\nassert solution([\"4\", \"2000\", \"2000\", \"2\"]) == '4000'\nprint('Success')\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n1 2000 2000 2') == '4000\\n2 2'\n\"\"\"\n\nn, k = [int(x) for x in stdin.split()]\na = [int(x) for x in stdin.split()]\n\nl, r = 0, 0\nm = 0\nfor r in range(n):\n    if m < a[r]:\n        m = a[r]\n    if m > k:\n        break\n    if m + r - l == k:\n        print(m * (r - l + 1))\n        l, r = r + 1, r + 1\n    elif r - l + 1 == k:\n        print(m * (r - l + 1))\n        l, r = r + 1, r + 1\n    else:\n        r += 1\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\\n2 2\"\n\"\"\""
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\"\nassert solution(\"4 2\\n1 2000 2\") == \"4000\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\") == \"20\"\nassert solution(\"5 1\\n1 1 1 1 1\\n\") == \"1\"\nassert solution(\"4 2\\n1 2000 2000 2\\n\") == \"4000\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2000 2000 2\") == \"4000\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\"\nassert solution(\"3 2\\n1 2000 2\") == \"2000\"\n\n\"\"\""
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\\n\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\\n\") == \"4000\\n2 2\"\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\nassert solution(\"5 -2 3 -9 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\nassert solution(\"5 -1 3 -1 2\") == \"0\"\nassert solution(\"8 -1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"9 -1 -1 1 -1 1 1 -1 -1\") == \"3\"\nassert solution(\"11 -1 -1 1 -1 1 1 -1 -1\") == \"6\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\nassert solution(\"5 -2 3 -9 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 -5 3 2') == '1'\nassert solution('4 -2 3 -9 2') == '0'\nassert solution('-1 1 -1 1 -1 1 1 -1 -1') == '6'\nassert solution('-1 1 -1 1 -1 1 1 -1 -1') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(expected_result)\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -2 3 -9 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -2 3 -9 2\") == \"1\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\nassert solution(\"5 -11 10 5 4 -4\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 16 -5 -11 -15 10 5 4 -4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 -2 3 -9 2') == '1'\nassert solution('5 -11 -15 10 5 4 -4') == '0'\nassert solution('9 -1 1 -1 1 -1 1 1 -1 -1') == '6'\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -2 3 -9 2\") == \"1\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n\n\n\n\"\"\""
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 100\") == \"0\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"2 1000000000\") == \"1000000000\"\nassert solution(\"1 1000000000\") == \"2000000000\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 100') == '0'\nassert solution('2 2') == '0'\nassert solution('5 5') == '0'\nassert solution('2 1000000000') == '2000000000'\nassert solution('1 1000000000') == '1000000000'"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"2000000000\"\n\nassert solution(\"1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"2000000000\"\n\"\"\"\n\n\"\"\"\n\ub0b4\uac00 \ud480\uc740 \uac83\n\n\ub0b4\uac00 \ud480\uc740 \uac83\n2\n3 1\n4 3\n5 2\n5 3\n6 4\n7 1\n8 1\n9 1\n10 2\n\n2\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n\n2\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n\n10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n\n5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n\n5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n\n10\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n\n\"\"\""
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 100\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"2 1000000000\") == \"2\"\nassert solution(\"1000000000 1000000000\") == \"2000000000\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 100\\n10 5\\n6 3\\n4 1\\n1 1\") == '1\\n1\\n0\\n1'\nassert solution(\"6 1000000000\\n1 1000000000\") == '2000000000\\n1'\nassert solution(\"4 100\\n10 5\\n6 3\\n4 1\\n1 1\") == '1\\n1\\n0\\n1'\nassert solution(\"6 1000000000\\n1 1000000000\") == '2000000000\\n1'\nassert solution(\"6 1000000000\\n1 1000000000\") == '2000000000\\n1'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 100') == '0'\nassert solution('2 2') == '2'\nassert solution('5 5') == '10'\nassert solution('1 1000000000') == '2000000000'\nassert solution('2 1000000000') == '2000000000'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"0\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"3 4\") == \"2\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"1 3\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n100 100 100 99') == '0'\nassert solution('5\\n1 100') == '0'\nassert solution('2\\n2 2') == '0'\nassert solution('1\\n1 1') == '0'\nassert solution('1\\n2 3') == '1'\n\"\"\"\n\n\nfrom collections import defaultdict\nimport heapq\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(['2', '3']) == '4'\nassert solution(['2', '1']) == '1'\nassert solution(['1', '100']) == '0'\nassert solution(['0', '0']) == '0'\nassert solution(['2', '100']) == '0'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('5, 100\\n2, 2') == '0\\n2'\nassert solution('5, 100\\n1000000000, 1000000000') == '1000000000'\nassert solution('5, 100\\n1, 1000000000') == '2000000000'"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101') == '4'\nassert solution('1000') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('101') == '4'\n\"\"\"\n\nk = int(stdin)\n\ni = 1\n\nwhile i < 1000001:\n    if i % k == 0:\n        print(i)\n        break\n    i += 1\nelse:\n    print(-1)\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"101\") == \"4\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"101\") == 4\n\n-----\n\n'''\n\nimport sys\n\nK = int(sys.stdin.readline())"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(sample_input) == sample_output\n\"\"\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('101') == '4'\nassert solution('9') == '-1'\nassert solution('101010') == '4'\nassert solution('1000000') == '-1'\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('101') == '4'\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('101') == '4'\nassert solution('1') == '0'\nassert solution('2') == '1'\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('101') == '4'\nassert solution('18') == '1'\nassert solution('101101') == '6'\n\"\"\"\n\nK = int(stdin.readline().rstrip('\\n'))\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\", \"2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\", \"1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\", \"1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\n\"\"\""
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(['3', '5', '7', '9', '10', '8']) == '1'\nassert solution(['1', '2', '3', '4', '5']) == '0'\nassert solution(['2', '3', '1', '5', '4']) == '4'\n\n-----\n\"\"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\") == '4'\n\"\"\"\nfrom typing import List\nimport math\n\nfrom collections import Counter\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\") == \"4\"\n\"\"\"\n\n\nclass Solution:\n    def brute_force(self, nums, m):\n        \"\"\"O(n^2) / O(1)\"\"\"\n        n = len(nums)\n        res = 0\n        for l in range(n - 1):\n            for r in range(l + 1, n):\n                mid = (l + r) // 2\n                if nums[mid] == m:\n                    res += 1\n        return res\n\n    def solution(self, stdin: str) -> str:\n        n, m = map(int, stdin.split())\n        nums = list(map(int, stdin.split()))\n        nums.sort()\n        left, right = 0, n - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] == m:\n                left = mid + 1\n            elif nums[mid] < m:\n                left = mid + 1\n            else:\n                right = mid - 1\n        res = 0\n        if left == n - 1:\n            res = 0\n        else:\n            if nums[left] == m:\n                res = 1\n            elif nums[left] > m:\n                res = self.brute_force(nums, m)\n        return str(res)\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\n\n\n\"\"\""
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5') == '1'\n\nassert solution('5 4') == '1'\n\nassert solution('5 5') == '0'\n\nassert solution('15 8') == '48'\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('5 4') == '4'\nassert solution('5 5') == '1'\nassert solution('15 8') == '48'\n\"\"\"\nfrom typing import List, Dict\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5 4\n2 4 5 3 1\"\"\") == \"4\"\nassert solution(\"\"\"5 5\n1 2 3 4 5\"\"\") == \"1\"\nassert solution(\"\"\"15 8\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\"\"\") == \"48\"\n\"\"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"3 1 2\") == \"1\"\nassert solution(\"6 5 4 3 2 1\") == \"1\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n2 4 5 3 1') == '4'\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 10\\n5 5 5 5 5\\n\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == \"1\"\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\nl = [int(x) for x in input().split()]\nl.sort()\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '-1'\nassert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '-1'\nassert solution('5 26\\n5 5 5 5 5') == '2'"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\nassert solution('5 16\\n5 5 5 5 5') == '2'\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5 2 3 1 1 2') == '4'\nassert solution('7 10 5 5 5 5') == '2'\nassert solution('5 15 5 5 5') == '-1'\nassert solution('5 26 5 5 5') == '-1'\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 35\\n5 5 5 5 5\") == \"2\"\n\n---\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\"\"\"\n\n\nfrom typing import List, Tuple, Set\nimport unittest\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 8\") == \"4\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 15\") == \"2\"\nassert solution(\"5 26\") == \"-1\"\nassert solution(\"5 16\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == '4'\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\") == '1'\nassert solution(\"5 26\\n5 5 5 5 5\") == '-1'\n\"\"\"\n\nn, m = list(map(int, input().split()))\ncups = list(map(int, input().split()))\n\ncups.sort()\n\nstart = 0\nend = max(cups)\n\nans = 0\nwhile start <= end:\n    mid = (start + end) // 2\n    sum = 0\n    for c in cups:\n        sum += min(c, mid)\n    if sum > m:\n        start = mid + 1\n    else:\n        end = mid - 1\n        ans = mid\nprint(ans)\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == '4'\nassert solution(\"7 10\\n5 5 5 5 5\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\") == '-1'\nassert solution(\"5 26\\n5 5 5 5 5\") == '-1'\nassert solution(\"5 5\\n5 5 5 5 5\") == '1'\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\\n\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\\n\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == \"-1\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n14 5 1\\n\") == \"1\"\nassert solution(\"5\\n1 3 6 9 12\\n\") == \"1\"\nassert solution(\"2\\n500 500\\n\") == \"0\"\nassert solution(\"3\\n14 5 1\\n\") == \"-1\"\nassert solution(\"5\\n1 3 6 9 12\\n\") == \"1\""
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n24 21 14 10\\n\") == \"3\"\nassert solution(\"2\\n500 500\\n\") == \"0\"\nassert solution(\"3\\n14 5 1\\n\") == \"1\"\nassert solution(\"5\\n1 3 6 9 12\\n\") == \"1\"\n\"\"\"\n\nimport sys\nimport itertools\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n24 21 14 10\") == \"3\"\nassert solution(\"2\\n500 500\") == \"0\"\nassert solution(\"5\\n1 3 6 9 12\") == \"1\""
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"3 14 5 1\") == \"-1\"\nassert solution(\"5 1 3 6 9 12\") == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"3 1 2 4\") == \"1\"\nassert solution(\"1 3 6 9 12\") == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"14 5 1\") == \"-1\"\nassert solution(\"5 1 3 6 9 12\") == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 21 14 10\") == 3\nassert solution(\"500 500\") == 0\nassert solution(\"1 3 6 9 12\") == -1\nassert solution(\"14 5 1\") == 1\n\"\"\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 24 21 14 10\") == \"3\"\nassert solution(\"2 500 500\") == \"0\"\nassert solution(\"3 14 5 1\") == \"-1\"\nassert solution(\"5 1 3 6 9 12\") == \"1\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"3 1 6 9 12\") == \"-1\"\nassert solution(\"5 1 3 6 9 12\") == \"1\""
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 10 20 30') == '3'\nassert solution('2 10') == '-1'\nassert solution('1 2 3 4') == '1'\nassert solution('1 0 0 0') == '1'\nassert solution('1 1 1 1') == '0'\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\nassert solution(test_input_4) == test_output_4\nassert solution(test_input_5) == test_output_5\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"4\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n1 2 15 15 15') == '5'\n\"\"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 2\n1 2 15 15 15''') == '5'\n\nassert solution('''6 1\n36 4 1 25 9 16''') == '2'\n\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n1 2 15 15 15\\n') == '5'\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n1 2 15 15 15\\n') == '5\\n'\nprint('Test passed')\n\n\"\"\""
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\\n\") == 5\n\"\"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\") == \"5\"\nassert solution(\"6 1\\n36 4 1 25 9 16\") == \"2\"\nassert solution(\"4 4\\n1 10 100 1000\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\\n\") == \"5\\n\"\nprint(solution(\"6 1\\n36 4 1 25 9 16\\n\"))\nassert solution(\"4 4\\n1 10 100 1000\\n\") == \"4\\n\"\nprint(solution(\"5 3\\n1 2 15 15 15\\n\"))\n\"\"\"\n\nimport sys\n\na = list(map(int, sys.stdin.readline().rstrip().split()))\nn, k = a[0], a[1]\n\nskills = list(map(int, sys.stdin.readline().rstrip().split()))"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\") == \"5\"\nassert solution(\"6 1\\n36 4 1 25 9 16\") == \"2\"\nassert solution(\"4 4\\n1 10 100 1000\") == \"4\"\nassert solution(\"4 4\\n1 10 100 1000\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 1\\n2 3 1\") == \"2\"\nassert solution(\"5 7 6\\n1 4 5 6 7\") == \"4\"\nassert solution(\"10 7 6\\n5 7 4 7 5 8\") == \"8\"\nassert solution(\"4 4 5\\n5 6 7\") == \"0\"\nassert solution(\"1 1 1\\n1\") == \"1\"\n\"\"\"\n\nn, k, m = [int(x) for x in input().split()]\nsub_scores = [int(x) for x in input().split()]\n\nsub_scores.sort(reverse=True)\n\ntotal_score = 0\nfor i, x in enumerate(sub_scores):\n    if i + 1 >= n:\n        break\n    if i + 1 < n and x == sub_scores[i + 1]:\n        continue\n    if x >= m:\n        total_score += x\n    else:\n        break\nprint(total_score)\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\nprint(solution(\"5 10 7\\n8 10 3 6\"))\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == 8\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected_result\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\\n\") == \"8\"\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\nassert solution(\"3 10 7\\n5 5 3 6\") == \"6\"\nassert solution(\"1 1 1\\n1\") == \"1\"\nassert solution(\"3 3 6\\n2 2 5\") == \"3\"\nassert solution(\"3 3 6\\n2 2 5\\n7 7 1\") == \"4\"\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == '8'\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\n\nimport sys\nimport os\nimport array"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 10 7\\n8 10 3 6') == '8'\n\"\"\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(sys.stdin.read())) == 'Yes'\n\"\"\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 2\\n1\\n2\\n3\\n4\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\nassert solution('5 3 1\\n2\\n3\\n4\\n5\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\nassert solution('5 5 2\\n1\\n2\\n3\\n4\\n5\\n') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo'\nassert solution('6 3 4\\n1\\n2\\n3\\n4\\n5\\n6\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo\\nNo'\nassert solution('5 6 4\\n1\\n2\\n3\\n4\\n5\\n6\\n') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo'\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 1\\n1\\n1') == 'No'\nassert solution('3 3 2\\n1\\n2\\n2') == 'No'\nassert solution('3 3 2\\n1\\n1\\n2') == 'No'\nassert solution('3 3 3\\n1\\n2\\n2') == 'No'\nassert solution('3 3 3\\n1\\n2\\n2\\n3') == 'Yes'\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\nimport os\nimport typing\nimport sys\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\"\"\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\"\"\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"6 3 4\\n\"\n    \"3\\n\"\n    \"1\\n\"\n    \"3\\n\"\n    \"2\\n\"\n) == \"No\\n\" + \"\\n\" + \"No\\n\" + \"Yes\\n\" + \"No\\n\" + \"No\\n\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6 3 4\n3\n1\n3\n2\n''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n1 1\\n0 1') == 'YES\\n00\\n10'\nassert solution('3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1') == 'YES\\n010\\n0000'\nassert solution('3 3\\n0 0 0\\n1 0 1\\n1 1 0') == 'NO\\n010\\n1010'\n\n\"\"\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'NO'\n\n'''\n\nn, m = tuple(map(int, stdin.readline().split(' ')))\na = []\nfor i in range(n):\n    a.append(list(map(int, stdin.readline().split(' '))))"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n0 1 1\\n0 0 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 2\\n1 0 1\\n0 1 1\") == \"NO\"\nassert solution(\"3 3\\n0 0 0\\n1 1 1\\n1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\\n010\\n010\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n1 1\\n0 1') == 'YES\\n00\\n10'\nassert solution('3 4\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1') == 'YES\\n010\\n0000'\nassert solution('3 4\\n0 0 0\\n1 0 1\\n1 1 1\\n1 1 1') == 'NO'\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n0 1\") == \"YES\\n10\"\nassert solution(\"0 1\\n1 1\") == \"YES\\n00\"\nassert solution(\"0 1\\n0 0\") == \"YES\\n0\"\nassert solution(\"0 1\\n1 1\") == \"YES\\n1\"\nassert solution(\"0 1\\n0 0\") == \"YES\\n0\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\\n\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\\n\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\\n\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\n\nfrom aiounittest import AsyncTestCase\nfrom unittest.mock import AsyncMock\n\n\nclass SolutionTest(AsyncTestCase):\n    async def test_solution(self):\n        pass\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n1 1\\n0 1') == 'YES\\n00\\n10'\nassert solution('3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1') == 'YES\\n010\\n0000'\nassert solution('3 3\\n0 0 0\\n1 0 1\\n1 1 0') == 'NO'\nassert solution('2 3\\n0 1 0\\n1 0 1') == 'YES\\n10\\n00'\nassert solution('3 3\\n0 0 0\\n0 1 1\\n0 0 0') == 'NO'\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"121\") == \"Yes\"\nassert solution(\"373\") == \"Yes\"\nassert solution(\"736\") == \"No\"\nassert solution(\"436\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"121\") == \"Yes\"\nassert solution(\"122\") == \"Yes\"\nassert solution(\"738\") == \"Yes\"\nassert solution(\"4\") == \"Yes\"\nassert solution(\"6\") == \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('373') == \"Yes\"\nassert solution('121') == \"No\"\nassert solution('436') == \"Yes\"\n\nprint(solution('373'))\nprint(solution('121'))\nprint(solution('436'))\n\n\"\"\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"253\") == \"Yes\"\nassert solution(\"13\") == \"No\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('121') == 'No'\nassert solution('237') == 'Yes'\nassert solution('455') == 'Yes'\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\nassert solution(\"436\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4374\") == \"Yes\"\nassert solution(\"1233\") == \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\") == \"Yes\"\nassert solution(\"121\") == \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\n\"\"\""
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n\n-----Tests-----\n\nimport sys\nimport io\nfrom collections import Counter\n\nclass TestHandler(object):\n\n    def __init__(self):\n        self.stdout = ''\n        self.stdin = ''\n\n    def start(self):\n        sys.stdout = self\n        sys.stdin = self\n\n    def write(self, text):\n        self.stdout += text\n\n    def readline(self):\n        return self.stdin\n\n    def test(self, input: str, output: str):\n        for line in input.split('\\n'):\n            if line == '':\n                break\n            self.stdin += line + '\\n'\n        self.stdin += output + '\\n'\n        self.stdout = ''\n        t = solution('')"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == 5\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == 3\nassert solution(\"3 2 1\\n1 0 0\") == 1\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == 5\nassert solution('6 2 1\\n1 0 0 1 0 1') == 3\n\"\"\"\n\nn, b, a = map(int, input().split())\n\nl = list(map(int, input().split()))\n\nmax_s = 0\nmax_e = 0\n\nfor i in range(n):\n    if l[i] == 1:\n        max_s += 1\n        max_e += 1\n    else:\n        max_s += 1\n        max_e = 0\n\nprint(max_s)\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n\"\"\""
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 2 1\n0 1 0 1 0\n''') == '5'\nassert solution('''6 2 1\n1 0 0 1 0 1\n''') == '3'\nassert solution('''5 2 1\n0 1 0 1 0\n''') == '5'\n\nassert solution('''6 2 1\n1 0 0 1 0 1\n''') == '3'\n'''\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\nassert solution(\"2 10 10\\n1 1\") == \"1\"\nassert solution(\"6 3 1\\n1 1 0\") == \"1\"\nassert solution(\"3 10 10\\n0 1 0\") == \"1\"\n\"\"\"\n\n\nfrom sys import stdin"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n\"\"\""
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n\n\"\"\"\n\n\nfrom typing import List\n\n\nclass Solution:\n    def __init__(self, n: int, b: int, a: int, s: List[int]) -> None:\n        self.n = n\n        self.b = b\n        self.a = a\n        self.s = s\n        self.cnt = 0\n        self.battery = b\n        self.accumulator = a\n\n    def solve(self) -> int:\n        self.s = [1 if i > 0 else 0 for i in self.s]\n        for i in range(self.n - 1):\n            if self.s[i] == 1:\n                if self.battery < self.a:\n                    self.battery = self.battery + 1\n                    self.accumulator = self.accumulator - 1\n                self.cnt += 1\n            else:\n                if self.accumulator < self.b:\n                    self.accumulator = self.accumulator + 1\n                    self.battery = self.battery - 1\n                self.cnt += 1\n\n        return self.cnt\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n\"\"\"\n\nimport sys\n\nn, b, a = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\npass_battery = 0\npass_accumulator = 0\n\nfor i in range(len(s)):\n    if s[i] == 1:\n        pass_battery += 1\n        pass_accumulator += 1\n    elif pass_battery!= 0:\n        pass_battery -= 1\n    elif pass_accumulator!= 0:\n        pass_accumulator -= 1\n\nprint(pass_accumulator + pass_battery)\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\nassert solution('5 1 2\\n0 1 0 1 0') == '5'\nassert solution('6 1 2\\n1 0 0 1 0') == '4'\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\n\"\"\"\n\nimport re\n\nstdin = input()"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"46\"\nassert solution(\"112-37\") == \"375\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"0\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\nassert solution(\"4-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\nprint(\"Passed\")"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\"\"\""
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\nassert solution(\"1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1\") == \"21\"\nassert solution(\"0+1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20\") == \"1535\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\n\nassert solution(\"2+2\") == \"-46\"\n\"\"\"\n\nimport re\n\na = re.findall(\"([0-9]{1,3})\\-([0-9]{1,3})\", input())\nb = re.findall(\"([0-9]{1,3})\\+([0-9]{1,3})\", input())\nc = re.findall(\"([0-9]{1,3})\\*([0-9]{1,3})\", input())\nd = re.findall(\"([0-9]{1,3})\\+([0-9]{1,3})\\*([0-9]{1,3})\", input())\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\n\"\"\""
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"0\"\nassert solution(\"112-37\") == \"375\"\nassert solution(\"-8-6+5-2\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n') == 'YES'\nassert solution('4 4\\n') == 'NO'\nassert solution('13 4\\n') == 'YES'\n\"\"\""
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n\") == \"YES\"\nassert solution(\"10 4\\n\") == \"YES\"\nassert solution(\"13 4\\n\") == \"NO\"\nassert solution(\"3 1\\n1 3\\n3 2\\n2 3\\n4 1\\n1 4\\n3 1\\n2 4\\n4 2\\n\") == \"YES\"\nassert solution(\"10 6\\n\") == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'YES'\nassert solution('4 3') == 'YES'\nassert solution('10 4') == 'YES'\nassert solution('13 4') == 'NO'\nassert solution('1 2') == 'YES'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 2\\n1 2\") == \"YES\\n3 1\\n1 3\"\nassert solution(\"4 4\\n3 1\\n2 3\\n4 2\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n2 3\") == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3') == 'YES\\n3 1\\n1 3\\n3 2\\n2 3'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3') == 'YES'\nassert solution('10 4') == 'YES'\nassert solution('13 4') == 'NO'\n\"\"\"\n\nn, k = map(int, input().split())\n\ncolors = list(map(int, input().split()))\n\ncolor_set = set(colors)\n\ngood_color = [1]\nfor i in range(1, k):\n    if i not in color_set:\n        good_color.append(i)"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 3''') == 'YES'\nassert solution('''4 3''') == 'YES'\nassert solution('''4 3''') == 'YES'\nassert solution('''10 4''') == 'YES'\nassert solution('''4 3''') == 'YES'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 2\\n1 2\") == \"YES\\n3 1\\n1 3\\n3 2\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\\n\") == '18'\n\nfrom typing import Tuple, List\nimport math\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1') == '18'\n\n\"\"\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 3\\n1 100 1 1\\n\") == \"100\"\n\nprint(solution(\"6 1 5\\n10 30 30 70 10 10\\n\"))\n\nassert solution(\"6 1 5\\n10 30 30 70 10 10\\n\") == \"100\"\n\nprint(solution(\"5 1 3\\n1 100 1 1\\n\"))\n\nassert solution(\"5 1 3\\n1 100 1 1\\n\") == \"100\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n7 5 3\n1 3 5 7 10 20 30\n''') == '20'\n\nassert solution('''\n6 1 5\n1 100 1 1\n''') == '100'\n\nassert solution('''\n7 1 5\n1 100 1 1\n''') == '-1'\n\nassert solution('''\n2 3 1\n1 100\n''') == '100'\n\nassert solution('''\n3 2 1\n10 10\n''') == '10'"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1 3\\n5 1 3 10 1') == '18'\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 3\\n1 100 1 1') == '100'\n\"\"\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == 18\n\"\"\"\n\nn, k, x = map(int, input().split())\n\npictures = list(map(int, input().split()))\n\npictures.sort(reverse=True)\n\ns, l = 0, 0\n\nfor i in range(n):\n    if x <= i:\n        break\n    l = i\n    for j in range(i, n):\n        if x <= j:\n            break\n        if pictures[i] < pictures[j]:\n            s += pictures[j]\n            x -= 1\n    if x == 0:\n        break"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 3 1\n1 100 1 1''') == '100'\n\nassert solution('''5 2 3\n5 1 3 10 1''') == '18'\n\nassert solution('''6 1 5\n10 30 30 70 10 10''') == '-1'\n'''\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 5\\n1 1 2 3 4 5\") == \"18\"\n\n---\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('00100') == 3\nassert solution('0000') == 0\nassert solution('01110') == 1\nassert solution('11011') == 1\nassert solution('11101') == 2\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11111111111\") == \"11111111111\"\nassert solution(\"101010101010\") == \"101010101010\"\nassert solution(\"111001011010101010\") == \"111001011010101010\"\nassert solution(\"10101010\") == \"10101010\"\nassert solution(\"1111111111111111111111\") == \"1111111111111111111111\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"111000\") == 4\nassert solution(\"110000\") == 3\nassert solution(\"111011\") == 4\nassert solution(\"100110\") == 4\n\n\"\"\"\n\nfrom collections import deque\n\nn, k = map(int, stdin.readline().split())\ns = stdin.readline()\n\nqueue = deque([0])\ncost = 0\n\nwhile queue:\n    room = queue.popleft()\n    if s[room] == '1':\n        cost += room\n        queue.extend([i for i in range(max(1, room - k), min(n, room + k) + 1)])\n\nprint(cost)\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 2\\n1100') == '15'\nassert solution('2 2\\n10') == '0'\n\"\"\"\n\nn, k = input().strip().split()\nn, k = int(n), int(k)\n\ns = [input().strip() for _ in range(n)]\n\ncost = 0\n\nfor i in range(n):\n    for j in range(i+1, min(n, i+k+1)):\n        if s[i][j-1] == '1':\n            cost += j - i\n\nprint(cost)\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('00100') == '3'\nassert solution('0011') == '4'\nassert solution('0111') == '5'\nassert solution('1111') == '5'\nassert solution('111111') == '6'\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"00100\") == \"3\"\nassert solution(\"01110\") == \"1\"\nassert solution(\"11110\") == \"2\"\nassert solution(\"11111\") == \"4\"\nassert solution(\"111111\") == \"5\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('00100') == 3\nassert solution('01101') == 7\nassert solution('10111') == 11\nassert solution('11101') == 5\nassert solution('11011') == 6\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('00100') == 3\nassert solution('01110') == 1 + 2 + 3 + 4 + 5\nassert solution('11110') == 21\nassert solution('01110') == 4\nassert solution('11110') == 21\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"01110\") == 3\nassert solution(\"10010\") == 2\nassert solution(\"11111111111111111111111111111111111111111111111111111111111111111111111111110\") == 21\nassert solution(\"011111111111111111111111111111111111111111111111111111111111111111111111101110\") == 21\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"00100\") == 3\n\nassert solution(\"0000\") == 1\n\nassert solution(\"1111\") == 4\n\nassert solution(\"10001\") == 4\n\nassert solution(\"11010\") == 5"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"mumble\") == \"No\"\nassert solution(\"foobar\") == \"No\"\n\"\"\"\n\nS, T = input().split('\\n')\n\nS, T = set(S), set(T)"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"No\"\nassert solution(\"balder\") == \"No\"\nassert solution(\"blue\") == \"No\"\nassert solution(\"monk\") == \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'No'\nassert solution('ab') == 'No'\nassert solution('abcd') == 'No'\nassert solution('aab') == 'Yes'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"me\") == \"No\"\nassert solution(\"bbbcccdddaa\") == \"No\"\n\n\"\"\"\nimport sys\n\nS, T = sys.stdin.readlines()\nS, T = S.strip(), T.strip()"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"cat\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('azzel') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('apple') == 'Yes'\nassert solution('azzel') == 'Yes'\nassert solution('a') == 'Yes'\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\nassert solution('aaaaa') == 'Yes'\nassert solution('a') == 'No'\nassert solution('aba') == 'No'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"anarchy\") == \"No\"\nassert solution(\"a\") == \"Yes\"\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    \"\"\"Solution class\"\"\"\n    def __init__(self, inp_str: str):\n        self.s = inp_str\n        self.t = inp_str[::-1]\n    \n    def is_equal(self):\n        return self.s == self.t"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"azzel\") == \"Yes\"\n\nassert solution(\"apple\") == \"Yes\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10\") == \"12\"\nassert solution(\"6 10\") == \"5\"\n\"\"\"\n\nfrom decimal import Decimal"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 1 5 10 4 2 6\") == \"50\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 0 1 0 2 1 2 1 0 2 1 2 1 0 0 2 1 2 1 2 2 0 2 1 0 0 2 1 2 2 1 2 0 0 1 0 2 0 1 1 1 1 2 2 1 1 1 1 2 2 0 1 0 2 1 1 2 0 0 2 1 2 1 0 2 1 1 2 2 2 1 1 1 2 1 1 1 1 1 0 0 1 0 2 0 1 0 0 0 2 1 1 0 1 1 2 2 0 1 0 2 2 1 0 0 2 1 1 1 0 2 1 0 0 1 1 2 0 1 0 1 0 0 0 1 1 1 1 1 2 2 0 1 2 1 1 2 1 0 1 1 0 0 0 0 0 2 2 2 1 1 1 2 1 2 2 0 1 0 1 2 2 1 2 2 2 1 1 1 1 2 1 1 1 1 1 2 1 2 1 1 0 0 1 0 2 0 1 2 2 0 0 2 1 1 1 1 1 1 1 1 1 1 0 2 1 0 1 1 0 0 0 2 0 2 1 0 1 2 1 1 1 1 2 2 1 1 1 1 1 2 1 2 1 1 0 0 0 2 1 0 2 0 1 1 1 1 2 1 1 0 0 1 0 1 2 1 1 2 2 1 1 1 1 1 1 2 1 2 1 2 2 2 1 1 1 2 1 0 1 0 1 1 1 0 2 0 1 2 2 1 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 0 2 1 1 1 2 1 1 1 1 1 0 1 2 1 1 1 1 2 1 0 2 1 0 0 1 1 2 0 2 1 1 1 0 0 1 1 1 2 0 1 0 1 0 2 1 0 1 2 1 1 2 1 1 2 2 2 1 1 2 1 0 2 2 1 0 1 0 2 1 1 1 1 1 1 1 1 1 1 1 0 2 1 2 2 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 2 1 1 0 2 1 1 1 1 1 1 1 1 1 2 1 1 2 1 1 0 1 2 2 1 0 2 1 0 0 1 1 1 1 2 1 1 1 2 1 0 1 0 1 1 1 1 1 1 1 1 1 1 2 1 2 1 1 1 1 1 1 1 1 2 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 2 1 0 1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 0 1 1 2 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 2 1 0 0 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 0 10 10 10\") == \"10\"\nassert solution(\"2 2 1 1 1\") == \"1\"\nassert solution(\"4 5 0 10 10 10\") == \"10\"\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"X\"\n\"\"\"\n\nfrom math import gcd\n\nstdin = \"0 2 0 0 2\"\n\nn, a = [int(e) for e in stdin.split()]\nal = [int(e) for e in stdin.split()]\n\nm = len(al)\n\nans = []\n\nfor i in range(n):\n    ans.append(sum(al))\n    for j in range(m):\n        ans[i] = ans[i] - gcd(ans[i], al[j])\n        ans[i] = ans[i] + (a * al[j])\n\nprint(min(ans))\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 5 5\") == \"3\"\nassert solution(\"3 3 1 1\") == \"6\"\nassert solution(\"4 3 5 5\") == \"3\"\nassert solution(\"4 3 1 1\") == \"8\"\nassert solution(\"5 3 1 1\") == \"11\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 6 1 7 8\") == \"12\"\nassert solution(\"5 6 7 8 3\") == \"10\"\nassert solution(\"5 6 7 8 1\") == \"11\"\nassert solution(\"1 1 1 1 1\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 1 2 0 1 0 1 2 2 2\") == \"4\"\nassert solution(\"0 2 2 0 1 0 1 2 2 2\") == \"6\"\nassert solution(\"0 2 2 0 2 0 1 1 2 2 2\") == \"4\"\nassert solution(\"0 2 2 0 1 1 1 2 2 2\") == \"6\"\n\"\"\"\n\nfrom collections import Counter\nfrom functools import reduce\n\ns = input()\n\ncnt = Counter(s)\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n10 -5 2 -3 1''') == '110'\nassert solution('''6\n10 -5 2 -3 1\n4 3 -2 1\n5 -1 1 1\n3 1 -3 2\n10 -5 2 -3 1\n4 3 -2 1\n5 -1 1 1\n3 1 -3 2\n''') == '110'\nassert solution('''6\n10 -5 2 -3 1\n4 3 -2 1\n5 -1 1 1\n3 1 -3 2\n10 -5 2 -3 1\n4 3 -2 1\n5 -1 1 1\n3 1 -3 2\n''') == '110'\nassert solution('''4\n1 1 1 1\n4 5 -2 3\n4 5 -2 3\n3 2 1 1\n''') == '200'\nassert solution('''5\n10 -5 2 -3 1\n4 3 -2 1\n5 -1 1 1\n3 1 -3 2\n10 -5 2 -3 1\n4 3 -2 1\n5 -1 1 1\n3 1 -3 2\n''') == '110'\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5\n1 3 2 2 3\n\"\"\") == \"6\"\n\nassert solution(\"\"\"3\n3 5 4\n\"\"\") == \"8\"\n\nassert solution(\"\"\"4\n1 2 3 1\n\"\"\") == \"4\"\n\nassert solution(\"\"\"5\n1 1 2 2 3\n\"\"\") == \"8\"\n\nassert solution(\"\"\"5\n1 1 1 1 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 700\") == \"3\"\nassert solution(\"3 500\") == \"1\"\nassert solution(\"5 800\") == \"0\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 700\\n3 500\\n5 800') == '3'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s) == e\nprint(solution(input()))\n\nhttps://www.codewars.com/kata/5bbf5a6c4edef70032ff4c30\n\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\nassert solution(\"2 800\\n3 500\\n5 500\") == \"2\"\n\"\"\"\n\nD, G = [int(x) for x in stdin.strip().split()]\n\np, c = [0], [0]\n\nfor i in range(1, D + 1):\n    p.append(int(input()))\n    c.append(int(input()))\n\np_sum = [0] * (D + 1)\nc_sum = [0] * (D + 1)\n\nfor i in range(1, D + 1):\n    p_sum[i] = p_sum[i - 1] + p[i]\n    c_sum[i] = c_sum[i - 1] + c[i]\n\nans = 0\n\nfor i in range(1, D + 1):\n    if p_sum[i] < G:\n        continue\n\n    for j in range(i, D + 1):\n        if p_sum[j] >= G:\n            ans = max(ans, j)\n            break\n\nprint(ans)\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\nprint(\"Teste unit\u00e1rio passou com sucesso!\")\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\nfrom itertools import permutations\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 700') == '3'\n\"\"\""
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\n\"\"\""
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6') == '2'\nassert solution('8\\n4 8 8 7 8 4 4 5') == '2'\nassert solution('9\\n2 3 4 2 2 3 2 2 4') == '3'\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6\\n') == '2'\nassert solution('8\\n4 8 8 7 8 4 4 5\\n') == '2'\nassert solution('9\\n2 3 4 2 2 3 2 2 4\\n') == '3'\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 4 5 5 6\") == 2\nassert solution(\"8 4 8 7 8 4 4 5\") == 2\nassert solution(\"9 2 3 4 2 2 3 2 2 4\") == 3\n\"\"\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7\n5 5 4 5 5 5 6''') == '2'\nassert solution('''8\n4 8 8 7 8 4 4 5''') == '2'\nassert solution('''9\n2 3 4 2 2 3 2 2 4''') == '3'''\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\\n\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\\n\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\\n\") == \"3\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n\n\"\"\"\n\n\nfrom collections import Counter\nfrom typing import List, Callable\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6') == '2'\nassert solution('8\\n4 8 8 7 8 4 4 5') == '2'\nassert solution('9\\n2 3 4 2 2 3 2 2 4') == '3'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input().rstrip())\nl = list(map(int, input().rstrip().split()))\n\nmax_ = max(l)\nl_1 = [i for i in l if i!= max_]\nl_2 = [i for i in l if i == max_]"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 4 3 3') == '2'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 2 3\n5 1 3 10 1''') == '18'\nassert solution('''6 1 5\n10 30 30 70 10 10''') == '-1'\nassert solution('''4 3 1\n1 100 1 1''') == '100'\nassert solution('''4 1 5\n10 30 30 70 10 10''') == '100'\nassert solution('''4 1 5\n10 10 10 10 10''') == '-1'\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\\n\") == 18\nassert solution(\"6 1 5\\n10 30 30 70 10 10\\n\") == -1\nassert solution(\"4 3 1\\n1 100 1 1\\n\") == 100\n\"\"\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 1\\n1 100 1 1\\n\") == 100\nprint(\"OK!\")\n\n'''\n\nn, k, x = map(int, input().split(' '))\na = list(map(int, input().split(' ')))"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 3\\n10 100 1 1') == '100'\nassert solution('5 2 3\\n5 1 3 10 1') == '18'\nassert solution('7 3 4\\n1 1 1 1 1 1 1 1') == '-1'\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 2 3\n5 1 3 10 1''') == '18'\nassert solution('''6 1 5\n10 30 30 70 10 10''') == '-1'\nassert solution('''4 3 1\n1 100 1 1''') == '100'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 2 3\n5 1 3 10 1\n''') == '18'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1 3 10 1') == 18\n\"\"\"\nimport heapq"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1\\n') == '18'\nprint(solution(input()))\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"100\"\nassert solution(\"5 1 3\\n5 1 3 10 1\") == \"18\"\n\"\"\"\n\nimport itertools\nimport re\nimport math\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '6'\n\nassert solution('1 1 1') == '1'\nassert solution('1 2 3') == '6'\n\nassert solution('1 2 3 4') == '10'\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1111) == 'No'\nassert solution(2222) == 'Yes'\nassert solution(3333) == 'No'"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n5') == 'No'\nassert solution('3\\n3') == 'Yes'\nassert solution('3\\n9') == 'No'\nassert solution('1\\n9') == 'Yes'\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"No\"\nassert solution(\"4\") == \"No\"\nassert solution(\"5\") == \"Yes\"\nassert solution(\"6\") == \"Yes\"\nassert solution(\"7\") == \"Yes\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11\\n\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"Yes\"\nassert solution(\"10\") == \"Yes\"\nassert solution(\"15\") == \"No\"\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2) == 'Yes'\nassert solution(3) == 'Yes'\nassert solution(4) == 'No'\nassert solution(5) == 'Yes'"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\") == \"Yes\"\n\"\"\"\n\nimport math\nimport sys\nimport unittest"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11\") == \"Yes\"\n\"\"\"\n\nN = int(stdin.readline().strip())"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == '2 2 6'\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected_result\n\n'''\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\ncenter_coordinates = []\nheight = []\n\nfor i in range(N):\n    _, *args = sys.stdin.readline().split()\n    center_coordinates.append(tuple(map(int, args)))\n\nfor i in range(N):\n    _, *args = sys.stdin.readline().split()\n    height.append(tuple(map(int, args)))\n\nprint(tuple(map(lambda x, y: max(x, y), center_coordinates, height)))"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\"\n) == \"2 2 6\"\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n') == '2 2 6'\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\n\nN = int(stdin.readline().strip())\nfor i in range(N):\n    x, y, h = [int(j) for j in stdin.readline().split()]\n    print(x, y, h - max(abs(x), abs(y)) - max(abs(x), abs(y)) + h)\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('redcoder') == 1\nassert solution('awaglknagaw') == 3\n\nprint('Success')\n'''"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abc\") == 3\nassert solution(\"redcoder\") == 1\nassert solution(\"hellolikekakak\") == 1\nassert solution(\"saas\") == 1\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('code') == 'code'\nassert solution('redcoder') == '1'\nassert solution('redcode') == '2'\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('redcoder') == 1\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('redcoder') == 1\n\"\"\"\n\nstdin = input().strip()\nstdin = ''.join(set(stdin))\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aba\") == 0\nassert solution(\"abca\") == 1\nassert solution(\"aaaaa\") == 0\n\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a\") == 1\nassert solution(\"aa\") == 0\nassert solution(\"ab\") == 2\nassert solution(\"abc\") == 3\nassert solution(\"abcd\") == 4\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('redcoder') == 1\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"redcoder\") == 1\nassert solution(\"redcoder\") == 1\nassert solution(\"redcoder\") == 1\nassert solution(\"redcoder\") == 1\nassert solution(\"redcoder\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == 'Yes'\nassert solution('100') == 'No'\n\n------------\nfrom typing import List"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == 'Yes'\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(10)) == 'Yes'\nassert solution(str(27)) == 'Yes'\nassert solution(str(25)) == 'No'\nassert solution(str(48)) == 'Yes'\nassert solution(str(75)) == 'No'\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"15\") == \"No\"\nassert solution(\"2\") == \"Yes\"\nassert solution(\"25\") == \"No\"\nassert solution(\"20\") == \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == \"Yes\"\nassert solution('11') == \"No\"\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == 'Yes'\n\nassert solution('2') == 'No'\n\nassert solution('3') == 'No'\n\nassert solution('4') == 'Yes'\n\nassert solution('5') == 'Yes'"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == 'Yes'\nassert solution('23') == 'No'\nassert solution('123') == 'Yes'\nassert solution('254') == 'No'\nassert solution('789') == 'Yes'\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"100\") == \"No\"\nassert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"No\"\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == 'Yes'\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == 'Yes'\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4 9 7 5\\n') == 5\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n4 4 9 7 5''') == '5'\nassert solution('''5\n4 4 9 7 6''') == '5'\nassert solution('''7\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n4 4 9 7 5\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n4 4 9 7 5''') == 5\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n4 4 9 7 5') == '5'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    l = list(map(int, sys.stdin.readline().split()))\n    d = defaultdict(int)\n    for i in l:\n        d[i] += 1\n\n    c = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i < j:\n                c += d[i] * d[j] * (d[i] - 1)\n    print(c)"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"5\\n\"\n    \"4 4 9 7 5\"\n) == \"5\"\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4 4 9 7 5\") == 5\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\"\n\nimport sys\nfrom tools import timing\n\n\n@timing\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n4 4 9 7 5') == '5'\nassert solution('3\\n2 1 2') == '1'\nassert solution('5\\n1 1 1 1 1') == '1'\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4 9 7 5\\n\") == \"5\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 5') == '10'\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5\\n') == '10'\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5\\n') == '10'\nassert solution('2 5\\n2 2') == '-1'\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5\\n') == '10'\nassert solution('1 1\\n') == '-1'\nassert solution('9 3\\n') == '-1'\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\") == \"10\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 5\\n') == '10'\n\"\"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 5') == '10'\n\"\"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    a, b = line.split()\n    try:\n        x = int(a) * int(b)\n        print(x)\n    except:\n        print(\"-1\")\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2\\n3 4') == '6'\nassert solution('1 3\\n2 4') == '-1'\nassert solution('5 6\\n8 9') == '-1'\nassert solution('5 6\\n5 6') == '30'\nassert solution('2 3\\n3 6') == '-1'\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4') == '-1'\nassert solution('2 1\\n3 2') == '-1'\nassert solution('2 3\\n1 2') == '-1'\nassert solution('2 3\\n1 2') == '-1'\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n\"\"\""
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5\\n10 12 1 2 14\\n') == '5'\nassert solution('2 5\\n5 9 5 1 12\\n') == '5'\nassert solution('2 5\\n1 2 4 3 10\\n') == '0'\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5\\n10 12 1 2 14\\n') == '5'\n\"\"\""
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n\"\"\"\nfrom __future__ import print_function\n\nimport sys\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 5\n10 12 1 2 14\n\"\"\") == '5'\n\nassert solution(\"\"\"\n2 5\n10 12 1 2 14\n\"\"\") == '5'\n\n\"\"\"\nTEMPLATE:\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 5\\n10 12 1 2 14\\n') == '5'\n\"\"\"\nimport collections\nimport sys"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 5\\n10 12 1 2 14\\n') == '5'\n\"\"\""
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3') == '1\\n1110\\n1011'\nassert solution('4 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5') == '1\\n101001\\n111010'"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"4 4 3\n1 2\n2 3\n1 4\n4 3\n\"\"\"\n) == \"2\"\n\nassert solution(\n    \"\"\"4 6 3\n1 2\n2 3\n1 4\n4 3\n2 4\n1 3\n\"\"\"\n) == \"1\"\n\nassert solution(\n    \"\"\"5 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_stdin_1) == test_stdout_1"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\\n1011\"\n\n\"\"\"\nfrom __future__ import annotations\nfrom collections import defaultdict\nimport sys\nfrom typing import List, DefaultDict, Set, Dict, Tuple\n\nclass City:\n    def __init__(self, city: int):\n        self.city: int = city\n        self.connections: Set[City] = set()\n\n    def add_connection(self, connection: City):\n        self.connections.add(connection)\n\n\nclass Connection:\n    def __init__(self, connection: int):\n        self.city: int = connection\n        self.distance: int = 0\n\nclass Solution:\n    def __init__(self):\n        self.connections: DefaultDict[int, Connection] = defaultdict(Connection)\n\n    def find_min_distance(self, solution: List[int]) -> int:\n        \"\"\"\n        This method finds the minimal distance for a solution\n        \"\"\"\n        distance = 0\n        for i in range(len(solution) - 1):\n            distance += self.connections[solution[i]].distance\n\n        return distance\n\n    def add_connection(self, solution: List[int], from_city: int, to_city: int):\n        \"\"\"\n        This method adds a connection to a solution\n        \"\"\"\n        solution.append(to_city)\n        self.connections[from_city].distance += 1\n\n    def get_best_connection(self, solution: List[int]) -> int:\n        \"\"\"\n        This method finds the best connection to add to a solution\n        \"\"\"\n        shortest_distance = sys.maxsize\n        for from_city, connection in self.connections.items():\n            if connection.distance < shortest_distance and from_city not in solution:\n                shortest_distance = connection.distance\n                best_from_city = from_city\n        return best_from_city\n\n    def get_best_solution(self, k: int) -> List[int]:\n        \"\"\"\n        This method finds the best solution for a given k\n        \"\"\"\n        if k <= 0:\n            return []\n\n        # return solution for k == 1\n        if k == 1:\n            return [1]\n\n        solution = [1]\n        for _ in range(k - 1):\n            from_city = self.get_best_connection(solution)\n            self.add_connection(solution, from_city, from_city + 1)\n\n        return solution\n\n    def get_best_solutions(self, n: int) -> List[List[int]]:\n        \"\"\"\n        This method finds the best solutions for a given n\n        \"\"\"\n        return [self.get_best_solution(k) for k in range(1, n + 1)]\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1\\n101001\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"2\\n111100\\n110110\""
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\\n1011\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1\\n101001\\n111010\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"2\\n111100\\n110110\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\\n1011\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n4 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1011\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n\") == '1011'\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n\") == '101001'\n\"\"\""
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 3\") == \"1011\"\nassert solution(\"5 6 2\") == \"111100\"\nassert solution(\"1 2\") == \"101\"\nassert solution(\"5 6 2\") == \"111100\"\nassert solution(\"4 6 2\") == \"111100\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(5, [2, 1, 1, 2, 5]) == \"YES\"\nassert solution(3, [4, 5, 3]) == \"YES\"\nassert solution(2, [10, 10]) == \"YES\"\nassert solution(3, [1, 2, 3]) == \"NO\"\nassert solution(4, [1, 2, 3, 4]) == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n\n-----Hint-----\n\nThe solution is straightforward.\n\nYou can always increase the height of any part by 2. If you can increase the height of all the parts by 2, then Vova will eventually complete the wall with the help of bricks.\n\nLet's do the same thing with less code.\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 1 2 5') == 'YES'\nassert solution('3 5 3') == 'YES'\nassert solution('2 10') == 'YES'\nassert solution('3 10 10') == 'YES'\nassert solution('2 10') == 'YES'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 2 5\") == \"YES\"\nassert solution(\"3 1 2 3\") == \"YES\"\nassert solution(\"2 10\") == \"YES\"\nassert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 2 3\") == \"YES\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'YES'\nassert solution('2\\n10 10') == 'YES'\nassert solution('3\\n1 2 3') == 'NO'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 1 1 2 5\\n\") == \"YES\"\nassert solution(\"3 2 1 2 5\\n\") == \"YES\"\nassert solution(\"2 10 10\\n\") == \"YES\"\nassert solution(\"1 2 3\\n\") == \"NO\"\nassert solution(\"10 10\\n\") == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 1 2 5\\n\") == \"YES\"\nassert solution(\"3 1 2\\n\") == \"YES\"\nassert solution(\"2 10 10\\n\") == \"YES\"\nassert solution(\"3 10 10\\n\") == \"YES\"\nassert solution(\"1 2 3\\n\") == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\nassert solution(\"1000000000000000 1\\n-1 0 0 0 0\") == \"1\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'\n\"\"\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 4\\n-3 -6 5 4') == '-1'\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AZ\") == \"A\"\nassert solution(\"AA\") == \"AA\"\nassert solution(\"ZA\") == \"ZA\"\nassert solution(\"AZA\") == \"A\"\nassert solution(\"AZAZ\") == \"AZ\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n\n\"\"\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BBAABBBA\") == \"BB\"\n\nassert solution(\"AZAAAZAA\") == \"AA\"\n\nassert solution(\"ZZAAZZ\") == \"ZZ\"\n\nassert solution(\"AZAAZAAZAA\") == \"ZZ\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'\nassert solution('ABA') == 'AB'\nassert solution('ABACAB') == 'AB'\n\"\"\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"west\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"ab\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('where') == 'here'\nassert solution('a') == ''\nassert solution('codeforces') == 'es'\nassert solution('yes') == 'es'\n\"\"\""
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('codeforces') == 9\nassert solution('yes') == 1\nassert solution('b') == 1\n\"\"\""
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"test\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"test\") == 2\nassert solution(\"west\") == 2\nassert solution(\"codeforces\") == 9\nassert solution(\"yes\") == 7\n\nprint(solution(\"test\"))\nprint(solution(\"west\"))\nprint(solution(\"codeforces\"))\nprint(solution(\"yes\"))\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"b\"\nassert solution(\"ab\") == 1\nassert solution(\"codeforcesyes\") == 9\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('test') == 'est'\nassert solution('west') == 'est'\nassert solution('codeforces') == 'es'\nassert solution('yes') == 'es'\nassert solution('b') == 'ab'\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('test') == 2\nassert solution('codeforces') == 8\nassert solution('yes') == 1\nassert solution('b') == 1\n\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"b\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"ab\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n\"\"\"\n\nN, X = map(int, stdin.readline().split())\ncities = list(map(int, stdin.readline().split()))\n\nmaxD = 0\nfor d in range(1, N):\n    if cities[0] + d!= X:\n        break\n    if cities[-1] - d!= X:\n        break\n    maxD = d\n\nprint(maxD)"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n1 4 2 3 4\\n\") == \"2\"\nassert solution(\"5 6\\n1 2 3 4 5 6\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 3\n1 7 11''') == '2'\nassert solution('''5 5\n7 7 7 7 7''') == '2'\nassert solution('''5 5\n5 5 5 5 5''') == '0'\nassert solution('''5 5\n1 2 1 3 4''') == '0'\n\n\"\"\"\nT = int(input())\nfor _ in range(T):\n    N, X = map(int, input().split())\n    max_d = 0\n    for i in range(N):\n        max_d = max(max_d, max(map(int, input().split())))\n    print(max_d)\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 7 11\\n') == '2'\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == 2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input) == output\n\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n3 3\n1 7 11\n\"\"\"\n) == \"\"\"\n2\n\"\"\"\nprint(*solution(input()), sep=\"\\n\")\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\nassert solution(\"abababa\") == \"No\"\nassert solution(\"akasakka\") == \"Yes\"\nassert solution(\"amamam\") == \"Yes\"\nassert solution(\"nnnnnn\") == \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(s) == expected_output\n\n------\n\n----\n----\n\n------\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcdcba\") == \"Yes\"\nassert solution(\"madam\") == \"Yes\"\nassert solution(\"abccba\") == \"Yes\"\nassert solution(\"aabcdefgaa\") == \"Yes\"\nassert solution(\"abacde\") == \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('akasaka') == 'Yes'\nassert solution('banana') == 'No'\nassert solution('noonabbad') == 'Yes'\nassert solution('aabaaaa') == 'Yes'\nassert solution('abccbaa') == 'No'"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"abca\") == \"Yes\"\nassert solution(\"abcba\") == \"Yes\"\nassert solution(\"abccba\") == \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('akasaka') == 'Yes'\nassert solution('baka') == 'No'\n\"\"\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(akasaka) == \"Yes\"\nassert solution(house) == \"No\"\nassert solution(house) == \"No\"\nassert solution(house) == \"No\"\nassert solution(akasaka) == \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('akasaka') == \"Yes\"\n\"\"\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('198 1.10') == '217'\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e solution(a, b), \u0433\u0434\u0435 a \u0438 b \u2013 \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0446\u0435\u043b\u0443\u044e \u0447\u0430\u0441\u0442\u043d\u0443\u044e \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f a \u043d\u0430 b \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0430 \u0438 b \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u043e\u0439 \u0447\u0430\u0441\u0442\u043d\u043e\u0439 a \u043d\u0430 b. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f a \u0438 b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0440\u0430\u0432\u043d\u044b 3 \u0438 3, \u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0447\u0438\u0441\u043b\u043e 3.\n\n\u041f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0430\n\u0414\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0447\u0430\u0441\u0442\u043d\u043e\u0433\u043e.\n\u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0447\u0430\u0441\u0442\u043d\u043e\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0432\u043d\u043e \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0435 \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430 \u0430 \u043d\u0430 \u0447\u0438\u0441\u043b\u043e b.\n\u0415\u0441\u043b\u0438 \u0432\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u044d\u0442\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0447\u0430\u0441\u0442\u043d\u043e\u0439 \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u0442\u0430\u0442\u044c \u0440\u0430\u0432\u043d\u044b\u043c \u0447\u0438\u0441\u043b\u0443 b.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f a \u0438 b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0440\u0430\u0432\u043d\u044b 3 \u0438 3, \u0442\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0432 \u043b\u044e\u0431\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0442\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043e\u0442 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0447\u0430\u0441\u0442\u043d\u043e\u0433\u043e \u0438 \u0432\u0435\u0440\u043d\u0435\u0442 3.\n\u0414\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u0441\u0435\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c, \u0447\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0432 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d\u043d\u043e\u043c \u0432\u044b\u0448\u0435 \u0441\u043b\u0443\u0447\u0430\u0435.\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('198 1.10') == '217'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''198 1.10''') == \"217\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('198 1.10') == '217'\nprint('Test passed')\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('198 1.10') == '217'\n\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\n\na, b = input().split()\nprint(int(a * float(b)) // 1)\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"6\\n\"\n    \"7\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"3\\n\"\n    \"2000000000\\n\"\n    \"763243547\\n\"\n) == \"3\\n0\\n0\\n1\\n999999999\\n381621773\""
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(s) == e\n\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n2\") == \"0\"\nassert solution(\"1\\n3\") == \"3\"\nassert solution(\"2\\n2\") == \"0\"\nassert solution(\"3\\n2\") == \"1\"\nassert solution(\"4\\n2\") == \"2\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2000000000\") == \"999999999\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2000000000\") == \"999999999\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1\\n2\\n3\\n4\\n5\\n6\\n') == '3'\nassert solution('7\\n1\\n2\\n3\\n4\\n5\\n6\\n') == '3'\n\"\"\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n7\n1\n2\n3\n2000000000\n763243547\n''') == '3\\n0\\n0\\n1\\n999999999\\n381621773'\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n4\\n4\\n1\\n1\") == \"4\"\nassert solution(\"7\\n6\\n5\\n4\\n3\") == \"0\"\nassert solution(\"6\\n1\\n1\\n1\\n1\\n1\") == \"5\"\nassert solution(\"7\\n1\\n1\\n1\\n1\\n1\\n1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n7\") == \"0\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"1\\n2\") == \"0\"\nassert solution(\"1\\n3\") == \"0\"\nassert solution(\"1\\n4\") == \"0\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n\") == \"0\"\nassert solution(\"1\\n\") == \"1\"\nassert solution(\"2\\n\") == \"2\"\nassert solution(\"3\\n\") == \"3\"\nassert solution(\"4\\n\") == \"1\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1') == '3'\nassert solution('5 4 5\\n1 2\\n2 3\\n3 4\\n4 1') == '1'\n\n\"\"\"\n\n\"\"\"\nN, M, S = map(int, input().split())\nedges = [[] for _ in range(N)]\nfor _ in range(M):\n    u, v = map(int, input().split())\n    edges[u - 1].append(v - 1)\n    edges[v - 1].append(u - 1)\nfrom collections import deque\ndist = [-1] * N\ndist[S - 1] = 0\nq = deque([S - 1])\nwhile q:\n    v = q.popleft()\n    for u in edges[v]:\n        if dist[u] == -1:\n            dist[u] = dist[v] + 1\n            q.append(u)\nprint(dist.count(N - 1))\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3\\n2 3\\n1 5\") == \"1\"\nassert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\nassert solution('1 2') == '0'\n\nassert solution('1 2\\n1 3') == '0'\n\nassert solution('1 2\\n1 3\\n2 3') == '1'\n\nassert solution('1 2\\n1 3\\n2 3\\n3 4') == '1'"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 1\\n1 2\\n1 3\\n2 3\\n1 3') == '2'\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_data) == test_result\nprint(solution(input))\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n3 2 4 1') == '4'\nassert solution('6\\n1 1 1 4 4 4') == '5'\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 1 4 4 4\") == \"5\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 2 4 1\") == 4\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\n\"\"\"\n\na = [int(i) for i in stdin.split()]\nprint(max(a) + 1)\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '3'\nassert solution('4 4 4') == '3'\nassert solution('1 2 3 4') == '4'\nassert solution('1 3 1 4 1 2') == '3'\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\n\"\"\"\nfrom collections import Counter\n\nMAX_VALUE = 150000"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 2 3\") == 4\n\"\"\"\nimport sys\n\nfrom typing import List\n\nfrom collections import Counter\n\nimport sys\n\nclass Solution:\n    def max_weight(self, weights: List[int]) -> int:\n        weights.sort()\n        counts = Counter(weights)\n        max_weight = 0\n        for weight in weights:\n            if weight > max_weight + 1:\n                break\n            max_weight += weight\n        return max_weight"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3 2 4 1') == '4'\nassert solution('6\\n1 1 1 4 4 4') == '5'\n\"\"\"\n\nstdin = [int(x) for x in stdin.split('\\n')[:-1]]\ns = sum(stdin)\nn = len(stdin)\n\nfor _ in range(10000):\n    a = max(stdin)\n    if a > s // n:\n        print(len(stdin) + 1)\n        break\n    stdin.append(a)\n    stdin = sorted(stdin, reverse=True)\n    s = sum(stdin)\n    n = len(stdin)\n    stdin.remove(a)\n\n\"\"\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\\n\") == \"000001000002\\n000002000001\\n000001000001\""
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\\n\") == \"000001000002\\n000002000001\\n000001000001\"\n\n###"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 3\n1 32\n2 63\n1 12''') == '000001000002\\n000002000001\\n000001000001'\n\n\"\"\"\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\np, y = [], []\nfor _ in range(n):\n    p.append(sys.stdin.readline().rstrip())\nfor _ in range(m):\n    y.append(sys.stdin.readline().rstrip())\n\nfor i in range(m):\n    prefecture, year = p[y[i] - 1], y[i]\n    if len(prefecture) < 6:\n        prefecture = \"0\" * (6 - len(prefecture)) + prefecture\n    if len(str(year)) < 6:\n        year = \"0\" * (6 - len(str(year))) + str(year)\n    print(prefecture + year)"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\":\n1 2\n3 4\n:\") == \"000001000002\\n000111000001\"\n\n\"\"\"\n\nimport sys\nimport functools\n\nassert len(sys.argv) == 2\nlines = sys.argv[1].splitlines()\nassert len(lines) == 2\n\n(n, m) = list(map(int, lines[0].split()))\nassert n >= 1\nassert n <= 10 ** 5\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"\nimport re"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\\n\") == \"000001000002\\n000002000001\\n000001000001\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\"\nprint('Hooray')\n\n-----\nSample Input\n5 2\n1 1\n1 2\n1 3\n1 4\n1 5\n\nSample Output\n0101\n0110\n0111\n1000\n1011\n1010\n1011\n1010\n1101\n1110\n1111\n1100\n1101\n1110\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1110\n1110\n1110\n1100\n1111\n1100\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1100\n1110\n1111\n1100\n1111\n1110\n1110\n1110\n1110\n1111\n1110\n1110\n1100\n1110\n1110\n1110\n1110\n1110\n1100\n1111\n1100\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1100\n1111\n1110\n1110\n1110\n1100\n1111\n1100\n1110\n1111\n1110\n1110\n1110\n1110\n1110\n1110\n1110\n1100\n1111\n1100\n1100\n1110\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1110\n1100\n1111\n1110\n1110\n1100\n1111\n1110\n1110\n1110\n1110\n1110\n1110\n1100\n1111\n1100\n1100\n1110\n1110\n1111\n1100\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1100\n1111\n1100\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1110\n1100\n1111\n1110\n1100\n1111\n1110\n1110\n1110\n1110\n1110\n1110\n1100\n1110\n1110\n1110\n1110\n1100\n1100\n1100\n1100\n1100\n1110\n1110\n1110\n1110\n1100\n1100\n1110\n1100\n1110\n1110\n1110\n1110\n1110\n1100\n1100\n1100\n1100\n1100\n1110\n1110\n1110\n1110\n1110\n1100\n1100\n1110\n1100\n1110\n1110\n1100\n1110\n1110\n1110\n1110\n1110\n1100\n1110\n1110\n1110\n1100\n1110\n1110\n1110\n1100\n1110\n1100\n1100\n1100\n1100\n1100\n1110\n1110\n1110\n1110\n1100\n1100\n1100\n1110\n1110\n1100\n1100\n1110\n1110\n1100\n1110\n1110\n1110\n1100\n1100\n1110\n1100\n1110\n1110\n1100\n1110\n1100\n1110\n1110\n1100\n1100\n1100\n1100\n1110\n1100\n1110\n1110\n1110\n1100\n1110\n1110\n1110\n1110\n1100\n1100\n1110\n1110\n1100\n1110\n1110\n1110\n1110\n1110\n1110\n1110\n1100\n1110\n1110\n1110\n1100\n1110\n1110\n1110\n1100\n1110\n1110\n1110\n1110\n1100\n1110\n1110\n1100\n1110\n1100\n1100\n1100\n1100\n1100\n1110\n1110\n1110\n1110\n1100\n1110\n1110\n1110\n1110\n1110\n1100\n1110\n1110\n1110\n1100\n1110\n1110\n1110\n1100\n1100\n1110\n1110\n1100\n1110\n1110\n1100\n1110\n1110\n1110\n1100\n1100\n1100\n1110\n1110\n1110\n1110\n1110\n1110\n1110\n1110\n1100\n1100\n1110\n1100\n1100\n1100\n1100\n1100\n1100\n1100\n1100\n1100\n1100\n1100\n1100\n1100\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\"\n\"\"\""
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 10 8 40\\n\") == \"2\"\nprint(solution(\"4\\n2 10 8 40\\n\"))\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 10 8 40\") == \"2\"\n\"\"\"\n\nimport unittest\nimport os\nimport sys\nfrom io import StringIO\nfrom queue import PriorityQueue\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = int(stdin)\n        monster_hearts = list(map(int, stdin.split()))\n        monster_queue = PriorityQueue()\n        for monster_heart in monster_hearts:\n            monster_queue.put(monster_heart)\n\n        while monster_queue.qsize() > 1:\n            attack_monster_health = monster_queue.get()\n            attacked_monster_health = monster_queue.get()\n            monster_queue.put(attack_monster_health - attacked_monster_health)\n        \n        return str(monster_queue.get())\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution().solution\n\n    def test_1(self):\n        self.assertEqual(\n            \"2\",\n            self.solution(\"2 10 8 40\")\n        )\n\n    def test_2(self):\n        self.assertEqual(\n            \"0\",\n            self.solution
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 10 8 40') == '2'\nassert solution('4 10 9 100') == '1'\nassert solution('1 1 1 1') == '1'\n\"\"\"\n\nimport sys\nimport random"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 10 8 40') == '2'\n\"\"\"\n\nimport sys\nimport random"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 10 8 40') == '2'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\narr = list(map(int, sys.stdin.readline().split()))\n\nalive = set(range(1, N + 1))\n\nwhile len(alive) > 1:\n    cur = alive.pop()\n    alive.difference_update(arr)\n    arr = list(alive)\n\nprint(alive.pop())\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10 8 40\") == \"2\"\n\"\"\""
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 10 8 40') == 2\n\"\"\"\nimport sys"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n4\n2 10 8 40\n''') == '2'\n\nassert solution('''\n3\n10 2 3\n''') == '5'\n\nassert solution('''\n5\n1 100 100 100 100\n''') == '1'\n\nassert solution('''\n3\n1 100 1\n''') == '1'\n\nassert solution('''\n3\n100 1 100\n''') == '100'"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 10 8 40\") == 2\n\n\"\"\"\n\nimport math\nimport sys\n\nsys.stdin = open(\"test_files/Y11R5P1/A.in\", \"r\")\nsys.stdout = open(\"test_files/Y11R5P1/A.out\", \"w\")"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 10 8 40\\n') == '2'\n\"\"\"\n\nfrom math import ceil, sqrt\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''?(____):-____<_,_<____,____<_,_<____,_<____.\n?(____+_+____):-____>_,_<____,_<_____,_<_____,_<_____,_<_,_<____,_<_.\n?(____+_+____+_):-____>_,_<_____,_<_____,_<_____,_<_____,_<_,_<____,_<_,_<_.\n?(____+_+____+_+_):-____>_,_<_____,_<_____,_<_____,_<_____,_<_,_<_____,_<_,_<_,_<_.\n?(____+_+____+_+_+_):-____>_,_<_____,_<_____,_<_____,_<_____,_<_,_<_____,_<_,_<_,_<_,_<_.\n?(____+_+____+_+_+_+_):-____>_,_<_____,_<_____,_<_____,_<_____,_<_,_<_____,_<_,_<_,_<_,_<_,_<_.\n?(____+_+____+_+_+_+_+_):-____>_,_<_____,_<_____,_<_____,_<_____,_<_,_<_____,_<_,_<_,_<_,_<_,_<_,_<_.\n?(____+_+____+_+_+_+_+_+_):-____>_,_<_____,_<_____,_<_____,_<_____,_<_,_<_____,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"?(____/________)>________.>________\") == \"100100010\"\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430 \u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0432\u0441\u0435\u0445 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a \u0434\u043b\u0438\u043d\u044b k \u0438\u0437 n \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043f\u0440\u0438\u0447\u0451\u043c \u0432\u0441\u0435 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b.\n\n\u0421\u0443\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c k \u0432\u0441\u0435\u0445 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a n \u0447\u0438\u0441\u0435\u043b.\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u0451\u0442\u0441\u044f \u0434\u043b\u0438\u043d\u0430 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a n, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0432 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0438\u0434\u0443\u0442 n \u0447\u0438\u0441\u0435\u043b \u2014 \u0432\u0441\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430. \u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u0434\u043e \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0435\u0431\u044f. \u041f\u0435\u0440\u0432\u044b\u0435 n \u0441\u0442\u0440\u043e\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0432\u0441\u0435 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432\u044b\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u0432 \u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0441\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. \u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k, \u0437\u0430\u0434\u0430\u044e\u0449\u0435\u0435 \u0442\u0438\u043f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 k \u2260 0, \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f k \u0432\u0441\u0435\u0445 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0442 \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0437\u0430\u0434\u0430\u0447\u0438.\n\n\u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c \u0432 \u043b\u0435\u043a\u0441\u0438\u043a\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 k = 0, \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0447\u0438\u0441\u0435\u043b. \u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0435\u0441\u044f \u0447\u0438\u0441\u043b\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u041d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n \u0438 \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u0432\u0441\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043e\u0442 \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u0434\u043e \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0435\u0431\u044f. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0442 1000. \u0412 \u0441\u0442\u0440\u043e\u043a\u0435 \u0442\u0430\u043a\u0436\u0435 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 10000 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.\n\n\u041d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u0422\u0440\u043e\u0439\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0434\u043b\u0438\u043d\u044b k. \u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0442\u0430\u043a: \"\u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432 \u043b\u0435\u043a\u0441\u0438\u043a\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435\". \u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 k = 0, \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u0432 \u0432\u0438\u0434\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0447\u0438\u0441\u0435\u043b. \u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0435\u0441\u044f \u0447\u0438\u0441\u043b\u0430.\n\"\"\""
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"?(____-__*__):-__>__\") == \"0101\"\nassert solution(\"?(__+__-__):-__>__\") == \"0010\"\nassert solution(\"?(___-__*__):-__>__\") == \"false\"\n\n'''\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('?(___+__-___):-___>__.') == '0101'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == output()\n\n\"\"\"\n\nimport math\nimport functools\nimport re\nimport string\nfrom itertools import chain\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"?(___)-__+_*__+___/__________.__*______________\") == \"0250341\"\nassert solution(\"?(___)-___+_*__+___/__________.__*______________\") == \"0101\"\nassert solution(\"?(____)-__+_*__+___/__________.__*______________\") == \"false\"\nassert solution(\"?(_____)-__+_*__+___/__________.__*______________\") == \"false\"\nassert solution(\"?(______)-__+_*__+___/__________.__*______________\") == \"false\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"?(___+___-____):-___>__\") == \"0250341\"\nassert solution(\"?(___+___-____):-___>__,_____<__\") == \"false\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\") == \"0250341\"\nassert solution(\"?(__+___+__-___):-___>__\") == \"0101\"\n\"\"\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"?(_-_-_/___*__):-__>__,_____<__.__\") == \"0250341\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__.__\") == \"false\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.__\") == \"0250341\"\n\n\"\"\""
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('?(_-*__):-__<__,__<__. ') == '10'\nassert solution('?(__-_+_/_____):-__>__,_____<__. ') == 'false'\nassert solution('?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______. ') == '0250341'\n\"\"\""
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"?(___+___-____/_____):-__<___,___<____,____<_____,_____<______,______<_______.\") == \"0250341\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 11\\n2 1 5\\n7 10 0\\n12 6 4\") == \"3\"\n\nassert solution(\"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"5\"\n\nassert solution(\"3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"0\""
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 11\") == 3\n\nassert solution(\"3 4 1000000000000000000\") == 0\n\nassert solution(\"3 4 2\") == 5\n\nassert solution(\"2 1 5\") == 3\n\nassert solution(\"7 10 0\") == 2"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\nassert solution(\"3 4 10000000001\") == \"1\"\n\nprint(\"The solution is correct!\")\n\"\"\""
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 11\") == 3\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readlines()\nk = int(input[0].split()[2])\ninput_list = [int(i) for i in input[1:]]\ninput_list_dp = [1] * (k + 1)\n\nfor i in input_list:\n    input_list_dp[i] = 0\n\nfor i in input_list:\n    for j in range(1, k+1):\n        if j >= i:\n            input_list_dp[j] += input_list_dp[j - i]\n\nprint(input_list_dp[-1])\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 11') == 3\nassert solution('3 4 2') == 5\nassert solution('3 4 1000000000000000000') == 0\n\nassert solution('3 4 1000000000000000000', 3) == 0\n\nassert solution('3 3 1000000000000000000', 3) == 0\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 11') == '3'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 3 11\n2 1 5\n7 10 0\n12 6 4''') == 3\n\nassert solution('''3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == 5\n\nassert solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == 0\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\"\n\nimport math\n\nn = int(input())\nt = input()"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"thisisexampletwo\") == \"plmaetwoxesisiht\"\n\"\"\"\n\nimport sys\n\nN = sys.stdin.readline().rstrip()\nT = sys.stdin.readline().rstrip()\n\nans = ''\n\nfor i in range(len(N)):\n    ans += T[len(T)-int(N[i]):] + T[:len(T)-int(N[i])]\n\nprint(ans)\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('codeforces') =='secrofedoc'\n\n\"\"\"\n\n\nfrom math import sqrt\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"orcesfedoc\") == \"rocesfedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\nYou can use print to test your code\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(codeforces) == \"secrofedoc\"\nassert solution(orcesfedoc) == \"rocesfedoc\"\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\nprint(\"The local tests are done. Click on 'Check' to earn cool rewards!\")\n\n-----Solution-----\n\nfor line in stdin.split('\\n'):\n    a, b = map(int, line.split())\n    print(a+b)\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 14\") == \"19\"\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 14\") == \"19\"\n\"\"\"\n\nimport sys\nimport io"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\"\"\"\n\na, b = [int(x) for x in stdin.split()]\nprint(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\n\"\"\"\n\na, b = [int(i) for i in stdin.strip().split()]\n\nprint(a+b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\nassert solution(\"123123\") == \"36\"\nassert solution(\"1 2 3 4\") == \"10\"\nassert solution(\"33 3\") == \"36\"\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 14\") == 19\nassert solution(\"1 2\") == 3\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1+1') == '>'\nassert solution('2+3') == '>+>'\nassert solution('3+5') == '>+>+>'\nassert solution('1+1+1') == '>+>+>+>'\nassert solution('1-1') == '<+<'\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1+2') == '++++++++>'\nassert solution('2-3') == '><+>-'\nassert solution('9-7') == '+++++++++>'\n\"\"\"\n\nimport sys\nimport re\n\n\nclass BrainfuckInterpreter:\n    def __init__(self, program):\n        self.cells = [0] * 30000\n        self.pos = 0\n        self.inputs = []\n        self.output = ''\n        self.program = program\n        self.commands = {\n            '+': self.sum,\n            '-': self.sub,\n            '>': self.inc,\n            '<': self.dec,\n            '[': self.open_bracket,\n            ']': self.close_bracket,\n            ',': self.put_input,\n            '.': self.get_output\n        }\n\n    def open_bracket(self):\n        self.cells[self.pos] += 1\n        self.pos += 1\n\n    def close_bracket(self):\n        self.pos -= 1\n        if self.cells[self.pos] == 0:\n            return True\n        self.cells[self.pos] -= 1\n\n    def inc(self):\n        self.cells[self.pos] += 1\n\n    def dec(self):\n        self.cells[self.pos] -= 1\n\n    def sum(self):\n        self.cells[self.pos] += self.cells[self.pos + 1]\n\n    def sub(self):\n        self.cells[self.pos] -= self.cells[self.pos + 1]\n\n    def put_input(self):\n        self.inputs.append(self.cells[self.pos])\n\n    def get_output(self):\n        self.output += chr(self.cells[self.pos])\n        self.pos += 1\n\n    def step(self):\n        op = self.program[self.pos]\n        if op in self.commands:\n            self.commands[op]()\n\n    def run(self):\n        i = 0\n        while i < len(self.program):\n            self.step()\n            i += 1\n        return self.output\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5+7+1+3-1\") == \">++.<+>[<+>-]<\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\"\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\")-]>\") == \"[-]<><\"\nassert solution(\")+]>\") == \"+]<><\"\nassert solution(\")--]>\") == \"]<><\"\nassert solution(\")[>-]>\") == \"]<>-]<\"\nassert solution(\")++[>-]>\") == \"]<<<-]<\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\"\n\"\"\""
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2+3') == '++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n'\nassert solution('9-7') == '+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n'\nassert solution('2+3') == '++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n'\n\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2+3\") == \"++++>\\n<[<+>-]<\\n++++++.\", \"1st example\"\nassert solution(\"9-7\") == \"+++++++++>\\n<[<->-]<\\n+++++++.\", \"2nd example\"\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2+3\") == \"++++>\"\nassert solution(\"9-7\") == \"+[<-]<\"\n\"\"\""
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9-7') == '+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.'\nassert solution('2+3') == '++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.'\nassert solution('9-7') == '+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.'\nassert solution('9-7') == '+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.'\n\nimport re"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solutionn"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"5\\n1\\n3\\n20\\n38\\n56\\n\"\n) == \"1\\n2\\n5\\n2\\n0\"\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('112123123412345$\\dots$') == '112123123412345'\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11212343232354$\\d\\d\\d\\d$1234\\n1234\") == \"1234\"\nassert solution
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"112123123412345$\\dots$\") == '1'\nassert solution(\"1$2$3$4$5$6$7$8$9$10$11$12$13$14$15$16$17$18$19$20$21$22$23$24$25$26$27$28$29$30$31$32$33$34$35$36$37$38$39$40$41$42$43$44$45$46$47$48$49$50$51$52$53$54$55$56$57$58$59$60$61$62$63$64$65$66$67$68$69$70$71$72$73$74$75$76$77$78$79$80$81$82$83$84$85$86$87$88$89$90$91$92$93$94$95$96$97$98$99\") == '2'\nassert solution(\"112111223123123123$\\dots$\") == '3'\nassert solution(\"12123123412312312312$\\dots$\") == '4'\nassert solution(\"121212121212121212$\\dots$\") == '5'\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5\n1\n3\n20\n38\n56\n\"\"\") == \"\"\"1\n2\n5\n2\n0\"\"\"\n\nassert solution(\"\"\"4\n2132\n506\n999999999999999999\n1000000000000000000\n\"\"\") == \"\"\"8\n2\n4\n1\"\"\""
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"51256\") == \"0\"\nassert solution(\"51256551212\") == \"8\"\nassert solution(\"51256551212121212\") == \"0\"\nassert solution(\"1011121314151617181920\") == \"4\"\nassert solution(\"101112131415161718192020\") == \"4\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1122334455\") == \"1\"\nassert solution(\"11122334455\") == \"1\"\nassert solution(\"11122334455678\") == \"2\"\nassert solution(\"1112233445567890\") == \"7\"\nassert solution(\"111223344556789999\") == \"7\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"1\"\nassert solution(\"1$\\dots$2$\\dots$3\") == \"1\"\nassert solution(\"2$\\dots$3$\\dots$4$\\dots$5\") == \"2\"\nassert solution(\"3$\\dots$4$\\dots$5$\\dots$6\") == \"3\"\nassert solution(\"4$\\dots$5$\\dots$6$\\dots$7\") == \"4\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('575') == 4\nassert solution('1') == 0\nassert solution('10') == 1\nassert solution('1023') == 7\nassert solution('937') == 5\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"575\"\n) == \"4\"\nprint(\"PASSED\")"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('575') == '4'\n\"\"\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('575') == '4'\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('8') == '1'\nassert solution('9') == '0'\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('575') == 4\n\"\"\"\n\nn = int(stdin.readline().strip())"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('575') == 4\n\"\"\"\n\n\"\"\"\n\uc54c\uace0\ub9ac\uc998 \n1. 7\uacfc 5\ub97c \ubc18\ubcf5\ud558\uc5ec \ub9ac\uc2a4\ud2b8\uc5d0 \ub123\ub294\ub2e4.\n2. 3\uc744 \ubc18\ubcf5\ud558\uba74\uc11c \ud574\ub2f9 \uc218\uac00 \ub9ac\uc2a4\ud2b8\uc5d0 \uc788\uc73c\uba74 cnt\ub97c 1\uc529 \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n3. \uadf8\ub9ac\uace0 \uacb0\uacfc\ub97c \ucd9c\ub825\ud558\uba74 \ub41c\ub2e4.\n\"\"\"\n\nn = int(input())\nbase = [7, 5, 3]\ncnt = 0\nfor i in range(1, n+1):\n    num = str(i)\n    flag = True\n    for i in num:\n        if i == '7':\n            flag = False\n        if i == '5':\n            flag = False\n        if i == '3':\n            flag = False\n    if flag:\n        cnt += 1\nprint(cnt)"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"575\") == 4\nassert solution(\"10\") == 0\nassert solution(\"110\") == 1\n\n\"\"\"\nimport re"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('575') == 4\n\"\"\"\n\nfrom typing import List, Set\nimport unittest\n\nimport os\nfrom src.day_3.problem_3 import solution\n\n\nclass TestDay3Problem3(unittest.TestCase):\n    def test_solution(self):\n        for line in os.linesep.join([\n            '575',\n        ]).splitlines():\n            with self.subTest(line=line):\n                self.assertEqual(\n                    solution(line),\n                    4,\n                )\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9\\n3') == '4'\nassert solution('10\\n3') == '5'\nassert solution('11\\n3') == '6'\nassert solution('11\\n5') == '7'\nassert solution('11\\n7') == '9'\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(9) == 6\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1110101010') == 5\nassert solution('10110110') == 4\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('01110') == 1\nassert solution('11010') == 2\nassert solution('10110') == 3\nassert solution('11101') == 3\nassert solution('11110') == 3\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1111') == 0\nassert solution('1110') == 1\nassert solution('1011') == 2\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"111\") == 3\n\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11010') == 1\nassert solution('11110') == 2\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('011') == 2\nassert solution('111') == 2\nassert solution('000') == 1\nassert solution('001') == 1\n\n'''\n\nimport sys"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11100\") == 1\nassert solution(\"00100\") == 2\nassert solution(\"11010\") == 2\nassert solution(\"10010\") == 2\nassert solution(\"11110\") == 1\n\n\"\"\"\nimport collections\nimport sys\nfrom typing import List\n\nsys.setrecursionlimit(100000)\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"110\") == \"1\"\nassert solution(\"00110\") == \"3\"\nassert solution(\"11110\") == \"0\"\n\"\"\"\n\nfrom unittest import TestCase\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"101\") == 1\nassert solution(\"101010\") == 0\nassert solution(\"01\") == 1\nassert solution(\"00\") == 1\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n\n'''"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6 7 9 10 31\") == \"APPROVED\"\n\nassert solution(\"2 4 6 8 10 12\") == \"DENIED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 7 9 10 31\") == \"APPROVED\"\nassert solution(\"1 1 1 1 1\") == \"DENIED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 1 5 2\") == \"APPROVED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == 'APPROVED'\nassert solution('2 5 6 7 8') == 'DENIED'\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7 9 10 31\") == \"APPROVED\"\nassert solution(\"6 7 9 10 31\") == \"DENIED\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\nassert solution(\"5\\n10 1 2 4 8\") == \"APPROVED\"\nassert solution(\"5\\n1 1 2 4 8\") == \"DENIED\"\n\n'''"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n6 7 9 10 31') == 'APPROVED'\n\"\"\"\n\nN = int(stdin.readline())\n\nis_allowed = True\n\nfor i in range(N):\n    if int(stdin.readline()) % 2 == 0:\n        if int(stdin.readline()) % 3!= 0 and int(stdin.readline()) % 5!= 0:\n            is_allowed = False\n\nprint('APPROVED' if is_allowed else 'DENIED')\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RUDRD') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'No'\nassert solution('LLL') == 'No'\nassert solution('LDRRDRLLL') == 'No'\nassert solution('RRDRRLLRLLLLRLRRLLUU') == 'Yes'\nassert solution('LDRDRLLLDRDRLLRDRLDRL') == 'Yes'\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\n\"\"\"\n\n\"\"\"\nRUDLUDR\n\n0 1 2 3 4\nL R U D\n\n0 1 2 3 4\nL R U D\nR 1 2 3 4\n\n0 1 2 3 4\nL U U D\nU 1 2 3 4\n\n0 1 2 3 4\nL U U D\nU 1 2 3 4\nR 1 2 3 4\n\"\"\"\n\nS = input()"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RUDLUDR\") == 'Yes'\nassert solution(\"RUDRDRL\") == 'Yes'\nassert solution(\"RDLLULR\") == 'No'\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('RUDLUDR') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"LLRLLR\") == \"No\"\nassert solution(\"LRURUD\") == \"Yes\"\nassert solution(\"LLRLLUDRDDLRLUDRLRRU\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RULDR\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RUDRD') == 'No'\nassert solution('RUDRLD') == 'No'\n\n---\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n3\\n2\\n4\\n3\\n5') == '7'\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1\\n1\\n1\\n1\\n1') == '7'\nassert solution('4\\n3\\n2\\n4\\n3\\n5') == '7'\nassert solution('4\\n3\\n2\\n4\\n3\\n5\\n5') == '7'\nassert solution('5\\n3\\n2\\n4\\n3\\n5\\n5') == '7'\n\"\"\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n3\\n2\\n4\\n3\\n5') == '7'\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n3\\n2\\n4\\n3\\n5') == '7'\n\"\"\"\n\nimport sys\nimport math\n\nn = int(sys.stdin.readline().strip())\na, b, c, d, e = map(int, sys.stdin.readline().strip().split())\n\nres = 0\nremain = 0\nfor i in range(n):\n    temp = math.ceil((a + b + c + d + e) / 5)\n    if i == 0:\n        remain = temp\n    elif temp > remain:\n        remain = temp\n    a -= 1\n    b -= 1\n    c -= 1\n    d -= 1\n    e -= 1\n\nprint(remain)\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n1\n1\n1\n2\n1\n''') == '7\\n'\n\nassert solution('''5\n3\n2\n4\n3\n5\n''') == '7\\n'\n\nassert solution('''5\n3\n2\n4\n3\n5\n''') == '7\\n'\n\nassert solution('''5\n3\n2\n4\n3\n5\n''') == '7\\n'\n\nassert solution('''5\n3\n2\n4\n3\n5\n''') == '7\\n'"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n') == 2\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == 2\n\"\"\"\n\nN = int(input())"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == 2\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3') == '4'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 2\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2\") == \"2\"\nassert solution(\"2\\n2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == 2\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == 2\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\n2') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == 5\nassert solution(\"10\") == 7\nassert solution(\"20\") == 19\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20') == '23'\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(10) == 13"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20\") == \"23\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20\") == \"23\"\n\"\"\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20\") == \"23\"\n\"\"\"\nimport math"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(23) == '23'\nassert solution(2) == '2'\nassert solution(20) == '23'\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"5\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\nassert solution('2') == '2'\nassert solution('20') == '23'\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12\") == \"2\"\nassert solution(\"1\") == \"2\"\nassert solution(\"23\") == \"23\"\nassert solution(\"5\") == \"7\"\nassert solution(\"7\") == \"7\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 1 3 2\") == '1'\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 1 3 2\") == 1\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"5 100 90 80\"\n) == \"23\"\n\"\"\"\nimport sys\n\ninput_1 = \"5 100 90 80\"\nsys.stdin = open(f\"inputs/input_{input_1}.txt\", \"r\")"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 100 90 80''') == '23'\nassert solution('''6 110 120 130''') == '26'\nassert solution('''5 115 130 125''') == '34'\nassert solution('''5 140 130 125''') == '37'\nassert solution('''8 100 120 130 140''') == '31'\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100 90 80\") == \"23\"\nassert solution(\"98 40 30 21 80\") == \"23\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\\n\") == \"23\"\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 100 90 80\n98\n40\n30\n21\n80''') == '23'\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\"\"\"\n\n\"\"\"\n------------------------------------------------\n|   |  |   |  |   |  |  |  |   |  |   |  |  |  |\n------------------------------------------------\n| 2 |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 3 |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 4 |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 5 |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 6 |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 7 |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 8 |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 9 |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 10|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 11|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 12|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 13|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 14|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 15|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 16|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 17|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 18|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 19|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 20|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 21|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 22|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 23|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 24|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 25|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 26|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 27|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 28|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 29|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 30|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 31|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 32|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 33|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 34|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 35|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 36|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 37|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 38|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 39|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 40|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 41|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 42|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 43|  |  |  |  |  |  |  |  |  |  |  |  "
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"4 100 20 30\") == \"13\"\nassert solution(\"1 100 100 100\") == \"101\"\nassert solution(\"100 100 100 100\") == \"101\"\nassert solution(\"100 100 100 100\") == \"101\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\"\"\"\n\nimport sys\n\nn, a, b, c = map(int, sys.stdin.readline().split())\nl = [int(sys.stdin.readline()) for _ in range(n)]\n\nans = 10 ** 5\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nprint(solution(\"5 100 90 80\"))\n\"\"\"\n\n\"\"\"\nSolution: \n\nFor each bamboo, we can use three types of magics:\nExtension Magic: Consumes 1 MP (magic point). Choose one bamboo and increase its length by 1.\nShortening Magic: Consumes 1 MP. Choose one bamboo of length at least 2 and decrease its length by 1.\nComposition Magic: Consumes 10 MP. Choose two bamboos and combine them into one bamboo. The length of this new bamboo is equal to the sum of the lengths of the two bamboos combined. (Afterwards, further magics can be used on this bamboo.)\nOur objective is to use some of these bamboos (possibly all) to obtain three bamboos of length A, B, C. We can get some bamboos of length A, B, C by using the magics in the following way:\nWe have N bamboos. The lengths (in centimeters) of these are l_1, l_2,..., l_N, respectively.\nOur objective is to use some of these bamboos (possibly all) to obtain three bamboos of length A, B, C.\nAt least how much MP is needed to achieve the objective?\n\nIn terms of the recursive solution, we need to choose a set of three bamboos. This is achieved by adding every possible triple of bamboos into a set of three. We can then iterate through all possible triple sets.\nFor each triple, we can take any number of Extension Magics. In order to use these magics, we have to add 1 to the length of the bamboo we are using and then add 1 to the length of the other bamboo we are using.\nComposition Magic can be used on any two bamboos. If we have two bamboos of length A and B, we can also use Composition Magic on A and B to get a bamboos of length A + B.\nExtension Magic can be used on any bamboo.\nShortening Magic can be used on any bamboo.\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80') == '23'\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\n\nassert solution('ABCXYZ', 2) == 'CDEZAB'\n\nassert solution('ABCXYZ', 3) == 'DGFXYZ'\n\nassert solution('ABCXYZ', 26) == 'ABCXYZ'\n\nassert solution('ABCXYZ', 27) == 'ABCXYZ'"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\nassert solution('AB') == 'BC'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nstring = sys.stdin.readline()\n\nresult = []\nfor char in string:\n    i = ord(char)\n    if i > ord('Z'):\n        i -= 26\n    result.append(chr(i+n))\n\nprint(''.join(result))\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'ABCXYZ'\n) == 'CDEZAB'\nassert solution(\n'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n) == 'BCDEFGHIJKLMNOPQRSTUVWXYZABC'\nassert solution(\n'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n) == 'ABCDEFGHIJKLMNOPQRSTUVWXYZABC'\n\nSample Input:\n2\nABC\n\nSample Output:\nCBA\n\nExplanation:\nA is the first character in the alphabet.\nAfter shifting the first character by 2, it becomes C.\nThen, after shifting the second character by 3, it becomes B.\nFinally, the result is CBA."
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\nassert solution('HIJKLMNOPQ') == 'JOPQABKI'\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\nassert solution(\"ABC\") == \"ABC\"\nassert solution(\"ZYX\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\n\"\"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\n\"\"\""
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\n\"\"\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n\"\"\""
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('3 5 2 3 2 4') == '3 4 2'\nassert solution('1 2750131 199999') == '199999'\n\"\"\"\n\nimport sys\nfrom math import sqrt\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n\"\"\"\n\nn = int(stdin.readline())\n\nprimes = [2]\n\nfor i in range(2, 300_001):\n    if i > 2 and i % 2 == 0:\n        continue\n\n    for j in primes:\n        if j > i:\n            break\n        elif i % j == 0:\n            break\n    else:\n        primes.append(i)\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\n\"\"\""
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\nassert solution('1 2750131') == '199999'"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n\"\"\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\nassert solution('1 2750131 199999') == '199999'\nassert solution('1 3') == '3'\nassert solution('1 10') == '10'\nassert solution('1 3') == '3'\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\n2 4 5 3 1') == '11111'\nassert solution('5 1\\n2 1 3 5 4') == '22111'\nassert solution('7 1\\n7 2 1 3 5 4 6') == '1121122'\nassert solution('5 1\\n2 4 5 3 1') == '21112'\n\n\"\"\""
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n2 4 5 3 1\") == \"11111\"\nassert solution(\"5 1\\n2 1 3 5 4\") == \"21112\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\nassert solution(\"5 1\\n2 4 5 3 1\") == \"21112\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n2 4 5 3 1\") == \"11111\"\nassert solution(\"5 1\\n2 1 3 5 4\") == \"21112\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n2 4 5 3 1') == '11111'\nassert solution('5 1\\n2 1 3 5 4') == '22111'\nassert solution('7 1\\n7 2 1 3 5 4 6') == '1121122'\nassert solution('5 1\\n2 4 5 3 1') == '21112'\n\nprint('The solution is correct!')\n\n\n\n-----Problem-----\n\nYou are given a string s consisting of lowercase Latin letters. You need to find the number of ways of splitting s into two non-empty substrings (two continuous substrings of s) such that the sum of the lengths of these substrings is even.\n\n-----Input-----\n\nThe first and the only line of the input contains a string s of length $n \\ge 1$.\n\n-----Output-----\n\nPrint the number of ways of splitting s into two non-empty substrings such that the sum of their lengths is even.\n\n-----Examples-----\nInput\n\n1\n\nOutput\n\n1\n\nInput\n\n2\n\nOutput\n\n1\n\nInput\n\n3\n\nOutput\n\n2\n\n-----Note-----\n\nThe length of the whole string is always even.\n\nIn the first example we have only one way of splitting the string, so the answer is 1.\n\nIn the second example we have two ways of splitting the string:\n\n1) s[0:1] + s[2:3]\n2) s[1:2] + s[3:4]\n\nAnd in the third example we have four ways of splitting the string:\n\n1) s[0:1] + s[2:3] + s[4:5] + s[6:7]\n2) s[0:2] + s[2:4] + s[4:6] + s[6:8]\n3) s[0:3] + s[3:5] + s[5:7] + s[7:9]\n4) s[0:4] + s[4:6] + s[6:8] + s[8:10]\n\"\"\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2') == '1111'\nassert solution('5 1') == '2211'\nassert solution('7 1') == '11222'\nassert solution('5 2') == '11112'\nassert solution('7 2') == '22112'\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n2 4 5 3 1\") == \"11111\"\nassert solution(\"5 1\\n2 1 3 5 4\") == \"22111\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\nassert solution(\"5 1\\n2 4 5 3 1\") == \"21112\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\n\n\"\"\""
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n2 4 5 3 1\") == \"11111\"\nassert solution(\"5 1\\n2 1 3 5 4\") == \"21112\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\nassert solution(\"5 1\\n2 4 5 3 1\") == \"21112\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\n\n\"\"\"\n\nimport sys\nimport collections\n\nn, k = map(int, sys.stdin.readline().split())\na = collections.Counter(map(int, sys.stdin.readline().split()))\nnums = sorted(a.keys())\na = sorted(a.items(), key=lambda x: x[0])\n\ncount = k * 2\n\nwhile len(nums) > 1:\n    for i in range(n):\n        if i > 0 and a[i][0] - a[i - 1][0] <= k:\n            a[i][1] += a[i - 1][1]\n        if i < len(nums) - 1 and a[i][0] - a[i + 1][0] <= k:\n            a[i][1] += a[i + 1][1]\n    a = sorted(a, key=lambda x: x[0])\n    nums = nums[: len(a)]\n    a = a[: len(nums)]\n\nprint(''.join([str(count) for i in range(n)]))\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\nassert solution(\"5 1\") == \"21112\"\n\"\"\"\n\nn, k = map(int, input().split())\nskill = list(map(int, input().split()))\n\nskill.sort()\nskill = skill[::-1]\n\nres = []"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2') == '11111'\nassert solution('5 1') == '21112'\nassert solution('7 1') == '1121122'\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '5 2'\n) == '11111'\n\"\"\"\nimport heapq"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 3 7') == 4\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\nd = {}\nb = [0] * n\n\nfor i in range(n):\n    d[a[i]] = d.get(a[i], 0) + 1\n\nfor i in range(n):\n    if d[a[i]] == 1:\n        b[i] = 0\n    else:\n        b[i] = b[i - 1] + 1\n\nprint(b[-1])\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 2 3\") == 2\nassert solution(\"1 3 3 7\") == 4\n\"\"\"\n\nimport itertools\n\na = [int(x) for x in input().split()]\n\nn = len(a)\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == \"2\"\nassert solution(\"4\\n1 3 3 7\") == \"4\"\nassert solution(\"2\\n100 1\") == \"2\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 1 2 3') == 2\nassert solution('2\\n100 1') == 2\nassert solution('4\\n1 3 3 7') == 4\nassert solution('1\\n100 1') == 2\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 1 2 3\\n\") == \"2\"\nassert solution(\"2\\n100 1\\n\") == \"2\"\nassert solution(\"4\\n1 3 3 7\\n\") == \"4\"\n\"\"\"\n\na = [1, 3, 3, 7]"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 2 3\") == 2\nassert solution(\"100 1\") == 2\nassert solution(\"1 3 3 7\") == 4\n\nprint(\"Success\")\n\"\"\"\n\nfrom math import gcd\nfrom collections import Counter"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 1 2 3') == '2'\nassert solution('4\\n1 3 3 7') == '4'\nassert solution('2\\n100 1') == '2'\n\"\"\"\nimport sys\nimport sys\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == 2\nassert solution(\"2\\n100 1\") == 2\nassert solution(\"4\\n1 3 3 7\") == 4\nassert solution(\"3\\n100 1\") == 1\nassert solution(\"3\\n1 2 3\") == 6\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 1 2 3') == '2'\n\"\"\"\n\nfrom itertools import permutations\n\nn = int(input())\na = list(map(int, input().split()))\n\nb = list(map(int, input().split()))\nprint(len(set([tuple(permutation) for permutation in permutations(b)])))\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('16') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 4 5') == '2'\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\n\n-----Implementation-----"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7 1 5 4 9\") == \"1\"\nassert solution(\"4 7 1 5 4 9\") == \"2\"\nassert solution(\"1 1 1 1023\") == \"0\"\nassert solution(\"4 6 2 2 5 9\") == \"2\""
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 4 5') == '0'\nassert solution('1 1 1 1023') == '0'\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 4 1023') == '1'\nassert solution('1 1 1 1023') == '0'\nassert solution('16') == '1'\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_str_1) == test_output_str_1\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\n\"\"\"\n\nfrom math import log"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 1 1 1023\") == \"0\"\nassert solution(\"16\") == \"1\"\nassert solution(\"4 7 1 5 4 9\") == \"1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"16\") == \"1\"\nassert solution(\"1 1 1 1023\") == \"0\"\nassert solution(\"4 7 1 5 4 9\") == \"1\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 7 1 5 4 9\") == '1'\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1110111010\") == 4"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1100') == 1\nassert solution('1111') == 2\nassert solution('1110') == 2\nassert solution('1111') == 4\nassert solution('1101') == 4\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"011100\") == 4\nassert solution(\"101111\") == 3\n\"\"\"\n\nfrom typing import List\nimport sys\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == '1'\nassert solution('11') == '0'\nassert solution('00') == '0'\nassert solution('01') == '1'\nassert solution('11010') == '2'\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0011') == '4'\nassert solution('0111') == '2'\nassert solution('1010') == '1'\n\n------\n\nimport sys"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0011\") == 4\nassert solution(\"01010\") == 0\n\"\"\"\nfrom __future__ import annotations\n\nclass Node:\n    def __init__(self, value: int) -> None:\n        self.value = value\n        self.left: Node | None = None\n        self.right: Node | None = None\n        self.next: Node | None = None\n\n    def __str__(self) -> str:\n        return f'[{self.value}]'\n\nclass BinaryTree:\n    def __init__(self, root: Node | None = None) -> None:\n        self.root = root\n\n    def add(self, value: int) -> None:\n        pass\n\n    def _find(self, node: Node | None, value: int) -> Node | None:\n        pass\n\n    def _traverse(self, node: Node | None) -> None:\n        pass\n\n    def _remove(self, node: Node | None, value: int) -> None:\n        pass\n\n    def remove(self, value: int) -> None:\n        pass\n\n    def __str__(self) -> str:\n        return self._traverse(self.root)\n\nclass Queue:\n    def __init__(self) -> None:\n        self.head = None\n        self.tail = None\n\n    def enqueue(self, value: int) -> None:\n        pass\n\n    def dequeue(self) -> None:\n        pass\n\n    def __str__(self) -> str:\n        return self._traverse(self.head)\n\n    def _traverse(self, node: Node | None) -> str:\n        pass\n\nclass Stack:\n    def __init__(self) -> None:\n        self.top = None\n\n    def push(self, value: int) -> None:\n        pass\n\n    def pop(self) -> None:\n        pass\n\n    def __str__(self) -> str:\n        return self._traverse(self.top)\n\n    def _traverse(self, node: Node | None) -> str:\n        pass\n\nclass StackOfCubes:\n    def __init__(self, stdin: str) -> None:\n        self.stdin = stdin\n        self.stack = None\n\n    def solution(self) -> int:\n        pass\n\n    def _build_tree(self, node: Node | None, parent: Node | None = None) -> None:\n        pass\n\n    def _build_tree_from_queue(self) -> None:\n        pass\n\n    def _build_tree_from_string(self) -> None:\n        pass\n\n    def _build_tree_from_stack(self) -> None:\n        pass\n\n    def _traverse(self, node: Node | None) -> None:\n        pass\n\n    def _traverse_queue(self) -> None:\n        pass\n\n    def _traverse_string(self) -> None:\n        pass\n\n    def _traverse_stack(self) -> None:\n        pass"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"011100\") == 4\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10011\") == \"1\"\nassert solution(\"11001100110011\") == \"1\"\nassert solution(\"11011110111010\") == \"5\"\nassert solution(\"10011011110111010\") == \"4\"\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('1') == 0\nassert solution('0') == 0\nassert solution('11') == 0\nassert solution('1011101') == 3\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n'''"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n\n\"\"\"\nOur solution (my solution):\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\ngates = list()\nfor i in range(M):\n    l, r = map(int, sys.stdin.readline().split())\n    gates.append((l, r))\n\ngates.sort()\n\ni = 0\npassed = 0\nwhile i < N:\n    j = i\n    while j < N and gates[j][0] <= gates[i][0]:\n        passed += 1\n        j += 1\n    i = j\n\nprint(passed)\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == '2'\nassert solution('4 1\\n1 3') == '0'\nassert solution('6 2\\n1 3\\n2 4\\n5 6\\n6 5') == '1'\n\"\"\"\n\nn, m = map(int, input().split())\n\ncnt = 0\nfor _ in range(m):\n    l, r = map(int, input().split())\n    cnt += max(0, r-l-1)\n\nprint(n-cnt)\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == 2\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('4 2\\n1 3\\n2 4') == '2'\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == '2'\n\n-----\n3 3\n1 3\n2 3\n3 1\n-----\n3\n\n0 1\n1 2\n2 1\n-----\n1\n\n-----\n4 5\n2 3\n2 4\n4 1\n1 2\n-----\n4\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 2 1') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n1 2 2 1''') == \"2\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nmax_value = a[0]\nfor i in a:\n    if max_value < i:\n        max_value = i\n        \ncount = 0\nfor i in range(0, len(a)):\n    if a[i] == max_value:\n        count = count + 1\n    else:\n        if max_value - a[i] <= 1:\n            count = count + max_value - a[i]\n        else:\n            count = count + 1\n            \nprint(count)"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 2 1\") == 2\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 2 1\") == 2\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\narr = list(map(int, sys.stdin.readline().split()))\n\ns = sum(arr)\n\nmax_left = 0\nmax_right = s\nwater_count = 0\n\nfor i in range(n):\n    if arr[i] > max_right:\n        water_count += max_right - max_left\n        max_right = max_left + arr[i]\n    max_left = max(max_left, arr[i])\n\nwater_count += max_right - max_left\n\nprint(water_count)\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 2 1\") == '2'\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 2 1') == 2\nprint(solution('4\\n1 2 2 1'), 2)\nassert solution('5\\n2 3 4 1 2') == 1\nprint(solution('5\\n2 3 4 1 2'), 1)\nassert solution('5\\n3 3 3 3 3') == 0\nprint(solution('5\\n3 3 3 3 3'), 0)\n\n'''"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n-1 1\\n-1 1\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == '3'\nassert solution(\"2 4\\n-1 1\") == '4'\n\"\"\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\\n2 1 -3\") == \"3\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\nassert solution(\"4 10\\n-1 1\") == \"4\"\n\"\"\"\n\nn, w = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nans = 0"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"3 5\") == \"3\"\nassert solution(\"3 6\") == \"0\"\n\"\"\"\n\nn, w = map(int, input().split())\na = [int(x) for x in input().split()]\n\ndp = [0] * (n + 1)\ndp[0] = 1\n\nfor i in range(n):\n    for j in range(1, min(w + 1, a[i] + 1)):\n        dp[i + 1] += dp[i]\n        if i > 0:\n            dp[i + 1] -= dp[i - 1]\n\nprint(dp[-1] % (10 ** 9 + 7))\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\\n2 1 -3\") == \"3\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430 \u00ab\u0421\u043f\u043e\u0440\u0442\u0441\u043c\u0435\u043d \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e \u0434\u0435\u043b\u0430\u0435\u0442 \u0441\u0442\u0430\u0432\u043a\u0443\u00bb\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435\n\u0414\u0435\u043d\u044c\u0433\u0438 \u0441\u0442\u0430\u043d\u043e\u0432\u044f\u0442\u0441\u044f \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e, \u043a\u043e\u0433\u0434\u0430 \u0441\u043f\u043e\u0440\u0442\u0441\u043c\u0435\u043d \u0432\u044b\u0440\u0432\u044b\u0432\u0430\u0435\u0442 \u0441\u0435\u0431\u0435 \u0437\u0430 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0441\u043f\u043e\u0440\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u0430. \u0412 \u0438\u0442\u043e\u0433\u0435 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0434\u0435\u043d\u0435\u0433 \u0438 \u043e\u043d \u0445\u043e\u0447\u0435\u0442 \u043d\u0430\u0439\u0442\u0438 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441, \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u0441\u0447\u0430\u0441\u0442\u043b\u0438\u0432\u044b\u0439 \u0447\u0435\u043b\u043e\u0432\u0435\u043a. \u0412 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043c\u044b \u043f\u043e\u0434\u0441\u043a\u0430\u0436\u0435\u043c, \u043a\u0430\u043a \u044d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0434\u0432\u0443\u0445 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043e\u0432 \u043a\u043e\u043d\u043a\u0443\u0440\u0441\u043d\u043e\u0433\u043e \u0432\u0438\u0434\u0430. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442 \u0441\u0447\u0430\u0441\u0442\u043b\u0438\u0432\u043e\u0441\u0442\u044c \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0442\u0440\u0435\u0445 \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0438\u0437 \u043f\u044f\u0442\u0438 \u0443\u0440\u043e\u0432\u043d\u0435\u0439. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0432\u044b\u0438\u0433\u0440\u044b\u0448 \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u043f\u0430\u0434\u0435\u0442 \u043e\u0434\u043d\u043e\u043c\u0443 \u0438\u0437 \u0442\u0440\u0435\u0445 \u0447\u0435\u043b\u043e\u0432\u0435\u043a, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0438\u043c\u044f \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u0438\u0433\u0440\u0430\u043b. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u043d\u0435\u0442, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0438\u0441\u043a\u043e\u043c\u043e\u0435 \u0441\u043b\u043e\u0432\u043e \u00ab\u041d\u0438\u0447\u044c\u044f\u00bb.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0447\u0438\u0441\u043b\u043e N (1 \u2264 N \u2264 100) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0432 \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0438 \u0437\u0430\u044f\u0432\u043e\u043a \u0447\u0435\u043b\u043e\u0432\u0435\u043a. \u0417\u0430\u0442\u0435\u043c \u0438\u0434\u0435\u0442 N \u0441\u0442\u0440\u043e\u043a, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0437\u0430\u044f\u0432\u043a\u0438 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0438 \u0432\u044b\u0431\u043e\u0440\u0430 \u0437\u0430\u044f\u0432\u0438\u0442\u0435\u043b\u044f. \u0414\u0430\u043b\u0435\u0435 \u0438\u0434\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u0447\u0438\u0441\u043b\u043e N (1 \u2264 N \u2264 100) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u044f\u0432\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c \u043a\u0430\u043a \u00ab\u0432\u044b\u0438\u0433\u0440\u044b\u0448\u043d\u044b\u0435\u00bb. \u0417\u0430\u0442\u0435\u043c \u0438\u0434\u0435\u0442 N \u0441\u0442\u0440\u043e\u043a, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u0430\u0436\u0434\u043e\u043c \u0437\u0430\u044f\u0432\u043a\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \"\u0447\u0430\u0441\u044b:\u0437\u0430\u044f\u0432\u0438\u0442\u0435\u043b\u044c\" (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \"9:A\", \"9:B\", \"9:C\", \u0438 \u0442.\u0434.). \u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u0441\u0442\u0440\u043e\u043a \u0441 \u0437\u0430\u044f\u0432\u043a\u0430\u043c\u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u043e\u0442 1 \u0434\u043e N \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u0438\u043d\u0430\u0447\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u00ab\u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u0432\u043e\u0434\u0430\u00bb.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0437\u0430\u044f\u0432\u043a\u0438 \u0432 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u0447\u043a\u0443 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \"\u0447\u0430\u0441\u044b:\u0437\u0430\u044f\u0432\u0438\u0442\u0435\u043b\u044c\". \u0415\u0441\u043b\u0438 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u044f\u0432\u043e\u043a \u043e\u0434\u043d\u043e\u0433\u043e \u0437\u0430\u044f\u0432\u0438\u0442\u0435\u043b\u044f, \u043f"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 1 2\") == \"2\"\nassert solution(\"4 10\") == \"0\"\nassert solution(\"4 10 4 6\") == \"2\"\nassert solution(\"4 10 5\") == \"0\"\n\nprint(\"The tests for your solution are done.\")\n\n\"\"\"\n\nfrom collections import Counter\nimport sys\nsys.setrecursionlimit(5000)\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n\nimport sys"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n2 1 -3\") == \"3\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\nassert solution(\"4 10\\n-1 1\") == \"4\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split(' ')))"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\""
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == '9 3 6 12 4 8'\nassert solution(\"4\\n42 28 84 126\") == '126 42 84 28'\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == '3000000000000000000 1000000000000000000'\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\"\"\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n6\n4 8 6 3 12 9\n\"\"\"\n) == '9 3 6 12 4 8'\n\nassert solution(\n\"\"\"\n4\n42 28 84 126\n\"\"\"\n) == '126 42 84 28'\n\nassert solution(\n\"\"\"\n2\n1000000000000000000 3000000000000000000\n\"\"\"\n) == '3000000000000000000 1000000000000000000'\n\n\"\"\"\nimport stdin\nn = int(stdin.readline().rstrip())\nseq = list(map(int, stdin.readline().rstrip().split()))\nl = []\nfor i in range(n - 1):\n    if seq[i] % 3 == 0:\n        l.append(seq[i] // 3)\n        l.append(seq[i] * 2)\n    elif seq[i] % 3 == 1:\n        l.append(seq[i] // 3)\n        l.append(seq[i] * 2)\n        l.append(seq[i])\n    else:\n        l.append(seq[i] // 3)\n        l.append(seq[i] * 2)\n        l.append(seq[i] * 2)\nprint(' '.join(map(str, l)))\n\n\"\"\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\n\"\"\""
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 8 3 4 5\") == \"4 5 8 3 2 5\"\nassert solution(\"6\\n2 8 3 4 5 6\") == \"6 5 8 3 2 4 6\"\nassert solution(\"4\\n2 8 3 4 5\") == \"4 5 8 3 2\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\nassert solution(\"4\\n12 3 8 4\") == \"12 4 8 3 3\"\n\n\n\n\n\n-----BONUS-----\n\nYou can make the first line of the input empty, i.e. start with empty input.\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8 6 3 12 9') == '9 3 6 12 4 8'\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 8 6 3 12 9') == '9 3 6 12 4 8'"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n3 5 4 7 10 12') == '3\\n7 3 5'\nassert solution('5\\n-1 2 5 8 11') == '1\\n8'\nassert solution('6\\n8 4 9 16 8 16') == '2\\n4 9'\nassert solution('4\\n1 1\\n2 2\\n3 3') == '1\\n3'\nassert solution('3\\n1 2\\n3 4') == '0\\n1 2 3 4'\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5 4 7 10 12\") == \"3\"\nassert solution(\"1 2 5 8 11\") == \"1\"\nassert solution(\"-1 2 5 8 11\") == \"1\"\nassert solution(\"-1 -2 5 8 11\") == \"1\"\nassert solution(\"5 5 4 7 10 12\") == \"3\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\\n8\"\n\"\"\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 4 7 10 12\") == '3'\nassert solution(\"-1 2 5 8 11\") == '1'\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\n\n\"\"\"\n\n\nclass SieveOfEratosthenes:\n    def __init__(self, n):\n        self.n = n\n        self.primes = [True for i in range(n + 1)]\n        self.primes[0] = self.primes[1] = False\n        for i in range(2, int(n**0.5) + 1):\n            if self.primes[i]:\n                self.primes[i * i::i] = [False] * ((n - i * i - 1) // i + 1)\n\n    def get_primes(self):\n        return [i for i in range(len(self.primes)) if self.primes[i]]\n\n    def is_prime(self, i):\n        if 0 <= i < len(self.primes):\n            return self.primes[i]\n        else:\n            return False\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 4 7 10 12\") == \"3\"\nassert solution(\"-1 2 5 8 11\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"1 2 2 2\") == \"2\"\nassert solution(\"1 1 1 1 1\") == \"1\""
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n3 5 4 7 10 12') == '3\\n7 3 5'\nassert solution('5\\n-1 2 5 8 11') == '1\\n8'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 3 7 10 12\") == '3'\n\"\"\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\\n8\"\n\nimport collections\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n1 2 5 8 11\n''') == '''1\n8'''\nassert solution('''3\n5 4 7 10 12\n''') == '''3\n7 3 5'''\nassert solution('''2\n3 4\n''') == '''1\n4'''\nassert solution('''3\n3 4 5\n''') == '''1\n4'''\nassert solution('''4\n10 10 10 10\n''') == '''1\n10'''\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 3\\n') == '0 2'\n\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 3\\n') == '0 2'\n\n-----TESTS-----\n>>> solution('2 3 3\\n') == '0 2'\nTrue\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == '0 2'\nprint(solution(input()))\n'''\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\n\nimport sys\n\nA, B, K = map(int, sys.stdin.readline().split())\ntaka = A\naoki = B\nfor i in range(K):\n    if taka > 0 and aoki > 0:\n        taka -= 1\n        aoki -= 1\n    elif taka > 0:\n        taka -= 1\n    elif aoki > 0:\n        aoki -= 1\nprint(taka, aoki)\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 3\") == '0 2'\nassert solution(\"2 3 3\") == '0 2'\nassert solution(\"1 1 1\") == '0 0'\nassert solution(\"3 3 3\") == '0 1'\nassert solution(\"5 7 4\") == '0 4'\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\n\nA, B, K = [int(x) for x in input().split()]\n\ntakahashi = A\naoki = B\nfor _ in range(K):\n    if takahashi:\n        takahashi -= 1\n    elif aoki:\n        aoki -= 1\n    if not takahashi and not aoki:\n        break\n\nprint(takahashi, aoki)\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"2 3 3\n\"\"\") == \"0 2\"\nassert solution(\n\"\"\"1 2 2\n\"\"\") == \"0 1\"\nassert solution(\n\"\"\"1 2 3\n\"\"\") == \"1 1\"\nassert solution(\n\"\"\"1 2 0\n\"\"\") == \"1 2\"\nassert solution(\n\"\"\"2 2 2\n\"\"\") == \"0 0\"\n\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 3') == '0 2'\n\"\"\"\n\nA, B, K = map(int, stdin.readline().split())\n\ntakahashi = A\naoki = B\n\nfor i in range(K):\n    if takahashi >= 1:\n        takahashi -= 1\n    elif aoki >= 1:\n        aoki -= 1\n    else:\n        pass\n\nprint(takahashi, aoki)\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101') == '1'\nassert solution('103') == '3'\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"103\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100') == '3'\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('104') == '3'\nassert solution('101') == '1'\nassert solution('101010') == '1'\nassert solution('1010101010') == '8'\nassert solution('10101010101100') == '11'\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('103') == '3'\n\"\"\"\n\n\"\"\"\nhttps://yukicoder.me/problems/no/1296\n\n\u9ad8\u6a4b\u304f\u3093\u306f1\u65e5\u305a\u3064\u3001100\u5186\u3092\u5165\u308c\u3066\u3044\u307e\u3059\u3002\n1\u65e5\u306b1\u5186\u3082\u5165\u308c\u306a\u3044\u5834\u5408\u3001\u4f55\u65e5\u5f8c\u306b100\u5186\u3092\u5165\u308c\u308b\u3053\u3068\u3067\u7d2f\u8a08X\u5186\u306b\u306a\u308b\u304b\u6c42\u3081\u307e\u3059\u3002\n\n\u306a\u304a\u3001100\u5186\u3092\u5165\u308c\u308b\u3053\u3068\u3067\u7d2f\u8a08X\u5186\u306b\u306a\u308b\u305f\u3081\u306b\u306f\u3001\u632f\u66ff\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u632f\u66ff\u3059\u308b\u3068\u304d\u3001\u5165\u308c\u3089\u308c\u3066\u3044\u308b\u5186\u3092\u518d\u5165\u308c\u308b\u3053\u3068\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\n\u632f\u66ff\u3059\u308b\u3068\u304d\u306b\u306f\u3001\u632f\u66ff\u5148\u3068\u632f\u66ff\u524d\u306e\u3069\u3061\u3089\u304b\u4e00\u65b9\u306f100\u5186\u4ee5\u4e0a\u306b\u306a\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n\u4f8b\u3048\u3070\u3001\u632f\u66ff\u524d\u306b100\u5186\u3092\u5165\u308c\u305f\u5834\u5408\u3001\u632f\u66ff\u5f8c\u306b100\u5186\u3092\u5165\u308c\u308b\u306e\u306f\u51fa\u6765\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u632f\u66ff\u5f8c\u306b100\u5186\u3092\u5165\u308c\u308b\u3053\u3068\u3067\u7d2f\u8a08X\u5186\u306b\u306a\u3063\u305f\u5834\u5408\u3001\u632f\u66ff\u524d\u306b100\u5186\u3092\u5165\u308c\u308b\u3053\u3068\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\n\u305d\u3053\u3067\u3001\u632f\u66ff\u5f8c\u306b100\u5186\u4ee5\u4e0a\u306b\u306a\u3063\u305f\u5834\u5408\u3001\u3069\u306e\u3088\u3046\u306b\u5165\u308c\u308b\u304b\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101\") == \"1\"\nassert solution(\"1010\") == \"2\"\nassert solution(\"10101010\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100\") == \"3\"\n\nassert solution(\"999\") == \"18\"\nassert solution(\"1\") == \"1\"\nassert solution(\"12\") == \"5\"\nassert solution(\"123\") == \"10\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"101\") == \"1\"\nassert solution(\"102\") == \"2\"\nassert solution(\"103\") == \"3\"\nassert solution(\"104\") == \"5\"\n\nprint('Test pass.')\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('103') == '3'\nassert solution('1000') == '0'\nassert solution('9') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('103') == '3'\nassert solution('1') == '1'\nassert solution('1000') == '1'\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"1+1+1+1+1\"\nassert solution(\"7\") == \"1+1+1+1+1+1+1+1\"\nassert solution(\"3\") == \"1+1+1\"\n\"\"\"\n\n\"\"\"\nYou are given two numbers X and K. You have to find the position of the Kth number in the arithmetic progression X,X+1,X+2,\u2026,X+K-1,X+K.\n\nInput Format:\nThe first line of input contains T denoting the number of testcases. T testcases follow. Each testcase contains two lines of input. The first line contains X and K. The second line contains the elements of the arithmetic progression X,X+1,X+2,\u2026,X+K-1,X+K.\n\nOutput Format:\nFor each testcase, in a new line, print the Kth position of the progression.\n\nYour Task:\nThis is a function problem. You only need to complete the function findPosition and return the Kth position. The driver code automatically appends the newline.\n\nConstraints:\n1 <= T <= 100\n1 <= X,K <= 2000\n\nExample:\nInput:\n1\n4\n5 3\n1 2 3 4\n\nOutput:\n3\n\nExplanation:\nTestcase 1: The 4th element in the progression is 3.\n\nLOGIC\n-----\nWe can use Binary Search here. The idea is to perform a binary search on the progression\nby considering the sum of the first and last K elements.\n\nThe sum of the first K elements (where the sum of first N elements is defined as (N*(N+1)//2))\nwill always be equal to the sum of the last K elements (where the sum of last N elements is defined as (N*(N+1)//2 + (N*(N+1)//2))).\n\nHence, we can guess the Kth position in the progression by\ntaking the half of the difference of these two sums.\n\n\"\"\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"9\"\n\"\"\"\n\n\"\"\"\nSolution 2\n\"\"\"\n\nK = int(stdin.readline())"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '9'\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n') == '9'\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '9'\nassert solution('3') == '14'\n\nprint('Success')\n\nprint(\"Algorithms > Advanced > Greatest Common Divisor > \")\n\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('2 4 6') == '4'\nassert solution('10 12 16') == '12'\nassert solution('3 3 3') == '3'\nassert solution('2 4 5') == '2'\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '9'\nprint(solution('2'))\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '21'\nassert solution('2') == '9'"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 6\") == \"10\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n3 4 6\") == \"10\"\n\"\"\"\n\n\n\"\"\"\nSOLUTION:\n\n1. Find the maximum value of f(m) = (m \\ mod \\ a_1) + (m \\ mod \\ a_2) +... + (m \\ mod \\ a_N)\n2. Find the sum of all numbers from 1 to n\n3. Find the solution of f(m) = s\n4. The maximum value of f(m) is the solution of f(m) = s\n\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n3 4 6\\n\") == \"10\"\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n3 4 6''') == 10\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4 5') == '10'\n\"\"\"\n\nimport sys\n\ninputs = sys.stdin.readlines()\n\nN = int(inputs[0])\narr = [int(x) for x in inputs[1].split(' ')]"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 6\") == 10\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n4 6 3''') == '10'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nnums = sys.stdin.readline().split(' ')\n\nmax_value = -1\n\nfor i in range(N):\n    for j in range(i, N):\n        max_value = max(max_value, int(nums[i]) + int(nums[j]) - int(nums[i]) * int(nums[j]))\n\nprint(max_value)\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 6') == '10'\nprint(solution('3 4 6'))\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 6\") == \"10\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n4 4\") == \"Yes\"\nassert solution(\"1 2\\n3 4\") == \"No\"\n\nassert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\nassert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n3 3\") == \"No\"\n\"\"\"\n\nimport sys\n\ntests = int(input())\nfor test in range(tests):\n    N = int(input())\n    doublets = set()\n    for _ in range(N):\n        d1, d2 = map(int, sys.stdin.readline().split())\n        doublets.add(d1)\n        doublets.add(d2)\n    doublets = sorted(doublets)\n    for d in doublets:\n        if doublets.count(d) >= 3:\n            print(\"Yes\")\n            break\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\nprint(solution(\"1 2\\n6 6\\n4 4\\n3 3\\n3 2\"))\n\nassert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"No\"\nprint(solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\"))"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n\") == \"Yes\"\n\n\"\"\"\nfrom sys import stdin\n\nN = int(stdin.readline().rstrip('\\n'))\ni = 0\nwhile i < N - 1:\n    if stdin.readline().split(' ')[0] == stdin.readline().split(' ')[0]:\n        i += 1\n    else:\n        break\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1\\n2 2') == 'Yes'\nassert solution('3\\n1 2\\n2 2') == 'No'\nassert solution('2\\n1 2\\n2 1') == 'Yes'\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n\") == \"Yes\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\nassert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2') == 'Yes'\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n6\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n6\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n6\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n6\\n6\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n6\\n6\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n6\\n6\\n6\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n6\\n6\\n6\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n6\\n6\\n6\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == 4\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"4\"\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"10\") == \"4\"\nassert solution(\"50\") == \"5\"\nassert solution(\"100\") == \"20\"\nassert solution(\"200\") == \"50\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '1\\n'\nassert solution('4') == '2\\n'\nassert solution('5') == '3\\n'"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == 1\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n') == '4'\n\"\"\"\n\nr = int(input().strip())\nprint(r * r * r // (r - 1))\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == expected_output\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\nPROBLEM:\nThe image in the input shows a square wall with a window. The wall is broken into vertical slices with walls at the top and bottom.\nYour task is to find the number of times the window area is larger than the slice area.\n\n-----Solution-----\nThe area of the window is the number of windows multiplied by the width of the window.\nThe area of a slice is the width of the slice multiplied by the number of vertical slices.\nThere are two vertical slices, so the area of the slice is 2 * 1 * 2 = 4.\nThe area of the window is 4 * 2 = 8.\nThe answer is 8 / 4 = 2.\n\n-----Input-----\nThere is one line of input containing the height of the wall.\n\n-----Output-----\nPrint the number of times the window area is larger than the slice area.\n\n-----Sample Input-----\n15\n\n-----Sample Output-----\n4\n\nExplanation\nThe image in the input shows a wall with 15 vertical slices, each of width 1.\nThe window area is 2 * 1 * 2 = 2.\nThere are four vertical slices where the area of the window is larger.\nSo the answer is 4.\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\nPROBLEM:\nThere is a rectangular room in which a person is standing. The room has a vertical wall that is N meters long.\nYou are standing on the floor at a point in the middle of this wall. You can see the top and bottom of the wall, but cannot see its end.\nYou can walk down the wall any number of times.\nYou can walk up the wall in any number of steps.\nThe person is walking the wall from the right to the left.\n\nYour task is to count the number of ways the person can walk from the right-hand end of the wall to the left-hand end.\nThe answer can be very large, so print it modulo 1000000007.\n\n-----Solution-----\nThe solution is as follows:\nWe can walk down the wall N times.\nWe can walk up the wall in 2*N-1 ways.\nWe can walk down the wall in 2*N-2 ways.\nWe can walk up the wall in 2*N ways.\nThe person can walk in 2*N ways.\nThe answer is the sum of the above formulas modulo 1000000007.\n\n-----Input-----\nThere is one line of input containing the number of steps the person can walk down the wall.\n\n-----Output-----\nPrint the number of ways the person can walk from the right-hand end of the wall to the left-hand end of the wall modulo 1000000007.\n\n-----Sample Input-----\n6\n\n-----Sample Output-----\n108\n\nExplanation\nThe person can walk in 3 ways:\n\nDown and up in 1 step.\nDown and down in 2 steps.\nDown and up in 3 steps.\nDown and down and up in 4 steps.\nUp and down in 1 step.\nUp and up in 2 steps.\nUp and up in 3 steps.\nUp and up and up in 4 steps.\nThe person can walk in 6 ways.\nSo the answer is 108.\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\nPROBLEM:\nYou are standing on the floor of a tall building. There is a door with n consecutive steps to open and you cannot open the door.\nYou can climb either 1 or 2 steps at a time.\nFind the number of ways you can climb the steps if you can take 1 or 2 steps at a time.\n\n-----Solution-----\nThe number of ways you can climb the steps if you can take 1 or 2 steps at a time is the number of ways you can climb the steps if you can take 1 or 2 steps at a time plus the number of ways you can climb the steps if you can take 1 or 2 steps at a time from the remaining steps.\n\n-----Input-----\nThere is one line of input containing the number n of steps.\n\n-----Output-----\nPrint the number of ways to climb the steps if you can take 1 or 2 steps at a time.\n\n-----Sample Input-----\n5\n\n-----Sample Output-----\n7\n\nExplanation\n5 possible ways:\nYou can take 1 step and 4 steps.\nYou can take 2 steps and 3 steps.\nYou can take 2 steps and 2 steps and 1 step.\nYou can take 1 step and 2 steps and 1 step.\nYou can take 1 step and 2 steps and 2 steps.\nYou can take 2 steps and 2 steps and 2 steps.\nThe remaining steps are 4 steps.\nThere are 4 possible ways to climb the remaining steps.\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\nPROBLEM:\nYou are standing in front of a fence with n posts, each has a height.\nEach post can be broken by a ball thrown from the first post with a height of 1 step, the ball can break any post.\nYou are going to break all the posts so that the first and the last post are not broken.\nThe height of the broken posts is 1 less than the original height.\nGiven the height of each post, print the number of ways to break all the posts.\n\n-----Solution-----\nWe can break the first and last post, because they are the shortest ones and if one is broken, the rest of the posts are necessarily longer.\nWe can break all the posts except for the first and the last ones.\nNow we have the number of ways to break all the posts if we break the first and the last one, and the rest of the posts.\nWe just have to add them together to get the total number of ways to break all the posts.\n\n-----Input-----\nThere is one line of input containing the number n of posts.\n\n-----Output-----\nPrint the number of ways to break all the posts.\n\n-----Sample Input-----\n6\n\n-----Sample Output-----\n9\n\nExplanation\nThe height of the posts is 6, broken in 3 ways:\n1 step, 4 steps.\n2 steps, 3 steps.\n3 steps, 2 steps.\n4 steps, 1 step.\n1 step, 3 steps.\n2 steps, 2 steps, 1 step.\n3 steps, 1 step.\n1 step, 2 steps, 2 steps.\nThere are 9 possible ways to break all the posts.\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\nPROBLEM:\nYou are standing at the head of a row of n houses, with n >= 1.\nYou can make a series of jumps of 1 or 2 steps in one direction.\nIf you end at the last house, you have to start over at the first house.\nCount the number of possible ways to go from the first house to the last one.\n\n-----Solution-----\nThe solution is as follows:\nFirst we need to find the number of ways to go from the first house to the second one.\nThen we need to count the number of ways to go from the second house to the third one.\nIf we can get to the last house, we count the ways to go from the first house to the second one + the ways to go from the second house to the third one +... + the ways to go from the last house to the first house.\nIf we cannot go to the last house, we count the ways to go from the first house to the second one + the ways to go from the second house to the third one +... + the ways to go from the last house to the first house.\nThe number of ways to go from the first house to the second one is obtained by adding all the ways to go from the first house to the i-th house, where 1 \\leq i \\leq n-1.\nThe number of ways to go from the second house to the third one is obtained by adding all the ways to go from the second house to the i-th house, where 1 \\leq i \\leq n-2.\n\n-----Input-----\nThere is one line of input containing the number of houses in the row.\n\n-----Output-----\nPrint the number of ways to go from the first house to the last one.\n\n-----Sample Input-----\n4\n\n-----Sample Output-----\n7\n\nExplanation\nThere are 7 possible ways:\n1 step in the first house\n1 step in the second house\n1 step in the third house\n2 steps in the first house\n1 step in the first house and 1 step in the third house\n1"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == 4\nassert solution(\"1\") == 1\nassert solution(\"100\") == 49\n\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 4\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 5 1\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\nassert solution(\"4\\n2 5 5 5\") == \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 8 5 1') == 'Yes'\nassert solution('4 8 5 1') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\nassert solution(\"5\\n3 2 4 1 5\") == \"No\"\nassert solution(\"5\\n1 1 1 1 1\") == \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 8 5 1') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 8 5 1\\n') == 'Yes'\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n\"\"\"\n\nfrom collections import Counter\nfrom math import ceil\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\nassert solution('4\\n1 4 8 3') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n\"\"\"\n\nn = int(input())\nlst = list(map(int, input().split()))"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == -1\nassert solution('1 1') == 0\nassert solution('1 0') == -1\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\\n\") == \"702\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 3\n1 7\n3 2\n1 7''') == '702'\nassert solution('''2 3\n1 7\n3 2''') == '-1'\nassert solution('''3 3\n1 7\n1 7\n3 2''') == '-1'\nassert solution('''1 1\n1 1''') == '0'\nassert solution('''3 1\n1 7\n3 2\n1 7''') == '702'\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"\n\nimport sys\nimport math\n\nn, m = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"\nimport numpy as np\n\nstdin = input().split()\nN = int(stdin[0])\nM = int(stdin[1])\nnumbers = []\nfor i in range(N):\n    numbers.append(list(map(int, input().split())))\n\nnumbers = np.array(numbers)"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '3 3\\n1 7\\n3 2\\n1 7') == '702'\nassert solution(\n    '3 3\\n1 7\\n3 2\\n1 7') == '702'\nassert solution(\n    '3 3\\n1 7\\n3 2\\n1 7') == '702'\nassert solution(\n    '3 3\\n1 7\\n3 2\\n1 7') == '702'"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str([3,2])) == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n') == '9'\n\"\"\"\n\nfrom sys import stdin\n\nn, k = [int(x) for x in stdin.readline().split()]\n\ncount = 0\nfor i in range(n):\n    for j in range(n):\n        if (i + j) % k == 0 and i!= j:\n            count += 1\n\nprint(count)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"9\"\n\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(expected_output)\n\nprint('Success')\n\"\"\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2') == '9'\n\"\"\"\nimport math"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n') == '9'\nassert solution('3 3\\n') == '0'\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2') == '9'\n\"\"\"\nfrom itertools import combinations\n\nN, K = map(int, input().split())\n\ntriples = combinations(range(1, N + 1), 3)\ncount = 0\nfor a, b, c in triples:\n    if (a + b) % K == 0 and (b + c) % K == 0 and (c + a) % K == 0:\n        count += 1\nprint(count)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n') == '9'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('2 3\\n') == '6'\nassert solution('5 5\\n') == '9'\n\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == 9"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('-9') == '1011'"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"-9\") == \"1011\"\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('-9') == '1011'\n\"\"\"\n\nfrom typing import List\n\nfrom common import input_as_list\n\nN = input_as_list('-9')\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('-9') == '1011'\nassert solution('1') == '1'\nassert solution('9') == '1001'\nassert solution('-123') == '101111011011011'\n\"\"\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"-9\") == \"1011\"\n\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"-9\") == \"1011\"\nprint(solution(\"-9\"))"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('-9') == '1011'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"-9\") == \"1011\"\nassert solution(\"3\") == \"11\"\nassert solution(\"-6\") == \"110\"\nassert solution(\"19\") == \"10011\"\nassert solution(\"-2147483648\") == \"10111111111111111111111111111110\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"-1\") == \"111111111111111111111111111111\"\nassert solution(\"0\") == \"0\"\nassert solution(\"10\") == \"1010\"\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def solution(self, stdin):\n        pass\n\n    def __init__(self):\n        pass\n\n\nclass unitTest(unittest.TestCase):\n    def setUp(self):\n        self.test_cases = [\n            (1, \"0\"),\n            (0, \"0\"),\n            (10, \"1010\")\n        ]\n        self.solution = Solution().solution\n\n    def test_solution(self):\n        for test_case in self.test_cases:\n            with self.subTest(test_case=test_case):\n                self.assertEqual(self.solution(test_case[0]), test_case[1])"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('-9') == '1011'\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 9\\n2 4\\n\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 9\\n2 4\") == '12'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n2 5\n4 9\n2 4\n''') == '12'"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"2 5\\n4 9\\n2 4\"\n) == \"12\"\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 9\\n2 4\\n\") == \"12\"\n\"\"\"\nimport sys\nfrom typing import List\nfrom bisect import bisect_left"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 5\\n4 9\\n2 4') == '12'\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n2 4\\n3 6') == '11'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\n\"\"\"\nfrom __future__ import annotations\n\nfrom collections import defaultdict\nfrom dataclasses import dataclass\nfrom typing import List, Dict\n\n__all__ = [\"Solution\"]\n\n\n@dataclass\nclass Solution:\n    \"\"\"\n    the solution to the given problem\n    \"\"\"\n\n    min_money: int\n    cans: List[List[int]] = None\n\n    @staticmethod\n    def load(stdin: str = None) -> Solution:\n        \"\"\"\n        load input and create solution\n        :param stdin: input string\n        :return: Solution object\n        \"\"\"\n\n        # parse input\n        lines = stdin.split(\"\\n\") if stdin else []\n\n        if not lines or len(lines) < 2:\n            raise ValueError(\"input is missing\")\n\n        n, m = list(map(int, lines[:2]))\n\n        cans = []\n        for i in range(n):\n            a, b = list(map(int, lines[2 * i + 2 : 2 * i + 4]))\n            cans.append([a, b])\n\n        # init\n        min_money = float(\"inf\")\n        solution = Solution(0, cans)\n\n        # solution\n        for x, y in cans:\n            if x * y < min_money:\n                min_money = x * y\n\n        return solution\n\n    def dump(self) -> str:\n        \"\"\"\n        dump solution\n        :return: the solution\n        \"\"\"\n\n        if not self.cans:\n            raise ValueError(\"solution is not loaded\")\n\n        return str(self.min_money)\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == '12'\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n10 4 8 7 3\\n') == '2'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\nh = list(map(int, sys.stdin.readline().strip().split()))\n\ndp = [0] * n\ndp[0] = 1\nfor i in range(1, n):\n    dp[i] = dp[i - 1]\n    if h[i] <= h[i - 1]:\n        dp[i] += 1\n\nprint(dp[-1])\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n5\n8\n9\n10''') == '2'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 4 8 7 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\nassert solution(\"4\\n2 1 3 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n5\n10 4 8 7 3\n\"\"\") == '2'\nassert solution(\n\"\"\"\n5\n3 5 6 8 7\n\"\"\") == '0'\nassert solution(\n\"\"\"\n1\n3\n\"\"\") == '1'\nassert solution(\n\"\"\"\n5\n10 10 10 10 10\n\"\"\") == '1'\nassert solution(\n\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == '10'\n\"\"\"\nimport sys\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n10 4 8 7 3') == '2'\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 2 1\") == 2\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n10 4 8 7 3\\n') == 2\n\"\"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == 2\n\"\"\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 2 4 5\") == \"2\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '1'\nassert solution('1 1 2 2 3 3') == '0'\n\"\"\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\\n\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\\n\") == \"2\"\nassert solution(\"5 3\\n1 2 3 3 3\\n\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\\n\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\\n\") == \"2\"\nassert solution(\"5 3\\n1 2 2 4 5\\n\") == \"1\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"2\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 2 4 5') == 1\nassert solution('1 2 3 4 5') == 2\n\n'''"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 2 4 5\\n\") == \"1\"\nassert solution(\"1 2 3 4 5\\n\") == \"2\"\nassert solution(\"1 2 2 2 1\\n\") == \"0\"\nassert solution(\"1 2 3 4 5\\n\") == \"2\"\nassert solution(\"1 2 3 3 3\\n\") == \"0\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '1'\nassert solution('5 3\\n1 2 3 4 5\\n1 2 3 3 3') == '0'\nassert solution('5 3\\n1 2 3 3 3\\n1 2 3 3 3') == '0'\nassert solution('5 3\\n1 2 3 3 3\\n1 2 3 3 3') == '0'\nassert solution('5 3\\n1 2 3 3 3\\n1 2 3 3 3\\n1 2 3 3 3') == '0'\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\\n\") == '1'\n\"\"\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 5\\n1 2 2 4 2 3') == 3\nassert solution('7 5\\n3 3 2 1 1 1 3') == 4\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 2 4 2 3') == 3\nassert solution('3 3 2 1 1 1 3') == 4\nassert solution('1 2 2 4 2 3') == 3\nassert solution('3 3 2 1 1 1 3') == 4\n\n\"\"\"\n\nfrom sys import stdin\n\nstdin = open(\"input.txt\", \"r\")"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 2 4 2 3\\n') == '3'\nassert solution('3 3 2 1 1 1 3\\n') == '4'\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\n1 2 2 4 2 3') == '3'\nassert solution('5 3\\n1 2 2 4 2 3') == '4'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 5\\n1 2 2 4 2 3') == '3'\n\nprint(solution(input()))"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 5\\n1 2 2 4 2 3') == 3\n\"\"\""
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n1 2 1\\n\") == \"4\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n1 2 2 4 2 3\") == 3\n\"\"\""
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 2 4 2 3\") == 3\n\"\"\"\n\nn, k = list(map(int, stdin.readline().split()))\na = list(map(int, stdin.readline().split()))\n\na.sort()\n\ncnt = 0\nwhile k > 0:\n    if a[-1]!= a[-2]:\n        a[-1] += 1\n        k -= 1\n    else:\n        a[-1] = a[-1] - 1\n        a[-2] = a[-2] - 1\n        cnt += 1\n\nprint(cnt)\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 2 3 3', '3') == '3'\n\"\"\""
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\"\"\"\n\nimport sys\n\ntest_input_one = \"4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\"\ntest_input_two = \"4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\\n1 2 3 4\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_stdin) == test_stdout"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\"\"\""
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n1 1 1\\n1') == '0'\n'''\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\"\nassert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"9\"\nassert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"1000\"\nassert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"42000000000000\"\n\n\"\"\""
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\\n\") == \"10\\n9\\n1000\\n42000000000000\"\nprint(solution(\"10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\\n\"))\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 6\\n3 4 5') == '2'\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6\\n3 4 5\\n\") == 2\n\n\"\"\"\nimport re"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 6\\n3 4 5') == '2'\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7\") == \"4\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"5 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6\") == \"2\"\nassert solution(\"1 3\") == \"0\"\nassert solution(\"1 2 3\") == \"0\"\nassert solution(\"1 2 2 1\") == \"0\"\nassert solution(\"1 2 2 3\") == \"0\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\n\n\"\"\"\nimport sys\n\nn, x = map(int, sys.stdin.readline().split())\nl = list(map(int, sys.stdin.readline().split()))\ncounter = 0\nfor i in range(n):\n    if l[i] > x:\n        break\n    counter += i + 1\nprint(counter)"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\n\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\\n3 4 5\\n\") == \"2\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"hoge\\ne\\nhoge\\nenglish\\n\") == \"Yes\"\nassert solution(\"hoge\\nhoge\\nenglish\\n\") == \"No\"\n\nimport re\n\nT = int(input())\n\nfor _ in range(T):\n    s = input()\n    if not re.match(r'^[a-zA-Z0-9]*$', s):\n        print(\"Invalid: \", s)\n        continue\n    if not re.search(r'[A-Z]', s):\n        print(\"Valid: \", s)\n        continue\n    print(re.search(r'[A-Z]\\1[a-z]*$', s))\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\"\n\nn = int(input())\nwords = [input() for _ in range(n)]\nans = True\nfor i in range(n - 1):\n    if not ans:\n        break\n    if words[i] in words[i + 1]:\n        ans = False\n        break\nprint(\"Yes\" if ans else \"No\")\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\nhoge\nenglish\nhoge\nenigma''') == 'No'\nassert solution('''4\nenglish\nhoge\nhoge\nenigma''') == 'Yes'\n\nassert solution('''3\nhoge\nhoge\nhoge''') == 'No'\nassert solution('''2\na\na''') == 'Yes'\n\nassert solution('''2\na\na\na\na''') == 'No'\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nhoge\\nenglish\\nhoge\\nenigma') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"hoge\\nenglish\\nhoge\\nenigma\\n\") == \"No\"\nassert solution(\"hoge\\nhoge\\nhoge\\nhoge\\n\") == \"Yes\"\nassert solution(\"hoge\\nhoge\\nenigma\\nhoge\\nhoge\\nhoge\\nhoge\\n\") == \"Yes\"\nassert solution(\"hoge\\nhoge\\nhoge\\nhoge\\nenigma\\nhoge\\nhoge\\nhoge\\n\") == \"No\"\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\nhoge\nenglish\nhoge\nenigma''') == 'No'\n\nassert solution('''5\nhoge\nhoge\nenigma\nenglish\nenglish''') == 'Yes'\n\nassert solution('''5\nhoge\nhoge\nenigma\nenglish\nenigma''') == 'No'\n\nassert solution('''5\nhoge\nhoge\nhoge\nhoge\nhoge''') == 'No'\n\nassert solution('''5\nhoge\nhoge\nhoge\nenigma\nenigma''') == 'No'"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n4\nhoge\nenglish\nhoge\nenigma\n''') == 'No'\n\nassert solution('''\n3\napple\napp\nbanana\n''') == 'Yes'\nassert solution('''\n1\nhoge\n''') == 'Yes'\nassert solution('''\n2\nhoge\nhuga\n''') == 'No'\nassert solution('''\n2\nhoge\nhuga\nhoge\nhuga\n''') == 'Yes'\n'''\n    def solution(stdin: str) -> str:\n        pass\n    return \"Yes\" if... else \"No\"\n'''\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n') == '6'\n\"\"\"\n\n\"\"\"\n- Naive Solution:\nTakahashi is organizing a party.\nAt the party, each guest will receive one or more snack pieces.\nTakahashi predicts that the number of guests at this party will be A or B.\nFind the minimum number of pieces that can be evenly distributed to the guests in both of the cases predicted.\nWe assume that a piece cannot be divided and distributed to multiple guests.\n\n-----Constraints-----\n - 1 \\leq A, B \\leq 10^5\n - A \\neq B\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nPrint the minimum number of pieces that can be evenly distributed to the guests in both of the cases with A guests and B guests.\n\n-----Sample Input-----\n2 3\n\n-----Sample Output-----\n6\n\nWhen we have six snack pieces, each guest can take three pieces if we have two guests, and each guest can take two if we have three guests.\n\"\"\"\n\n\"\"\"\n- Better Solution:\nTakahashi is organizing a party.\nAt the party, each guest will receive one or more snack pieces.\nTakahashi predicts that the number of guests at this party will be A or B.\nFind the minimum number of pieces that can be evenly distributed to the guests in both of the cases predicted.\nWe assume that a piece cannot be divided and distributed to multiple guests.\n\n-----Constraints-----\n - 1 \\leq A, B \\leq 10^5\n - A \\neq B\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nPrint the minimum number of pieces that can be evenly distributed to the guests in both of the cases with A guests and B guests.\n\n-----Sample Input-----\n2 3\n\n-----Sample Output-----\n6\n\nWhen we have six snack pieces, each guest can take three pieces if we have two guests, and each guest can take two if we have three guests.\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3') == 6\nprint(solution('2 3'))\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3') == '6'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3') == 6\nassert solution('1 1') == 1\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"4 1\") == \"4\"\nassert solution(\"9 6\") == \"2\"\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n'''\n\nfrom math import *\n\na,b = map(int,input().split())\nprint(ceil(max(a,b)//min(a,b))*min(a,b))\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"3 3\") == \"4\"\nassert solution(\"7 4\") == \"5\"\nassert solution(\"9 9\") == \"10\"\nassert solution(\"8 8\") == \"10\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution([\"2 3\"]) == \"6\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"1 10\") == \"3\"\nassert solution(\"3 10\") == \"3\"\nassert solution(\"10 10\") == \"10\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\nYou can check your solution on HackerRank:\nhttps://www.hackerrank.com/challenges/replace-all/problem\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\n-------"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(s) == x\n\"\"\"\n\nimport sys\n\ns = input()\n\nprint(s.replace('s', 'x'))\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('sardine') == 'xxxxxxx'\nassert solution('aabbcc') == 'xxxxxxx'\nassert solution('xxxyyy') == 'xxxxyyy'\n\"\"\"\n\nfrom unittest import TestCase\nimport collections"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1 1 1\") == \"Yes\"\n\"\"\"\n\nN = int(stdin.readline())\nH = list(map(int, stdin.readline().split()))\n\ncount = 1\n\nfor i in range(1, N):\n    if H[i] > H[i - 1]:\n        count += 1"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 2 1 1 3\") == \"Yes\"\n\"\"\"\n\nfrom typing import List, Optional, Tuple"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1 2 1 1 3\\n') == 'Yes'\nassert solution('1 1 1 1 1 3\\n') == 'No'\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n1 2 1 1 3''') == \"Yes\"\nassert solution('''5\n3 2 2 2 3''') == \"No\"\nassert solution('''5\n1 2 1 1 3\n3 2 2 2 3''') == \"Yes\"\nassert solution('''5\n1 2 1 1 2''') == \"No\"\nassert solution('''5\n1 2 1 1 1''') == \"Yes\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 1 1 3\\n\") == \"Yes\"\nassert solution(\"6\\n1 1 1 1 1 1\\n\") == \"No\"\n\"\"\"\n\n\nfrom typing import List, Union\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"Yes\"\nassert solution(\"5\\n1 2 1 3 4\") == \"No\"\nassert solution(\"2\\n3 4\") == \"Yes\"\nassert solution(\"2\\n1 2\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"Yes\"\nassert solution(\"4\\n2 1 4 3\") == \"No\"\nassert solution(\"4\\n1 2 3 4\") == \"Yes\"\nassert solution(\"4\\n2 1 4 3\") == \"No\"\nassert solution(\"3\\n1 2 3\") == \"Yes\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\n\"\"\"\n\nfrom functools import reduce\nfrom operator import __add__"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == '1'\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('1 2 3 4 5\\n2 3 1 4 5') == 1\n\"\"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\"\n) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1\\n2 2 3\\n2 1 2\\n\") == '1'\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1320\") == \"720\"\nassert solution(\"1834\") == \"1234\"\nassert solution(\"1878\") == \"1234\"\nassert solution(\"1188\") == \"1000\"\nassert solution(\"1193\") == \"1000\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1900\") == \"100\"\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1900\") == 100\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000') == 1\nassert solution('2500') == 2\nassert solution('3432') == 3\nassert solution('3432') == 3\nassert solution('2000') == 2\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '100'\nprint('Test pass.')\n\n-----\nIf you want to test the code, please go to tests folder\n-----\n\"\"\"\nfrom typing import List, Dict\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100\") == \"100\"\nassert solution(\"100000\") == \"0\"\nassert solution(\"10\") == \"10\"\nassert solution(\"1000\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1900') == '100'"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000\") == \"1\"\nassert solution(\"1900\") == \"2\"\nassert solution(\"2000\") == \"0\"\nassert solution(\"1500\") == \"1\"\nassert solution(\"1350\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000\") == 1\nassert solution(\"19\") == 0\nassert solution(\"200\") == 2\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100') == '1'\nassert solution('1500') == '3'\nassert solution('3000') == '4'\nassert solution('7000') == '6'\nassert solution('8000') == '7'\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == '9'\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 5 2\n4 5''') == '9'\n\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n3 5 2\\n4 5') == '9'\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 2\\n4 5\") == \"9\"\nprint(\"PASSED\")\n\n--------------------------------------------------------------------------------\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\n3 5 2\n4 5''') == '9'\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 2\\n4 5\") == 9\nassert solution(\"3 3 3\\n6 6 6\") == 6\nassert solution(\"3 5 2\\n4 2\") == 6\nassert solution(\"3 5 2\\n4 5\") == 9\nassert solution(\"3 5 2\\n4 1\") == 5\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nA = [int(x) for x in sys.stdin.readline().split()]\nB = [int(x) for x in sys.stdin.readline().split()]\n\ndp = [[0 for x in range(N + 1)] for y in range(2)]\ndp[0][0] = 0\ndp[1][0] = 0\ndp[0][1] = A[0]\ndp[1][1] = B[0]\n\nfor x in range(2, N + 1):\n    dp[0][x] = max(dp[1][x - 1] + A[x - 1], dp[0][x - 1])\n    dp[1][x] = max(dp[0][x - 1] + B[x - 1], dp[1][x - 1])\n\nprint(dp[0][-1])\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 2\\n4 5\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 2\\n4 5\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22\\n') == 'No War'\n\"\"\"\n\nn, m, x, y = [int(x) for x in stdin.split('\\n')[0].split()]\nx_i = [int(x) for x in stdin.split('\\n')[1].split()]\ny_i = [int(x) for x in stdin.split('\\n')[2].split()]\nprint('No War' if max(x_i) < x or min(x_i) > x or max(y_i) < y or min(y_i) > y else 'War')\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\nThe choice Z = 13 satisfies all of the three conditions as follows, thus they will come to an agreement.\n - X = 10 < 13 \\leq 20 = Y\n - 8, 15, 13 < 13\n - 16, 22 \\geq 13\nassert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\nThe choice Z = 18 satisfies all of the three conditions as follows, thus they will come to an agreement.\n - X = 10 < 18 \\leq 20 = Y\n - 8, 15, 13 < 18\n - 16, 22 \\geq 18\nassert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"War\"\n\nThe choice Z = 21 does not satisfy any of the three conditions and war will break out.\n - X = 10 < 21 \\leq 20 = Y\n - 8, 15, 13 < 21\n - 16, 22 \\geq 21\nassert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"War\"\n\nThe choice Z = 14 does not satisfy any of the three conditions and war will break out.\n - X = 10 < 14 \\leq 20 = Y\n - 8, 15, 13 < 14\n - 16, 22 \\geq 14\nassert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"War\"\n\nThe choice Z = 17 does not satisfy any of the three conditions and war will break out.\n - X = 10 < 17 \\leq 20 = Y\n - 8, 15, 13 < 17\n - 16, 22 \\geq 17\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\\n\") == \"No War\"\n\"\"\"\n\nimport sys\nfrom typing import List, Optional\n\nN, M, X, Y = [int(c) for c in sys.stdin.readline().strip().split()]\nx = [int(c) for c in sys.stdin.readline().strip().split()]\ny = [int(c) for c in sys.stdin.readline().strip().split()]\n\nlower_x = min(x)\nupper_x = max(x)\n\nlower_y = min(y)\nupper_y = max(y)\n\nprint(lower_x, upper_x, lower_y, upper_y)"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\"\n\nfrom math import gcd\nfrom collections import defaultdict\n\nclass Solution:\n    def _solution(self, A: int, B: int, X: int, Y: int) -> str:\n        # Z = X - Y\n        if A < X < Y <= B:\n            return \"War\"\n        if A >= X:\n            return \"No War\"\n        if A >= Y:\n            return \"No War\"\n        return \"War\"\n\n    def solution(self, stdin: str) -> str:\n        N, A, X, Y = list(map(int, stdin.split()))\n        return self._solution(A, B, X, Y)\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'3 2 10 20\\n8 15 13\\n16 22\\n'\n) == 'No War'\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\nassert solution(\"3 2 10 20\\n8 15 13\\n16 22\\n10 10\\n20 20\") == \"War\"\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 10 20\\n8 15 13\\n16 22\") == \"No War\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2\\n3\") == \"6\"\nassert solution(\"3\\n2\\n3\") == \"6\"\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\nt = sys.stdin.readline()\nt = t.strip()\nt = t.split('\\n')\nt.pop()\n\nt_list = list()\nfor item in t:\n    t_list.append(int(item))"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n2\\n3\\n\") == \"6\"\nassert solution(\"4\\n8\\n16\\n32\\n64\\n128\\n\") == \"256\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\nassert solution(\"2\\n3\\n3\") == \"7\"\n\"\"\"\n\nimport os\nimport sys\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2\\n3') == '6'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\n2\n3\n''') == '6'\nassert solution('''2\n3\n4\n''') == '8'\nassert solution('''2\n4\n6\n''') == '6'\n\nassert solution('''1\n1\n1\n''') == '360'\nassert solution('''1\n5\n2\n''') == '120'\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"6\"\n\n\"\"\"\n\n\nfrom math import factorial\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n3\\n6\\n') == 6\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\nassert solution(\"5\\n4\\n4\\n3\\n4\\n3\") == \"0\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n2\\n3') == 6\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n1 2 3''') == '0'\nassert solution('''2\n1 2''') == '1'\nassert solution('''3\n1 2 3''') == '0'\nassert solution('''5\n4 7 2 9 10''') == '15'\nassert solution('''4\n1 2 3 4''') == '0'\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(0)\n\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 3') == '0'\n\"\"\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3') == '0'\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == 0\n\"\"\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 3 2\\n') == '0'\nassert solution('4 1 2 3\\n') == '1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n1 2 3''') == '0'\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_0) == '0'\nassert solution(test_1) == '1'\nassert solution(test_2) == '2'\nassert solution(test_3) == '0'\nassert solution(test_4) == '0'\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n\") == 6\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == 2\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == '6'\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == '2'\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == 6\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == 2\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == 0\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\nprint('Hooray!')\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"4 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n13 14 15 16\") == \"0\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\nprint(\"The local tests are done.\")\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\\n\") == 6\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == 2\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\nassert solution(\"3 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"6\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n\"\"\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10 1 2 3\") == \"4\"\nassert solution(\"1 100\") == \"100\"\n\n\"\"\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''6\n5 10 2 3 14 5''') == '5'\n\nassert solution('''2\n1 100''') == '99'\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n5 10 2 3 14 5') == '5'\nassert solution('2\\n1 100') == '99'\nassert solution('7\\n3 21 30 19 36 11') == '7'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 1 3 2') == '3'\nassert solution('4\\n1 100 2 3') == '4'\n\"\"\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\nassert solution(\"2\\n1 100\") == \"99\"\n\"\"\"\n\nfrom math import ceil, floor"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"4\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"8\\n1 1 1 1 1 1 1 1 1\") == \"8\"\nassert solution(\"8\\n5 10 2 3 14 5\") == \"5\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n5 10 2 3 14 5') == '5'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n6\n5 10 2 3 14 5\n''') == '5'\nassert solution('''\n2\n1 100\n''') == '99'"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(solution(str(input()))\n\n\"\"\"\n\nfrom typing import List\nimport numpy as np"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n0 1 0 1 1\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\n\n------End------\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n0 0 0') == '0'\nassert solution('5\\n1 0 1 0 1') == '2'\nassert solution('6\\n0 1 0 1 1 0') == '2'\nassert solution('7\\n1 0 1 1 1 0 1') == '3'\nassert solution('5\\n0 1 0 1 0 1') == '2'\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n\"\"\"\n\n\nimport collections\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"5\\n1 0 1 0 1\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 0 1 0 1 0') == '2'\nassert solution('0 1 0 1 1 0') == '2'\nassert solution('1 0 1 1 1 0') == '3'\nassert solution('0 0 0') == '0'\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n0 0 0 0 1 1\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\n\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\nfrom collections import Counter\nfrom typing import Dict, List, Set, Tuple, Union, Optional\n\nfrom utils import get_data\n\nINPUT = get_data(int)"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('7') == '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('7') == '0'\n\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('7') == '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\") == 0\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nstdout = sys.stdout\n\nsys.stdin = open('input.txt', 'r')\nsys.stdout = open('output.txt', 'w')\n\ntest = int(stdin.read())"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('1') == 1\nassert solution('2') == 1\nassert solution('3') == 2\nassert solution('4') == 2\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == 1\n\n\"\"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == 1\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == \"3\"\nprint(solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\\n\"))\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\\n\"\n                \"brie soft\\n\"\n                \"camembert soft\\n\"\n                \"feta soft\\n\"\n                \"goat soft\\n\"\n                \"muenster soft\\n\"\n                \"asiago hard\\n\"\n                \"cheddar hard\\n\"\n                \"gouda hard\\n\"\n                \"swiss hard\\n\") == \"3\"\nassert solution(\"6\\n\"\n                \"parmesan hard\\n\"\n                \"emmental hard\\n\"\n                \"edam hard\\n\"\n                \"colby hard\\n\"\n                \"gruyere hard\\n\"\n                \"asiago hard\\n\") == \"4\"\nassert solution(\"5\\n\"\n                \"brie soft\\n\"\n                \"camembert soft\\n\"\n                \"feta soft\\n\"\n                \"goat soft\\n\"\n                \"muenster soft\\n\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"brie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == \"3\"\nassert solution(\"parmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == \"4\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == \"3\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == \"3\"\n\n'''\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == \"3\"\n\nprint(solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\"))\nassert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == \"4\"\n\nprint(solution(\"4\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\n\"))\nassert solution(\"4\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\n\") == \"0\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == 4\nassert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == 3\nassert solution(\"10\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\npecorino hard\") == 5\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"brie soft camembert\") == \"brie\"\nassert solution(\"parmesan hard emmental\") == \"parmesan\"\nassert solution(\"swiss gouda cheddar\") == \"gouda\"\nassert solution(\"feta goat muenster asiago\") == \"feta\"\nassert solution(\"feta goat muenster asiago gouda\") == \"gouda\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard') == '3'\nassert solution('6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard') == '4'\nassert solution('8\\ncheddar hard\\ngouda hard\\nswiss hard\\nedam hard\\ngouda hard\\ngouda hard\\ngouda hard\\ngouda hard') == '3'\n\"\"\"\n\nnum_cheeses = int(input())\ncheese_list = []\n\nfor i in range(num_cheeses):\n    cheese, type_cheese = input().split()\n    cheese_list.append([cheese, type_cheese])"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2 3') == '4'\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 2 1 1\\n2 4 3 5 6 5 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nans = [0] * n\ncnt = [0] * n\nfor i in range(n):\n    ans[a[i]] = b[i]\n    cnt[a[i]] += 1\nfor i in range(n):\n    for j in range(n):\n        if cnt[j] == 0:\n            ans[j] = ans[j] + i\n\nprint(*ans, sep=' ')\n\n\"\"\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 1 2\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2 1\") == \"1 0 0 2\"\n\n\"\"\""
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('0\\n') == ''\nassert solution('2\\n') == ''\nassert solution('0 1 2 1\\n') == ''\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\") == \"0 0 0 1 0 2 4\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1 1 1\\n2 1 1 1\") == \"2 1 1 1 0 0 0\"\nassert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\nassert solution('7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1') == '0 0 0 1 0 2 4'\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\") == \"0 0 0 1 0 2 4\"\nassert solution(\"1\\n0\") == \"0\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"1\\n2\") == \"1 0\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nprint('Test pass.')\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1100\") == 1\nassert solution(\"1010\") == 0\nassert solution(\"1101\") == 1\nassert solution(\"1011\") == 0\n\"\"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"110110\") == 0\nassert solution(\"111000\") == 0\nassert solution(\"101110\") == 0\nassert solution(\"111010\") == 1\nassert solution(\"111110\") == 1\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 1 0\") == \"0\"\n\n\"\"\"\n\n\"\"\"\nProblem Statement\nYou are given an array of N integers, A1, A2,\u2026, AN. Return maximum value of f(i, j) for all 1 \u2264 i, j \u2264 N.\nf(i, j) is defined as |A[i] - A[j]| + |i - j|, where |x| denotes absolute value of x.\n\nFor example,\n\nA=[1, 3, -1]\n\nf(1, 1) = f(2, 2) = f(3, 3) = 0\nf(1, 2) = f(2, 1) = |1 - 3| + |1 - 2| = 3\nf(1, 3) = f(3, 1) = |1 - (-1)| + |1 - 3| = 4\nf(2, 3) = f(3, 2) = |3 - (-1)| + |2 - 3| = 5\n\nSo, we return 5.\n\"\"\"\n\n\"\"\"\nSolution Approach\n\nWe will find the maximum of sum of absolute difference of all pairs of numbers in the array.\n\nWe will use dynamic programming to store the result of each subarray.\nFor a given array, we can define a recurrence relation\n\nf(i, j) = |A[i] - A[j]| + |i - j|\n\nWe can then iteratively compute this for all subarrays of the array. We can then find the maximum of all such values.\n\nWe can use a 2D array to store these values and iterate through the array once, but we can also use a 1D array to store these values.\n\nThis will then give us the maximum of all values.\n\nComplexity Analysis\n\nTime complexity : O(N^2)\n\nSpace complexity : O(N)\n\"\"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0110110') == '0'\nassert solution('1110110') == '1'\nassert solution('11011010') == '1'\nassert solution('11011011') == '0'\nassert solution('11101110') == '1'\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('1\\n0\\n1\\n1\\n') == '1'\nassert solution('1\\n1\\n0\\n0\\n') == '0'\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0\") == 0\nassert solution(\"1\") == 1\nassert solution(\"1\") == 1\nassert solution(\"0\") == 0\n\"\"\"\nfrom typing import Any, List\n\n\"\"\"\n\u8a0e\u53ad\u653b\u64ca\u8005\u7684\u4f5c\u6cd5\n\"\"\"\n\"\"\"\n\u6e2c\u8cc7\uff1a\n\n\u5169\u6578\u5b57\u90fd\u70ba0\uff0c\u56de\u50b30\n\u5169\u6578\u5b57\u90fd\u70ba1\uff0c\u56de\u50b31\n\u5176\u4e2d\u4e00\u500b\u6578\u5b57\u70ba1\uff0c\u53e6\u4e00\u500b\u70ba0\uff0c\u56de\u50b30\n\u5176\u4e2d\u4e00\u500b\u6578\u5b57\u70ba0\uff0c\u53e6\u4e00\u500b\u70ba1\uff0c\u56de\u50b30\n\u5169\u6578\u5b57\u70ba\u5169\u500b\u4e0d\u540c\u7684\u6578\u5b57\uff0c\u56de\u50b30\n\u5176\u4e2d\u4e00\u500b\u6578\u5b57\u70ba0\uff0c\u53e6\u4e00\u500b\u6578\u5b57\u70ba\u975e0\uff0c\u56de\u50b31\n\u5176\u4e2d\u4e00\u500b\u6578\u5b57\u70ba1\uff0c\u53e6\u4e00\u500b\u6578\u5b57\u70ba\u975e1\uff0c\u56de\u50b31\n\n\"\"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 0 0 1\") == \"0\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 1 1 0\") == \"0\"\n------------------------------\n\nInput\n1\n1\n1\n0\n\nOutput\n1\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"011101\") == 0\nassert solution(\"11101\") == 1\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"00110011\") == \"1\"\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\"\"\"\n\nimport os\nimport sys\nfrom io import StringIO\nfrom unittest import main, TestCase\n\nsys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                             os.path.pardir))\nfrom solution import solution\n\n\nclass TestSolution(TestCase):\n    def test_solution(self):\n        io = StringIO('''1000 15 80\n''')\n        sys.stdin = io\n        answer = solution()\n        self.assertEqual(answer, 'Yes')\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\n----------------------"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '1000 15 80'\n) == 'Yes'\n\n-----\n10    0    0\n'1'    '2'    '3'\n'4'    '5'    '6'\n'7'    '8'    '9'\n'10'    '11'    '12'\n\"\"\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\n\nimport os"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '1000 15 80'\n) == 'Yes'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000 15 80') == 'Yes'\nassert solution('1000 15 85') == 'No'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == 'Yes'\n\n-----Problem-----\nNijzgotovna ulica\n\nMalo\u010devi \u0161oli predstavlja se na na\u0161em letu vojno. V \u0161oli za vojno ljudi se poklapa s \u0161umi krogle, ki se predstavlja \u010drko v njem.\nV \u010drki predstavljajo naslednje:\n\nKrogla (C) - \u0161oli\nKrogla (E) - \u0161oli\nKrogla (D) - \u0161oli\nKrogla (G) - \u0161oli\nKrogla (B) - \u0161oli\nKrogla (F) - \u0161oli\nKrogla (H) - \u0161oli\n\nNapisati funkcijo solution(p, q, r, s, n) vrne True, \u010de je najden naloga za leto vojno in False in\u010de.\n\n-----Problem----Solution-----\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == expected_output\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.read()\n\nrows = [[int(i) for i in stdin.split('\\n')[i].split()] for i in range(4)]\ndiagonal = [[rows[i][i] for i in range(4)]]\ndiagonal.append([rows[0][3], rows[1][2], rows[2][1], rows[3][0]])\n\nans = 'Yes' if any(sum(row) >= 3 for row in rows) \\\n    or any(sum(row) >= 3 for row in diagonal) else 'No'\n\nprint(ans)"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\n\n\"\"\"\n\nfrom typing import List\nimport unittest\n\n\nclass Solution:\n    def __init__(self, stdin: str):\n        self.stdin = stdin\n        self.matrix = []\n        self.rows = None\n        self.columns = None\n        self.diagonal_from_top_left = None\n        self.diagonal_from_bottom_right = None\n        self.n = None\n        self.bingo_sheet = None\n        self.bingo_sheet_count = 0\n\n    def convert_to_matrix(self):\n        \"\"\"\n        Convert the input into a 2-dimensional matrix.\n\n        :return:\n        \"\"\"\n        self.matrix = self.stdin.splitlines()\n\n    def get_values_from_matrix(self):\n        \"\"\"\n        Get the values from the matrix.\n\n        :return:\n        \"\"\"\n        self.rows = len(self.matrix)\n        self.columns = len(self.matrix[0])\n        self.diagonal_from_top_left = self.rows * self.columns\n        self.diagonal_from_bottom_right = self.rows * self.columns - self.rows + 1\n\n    def get_bingo_sheet(self):\n        \"\"\"\n        Get the values in the bingo sheet.\n\n        :return:\n        \"\"\"\n        self.bingo_sheet = self.matrix[0].split()\n        self.bingo_sheet = list(map(int, self.bingo_sheet))\n\n    def check_for_bingo_sheet(self):\n        \"\"\"\n        Check if the bingo sheet is part of the matrix.\n\n        :return:\n        \"\"\"\n        self.bingo_sheet_count = 0\n\n        for row in self.matrix:\n            for value in row.split():\n                if int(value) in self.bingo_sheet:\n                    self.bingo_sheet_count += 1\n                else:\n                    self.bingo_sheet_count = 0\n\n        if self.bingo_sheet_count == len(self.bingo_sheet):\n            return True\n        else:\n            return False\n\n    def check_for_bingo_row(self):\n        \"\"\"\n        Check if the row is part of the matrix.\n\n        :return:\n        \"\"\"\n        self.bingo_sheet_count = 0\n\n        for row in self.matrix:\n            for value in row.split():\n                if int(value) in self.bingo_sheet:\n                    self.bingo_sheet_count += 1\n                else:\n                    self.bingo_sheet_count = 0\n\n            if self.bingo_sheet_count == len(self.bingo_sheet):\n                return True\n            else:\n                self.bingo_sheet_count = 0\n\n        return False\n\n    def check_for_bingo_column(self):\n        \"\"\"\n        Check if the column is part of the matrix.\n\n        :return:\n        \"\"\"\n        self.bingo_sheet_count = 0\n\n        for value in range(self.columns):\n            for row in self.matrix:\n                if int(row.split()[value]) in self.bingo_sheet:\n                    self.bingo_sheet_count += 1\n                else:\n                    self.bingo_sheet_count = 0\n\n            if self.bingo_sheet_count == len(self.bingo_sheet):\n                return True\n            else:\n                self.bingo_sheet_count = 0\n\n        return False\n\n    def check_for_bingo_diagonal(self):\n        \"\"\"\n        Check if the diagonal is part of the matrix.\n\n        :return:\n        \"\"\"\n        self.bingo_sheet_count = 0\n\n        for value in range(self.diagonal_from_top_left):\n            if int(self.matrix[value].split()[value]) in self.bingo_sheet:\n                self.bingo_sheet_count += 1\n            else:\n                self.bingo_sheet_count = 0\n\n        if self.bingo_sheet_count == len(self.bingo_sheet):\n            return True\n        else:\n            self.bingo_sheet_count = 0\n\n        for value in range(self.diagonal_from_top_left):\n            if int(self.matrix[value].split()[self.rows - value - 1]) in self.bingo_sheet:\n                self.bingo_sheet_count += 1\n            else:\n                self.bingo_sheet_count = 0\n\n        if self.bingo_sheet_count == len(self.bingo_sheet):\n            return True\n        else:\n            self.bingo_sheet_count = 0\n\n        for value in range(self.diagonal_from_bottom_right):\n            if int(self.matrix[value].split()[value]) in self.bingo_sheet:\n                self.bingo_sheet_count += 1\n            else:\n                self.bingo_sheet_count = 0\n\n        if self.bingo_sheet_count == len(self.bingo_sheet):\n            return True\n        else:\n            self.bingo_sheet_count = 0\n\n        for value in range(self.diagonal_from_bottom_right):\n            if int(self.matrix[value].split()[self.rows - value - 1]) in self.bingo_sheet:\n                self.bingo_sheet_count += 1\n            else:\n                self.bingo_sheet_count = 0\n\n        if self.bingo_sheet_count == len(self.bingo_sheet):\n            return True\n        else:\n            self.bingo_sheet_count = 0\n\n        return False\n\n    def return_result(self):\n        \"\"\"\n        Return the result.\n\n        :return:\n        \"\"\"\n        if self.check_for_bingo_row():\n            return \"Yes\"\n        elif self.check_for_bingo_column():\n            return \"Yes\"\n        elif self.check_for_bingo_diagonal():\n            return \"Yes\"\n        else:\n            return \"No\"\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        # from copy import deepcopy\n        import io\n\n        with io.StringIO() as buf, redirect_stdout(buf):\n            solution(\n                \"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n\")\n            output = buf.getvalue()\n            # print(output)\n            self.assertEqual(output, \"Yes\\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n\"\"\"\n\nA = {(1,1), (1,2), (1,3)}\nB = {(2,1), (2,2), (2,3)}\nC = {(3,1), (3,2), (3,3)}\n\nN = int(input())"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('84 97 66') == 'Yes'\nassert solution('79 89 11') == 'Yes'\nassert solution('61 59 7') == 'No'\nassert solution('7') == 'Yes'\nassert solution('89') == 'Yes'\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'Yes'\n\nassert solution(\n'''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'No'\n\nassert solution(\n'''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'No'\n\nassert solution(\n'''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'No'\n\nassert solution(\n'''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'No'"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == \"Yes\"\n\"\"\"\n\nimport sys\n\nclass Diagonal:\n    def __init__(self, matrix, n, diagonal):\n        self.matrix = matrix\n        self.n = n\n        self.diagonal = diagonal\n        self.total_num = 0\n        self.covered = set()\n        self.bingo_matrix = []\n        self.top_left = False\n        self.bottom_right = False\n\n        for i in range(n):\n            self.bingo_matrix.append([])\n            for j in range(n):\n                self.bingo_matrix[i].append(0)\n\n    def mark_all(self):\n        for i in range(self.n):\n            for j in range(self.n):\n                self.bingo_matrix[i][j] = 1\n\n    def mark_one(self, x, y):\n        self.bingo_matrix[x][y] = 1\n\n    def check(self):\n        if self.bingo_matrix[0][0] == 1:\n            self.top_left = True\n        if self.bingo_matrix[self.n - 1][self.n - 1] == 1:\n            self.bottom_right = True\n\n        for i in range(self.n):\n            if self.bingo_matrix[i][0] == 1:\n                self.total_num += 1\n\n        for i in range(self.n):\n            for j in range(self.n):\n                if self.bingo_matrix[i][j] == 1:\n                    self.covered.add((i, j))\n\n        for i in range(self.n):\n            for j in range(self.n):\n                if (i, j) in self.covered:\n                    self.bingo_matrix[i][j] = 0\n\n    def print(self):\n        for i in range(self.n):\n            print(self.bingo_matrix[i])\n\n    def is_bingo(self):\n        if self.top_left and self.bottom_right:\n            return True\n        if self.total_num == 3:\n            return True\n        return False"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\nassert solution(\"79 89 11\") == \"Yes\"\nassert solution(\"61 59 7\") == \"Yes\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"89\") == \"Yes\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''41 2\n5 6''') == '30'\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n2 3\\n5 6\") == \"30\"\n\"\"\"\n\nimport math\nfrom typing import List\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\"\"\"\n\nN, M = map(int, input().split())\nassignments = list(map(int, input().split()))\n\ntakahashi_max = 0\nfor day in range(1, N + 1):\n    for assignment in assignments:\n        if day % assignment == 0:\n            takahashi_max += 1\n            break\n        if day % assignment!= 0 and day == assignments[-1]:\n            takahashi_max = -1\n\nprint(takahashi_max)"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n1 2 3 4\") == \"1\"\nassert solution(\"4 2\\n1 2 3 4\") == \"0\"\nassert solution(\"4 2\\n1 2 3 4 5\") == \"2\"\n\nassert solution(\"10 1\\n1 2 3 4 5 6 7 8 9 10\") == \"-1\"\nassert solution(\"10 1\\n1\") == \"10\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n1 2\\n2 3\\n3 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n1 3 2 4 5') == '-1'\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 2\\n2 3\\n3 4\\n4 5') == '5'\n\"\"\"\n\n\"\"\"\nYour solution\n\"\"\"\n\nn, m = [int(x) for x in stdin.readline().split()]"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 2 3 4\") == \"7\"\nprint(\"Passed!\")\n\n\"\"\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2\\n1 2\\n2 3') == '7'\nassert solution('3 3\\n1 2\\n2 3') == '-1'\n\n\"\"\"\nimport sys\n\ninput_ = sys.stdin.readlines()\nN, M = map(int, input_.pop(0).split())\nassignments = [int(i) for i in input_[0].split()]\n\nmax_days = 0\ndays = [0] * (N + 1)\nfor assignment in assignments:\n    for i in range(assignment, N + 1):\n        days[i] = max(days[i], days[i - assignment] + 1)\n    max_days = max(max_days, days[N])\nprint(max_days - 1)\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\\n5 3\\n\") == \"4\"\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 3\\n') == '5'\n\"\"\"\nimport math\n\nd, n = map(int, input().split())"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 2\\n\") == \"5\"\n\"\"\"\n\nD, N = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"12\"\n\nassert solution(\"2 4\") == \"10\"\nassert solution(\"1 2\") == \"10\"\n\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"10\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"5\"\nassert solution(\"1 10\") == \"5\"\nassert solution(\"2 10\") == \"6\"\nassert solution(\"0 5\") == \"5\"\nassert solution(\"0 10\") == \"5\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 5\") == \"5\"\nassert solution(\"1 4\") == \"1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"0 5\") == \"5\"\nassert solution(\"1 6\") == \"1\"\n\"\"\"\nimport math"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"3\"\nassert solution(\"0 5\") == \"5\"\nassert solution(\"0 1\") == \"1\"\nassert solution(\"0 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 100\") == \"49\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 5\\n\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"1 10\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 5') == '5'\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n 7 6 8\\n') == '2'\nassert solution('5\\n 5 4 3 2\\n') == '1'\nassert solution('2\\n 1 1\\n') == '1'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 8 7\") == \"2\"\nassert solution(\"8 7 6\") == \"2\"\nassert solution(\"7 6 8\") == \"2\"\n\"\"\"\n\nimport sys\nfrom math import gcd\nfrom typing import List, Dict, Tuple\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n7 6 8\") == \"2\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1'\nassert solution('7 6 8') == '2'\nassert solution('2 8 15') == '5'\nassert solution('2 8 16') == '4'\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n7 6 8\") == \"2\"\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n7 6 8''') == 2\nassert solution('''2\n7 6''') == 1\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 6 8\") == \"2\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == 2\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1'\nassert solution('1 2 3 4') == '1'\nassert solution('1 2 3 5') == '1'\nassert solution('1 2 3 6') == '1'\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n7 6 8\\n\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\nassert solution(\"5\\n2 3 1 5 4\") == \"5 4 2 3 1\"\nassert solution(\"6\\n2 3 1 5 4 6\") == \"6 5 4 2 3 1\"\nassert solution(\"9\\n7 6 5 4 3 2 9 8 1\") == \"9 8 7 6 5 4 3 2 1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 1\") == \"3 1 2\"\n\"\"\"\n\n\nimport sys\n\nN = int(input())\nstudent_list = list(map(int, sys.stdin.readlines()[1:]))\n\nstudent_list.sort()\n\nfor student in student_list:\n    print(student)\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2 1') == '3 1 2'\nprint('Test Success!')"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 1\\n') == '3 1 2'\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 1\") == \"3 1 2\"\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 1\") == \"3 1 2\"\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2 1') == '3 1 2'\n\"\"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\n\"\"\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 7 100') == '9'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 7 100') == '9'\n\"\"\"\n\nA, B, X = [int(x) for x in stdin.split()]\nd = [int(x) for x in range(1, 100)]\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(10 7 100) == 9\n\"\"\"\n\nimport sys\n\ntry:\n    a, b, x = [int(x) for x in stdin.readlines()]\n    print(max([a * i + b * j for i in range(1, 10) for j in range(0, 10) if a * i + b * j <= x] or [0]))\nexcept:\n    print(0)\n    \n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 7 100') == '9'\nassert solution('1 2 3') == '0'\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 7 100') == '9'\n\"\"\"\n\nimport os\nimport sys\nfrom collections import Counter\nfrom copy import deepcopy"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''10 7 100''') == '9'\nprint('OK')\n\nassert solution('''10 10 7''') == '0'\nprint('OK')\n\nassert solution('''10 10 10''') == '10'\nprint('OK')\n\nassert solution('''10 10 10 100''') == '10'\nprint('OK')\n\nassert solution('''10 0 10''') == '0'\nprint('OK')"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 7 100') == '9'\nassert solution('7 7 100') == '7'\nassert solution('10 10 10') == '0'\nassert solution('7 7 100') == '7'\nassert solution('10 10 10') == '0'\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"1 2 100\") == \"0\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == 2\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"150 140 100 200\\n\") == 2\nassert solution(\"150 140 100 200\\n\") == 2\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('N K\\nh_1 h_2\\n') == '1'\nassert solution('4 150\\n150 140 100 200') == '2'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\nassert solution('4 200\\n200 200 200 200') == '4'\n\n\"\"\"\n\nimport sys\nfrom collections import Counter\nfrom math import ceil"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == 2\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 150\\n150 140 100 200') == 2\n\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\n\"\"\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\n\n-----\nAfter you've completed your solution, run this file through the online **Test** and **Reveal** buttons to see how your solution performs!\n\n[Secret tip: you can edit files on the right *Twitch* screen via the *Edit* button at the top!](https://cs61a.org/edit/)\n\n\"\"\"\n\nN, K = map(int, input().split())\nh = list(map(int, input().split()))\nprint(sum(1 for h_i in h if h_i >= K))\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\n\nfrom typing import List\n\n\"\"\"\nGiven N items with their popularity. The popularity can be represented by an array of size N. The i-th element represents the popularity of the i-th item.\n\nSelect M popular items and print Yes if there exists any such subset of size M that sums up to the popularity of the selected items. Otherwise, print No.\n\nInput Format\n\nThe first line contains N and M.\nThe next line contains N integers separated by space.\n\nConstraints\n\n1 <= N, M <= 10^5\n1 <= A_i <= 10^5\n\nOutput Format\n\nPrint Yes if there exists any such subset of size M that sums up to the popularity of the selected items. Otherwise, print No.\n\nSample Input 0\n\n4 1\n5 4 2 1\nSample Output 0\n\nYes\nExplanation 0\n\n1 -> Popularity\n\n4 -> Popularity\n\n5 + 4 + 2 + 1 = 12\n\n12 % 4 = 0\n\nThere are two ways to select 4 items that sum up to 12:\n\n4 + 1 + 2 + 1\n\n4 + 4 + 1 + 1\n\nBoth ways are valid.\n\nSample Input 1\n\n4 2\n5 4 2 1\nSample Output 1\n\nNo\nExplanation 1\n\nThere is no combination of 4 items that sums up to the popularity of the selected items.\n\nSample Input 2\n\n4 3\n5 4 2 1\nSample Output 2\n\nYes\nExplanation 2\n\n5 + 4 + 1 = 12\n\n12 % 3 = 0\n\nThere are three ways to select 3 items that sum up to 12:\n\n5 + 1 + 1\n\n4 + 4 + 1\n\n5 + 4 + 2\n\nSample Input 3\n\n10 4\n1 2 3 4 5 6 7 8 9 10\nSample Output 3\n\nYes\nExplanation 3\n\nThere are two ways to select 4 items that sum up to 20:\n\n1 + 9 + 8 + 2\n\n10 + 1 + 2 + 3\n\nSample Input 4\n\n10 4\n1 2 3 4 5 6 7 8 9 10\nSample Output 4\n\nNo\nExplanation 4\n\nThere is no combination of 4 items that sums up to the popularity of the selected items.\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 2\n5 4 2 1''') == 'Yes'\nassert solution('''4 2\n5 4 2 1''') == 'Yes'\nassert solution('''4 3\n5 4 2 1''') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\nassert solution(\"4 1\\n3 3 3 3\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\nassert solution(\"2 1\\n1 1\") == \"Yes\"\nassert solution(\"4 2\\n2 2 2 2\") == \"No\"\nassert solution(\"10 2\\n3 1 2 3 4 1 3 5 2 4\") == \"No\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"Yes\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\n\nfrom typing import List\nimport math\nimport unittest\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == 5\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == 5\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('.#..#\\n.....\\n#####\\n....#\\n...##') == '5'\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('.#.#\\n###.') == 5\n\"\"\"\nfrom math import factorial\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('.#..') == 3\n\nassert solution('#..#') == 2\n\nassert solution('###') == 1\n\nassert solution('#..') == 2\n\nassert solution('.#.') == 2"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\\n\") == \"5\"\nassert solution(\"2 3 2\\n..#\\n###\\n\") == \"5\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2020 2040') == 2\n\"\"\"\nfrom itertools import count\n\nnums = list(map(int, stdin.strip().split()))\nprint(min(map(lambda x: x * (x + 1) % 2019, nums)))\n\n\"\"\"\nfrom itertools import count\nimport operator\nimport numpy as np\n\nnums = list(map(int, stdin.strip().split()))\nprint(min(map(lambda x: x * (x + 1) % 2019, nums)))\n\"\"\"\n\"\"\"\nfrom itertools import combinations\n\nnums = list(map(int, stdin.strip().split()))\nprint(min(map(lambda x: min(x) * max(x) % 2019, combinations(nums, 2))))\n\"\"\"\n\n\"\"\"\nimport itertools\nfrom operator import mul\n\nnums = list(map(int, stdin.strip().split()))\nprint(min(map(lambda x: min(x) * max(x) % 2019, itertools.combinations(nums, 2))))\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a) == b\n\na, b = map(int, stdin.split())"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(12345678910111213141516) == 12\n\"\"\"\n\nfrom my_decorators import timeit, reset_timer\n\nimport math\n\n@reset_timer\n@timeit\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2020, 2040) == 2\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(2)\nprint('Success')\n\"\"\"\n\nimport sys\n\nL, R = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2020 2040') == '2'"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2020 2040') == '2'\nprint('PASS')\n\n-------------\n\nclass Solution:\n    def __init__(self):\n        self.result = None\n\n    def solution(self, stdin: str) -> str:\n        a, b = map(int, stdin.split(' '))\n        self.result = b * b - b * (b - 1) // 2 - a * (a - 1) // 2 + a * b\n        return str(self.result)\n\nassert Solution().solution('2020 2040') == '2'\nprint('PASS')\n\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2020 2040\") == 2\nprint(solution(\"2020 2040\"))\n\n'''"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'WA'\nassert solution('AtCoder') == 'AC'\nassert solution('Atcoder') == 'WA'\nassert solution('ATCODER') == 'WA'\nassert solution('AtCODER') == 'AC'\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"AtCoder2\") == \"WA\"\nassert solution(\"AtCoder3\") == \"WA\"\nassert solution(\"AtCoder4\") == \"AC\"\nassert solution(\"AtCoder5\") == \"WA\"\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('AtCoder') == 'AC'\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"Atcoder\") == \"WA\"\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('AtCoder') == 'AC'\nassert solution('Atcoder') == 'WA'\nassert solution('atcoder') == 'WA'\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"Atcoder\") == \"WA\"\nassert solution(\"atcoder\") == \"AC\"\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"AtCoder2\") == \"WA\"\nassert solution(\"AtCoder3\") == \"AC\"\nassert solution(\"AtCoder4\") == \"WA\"\nassert solution(\"AtCoder5\") == \"AC\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"AtCoder1\") == \"WA\"\nassert solution(\"AtCoder2\") == \"AC\"\nassert solution(\"AtCoder3\") == \"WA\"\nassert solution(\"AtCoder4\") == \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\nSample Input:\nCodeforces\n\nSample Output:\nWA\n\nThe first character is C, which is not A, so the condition #1 is false.\nThe second character is o, which is not C, so the condition #2 is false.\nThe remaining letters are all lowercase, so the condition #3 is true.\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"1324\") == \"2\"\nassert solution(\"1211\") == \"1\"\nassert solution(\"11111\") == \"1\"\nassert solution(\"111111\") == \"1\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1214') == '2'\nassert solution('1') == '1'\nassert solution('1214444') == '4'\nassert solution('12144444') == '4'\nassert solution('12345') == '5'\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1214\") == \"2\"\nprint(\"Test 1: \" + solution(\"1214\") == \"2\")\nassert solution(\"1214\") == \"2\"\nprint(\"Test 2: \" + solution(\"1214\") == \"2\")\nassert solution(\"1214\") == \"2\"\nprint(\"Test 3: \" + solution(\"1214\") == \"2\")\nassert solution(\"1214\") == \"2\"\nprint(\"Test 4: \" + solution(\"1214\") == \"2\")\nassert solution(\"1214\") == \"2\"\nprint(\"Test 5: \" + solution(\"1214\") == \"2\")\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1214') == '2'\nassert solution('1') == '1'\nassert solution('101') == '1'\nassert solution('111111') == '1'\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1214\") == \"2\"\nprint(solution(\"1214\"))\n\n\"\"\"\n\nfrom collections import Counter\nimport math\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1214') == '2'\n\n\"\"\"\nfrom math import log10\n\nfrom input_parser import parse_input\nfrom int_to_k_s_r_n import int_to_k_s_r_n\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1214') == '2'\nassert solution('1324') == '4'\nassert solution('1111') == '1'\nassert solution('9') == '9'\nassert solution('1112') == '3'\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1214') == '2'\nassert solution('111222333') == '2'\nassert solution('101222222222') == '2'\nassert solution('10122222222222222') == '2'\nassert solution('101222222222222222222') == '2'\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1214\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1214\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3 4 1\") == 'YES'\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 2 3 1\") == \"NO\"\nassert solution(\"5 2 3 4 1\") == \"YES\"\nassert solution(\"3 1 2 5 4\") == \"NO\"\nassert solution(\"2 3 1 5 4\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\n\"\"\"\n\n\"\"\"\n\n\uc544\uc774\ub514\uc5b4 : \uadf8\ub0e5 \uc2a4\uc651\n\n\uc811\uadfc : \uad73\uc774 swap\uc744 \uc704\ud574\uc11c \ud574\uc918\uc57c\ud558\ub294 \uac83\uc740 \uc5c6\ub2e4\n\n\ud480\uc774\ubc29\ubc95 : \uc9c0\uae08 \uc2a4\uc651\ud560 \uacbd\uc6b0\uc5d0\ub294 \uac12\uc758 \uc704\uce58\uac00 \ubc14\ub00c\uac8c \ub418\ub294\ub370 \uc774\ub294 swap\uc774 \uc5c6\ub2e4 -> \uc5ec\ub7ec\ubc88 swap\uc744 \uc9c0\uc6cc\uc57c\ud558\ub294\ub370 \uc774\ub54c\uc758 \ucd5c\uc18c\uc758 swap \ud69f\uc218\ub97c \ucc3e\ub294\uac8c \ud575\uc2ec\n\n1\ucc28 \uc2dc\ub3c4 : \uac19\uc740 \uc22b\uc790\uac00 \uc788\ub294 \uacbd\uc6b0 \ucc3e\uae30 -> \uc704 \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uacbd\uc6b0\uc5d0\ub9cc \uac12\uc774 \ubc14\ub010\ub2e4\n\uc811\uadfc\uc740 \ud1b5\uacfc\ud55c\ub2e4\n\n\uc0c8\ub85c\uc6b4 \uc544\uc774\ub514\uc5b4 : \uad73\uc774 \uc2a4\uc651\uc744 \uc9c4\ud589\ud560 \ud544\uc694\uac00 \uc5c6\uc74c\n\uc811\uadfc : \uac19\uc740 \uc22b\uc790\uac00 \uc788\ub294 \uacbd\uc6b0 \ucc3e\uae30 -> \uc5ec\ub7ec\ubc88 swap\uc744 \uc9c0\uc6cc\uc57c\ud558\ub294\ub370 \uc774\ub54c\uc758 \ucd5c\uc18c\uc758 swap \ud69f\uc218\ub97c \ucc3e\ub294\uac8c \ud575\uc2ec\n\n2\ucc28 \uc2dc\ub3c4 : \ubaa8\ub4e0 \uc22b\uc790\uac00 \ub2e4\ub978 \uacbd\uc6b0 \ucc3e\uae30\n\n\uc811\uadfc : \ubaa8\ub4e0 \uc22b\uc790\uac00 \ub2e4\ub978 \uacbd\uc6b0 \ucc3e\uae30 -> \uc5ec\ub7ec\ubc88 swap\uc744 \uc9c0\uc6cc\uc57c\ud558\ub294\ub370 \uc774\ub54c\uc758 \ucd5c\uc18c\uc758 swap \ud69f\uc218\ub97c \ucc3e\ub294\uac8c \ud575\uc2ec\n\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\nassert solution(\"5 2 3 1 4\") == \"NO\"\n\"\"\"\nimport collections"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n5 2 3 4 1') == 'YES'\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 3 2 4') == 'NO'\nassert solution('5\\n5 2 3 4 1') == 'YES'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n5 2 3 4 1') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"1000000000000000000000000000000000\") == 33\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'\nassert solution('201920181') == '4'\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3121') == '2'\nassert solution('201920181') == '4'\nassert solution('1000000000000000000000000000000000') == '33'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'\n\n-----\n3121\n\n2\n\n6\n\n1000000000000000000000000000000000\n\n33\n\n\"\"\""
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"201920181\") == \"4\"\n\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('201920181') == '4'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3121') == 2\nassert solution('6') == 1\nassert solution('201920181') == 4\nassert solution('1000000000000000000000000000000000') == 33\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'\nassert solution('201920181') == '4'\nassert solution('100010110001110001101010110111111111111111111111111111') == '1'\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"1000000000000000000000000000000000\") == 33\nassert solution(\"201920181\") == 4\n\"\"\"\nfrom math import ceil"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"201920181\") == 4\nassert solution(\"1000000000000000000000000000000000\") == 33\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 3 4 5\\n2 4 7 11 3') == 2\n\"\"\"\nfrom typing import List\n\nfrom collections import Counter"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\") == \"3\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\nb = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\\n\") == \"3\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == 2\nassert solution(\"3\\n13 37 39\\n1 2 3\") == 2\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == 0\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a_1, a_2, a_3, b_1, b_2, b_3) == 1\nassert solution(a_1, a_2, a_3, b_1, b_2, b_3) == 2\nassert solution(a_1, a_2, a_3, b_1, b_2, b_3) == 0\nassert solution(a_1, a_2, a_3, b_1, b_2, b_3) == 3\nassert solution(a_1, a_2, a_3, b_1, b_2, b_3) == 2\n\nprint(\"OK!\")\n\n\"\"\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\nassert solution(\"3\\n1 2 3\\n-6 -12 6\\n\") == \"3\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n 1 2\\n 3 4\") == 2\n\nprint(solution(\"5\\n 1 2 3 4 5\\n 2 4 7 11 3\"))\n\nprint(solution(\"3\\n 13 37 39\\n 1 2 3\"))\n\nprint(solution(\"4\\n 0 0 0 0\\n 1 2 3 4\"))"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\n\"\"\"\n\ubb38\uc81c \uc124\uba85\n\ub450 \uac1c\uc758 \ubc30\uc5f4\uc744 \uc785\ub825\ubc1b\uc544\uc11c, \ub450 \ubc30\uc5f4\uc758 \uacf1\uc744 \uc774\uc6a9\ud574\uc11c \uc815\ub82c\ub41c \uac12\uc744 \uc0c8\ub85c\uc6b4 \ubc30\uc5f4\uc5d0 \ub2f4\ub294 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub77c.\n\n\ub9e4\uac1c\ubcc0\uc218 \uc124\uba85\n\uc785\ub825\uc73c\ub85c\ub294 \ub450 \uac1c\uc758 \ubc30\uc5f4\uc758 \uae38\uc774 n\uacfc \ub450 \ubc30\uc5f4\uc758 \uac12\uc744 \ub098\ud0c0\ub0b4\ub294 \uac01\uac01\uc758 \ubc30\uc5f4 a\uc640 b\uac00 \ub4e4\uc5b4\uc788\ub2e4.\n\n\ubc30\uc5f4 a\uc758 \uae38\uc774 n\uc740 1\uc774\uc0c1 10,000\uc774\ud558\uc758 \uc815\uc218\uc774\ub2e4.\n\ubc30\uc5f4 a\uc758 \uc6d0\uc18c\ub294 \ubaa8\ub450 -10,000,000 \uc774\uc0c1 10,000,000 \uc774\ud558\uc758 \uc815\uc218\uc774\ub2e4.\n\ubc30\uc5f4 b\uc758 \uae38\uc774 n\uc740 1\uc774\uc0c1 10,000\uc774\ud558\uc758 \uc815\uc218\uc774\ub2e4.\n\ubc30\uc5f4 b\uc758 \uc6d0\uc18c\ub294 \ubaa8\ub450 -10,000,000 \uc774\uc0c1 10,000,000 \uc774\ud558\uc758 \uc815\uc218\uc774\ub2e4.\n\ub450 \ubc30\uc5f4\uc5d0\uc11c \uac19\uc740 \uc6d0\uc18c\uac00 \uba87 \uac1c \uc788\ub294\uc9c0 \ud655\uc778\ud55c \ub4a4\uc5d0\ub294 \ub2e4\ub978 \uac1c\uc218\ub97c \ucd9c\ub825\ud55c\ub2e4.\n\n\ub9e4\uac1c\ubcc0\uc218 \uc124\uba85\n\ubc30\uc5f4 a\uc758 \uae38\uc774 n\uc740 1\uc774\uc0c1 10,000\uc774\ud558\uc758 \uc815\uc218\uc774\ub2e4.\n\ubc30\uc5f4 a\uc758 \uc6d0\uc18c\ub294 \ubaa8\ub450 -10,000,000 \uc774\uc0c1 10,000,000 \uc774\ud558\uc758 \uc815\uc218\uc774\ub2e4.\n\ubc30\uc5f4 b\uc758 \uae38\uc774 n\uc740 1\uc774\uc0c1 10,000\uc774\ud558\uc758 \uc815\uc218\uc774\ub2e4.\n\ubc30\uc5f4 b\uc758 \uc6d0\uc18c\ub294 \ubaa8\ub450 -10,000,000 \uc774\uc0c1 10,000,000 \uc774\ud558\uc758 \uc815\uc218\uc774\ub2e4.\n\ub450 \ubc30\uc5f4\uc5d0\uc11c \uac19\uc740 \uc6d0\uc18c\uac00 \uba87 \uac1c \uc788\ub294\uc9c0 \ud655\uc778\ud55c \ub4a4\uc5d0\ub294 \ub2e4\ub978 \uac1c\uc218\ub97c \ucd9c\ub825\ud55c\ub2e4.\n\n\ubc30\uc5f4 a\uc758 \uc6d0\uc18c \uc911\uc5d0\uc11c \uac00\uc7a5 \ud070 \uc6d0\uc18c\uc640 \uac00\uc7a5 \uc791\uc740 \uc6d0\uc18c\ub97c \ucc3e\uace0, \uadf8 \ucc28\ub97c \ucd9c\ub825\ud55c\ub2e4.\n\n\ubc30\uc5f4 a\uc758 \uc6d0\uc18c \uc911\uc5d0\uc11c \uac00\uc7a5 \ud070 \uc6d0\uc18c\uc640 \uac00\uc7a5 \uc791\uc740 \uc6d0\uc18c\ub97c \ucc3e\uace0, \uadf8 \ucc28\ub97c \ucd9c\ub825\ud55c\ub2e4.\n\n\ubc30\uc5f4 a\uc640 b\uc758 \uc6d0\uc18c \uc911\uc5d0\uc11c \uac00\uc7a5 \ud070 \uc6d0\uc18c\uc640 \uac00\uc7a5 \uc791\uc740 \uc6d0\uc18c\ub97c \ucc3e\uace0, \uadf8 \ucc28\ub97c \ucd9c\ub825\ud55c\ub2e4.\n\n\ubc30\uc5f4 a\uc640 b\uc758 \uc6d0\uc18c \uc911\uc5d0\uc11c \uac00\uc7a5 \ud070 \uc6d0\uc18c\uc640 \uac00\uc7a5 \uc791\uc740 \uc6d0\uc18c\ub97c \ucc3e\uace0, \uadf8 \ucc28\ub97c \ucd9c\ub825\ud55c\ub2e4.\n\n\ub9e4\uac1c\ubcc0\uc218 \uc124\uba85\n\ubc30\uc5f4 a\uc758 \uae38\uc774 n\uc740 1\uc774\uc0c1 10,000\uc774\ud558\uc758 \uc815\uc218\uc774\ub2e4.\n\ubc30\uc5f4 a\uc758 \uc6d0\uc18c\ub294 \ubaa8\ub450 -10,000,000 \uc774\uc0c1 10,000,000 \uc774\ud558\uc758 \uc815\uc218\uc774\ub2e4.\n\ubc30\uc5f4 b\uc758 \uae38\uc774 n\uc740 1\uc774\uc0c1 10,000\uc774\ud558\uc758 \uc815\uc218\uc774\ub2e4.\n\ubc30\uc5f4 b\uc758 \uc6d0\uc18c\ub294 \ubaa8\ub450 -10,000,000 \uc774\uc0c1 10,000,000 \uc774\ud558\uc758 \uc815\uc218\uc774\ub2e4.\n\ub450 \ubc30\uc5f4\uc5d0\uc11c \uac19\uc740 \uc6d0\uc18c\uac00 \uba87 \uac1c \uc788\ub294\uc9c0 \ud655\ufffd"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 2 3\\n2 4 7 11 3') == '2'\nassert solution('1\\n2\\n3') == '0'\nassert solution('1\\n2\\n3\\n4\\n5') == '0'\nassert solution('1\\n2\\n0\\n3\\n0\\n4\\n0\\n5\\n0') == '2'\n\n\"\"\"\n\nn = int(stdin.readline().strip())\na = [int(x) for x in stdin.readline().strip().split(' ')]\nb = [int(x) for x in stdin.readline().strip().split(' ')]\nc = [a[i] * b[i] for i in range(n)]\nd = [0 for _ in range(n)]\nfor i in range(n):\n    for j in range(n):\n        d[i] += a[j] * b[i]\n\nprint(max(d))\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n1 2 -1\n-6 -12 6\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n1 2 3 4 5\n2 4 7 11 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n0 0 0 0\n1 2 3 4\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5\n13 37 39\n1 2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n1 2 -1\n-6 -12 6\n\"\"\") == \"3\""
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('hellocode') == '0'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"10\"\nassert solution(\"abaca?b\") == \"5\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\n\"\"\"\n\nn = int(input())\nl = input()\nr = input()\n\ncompatibility = {}\nfor i in range(n):\n    if l[i] not in compatibility:\n        compatibility[l[i]] = {'?'}\n    else:\n        compatibility[l[i]].add('?')\n    if r[i] not in compatibility:\n        compatibility[r[i]] = {'?'}\n    else:\n        compatibility[r[i]].add('?')\n\nfor i in compatibility:\n    compatibility[i] = list(compatibility[i])\n\nans = 0\nfor i in compatibility:\n    if len(compatibility[i]) == 2:\n        ans += 1\n\nprint(ans)\nfor i in compatibility:\n    if len(compatibility[i]) == 2:\n        print(i, compatibility[i][0], compatibility[i][1])\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"0\""
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('hellocode') == '0'\nassert solution('bambarbia') == '10'\nassert solution('code???????????') == '10'\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"hellocode\") == \"0\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"code??????\") == \"10\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('bambarbia') == '0'\nassert solution('hellocode') == '10'\n\n\"\"\""
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"0\"\nassert solution(\"test\") == \"10 9\"\n\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"0\"\nassert solution(\"test\") == \"10\"\n\"\"\"\n\nfrom collections import Counter\nimport sys"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"5\\n7 8\"\nassert solution(\"dodivthree\") == \"5\\n7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"10\\n6 2\\n1 6\\n7 3\\n3 5\\n4 8\\n9 7\\n5 1\\n2 4\\n10 9\\n8 10\"\nassert solution(\"aaaaaaaa\") == \"5\\n6 2\\n1 6\\n7 3\\n3 5\\n4 8\\n9 7\\n5 1\\n2 4\\n10 9\\n8 10\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"7 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"4 1 1 1\") == \"4\"\nassert solution(\"4 4\") == \"1 1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"4\\n1 1 1 1\") == \"4\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\n\"\"\""
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\nassert solution('7') == '7'\n\"\"\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"7 4 1 2 2 1 5 3\") == \"3\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 2 2 1 5 3\\n') == '3'\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '2'\n\"\"\"\n\nimport sys\nimport re\nfrom collections import defaultdict"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == '3\\n7 7\\n2 3\\n4 5'\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == '2\\n3 4\\n1 1\\n2 2'\nassert solution(\"4\\n1 1 1 1\") == '4\\n4 4\\n1 1'\nassert solution(\"4\\n4 4\") == '4\\n4 4'\nprint('The solution is correct!')\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\\n4 5\"\n\"\"\"\n\nimport sys\nimport heapq\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 2\\n\") == '1'\n\nassert solution(\"4 3\\n1 2 3 4\\n\") == '0'\n\nassert solution(\"2 2\\n1 2\\n\") == '1'\n\nassert solution(\"4 3\\n1 2 3 4\\n\") == '0'\n\nassert solution(\"4 3\\n4 3\\n\") == '0'"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_data) == test_results\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n2 78 4 10') == '12'\nassert solution('5 2\\n3 7 19 3 3') == '0'\nassert solution('4 2\\n3 7 19 3 3') == '0'\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n2 78 4 10\\n\") == 12\nassert solution(\"5 2\\n3 7 19 3 3\\n\") == 0\nassert solution(\"4 11\\n45 1 10 12 11 7\\n\") == 7\nassert solution(\"5 2\\n3 7 19 3 3\\n\") == 0"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n2 78 4 10\\n') == '12'\nassert solution('5 2\\n3 7 19 3 3\\n') == '0'\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'6 11\\n45 1 10 12 11 7'\n) == '7'\nassert solution(\n'4 2\\n2 78 4 10'\n) == '12'\nassert solution(\n'5 2\\n3 7 19 3 3'\n) == '0'"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 11\\n45 1 10 12 11 7\") == \"7\"\nassert solution(\"4 2\\n2 78 4 10\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\"\n\n\n'''"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 11\") == '7'\nassert solution(\"4 2\") == '12'\nassert solution(\"5 2\") == '0'\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"6 11\n45 1 10 12 11 7\"\"\") == 7\nassert solution(\"\"\"4 2\n2 78 4 10\"\"\") == 12\nassert solution(\"\"\"5 2\n3 7 19 3 3\"\"\") == 0\n\n\"\"\""
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('3 3') == '0'\nassert solution('5 2') == '0'\nassert solution('7 2') == '0'\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n2 4 1 5 8 1 7\") == \"10\"\n\"\"\"\nimport sys\n\nn = int(input().strip())\nb = [int(x) for x in input().strip().split()]"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2 5') == '9'\n\"\"\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2 5') == '9'\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('4') == '4'\nassert solution('6') == '6'\nassert solution('17') == '17'\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n2 5\\n3 10\") == \"16\"\nassert solution(\"10\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n11 12\") == \"20\"\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n3 5 4 5') == '9'\nassert solution('3\\n5 5 5') == '9'\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 5\") == '9'\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 5\") == 9\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n5') == '9'\n\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 5') == '100'\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == '110'\n\"\"\"\n\nfrom math import inf\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(    \"3 4 3\"\n        \"1 3 3 100\"\n        \"1 2 2 10\"\n        \"2 3 2 10\") == \"110\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6 2\\n1 3 1 10\\n2 4 2 10') == '110'\n\"\"\"\nfrom typing import List\nfrom collections import namedtuple\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\"\n\nN, M, Q = list(map(int, input().split(' ')))\nscores = [0] * Q\nfor i in range(Q):\n    a, b, c, d = list(map(int, input().split(' ')))\n    scores[i] = d\n    for j in range(a, b+1):\n        scores[i] += scores[i-1] if i-1 >= 0 else 0\nprint(max(scores))\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nhttps://www.pramp.com/challenge/r4gBKKgJHq6X5J3fSZpJ\n\nGiven a sorted array of strings that is interspersed with empty strings, write a method to find the location of a given string.\n\nExample\n\nGiven input array A = [\"at\",\"\",\"\",\"\",\"ball\",\"\",\"\",\"car\",\"\",\"\",\"dad,,\",\"mom\"]\n\nand given query string B = \"ball\", your method should return 4.\n\nGiven array A = [\"at\",\"\",\"\",\"\",\"ball\",\"\",\"\",\"car\",\"\",\"\",\"dad,,\",\"mom\"]\n\nand given query string B = \"at\", your method should return 0.\n\n-----Constraints-----\n - 1 \u2264 size(A) \u2264 106\n - size(A) \u2264 106\n - 1 \u2264 size(B) \u2264 106\n - size(B) \u2264 106\n - A contains only lowercase English letters, and empty strings.\n - B contains only lowercase English letters.\n - The elements of A are in sorted order (lexicographicaly).\n - The elements of A are distinct.\n - The elements of B are distinct.\n - 0 \u2264 B.length \u2264 106\n\n-----Sample Input-----\n\n[\u201cat\u201d,\u201d\u201d,\u201d\u201d,\u201d\u201d,\u201dball\u201d,\u201d\u201d,\u201d\u201d,\u201dcar\u201d,\u201d\u201d,\u201ddad,\u201d,\u201dmom\u201d]\n\u201dball\u201d\n-----Sample Output-----\n4\n\n-----Explanation-----\n\nThe query string B = \u201cball\u201d is present in the array A at index 4.\n\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 4 6 3\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 4 6 3') == '5'"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\nassert solution(\"3\\n4 6 2\") == \"3\"\n\"\"\"\n\nimport sys\n\nfrom typing import List, Union\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n6 3 4 7 9\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\nprint(solution(\"4\\n1 4 6 3\"))\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 4 6 3\\n\") == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 4 6 3\\n\") == \"5\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\n\nprint(solution(stdin.readlines()[0]))\n\n\"\"\""
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\nassert solution(\"4\\n1 2\\n2 3\\n3 1\") == \"2.8284271247\"\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n\n\"\"\"\n    n = int(stdin.readline())\n    x, y = [], []\n    for i in range(n):\n        x.append(int(stdin.readline()))\n        y.append(int(stdin.readline()))\n    total = 0\n    for i in range(n):\n        total += ((x[i] - x[0]) ** 2 + (y[i] - y[0]) ** 2) ** (1 / 2)\n    print(total / factorial(n))\n\"\"\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 0 0 1 0\\n0 0\\n1 0\\n0 1\") == \"2.276142\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n0 0\n1 0\n0 1\n\"\"\") == \"2.2761423749\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n0 0\\n1 0\\n0 1') == '2.276142...'\n\"\"\"\n\nimport math\nimport sys\n\ntest_cases = int(sys.stdin.readline())\nfor test in range(test_cases):\n    n = int(sys.stdin.readline())\n    towns = []\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        towns.append([x, y])\n    towns = list(sorted(towns, key=lambda x: x[0]))\n    x_values = [town[0] for town in towns]\n    y_values = [town[1] for town in towns]\n    town_set = set()\n    town_set.add(towns[0])\n    for i in range(1, n):\n        if x_values[i] - towns[i][0]!= 0:\n            slope = (y_values[i] - towns[i][1]) / (x_values[i] - towns[i][0])\n        else:\n            slope = sys.maxsize\n        for j in range(len(town_set)):\n            if towns[i] == list(town_set)[j]:\n                if i!= j:\n                    town_set.remove(town_set[j])\n                break\n        town_set.add(towns[i])\n    if len(town_set) == 1:\n        print('Impossible')\n    else:\n        print(1/6 * sum([math.sqrt((town_set[i][0] - towns[i][0]) ** 2 + (town_set[i][1] - towns[i][1]) ** 2) for i in range(len(town_set))]))\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 0\\n1 0\\n0 1\\n\") == \"1.41421356237\"\n\"\"\"\n\nimport math\n\nN = int(stdin.readline())\ncoordinates = [tuple(map(float, stdin.readline().split())) for _ in range(N)]\n\naverage = sum(\n    math.sqrt(sum((coordinates[i][0] - coordinates[j][0]) ** 2 + (coordinates[i][1] - coordinates[j][1]) ** 2 for i, j in\n                  ((i, j) for i in range(N) for j in range(N) if i!= j))\n    ) for _ in range(N * (N - 1) // 2)\n) / (N * (N - 1) // 2)\n\nprint(round(average, 6))\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n0 0\n1 0\n0 1''') == '2.0'\nprint(solution('''3\n0 0\n1 0\n0 1'''), '2.0')\nassert solution('''3\n0 0\n0 0\n0 0''') == '2.0'\nprint(solution('''3\n0 0\n0 0\n0 0'''), '2.0')\n\nassert solution('''8\n0 0\n1000 0\n1000 1000\n0 1000\n1000 1000\n1000 0\n0 1000\n0 0\n0 0''') == '8.0'\nprint(solution('''8\n0 0\n1000 0\n1000 1000\n0 1000\n1000 1000\n1000 0\n0 1000\n0 0\n0 0'''), '8.0')\n\nassert solution('''8\n0 0\n-1000 0\n1000 -1000\n0 1000\n1000 1000\n1000 0\n0 1000\n0 0\n0 0''') == '8.0'\nprint(solution('''8\n0 0\n-1000 0\n1000 -1000\n0 1000\n1000 1000\n1000 0\n0 1000\n0 0\n0 0'''), '8.0')\n\nassert solution('''2\n0 0\n0 1''') == '1.4142135623730951'\nprint(solution('''2\n0 0\n0 1'''), '1.4142135623730951')\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n0 0\\n1 0\\n0 1\\n') == '2.2761423749'\n\"\"\"\n\nimport sys\nimport math\n\nassert len(sys.argv) >= 2\nfor arg in sys.argv[1:]:\n    print(arg)"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n0 0\\n1 0\\n0 1') == '2.2761423749'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('12 4') == '4'\n\"\"\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''12 4''') == '4'\nassert solution('''4 4''') == '0'\nassert solution('''4 3''') == '0'\nassert solution('''1 1''') == '0'\n\n----\n\n\nimport math"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12 4') == '4'\n\"\"\"\n\nimport math\n\na, b = input().split(' ')\n\na, b = int(a), int(b)\n\nprint(math.ceil((a - b) / 2))\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12 4\\n') == '4', 'wrong result'\n\"\"\"\n\nA, B = [int(i) for i in input().split()]\nC = A-2*B\nprint(C)"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12 4\") == \"4\"\nassert solution(\"12 4\") == \"4\"\nassert solution(\"12 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12 4\\n') == '4'\n\"\"\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4') == '4'\n\nassert solution('10 10') == '0'\n\nassert solution('123 10') == '60'\n\nassert solution('1234 10') == '90'\n\nassert solution('1234 15') == '120'"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12 4\") == \"4\"\nassert solution(\"34 4\") == \"0\"\nassert solution(\"10 9\") == \"1\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12 4') == '4'\n\n--------------------------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10000\") == \"3\"\nprint(solution(\"10000\"))\n\"\"\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10000') == '3'\n\"\"\"\n\nimport math\nfrom typing import Generator\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"8\") == \"2\"\nassert solution(\"16\") == \"3\"\nassert solution(\"32\") == \"4\"\nassert solution(\"64\") == \"5\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10000') == 3\n\"\"\"\n\nfrom math import log10"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10000') == 3\n\"\"\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(10**10) == 3\nassert solution(10**11) == 5\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10000\") == 3\n\"\"\"\n\nn = int(stdin.readline())"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n2 1 3\\n4 2 5') == '3'\nassert solution('2 1\\n3 1') == '1'\nassert solution('2 2\\n2 1\\n1 2') == '1'\n\"\"\"\n\nn, m = input().split()\nm, k = map(int, n.split())\n\nd = {}\nfor i in range(m):\n    d[i+1] = list(map(int, input().split()[1:]))"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4\\n2 1 3\\n3 1 2 3') == '1'\nprint(solution(stdin))\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\\n2 3 2\") == '1'\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4\\n2 1 3\\n3 1 2 3') == '1'\nassert solution('3 4\\n2 3 2\\n2 3 2') == '0'\n\n-----Testing-----\nInput:\n3 4\n2 1 3\n3 1 2 3\n2 3 2\n\nOutput:\n1\n\nInput:\n1 10\n2 3\n3 4\n3 5\n3 6\n3 7\n4 8\n5 9\n6 10\n\nOutput:\n2\n\nInput:\n5 10\n2 1 3\n2 3 2\n2 4 2\n2 5 2\n2 6 2\n3 7 3\n4 8 3\n5 9 3\n6 10 3\n\nOutput:\n4\n\nInput:\n5 10\n2 1 3\n2 3 2\n2 4 2\n2 5 2\n2 6 2\n3 7 3\n4 8 3\n5 9 3\n6 10 3\n\nOutput:\n4\n\"\"\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 3 2 3\\n2 1 2\\n\") == \"1\"\n\"\"\"\n\n\n\"\"\"\nINPUT:\n4 5\n2 3 4 1 2\n2 3 2\n1 1 2 3\n1 1 1\n1 1 1 1\n\nOUTPUT:\n2\n\nExplanation:\nThe first 4 lines defines a 4x5 matrix. The numbers written in the matrix are the numbers of the food liked by each people.\nEach number is defined by three numbers, which are the numbers of the food.\nSo, if the first person likes 1st, 3rd and 2nd food, the matrix will be written as\n\n2 3 4 1 2\n2 3 2\n1 1 2 3\n1 1 1\n1 1 1\n\nFor the second person, the food he likes is 2nd, 3rd and 2nd food.\nSo, the matrix will be written as\n\n2 3 4 1 2\n2 3 2\n1 1 2 3\n1 1 1\n1 1 1\n\nThe numbers of liked foods for each person are:\n\n1st person: (1, 3, 2)\n2nd person: (2, 3, 2)\n3rd person: (1, 3, 2)\n4th person: (1, 3, 2)\n\nOnly 2 foods are liked by everyone, which are 2nd and 3rd food.\nSo the answer is 2\n\nNote: if you want to use numpy, you can import it as np and do np.sum(matrix, axis = 0)\n\"\"\"\n\nimport sys\n\nfoods = []\nfor i in range(4):\n    line = sys.stdin.readline().split()\n    foods.append([int(j) for j in line])\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == '1'"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == \"1\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 4\n2 1 3\n3 1 2 3''') == '1'\n\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'3 4\\n'\n'2 1 3\\n'\n'3 1 2 3\\n'\n'2 3 2\\n') == '1'\n\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\nfoods = dict()\nfor i in range(n):\n    a = int(sys.stdin.readline())\n    for j in range(a):\n        foods[j + 1] = 1\n\ns = set(foods.values())\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4\\n2 1 3\\n3 1 2 3\\n2 3 2') == '1'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n') == '0.5'\n\"\"\""
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n\") == \"0.5\"\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '0.5'\nassert solution('3') == '0.6666666666666666'\nassert solution('1') == '0.3333333333333333'\nassert solution('5') == '0.4'\n\"\"\"\n\nfrom fractions import Fraction"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1) == \"0.5\"\nassert solution(2) == \"0.8333333333333334\"\nassert solution(3) == \"0.6666666666666666\"\nassert solution(4) == \"0.5\"\nassert solution(5) == \"0.4\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n') == '0.5'\n\n-------\n\nGiven is an integer N. Takahashi chooses an integer a from the positive integers not greater than N with equal probability.\nFind the probability that a is odd.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint the probability that a is odd.\nYour output will be considered correct when its absolute or relative error from the judge's output is at most 10^{-6}.\n\n-----Sample Input-----\n4\n\n-----Sample Output-----\n0.5\n\nThere are four positive integers not greater than 4: 1, 2, 3, and 4. Among them, we have two odd numbers: 1 and 3. Thus, the answer is \\frac{2}{4} = 0.5.\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"4\\n\"\n) == \"0.5\\n\"\n\"\"\"\nfrom __future__ import print_function\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n\") == \"0.5\"\nassert solution(\"3\\n\") == \"0.6666666666\"\n\"\"\"\n\nN = int(stdin.readline().strip())\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '0.5'\nassert solution('1') == '0'\nassert solution('5') == '0.4'\n\"\"\"\n\n\"\"\"\nSolution 1:\nTo calculate probability of an event P(A) = P(A and B), P(A) = P(A and not B) = P(A and not B and C) = P(A and not B and not C) = P(A and not B and not C and D)\n= P(A and not B and not C and not D) = P(not A and B and C and D)\n= 1 - P(A and B and C and D)\n= 1 - P(not A and not B and C and D)\n= 1 - P(not A and not B and C and D)\n= 1 - P(not A and B and C and D)\n= 1 - P(A and B and C and D)\n= 1 - P(A and B and C)\n= 1 - P(A and B)\n= 1 - P(A)\n= 1 - 0.5\n= 0.5\n\"\"\"\n\n\"\"\"\nSolution 2:\nTo calculate probability of an event P(A) = P(A and B), P(A) = P(A and not B) = P(A and not B and C) = P(A and not B and not C) = P(A and not B and not C and D)\n= P(A and not B and not C and not D) = P(not A and B and C and D)\n= 1 - P(A and B and C and D)\n= 1 - P(A and B and C)\n= 1 - P(A and B)\n= 1 - 0.5\n= 0.5\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n\") == \"0.5\"\n\"\"\""
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n') == '0.5'\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == 2\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == 2\n\n------\n3\n1\n2 1\n1\n1 1\n1\n2 0\n\n------\n\n4\n1\n1\n1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n4\n1\n2 1\n1\n1 1\n1\n2 0\n\n-------\n4\n2\n1\n1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n4\n1\n2 1\n2\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n5\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n5\n1\n2 1\n2\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n5\n1\n1\n2 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n6\n1\n1\n2 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n6\n1\n2 1\n2\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n7\n1\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n7\n1\n1\n1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n7\n2\n1\n1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n8\n1\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n8\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n8\n1\n2 1\n2\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n8\n2\n1\n1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n8\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n8\n1\n2 1\n2\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n8\n1\n2 1\n2\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n8\n1\n1\n1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n8\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n9\n1\n1\n1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n9\n1\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n9\n1\n1\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n9\n1\n1\n1\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n9\n1\n1\n2 1\n2\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n10\n1\n1\n1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n10\n1\n1\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n10\n1\n1\n1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n10\n1\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n10\n1\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n10\n1\n2 1\n2\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n10\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n10\n1\n2 1\n2\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n10\n2\n1\n1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n11\n1\n1\n1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n11\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n11\n1\n2 1\n2\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n11\n1\n1\n1\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n11\n1\n1\n2 1\n2\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n12\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n12\n1\n1\n1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n12\n1\n1\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n12\n1\n1\n1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\nassert solution(\"4\\n2\\n1 0\\n2 1\\n2 1\\n2\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\n\"\"\"\n\nimport sys\n\nN = int(input())\nhonest_list = []\nunkind_list = []\nfor i in range(N):\n    if i == 0:\n        honest_list.append(list(map(int, sys.stdin.readline().split())))\n    elif i == N - 1:\n        unkind_list.append(list(map(int, sys.stdin.readline().split())))\n    else:\n        honest_list.append(list(map(int, sys.stdin.readline().split())))"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\") == \"2\"\nassert solution(\"6\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\") == \"2\"\nassert solution(\"7\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\\n7 1\") == \"2\"\nassert solution(\"8\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\\n7 1\\n8 1\") == \"3\"\nassert solution(\"9\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\\n7 1\\n8 1\\n9 1\") == \"3\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1\\n2 1\\n1\\n1\\n1\\n1\\n2 0\\n') == '2'\n\n---------------\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == '2'\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(solution.__doc__) == 'nikoandsolstice has a length of 15, which exceeds K=7.\\nWe should extract the first 7 characters in this string, append... to the end of them, and print the result nikoand....'\nprint(solution(stdin))"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nprint(\"Test 1 PASSED\")\nassert solution(\"kalendernikorsolstice\") == \"kalendernikor...\"\nprint(\"Test 2 PASSED\")\nassert solution(\"kalendernikorsolsticeaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"zoomlazapzo\") == \"zoomlazapzo\"\nassert solution(\"bricks\") == \"bricks\"\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7nikoandsolstice\") == \"nikoand...\"\nassert solution(\"5solstice\") == \"solstice\"\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\nassert solution('abracadabra') == 'abracadabra'\n\nprint(solution('nikoandsolstice'))\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"7\\nnikoandsolstice\"\n) == 'nikoand...'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"orange\") == \"oranges\"\nassert solution(\"banana\") == \"bananas\"\n\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    'apple'\n) == 'apples'\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('apple') == 'apples'\nassert solution('takne') == 'takneses'\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"atcoder\") == \"atcoders\"\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('z') == 'z'\nassert solution('0') == '0'\nassert solution('aa') == 'aa'\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a') == 'a'\nassert solution('aa') == 'aa'\nassert solution('aaa') == 'aaa'\nassert solution('aaaa') == 'aaaa'\nassert solution('aaaaa') == 'aaaaa'\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('apple') == 'apples'\n\"\"\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\\n\") == \"1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"3 2\\n2\\n1 3\\n1\\n3\"\n) == \"1\"\n\"\"\"\n\nimport sys\n\n_, K, *lines = sys.stdin.readlines()\nK = int(K)\nd = []\nsnacks = []\nfor i in range(K):\n    snacks.append(list(map(int, lines[i].split())))\n    d.append(len(snacks[i]))\n\ncurrent = -1\nfor i, snack in enumerate(snacks):\n    if not snack:\n        current = i\n        break\n\ncount = 0\nfor snack in snacks:\n    if snack == []:\n        count += 1\n\nsnakes = 0\nfor snack in snacks:\n    snakes += len(snack)"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\nassert solution('4 1\\n1\\n3\\n1\\n3') == '0'\n\"\"\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == 1\n\"\"\"\n\n\"\"\"\nTakahashi went to the Snuking Community and wrote a story about his adventures.\n\nThe Snuking Community consists of N Snukes and N Snacks.\n\nEvery Snuke lives in the same town and there is only one Snuke in the town for each Snack.\n\nTakahashi always goes to the Snuking Community to make mischief.\n\nWhenever Takahashi comes to the Snuking Community, the Snuke who has no snacks will fall victim to Takahashi's mischief.\n\nThere is only one Snuke who has the Snack, so it will always fall victim to Takahashi's mischief.\n\nTakahashi knows that N Snukes have Snacks 1, Snacks 2,..., Snacks N and every Snuke has only one Snack.\n\nGiven N Snukes' names, Snuking Community's name, Snacks' names, and the number of Snacks each Snuke has, print the number of Snukes who fall victim to Takahashi's mischief.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - 1 \\leq K \\leq 10^5\n - 1 \\leq Snacks_i \\leq 10^5\n - Snukes_i \\neq Snacks_i\n - 1 \\leq A_{i, 1} < \\cdots < A_{i, d_i} \\leq Snacks_i\n\n-----Input-----\nFirst line of the input contains a single integer N, 1 \\leq N \\leq 10^5.\n\nNext line contains a single string Snuking Community's name, 1 \\leq len(Snuking Community's name) \\leq 100.\n\nNext line contains a single string containing N space-separated integers Snacks' names, each of the strings is 1 \\leq len(Snack's name) \\leq 100.\n\nNext N lines contain a single integer d_i, 1 \\leq d_i \\leq N, and d_i space-separated integers A_{i, 1}, A_{i, 2}, \\cdots, A_{i, d_i}, 1 \\leq A_{i, j} \\leq Snacks_i.\n\n-----Output-----\nPrint a single integer, the number of Snukes who fall victim to Takahashi's mischief.\n\n-----Sample Input-----\n3\nSnuking Community\n1 2 3\n3\nA_1 A_2 A_3\n2\nA_1 1\nA_2 1\nA_3 1\n2\nA_1 1\nA_2 1\nA_3 2\n3\nA_1 1\nA_2 1\nA_3 1\n\n-----Sample Output-----\n1\n\n---Problem---\nSnuking Community consists of 3 Snukes and 3 Snacks.\n\nEvery Snuke lives in the same town and there is only one Snuke in the town for each Snack.\n\nEvery Snuke has only one Snack, so every Snuke will fall victim to Takahashi's mischief.\n\nTakahashi knows that N Snukes have Snacks 1, Snacks 2,..., Snacks N and every Snuke has only one Snack.\n\nGiven N Snukes' names, Snuking Community's name, Snacks' names, and the number of Snacks each Snuke has, print the number of Snukes who fall victim to Takahashi's mischief.\n\n------Solution------\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\"\n\nn, k = map(int, stdin.readline().strip().split(' '))\n\nsnakes = []\nfor i in range(n):\n    snakes.append(list(map(int, stdin.readline().strip().split(' '))))\n\nm = int(stdin.readline().strip())\n\nsnakes_chosen = []\n\nfor i in range(m):\n    snakes_chosen.append(list(map(int, stdin.readline().strip().split(' '))))\n\nvictims = [0] * n\n\nfor i in range(m):\n    snake = snakes_chosen[i][0] - 1\n    snack = snakes_chosen[i][1] - 1\n    victims[snake] += 1\n\nprint(sum(victims))\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\nassert solution('1 2\\n1\\n2') == '0'\nassert solution('2 2\\n1\\n1') == '0'\n\"\"\"\n\nimport sys\n\nn, k = [int(x) for x in sys.stdin.readline().strip().split()]\n\nsnake = [int(x) for x in sys.stdin.readline().strip().split()]\n\nsnake_set = set()\n\nfor i in snake:\n    snake_set.add(i)\n\nsnake_list = list(snake_set)\n\nsnake_list.sort()\n\nans = 0\nfor i in snake_list:\n    if i + 1 not in snake_set:\n        ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'a'\nassert solution('aab') == 'a'\nassert solution('aba') == 'a'\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected_output\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n\"\"\"\n\nimport sys\nimport re\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aabbbbaaca\") == 5\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/5526fc09a1bbd946250002dc/train/python\n\nslide 1\n\nNotes: \n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aabbbbaaca') == '5'\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('A') == 'A'\nassert solution('AA') == 'A'\nassert solution('AAB') == 'AB'\nassert solution('AABB') == 'AB'\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abbbbaaca\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5 2 4\") == 3\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\"\n\nimport math\n\nn = int(stdin.readline().rstrip())\na = list(map(int, stdin.readline().rstrip().split(\" \")))\n\ns = sum(a)\ni = 1\nwhile i <= n:\n    if (s % i == 0) and (i % 2 == 0 or i % 3 == 0):\n        s = s / i\n        n = n - 1\n        i = 1\n    i = i + 1\n\nprint(math.floor(s))\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3\n5 2 4\n''') == '3'\n\n\"\"\"\n\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 4\") == 3\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''3\n5 2 4\n'''\n) == '3'\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n5 2 4') == '3'\nassert solution('2\\n3 5 6') == '1'\nassert solution('4\\n1 2 3 4') == '0'\nassert solution('2\\n3 4 6') == '0'\n\"\"\"\nimport sys\nfrom typing import List, Dict, Union, Tuple\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n5 2 4') == '3'\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"3\\n2\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 4\") == \"3\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = [0] * n\nfor i in range(n):\n    b[i] = a[i] % 3\nprint(b.count(0))"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\nprint('All tests passed.')\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"100 100 100 100\") == \"100\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1 3\") == \"2\"\nassert solution(\"2 1 1 3\") == \"2\"\nassert solution(\"2 2 1 3\") == \"3\"\nassert solution(\"2 1 2 3\") == \"5\"\nassert solution(\"2 1 1 3\") == \"2\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\n\"\"\"\n\nfrom typing import List\nfrom sys import stdin\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 3\") == \"2\"\nassert solution(\"1 2 1 3\") == \"3\"\nassert solution(\"1 1 2 3\") == \"3\"\nassert solution(\"1 2 1 3\") == \"3\"\nassert solution(\"1 1 2 3\") == \"3\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 1 3') == '2'\n\n\"\"\"\nimport re"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 3\") == \"2\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"1 2 3 4\") == \"3\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 3\") == \"2\"\n\nassert solution(\"2 1 1 3\") == \"3\"\n\nassert solution(\"3 1 1 3\") == \"3\"\n\nassert solution(\"1 2 1 3\") == \"3\"\n\nassert solution(\"2 1 3 1\") == \"2\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"10 10\") == \"No\"\n\n----\n\n\nFind the smallest positive number that is evenly divisible by all of the numbers from 1 to 20.\n\n-----Constraints-----\n - 20 \\leq X \\leq 100\n - 1 \\leq Y \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nX Y\n\n-----Output-----\nPrint the smallest positive number that is evenly divisible by all of the numbers from 1 to 20.\n\n-----Sample Input-----\n6 20\n\n-----Sample Output-----\n360\n\nThe smallest positive number that is evenly divisible by all of the numbers from 1 to 20 is 360.\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"No\"\nassert solution(\"5 4\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 8\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"4 8\") == \"No\"\nassert solution(\"2 2\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 8\\n\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 8\\n') == 'Yes'\nassert solution('3 2\\n') == 'No'\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"No\"\nassert solution(\"3 4\") == \"Yes\"\nassert solution(\"3 3\") == \"No\"\n\"\"\"\n\nX, Y = [int(i) for i in input().split()]"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 8\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 8') == 'Yes'\nassert solution('2 1') == 'No'\nassert solution('1 5') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == \"2\"\n\"\"\"\n\nN, M = [int(s) for s in input().split()]\n\ngraph = {}\n\nfor i in range(M):\n    edge = input().split()\n    if edge[0] not in graph:\n        graph[edge[0]] = [edge[1]]\n    else:\n        graph[edge[0]].append(edge[1])\n    if edge[1] not in graph:\n        graph[edge[1]] = [edge[0]]\n    else:\n        graph[edge[1]].append(edge[0])"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"4 3\\n1 3\\n1 2\\n2 3\\n1 2\") == \"2\"\n\n\"\"\"\n\nclass Solution:\n    # Solution 1\n    \"\"\"\n    Time Complexity : O(2^N)\n    Space Complexity : O(N)\n    \"\"\"\n    def __init__(self):\n        self.visited = set()\n\n    def DFS(self, i):\n        if i not in self.visited:\n            self.visited.add(i)\n        for j in range(N):\n            if self.g[i][j] == 1 and j not in self.visited:\n                self.DFS(j)\n\n    def countPaths(self, n):\n        self.g = [ [0]*n for _ in range(n) ]\n        for u, v in edges:\n            self.g[u-1][v-1] = 1\n            self.g[v-1][u-1] = 1\n        for i in range(n):\n            self.DFS(i)\n        return len(self.visited)\n\n\n    # Solution 2\n    \"\"\"\n    Time Complexity : O(M*2^N)\n    Space Complexity : O(N)\n    \"\"\"\n    def __init__(self):\n        self.visited = set()\n\n    def DFS(self, i, c):\n        if c in self.visited:\n            return\n        self.visited.add(c)\n        for j in range(N):\n            if self.g[i][j] == 1 and c == 0:\n                self.DFS(j, 1)\n\n    def countPaths(self, n):\n        self.g = [ [0]*n for _ in range(n) ]\n        for u, v in edges:\n            self.g[u-1][v-1] = 1\n            self.g[v-1][u-1] = 1\n        for i in range(n):\n            self.DFS(i, 0)\n        return len(self.visited)"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 3\") == \"2\"\n\"\"\"\n\nimport sys\nimport unittest\n\n\nclass Solution:\n    \"\"\"Class that contains solution to the problem\"\"\"\n\n    def __init__(self):\n        \"\"\"Initializes instance variables\"\"\"\n        pass\n\n    def get_number_of_paths(self, num_vertices: int, edges: list) -> int:\n        \"\"\"Returns number of paths starting from vertex 1 that visit all vertices exactly once\n\n        Args:\n            num_vertices: integer that represents number of vertices\n            edges: list of tuples that represent edges\n\n        Returns:\n            int: number of paths\n        \"\"\"\n\n        number_of_paths = 0\n\n        # iterate over all edges\n        for edge in edges:\n            # get start and end vertices\n            start, end = edge[0] - 1, edge[1] - 1\n\n            # store start vertices in set if not in set, otherwise increment number of paths\n            if start in self.vertices:\n                self.vertices[start] += 1\n            else:\n                self.vertices[start] = 1\n            \n            # if end vertex is not in set, then path is valid and increment number of paths\n            if end not in self.vertices:\n                number_of_paths += 1\n\n        return number_of_paths\n\n\nclass UnitTest(unittest.TestCase):\n    \"\"\"Unit test class\"\"\"\n\n    def test_get_number_of_paths(self):\n        \"\"\"Test get_number_of_paths method\"\"\"\n\n        solution = Solution()\n\n        self.assertEqual(2, solution.get_number_of_paths(3, [(1, 2), (1, 3), (2, 3)]))\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n1 4\\n2 4\") == 2\n\"\"\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2\\n1 3\\n2 3\\n3 1\\n3 4\") == \"2\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"3 3\n1 2\n1 3\n2 3\n\"\"\") == '2'\n\nassert solution(\n\"\"\"3 3\n1 2\n1 3\n2 3\n\"\"\") == '2'\n\nassert solution(\n\"\"\"3 3\n1 2\n1 3\n2 3\n\"\"\") == '2'\n\nassert solution(\n\"\"\"5 5\n1 2\n1 3\n2 3\n2 4\n2 5\n3 4\n3 5\n\"\"\") == '9'\n\nassert solution(\n\"\"\"5 5\n1 2\n1 3\n2 3\n2 4\n2 5\n3 4\n3 5\n\"\"\") == '9'"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == \"2\"\n\n-------"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1 2\\n1 3\\n2 3\\n') == '2'\nassert solution('4 3\\n1 2\\n2 3\\n') == '2'\nassert solution('4 3\\n1 2\\n3 4\\n') == '0'\nassert solution('4 4\\n1 2\\n3 4\\n') == '1'\nassert solution('4 4\\n1 2\\n3 4\\n') == '1'\n\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 2\\n1 3\\n2 3') == '2'\n\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 3\n1 2\n1 3\n2 3''') == '2'\nassert solution('''4 4\n1 2\n1 3\n2 3\n3 4''') == '2'\n\nassert solution('''4 4\n1 2\n1 3\n2 3\n3 4\n1 4''') == '1'\nassert solution('''8 7\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\n5 6\n6 7\n2 7\n3 7''') == '0'\n\nassert solution('''8 7\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\n5 6\n6 7\n1 7''') == '1'\n\n'''\nInput:\n    - stdin (stdout)\n    - A string (str) containing the input of the program.\nOutput:\n    - A string (str) containing the output of the program.\n'''"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n1 2 3 4 5\") == \"18\"\n\"\"\"\n\nfrom math import inf\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n\") == \"18\"\n\"\"\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"18\"\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2') == '18'\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"18\"\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n') == '18'\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n\") == \"18\"\n\"\"\"\n\nfrom sys import stdin\n\n\"\"\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n') == '18'\n\"\"\"\n\nN, L = [int(num) for num in stdin.split()]"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == '18'\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\") == \"5\"\nassert solution(\"10 1\") == \"13\"\nassert solution(\"100 1\") == \"101\"\nassert solution(\"200 1\") == \"201\"\nassert solution(\"100 100\") == \"1010\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('15\\n') == '60'\n\n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('15') == '60'\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n20\n\"\"\"\n) == \"30\"\nprint(\"All Test Cases Passed!\")\n\nassert solution(\n\"\"\"\n3\n\"\"\"\n) == \"6\"\nprint(\"All Test Cases Passed!\")\n\nassert solution(\n\"\"\"\n4\n\"\"\"\n) == \"10\"\nprint(\"All Test Cases Passed!\")\n\nassert solution(\n\"\"\"\n5\n\"\"\"\n) == \"16\"\nprint(\"All Test Cases Passed!\")\n\nassert solution(\n\"\"\"\n6\n\"\"\"\n) == \"22\"\nprint(\"All Test Cases Passed!\")"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"15\") == \"60\"\nprint(\"PASSED\")\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('15\\n') == '60'\n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"15\") == \"60\"\n\n'''\n\nfrom collections import deque"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('15') == '60'\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\n-----Explanation-----\nTest case:\n  X = 6\n  p_1 = 4, p_2 = 7, p_3 = 10, p_4 = 6, p_5 = 5\n  The only integers not contained in the sequence 4, 7, 10, 6, 5 are 3 and 8.\n  The integer 8 has the minimum absolute difference with X, so we print it.\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 7 10 6 5\") == 8\n\"\"\"\n\nx, n = list(map(int, stdin.split()))\nnums = list(map(int, stdin.split()))\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\nprint('Test: OK\\n')\n\n-----\nIf you\u2019ve done a lot of coding, you probably have no idea of the standard input and output format of challenges. It is no secret that a lot of beginners have this incomprehensible idea, too.\n\nIt\u2019s easy to overlook, but it is an important part of being a programmer. It is your job to convince yourself that things that look like strings in the input are strings, that things that look like numbers are numbers, and so on.\n\nThe input for this problem is read from the console.\n\nThe first line contains integers X and N, X being the number to which the nearest integer should be found and N being the length of the sequence.\n\nNext, N lines contain the integers p_1, \\ldots, p_N (p_i is not necessarily positive).\n\nAfter that, there is one more line containing the integer X, which is the number to which the nearest integer should be found.\n\nFinally, there is one last line containing N integers not contained in the sequence p_1, \\ldots, p_N.\n\nIf there are multiple such integers, print the smallest such integer.\n\nOutput Format\nOn the console output, print the integer nearest to X, that is, the integer whose absolute difference with X is the minimum.\n\nSample Input\n6 5\n4 7 10 6 5\n8\n\nSample Output\n8\n\"\"\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"\n\"\"\"\n\nX, N = map(int, input().split())\np = [int(i) for i in input().split()]\na = [abs(X - i) for i in p]\nprint(min(a))\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"\nimport math\n\nX, N = map(int, input().split())\nnums = list(map(int, input().split()))\n\nnums.sort()\n\nleft, right = 0, len(nums)\nwhile left < right:\n    mid = left + math.floor((right - left) / 2)\n    if nums[mid] < X:\n        left = mid + 1\n    elif nums[mid] > X:\n        right = mid\n    else:\n        left = mid\n\nleft, right = 0, len(nums)\nwhile left < right:\n    mid = left + math.floor((right - left) / 2)\n    if nums[mid] < X:\n        left = mid + 1\n    elif nums[mid] > X:\n        right = mid\n    else:\n        right = mid"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n4 7 10 6 5\") == \"8\"\nprint('PASSED')\n\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n2 1\") == 1\n\"\"\"\n\nfrom utils.test import Test"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n2 1') == '1'\n\n---------------------------------------"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 2\n2 1''') == '1'\n\nassert solution('''3 2\n1 2''') == '0'\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\"\n\nimport sys\nimport math\nfrom collections import defaultdict\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 2\n2 1''') == \"1\"\nassert solution('''5 5\n2 2\n1 4\n2 3\n3 2\n4 1''') == \"0\"\n\n\"\"\"\n\nH, W = map(int, input().split())\nrow_col = []\nfor _ in range(H):\n    row_col.append(list(map(int, input().split())))"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n2 1') == '1'\nassert solution('3 3\\n3 2') == '4'\nassert solution('3 2\\n1 1') == '1'\nassert solution('3 2\\n1 2') == '0'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\n\"\"\"\nimport sys\nimport os\nimport time\n\n_input = sys.stdin.readlines()\nn, k = list(map(int, _input[0].split()))\n_input = list(map(int, _input[1].split()))"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == '6'\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\n\"\"\"\n\nfrom math import ceil\nimport sys\n\nn, k = map(int, input().strip().split())\narr = list(map(int, input().strip().split()))\n\npos = 0\nfor i in range(n):\n    if arr[i] <= k:\n        k -= arr[i]\n    else:\n        pos = i + 1\n        break"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == '6'\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == '-1'\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2\\n3 7 5 1 10 3 20\") == '6'\nassert solution(\"7 4\\n3 7 5 1 10 3 20\") == '6'\n\n\"\"\"\n\nimport sys\n\nlines = sys.stdin.readlines()\nline = lines[0].split()\nN, K = int(line[0]), int(line[1])\nsequence = list(map(int, lines[1].split()))\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2 3 7 5 1 10 3 20\") == \"1\"\nassert solution(\"7 3 7 5 1 10 3 20\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 7 5 1 10 3 20') == '6'\nassert solution('3 7 5 1 10 3 20') == '6'\nassert solution('3 7 5 1 10 3 20') == '6'\nassert solution('3 7 5 1 10 3 20') == '6'\nassert solution('3 7 5 1 10 3 20') == '6'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n') == '3\\n3 4 1\\n3 5 2\\n3 5 1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\n.*...\\n.*..\\n****') == '3\\n2 2 1\\n3 3 1'\nassert solution('3 3\\n.*...\\n.*..\\n.*..') == '-1'\nassert solution('5 5\\n.*...\\n.*..\\n.*...\\n.*...') == '-1'\n\"\"\""
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n.*\\n.*\") == \"3\\n1 2 1\"\nassert solution(\"3 2\\n.*\\n.*\") == \"3\\n1 2 1\"\nassert solution(\"3 2\\n.*\\n.*\") == \"3\\n1 2 1\"\nassert solution(\"3 2\\n.*\\n.*\") == \"3\\n1 2 1\"\nassert solution(\"3 2\\n.*\\n.*\") == \"3\\n1 2 1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3') == '-1'\nassert solution('5 5') == '-1'\nassert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....') == '3\\n2 2 1\\n3 3 1\\n3 4 1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\n\"\"\""
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\".*...\\n.*...\\n..****\\n...**.\\n....*\\n........\\n\") == \"3\\n3 4 1\\n3 5 2\"\nassert solution(\".....\\n....*\\n.****\\n****.\\n*****\\n.....\") == \"-1\""
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n.*\\n.*\\n.*\") == \"3\\n2 2 1\"\nassert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\"\nassert solution(\"5 5\\n.*...\\n.*..\\n.*..\\n.*..\\n.*..\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"5 5\\n.*...\\n.*..\\n.*..\\n.*..\\n.*..\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"5 5\\n.*...\\n.*..\\n.*..\\n.*..\\n.*..\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"-1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"\n\nassert solution(\"3 3\\n.*\\n.*\\n.*\") == \"1\"\nassert solution(\"3 3\\n.*\\n***\\n.*\") == \"1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\".*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.*...\\n.*...\\n.....\\n\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\\n\") == \"-1\"\n\n[[\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\\n\"],\n[\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\\n\"],\n[\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\\n\"]]\n\n\"\"\"\nfrom typing import List\n\nfrom utils import read_input\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"3 3\\n.**\\n.*.\\n.*.\") == \"-1\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('good') == 0\nassert solution('bad') == 1\nassert solution('aa') == 1\nassert solution('aabc') == 2\n\nassert solution(stdin) == 2\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aaa\") == \"def\"\nassert solution(\"aabc\") == \"ab\"\nassert solution(\"abc\") == \"\"\nassert solution(\"aab\") == \"a\"\nassert solution(\"a\") == \"a\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abcd') == 'abc'\nassert solution('abc') == 'abc'\nassert solution('aaaa') == 'aa'\nassert solution('aaa') == 'aa'\nassert solution('abac') == 'ab'\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(good) == 0\nassert solution(string) == 2\nassert solution(xyyx) == 3\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aaa\") == \"abc\"\nassert solution(\"aab\") == \"ab\"\n\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aabc') == 'ab'\n\nassert solution('aaa') == '3'\n\nassert solution('ab') == '1'\n\nassert solution('b') == '0'\n\nassert solution('bb') == '1'"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a\") == \"\"\nassert solution(\"aab\") == \"a\"\nassert solution(\"aa\") == \"\"\nassert solution(\"aabc\") == \"a\"\nassert solution(\"aabca\") == \"aab\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(good) == \"0\"\nassert solution(string) == \"string\"\nassert solution(aabc) == \"2\"\nassert solution(aaa) == \"3\"\n\"\"\""
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aaa') == 'aba'\nassert solution('aabc') == 'ab'\nassert solution('xyyxy') == 'x'\n\"\"\"\n\ns = input()\ni = 0\ngood = 0\nwhile i < len(s):\n    if i == 0:\n        if s[i] == s[i + 1]:\n            good += 1\n    elif i == len(s) - 1:\n        if s[i] == s[i - 1]:\n            good += 1\n    else:\n        if s[i] == s[i - 1] or s[i] == s[i + 1]:\n            good += 1\n    i += 1\nprint(good)\ns = s[good:]\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aaa\") == \"ab\"\nassert solution(\"aaaa\") == \"ab\"\nassert solution(\"aaaaa\") == \"ab\"\nassert solution(\"aaaaaa\") == \"ab\"\nassert solution(\"aaaaaaa\") == \"ab\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('\\n') == '\\n'\n\"\"\"\n\n\nfrom collections import defaultdict, Counter\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n1 2\\n2 3\\n3 1\\n3 4\") == \"NO\"\nassert solution(\"5 8\\n1 2\\n1 3\\n2 4\\n3 4\\n5 4\") == \"YES\"\nassert solution(\"6 8\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\\n5 4\") == \"YES\"\nassert solution(\"1 1\\n2 3\") == \"NO\"\nassert solution(\"3 2\\n1 2\\n2 3\") == \"NO\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n6 5\n1 5\n2 1\n1 4\n3 1\n6 1\n''') == 'YES\\n10100'\n\n-----\n\n@ Cool feature: now I can print the test string to the console in order to verify correctness of my solution!\n\nprint(solution(stdin))\n\n-----\n\nAnd here are some more hints:\n\nUse the function `sys.setrecursionlimit(10 ** 6)` to increase the recursion limit of your system, if you meet a maximum recursion error.\n\nThe `networkx` library can also be helpful.\n\n'''\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 8\\n1 2\\n2 3\\n2 4\\n4 5\\n5 6\\n3 6\\n3 7') == '10100'\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2\\n1 2\\n2 3\") == \"100\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\") == \"10101\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\") == \"101010\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\") == \"10101010\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\") == \"1010101010\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin_lines[0]) == stdout_lines[0]\n\"\"\""
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 3\\n1 2\\n2 3\\n1 3\") == \"YES\\n101\"\nassert solution(\"4 2\\n1 3\\n2 3\") == \"NO\"\nassert solution(\"7 8\\n1 7\\n3 6\\n4 5\\n5 7\\n1 2\\n2 3\\n3 4\\n4 6\\n6 7\\n1 4\") == \"YES\\n101100101010\"\nassert solution(\"3 2\\n1 2\\n2 3\") == \"NO\"\nassert solution(\"6 4\\n2 3\\n4 1\\n1 2\\n2 5\\n1 4\\n1 5\\n2 3\\n1 4\") == \"NO\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6\\n1 3\\n2 3\\n3 4\\n1 4\\n2 5\\n1 5\\n5 2\\n5 3\\n5 4\") == \"YES\\n10101\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == \"YES\\n10100\"\nassert solution(\"5 3\\n1 2\\n2 3\\n1 4\") == \"NO\"\nassert solution(\"3 2\\n1 2\\n1 3\") == \"YES\\n11\"\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == \"YES\\n10100\"\nassert solution(\"7 9\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\") == \"NO\"\nassert solution(\"8 5\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n2 3\\n2 4\\n2 5\\n2 6\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\") == \"YES\\n11010\"\nassert solution(\"8 5\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n2 3\\n2 4\\n2 5\\n2 6\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\") == \"YES\\n11010\"\n\"\"\"\n\nfrom collections import deque\n\nimport sys\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 5\n2 2\n1 2\n5 5\n\"\"\") == '2\n3 4'\n\nassert solution(\"\"\"\n1 7\n1 7\n\"\"\") == '0'\n\n\"\"\"\n\nYou are given a set of n intervals on the real line.\n\nWrite a function that returns the maximum number of intervals that are covered by intervals on the real line. That is, if the intervals [a1, b1] and [a2, b2] overlap, then they cover the entire interval [a1, b1] or [a2, b2]. The intervals are said to overlap if they share a common point.\n\nFor example, given intervals [(1, 4), (7, 10), (3, 6)], the function should return 3, since the intervals [(1, 4), (3, 6), (7, 10)] cover the entire interval [1, 10].\n\nGiven intervals [(1, 4), (7, 10), (3, 5)], the function should return 2, since the intervals [(1, 4), (3, 5)] and [(3, 5), (7, 10)] overlap and cover the entire interval [3, 10].\n\nGiven intervals [(1, 4), (6, 7)], the function should return 1, since [(1, 4)] and [(6, 7)] overlap, covering the entire interval [1, 4] and [6, 7].\n\nWrite an efficient algorithm for the following assumptions:\n\nintervals is an array of intervals sorted by their start time;\nn is an integer (n \u2264 intervals.length)."
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n1 2\\n3 4\\n4 5\\n5 6\\n3 7\\n7 7\\n7 7\") == \"0\\n1\\n3\\n4\\n6\"\nassert solution(\"1 7\\n1 7\") == \"0\\n\"\n\nassert solution(\"2 5\\n5 5\\n1 7\") == \"1\\n6\\n\"\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"0\\n0\\n1\\n2\"\nassert solution(\"1 7\\n1 7\\n\") == \"0\\n\""
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5\\n2 2\\n1 2\\n5 5') == '2\\n3 4'\nassert solution('1 7\\n1 7') == '0'\n\nassert solution('3 5\\n2 2\\n1 2\\n5 5') == '2\\n3 4'\nassert solution('1 7\\n1 7') == '0'\n\nassert solution('3 5\\n2 2\\n1 2\\n5 5') == '2\\n3 4'\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\nassert solution(\"1 7\\n2 2\\n1 2\") == \"0\"\nassert solution(\"1 7\\n2 2\\n2 2\\n1 2\") == \"0\"\nassert solution(\"1 7\\n2 2\\n1 2\\n2 2\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\nassert solution(\"1 7\\n1 7\\n1 7\") == \"\"\nassert solution(\"1 7\\n1 7\\n1 7\\n1 7\") == \"0\"\n\n\"\"\"\n\nimport sys\nimport collections\nimport functools\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\") == \"0\"\nassert solution(\"1 7\") == \"0\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"5 5\") == \"0\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 9 2 3') == '2'\nassert solution('1 9 2 3') == '0'\nassert solution('4 6 2 3') == '1'\nassert solution('4 9 6 3') == '0'\nassert solution('1 9 6 3') == '1'\n\"\"\"\n\nA, B, C, D = input().split()\n\nprint(sum(x for x in range(int(A), int(B) + 1) if x % C!= 0 and x % D!= 0))\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 9 2 3') == 2\nassert solution('1 2 2 3') == 0\nassert solution('4 9 2 1') == 4\n\"\"\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 9 2 3') == '2'\nassert solution('4 9 2 4') == '0'\nassert solution('1 5 8 10') == '3'\n\"\"\"\n\nA, B, C, D = map(int, stdin.read().split())\nprint(sum(a % c!= 0 and a % d == 0 for a in range(A, B + 1)))\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 9 2 3') == '2'"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input) == expected_result, 'Not implemented'\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 9 2 3') == 2\n\"\"\"\nimport sys"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(result)\nprint(\"OK\")\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 9 2 3') == '2'\n\"\"\"\n\na, b, c, d = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"0\") == \"No\"\nassert solution(\"12222222222222222222\") == \"No\"\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"23456\") == \"No\"\nassert solution(\"34567\") == \"No\"\nassert solution(\"45678\") == \"Yes\"\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"1234\") == \"No\"\nassert solution(\"12345\") == \"No\"\nassert solution(\"123456\") == \"No\"\nassert solution(\"1234567\") == \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(123456789) == \"Yes\"\n\n-------Solution--------"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(123456789) == \"Yes\"\nassert solution(123) == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('123456789') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(123456789) == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('127') == '4'\n\"\"\"\n\n\"\"\"\n-----idea-----\n\u7d04\u6570: \n\u7d04\u6570\u5171\u8d77\u7684\u7b87\u6240:\n\u7d04\u6570\u5171\u8d77:\nN * N\n=\nN\n * (N-1)\n + N\n * (N-2)\n +...\n + 1\n\n1 1 1 1 1 1 1 1 1 1 1\n1 1 2 3 6 10 15 21 28 36 45 54\n1 1 2 3 6 9 15 21 28 36 45 54...\n\n\u7d04\u6570: \u6307\u4e00\u500b\u6574\u6578\uff0c\u88ab\u6b64\u6574\u6578\u8207\u5c0d\u61c9\u7684\u5076\u6578\u516c\u500d\u6578\u76f8\u52a0\uff0c\u4e0d\u5305\u542b\u81ea\u5df1\n\u7d04\u6578\u5171\u8d77: \u6307\u4e00\u500b\u6574\u6578\uff0c\u88ab\u6b64\u6574\u6578\u8207\u5c0d\u61c9\u7684\u5076\u6578\u516c\u500d\u6578\u76f8\u52a0\uff0c\u4e0d\u5305\u542b\u81ea\u5df1\uff0c\u53ef\u4ee5\u88ab\u67d0\u6574\u6578\u8207\u6b64\u6574\u6578\u7684\u5076\u6578\u516c\u500d\u6578\u76f8\u52a0\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"12\") == \"3\"\nassert solution(\"127\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('127') == '4'\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"127\") == \"4\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"Yes\"\nassert solution(\"a\") == \"No\"\nassert solution(\"aa\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('kyoto') == 'Yes'\nassert solution('tokyo') == 'Yes'\n\"\"\"\n\ns1 = stdin.split('\\n')[0]\ns2 = stdin.split('\\n')[1]"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"xyxz\") == \"Yes\"\nassert solution(\"ab\") == \"No\"\nassert solution(\"a\") == \"Yes\"\nassert solution(\"abcdefgh\") == \"No\"\nassert solution(\"cba\") == \"Yes\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aab\") == \"aba\"\nassert solution(\"aba\") == \"aab\"\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abc\") == \"cba\"\nassert solution(\"abcdefg\") == \"gabcdef\"\nassert solution(\"abcdef\") == \"fabcde\"\nassert solution(\"1234567\") == \"7654321\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"zyxwvutsrqponmlkjihgfedcba\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('kyoto') == 'tokyo'\nassert solution('tokyo') == 'kyoto'\n\"\"\"\n\nS, T = input().split()"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a') == 'a'\nassert solution('a b') == 'b a'\nassert solution('a b c') == 'c b a'\nassert solution('a b c d') == 'd c b a'\nassert solution('a b c d e') == 'e d c b a'\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('kyoto') == 'tokyo'\nassert solution('tokyo') == 'kyoto'\nassert solution('akindofar') == 'kindfar'\nassert solution('a') == 'a'\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('kyoto') == 'tokyo'\nassert solution('tokyo') == 'kyoto'\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"Yes\"\nassert solution(\"japan\") == \"No\"\n\n----\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('cabacc') == 1\n\"\"\"\n\ns = input()\nt = input()\nmin_changes = len(t)\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        tmp_changes = 0\n        for j in range(len(t)):\n            if s[i+j] == t[j]:\n                tmp_changes += 1\n        min_changes = min(min_changes, tmp_changes)\n\nprint(min_changes)\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('cabacc') == '1'\n\"\"\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('cabacc') == '1'\nassert solution('abc') == '0'\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abc\") == \"1\"\nassert solution(\"cabacc\") == \"1\"\nassert solution(\"aaa\") == \"0\"\nassert solution(\"abccc\") == \"1\"\nassert solution(\"ddd\") == \"3\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"cabacc\") == 1\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('cabacc') == '1'\nassert solution('abc') == '0'\nassert solution('aaaaaaaaaa') == '0'\nassert solution('aaaaaaaa') == '0'\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"cabacc\") == 1\nassert solution(\"abc\") == 0\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"cabacc\") == \"1\"\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(T) == P\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abc') == '0'\nassert solution('aabc') == '1'\nassert solution('abca') == '0'\nassert solution('abbcc') == '2'\nassert solution('abcab') == '0'\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 12 2\\n') == '2'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 12 2\") == \"2\"\n\"\"\"\n\nA, B, K = map(int, input().split())\n\nlst = [a for a in range(1, min(A, B) + 1) if A % a == 0 and B % a == 0]\nprint(lst[K - 1])\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 8 2') == '2'\nassert solution('1 1 1') == '1'\nassert solution('5 9 3') == '3'\nassert solution('2 3 9') == '9'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 12 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 20 3\") == \"2\"\nassert solution(\"12 3 1\") == \"2\"\nassert solution(\"8 12 2\") == \"2\"\n\"\"\"\n\nfrom sys import stdin\nfrom math import gcd"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(a_b_k_input) == solution_output\nprint(\"Successfully solved.\")\n\n-----Problem-----\n\nIf you don't know how to start solving this problem,\ngo back and work on that later.\n\n-----Solution-----\n\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 12 2') == '2'\n\"\"\"\n\n\"\"\"\nThe divisor of A and B is written as the largest integer d that\ndivides both A and B, i.e., d = A/B.\n\nIt is also possible to find the divisor of A and B as the greatest common\ndivisor of A and B (GCD).\n\nFind the GCD of A and B, then find the K-th largest among d and GCD.\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 12 2\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('A') == ''\nassert solution('A ') == ''\nassert solution('A   ') == ''\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 5 3\") == \"2\"\nassert solution(\"4 2 1\") == \"1\"\n\n\"\"\"\n\nimport heapq\nimport sys\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1024') == '2020'\n\"\"\"\n\n\"\"\"\nI have not tested this solution, but I believe it works.\nThis solution splits the string into the number of coins, and then uses a greedy approach to add up the maximum happiness points you can earn.\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('2') == '5'\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"512\") == \"2560\"\nassert solution(\"2048\") == \"8192\"\nassert solution(\"1024\") == \"2048\"\nassert solution(\"1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1024\") == \"2020\"\nprint(solution(\"1024\"))\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1025\") == \"2050\"\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1024') == '2020'\n\"\"\"\n\nx = int(stdin.readline().strip())\n\ncount = 0\n\nwhile x > 0:\n    if x >= 500:\n        x -= 500\n        count += 1\n    elif x >= 100:\n        x -= 100\n        count += 1\n    elif x >= 50:\n        x -= 50\n        count += 1\n    elif x >= 10:\n        x -= 10\n        count += 1\n    elif x >= 5:\n        x -= 5\n        count += 1\n    else:\n        x -= 1\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1024') == '2020'\n\"\"\"\n\nx = int(input())"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 4\") == 5\n\"\"\"\n\nimport math"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 4\") == \"5\"\nassert solution(\"3\\n1 10 2 30\") == \"60\"\n\"\"\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4 3 2 1\") == \"12\"\nassert solution(\"1 4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 4\") == 5\n\"\"\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1') == '2'\nassert solution('2 4') == '5'\nassert solution('5 1 3 5 6') == '11'\n\nprint(solution(stdin.rstrip('\\n')))\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 2 4 1') == '12', 'Test 1'\nassert solution('3\\n1 1 1') == '2', 'Test 2'\nassert solution('2\\n2 1') == '2', 'Test 3'\n\"\"\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2 4') == '5'\nassert solution('1 1 1') == '0'\nassert solution('3 2 5') == '10'\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n1 4\") == 5\n\nimport sys\nlines = list(map(int, sys.stdin.readlines()))\nassert lines == [2, 1, 1, 4]\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n2\n1 4\n\"\"\"\n) == \"5\"\nprint(\"PASSED\")\n\n-----\n2\n1 4\n\"\"\"\n) == \"5\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 4') == '5'\nassert solution('4 1 5') == '10'\nassert solution('5 5 5 5') == '10'\n\n\"\"\"\nimport sys\nfrom math import ceil"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 10') == '3'\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 10\\n\") == \"3\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 10') == '3'\n\nassert solution('2 3') == '0'\n\nassert solution('1 1') == '0'\n\nassert solution('3 3') == '1'\n\nassert solution('3 4') == '0'"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 10\") == \"3\"\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 10\\n') == '3'\n\"\"\"\n\nA, B = input().split()\nA = int(A)\nB = int(B)"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10\") == 3\n\n-----\n1. Read the input.\n2. Take the first number as the number of sockets of the socket.\n3. Take the second number as the number of power strips.\n4. Use the formula to calculate the minimum number of power strips required.\n\n-----\n1. Read the input.\n2. Take the first number as the number of sockets of the socket.\n3. Take the second number as the number of power strips.\n4. Use the formula to calculate the minimum number of power strips required.\n5. Print the minimum number of power strips required.\n\na = int(stdin[0])\nb = int(stdin[1])\nprint(a + b - 1)\n-----\n1. Read the input.\n2. Take the first number as the number of sockets of the socket.\n3. Take the second number as the number of power strips.\n4. Use the formula to calculate the minimum number of power strips required.\n5. Print the minimum number of power strips required."
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 10') == 3\n\"\"\"\n\nA, B = [int(x) for x in stdin.split()]\n\ncnt = 0\nfor i in range(1, A+1):\n    for j in range(A, A-B, -1):\n        if i >= j:\n            break\n        cnt += 1\n\nprint(cnt)\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10\") == \"3\"\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10\") == \"3\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 10') == '3'\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('CSS') == '2'\nassert solution('CSR') == '0'\nassert solution('SCS') == '1'\nassert solution('CSR') == '1'\n\n---\nYou are given a partial code that is used for generating the HackerRank Logo of variable thickness.\nYour task is to replace the blank (______) with rjust, ljust or center.\n\nInput Format\n\nA single line containing the thickness value for the logo.\n\nConstraints\n\nThe thickness must be an odd number.\n\nOutput Format\n\nOutput the desired logo.\n\nSample Input\n\n5\n\nSample Output\n\n    H\n   HHH\n  HHHHH\n HHHHHHH\nHHHHHHHHH\n  HHHHH               HHHHH\n  HHHHH               HHHHH\n  HHHHH               HHHHH\n  HHHHH               HHHHH\n  HHHHH               HHHHH\n  HHHHH               HHHHH\n  HHHHHHHHHHHHHHHHHHHHHHHHH\n  HHHHHHHHHHHHHHHHHHHHHHHHH\n  HHHHHHHHHHHHHHHHHHHHHHHHH\n  HHHHH               HHHHH\n  HHHHH               HHHHH\n  HHHHH               HHHHH\n  HHHHH               HHHHH\n  HHHHH               HHHHH\n  HHHHH               HHHHH\n                    HHHHHHHHH\n                     HHHHHHH\n                      HHHHH\n                       HHH\n                        H\n\n'''\nimport math\nthickness = int(input())\nc = 'H'"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"CSS\") == 2\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"CS\") == '1'\nassert solution(\"CSS\") == '2'\nassert solution(\"CSR\") == '0'\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"CSS\") == 2\n\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('CSS') == 2\nassert solution('CSR') == 0\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"CSS\") == 2\nassert solution(\"CSR\") == 0"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"CSS\") == 2\n\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"CSS\") == 2\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"CSS\") == 2\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"CSS\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"5\\n1 3 5 4 2\"\n) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 2 4 3 1\") == \"2\"\nassert solution(\"1 3 5 4 2\") == \"0\"\nassert solution(\"1 2 3 5 4\") == \"0\"\nassert solution(\"10 9 8 7 6 5 4 3 2 1\") == \"1\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"0\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\nassert solution('8\\n4 6 3 7 5 1 2') == '3'\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 3 5 4 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 3 5 4 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 5 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\nprint('OK')\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"2\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"6.040\"\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\") == \"6.720\"\nprint(solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\"))"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"6.040\"\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\") == \"6.720\"\nprint(solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\"))\nprint(solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\"))\nprint(solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\"))\nprint(solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\"))\nprint(solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\"))"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\\n\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\\n\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\\n\") == \"6.040\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\\n\") == \"6.720\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\\n\") == \"6.720\"\n\"\"\""
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == '5.410'\n\"\"\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == '5.410'\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == '5.620'\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == '5.480'\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == '6.040'\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == '6.720'\n\"\"\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\\n\") == '5.410'\nprint(\"Passed!\")\n\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\\n\") == '5.620'\nprint(\"Passed!\")\n\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\\n\") == '5.480'\nprint(\"Passed!\")\n\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\\n\") == '6.720'\nprint(\"Passed!\")\n\"\"\""
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66') == '5.620'"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == '5.410'\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == '5.620'\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == '5.480'\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\") == '6.720'\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == '6.040'\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62') == '5.410'\nassert solution('5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66') == '5.620'\nassert solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76') == '5.480'\nassert solution('5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06') == '6.040'\nassert solution('8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92') == '6.720'\n\n\"\"\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n5\n2.26 1.44\n2.28 0.64\n2.30 -0.30\n1.58 0.66\n3.24 0.66\n''') == '5.610'\nassert solution('''\n8\n6.98 2.06\n6.40 1.12\n5.98 0.24\n5.54 -0.60\n7.16 0.30\n7.82 1.24\n8.34 0.24\n8.74 -0.76\n''') == '5.580'\nassert solution('''\n8\n16.94 2.42\n15.72 2.38\n14.82 1.58\n14.88 0.50\n15.76 -0.16\n16.86 -0.20\n17.00 0.88\n16.40 0.92\n''') == '6.040'\nassert solution('''\n7\n20.62 3.00\n21.06 2.28\n21.56 1.36\n21.66 0.56\n21.64 -0.52\n22.14 2.32\n22.62 3.04\n''') == '6.720'"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8') == '4'\nassert solution('7 10') == '2'\nassert solution('5 15') == '-1'\nassert solution('5 26') == '-1'\nassert solution('5 5 5 5 5') == '1'\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\\n\") == '4'\nassert solution(\"7 10\\n1 3 4 2 1 4 2\\n\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == '1'\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == '-1'\nassert solution(\"5 16\\n5 5 5 5 5\\n\") == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == '4'\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\") == '1'\nassert solution(\"5 26\\n5 5 5 5 5\") == '-1'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n1 3 4 2 1 4 2') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n\n'''\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 8\") == \"4\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 15\") == \"1\"\nassert solution(\"5 26\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 1 1 2\") == 4\nassert solution(\"7 10 5 5 5 5\") == 2\nassert solution(\"5 15 5 5 5\") == -1\nassert solution(\"5 26 5 5 5\") == -1\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\nassert solution(\"1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\") == \"1 1\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3\\n1 2 3 2 4 3 1') == '1 2 3'\nassert solution('10 4\\n1 3 1 3 10 3 7 7 12 3') == '7 3 1 3'\nassert solution('15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1') == '1 1'\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == '1 2 3'\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == '7 3 1 3'\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\") == '1 1'\n\"\"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\\n\") == \"1 2 3\\n\"\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\\n\") == \"7 3 1 3\\n\"\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\\n\") == \"1 1\\n\""
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\n\"\"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\nassert solution(\"10 4\") == \"7 3 1 3\"\nassert solution(\"15 2\") == \"1 1\"\nassert solution(\"4 4\") == \"1 1 1 1\"\nassert solution(\"5 6\") == \"1 1 1 1 1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 3 1 3 10 3 7 7 12 3\") == '7 3 1 3'\nassert solution(\"5 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\") == '1 1'\nassert solution(\"5 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\") == '1 1'\n\"\"\""
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\nassert solution(\"10 4\") == \"7 3 1 3\"\nassert solution(\"15 2\") == \"1 1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3\\n1 2 3 2 4 3 1') == '1 2 3'\nassert solution('10 4\\n1 3 1 3 10 3 7 7 12 3') == '7 3 1 3'\nassert solution('15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1') == '1 1'\n\"\"\"\n\n\nimport collections\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 2 3\\n10 3 7 3\") == \"0\"\n\"\"\"\n\nimport sys\nimport operator\n\nsys.stdin = open('test_files/Y13R5P1/A.in')"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n1\\n1\\n1') == 0\nassert solution('1\\n2\\n3\\n4\\n5') == 0\nassert solution('1\\n2\\n3\\n4\\n5\\n2\\n1\\n3\\n4\\n5') == 5\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1') == 0\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\n\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\n\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == '5'\nassert solution('2 4\\n1 2 3 4\\n10 3 7 3') == '0'\nassert solution('6 1\\n3\\n6\\n2\\n5\\n1\\n4') == '3'\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n\n\"\"\"\n\nimport collections\nimport heapq\n\n\nclass Cell:\n    def __init__(self, value, row_i):\n        self.value = value\n        self.row_i = row_i\n\n    def __repr__(self):\n        return f'<Cell value={self.value} row_i={self.row_i}>'\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == '5'\nassert solution('2 4\\n1 2 3 4\\n10 3 7 3') == '0'\nassert solution('6 1\\n3\\n6\\n2\\n5\\n1\\n4') == '3'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == '5'\nassert solution('2 4\\n1 2 3 4\\n10 3 7 3') == '0'\nassert solution('6 1\\n3\\n6\\n2\\n5\\n1\\n4') == '3'\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\\n\") == \"3\"\nassert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\\n\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"xxiixxxiixxxiixxxiixxx\") == \"1\"\nassert solution(\"xxxixxxixxxixxxixxxixxxi\") == \"8\"\nassert solution(\"xxxixxixxxiixxixxxiixx\") == \"8\"\nassert solution(\"xxxxxxiixxxiixxxiixxxi\") == \"8\"\nassert solution(\"xxxxxxixxxiixxixxxiixx\") == \"7\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"exxxii\") == 1\nassert solution(\"exxii\") == 0\nassert solution(\"exxx\") == 1\nassert solution(\"exx\") == 0\nassert solution(\"ex\") == 0\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"xxxxxxxxxx\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('xxxiii') == 1\nassert solution('xxoxx') == 0\nassert solution('xxxxxxxxxx') == 8\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"exxxii\") == \"exxii\"\nassert solution(\"xxxxx\") == \"0\"\nassert solution(\"xx\") == \"0\"\nassert solution(\"xxexxx\") == \"0\"\nassert solution(\"exx\") == \"0\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('xxxiii') == '1'\n\nassert solution('xxxxxx') == '0'\n\nassert solution('exxxii') == '1'\n\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('xaxx') == '1'\nassert solution('xxxxx') == '0'\nassert solution('xxxxxx') == '0'\nassert solution('exxxii') == '0'\nassert solution('xxiii') == '1'\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == 48\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '48'\nassert solution('1') == '1'\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n') == '48'\n\n\"\"\"\nimport math"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"48\"\nassert solution(\"10\") == \"645\"\nassert solution(\"3\") == \"12\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == 48\n\n-------"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1) == 3\nassert solution(2) == 16\nassert solution(3) == 36\nassert solution(4) == 48\nassert solution(5) == 60\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"48\"\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n') == '4'\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"48\"\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == 48\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5') == 'unsafe'\n\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3 4) =='safe'\nassert solution(4 6) == 'unsafe'\n\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\") == 'unsafe'\n\"\"\"\n\n\"\"\"\n1714. Check if One String Swap Can Make Strings Equal\n\nGiven two strings s1 and s2, return true if you can swap two letters in s1 so the result is equal to s2, otherwise, return false.\n\nSwapping letters is defined as taking two indices i and j (0-indexed) such that i!= j and swapping the characters at s1[i] and s1[j].\n\nFor example, swapping at indices 0 and 2 in \"abcd\" results in \"cbad\".\n\nExample 1:\n\nInput: s1 = \"ab\", s2 = \"ba\"\nOutput: true\nExplanation: You can swap s1[0] = 'a' and s1[1] = 'b' to get \"ba\", which is equal to s2.\nExample 2:\n\nInput: s1 = \"ab\", s2 = \"ab\"\nOutput: false\nExplanation: The only letters you can swap are s1[0] = 'a' and s1[1] = 'b', which results in \"ba\"!= s2.\nExample 3:\n\nInput: s1 = \"aa\", s2 = \"aa\"\nOutput: true\nExplanation: You can swap s1[0] = 'a' and s1[1] = 'a' to get \"aa\", which is equal to s2.\nExample 4:\n\nInput: s1 = \"aaaaaaabc\", s2 = \"aaaaaaacb\"\nOutput: true\nExample 5:\n\nInput: s1 = \"\", s2 = \"\"\nOutput: true\n \n\nConstraints:\n\n0 <= s1.length, s2.length <= 2 * 104\ns1 and s2 consist of lowercase English letters.\n\n\"\"\"\n\n\"\"\"\nGiven a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.\n\nNote:\n\nThe same word in the dictionary may be reused multiple times in the segmentation.\nYou may assume the dictionary does not contain duplicate words.\nExample 1:\n\nInput: s = \"leetcode\", wordDict = [\"leet\", \"code\"]\nOutput: true\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".\nExample 2:\n\nInput: s = \"applepenapple\", wordDict = [\"apple\", \"pen\"]\nOutput: true\nExplanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\n             Note that you are allowed to reuse a dictionary word.\nExample 3:\n\nInput: s = \"catsandog\", wordDict = [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"]\nOutput: false\n\n\"\"\"\n\n\nclass Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        for i in range(len(s) + 1):\n            for j in range(i + 1, len(s) + 1):\n                if dp[i] and s[i:j] in wordDict:\n                    dp[j] = True\n\n        return dp[len(s)]\n\n\n\"\"\"\n1715. Minimum Subsequence in Non-Increasing Order\n\nGiven the array nums, obtain a subsequence of the array whose sum of elements is strictly greater than the sum of the non included elements in such subsequence. \n\nIf there are multiple solutions, return the subsequence with minimum size and if there still exist multiple solutions, return the subsequence with the maximum total sum of all its elements. A subsequence of an array can be obtained by erasing some (possibly zero) elements from the array. \n\nNote that the solution with the given constraints is guaranteed to be unique. Also return the answer sorted in non-increasing order.\n\nExample 1:\n\nInput: nums = [4,3,10,9,8]\nOutput: [10,9] \nExplanation: The subsequences [10,9] and [10,8] are minimal such that the sum of their elements is strictly greater than the sum of elements not included, however, the subsequence [10,9] has the maximum total sum of its elements. \nExample 2:\n\nInput: nums = [4,4,7,6,7]\nOutput: [7,7,6] \nExplanation: The subsequence [7,7] has the sum of its elements equal to 14 which is not strictly greater than the sum of elements not included (14 = 4 + 4 + 6). Therefore, the subsequence [7,6,7] is the minimal satisfying the conditions. Note the subsequence has to returned in non-decreasing order.  \nExample 3:\n\nInput: nums = [6]\nOutput: [6]\n \n\nConstraints:\n\n1 <= nums.length <= 500\n1 <= nums[i] <= 100\n\"\"\"\n\n\"\"\"\nGiven an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.\n\nExample 1:\n\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nOutput: Because nums[0] + nums[1] == 9, we return [0, 1].\nExample 2:\n\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\nExample 3:\n\nInput: nums = [3,3], target = 6\nOutput: [0,1]\n \n\nConstraints:\n\n1 <= nums.length <= 10^5\n-10^9 <= nums[i] <= 10^9\n-10^9 <= target <= 10^9\nOnly one valid answer exists.\n\n\"\"\"\n\n\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        nums_hash = dict()\n        for i, num in enumerate(nums):\n            if target - num in nums_hash:\n                return [nums_hash[target - num], i]\n            else:\n                nums_hash[num] = i\n\n\n\"\"\"\n1716. Minimum Operators to Reduce X to Zero\n\nGiven a non-negative integer x, compute the minimum number of steps it takes to reduce it to zero.\n\nIn one step, if x is even, you can divide it by 2 to make it odd, or if it's odd, you can subtract 1 to make it even.\n\nExample 1:\n\nInput: x = 1\nOutput: 0\nExplanation: The integer 1 has done all the operations of getting it to zero.\nExample 2:\n\nInput: x = 3\nOutput: 2\nExplanation: \nFirst step: x becomes 2.\nSecond step: x becomes 1.\nExample 3:\n\nInput: x = 6\nOutput: 2\nExplanation: \nFirst step: x becomes 3.\nSecond step: x becomes 2.\nExample 4:\n\nInput: x = 0\nOutput: 0\n\n\"\"\"\n\n\nclass Solution:\n    def numberOfSteps(self, num: int) -> int:\n        step = 0\n        while num!= 0:\n            if num % 2 == 0:\n                num = num / 2\n                step += 1\n            else:\n                num = num - 1\n                step += 1\n        return step\n\n\n\"\"\"\n1717. Minimum Difference Between Largest and Smallest Value in Three Moves\n\nYou are given an integer array nums. By the pigeonhole principle, there must be a number that appears exactly once in nums.\n\nReturn the minimum difference between the maximum value and the minimum value in nums.\n\nExample 1:\n\nInput: nums = [1,"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\nassert solution(\"3 2\") == \"safe\"\nassert solution(\"3 1\") == \"unsafe\"\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5') == 'unsafe'\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5') == 'unsafe'\n\n-----Explanation-----\nThere are four sheep and five wolves. The number of wolves is not less than that of sheep, so they will attack them.\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'unsafe'\n\nassert solution('1 1') =='safe'\n\nassert solution('2 4') == 'unsafe'\n\nassert solution('3 5') =='safe'\n\nassert solution('4 5') == 'unsafe'"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\nassert solution(\"10 3\") == \"safe\"\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 5') == '6'\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 5') == '6'\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\"\nimport ast\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nprint(solution(\"3 4 5\"))\n\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 11 4\") == 4\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3 4') == '1'\n\"\"\"\n\nfrom unittest import TestCase\n\nfrom io import StringIO\n\nfrom itertools import combinations\n\nclass Solution:\n    # Time: O(n)\n    # Space: O(n)\n    def solve(self, A, B, C):\n        # 1 <= A <= 100, 1 <= B <= 100, 1 <= C <= 100\n        min_sounds = 1\n\n        # Check if money can be spent\n        if A * min_sounds > B:\n            return 0\n        if (A * min_sounds + B * C) < A:\n            return 0\n\n        # If we can spend money, check how many times we can\n        min_sounds = B // C\n        max_sounds = B // A + 1\n        return max_sounds - min_sounds + 1\n\nclass TestSolution(TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def test_case1(self):\n        A, B, C = 2, 11, 4\n\n        self.assertEqual(self.solution.solve(A, B, C), 4)\n\n    def test_case2(self):\n        A, B, C = 2, 11, 2\n\n        self.assertEqual(self.solution.solve(A, B, C), 3)\n\n    def test_case3(self):\n        A, B, C = 4, 6, 4\n        self.assertEqual(self.solution.solve(A, B, C), 2)\n\n    def test_case4(self):\n        A, B, C = 10, 10, 10\n        self.assertEqual(self.solution.solve(A, B, C), 0)\n\n    def test_case5(self):\n        A, B, C = 4, 6, 2\n        self."
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 11 4') == 4\nassert solution('10 6 1') == 4\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 11 4') == '4'\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\n\na, b, c = map(int, input().split())"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 11 4') == '4'\nassert solution('7 13 3') == '0'\nassert solution('15 12 6') == '2'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 11 4') == '4'\nassert solution('0 11 4') == '1'\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 11 4') == '4'\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '2 5'\n) == '10'\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5') == 10\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5\") == 10\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\") == \"10\"\nassert solution(\"2 6\") == \"12\"\nassert solution(\"4 9\") == \"36\"\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(sample_input) == sample_output\nprint(solution(input))\n\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == \"10\"\nprint(solution(\"2 5\"))\n\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n4 5') == '10'\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 5\n''') == 10\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 5') == 10\n'''"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\"\n\n\n\"\"\"\n---SOLUTION---\n\"\"\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 7\\n\") == 10\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 7\") == 10\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 7\\n\") == \"10\"\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(A, B, T) == '10'\nprint('The strings are equal.')\n\n-----\n\nOne challenge of solving these types of problems is that the problem description is typically too detailed for typical beginners to understand. In general, even if you don\u2019t know how to solve it, it is important to be able to understand the problem and its possible solutions. So, before we start to solve these problems, let\u2019s take a look at an example.\n\nSuppose we have a problem which is simple to understand and not too tricky. The problem is to calculate the total number of cookies produced by a machine over a period of T seconds.\n\nSo, we can solve this problem in two ways:\n\nWe can calculate and print the value for N seconds, where N is a multiple of T.\nWe can calculate and print the value for the remaining T-N seconds, where N is a multiple of T.\nIf we want to print the final value, we can add N to the value of T and then print it."
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 5 7\n''') == '10'\nprint('Test pass.')"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n3 4\\n') == 'OK'\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 500 600\\n') == 'OK'\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n500 600\") == \"OK\"\nassert solution(\"5\\n1 1\") == \"NG\"\n\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('567') == 'NG'\n\n\"\"\"\n\nK, A, B = [int(x) for x in stdin.split()]\nprint('OK' if (A//K)*K <= A <= (B//K)*K else 'NG')\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 500 600\\n') == 'OK'\nassert solution('7 500 600\\n7 498 600\\n') == 'NG'"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n500 600\") == \"OK\"\n\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 500 600\\n\") == \"OK\"\nassert solution(\"7 500 593\\n\") == \"NG\"\n\"\"\"\n\nK, A, B = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n500 600\") == \"OK\"\nassert solution(\"7\\n400 600\") == \"NG\"\n\n-------TEST1--------\n7\n500 600\nOK\n\n-------TEST2--------\n7\n200 200\nOK\n\n-------TEST3--------\n7\n1000 1000\nNG\n\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n500 600\") == \"OK\"\n\"\"\"\n\nimport sys\n\nK = int(sys.stdin.readline().strip())\nA, B = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 500 600') == 'OK'\nassert solution('567 500 600') == 'NG'\n\"\"\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n\n'''"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n\"\"\"\n\nimport math\nimport sys\n\nfor line in sys.stdin:\n    (T, X) = line.split()\n    T = int(T)\n    X = int(X)\n    print(math.ceil(T / X))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 3\\n') == '2.6666666667'\n\"\"\"\n\nimport math\n\nT, X = map(int, input().split())\n\nprint(math.ceil(T / (X * math.sqrt(2))))"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3\\n\") == \"2.6666666667\"\n\"\"\"\n\nT, X = map(int, input().split())\n\nprint(T / (X - 1))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n\"\"\"\n\nimport math\n\nt, x = map(int, stdin.readline().split())\nprint(math.floor(t / x))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"8 3\"\n) == \"2.6666666667\"\n\"\"\"\n\nimport math\n\nT, X = [float(x) for x in input().split()]\nprint(math.ceil(T / (X / 3600)))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\nprint(solution(\"8 3\"))\n\"\"\"\n\nimport math\n\nT, X = [int(x) for x in stdin.split()]\n\nprint(math.ceil((T * X) / 3600))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3') == '2.6666...'\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n\nA, B, C = map(int, stdin.split())\n\nprint(C - B if B < C else 0)"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"6 4 3\"\n) == \"1\"\n\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 4 3') == '1'\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 3') == '1'\nassert solution('1 1 1') == '0'\nassert solution('9 4 3') == '0'\n\"\"\"\n\nfrom typing import NamedTuple, Dict, List\n\nclass Hund:\n    def __init__(self, bottles: Dict[int, int]):\n        self.bottles = bottles\n\n    def transfer(self, source_bottle, destination_bottle, amount):\n        if amount > self.bottles[source_bottle]:\n            raise ValueError('There is not enough water!')\n        self.bottles[source_bottle] -= amount\n        self.bottles[destination_bottle] += amount\n\n    def __str__(self):\n        return str(self.bottles)\n\nclass TransferData(NamedTuple):\n    source_bottle: int\n    destination_bottle: int\n    amount: int\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n\na, b, c = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 4 3\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5 6') == '1'\nassert solution('7 9 8') == '5'\nassert solution('8 7 5') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 2 4\\n2 1 4 3') == '3'\nassert solution('4\\n1 2 3 4\\n3 1 4 2') == '0'"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 3 2') == '3'\nassert solution('3\\n3 1 2') == '0'\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 3 2\") == \"3\"\nassert solution(\"5\\n1 2 3 4 5\") == \"0\"\nassert solution(\"2\\n1 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 3 2') == '3'\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 3 2\\n3 1 2') == '3'\nassert solution('3\\n3 1 2\\n1 3 2') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 3 2\n3 1 2\n''') == '3'\n\nassert solution('''\n3\n1 3 2\n3 1 2\n''') == '0'\n\nassert solution('''\n2\n2 1\n1 2\n''') == '1'\n\nassert solution('''\n3\n2 3 1\n1 3 2\n''') == '2'\n\nassert solution('''\n4\n4 3 2 1\n3 4 1 2\n''') == '5'"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 3 2\\n3 1 2') == '3'\nassert solution('2\\n1 3 2\\n3 1 2') == '1'\n\"\"\"\n\nfrom typing import List, Set, Tuple, Dict, Optional\nimport sys"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\nassert solution(\"3\\n1 3 2\\n3 2 1\") == \"3\"\nassert solution(\"4\\n1 4 3 2\\n4 1 3 2\") == \"2\"\nassert solution(\"3\\n1 3 2\\n3 1 3\") == \"0\"\nassert solution(\"3\\n1 3 3\\n3 1 2\") == \"3\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ATCODER\") == 3\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ATCODER') == 'ATC'\nassert solution('CODER') == 'COD'\nassert solution('ACG') == 'ACG'\nassert solution('AT') == 'AT'\nassert solution('ATC') == 'ATC'\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ATCODER') == 3\n\nassert solution('GATCAYA') == 4\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ATCODER') == 3\n\n\"\"\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ATCODER\") == \"ATC\"\n\"\"\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ATCODER') == 3\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ACGT') == 'AC'\nassert solution('AACGT') == 'AAC'\nassert solution('AAC') == 'AAC'\nassert solution('A') == 'A'\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ATCODER') == 3\n\n\"\"\"\n\nimport unittest\nimport unittest.mock as mock\nimport os\nimport io\nimport sys\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ATCODER\") == 3\nprint(solution(\"ATCODER\"))\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11') == '9'\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11') == '9'\nprint(solution('11'))"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == '9'\nassert solution('21') == '13'\n\"\"\"\nimport unittest\nfrom io import StringIO\nfrom unittest.mock import patch\n\n\nclass TestMain(unittest.TestCase):\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def test_main(self):\n        with patch('sys.stdin', StringIO('11\\n')):\n            with patch('sys.stdout', new=StringIO()) as fake_stdout:\n                main()\n                self.assertEqual(\n                    fake_stdout.getvalue().strip(),\n                    '9'\n                )\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11\") == \"9\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12') == '9'\nassert solution('11') == '9'\nassert solution('8') == '0'\nassert solution('9') == '1'\nassert solution('1') == '0'\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11\") == \"9\"\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\") == \"9\"\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nN = int(sys.argv[1])\n\ncount = 0\nfor i in range(1, N + 1):\n    if len(str(i)) % 2 == 1:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11\") == 9\nassert solution(\"9\") == 0\nassert solution(\"999\") == 9\nassert solution(\"0\") == 0\nassert solution(\"1234\") == 0\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(11) == 9"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"cupofcoffee\") == \"cuhottefofhee\"\nprint(solution(\"cupofcoffee\"))\nassert solution(\"cupofhottea\") == \"cuhottefofhee\"\nprint(solution(\"cupofhottea\"))\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"cupofcoffee\") == \"hottea\"\nassert solution(\"jithinakumar\") == \"jithinakumar\"\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('cupofcoffee') == 'hotteacupofcoffee'\nassert solution('cupofhottea') == 'hottea'\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('cupofcoffee') == 'hotteacupofcoffee'\nassert solution('caefo') == 'foecaefo'\nassert solution('caef') == 'foecaef'\nassert solution('ca') == 'foeca'\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'aab'\nassert solution('abc') == 'aabc'\n\nimport sys; read = sys.stdin.readline\nsys.stdout.write(str(solution(read().strip())))\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('cupofcoffee') == 'cupofhottea'\nassert solution('cupofcoffee') == 'cupofhottea'\nassert solution('cupofcoffe') == 'cupofcoffee'\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"cupofcoffee\") == \"coffee\"\nassert solution(\"cupofhottea\") == \"hottea\"\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"cupofcoffee\") == \"hotteacupofcoffee\"\nassert solution(\"cupofhottea\") == \"hotteacupofhottea\"\n\"\"\"\n\n\nimport re\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"cupofcoffee\") == \"hottea\"\n\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\nassert solution(\"mushrooms\") == \"mushroomsmushrooms\"\nassert solution(\"aba\") == \"aba\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 7\") == '5 6 7 8 9'\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6 7 8 9\\n3 7\\n') == '5 6 7 8 9'\n\"\"\"\n\n\"\"\"\nD. Given a number N and a string S consisting only of letters D and I, you have to delete all the vowels in the given string S such that after the operation the result won't have any vowels.\n\nNote that vowels in the input string are not sorted or ordered in any special way.\n\nInput Format:\nThe first line of the input contains a number N representing the length of the string. The next line contains a string consisting of lowercase English letters only \u2013 the string S.\n\nConstraints:\n1 \\leq N \\leq 100\n\nOutput Format:\nPrint the resulting string.\n\nSample Input:\n9\nDIDID\n\nSample Output:\nDDID\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1') == '0'\nassert solution('2 9') == '9'\nassert solution('3 6') == '5 6 7 8 9'\n\n-----\nIn this solution, the first line of input is a number k, which is the number of consecutive stones.\nThe second line of input is a number x, which is the coordinate of a black stone.\n\nFirst, we have a variable b that defines the coordinate of the black stone.\nThen, we have a variable s that holds the number of black stone.\n\nThen we use a for-loop to loop through the range of 1 to 2000000.\n\nIf the current number is the b + k, then it's a black stone, and we need to output it.\nOtherwise, if the current number is b - k, then it's a white stone, and we should not output it.\nIn both cases, we add one to the number of black stone.\n\nFinally, we print the number of black stone at the end."
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"./tests/test_01.txt\") == \"7 7 7 8 8 9\"\nassert solution(\"./tests/test_02.txt\") == \"0 1 2 3 4 5 6 7\"\nassert solution(\"./tests/test_03.txt\") == \"8 7 6 5 4 3 2 1 0\"\nassert solution(\"./tests/test_04.txt\") == \"3 4 5 6\"\nassert solution(\"./tests/test_05.txt\") == \"9 8 7 6 5 4 3 2 1 0\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 7\\n\") == \"5 6 7 8 9\"\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'No'\nassert solution('5') == 'Yes'\nassert solution('6') == 'No'\nassert solution('15') == 'Yes'\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"30\") == \"Yes\"\n\n\"\"\"\n\nX = input()"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"25\") == \"No\"\n\"\"\"\n\nx = int(input())"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('25') == 'No'\nassert solution('-1') == 'No'\n\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"0\") == \"No\"\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('20') == 'Yes'\nassert solution('30') == 'Yes'\nassert solution('15') == 'No'\nassert solution('5') == 'No'\nassert solution('0') == 'No'\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('25') == 'No'\n\"\"\"\n\n\"\"\"\nProblem 3 - Cats and a Mouse\n\nGiven:\nTwo positive integers a and b, each less than 1000.\n\nReturn:\nThe last digits of a^b.\n\n-----Constraints-----\n - 1000 \\leq a \\leq 1000\n - 1000 \\leq b \\leq 1000\n - a and b are integers.\n\n-----Input-----\nThe input consists of two lines. The first line contains the first integer, a, and the second line contains the second integer, b.\n\n-----Output-----\nPrint the last digits of a^b.\n\n-----Sample Input-----\n9\n10\n\n-----Sample Output-----\n91\n\"\"\"\n\n\"\"\"\nProblem 4 - Names Score\n\nGiven:\nA file containing a list of names (one name per line)\n\nReturn:\nA score of that name\n\n-----Constraints-----\n - Each name is composed of lowercase English letters only.\n - The list of names is ordered alphabetically.\n\n-----Input-----\nThe input consists of a single line containing the names seperated by a comma.\n\n-----Output-----\nPrint a single line containing the name and score seperated by a comma.\n\n-----Sample Input-----\nAnnie,Cindy,Dora,Benny,Sue\n\n-----Sample Output-----\nAnnie,1\nCindy,2\nDora,3\nBenny,4\nSue,5\n\"\"\"\n\n\"\"\"\nProblem 5 - Summation\n\nGiven:\nAn integer n, 0 \\leq n \\leq 10^5\nA list of numbers - a0,a1,...,an\n\nReturn:\nThe sum of the list\n\n-----Constraints-----\n - 1 \\leq ai \\leq 10^5\n - The list of numbers is ordered.\n\n-----Input-----\nThe input consists of three lines. The first line contains n (1 \\leq n \\leq 10^5). The second line contains a0,a1,...,an (1 \\leq a_i \\leq 10^5). The third line contains n+1 numbers delimited by comma and space. These are the numbers in the list.\n\n-----Output-----\nPrint the sum of the list.\n\n-----Sample Input-----\n2\n5,2,3,4,1\n1,2,3,4,5\n\n-----Sample Output-----\n10\n\"\"\"\n\n\"\"\"\nProblem 6 - Fast Exponentiation\n\nGiven:\nTwo integers m and k, 1 \\leq m \\leq 10^5, 0 \\leq k \\leq 1000\n\nReturn:\nThe result of m^k\n\n-----Constraints-----\n - m is an integer\n - 1 \\leq k \\leq 1000\n\n-----Input-----\nThe input consists of three lines. The first line contains m (1 \\leq m \\leq 10^5). The second line contains k (0 \\leq k \\leq 1000). The third line contains the result.\n\n-----Output-----\nPrint the result of m^k\n\n-----Sample Input-----\n3\n2\n\n-----Sample Output-----\n9\n\"\"\"\n\n\"\"\"\nProblem 7 - Product Summation\n\nGiven:\nA file containing at most 1000 names (first and last names are separated by space).\n\nReturn:\nThe number of pairs of names with exactly one name appearing exactly twice.\n\n-----Constraints-----\n - First and last names are separated by a space.\n - Each name consists of lower case English letters only.\n - The list of names is ordered in lexicographic ascending order.\n\n-----Input-----\nThe input file contains a list of names. The first line in the file contains the number of names, and the second line contains the names.\n\n-----Output-----\nPrint the number of pairs of names with exactly one name appearing exactly twice.\n\n-----Sample Input-----\n5\nAnnie Luney\nBenny Curd\nAnnie Luney\nCindy Kay\nBenny Curd\n\n-----Sample Output-----\n4\n\"\"\"\n\n\"\"\"\nProblem 8 - Prime Factorization\n\nGiven:\nA positive integer n \\leq 10^7\n\nReturn:\nThe prime factorization of n, in the form of a list of (prime,exponent) pairs, where prime is a prime number and exponent is the exponent of that prime in n, in ascending order. If n is prime, the exponent is 1.\n\n-----Constraints-----\n - n is an integer\n - 1 \\leq n \\leq 10^7\n\n-----Input-----\nThe input consists of a single integer n \\leq 10^7.\n\n-----Output-----\nPrint the prime factorization of n.\n\n-----Sample Input-----\n12\n\n-----Sample Output-----\n[(2,1),(3,1)]\n\"\"\"\n\n\"\"\"\nProblem 9 - Primorial\n\nGiven:\nAn integer n \\leq 10^7\n\nReturn:\nThe value of the primorial of n\n\n-----Constraints-----\n - n is an integer\n - 1 \\leq n \\leq 10^7\n\n-----Input-----\nThe input consists of a single integer n \\leq 10^7\n\n-----Output-----\nPrint the value of the primorial of n\n\n-----Sample Input-----\n5\n\n-----Sample Output-----\n10\n\"\"\"\n\n\"\"\"\nProblem 10 - Summation\n\nGiven:\nAn integer n, 0 \\leq n \\leq 10^5\nA list of numbers - a0,a1,...,an\n\nReturn:\nThe sum of a0^2 + a1^2 +... + an^2\n\n-----Constraints-----\n - 1 \\leq a_i \\leq 10^5\n - The list of numbers is ordered.\n\n-----Input-----\nThe input consists of three lines. The first line contains n (1 \\leq n \\leq 10^5). The second line contains a0,a1,...,an (1 \\leq a_i \\leq 10^5). The third line contains n+1 numbers delimited by comma and space. These are the numbers in the list.\n\n-----Output-----\nPrint the sum of a0^2 + a1^2 +... + an^2\n\n-----Sample Input-----\n3\n1,2,3\n1,2,3\n\n-----Sample Output-----\n14\n\"\"\"\n\n\"\"\"\nProblem 11 - Summation with Odds\n\nGiven:\nTwo positive integers a and b, each less than 1000, and a list of positive integers l, each less than 100, with no duplicates.\n\nReturn:\nThe sum of all odd integers in the list.\n\n-----Constraints-----\n - a and b are integers\n - 1 \\leq a,b \\leq 1000\n - 1 \\leq l_i \\leq 100\n - The list of integers is ordered.\n - There are at most 1000 numbers in the list.\n\n-----Input-----\nThe input consists of four lines. The first line contains a single integer, a, denoting the number of test cases. The next a lines contains three integers, a, b and l, respectively. The last line contains n positive integers delimited by comma and space. These are the numbers in the list.\n\n-----Output-----\nPrint the sum of all odd integers in the list.\n\n-----Sample Input-----\n2\n2 1 2\n2 2 2\n5 2 5\n\n-----Sample Output-----\n8\n10\n\"\"\"\n\n\"\"\"\nProblem 12 - Product Summation with Odds\n\nGiven:\nTwo positive integers a and b, each less than 1000, and a list of positive integers l, each less than 100, with no duplicates.\n\nReturn:\nThe sum of all odd integers in the list.\n\n-----Constraints-----\n - a and b are integers\n - 1 \\leq a,b \\leq 1000\n - 1 \\leq l_i \\leq 100\n - The list of integers is ordered.\n - There are at most 1000 numbers in the list.\n\n-----Input-----\nThe input consists of four lines. The first line contains a single integer, a, denoting the number of test cases. The next a lines contains three integers, a, b and l, respectively. The last line contains n positive integers delimited by comma and space. These are the numbers in the list.\n\n-----Output-----\nPrint the sum of all odd integers in the list.\n\n-----Sample Input-----"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('25') == 'No'\nassert solution('-40') == 'No'\nassert solution('-1') == 'No'\nassert solution('0') == 'No'\nassert solution('1') == 'Yes'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('25') == 'No'\nassert solution('-5') == 'No'\nassert solution('3') == 'Yes'\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"25\") == \"No\"\n\"\"\"\n\ntemp = int(stdin)"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 2\") == \"1\"\nassert solution(\"1 2\\n5 5\") == \"1\"\nassert solution(\"2 1\\n5 5\") == \"0\"\nassert solution(\"3 3\\n-2 8\") == \"0\"\nassert solution(\"2 3\\n1 2\\n5 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2\\n5 5\\n-2 8\") == \"1\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2\\n3 4\\n5 6\") == \"1\"\nassert solution(\"4 2\\n1 2\\n3 4\\n5 6\\n1 1\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == '1'\n\"\"\"\n\n\"\"\"\nQuestion 2\nWrite a program that reads three integers and prints the corresponding triangle.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nAn integer n\nAn integer m\nAn integer p\n\n-----Output-----\nPrint the corresponding triangle.\n\n-----Sample Input-----\n5\n5\n5\n\n-----Sample Output-----\n*\n* *\n* * *\n* * * *\n* * * * *\n\n\"\"\"\n\n\"\"\"\nQuestion 3\nWrite a program that reads one word and prints all words with the same number of letters as the read word.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nAn integer n\n\n-----Output-----\nPrint all words with the same number of letters as the read word.\n\n-----Sample Input-----\n7\n\n-----Sample Output-----\ndone\ndonkey\ndoneee\ndood\ndoods\ndoody\ndoodie\n\"\"\"\n\n\"\"\"\nQuestion 4\nWrite a program that reads a word and prints the same word with a number of the same letter in the middle of the word.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nAn integer n\nA word\n\n-----Output-----\nPrint a word with a number of the same letter in the middle of the word.\n\n-----Sample Input-----\n4\nfluffy\n\n-----Sample Output-----\nfluffy3\nfluffy4\nfluffy5\nfluffy6\nfluffy7\nfluffy8\nfluffy9\n\"\"\"\n\n\"\"\"\nQuestion 5\nWrite a program that reads one word and prints the same word with a number of the same letter in the middle of the word. If there are no letters, print \"No such word\".\n\n-----Input-----\nInput is given from Standard Input in the following format:\nAn integer n\nA word\n\n-----Output-----\nPrint a word with a number of the same letter in the middle of the word.\n\n-----Sample Input-----\n4\napple\n\n-----Sample Output-----\napp3le\napp4le\napp5le\napp6le\napp7le\napp8le\napp9le\napple3\napple4\napple5\napple6\napple7\napple8\napple9\nNo such word\n\"\"\"\n\n\"\"\"\nQuestion 6\nWrite a program that reads one word and prints a new word with letters from the original word in the middle of the new word. If there are no letters, print \"No such word\".\n\n-----Input-----\nInput is given from Standard Input in the following format:\nAn integer n\nA word\n\n-----Output-----\nPrint a new word with letters from the original word in the middle of the new word.\n\n-----Sample Input-----\n5\nfluffy\n\n-----Sample Output-----\nflufi5\nflufi6\nflufi7\nflufi8\nflufi9\nflufi3\nflufi4\nflufi5\nflufi6\nflufi7\nflufi8\nflufi9\nflufi1\nflufi2\nflufi3\nflufi4\nflufi5\nflufi6\nflufi7\nflufi8\nflufi9\nflufi11\nflufi12\nflufi13\nflufi14\nflufi15\nNo such word\n\"\"\"\n\n\"\"\"\nQuestion 7\nWrite a program that reads one word and prints all words with the same number of letters as the read word. If there are no words with a given number of letters, print \"No such word\".\n\n-----Input-----\nInput is given from Standard Input in the following format:\nAn integer n\nA word\n\n-----Output-----\nPrint all words with the same number of letters as the read word.\n\n-----Sample Input-----\n4\nfluffy\n\n-----Sample Output-----\nfluffy2\nfluffy3\nfluffy4\nfluffy5\nfluffy6\nfluffy7\nfluffy8\nfluffy9\nfluffy10\nfluffy11\nfluffy12\nfluffy13\nfluffy14\nNo such word\n\"\"\"\n\n\"\"\"\nQuestion 8\nWrite a program that reads one word and prints the same word with a number of the same letter in the middle of the word. If there are no letters, print \"No such word\".\n\n-----Input-----\nInput is given from Standard Input in the following format:\nAn integer n\nA word\n\n-----Output-----\nPrint a word with a number of the same letter in the middle of the word.\n\n-----Sample Input-----\n4\napple\n\n-----Sample Output-----\napp3le\napp4le\napp5le\napp6le\napp7le\napp8le\napp9le\napple3\napple4\napple5\napple6\napple7\napple8\napple9\nNo such word\n\"\"\"\n\n\"\"\"\nQuestion 9\nWrite a program that reads one word and prints a new word with letters from the original word in the middle of the new word. If there are no letters, print \"No such word\".\n\n-----Input-----\nInput is given from Standard Input in the following format:\nAn integer n\nA word\n\n-----Output-----\nPrint a new word with letters from the original word in the middle of the new word.\n\n-----Sample Input-----\n5\nfluffy\n\n-----Sample Output-----\nflufi5\nflufi6\nflufi7\nflufi8\nflufi9\nflufi3\nflufi4\nflufi5\nflufi6\nflufi7\nflufi8\nflufi9\nflufi1\nflufi2\nflufi3\nflufi4\nflufi5\nflufi6\nflufi7\nflufi8\nflufi9\nNo such word\n\"\"\"\n\n\"\"\"\nQuestion 10\nWrite a program that reads one word and prints the same word with a number of the same letter in the middle of the word. If there are no letters, print \"No such word\".\n\n-----Input-----\nInput is given from Standard Input in the following format:\nAn integer n\nA word\n\n-----Output-----\nPrint a word with a number of the same letter in the middle of the word.\n\n-----Sample Input-----\n4\napple\n\n-----Sample Output-----\napp3le\napp4le\napp5le\napp6le\napp7le\napp8le\napp9le\napple3\napple4\napple5\napple6\napple7\napple8\napple9\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\"\"\"\n\nfrom collections import defaultdict\nfrom collections import Counter\nfrom sys import stdin, stdout"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1\\n1 1 1 1') == '0'\nassert solution('2 1\\n1 1') == '1'\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\nassert len(sys.argv) == 2\nN, D = [int(x) for x in sys.argv[1].split()]\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3876\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\n\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1233\") == \"Good\"\nassert solution(\"1234\") == \"Bad\"\nassert solution(\"1111\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"9999\") == \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\nassert solution(\"2222\") == \"Bad\"\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1234\") == \"Bad\"\nassert solution(\"1223\") == \"Good\"\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\nassert solution(\"1256\") == \"Bad\"\nassert solution(\"2996\") == \"Bad\"\nassert solution(\"37\") == \"Bad\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\nassert solution(\"2345\") == \"Bad\"\nassert solution(\"3456\") == \"Good\"\nassert solution(\"4567\") == \"Bad\"\n\n'''\n\nimport sys\n\ns = sys.stdin.readline().strip()"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3776\") == \"Good\"\nassert solution(\"2341\") == \"Bad\"\nassert solution(\"1111\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\n\n\"\"\"\n\nS = str(input())\na = S[0]\nb = S[1]\nc = S[2]\nd = S[3]\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n3 4') == '3.5'\n\"\"\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n') == '3.5'\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n\") == \"3.5\"\n\"\"\"\nimport math"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n4\\n') == '3.5'\nprint('Test success.')\n\nIf you start with one ingredient, you can put it in the pot and never come back. The maximum value of this ingredient is its value.\n\n>>> solution('1\\n5\\n')\n'5.0'\n>>> solution('2\\n3\\n')\n'2.0'\n>>> solution('2\\n1\\n')\n'1.0'\n>>> solution('2\\n5\\n')\n'5.0'\n>>> solution('2\\n3\\n')\n'2.0'\n>>> solution('2\\n4\\n')\n'4.0'\n>>> solution('3\\n1 2\\n')\n'2.5'\n>>> solution('3\\n3 4\\n')\n'3.5'\n>>> solution('3\\n6\\n')\n'6.0'\n>>> solution('3\\n2\\n')\n'2.0'\n>>> solution('3\\n1\\n')\n'1.0'\n>>> solution('3\\n3\\n')\n'3.0'\n>>> solution('4\\n2\\n')\n'2.0'\n>>> solution('4\\n1 1\\n')\n'1.5'\n>>> solution('4\\n2\\n')\n'2.0'\n>>> solution('5\\n1 2\\n')\n'2.5'\n>>> solution('5\\n3 4\\n')\n'3.5'\n>>> solution('6\\n1 1 1\\n')\n'1.8'\n>>> solution('6\\n1 1 2\\n')\n'1.8'\n>>> solution('7\\n1 2 3\\n')\n'2.6'\n>>> solution('7\\n4 5 6\\n')\n'5.5'\n>>> solution('7\\n7 8 9\\n')\n'8.0'\n>>> solution('7\\n7 8\\n')\n'7.0'\n>>> solution('8\\n1 2 3\\n')\n'2.6'\n>>> solution('8\\n1 2\\n')\n'2.0'\n>>> solution('8\\n1 1\\n')\n'1.5'\n>>> solution('8\\n1 1 1\\n')\n'1.8'\n>>> solution('8\\n1 1 2\\n')\n'1.8'\n>>> solution('9\\n1 1 2\\n')\n'1.8'\n>>> solution('9\\n1 1 2\\n')\n'1.8'\n>>> solution('9\\n1 1 2\\n')\n'1.8'\n>>> solution('10\\n1 2\\n')\n'2.0'\n>>> solution('10\\n1 1\\n')\n'1.5'\n>>> solution('10\\n1 1 1\\n')\n'1.8'\n>>> solution('10\\n1 1 2\\n')\n'1.8'\n>>> solution('10\\n1 1 2\\n')\n'1.8'\n>>> solution('10\\n1 1 2\\n')\n'1.8'\n>>> solution('11\\n1 2\\n')\n'2.0'\n>>> solution('11\\n1 1\\n')\n'1.5'\n>>> solution('11\\n1 1 1\\n')\n'1.8'\n>>> solution('11\\n1 1 2\\n')\n'1.8'\n>>> solution('11\\n1 1 2\\n')\n'1.8'\n>>> solution('11\\n1 1 2\\n')\n'1.8'\n>>> solution('11\\n1 1 2\\n')\n'1.8'\n>>> solution('12\\n1 1 2\\n')\n'1.8'\n>>> solution('12\\n1 1 2\\n')\n'1.8'\n>>> solution('12\\n1 1 2\\n')\n'1.8'\n>>> solution('12\\n1 1 2\\n')\n'1.8'\n>>> solution('12\\n1 1 2\\n')\n'1.8'\n>>> solution('12\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n3 4') == '3.5'\n\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n\") == \"3.5\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"3.5\"\nassert solution(\"2 4\") == \"3.5\"\nassert solution(\"3 3\") == \"3.0\"\nassert solution(\"1 2\") == \"2.0\"\n\n\"\"\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"3.5\"\nassert solution(\"1 1\") == \"1.0\"\nassert solution(\"2 1000000000\") == \"1.0\"\nassert solution(\"5 1 1 1 1\") == \"2.0\"\nassert solution(\"5 3 6 7 8\") == \"3.857142857142857\"\n\n-----Problem-----\nYou are given a list of integers, your task is to return the product of the elements of this list, except for the number represented by the list itself.\nIf the input list is empty, return 1.\n\n-----Solution-----\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == 2\nassert solution(\"1 2 3\") == 2.5\nassert solution(\"1 2 3 4\") == 2.75\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n3 1 2\\n2 5 4\\n3 6') == 14\n\"\"\"\n\nimport math"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\\n\") == 14\n\"\"\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 2\\n2 5 4\\n3 6\\n') == 14\n\"\"\"\n\nimport collections\nimport functools\nimport itertools\nimport operator\nimport sys\n\nsys.setrecursionlimit(1000000)\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_ITEMS = (\n    (int(first) if first.isdigit() else ord(first) - ord('A') + 1, int(second))\n    for first, second in (line.split() for line in INPUT_LINES))"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\") == 14\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'''\n3\n1 2\n2 5\n3 6\n''') == '14'\nassert solution(\n'''\n2\n3 1\n2 5\n3 6\n''') == '4'\nassert solution(\n'''\n3\n3 1\n2 5\n3 6\n''') == '9'\nassert solution(\n'''\n4\n1 1\n2 1\n3 2\n4 1\n''') == '6'\nassert solution(\n'''\n3\n3 1\n2 5\n3 6\n''') == '12'\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n3 1 2\\n2 5 4\\n3 6') == '14'\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 2\\n2 5 4\\n3 6') == '14'\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\") == 14\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\\n\") == 14\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2\\n2 5\\n3 6\") == \"14\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''10\nZABCDBABCQ''') == '2'\nassert solution('''10\nABCDBABCQ''') == '2'\nassert solution('''10\nABCABCABCABCABC''') == '4'\nassert solution('''10\nABABABABABABABA''') == '8'\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('AB') == 'AB'\nassert solution('A') == ''\nassert solution('AAAA') == 'AAAA'\nassert solution('ABCABCABC') == 'ABC'\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABCDBABCQ\") == \"2\"\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\nZABCDBABCQ\") == 2\n\"\"\"\nfrom collections import defaultdict\nimport re"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 ABCDBABCQ') == '2'\nassert solution('10 ABCDBABCQ') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3QW2EW3R4T5Y7U8I9\") == \"3\"\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abracadabra') == 5\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ZABCDBABCQ\") == 2\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\nZABCDBABCQ') == 2\nprint('Hooray!')\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n'''5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\n'''\n) == '2'\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"MASHIKE:RUMOI:OBIRA:HABORO\") == \"2\"\nassert solution(\"MASHIKE:RUMOI:OBIRA:HABORO:HOROKANAI\") == \"1\"\nassert solution(\"MASHIKE:RUMOI:OBIRA:HABORO:HOROKANAI:OBIRA\") == \"0\"\nassert solution(\"MASHIKE:RUMOI:OBIRA:HABORO:HOROKANAI:MASHIKE\") == \"3\"\nassert solution(\"MASHIKE:RUMOI:OBIRA:HABORO:HOROKANAI:MASHIKE:MASHIKE\") == \"5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI''') == '2'\n\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input) == answer\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_data) == test_result"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI') == '2'\nassert solution('3\\nMASHIKE\\nRUMOI\\nHABORO') == '1'\n\"\"\"\n\n\"\"\"\nTHREE PASSES\n    1) Counter\n    2) OrderedDict\n    3) Union Find\n\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI') == '2'\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n\nfrom typing import Set\n\nN = int(input())\n\nletters: Set[str] = set()\nfor _ in range(N):\n    letters.add(input())\n\nans: int = 0\n\nfor i in range(1, N):\n    for j in range(1, N - i + 1):\n        subset: Set[str] = set(letters)\n        for k in range(j):\n            subset.remove(input())\n        if len(subset) == 0 or all(x[0] in ('M', 'A', 'R', 'C', 'H') for x in subset):\n            ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI') == '2'\n\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\nprint(\"PASSED\")\n\n-----Explanation-----\nThere are 2 ways to choose three people from 5 people.\n\"\"\"\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\"), \"2\")"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3') == 'Yes'\nassert solution('2 2') == 'No'\n\n-----\n'''\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"6 3\") == \"No\"\nassert solution(\"5 1\") == \"Yes\"\nassert solution(\"1 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3,3) == \"Yes\"\nassert solution(1,1) == \"No\"\nassert solution(10,10) == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3') == 'Yes'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 1\\n1 1\\n1 1\") == \"Yes\"\nassert solution(\"3 3\\n1 1\\n1 1\\n1 1\") == \"No\"\n\nassert solution(\"3 3\\n1 1\\n2 1\\n1 1\") == \"No\"\nassert solution(\"3 3\\n1 1\\n2 1\\n1 2\") == \"No\"\n\nassert solution(\"3 3\\n2 1\\n1 1\\n1 1\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 1\\n2 2\\n3 3\\n\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n3 3 1\\n3 3 2\\n3 3 3') == 'Yes'\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 1\\n1 1\\n0 0\") == \"Yes\"\n\"\"\"\n\nfrom functools import reduce\nfrom typing import List, Tuple\n\nfrom. import helpers\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"2 3\") == \"No\"\n\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\n\n------Solution------"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('sippuu') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\n\n\"\"\"\n\nS = input()"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"ppuuu\") == \"No\"\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('sippuuu') == 'No'\nassert solution('sippuuuuu') == 'No'\nassert solution('sippuuuuuuu') == 'Yes'\nassert solution('sippuuuuuuuuu') == 'Yes'\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"cocuoc\") == \"No\"\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"aabbcc\") == \"No\"\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"spood\") == \"No\"\nassert solution(\"spop\") == \"No\"\nassert solution(\"spoof\") == \"No\"\nassert solution(\"spoos\") == \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"coffee\") == \"Yes\"\nassert solution(\"coffe\") == \"No\"\nassert solution(\"sippuu\") == \"Yes\"\nassert solution(\"cof\") == \"No\"\nassert solution(\"coffe\") == \"No\"\n\"\"\""
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"\nassert solution(\"3 1\\n7 10\\n1 1\") == \"TLE\"\nassert solution(\"1 1\\n1 1\") == \"TLE\"\nassert solution(\"5 10\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\") == \"TLE\"\nassert solution(\"3 5\\n7 60\\n1 80\") == \"7\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"\nassert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"TLE\"\n\"\"\"\n\nimport sys\n\nN, T = [int(i) for i in sys.stdin.readline().split()]\nlines = sys.stdin.readlines()\n\ndurations = {}\nfor i in range(N):\n    c, t = [int(j) for j in lines[i].split()]\n    durations[t] = c\n\ntotal_cost = 0\nfor time, cost in sorted(durations.items(), key=lambda x: x[0]):\n    if time > T:\n        break\n    total_cost += cost\n\nprint(total_cost)\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50') == '4'\nprint(solution(stdin))\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_0) == 'TLE'\nassert solution(test_input_1) == '6'\nassert solution(test_input_2) == '4'\n\"\"\"\n\ntest_input_0 = \"\"\"\n5 80\n7 60\n1 80\n4 50\n3 40\n\"\"\"\ntest_input_1 = \"\"\"\n3 70\n7 60\n1 80\n4 50\n\"\"\"\ntest_input_2 = \"\"\"\n5 80\n7 60\n1 80\n4 50\n3 40\n\"\"\"\n\nfrom itertools import zip_longest"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 70\\n7 60\\n1 80\\n4 50\") == \"4\"\n\"\"\"\n\nN, T = map(int, input().split())\ncosts = []\ntimes = []\nfor _ in range(N):\n    cost, time = map(int, input().split())\n    costs.append(cost)\n    times.append(time)\n\ncosts.sort(reverse=True)\ntimes.sort(reverse=True)\n\ntotal_cost = 0\nfor i in range(N):\n    time_left = T - times[i]\n    if time_left <= 0:\n        break\n    else:\n        total_cost += costs[i]"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"\nassert solution(\"2 10\\n3 5\\n1 10\") == \"TLE\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\\n\") == \"4\"\n\n----------\n    Time Complexity: O(n * log(n))\n        [1] Initial solution: O(n^2)\n        [2] Sorting: O(n log(n))\n        [3] Greedy: O(n)\n    Space Complexity: O(n)\n        [1] input\n        [2] initial\n        [3] result\n-------------\n\"\"\""
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50') == '4'\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50\\n') == '4','result must be 4'\nprint('PASSED')\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('5 5 5') == ''\nassert solution('1 2 3 4 5') == ''\nassert solution('2 2 1') == ''\nassert solution('10 20 30 40') == ''\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 9\") == 8\n\"\"\"\n\nimport math"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 9\") == \"8\"\nprint(\"PASS\")\n\n\"\"\"\n\n\nimport unittest\nfrom collections import namedtuple\nfrom typing import Dict\n\nTEST_CASE = namedtuple(\"TestCase\", [\"input\", \"expected_output\"])\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        test_cases = [\n            TEST_CASE(input=\"4 2 9\", expected_output=\"8\"),\n            TEST_CASE(input=\"2 8 6\", expected_output=\"14\"),\n            TEST_CASE(input=\"2 8 2\", expected_output=\"18\"),\n            TEST_CASE(input=\"2 3 9\", expected_output=\"18\"),\n            TEST_CASE(input=\"4 3 7\", expected_output=\"28\"),\n            TEST_CASE(input=\"3 3 8\", expected_output=\"24\"),\n            TEST_CASE(input=\"4 2 9\", expected_output=\"8\"),\n            TEST_CASE(input=\"3 3 5\", expected_output=\"16\"),\n            TEST_CASE(input=\"1 3 2\", expected_output=\"4\"),\n            TEST_CASE(input=\"2 3 5\", expected_output=\"12\"),\n            TEST_CASE(input=\"3 4 3\", expected_output=\"16\"),\n            TEST_CASE(input=\"4 1 7\", expected_output=\"14\"),\n            TEST_CASE(input=\"5 5 1\", expected_output=\"11\"),\n            TEST_CASE(input=\"3 5 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"3 3 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"3 3 5\", expected_output=\"16\"),\n            TEST_CASE(input=\"3 4 3\", expected_output=\"16\"),\n            TEST_CASE(input=\"3 4 3\", expected_output=\"16\"),\n            TEST_CASE(input=\"5 5 5\", expected_output=\"25\"),\n            TEST_CASE(input=\"3 5 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"3 5 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"3 5 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"3 5 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"1 1 1\", expected_output=\"3\"),\n            TEST_CASE(input=\"1 2 1\", expected_output=\"3\"),\n            TEST_CASE(input=\"5 1 1\", expected_output=\"6\"),\n            TEST_CASE(input=\"5 5 5\", expected_output=\"25\"),\n            TEST_CASE(input=\"1 1 1\", expected_output=\"3\"),\n            TEST_CASE(input=\"3 2 7\", expected_output=\"16\"),\n            TEST_CASE(input=\"1 2 7\", expected_output=\"10\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"3 4 1\", expected_output=\"14\"),\n            TEST_CASE(input=\"5 4 1\", expected_output=\"11\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"2 6 8\", expected_output=\"24\"),\n            TEST_CASE(input=\"5 2 1\", expected_output=\"12\"),\n            TEST_CASE(input=\"6 2 1\", expected_output=\"18\"),\n            TEST_CASE(input=\"6 2 8\", expected_output=\"24\"),\n            TEST_CASE(input=\"6 2 8\", expected_output=\"24\"),\n            TEST_CASE(input=\"3 7 5\", expected_output=\"24\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"5 2 8\", expected_output=\"28\"),\n            TEST_CASE(input=\"6 2 8\", expected_output=\"24\"),\n            TEST_CASE(input=\"5 2 8\", expected_output=\"28\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"4 3 5\", expected_output=\"16\"),\n            TEST_CASE(input=\"5 3 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"5 3 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"5 4 3\", expected_output=\"16\"),\n            TEST_CASE(input=\"5 5 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"1 3 3\", expected_output=\"12\"),\n            TEST_CASE(input=\"4 3 5\", expected_output=\"16\"),\n            TEST_CASE(input=\"5 5 5\", expected_output=\"25\"),\n            TEST_CASE(input=\"5 2 1\", expected_output=\"12\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"5 3 5\", expected_output=\"24\"),\n            TEST_CASE(input=\"3 4 1\", expected_output=\"14\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"6 4 1\", expected_output=\"14\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"5 3 5\", expected_output=\"24\"),\n            TEST_CASE(input=\"5 2 1\", expected_output=\"12\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"4 3 5\", expected_output=\"16\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"5 4 3\", expected_output=\"16\"),\n            TEST_CASE(input=\"3 5 1\", expected_output=\"14\"),\n            TEST_CASE(input=\"5 3 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"5 3 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"5 3 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"5 3 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"5 3 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"5 4 3\", expected_output=\"16\"),\n            TEST_CASE(input=\"5 5 3\", expected_"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 9\\n\") == \"8\"\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 9') == '8'\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2 9') == '8'\n\"\"\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 9') == '8'\nassert solution('4 2 1') == '4'\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\": 4 2 9\\n\") == \"8\"\n\"\"\"\n\n\n\nN, A, B = map(int, input().split())\nprint(A*N + B*N)"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\"\"\"\n\nn = int(stdin.readline())\n\nanagrams = 0\n\nfor _ in range(n):\n    s1 = stdin.readline()\n    s2 = stdin.readline()\n    if sorted(s1) == sorted(s2):\n        anagrams += 1\n\nprint(anagrams)\n\n\"\"\"\nTook about 20 minutes.\n\"\"\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\naca\\nbba\") == \"3\"\nassert solution(\"3\\nabcd\\nefgh\\nijkl\\n\") == \"6\"\nassert solution(\"1\\nhijkl\") == \"0\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"acornistnt\") == \"1\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\\n\") == '1'\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\nacornistnt\\npeanutbomb\\nconstraint') == '1'\nprint('Test: OK')"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\nacornistnt\\npeanutbomb\\nconstraint\\n') == '1'\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\ncornistnt\\npeanutbomb\\nconstraint\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n1\n3\n20\n38\n56''') == '''1\n2\n5\n2\n0'''\nprint(\"Test 1 OK.\")\n\nassert solution('''4\n2132\n506\n999999999\n1000000000''') == '''8\n2\n9\n8'''\nprint(\"Test 2 OK.\")\n\nassert solution('''7\n983\n913\n101\n11\n812\n39\n97''') == '''6\n9\n8\n2\n1\n0\n0'''\nprint(\"Test 3 OK.\")\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1122334455\") == \"112\"\nassert solution(\"1\") == \"1\"\nassert solution(\"122333\") == \"2\"\nassert solution(\"122334455\") == \"2\"\nassert solution(\"12233445567\") == \"2\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"56\") == \"0\"\nassert solution
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('56 2 2 1\\n8 9 10 1') == '9 9 0 9'\n'''"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"112123123412345$\\\\dots$\") == \"1\"\nassert solution(\"112123123412345$\\\\dots$1234567\") == \"2\"\nassert solution(\"112123123412345$\\\\dots$1234567\\\\dots\") == \"5\"\nassert solution(\"112123123412345$\\\\dots$1234567\\\\dots12\") == \"4\"\nassert solution(\"112123123412345$\\\\dots$1234567\\\\dots1234\") == \"3\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n1\n3\n20\n38\n56''') == '''1\n2\n5\n2\n0'''\nassert solution('''4\n2132\n506\n999999999\n1000000000''') == '''8\n2\n9\n8'''\n\"\"\""
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n'''\n\nq = int(input())\nlst = [0]\nfor i in range(q):\n    k = int(input())\n    lst.append(k)\n    \nfor i in range(q+1):\n    if lst[i]>0:\n        print(lst[i]%10)\n    else:\n        print(lst[i])"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345123456712345671234567812345678912345678910\"\n\"\"\"\n\nimport sys\n\nq = int(sys.stdin.readline())\n\nfor _ in range(q):\n    k = int(sys.stdin.readline())\n\n    if k < 1:\n        print(0)\n        continue\n\n    print(k % 10)\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12345678910111213141516171819') == '191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"1\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2') == '2'\nassert solution('4 2\\n3 1\\n1 4\\n1 2') == '1'\nassert solution('10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9') == '3'\n\"\"\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n1 4\") == \"1 1\"\nassert solution(\"1 2\\n1 3\") == \"1 1 1\"\nassert solution(\"1 2\\n1 4\\n2 4\") == \"1 1 1 1\"\n\n\"\"\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n2 3\") == \"1\\n2 1\"\nassert solution(\"1 2\\n2 3\\n3 4\") == \"1\\n2 1\\n1 2 2\"\nassert solution(\"1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\") == \"1\\n2 1\\n3 2 1\\n2 2 2\\n3 3 2\\n4 4 2\\n3 3 2\\n1 2 1\\n2 1 2\\n2 3 2\\n4 4 1\\n4 5 1\\n1 5 1\\n1 6 1\\n5 6 1\\n5 7 1\\n6 7 1\\n6 8 1\\n7 8 1\\n3 9 2\\n9 9 2\\n5 9 2\\n5 10 2\\n9 10 2\")\nassert solution(\"1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 1\") == \"1\\n2 1\\n3 2 1\\n2 2 2\\n3 3 2\\n4 4 2\\n3 4 2\\n1 5 1\\n2 5 1\\n3 5 1\\n4 5 1\\n5 6 1\\n6 7 1\\n7 8 1\\n8 9 1\\n9 10 1\\n10 1 2\\n1 10 1\\n1 11 1\\n11 12 1\\n12 1 2\\n2 13 1\\n13 14 1\\n14 15 1\\n3 16 1\\n16 17 1\\n16 18 1\\n17 19 1\\n18 20 1\\n19 21 1\\n20 22 1\\n21 23 1\\n22 24 1\\n23 25 1\\n24 26 1\\n25 27 1\\n26 28 1\\n27 29 1\\n28 30 1\\n29 31 1\\n30 32 1\\n31 33 1\\n32 34 1\\n33 35 1\\n34 36 1\\n35 37 1\\n36 38 1\\n37 39 1\\n38 40 1\\n39 41 1\\n40 42 1\\n41 43 1\\n42 44 1\\n43 45 1\\n44 46 1\\n45 47 1\\n46 48 1\\n47 49 1\\n48 50 1\\n49 51 1\\n50 52 1\\n51 53 1\\n52 54 1\\n53 55 1\\n54 56 1\\n55 57 1\\n56 58 1\\n57 59 1\\n58 60 1\\n59 61 1\\n60 62 1\\n61 63 1\\n62 64 1\\n63 65 1\\n64 66 1\\n65 67 1\\n66 68 1\\n67 69 1\\n68 70 1\\n69 71 1\\n70 72 1\\n71 73 1\\n72 74 1\\n73 75 1\\n74 76 1\\n75 77 1\\n76 78 1\\n77 79 1\\n78 80 1\\n79 81 1\\n80 82 1\\n81 83 1\\n82 84 1\\n83 85 1\\n84 86 1\\n85 87 1\\n86 88 1\\n87 89 1\\n88 90 1\\n89 91 1\\n90 92 1\\n91 93 1\\n92 94 1\\n93 95 1\\n94 96 1\\n95 97 1\\n96 98 1\\n97 99 1\\n98 100 1\")\nassert solution(\"1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 1\") == \"1\\n2 1\\n3 2 1\\n2 2 2\\n3 3 2\\n4 4 2\\n3 4 2\\n1 5 1\\n2 5 1\\n3 5 1\\n4 5 1\\n5 6 1\\n6 7 1\\n7 8 1\\n8 9 1\\n9 10 1\\n10 1 2\\n1 10 1\\n1 11 1\\n11 12 1\\n12 1 2\\n2 13 1\\n13 14 1\\n14 15 1\\n3 16 1\\n16 17 1\\n16 18 1\\n17 19 1\\n18 20 1\\n19 21 1\\n20 22 1\\n21 23 1\\n22 24 1\\n23 25 1\\n24 26 1\\n25 27 1\\n26 28 1\\n27 29 1\\n28 30 1\\n29 31 1\\n30 32 1\\n31 33 1\\n32 34 1\\n33 35 1\\n34 36 1\\n35 37 1\\n36 38 1\\n37 39 1\\n38 40 1\\n39 41 1\\n40 42 1\\n41 43 1\\n42 44 1\\n43 45 1\\n44 46 1\\n45 47 1\\n46 48 1\\n47 49 1\\n48 50 1\\n49 51 1\\n50 52 1\\n51 53 1\\n52 54 1\\n53 55 1\\n54 56 1\\n55 57 1\\n56 58 1\\n57 59 1\\n58 60 1\\n59 61 1\\n60 62 1\\n61 63 1\\n62 64 1\\n63 65 1\\n64 66 1\\n65 67 1\\n66 68 1\\n67 69 1\\n68 70 1\\n69 71 1\\n70 72 1\\n71 73 1\\n72 74 1\\n73 75 1\\n74 76 1\\n75 77 1\\n76 78 1\\n77 79 1\\n78 80 1\\n79 81 1\\n80 82 1\\n81 83 1"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3\\n1 1 2 3 2 3 1 3 1\"\n\nassert solution(\"4 2\\n3 1\\n1 4\\n1 2\") == \"1\\n1 1 1\"\n\nassert solution(\"6 2\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2\\n1 2 1 1 2\"\n\nassert solution(\"6 2\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2\\n1 2 1 1 2\"\n\nassert solution(\"6 2\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2\\n1 2 1 1 2\""
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n1') == '1'\nassert solution('1\\n2\\n3') == '1'\nassert solution('1\\n2\\n3\\n3') == '1'\nassert solution('1\\n2\\n3\\n3\\n4') == '1'\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2') == '2\\n1 2 1 1 2'\nassert solution('4 2\\n3 1\\n1 4\\n1 2') == '1\\n1 1 1'\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 4\\n1 2\\n1 3\\n2 5\") == \"1 2 1 1 2\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3 1 1 2 3 2 3 1 3 1\""
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('5 2\\n1 4\\n4 3\\n3 5\\n3 6') == '2'\nassert solution('10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9') == '3'\nassert solution('1 1\\n1 2') == '1'\nassert solution('4 2\\n3 1\\n1 4\\n1 2') == '1'\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n6 2\n1 4\n4 3\n3 5\n3 6\n5 2\n''') == '2\\n1 2 1 1 2'\nassert solution('''\n4 2\n3 1\n1 4\n1 2\n''') == '1\\n1 1 1'\nassert solution('''\n10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9\n''') == '3\\n1 1 2 3 2 3 1 3 1'"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n1 3\") == '3\\n1 1 2 3 2 3 1 3 1'\nassert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\") == '2\\n1 2 1 1 2 2 1 2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n\n\n-----Tests-----\nSubtask #1.\ntest_1_solution = lib.Subtask(\n    tests=[\n        lib.Test(\n            input=\"4\\n1 2 4 4\",\n            output=\"2 4\"\n        ),\n        lib.Test(\n            input=\"9\\n1 1 8 8 8 4 4 4 4\",\n            output=\"3 8\"\n        ),\n        lib.Test(\n            input=\"7\\n4 3 7 1 4 3 3\",\n            output=\"3 6\"\n        )\n    ]\n)\n\nSubtask #2.\ntest_2_solution = lib.Subtask(\n    tests=[\n        lib.Test(\n            input=\"4\\n1 2 4 4\",\n            output=\"2 4\"\n        ),\n        lib.Test(\n            input=\"9\\n1 1 8 8 8 4 4 4 4\",\n            output=\"3 8\"\n        ),\n        lib.Test(\n            input=\"7\\n4 3 7 1 4 3 3\",\n            output=\"3 6\"\n        )\n    ]\n)\n\nSubtask #3.\ntest_3_solution = lib.Subtask(\n    tests=[\n        lib.Test(\n            input=\"4\\n1 2 4 4\",\n            output=\"2 4\"\n        ),\n        lib.Test(\n            input=\"9\\n1 1 8 8 8 4 4 4 4\",\n            output=\"3 8\"\n        ),\n        lib.Test(\n            input=\"7\\n4 3 7 1 4 3 3\",\n            output=\"3 6\"\n        )\n    ]\n)\n\nSubtask #4.\ntest_4_solution = lib.Subtask(\n    tests=[\n        lib.Test(\n            input=\"4\\n1 2 4 4\",\n            output=\"2 4\"\n        ),\n        lib.Test(\n            input=\"9\\n1 1 8 8 8 4 4 4 4\",\n            output=\"3 8\"\n        ),\n        lib.Test(\n            input=\"7\\n4 3 7 1 4 3 3\",\n            output=\"3 6\"\n        )\n    ]\n)\n\nSubtask #5.\ntest_5_solution = lib.Subtask(\n    tests=[\n        lib.Test(\n            input=\"4\\n1 2 4 4\",\n            output=\"2 4\"\n        ),\n        lib.Test(\n            input=\"9\\n1 1 8 8 8 4 4 4 4\",\n            output=\"3 8\"\n        ),\n        lib.Test(\n            input=\"7\\n4 3 7 1 4 3 3\",\n            output=\"3 6\"\n        )\n    ]\n)\n\nSubtask #6.\ntest_6_solution = lib.Subtask(\n    tests=[\n        lib.Test(\n            input=\"4\\n1 2 4 4\",\n            output=\"2 4\"\n        ),\n        lib.Test(\n            input=\"9\\n1 1 8 8 8 4 4 4 4\",\n            output=\"3 8\"\n        ),\n        lib.Test(\n            input=\"7\\n4 3 7 1 4 3 3\",\n            output=\"3 6\"\n        )\n    ]\n)\n\nSubtask #7.\ntest_7_solution = lib.Subtask(\n    tests=[\n        lib.Test(\n            input=\"4\\n1 2 4 4\",\n            output=\"2 4\"\n        ),\n        lib.Test(\n            input=\"9\\n1 1 8 8 8 4 4 4 4\",\n            output=\"3 8\"\n        ),\n        lib.Test(\n            input=\"7\\n4 3 7 1 4 3 3\",\n            output=\"3 6\"\n        )\n    ]\n)\n\nSubtask #8.\ntest_8_solution = lib.Subtask(\n    tests=[\n        lib.Test(\n            input=\"4\\n1 2 4 4\",\n            output=\"2 4\"\n        ),\n        lib.Test(\n            input=\"9\\n1 1 8 8 8 4 4 4 4\",\n            output=\"3 8\"\n        ),\n        lib.Test(\n            input=\"7\\n4 3 7 1 4 3 3\",\n            output=\"3 6\"\n        )\n    ]\n)\n\nSubtask #9.\ntest_9_solution = lib.Subtask(\n    tests=[\n        lib.Test(\n            input=\"4\\n1 2 4 4\",\n            output=\"2 4\"\n        ),\n        lib.Test(\n            input=\"9\\n1 1 8 8 8 4 4 4 4\",\n            output=\"3 8\"\n        ),\n        lib.Test(\n            input=\"7\\n4 3 7 1 4 3 3\",\n            output=\"3 6\"\n        )\n    ]\n)\n\nSubtask #10.\ntest_10_solution = lib.Subtask(\n    tests=[\n        lib.Test(\n            input=\"4\\n1 2 4 4\",\n            output=\"2 4\"\n        ),\n        lib.Test(\n            input=\"9\\n1 1 8 8 8 4 4 4 4\",\n            output=\"3 8\"\n        ),\n        lib.Test(\n            input=\"7\\n4 3 7 1 4 3 3\",\n            output=\"3 6\"\n        )\n    ]\n)\n\nSubtask #11.\ntest_11_solution = lib.Subtask(\n    tests=[\n        lib.Test(\n            input=\"4\\n1 2 4 4\",\n            output=\"2 4\"\n        ),\n        lib.Test(\n            input=\"9\\n1 1 8 8 8 4 4 4 4\",\n            output=\"3 8\"\n        ),\n        lib.Test(\n            input=\"7\\n4 3 7 1 4 3 3\","
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 4 4\\n\") == \"2 4\"\n\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\\n\") == \"3 8\"\n\nassert solution(\"7\\n4 3 7 1 4 3 3\\n\") == \"3 6\"\n\"\"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2 4\") == \"2 4\"\nassert solution(\"7 1 4 3 7 1 4 3\") == \"3 6\"\n\"\"\"\n\nn = int(input())\nx = list(map(int, input().split()))\nmin_n = max_n = 0\nfor i in range(1, n+1):\n    min_n += abs(x[i]-x[i-1])\n    max_n += abs(x[i-1]-x[n])+1\n\nprint(min_n, max_n)\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 4 4\\n\") == \"2 4\"\n\nprint(solution(\"9\\n1 1 8 8 8 4 4 4 4\\n\"))\nassert solution(\"7\\n4 3 7 1 4 3 3\\n\") == \"3 6\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\nassert solution('7\\n4 3 7 1 4 3 3') == '3 6'\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 4 4\") == '2 4'\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == '3 8'\nassert solution(\"7\\n4 3 7 1 4 3 3\") == '3 6'"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n\"\"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\nassert solution('7\\n4 3 7 1 4 3 3') == '3 6'\n\"\"\""
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n\") == \"3 2 4 1 5\"\n\nprint(solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n\"))\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\n\nassert solution(\"3\\n2 3\\n3 1\\n1 2\") == \"3 1 2\"\n\n\nimport unittest\nfrom solutions.problem067_solution import solution\n\nclass Test067(unittest.TestCase):\n    def test067(self):\n        assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\n\n    def test068(self):\n        assert solution(\"3\\n2 3\\n3 1\\n1 2\") == \"3 1 2\""
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\nassert solution(\"3\\n2 3\\n1 2\\n1 2\") == \"3 1 2\"\n\n\"\"\"\n\nfrom typing import Dict, List, Set\nfrom collections import defaultdict\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 3\\n3 1\\n1 2\\n1 3') == '3 2 1'\nassert solution('3\\n3 1\\n1 2') == '3 1 2'\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == '3 2 4 1 5'\nassert solution(\"4\\n1 2\\n2 3\\n3 4\") == '1 2 3 4'\n\"\"\"\n\n\n\nimport sys\nimport re\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3''') == '3 2 4 1 5'\n\nassert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3''') == '3 2 4 1 5'\n\nassert solution('''5\n2 3\n3 1\n1 2\n1 4\n2 5''') == '3 1 2'\n\nassert solution('''1\n1 1''') == '1'\n\nassert solution('''4\n4 3\n1 3\n2 3\n1 2\n2 1\n1 2\n1 3\n2 1\n2 3\n''') == '3 1 2'"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3') == '3 2 4 1 5'\nassert solution('3\\n2 3\\n3 1\\n1 2') == '3 1 2'\n\"\"\"\n\nimport sys\nimport itertools\nimport math"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == '3 1 2 4'\nassert solution('7\\n2 3\\n1 4\\n5 6\\n3 7\\n1 7\\n4 5') == '3 1 4 2 5 7'\n\n-----Notes-----\n\nThis solution is trivial and not very efficient.\n\"\"\""
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 3\\n3 1\\n1 2') == '3 1 2'\n\"\"\""
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n1 1000 10000 10 100 1000000000\\n') == '1'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\\n') == '10'\nassert solution('6\\n1 1000 10000 10 100 1000000000\\n') == '1'\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 1000 10000 10 100 1000000000\\n\") == \"1\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\\n\") == \"10\"\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\\n\") == \"1\""
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n6\n1 10 17 12 15 2\n''') == '3'\nassert solution('''\n10\n
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 10 17 12 15 2\") == \"3\"\n\"\"\"\n\n\n\nfrom typing import List\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == \"3\"\nassert solution(\"10\\n
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1000 10000 10 100 1000000000\") == \"1\"\nassert solution(\"1 10 17 12 15 2\") == \"3\"\nassert solution(\"1 10 17 12 15 2\") == \"3\"\nassert solution(\"1 10 17 12 15 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"1\"\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\nassert solution(\"10\\n
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n1 1000 10000 10 100 1000000000') == '1'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == '10'\nassert solution('6\\n1 1000 10000 10 100 1000000000') == '1'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == '10'\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n1 1000 10000 10 100 1000000000\\n') == '1'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\\n') == '10'\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 10 17 12 15 2') == 3\nassert solution('3\\n1 1000 10000 10 100') == 1\nassert solution('6\\n1 1000 10000 10 100 1000000000') == 1\nassert solution('10\\n
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '-1'\nassert solution('3 5 2 1') == '4'\nassert solution('15 5 3 2') == '-1'\nassert solution('15 5 4 3') == '5'\nassert solution('15 5 2 1') == '2'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == \"4\\n-1\\n5\\n2\\n0\\n1\"\n\"\"\"\nfrom copy import deepcopy\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''6\n15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n16 7 5 2\n20 5 7 3\n''') == '4\\n-1\\n5\\n2\\n0\\n1'\nprint('Success')\n\n------------------------------------------------------------"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == '4\\n-1\\n5\\n2\\n0\\n1'\nassert solution(\"1 1 1 1\") == '-1'\nassert solution(\"1 1 1 2\\n1 2 1 1\") == '0'\nassert solution(\"1 1 2 1\\n1 2 1 2\") == '2'\nassert solution(\"1 1 1 1\\n1 2 1 2\\n1 1 1 1\") == '-1'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5 2 1\") == \"2\"\nassert solution(\"5 5 3 2\") == \"0\"\nassert solution(\"6 7 5 2\") == \"1\"\n\"\"\"\n\nimport sys\n\nfrom typing import List, Tuple\n\nassert sys.version_info >= (3, 7)\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == '4\\n-1\\n5\\n2\\n0\\n1'\n\"\"\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4\\n-1\\n5\\n2\\n0\\n1'\nassert solution('8 7 5 2\\n8 7 4 3\\n8 7 2 1\\n8 7 5 1\\n8 8 6 2\\n8 8 7 3\\n8 8 8 1\\n8 8 9 2\\n8 8 10 3') == '-1\\n5\\n2\\n0\\n1'\nassert solution('5 2 1 1\\n5 2 2 1\\n5 2 3 1\\n5 2 4 1\\n5 2 5 1\\n5 3 4 2\\n5 3 5 2\\n5 4 5 2\\n5 5 6 2\\n5 5 7 2\\n5 6 7 3\\n5 6 8 3\\n5 7 8 2\\n5 7 9 3\\n5 7 10 3\\n5 8 10 3\\n5 9 10 2\\n5 9 11 2\\n5 10 11 1') == '4\\n2\\n0\\n1'\nassert solution('5 2 1 2\\n5 2 2 1\\n5 2 3 1\\n5 2 4 1\\n5 2 5 1\\n5 3 4 2\\n5 3 5 2\\n5 4 5 2\\n5 5 6 2\\n5 5 7 2\\n5 6 7 3\\n5 6 8 3\\n5 7 8 2\\n5 7 9 3\\n5 7 10 3\\n5 8 10 3\\n5 9 10 2\\n5 9 11 2\\n5 10 11 1') == '4\\n0\\n2\\n1'\nassert solution('5 1 1 1\\n5 1 2 1\\n5 1 3 1\\n5 1 4 1\\n5 1 5 1\\n5 2 4 2\\n5 2 5 2\\n5 3 5 3\\n5 4 5 3\\n5 5 6 3\\n5 6 7 3\\n5 7 8 3\\n5 8 9 3\\n5 9 10 3\\n5 10 11 3\\n5 11 11 1') == '4\\n0\\n2\\n1'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\\n\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5 3 2') == '-1'\nassert solution('15 5 3 2') == '4'\nassert solution('15 5 4 3') == '-1'\nassert solution('15 5 2 1') == '5'\nassert solution('15 5 5 1') == '2'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == '4\\n-1\\n5\\n2\\n0\\n1'\n\"\"\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ac?b?c\") == 24\nassert solution(\"aaaaa\") == 40\nassert solution(\"aac?b?c\") == 56\n\"\"\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\nassert solution(\"???????\") == \"2835\"\nassert solution(\"a???c\") == \"46\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ac?b?c\") == 24\n\"\"\""
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\nassert solution(\"???????\") == \"2835\"\nassert solution(\"cccbbbaaa\") == \"0\"\n\"\"\"\nimport itertools"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ac?b?c\") == 24\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ac?b?c\") == 24\n\nassert solution(\"a???c\") == 46\n\nassert solution(\"ac??\") == 7\n\nassert solution(\"a???c\") == 2835\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ac?b?c\") == 24\n\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ac?b?c\") == 24\n\"\"\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ac?b?c') == '24'\nassert solution('???????') == '2835'\nassert solution('a???c') == '46'\nassert solution('cccbbbaaa') == '0'\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ac?b?c') == '24'\nassert solution('???????') == '2835'\nassert solution('cccbbbaaa') == '0'\nassert solution('a???c') == '46'\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 0\\n1 3 3 7\\n2 3 5\\n2 1 1\\n1 3 10\") == \"18\"\nassert solution(\"4 0\\n1 2 3 7\\n2 3 5\\n2 1 1\\n1 3 10\") == \"16\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n1 3 3\\n2 3 5\\n2 1 1') == '5'\nassert solution('4 0\\n1 3 3 7') == '16'\n\"\"\"\n\nn, m = [int(i) for i in input().split()]\nnums = [int(i) for i in input().split()]\n\nedges = []\nfor _ in range(m):\n    x, y, w = [int(i) for i in input().split()]\n    edges.append((x, y, w))\n\nedges = sorted(edges, key=lambda x: x[2])\n\nans = 0\nedge = 0\n\nfor x, y, w in edges:\n    if nums[x - 1]!= nums[y - 1]:\n        nums[x - 1] = nums[y - 1] = min(nums[x - 1], nums[y - 1]) + w\n        ans += w\n        edge += 1"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3 2\n1 3 3\n2 3 5\n2 1 1\"\"\") == \"5\"\nassert solution(\"\"\"4 0\n1 3 3 7\n\"\"\") == \"16\"\nassert solution(\"\"\"5 4\n1 2 3 4 5\n1 2 8\n1 3 10\n1 4 7\n1 5 15\n\"\"\") == \"18\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 3 3\\n2 3 5\\n2 1 1\\n\") == \"5\"\nassert solution(\"4 0\\n1 3 3 7\\n\") == \"16\"\n\n\n\"\"\"\n\n\nimport sys\nimport collections\nimport heapq"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1\\n3 3 5') == '5'\nassert solution('1 2 3\\n2 3 5') == '5'\nassert solution('1 2 3\\n2 3 5\\n2 1 1') == '3'\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3 2\n1 3 3\n2 3 5\n2 1 1\"\"\") == \"5\"\nassert solution(\"\"\"4 0\n1 3 3 7\"\"\") == \"16\"\nassert solution(\"\"\"5 4\n1 2 3 4 5\n1 2 8\n1 3 10\n1 4 7\n1 5 15\"\"\") == \"18\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 2\n1 3 3\n2 3 5\n2 1 1\n\"\"\") == \"5\"\nassert solution(\"\"\"\n4 0\n1 3 3 7\n\"\"\") == \"16\"\nassert solution(\"\"\"\n5 4\n1 2 3 4 5\n1 2 8\n1 3 10\n1 4 7\n1 5 15\n\"\"\") == \"18\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 3 3 7\\n2 3 5\\n2 1 1\\n1 3 10\\n1 4 7\\n1 5 15\\n\") == \"18\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\\n\") == \"18\"\n\n\"\"\""
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 3 3\\n2 3 5\\n2 1 1\") == \"5\"\nassert solution(\"4 0\\n1 3 3 7\") == \"16\"\n\n\"\"\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n1 3 3\\n2 3 5\") == \"5\"\nassert solution(\"4 0\\n1 3 3 7\") == \"16\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\") == \"-1\"\n\n\"\"\"\n\nimport heapq\nfrom collections import namedtuple\n\nPoint = namedtuple(\"Point\", [\"x\", \"y\"])\nWeight = namedtuple(\"Weight\", [\"x\", \"y\"])\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\n\n\"\"\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 1\\n0 7\\n0 6\") == \"9\"\nassert solution(\"3 2 1\\n0 7\\n0 6\\n8 0\\n0 5\") == \"14\"\nassert solution(\"3 2 1\\n0 7\\n0 6\\n8 1\\n0 5\") == \"14\"\nassert solution(\"3 2 1\\n0 7\\n0 6\\n8 1\\n0 5\\n9 0\\n0 4\") == \"13\"\nassert solution(\"3 2 1\\n0 7\\n0 6\\n8 1\\n0 5\\n9 0\\n0 4\\n0 0\\n0 3\") == \"14\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == '14'\nassert solution(\"10 1 1\\n0 9\\n0 5\") == '45'\nassert solution(\"10 1 1\\n0 9\\n1 5\") == '-1'\n\"\"\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == '14'\nassert solution(\"10 1 1\\n0 9\\n0 5\") == '45'\nassert solution(\"10 1 1\\n0 9\\n1 5\") == '-1'\n\nprint('Success')\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\\n\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\\n\") == \"-1\"\n\"\"\"\n\nimport sys\nimport math\n\nA, N, M = map(int, sys.stdin.readline().strip().split())\nranges = []\nfor _ in range(N):\n    ranges.append(map(int, sys.stdin.readline().strip().split()))\n\numbrellas = []\nfor _ in range(M):\n    umbrellas.append(map(int, sys.stdin.readline().strip().split()))\n\nranges.sort(key=lambda x: x[0])\numbrellas.sort(key=lambda x: x[0])\n\ndp = [[0 for _ in range(A+1)] for _ in range(N+1)]\nprev = [0 for _ in range(A+1)]\n\nfor i in range(1, N+1):\n    r = ranges[i-1]\n    left, right = r[0], r[1]\n    for j in range(1, A+1):\n        curr = dp[i-1][j]\n        if left <= j <= right:\n            prev[j] = curr\n        dp[i][j] = prev[j] + (right - j) * (j - left + 1) * sum(map(lambda x: x[1], umbrellas[:i]))\n\nres = math.inf\nfor j in range(1, A+1):\n    res = min(res, dp[N][j] + (A - j) * (j - 1) * sum(map(lambda x: x[1], umbrellas[:N])))\n\nprint(-1 if res == math.inf else res)\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2\n''') == '14'\nassert solution('''\n10 1 1\n0 9\n0 5\n''') == '45'\nassert solution('''\n10 1 1\n0 9\n1 5\n''') == '-1'\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"-1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\") == \"-1\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 2\") == \"Yes\"\nassert solution(\"4 4 4\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 7 5') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7 5') == 'Yes'\n\"\"\"\nimport sys"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1\") == \"Yes\"\nassert solution(\"1 1 1\") == \"Yes\"\nassert solution(\"1 1 1\") == \"Yes\"\nassert solution(\"1 1 1\") == \"Yes\"\n\nassert solution(\"1 1 1\") == \"Yes\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"3 3 3\") == \"No\"\n\"\"\"\n\na, b, c = [int(i) for i in input().split()]"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 2\") == \"No\"\nassert solution(\"4 5 5\") == \"Yes\"\nassert solution(\"2 2 4\") == \"Yes\"\n\"\"\"\n\nimport sys\nimport unittest\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        # O(1) time | O(1) space\n        if int(stdin.split(' ')[0]) == int(stdin.split(' ')[1]) and int(stdin.split(' ')[1])!= int(stdin.split(' ')[2]):\n            return \"Yes\"\n        elif int(stdin.split(' ')[0]) == int(stdin.split(' ')[2]) and int(stdin.split(' ')[1])!= int(stdin.split(' ')[2]):\n            return \"Yes\"\n        elif int(stdin.split(' ')[1]) == int(stdin.split(' ')[2]) and int(stdin.split(' ')[0])!= int(stdin.split(' ')[2]):\n            return \"Yes\"\n        return \"No\"\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        assert Solution().solution(\"5 7 5\") == \"Yes\"\n        assert Solution().solution(\"1 2 2\") == \"No\"\n        "
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n12 5\\n1000 2000') == '1'\n\"\"\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12 5 1000 2000') == '1'\n\n\"\"\"\n\nimport sys\n\nn, t, a = map(int, sys.stdin.readline().split())\nheights = list(map(int, sys.stdin.readline().split()))\n\nprint(heights.index(min(heights, key=lambda x: abs(t - (x * 0.006)))))\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100') == '1'\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 12 5\\n1000 2000\") == \"1\"\nassert solution(\"4 4\\n1 10 1 10\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 12 5\\n1000 2000') == '1'\n\"\"\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n2\n12 5\n1000 2000\n''') == '1'\nassert solution('''\n4\n12 30\n1 2 3 4\n''') == '2'\nassert solution('''\n1\n12\n1000\n''') == '0'\nassert solution('''\n2\n1 2\n1000 2000\n''') == '0'\nassert solution('''\n2\n10 30\n1000 2000\n''') == '0'\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 1\") == \"0\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"2 2\") == \"1\"\n\nprint(\"All Tests Passed\")\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1') == '1'\n\n\"\"\"\nfrom collections import Counter\nimport itertools\nimport math\nimport numpy as np\nimport pandas as pd\n\nimport unittest\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"1\"\n\nimport unittest\nimport sys\nfrom io import StringIO\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.held, sys.stdin = sys.stdin, StringIO(\"2 1\\n\")\n\n    def test_solution(self):\n        self.assertEqual(solution(), \"1\")\n\n    def tearDown(self):\n        sys.stdin = self.held"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10\") == \"4\"\nassert solution(\"2 1\") == \"1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"4 1\") == \"1\"\nassert solution(\"1 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"7 3\") == \"0\"\nassert solution(\"5 5\") == \"6\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1') == '1'\n\n------Test input-------\n3 3\n1\n2\n3\n\n------Test output-------\n2\n\"\"\""
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1') == '1'\nassert solution('5 5') == '3'\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ACACTACG\") == '2\\n0\\n3'\nassert solution(\"CATCGTA\") == '3\\n0\\n3'\nassert solution(\"AAACTACG\") == '2\\n1\\n4'\n\"\"\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ACACTACG\") == 2\nassert solution(\"ACTACG\") == 1\nassert solution(\"ACG\") == 0\n\"\"\"\n\n\"\"\"\nOne solution:\nfor line in stdin.splitlines():\n    N, Q = line.split(' ')\n    N, Q = int(N), int(Q)\n    for _ in range(Q):\n        l, r = map(int, stdin.split(' '))\n        print(sum([1 for i in range(l, r+1) if N % i == 0]))\n\nassert solution('ACACTACG') == 2\nassert solution('ACTACG') == 1\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''8 3\nACACTACG\n3 7\n2 3\n1 8''') == '2\\n0\\n3'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"CTCGATC\") == \"5\"\nassert solution(\"AAACC\") == \"0\"\nassert solution(\"\") == \"0\"\n\n\"\"\"\n\nimport sys\nimport re\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ACACTACG', 3, 7) == 2\nassert solution('ACACTACG', 3, 2) == 0\nassert solution('ACACTACG', 3, 1) == 3\n\"\"\"\nfrom itertools import zip_longest"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('ABC') == 'A,B,C'\nassert solution('AABB') == 'A,A,B,B'\nassert solution('ABBCCAB') == 'A,B,C,C,B,A,B'\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str_in) == str_out\nprint('Success')\n\n\n\n\n\n\n\n\n\n\n\n-----\n\nimport sys\nsys.setrecursionlimit(100000)"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ACACTACG\") == 2\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ACACTACG\\n3 7\\n2 3\\n1 8\") == \"2\\n0\\n3\"\n\"\"\"\n\nimport collections\nimport sys\n\nfrom itertools import chain\n\ns = sys.stdin.readline()"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\n\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\n\"\"\"\n\nN, K = map(int, input().split())\nprices = list(map(int, input().split()))\n\nprint(sum(prices[:K]))\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n50 100 80 120 80\\n') == 210\n\n\"\"\""
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n50 100 80 120 80') == 210\n\"\"\""
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n50 100 80 120 80\\n') == \"210\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n50 100 80 120 80') == '210'\nprint('Test succeeded')\n\n\"\"\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n50 100 80 120 80') == 210\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\\n\") == \"210\"\n\"\"\"\n\nimport sys\n\n_, k = map(int, sys.stdin.readline().split())\nnums = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\\n\") == 210\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"1 3 2\") == \"4\"\nassert solution(\"1 2 3\") == \"4\"\nassert solution(\"1 2 3 2\") == \"3\"\nassert solution(\"2 3 1\") == \"4\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == solution.__annotations__[0]\n\"\"\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3 4') == '4'\n\n---------------"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"1 2 1\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"2 5 1\") == \"9\"\nassert solution(\"3 1 3\") == \"12\"\n\n\"\"\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3 4') == '4'\nassert solution('1 3 3') == '8'\nassert solution('1 2 5') == '7'\nassert solution('1 3 5') == '7'\nassert solution('4 7 6') == '17'\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"2 3 5\") == \"8\"\nassert solution(\"1 2 3\") == \"4\"\nassert solution(\"1 3 5\") == \"8\"\nassert solution(\"2 3 1\") == \"4\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3 4') == '4'\nassert solution('2 2 2') == '4'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\") == \"0\"\nassert solution(\"7 3\") == \"10\"\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5') == '0'\nprint(solution('3 5'))\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5') == '0'\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5') == 0"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1, 2) == 0\nassert solution(3, 5) == 0\nassert solution(5, 3) == 10\nassert solution(7, 5) == 10\nassert solution(7, 6) == 10\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5') == '0'\n\n\"\"\"\n\nimport sys\n\nN, M = map(int, input().split())\n\nprint(int(N < M))\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5\\n') == '0'\nassert solution('1 3\\n') == '10'\n\"\"\"\n\nimport unittest\nimport sys\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5') == '0'\nassert solution('1 1') == '10'\nassert solution('4 6') == '10'\nassert solution('7 10') == '0'\n\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5') == '0'\nassert solution('3 5') == '0'\nassert solution('2 3') == '10'\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\") == \"0\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 4') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4\\n\") == '1'\n\nimport sys\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7 4''') == '1'\nassert solution('''10101010''') == '10'\n'''\nWrite a Python program to calculate the future value of a specified principal amount, rate of interest, and a number of years.\n\nNote: For simplicity, assume that the interest is compounded monthly.\n\n-----Constraints-----\n1 \u2264 P \u2264 1000\n0 \u2264 i \u2264 15\n0 \u2264 n \u2264 30\n\n-----Input-----\nThe first line contains the principal amount, P.\nThe second line contains the interest rate, i.\nThe third line contains the number of months, n.\n\n-----Output-----\nPrint the future value, F, of the initial principal amount, P at the end of n months.\n\n-----Sample Input-----\n1500 1000 3\n\n-----Sample Output-----\n2222.22222222222222\n\nprincipal_amount = int(input())\ninterest_rate = float(input())\nmonths = int(input())\n\nF = principal_amount*((1 + interest_rate / 12) ** months)\nprint(round(F, 2))\n\nWrite a Python program to calculate the area of a right-angled triangle.\n\nNote: A right-angled triangle has two sides a and b and one angle 90\u00b0.\n\n-----Constraints-----\na < b\n\n-----Input-----\nThe length of the side a\nThe length of the side b\n\n-----Output-----\nThe area of the right-angled triangle\n\n-----Sample Input-----\n5\n3\n\n-----Sample Output-----\n5.0\n\na = int(input())\nb = int(input())\n\nprint(round(a * b / 2, 2))\n\nWrite a Python program to calculate the value of X^2.\n\n-----Constraints-----\n1 \u2264 X \u2264 10\n\n-----Input-----\nX\n\n-----Output-----\nX^2\n\nx = int(input())\nprint(x**2)\n\nWrite a Python program to check whether a given number is a narcissistic number or not.\n\nNote: A narcissistic number is a positive integer that is equal to the sum of its own digits each raised to the power of the number of digits.\n\n-----Constraints-----\n1 \u2264 n \u2264 10^9\n\n-----Input-----\nn\n\n-----Output-----\nn is a narcissistic number.\n\n-----Sample Input-----\n371\n\n-----Sample Output-----\n371 is a narcissistic number.\n\nn = int(input())\n\nis_narcissistic = lambda n: sum(int(d) ** len(str(n)) for d in str(n)) == n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 4\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 4\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 4\") == \"1\"\n\n---\n3.12: Speed and Accuracy\n\nCorrectness and performance\nSuccessfully solved 3.11.\nYour solution meets the criteria. It does not have a lot of extra logic.\n\nPerformance\nYour solution is efficient.\nIt does not unnecessarily recalculate values or create excessive values.\n\nRuntime\nRuntime is very short.\nIt takes less than a second to run.\n\nMemory\nIt uses less than 7 MB of memory.\n\nSpeed / Accuracy\nSpeed is good.\nIt is very close to being correct.\n\nTests\nThe solution passes all 6 tests in the sample cases.\n\"\"\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 4') == '1'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 4') == '1'"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('3 3 6') == 'bust'\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5 4') == 'win'\n\"\"\"\n\nimport sys\nimport unittest\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7 9\") == \"win\"\nassert solution(\"5 4 4\") == \"bust\"\nassert solution(\"1 1 1\") == \"bust\"\nassert solution(\"1 1 2\") == \"win\"\n\n\"\"\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7 9') == \"win\"\nassert solution('4 2 1') == \"bust\"\nassert solution('9 9 9') == \"bust\"\nassert solution('3 3 3') == \"win\"\n\"\"\"\nimport math"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7 9\") == 'win'\n\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('1 1 1') == 'bust'\n\"\"\"\n\na1, a2, a3 = input().split(' ')"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(5, 7, 9) == 'win'\nassert solution(1, 2, 3) == 'bust'\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\n\"\"\"\nimport sys\n\nA = sys.stdin.readline().strip().split(' ')\n\nnum = []\nfor a in A:\n    num.append(int(a))"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('1 1 1') == 'bust'\nassert solution('2 3 4') == 'bust'\nassert solution('6 7 11') == 'win'\nassert solution('2 3 12') == 'win'\n\"\"\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\"\"\""
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3) == 6\n\"\"\""
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6') == '6'\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7') == '12'\nassert solution('3') == '6'\nassert solution('10') == '12'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3) == '6'\nassert solution(1) == '2'\n\"\"\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '6'\nassert solution('2') == '2'\nassert solution('1') == '1'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\""
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"6\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == 6\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(5) == 5\nassert solution(6) == 6\nassert solution(7) == 14\nassert solution(100) == 100\nassert solution(1_000) == 1_000\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\n\nn = input()"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == '2'\n\"\"\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == output\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2\") == 2\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 2\\n3 1\\n5 2\\n4 1\\n2 5\\n7 3\\n1 2') == '3'\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n1 2\\n3 4') == 2\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2\") == 2\nassert solution(\"6 3\") == 2\nassert solution(\"6 4\") == 2\n\"\"\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2\") == \"2\"\n\"\"\"\n\nimport sys\n\ninput_data = list(map(int, sys.stdin.read().split()))\nn = input_data[0]\nd = input_data[1]\napples = list(map(int, sys.stdin.read().split()))\n\ninspectors = 0\nfor apple in apples:\n    if apple + d in apples:\n        inspectors += 1\nprint(inspectors)"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 2\") == 2\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 2\") == 2\n\"\"\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('1\\n2') == '1'\nassert solution('1\\n1\\n1\\n1\\n2\\n2\\n2\\n2') == '1'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n2') == '2'\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('16') == 'pon'\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"16\") == \"pon\"\nprint(solution(\"16\"))\n\nYou can submit your solution through the Box or through slack. This problem is a programming question so you can learn from others.\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"2\") == \"hon\"\nassert solution(\"3\") == \"bon\"\nassert solution(\"4\") == \"hon\"\nassert solution(\"5\") == \"hon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"15\") == \"bon\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('16') == \"pon\"\nassert solution('10') == \"bon\"\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(16) == \"pon\"\n\"\"\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('16') == 'pon'\n\n--------------------------------\n\nfrom unittest import TestCase"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('16') == 'pon'\nassert solution('16') == 'pon'\nassert solution('16') == 'pon'\n\"\"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n3 1 2''') == 11\n\"\"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n3 1 2\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == 11\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\narr = list(map(int, sys.stdin.readline().split()))\n\ntakoyaki_sum = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        takoyaki_sum += arr[i] * arr[j]\n\nprint(takoyaki_sum)\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 2\\n') == 11\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2\\n') == 11\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == 11\n\"\"\"\n\n\"\"\"\nSolution Explanation\nSince there are only three possible choices for eating the two takoyaki, you can just compute the sum of the health points\nafter eating each pair. You can multiply the health points after eating each pair with the number of possible pairings.\n\nFor example, in this case we have:\n\nN = 3, so there are three possible pairings\n\nThe first pairing will eat 1 and 2, so you get 2 health points.\nThe second pairing will eat 2 and 3, so you get 6 health points.\nThe third pairing will eat 1 and 3, so you get 11 health points.\nSo the sum of the health points after eating two pairs is 2 + 6 + 11 = 21.\n\nSo the answer is 21.\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('2\\n3 1 2') == '11'\n\"\"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\") == \"11\"\n\"\"\"\n\nfrom math import comb"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\") == 11\n\n\"\"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\\n\") == \"11\"\n\"\"\""
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1\\n3\\n4\") == '4\\n3\\n4'\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n1\n4\n3''') == '4\\n3\\n4'\n\n\"\"\"\nTests.\n\"\"\"\nimport unittest\nimport unittest.mock as mock\nimport io\nimport sys\n\nclass TestSolution(unittest.TestCase):\n    def test_solution_1(self):\n        stdin = io.StringIO('3\\n1\\n4\\n3\\n')\n        stdout = io.StringIO()\n\n        with mock.patch('sys.stdin', stdin):\n            with mock.patch('sys.stdout', stdout):\n                Solution = Solution()\n                Solution.solution()\n\n                self.assertEqual(stdout.getvalue(), '4\\n3\\n4\\n')"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n1\n4\n3''') == '4\\n3\\n4'\nassert solution('''2\n1\n4\n3''') == '3\\n3\\n4'"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\\n\"\nassert solution(\"3\\n2\\n1\\n4\\n3\\n\") == \"3\\n3\\n3\\n\"\n\"\"\""
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1\\n4\\n3') == '4\\n3\\n4'\nassert solution('5\\n1\\n2\\n3\\n4\\n5') == '5\\n4\\n5\\n5\\n5'\nassert solution('20\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20') == '20\\n20\\n20\\n20\\n20\\n20\\n20\\n20\\n20\\n20\\n20'\nprint(\"Passed.\")\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1\\n4\\n3\\n') == '4\\n3\\n4\\n'\n\n\"\"\""
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n1\n4\n3''') == '''4\n3\n4'''\n\nassert solution('''2\n1\n4\n3''') == '''4\n3'''\n\nassert solution('''200000\n1\n4\n200000''') == '''200000\n4'''\n\nassert solution('''200\n4\n4\n4\n4\n''') == '''4\n4\n4\n4\n4'''\n\nassert solution('''1\n1\n1\n1\n''') == '''1\n1\n1\n1'''"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(':') == ':','solution(\":\",) failed'\n\"\"\"\n\nfrom sys import stdin\n\nN = int(stdin.readline())\nA = [int(stdin.readline()) for _ in range(N)]\n\nmax_el = 0\n\nfor i in range(1, N):\n    if A[i] > max_el:\n        max_el = A[i]\n\nfor i in range(N):\n    if A[i]!= max_el:\n        print(max_el)\n    else:\n        print(A[i])\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n') == '9'\n\"\"\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n\") == \"9\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"9\"\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3') == 9\nassert solution('2 3') == 4\nassert solution('3 2') == 0\n\"\"\"\n\n\"\"\"\nSolution 3\n\nComplexity:\nO(1) time\nO(1) space\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == 9\n\"\"\"\n\nimport sys\n\nn = list(map(int, input().split()))\n\nprint(n[0] * 2 + n[1] * 3)\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3') == '9'\n\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(['5 3']) == '9'\n\"\"\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n\") == '9'\nassert solution(\"4 4\\n\") == '0'\nassert solution(\"2 1\\n\") == '1'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\") == \"9\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"10 10\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\") == \"9\"\n\n-------------\nFor the first test case, the maximum coins you can get is 9.\n\nYou can press the first button twice, each time resulting in a coin of size 4 and a button of size 3.\nSo pressing the first button twice results in the maximum number of coins: 4 + 4 = 8.\n\nYou can press the second button twice, each time resulting in a coin of size 4 and a button of size 2.\nSo pressing the second button twice results in the maximum number of coins: 4 + 4 = 8.\n\nYou can press the third button once, resulting in a coin of size 4 and a button of size 1.\nSo pressing the third button once results in the maximum number of coins: 4 + 4 = 8.\n\nSo, the maximum number of coins you can get is 8.\n\n-------------\nFor the second test case, the maximum coins you can get is 9.\n\nYou can press the first button twice, resulting in a coin of size 5 and a button of size 3.\n\nYou can press the second button twice, resulting in a coin of size 5 and a button of size 2.\n\nYou can press the third button once, resulting in a coin of size 5 and a button of size 1.\n\nSo, the maximum number of coins you can get is 9.\n\n-------------\nFor the third test case, the maximum coins you can get is 10.\n\nYou can press the first button twice, resulting in a coin of size 6 and a button of size 3.\n\nYou can press the second button twice, resulting in a coin of size 6 and a button of size 2.\n\nYou can press the third button once, resulting in a coin of size 6 and a button of size 1.\n\nYou can press the fourth button once, resulting in a coin of size 6 and a button of size 1.\n\nSo, the maximum number of coins you can get is 10.\n\n-------------\nFor the fourth test case, the maximum coins you can get is 10.\n\nYou can press the first button twice, resulting in a coin of size 7 and a button of size 3.\n\nYou can press the second button twice, resulting in a coin of size 7 and a button of size 2.\n\nYou can press the third button once, resulting in a coin of size 7 and a button of size 1.\n\nYou can press the fourth button once, resulting in a coin of size 7 and a button of size 1.\n\nYou can press the fifth button once, resulting in a coin of size 7 and a button of size 1.\n\nSo, the maximum number of coins you can get is 10.\n\n-------------\nFor the fifth test case, the maximum coins you can get is 11.\n\nYou can press the first button twice, resulting in a coin of size 8 and a button of size 3.\n\nYou can press the second button twice, resulting in a coin of size 8 and a button of size 2.\n\nYou can press the third button once, resulting in a coin of size 8 and a button of size 1.\n\nYou can press the fourth button once, resulting in a coin of size 8 and a button of size 1.\n\nYou can press the fifth button once, resulting in a coin of size 8 and a button of size 1.\n\nYou can press the sixth button once, resulting in a coin of size 8 and a button of size 1.\n\nYou can press the seventh button once, resulting in a coin of size 8 and a button of size 1.\n\nSo, the maximum number of coins you can get is 11.\n\n-------------\nFor the sixth test case, the maximum coins you can get is 12.\n\nYou can press the first button twice, resulting in a coin of size 9 and a button of size 3.\n\nYou can press the second button twice, resulting in a coin of size 9 and a button of size 2.\n\nYou can press the third button once, resulting in a coin of size 9 and a button of size 1.\n\nYou can press the fourth button once, resulting in a coin of size 9 and a button of size 1.\n\nYou can press the fifth button once, resulting in a coin of size 9 and a button of size 1.\n\nYou can press the sixth button once, resulting in a coin of size 9 and a button of size 1.\n\nYou can press the seventh button once, resulting in a coin of size 9 and a button of size 1.\n\nYou can press the eighth button once, resulting in a coin of size 9 and a button of size 1.\n\nYou can press the ninth button once, resulting in a coin of size 9 and a button of size 1.\n\nYou can press the tenth button once, resulting in a coin of size 9 and a button of size 1.\n\nYou can press the eleventh button once, resulting in a coin of size 9 and a button of size 1.\n\nYou can press the twelfth button once, resulting in a coin of size 9 and a button of size 1.\n\nSo, the maximum number of coins you can get is 12.\n\n-------------\nFor the seventh test case, the maximum coins you can get is 13.\n\nYou can press the first button twice, resulting in a coin of size 10 and a button of size 3.\n\nYou can press the second button twice, resulting in a coin of size 10 and a button of size 2.\n\nYou can press the third button once, resulting in a coin of size 10 and a button of size 1.\n\nYou can press the fourth button once, resulting in a coin of size 10 and a button of size 1.\n\nYou can press the fifth button once, resulting in a coin of size 10 and a button of size 1.\n\nYou can press the sixth button once, resulting in a coin of size 10 and a button of size 1.\n\nYou can press the seventh button once, resulting in a coin of size 10 and a button of size 1.\n\nYou can press the eighth button once, resulting in a coin of size 10 and a button of size 1.\n\nYou can press the ninth button once, resulting in a coin of size 10 and a button of size 1.\n\nYou can press the tenth button once, resulting in a coin of size 10 and a button of size 1.\n\nYou can press the eleventh button once, resulting in a coin of size 10 and a button of size 1.\n\nYou can press the twelfth button once, resulting in a coin of size 10 and a button of size 1.\n\nYou can press the thirteenth button once, resulting in a coin of size 10 and a button of size 1.\n\nSo, the maximum number of coins you can get is 13.\n\n-------------\nFor the eighth test case, the maximum coins you can get is 14.\n\nYou can press the first button twice, resulting in a coin of size 11 and a button of size 3.\n\nYou can press the second button twice, resulting in a coin of size 11 and a button of size 2.\n\nYou can press the third button once, resulting in a coin of size 11 and a button of size 1.\n\nYou can press the fourth button once, resulting in a coin of size 11 and a button of size 1.\n\nYou can press the fifth button once, resulting in a coin of size 11 and a button of size 1.\n\nYou can press the sixth button once, resulting in a coin of size 11 and a button of size 1.\n\nYou can press the seventh button once, resulting in a coin of size 11 and a button of size 1.\n\nYou can press the eighth button once, resulting in a coin of size 11 and a button of size 1.\n\nYou can press the ninth button once, resulting in a coin of size 11 and a button of size 1.\n\nYou can press the tenth button once, resulting in a coin of size 11 and a button of size 1.\n\nYou can press the eleventh button once, resulting in a coin of size 11 and a button of size 1.\n\nYou can press the twelfth button once, resulting in a coin of size 11 and a button of size 1.\n\nYou can press the thirteenth button once, resulting in a coin of size 11 and a button of size 1.\n\nYou can press the fourteenth button once, resulting in a coin of size 11 and a button of size 1.\n\nYou can press the fifteenth button once, resulting in a coin of size 11 and a button of size 1."
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin))\n\n-----\n3\n6 5\n2 4 3 2 3 2\n\n4\n2 4 6 8\n\n6\n-15 0 9 4 6 3\n\n4\n8 7 8 8\n\n6\n0 0 0 0 1\n\n8\n-15 -9 -7 0 1 2 3\n\n5\n0 1 -1 1 0\n\n7\n-15 -8 0 1 1 2 3\n\n7\n-15 -8 -8 0 1 1 2 3\n\n5\n1 1 1 1 1\n\n3\n-1 1 1\n\n3\n-1 1\n\n3\n1 1\n\n3\n0 1\n\n3\n1 1\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n-30 -10 10 20 50') == '40'\n\"\"\"\nimport sys"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"-30 -10 10 20 50\") == \"40\"\n\n------Problem Source--------\nhttps://www.pramp.com/challenge/xgMdJLrXfJJWz6yVw4dN\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\"\"\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n-10 -5 2\") == \"15\"\n\"\"\"\n\nfrom __future__ import annotations\n\nimport sys\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n-30 -10 10 20 50') == '40'\n\n\"\"\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\n\"\"\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n\nimport math\nfrom typing import List, Dict, Tuple\n\nfrom collections import deque\n\nimport unittest"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\nprint(solution(\"5 3\\n-30 -10 10 20 50\"))"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\"\"\""
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"0\"\nassert solution(\"7 7\") == \"4\""
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 12') == '4'\n\"\"\"\n\na, b = map(int, input().split())\n\nprint(b - a)\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 15\") == 2\n\"\"\"\n\na, b = [int(input()) for _ in range(2)]\nprint(max(0, (b - a - 1) // 2))\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 13') == '2'\nassert solution('8 9') == '1'\n\"\"\"\n\na, b = map(int, stdin.readline().split())"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 15\") == \"2\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 13\") == \"2\"\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 13') == '2'\n\"\"\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 13') == '2'\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/56b1c15a7783c00f290018f6\n\nTesting your solution to this exercise is more complicated because the test is essentially a stack overflow.\nThe trick is to use the Python assert statement to test the code when it's run, which is very helpful.\n\nUsing the assert statement, you can test the code with the input data that you provide."
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 13\\n') == '2'\n\n-----Explanation-----\nIn the first case, the first tower is 10 meters high, and the second tower is 15 meters high.\nThe heights of the two towers are 10 meters and 15 meters, respectively.\nAssuming that the depth of the snow cover is always at least 1 meter, the depth of the snow cover is 2 meters.\n\"\"\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 20\") == \"2\"\nassert solution(\"9 12\") == \"1\"\nassert solution(\"1 10\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 4\") == \"3\"\nassert solution(\"15 6\") == \"2\"\nassert solution(\"20 10\") == \"3\"\nassert solution(\"50 20\") == \"2\"\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 4\") == \"3\"\nprint(solution(\"10 4\"))\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 4\") == 3\n\"\"\"\n\n\"\"\"\n------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nF\n\nB\n\nL\n\nO\n\nV\n\nL\n\nF\n\nO\n\nV\n\nN\n\nW\n\nY\n\nE\n\nW\n\nO\n\nH\n\nU\n\nN\n\nT\n\nD\n\nG\n\nR\n\nM\n\nP\n\nS\n\nE\n\nC\n\nS\n\nS\n\nB\n\nU\n\nL\n\nH\n\nM\n\nE\n\nT\n\nT\n\nE\n\nD\n\nU\n\nT\n\nC\n\nE\n\nM\n\nW\n\nB\n\nE\n\nT\n\nS\n\nE\n\nI\n\nB\n\nO\n\nF\n\nG\n\nT\n\nM\n\nC\n\nH\n\nL\n\nG\n\nT\n\nE\n\nR\n\nE\n\nF\n\nE\n\nM\n\nS\n\nF\n\nG\n\nL\n\nE\n\nP\n\nE\n\nS\n\nG\n\nO\n\nE\n\nO\n\nG\n\nP\n\nY\n\nG\n\nM\n\nS\n\nE\n\nP\n\nU\n\nF\n\nI\n\nW\n\nP\n\nC\n\nW\n\nF\n\nI\n\nW\n\nO\n\nV\n\nL\n\nO\n\nG\n\nS\n\nO\n\nE\n\nE\n\nU\n\nR\n\nE\n\nR\n\nV\n\nE\n\nE\n\nB\n\nF\n\nC\n\nH\n\nO\n\nE\n\nE\n\nH\n\nU\n\nE\n\nO\n\nY\n\nE\n\nN\n\nE\n\nI\n\nN\n\nE\n\nS\n\nC\n\nE\n\nI\n\nE\n\nG\n\nE\n\nI\n\nM\n\nE\n\nG\n\nI\n\nH\n\nO\n\nV\n\nL\n\nE\n\nR\n\nM\n\nE\n\nF\n\nW\n\nM\n\nI\n\nS\n\nH\n\nU\n\nG\n\nO\n\nG\n\nP\n\nS\n\nT\n\nS\n\nE\n\nW\n\nM\n\nI\n\nC\n\nL\n\nO\n\nG\n\nE\n\nO\n\nE\n\nT\n\nS\n\nS\n\nT\n\nE\n\nM\n\nE\n\nE\n\nS\n\nG\n\nG\n\nE\n\nR\n\nM\n\nE\n\nE\n\nG\n\nI\n\nE\n\nM\n\nM\n\nE\n\nW\n\nS\n\nS\n\nM\n\nT\n\nU\n\nE\n\nR\n\nL\n\nE\n\nH\n\nV\n\nF\n\nR\n\nT\n\nF\n\nU\n\nH\n\nG\n\nP\n\nB\n\nN\n\nP\n\nT\n\nP\n\nE\n\nS\n\nB\n\nG\n\nM\n\nG\n\nI\n\nE\n\nY\n\nG\n\nM\n\nE\n\nB\n\nG\n\nG\n\nN\n\nN\n\nE\n\nR\n\nH\n\nU\n\nB\n\nN\n\nE\n\nS\n\nE\n\nT\n\nT\n\nE\n\nT\n\nT\n\nU\n\nE\n\nW\n\nC\n\nR\n\nO\n\nL\n\nM\n\nE\n\nE\n\nE\n\nF\n\nF\n\nO\n\nT\n\nM\n\nG\n\nC\n\nG\n\nT\n\nP\n\nG\n\nR\n\nE\n\nE\n\nE\n\nE\n\nN\n\nV\n\nR\n\nO\n\nS\n\nU\n\nE\n\nS\n\nE\n\nG\n\nS\n\nE\n\nE\n\nS\n\nE\n\nE\n\nL\n\nE\n\nS\n\nF\n\nG\n\nY\n\nO\n\nN\n\nS\n\nN\n\nE\n\nI\n\nE\n\nB\n\nN\n\nE\n\nE\n\nM\n\nE\n\nS\n\nE\n\nG\n\nG\n\nE\n\nT\n\nB\n\nE\n\nE\n\nE\n\nE\n\nE\n\nE\n\nI\n\nO\n\nE\n\nW\n\nE\n\nM\n\nS\n\nE\n\nG\n\nE\n\nS\n\nE\n\nM\n\nN\n\nE\n\nP\n\nE\n\nP\n\nE\n\nE\n\nO\n\nO\n\nE\n\nW\n\nE\n\nN\n\nE\n\nT\n\nU\n\nE\n\nS\n\nS\n\nS\n\nP\n\nE\n\nE\n\nE\n\nS\n\nO\n\nS\n\nE\n\nS\n\nE\n\nE\n\nE\n\nT\n\nE\n\nM\n\nS\n\nE\n\nN\n\nG\n\nN\n\nM\n\nG\n\nC\n\nG\n\nC\n\nT\n\nE\n\nE\n\nS\n\nE\n\nE\n\nE\n\nP\n\nE\n\nW\n\nR\n\nB\n\nI\n\nM\n\nE\n\nE\n\nS\n\nE\n\nM\n\nT\n\nB\n\nG\n\nT\n\nH\n\nO\n\nE\n\nG\n\nR\n\nE\n\nE\n\nE\n\nE\n\nE\n\nE\n\nE\n\nF\n\nF\n\nF\n\nG\n\nF\n\nS\n\nM\n\nW\n\nN\n\nG\n\nE\n\nL\n\nE\n\nL\n\nE\n\nL\n\nL\n\nE\n\nL\n\nO\n\nG\n\nE\n\nE\n\nO\n\nW\n\nC\n\nW\n\nE\n\nR\n\nT\n\nE\n\nE\n\nT\n\nN\n\nE\n\nE\n\nE\n\nO\n\nE\n\nE\n\nE\n\nE\n\nE\n\nE\n\nG\n\nE\n\nE\n\nE\n\nG\n\nT\n\nE\n\nU\n\nE\n\nT\n\nU\n\nG\n\nG\n\nE\n\nT\n\nU\n\nL\n\nG\n\nE\n\nR\n\nE\n\nE\n\nE\n\nB\n\nB\n\nP\n\nE\n\nE\n\nE\n\nE\n\nE\n\nE\n\nF\n\nF\n\nN\n\nT\n\nO\n\nC\n\nE\n\nL\n\nB\n\nG\n\nE\n\nO\n\nE\n\nE\n\nG\n\nE\n\nM\n\nE\n\nE\n\nG\n\nE\n\nE\n\nE\n\nE\n\nE\n\nW\n\nR\n\nO\n\nE\n\nE\n\nM\n\nE\n\nB\n\nE\n\nE\n\nF\n\nE\n\nE\n\nP\n\nE\n\nG\n\nE\n\nE\n\nO\n\nE\n\nE\n\nE\n\nE\n\nE\n\nE\n\nE\n\nE\n\nE\n\nM\n\nE\n\nE\n\nE\n\nM\n\nT\n\nE\n\nM\n\nM\n\nE\n\nF\n\nE\n\nE\n\nE\n\nO\n\nE\n\nN\n\nE\n\nG\n\nU\n\nE\n\nE\n\nE\n\nE\n\nE\n\nE\n\nG\n\nE\n\nF\n\nF\n\nE\n\nE\n\nF\n\nE\n\nN\n\nM\n\nB\n\nE"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 4\") == \"3\"\nprint(solution(\"10 4\"))\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 4\") == 3\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 4\") == 3\n\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 4') == '3'"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 4') == '3'\nassert solution('5 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2 3') == '3'\nassert solution('1 2 3 4') == '5'\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nassert solution(\"0 0 0 0\") == \"0\"\nassert solution(\"100 100 100 100\") == \"0\"\nassert solution(\"0 0 0 0\") == \"0\"\n\"\"\""
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('0 75 25 100') == '50'\nassert solution('0 75 25 20') == '25'\nassert solution('0 20 20 0') == '20'\nassert solution('0 0 0 0') == '0'\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nprint(solution(\"0 75 25 100\"))"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 75 25 100') == '50'\nassert solution('3 5 4 8') == '4'\nassert solution('0 1 2 3') == '0'\nassert solution('0 0 0 0') == '0'\nassert solution('0 100 10 20') == '10'\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nassert solution(\"0 75 25 100\")!= \"50\"\nassert solution(\"0 75 25 101\") == \"0\"\nassert solution(\"0 75 25 100 D\") == \"0\"\n\n'''"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 75 25 100') == '50'\n\"\"\"\nfrom functools import lru_cache"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nassert solution(\"75 0 25 100\") == \"50\"\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(105) == 1\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(105) == 1\n\"\"\"\n\nfrom math import ceil, sqrt"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('105') == '1'\nprint(solution('105'))"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"105\") == 1\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('105') == '1'\n\"\"\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('105') == 1\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('105') == '1'\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\"\n\nn = int(input())\n\nodd = 0\nfor i in range(1, n + 1):\n    if i % 2!= 0:\n        odd += 1\n        for j in range(1, 8):\n            if i ** j <= n:\n                odd -= 1\n\nprint(odd)\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\"\n\nfrom math import ceil, floor\n\nn, k = map(int, stdin.split())"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3') == '1'\nassert solution('1 1') == '0'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"1\"\n\"\"\"\n\nn, k = input().split()\nk = int(k)\nn = int(n)\n\nmax_crackers = 1\nmin_crackers = 1\n\nfor i in range(k):\n    if i % 2 == 0:\n        max_crackers *= (n-1)\n        min_crackers *= (n-1)\n    else:\n        max_crackers *= (n)\n        min_crackers *= (n)\n\nprint(abs(max_crackers - min_crackers))\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 3\\n2 2 3') == '1'\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\"\n\nfrom typing import List\nimport unittest\n\n\nclass DistributeCandies:\n    def solution(self, stdin: str) -> str:\n        candies = list(map(int, stdin.split()))\n        min_num = min(candies)\n        return str(max(candies) - min_num)\n\n\nclass TestDistributeCandies(unittest.TestCase):\n    def test_solution_1(self):\n        self.assertEqual(DistributeCandies().solution(\"7 3\"), \"1\")\n\n    def test_solution_2(self):\n        self.assertEqual(DistributeCandies().solution(\"10 10\"), \"0\")\n\n    def test_solution_3(self):\n        self.assertEqual(DistributeCandies().solution(\"3 5\"), \"1\")\n\n    def test_solution_4(self):\n        self.assertEqual(DistributeCandies().solution(\"7 4\"), \"0\")\n\n    def test_solution_5(self):\n        self."
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\") == 1\n\"\"\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\") == \"1\"\nassert solution(\"10 5\") == \"0\"\nassert solution(\"100 50\") == \"50\"\nassert solution(\"100 51\") == \"1\"\nassert solution(\"20 50\") == \"10\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\"\n\nimport sys\n\nN, K = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"111\") == \"111\"\n\n\"\"\"\n\nn = int(input())\n\nbase = 10\n\nans = base**n - 1\n\nprint(ans)\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"111\") == \"111\"\nassert solution(\"111\")!= \"110\"\nassert solution(\"101010\") == \"101010\"\n\"\"\"\n\nN = input()\n\n\"\"\"\nIn this problem,\nwe can use a simple method of finding the Nth number in the Fibonacci sequence.\nThis is a great example of a problem that can be solved with a simple example.\nThe Fibonacci numbers are defined recursively as follows:\n    f[0] = 0\n    f[1] = 1\n    f[n] = f[n-1] + f[n-2]\n    where f[n] is the nth Fibonacci number.\nWith this definition, we can write an expression for f[n] = 1 + 5**0.5:\n    f[n] = 1 + 5**0.5\n    (1) - f[n] = 5**0.5\n    (2) - 5**0.5 - 1 = 4.5\n    (3) - 5**0.5 = 2.2360679775\n    (4) - f[n] = 2.2360679775\n    (5) - f[n] - 1 = 2.2360679775 - 1\n    (6) - f[n] - 1 < 0\n    (7) - f[n] - 1 = -0.5\n    (8) - f[n] = 0.5\nWith (1) and (7), we can determine when a Fibonacci number is an integer.\nWith (2) and (3), we can determine when a Fibonacci number is less than one.\nWith (4), we can determine when a Fibonacci number is an integer or less than one.\nWith (5), we can determine when a Fibonacci number is greater than one.\nWith (6), we can determine when a Fibonacci number is equal to one.\nWith (8), we can determine when a Fibonacci number is greater than one.\n\nThis solution correctly passes all sample tests.\n\"\"\"\nf = lambda n: (1 + 5**0.5) / 2 + 5**0.5 - 1\n\nn = int(N)\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('111') == '111'\nassert solution('110') == '1010'\nassert solution('101') == '1011'\nassert solution('100') == '1100'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('111') == '111'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('111') == '111'\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n\nN = int(input())\nprint(N)\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('111') == '111'\nassert solution('112') == '211'\nassert solution('113') == '311'\nassert solution('114') == '411'\nassert solution('115') == '511'\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('111') == '111'\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 6 3\") == \"5\"\nassert solution(\"4 1 3\") == \"5\"\nassert solution(\"4 1 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 6 3') == '5'\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 6 3\") == '5'\nprint(solution(\"1 6 3\"))\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1 6 3''') == '5'\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 6 3') == '5'\n\"\"\"\n\nA = [int(x) for x in stdin.split()]\nprint(sum(abs(x-y) for x, y in zip(A, sorted(A))))"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\"\n\n\"\"\"\nTODO: RTFM\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 4\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 6 3\") == \"5\"\nprint(solution(\"1 6 3\"))\n\n------------Solution------------\n\nA_1, A_2, A_3 = [int(x) for x in stdin.split()]\nA = [0, A_1, A_2, A_3]\n\ncost = 0\nfor i in range(3):\n    cost += A[i] - A[i+1]\nprint(cost)\n\n'''\n\nimport sys\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 6 3') == '5'\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 6 3\") == \"5\"\nprint(solution(\"1 6 3\"))\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8') == '5'\n\"\"\"\n\ns = int(stdin.readline().strip())\na = [s]\n\nfor i in range(1, 1000001):\n    if a[i - 1] % 2 == 0:\n        a.append(a[i - 1] // 2)\n    else:\n        a.append(3 * a[i - 1] + 1)\n\nprint(a.index(s))\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8') == '5'\nassert solution('8', '4') == '8'\nassert solution('8', '3') == '5'\nassert solution('8', '7') == '7'\nassert solution('8', '9') == '5'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8') == '5'\nassert solution('7') == '3'\nassert solution('1') == '1'\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8') == 5\n\"\"\"\n\ns = int(stdin.readline())\n\na = [s]\ni = 1\nwhile True:\n    if a[-1] % 2 == 0:\n        a.append(a[-1] // 2)\n    else:\n        a.append(3 * a[-1] + 1)\n    if a[i] == a[i - 1]:\n        break\n    i += 1\nprint(i)\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(8) == 5\nassert solution(5) == 5\n\"\"\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8') == '5'\nassert solution('8') == '5'\nassert solution('1') == '1'\nassert solution('1') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8') == '5'\n\"\"\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8') == '5'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\") == \"5\"\nprint(solution(\"8\"))\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"10 10 10 10\") == \"Yes\"\n\n\"\"\"\n\nA, B, C, D = [int(x) for x in stdin.strip().split()]\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\"\n\na, b, c, d = map(int, input().split())\nprint(\"Yes\" if a > b else \"No\")\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 9 10 10') == 'No'\nassert solution('1 1 1 1') == 'Yes'\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 9 10 10\") == \"No\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a=\"10 9 10 10\") == \"No\"\nassert solution(a=\"1 10 10 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 9 10 10') == 'No'\nassert solution('9 9 10 10') == 'Yes'\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"1 1 1 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 9 10 10') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\"\n\na, b, c, d = [int(num) for num in stdin.split(' ')]"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\"\n\nclass Creature:\n    def __init__(self, hp, atk):\n        self.hp = hp\n        self.atk = atk"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\n\"\"\"\nimport collections\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\n\nimport math\nfrom collections import defaultdict"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n10 2 5\\n6 3 4') == '5'\n\"\"\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\n\nn = int(input())\nv, c = [], []\nfor _ in range(n):\n    v_, c_ = map(int, input().split())\n    v.append(v_)\n    c.append(c_)\n\nv.sort()\nc.sort()\nres = 0\n\nfor i in range(n):\n    res += v[i] - c[i] if v[i] > c[i] else 0\n\nprint(res)\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\n\nimport math\nfrom typing import List"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\nimport sys\nimport functools\n\nassert len(sys.argv) == 2\n\nN = int(sys.argv[1])\n\nlines = sys.stdin.readlines()\n\nN, lines = int(lines[0]), lines[1:]\n\nvalues = [int(n) for n in lines[:N]]\ncosts = [int(n) for n in lines[N:]]"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n10 2 5\\n6 3 4') == '5'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('.#..#\\n.....\\n#####\\n....#\\n...##') == '#.#\\n###\\n.#.'\nassert solution('....\\n#..#\\n#..#\\n#..#\\n#..#\\n.##\\n...') == '#..\\n.##\\n#..\\n...'\n\n\"\"\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"3 3\\n.##\\n###\\n.##\"\nassert solution(\"4 4\\n#.#\\n....\\n#.#\\n.#.#\") == \"3 3\\n.##\\n###\\n.##\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4 4\n##.#\n....\n##.#\n.#.#\n\"\"\") == \"\"\"\n3 3\n.##\n.##\n.##\n\"\"\"\n\nassert solution(\"\"\"\n4 4\n.#.#\n.##.\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"4 4\n##.#\n....\n##.#\n.#.#\n\"\"\") == \"###\\n###\\n.##\"\nassert solution(\"\"\"4 4\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\n\"\"\"\n\nfrom typing import List\nimport math\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n##.#\\n....\\n##.#\\n.#.#\\n') == '###\\n###\\n.##\\n'\n\"\"\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\nassert solution(\"4 4\\n##.#\\n....\\n##.#\\n#.#\") == \"###\\n###\\n.##\"\nassert solution(\"4 4\\n#.#\\n....\\n##.#\\n#.#\") == \"###\\n###\\n.##\"\nassert solution(\"4 4\\n#.#\\n....\\n##.#\\n#.#\") == \"###\\n###\\n.##\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"3 3\\n.##\\n.##\\n.##\"\nassert solution(\"4 4\\n###\\n#.#\\n#.#\\n\") == \"1 1\\n#.#\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n##.#\\n....\\n##.#\\n.#.#\\n') == '###\\n###\\n.##\\n'\n\n\"\"\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\n\"\"\"\n\nimport sys\n\nh, w = map(int, sys.stdin.readline().split())\ngrid = [sys.stdin.readline() for _ in range(h)]"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == '6.28318530717958623200'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '6.28318530717958623200'\nassert solution('2') == '12.566370614359172106'\nassert solution('3') == '19.638752093021521015'\nassert solution('4') == '31.006229007633623238'\nassert solution('5') == '62.96071571837265771'\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\n\"\"\"\n\n\"\"\"\nExplanation\na = 1\nR = a\n\nn = 1\nR = 1 + n * 2\nn = 2\nR = 2 + n * 2\nn = 3\nR = 2 + 3 * 2\nn = 4\nR = 4 + n * 2\nn = 5\nR = 2 + 5 * 2\nn = 6\nR = 6 + n * 2\nn = 7\nR = 2 + 7 * 2\nn = 8\nR = 8 + n * 2\nn = 9\nR = 2 + 9 * 2\nn = 10\nR = 10 + n * 2\nn = 11\nR = 2 + 11 * 2\nn = 12\nR = 12 + n * 2\nn = 13\nR = 2 + 13 * 2\nn = 14\nR = 14 + n * 2\nn = 15\nR = 2 + 15 * 2\nn = 16\nR = 16 + n * 2\nn = 17\nR = 2 + 17 * 2\nn = 18\nR = 18 + n * 2\nn = 19\nR = 2 + 19 * 2\nn = 20\nR = 20 + n * 2\n\nSince R = a + n(2), R - R(1) = n(2) which is equal to 2n, R - R(1) = 2n and R = n(2) + 2.\n\nTherefore, the circumference of the circle is 2n * pi.\n\"\"\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n') == '6.28318530717958623200'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '6.28318530717958623200'\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n') == '6.28318530717958623200'\nassert solution('2\\n') == '12.566370614359172953850'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '6.28318530717958623200'\nassert solution('10') == '62.831853071795862'\nassert solution('100') == '6283.1853071795862'\nassert solution('1000') == '62831853071795862'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"1\"\n) == '6.28318530717958623200'\n\nassert solution(\n\"2\"\n) == '12.566370614359172953850'\n\nassert solution(\n\"100\"\n) == '5040.0'\n\n-----\nThe solution below is very inefficient."
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '6.28318530717958623200'\n\"\"\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"AAAA\") == \"Yes\"\nassert solution(\"ASDF\") == \"No\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ASSS') == 'Yes'\nassert solution('ASSSW') == 'No'\nassert solution('AAAA') == 'Yes'\nassert solution('AAAAA') == 'No'\n\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('ASS') == 'Yes'\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"BASA\") == \"No\"\nassert solution(\"ABAB\") == \"Yes\"\nassert solution(\"AAAB\") == \"No\"\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ASAS') == 'Yes'\nassert solution('ABABA') == 'No'\nassert solution('AAAA') == 'Yes'\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ASSA') == \"Yes\"\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('AAAA') == 'Yes'\nassert solution('AAAS') == 'No'\nassert solution('ASAS') == 'Yes'\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\n\"\"\"\n\n\"\"\"\nimport re\nimport sys\n\nfor line in sys.stdin:\n    if re.search(r'([A-Z])\\1', line) and re.search(r'([A-Z])\\1', line)[0] == re.search(r'([A-Z])\\1', line)[0]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\"\"\"\n\nimport re\n\nfor line in sys.stdin:\n    if re.search(r'([A-Z])\\1', line) and re.search(r'([A-Z])\\1', line)[0] == re.search(r'([A-Z])\\1', line)[0]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"ABCD\") == \"No\"\nassert solution(\"AAAA\") == \"Yes\"\nassert solution(\"ABBA\") == \"No\"\nassert solution(\"ABCD\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"-13 3\") == \"-10\"\nprint('Hooray!')\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"-13 3\") == \"10\"\n\n\"\"\"\n\n\n\"\"\"\n8. Write a program to find the number of occurrences of each character in the string.\nInput Format\n\nInput contains a string.\n\nConstraints\n\n\nOutput Format\n\nPrint the number of occurrences of each character in the string.\n\nSample Input 0\n\nabcdabcdababde\nSample Output 0\n\na,5\nb,3\nc,2\nd,2\ne,1\nSample Input 1\n\nabcdabd\nSample Output 1\n\na,1\nb,1\nc,1\nd,2\nd,1\ne,1\nSample Input 2\n\nabcdefg\nSample Output 2\n\na,1\nb,1\nc,1\nd,2\ne,1\nf,1\ng,1\nSample Input 3\n\n12aa33b21bcd\nSample Output 3\n\na,1\nb,3\nc,1\nd,2\n\n\"\"\"\n\n\n\"\"\"\n9. Write a program to print the number of occurrences of each character in the string.\nInput Format\n\nInput contains a string.\n\nConstraints\n\nOutput Format\n\nPrint the number of occurrences of each character in the string.\n\nSample Input 0\n\nabcdabcdababde\nSample Output 0\n\na,5\nb,3\nc,2\nd,2\ne,1\nSample Input 1\n\nabcdabd\nSample Output 1\n\na,1\nb,1\nc,1\nd,2\nd,1\ne,1\nSample Input 2\n\nabcdefg\nSample Output 2\n\na,1\nb,1\nc,1\nd,2\ne,1\nf,1\ng,1\nSample Input 3\n\n12aa33b21bcd\nSample Output 3\n\na,1\nb,3\nc,1\nd,2\n\n\"\"\"\n\n\n\"\"\"\n10. Write a program to find the total number of digits and letters in the string.\nInput Format\n\nInput contains a string.\n\nConstraints\n\nOutput Format\n\nPrint the total number of digits and letters in the string.\n\nSample Input 0\n\nabcd1234123ghi\nSample Output 0\n\n13\n27\nSample Input 1\n\nabcd\nSample Output 1\n\n4\n4\nSample Input 2\n\nABCD123\nSample Output 2\n\n5\n4\nSample Input 3\n\nabcd1234123ghi\nSample Output 3\n\n5\n13\n\n\"\"\"\n\n\n\"\"\"\n11. Write a program to compute the sum of digits of a number in Python.\nInput Format\n\nInput contains a positive integer.\n\nConstraints\n\nOutput Format\n\nPrint the sum of digits of the given number in Python.\n\nSample Input 0\n\n10\nSample Output 0\n\n1\nSample Input 1\n\n151\nSample Output 1\n\n5\nSample Input 2\n\n12345\nSample Output 2\n\n15\nSample Input 3\n\n123456\nSample Output 3\n\n21\n\n\"\"\"\n\n\n\"\"\"\n12. Write a program to count and display the number of each character in a string.\nInput Format\n\nInput contains a string.\n\nConstraints\n\nOutput Format\n\nPrint the number of occurrences of each character in the string.\n\nSample Input 0\n\nabcdabcdababde\nSample Output 0\n\na,5\nb,3\nc,2\nd,2\ne,1\nSample Input 1\n\nabcdabd\nSample Output 1\n\na,1\nb,1\nc,1\nd,2\nd,1\ne,1\nSample Input 2\n\nabcdefg\nSample Output 2\n\na,1\nb,1\nc,1\nd,2\ne,1\nf,1\ng,1\nSample Input 3\n\n12aa33b21bcd\nSample Output 3\n\na,1\nb,3\nc,1\nd,2\n\n\"\"\"\n\n\n\"\"\"\n13. Write a program to find the longest word in a given string.\nInput Format\n\nInput contains a string.\n\nConstraints\n\nOutput Format\n\nPrint the longest word in the string.\n\nSample Input 0\n\nabcd efgh ijklmnopqrstuvwxyz\nSample Output 0\n\nijklmnopqrstuvwxyz\nSample Input 1\n\nThe quick brown fox jumps over the lazy dog\nSample Output 1\n\nThe\nSample Input 2\n\nThis is good to know\nSample Output 2\n\nThis\nSample Input 3\n\nthis is good to know\nSample Output 3\n\nthis\n\n\"\"\"\n\n\n\"\"\"\n14. Write a program to calculate the sum of first n natural numbers.\nInput Format\n\nInput contains a integer.\n\nConstraints\n\nOutput Format\n\nPrint the sum of first n natural numbers.\n\nSample Input 0\n\n5\nSample Output 0\n\n15\nSample Input 1\n\n2\nSample Output 1\n\n3\nSample Input 2\n\n0\nSample Output 2\n\n0\n\n\"\"\"\n\n\n\"\"\"\n15. Write a program to count the number of even and odd digits in a given number.\nInput Format\n\nInput contains a integer.\n\nConstraints\n\nOutput Format\n\nPrint the number of even digits and odd digits in the given number.\n\nSample Input 0\n\n123321\nSample Output 0\n\n1\n2\n3\nSample Input 1\n\n123\nSample Output 1\n\n0\n1\n2\nSample Input 2\n\n1112\nSample Output 2\n\n2\n1\nSample Input 3\n\n12345\nSample Output 3\n\n0\n0\n0\n1\nSample Input 4\n\n12321\nSample Output 4\n\n0\n0\n0\n1\nSample Input 5\n\n12\nSample Output 5\n\n1\n0\n\n\"\"\"\n\n\n\"\"\"\n16. Write a program to find the frequency of occurrence of each character in a string.\nInput Format\n\nInput contains a string.\n\nConstraints\n\nOutput Format\n\nPrint the frequency of occurrence of each character in the string.\n\nSample Input 0\n\nabcdabcdababde\nSample Output 0\n\na,5\nb,3\nc,2\nd,2\ne,1\nSample Input 1\n\nabcdabd\nSample Output 1\n\na,1\nb,1\nc,1\nd,2\nd,1\ne,1\nSample Input 2\n\nabcdefg\nSample Output 2\n\na,1\nb,1\nc,1\nd,2\ne,1\nf,1\ng,1\nSample Input 3\n\n12aa33b21bcd\nSample Output 3\n\na,1\nb,3\nc,1\nd,2\n\n\"\"\"\n\n\n\"\"\"\n17. Write a program to swap cases.\nInput Format\n\nInput contains a string.\n\nConstraints\n\nOutput Format\n\nPrint the strings in the upper case or lower case format.\n\nSample Input 0\n\nPython is great\nSample Output 0\n\npYTHON iS gREAT\nSample Input 1\n\nPYTHON\nSample Output 1\n\nPYTHON\nSample Input 2\n\nPython\nSample Output 2\n\npYTHON\nSample Input 3\n\nPython is great\nSample Output 3\n\npYTHON iS gREAT\n\n\"\"\"\n\n\n\"\"\"\n18. Write a program to swap comma and dot in a string.\nInput Format\n\nInput contains a string.\n\nConstraints\n\nOutput Format\n\nPrint the string with swapped comma and dot format.\n\nSample Input 0\n\nPython,PHP\nSample Output 0\n\nPython.PHP\nSample Input 1\n\nPython.PHP\nSample Output 1\n\nPython,PHP\nSample Input 2\n\nPython.PHP\nSample Output 2\n\nPython,PHP\nSample Input 3\n\nPython,PHP\nSample Output 3\n\nPython.PHP\n\n\"\"\"\n\n\n\"\"\"\n19. Write a program to compute the sum of digits of a given number.\nInput Format\n\nInput contains a integer.\n\nConstraints\n\nOutput Format\n\nPrint the sum of digits of the given number.\n\nSample Input 0\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('-13 3') == '-10'\n\"\"\"\n\nimport sys\n\nA, B = map(int, sys.stdin.readline().split())\nprint(-max(A + B, A - B, A * B))"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''-13 3''') == '-10'\nassert solution('''-13 -3''') == '-16'\nassert solution('''-13 3''') == '-39'\n\"\"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"-13 3\") == \"10\"\nassert solution(\"1 3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('-13 3') == '-10'\n\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\n\nimport pytest\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '3'\nassert solution('2 1') == '2'\nassert solution('-1 -1') == '-2'\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\nassert solution('5\\n2 5 4 8 10') == '2'\n\"\"\"\nfrom itertools import combinations\nimport sys"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n6 5 6 8''') == 3\n\n-----\n4\n6 5 6 8\n\n3\n\n4\n6 5 6 8\n\n3\n\n5\n6 5 6 8 10\n\n3\n\n20\n
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\nh = list(map(int, sys.stdin.readline().rstrip().split()))\n\nh.sort(reverse=True)\n\ncount = 0\nfor i in range(n - 1):\n    if i == 0:\n        if h[i] <= h[i + 1]:\n            count += 1\n    elif i == n - 1:\n        if h[i - 1] <= h[i]:\n            count += 1\n    else:\n        if h[i] <= h[i + 1] and h[i] <= h[i - 1]:\n            count += 1\nprint(count)\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input) == expected\n\nprint(solution(input))\n\n-----\nYou can see the ocean from the first, third and fourth inns from the west.\n\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first,"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n6 5 6 8\") == 3\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\n'''"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n6 5 6 8') == 3\nprint(solution(stdin))\n\n'''\n\nn = int(stdin.readline())\nmountain = list(map(int, stdin.readline().split()))\nsea = 0\nfor i in range(n):\n    if i!= 0:\n        if mountain[i - 1] <= mountain[i]:\n            sea += 1\n\nprint(sea)\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n\") == \"1\\n5\\n1 2 3 4 5\"\n\"\"\"\n\nstdin = input()\n\nn = int(stdin.split(\"\\n\")[0])\n\ns = stdin.split(\"\\n\")[1:]\n\nr = []\nl = []\nfor el in s:\n    r.append(int(el))\n    l.append(int(el))\n\nfor i in range(n):\n    j = 0\n    a = l[i]\n    if l[i] in r:\n        if l[i] > l[i + 1]:\n            r.remove(l[i])\n        else:\n            l.remove(l[i + 1])\n    else:\n        r.append(l[i])\n\nprint(len(r))\nprint(\" \".join([str(el) for el in r]))\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''7\n1 2 3 1 2 3 4''') == '2\\n3 4\\n'\nassert solution('''4\n1 1 1 1''') == '4\\n1 1 1 1\\n'\nassert solution('''5\n1 2 1 2 1''') == '1\\n5\\n'\nassert solution('''5\n1 2 1 2 1''') == '1\\n5\\n'\nassert solution('''5\n1 2 1 2 1''') == '1\\n5\\n'\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == 2\nassert solution(\"4\\n1 1 1 1\") == 4\nassert solution(\"5\\n1 2 1 2 1\") == 3\nassert solution(\"5\\n1 1 1 1\") == 4\nassert solution(\"5\\n1 2 1 2 1\") == 3\nprint(\"Success\")"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\n\"\"\"\n\nn = int(input())\nl = list(map(int, input().split()))\ncount = 0\nprev = l[0]\nfor i in l[1:]:\n    if i > prev:\n        count += 1\n    prev = i\nprint(count + 1)\nprint(*l)"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\"\nassert solution(\"4\\n1 1 1 1\") == \"4\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"3\"\n\"\"\"\n\na = input().split()\na = list(map(int, a))"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\n\"\"\"\n\nfrom collections import Counter\n\nstdin = stdin.split(\"\\n\")\nn = int(stdin[0])\narr = [int(i) for i in stdin[1].split()]\n\ns = dict(Counter(arr))\n\nprint(len(s))\nprint(*s.values())\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == '2\\n3 4'\nassert solution(\"4\\n1 1 1 1\") == '4\\n1 1 1 1'\nassert solution(\"5\\n1 2 1 2 1\") == '1\\n5'\nassert solution(\"5\\n1 2 1 2 1\") == '1\\n5'\nprint('test passed')\n\nfrom collections import Counter\n\na = Counter(map(int, stdin.split()[1:]))\nres = []\ni = 1\nwhile len(a) > 0:\n    if i in a:\n        res.append(i)\n        a[i] -= 1\n        if a[i] == 0:\n            del a[i]\n    i += 1\nprint(len(res))\nprint(' '.join(map(str, res)))\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\n\"\"\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 1 2 1\\n\") == \"3\\n2 2 1\"\nassert solution(\"5\\n1 1 1 1\\n\") == \"4\\n1 1 1 1\"\nassert solution(\"7\\n1 2 3 1 2 3 4\\n\") == \"2\\n3 4\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 1 2 1\\n\") == \"3\\n2 2 1\"\nassert solution(\"5\\n1 1 1 1\\n\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 3 4 5\\n\") == \"1\\n5\"\nassert solution(\"7\\n1 2 3 1 2 3 4\\n\") == \"2\\n3 4\"\n\n\"\"\"\n\nn = int(stdin.readline())\n\nlst = list(map(int, stdin.readline().split()))\n\nlst.sort()\n\ncount = 1\ni = 0\nres = []\nfor i in range(n-1):\n    if lst[i] == lst[i+1]:\n        count += 1\n    else:\n        res.append(count)\n        count = 1\nres.append(count)\nprint(res)\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '9\\n9\\n9\\n10\\n10\\n10\\n'\nassert solution('8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n') == '12\\n12\\n12\\n12\\n12\\n12\\n14\\n14\\n'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == 1\nassert solution(6) == 2\nassert solution(7) == 1\nassert solution(21) == 7\nassert solution(28) == 4\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n6\") == \"1\"\nassert solution(\"7\\n21\") == \"4\"\nassert solution(\"999999999\\n999999984\") == \"333333328\""
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n6\") == \"1\"\nassert solution(\"7\\n21\") == \"4\"\nassert solution(\"2\\n28\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n7\\n1\\n2\\n3\\n4\\n5\\n1\\n2\\n3\\n4\\n5\\n1\\n2\\n3\\n4\\n5\\n1\\n2\\n3\\n4\\n5\\n') == '1\\n2\\n1\\n7\\n4\\n333333333\\n333333328'\nassert solution('3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1') == '2'\nassert solution('1\\n1') == '1'\nassert solution('3\\n10') == '0'\nassert solution('3\\n20') == '1'\nassert solution('3\\n30') == '2'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\") == \"1\"\n\nassert solution(\"2\\n1\") == \"2\"\n\nassert solution(\"2\\n2\") == \"1\"\n\nassert solution(\"5\\n7\") == \"1\"\n\nassert solution(\"5\\n9\") == \"4\""
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1') == '1'\nassert solution('2\\n3') == '2'\nassert solution('3\\n3') == '1'\nassert solution('3\\n6') == '2'\nassert solution('7\\n21') == '7'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n6') == '1'\nassert solution('7\\n21') == '2'\nassert solution('7\\n28') == '1'\nassert solution('7\\n999999999') == '3'\nassert solution('7\\n999999984') == '2'\n\"\"\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n9') == '1'\nassert solution('7\\n21') == '4'\nassert solution('7\\n999999999') == '3'\nassert solution('7\\n999999984') == '2'\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"512 4\") == \"50\"\n\nassert solution(\"1000000000 9\") == \"1\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\"\"\"\n\nimport os\nimport sys\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"512 4\") == \"50\"\n\nsolution(\"1000000000 9\") == \"1\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"512 4\") == \"50\"\n\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\"\"\"\n\nn, k = input().split()\n\nn, k = int(n), int(k)"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\n\n########################################################################################\n\nimport math"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\nassert solution(test_input_4) == test_output_4\n\nprint(solution(input()))\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 5 1 2 2 1') == '5'\nassert solution('5 1 4') == '2'\nassert solution('7 1 5') == '2'\nassert solution('7 5 1') == '2'\nassert solution('7 2 5') == '2'\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''7\n4 3 5 1 2 2 1\n''') == '5\\n2 1 1 2 3', \"Test #1.1 failed.\"\nassert solution('''5\n3 7 5 1 5\n''') == '2\\n5 5', \"Test #1.2 failed.\"\nassert solution('''3\n5 1 4\n''') == '2\\n5 5', \"Test #1.3 failed.\"\nassert solution('''7\n2 2 3 2 1 2 2\n''') == '7\\n1 2 2 2 2 3 2', \"Test #1.4 failed.\"\n\nprint(\"\\n*** ALL TESTS PASSED. HOP ALONG NOW! ***\\n\")"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5) == 5\nassert solution(5) == 5\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1') == '5\\n2 1 1 2 3'\nassert solution('5\\n3 7 5 1 5') == '2\\n5 5'\nassert solution('3\\n5 1 4') == '2\\n4 5'\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == '5\\n2 1 1 2 3'\nassert solution(\"5\\n3 7 5 1 5\") == '2\\n5 5'\nassert solution(\"3\\n5 1 4\") == '2\\n4 5'\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1 4\\n') == '2 1 1 2 3'\nassert solution('7 1 4\\n') == '2 1 1 2 2 2 3'"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1') == '5\\n2 1 1 2 3'\nassert solution('5\\n3 7 5 1 5') == '2\\n5 5'\nassert solution('3\\n5 1 4') == '2\\n4 5'\nassert solution('7\\n2 2 3 2 1 2 2') == '7\\n1 2 2 2 2 3 2'\nassert solution('5\\n3 7 5 1 5') == '2\\n5 5'\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"4 21\n10 8\n7 4\n3 1\n5 4\"\"\"\n) == '2'\nassert solution(\n    \"\"\"4 16\n10 8\n7 4\n3 1\n5 4\"\"\"\n) == '-1'\nassert solution(\n    \"\"\"4 15\n10 8\n7 4\n3 1\n5 4\"\"\"\n) == '1'\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\"\nassert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\""
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == '2'\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == '-1'\n\"\"\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 21\\n10 8\\n7 4\\n3 1\\n5 4') == '2'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '-1'"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 8\\n7 4\\n3 1\\n5 4\") == '2'\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == '-1'\nassert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == '2'\n\"\"\"\n\n_, m = map(int, input().split())\narr = []\nfor _ in range(int(input())):\n    arr.append([int(i) for i in input().split()])\n\narr.sort(key=lambda x: x[1], reverse=True)\n\ncnt = 0\ncap = 0\nfor x, y in arr:\n    if cap + y > m:\n        break\n    else:\n        cap += y\n        cnt += 1\n\nprint(cnt if cap + arr[-1][1] <= m else -1)\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 21\\n10 8\\n7 4\\n3 1\\n5 4') == '2'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '-1'\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 21\\n10 8\\n7 4\\n3 1\\n5 4') == '2'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '-1'\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\n\"\"\"\n\nn, m = [int(i) for i in input().split(' ')]\ns = [0 for i in range(n)]\nfor i in range(n):\n    a, b = [int(i) for i in input().split(' ')]\n    s[i] = a\n    if a > m:\n        s[i] = b\n    else:\n        s[i] = m\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == '2'\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == '-1'\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == '2'\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 5 3\\n6 1 1\\n6 6 1') == 'tleelte'\nassert solution('7 5 3\\n6 1 1\\n6 6 1') == 'qwerty'\nassert solution('7 5 3\\n6 1 1\\n6 6 1') == 'vvvvvv'\nassert solution('7 5 3\\n6 1 1\\n6 6 1') == 'abcde'\n\n'''"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 5 3\\n6 1 1\\n6 6 1\") == \"tleelte\"\nassert solution(\"7 5 3\\n6 1 1\\n6 6 1\") == \"qwerty\"\nassert solution(\"7 5 3\\n6 6 1\") == \"vvvvvv\"\nassert solution(\"7 5 3\\n5 2 2\") == \"abcde\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 5 3') == 'tleel'\n\"\"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\") == \"tleelte\\nqwerty\\nvvvvvv\\nabcde\"\n\"\"\"\nimport io\nimport os\nimport sys\nfrom collections import deque\nimport threading\nfrom functools import reduce\nfrom itertools import combinations"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5 3\") == \"tleel\"\n\"\"\"\n\nt = int(input())"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n\"\"\""
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n\n\nimport math\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n\"\"\"\n\nimport os\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n\n\"\"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 5 3') == 'tleelte'\nassert solution('6 1 1') == 'qwerty'\nassert solution('6 6 1') == 'vvvvvv'\nassert solution('5 2 2') == 'abcde'\n\n\n-----Hints-----\n\nThe answer can be constructed by concatenating as many parts as needed to meet the requirements. To find a solution, the number of parts is enough.\n\nCan you sort the values of length $a$ and check the number of distinct values in each part?\n\nCan you use hashmaps to solve this problem?\n\n\n-----Solution-----\n\n\"\"\""
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == '0'\nassert solution('2 3 6') == '4'\nassert solution('4 3 1') == '5'\nassert solution('5 3 5') == '10'\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n\n\"\"\"\n\nN, X, T = map(int, input().split())\n\nstart = N // X\ntime = X * start\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n\"\"\""
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20 12 6') == '12'\n\"\"\""
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20 12 6') == '12'\n\"\"\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 12 6\") == 12\n\"\"\"\n\n\nimport math\n\nN, X, T = [int(i) for i in stdin.readline().split(' ')]\n\nresult = math.ceil(N / (X - T)) * (X - T) + T * (N - N // (X - T))\n\nprint(result)\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('20 12 6') == '12'\n\"\"\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 6 4') == '4'\nassert solution('1 1 1') == '3'\nassert solution('1 1 10') == '10'\nassert solution('2 2 2') == '0'\nassert solution('1 1 1') == '3'\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 12 6\") == \"12\"\nassert solution(\"20 12 6\") == \"12\"\nassert solution(\"20 12 6\") == \"12\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('20 12 6') == '12'\nassert solution('20 12 6') == '12'\nassert solution('100 2 5') == '50'\nassert solution('1 0 1') == '0'\nassert solution('1 1 1') == '0'\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n3\\n2\\n1\\n1\\n') == '3'\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str("
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 0\nassert solution('123') == 3\nassert solution('123456789') == 4\n\n'''\n\nimport sys"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\n') == '2'\nassert solution('3\\n') == '1'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n3\\n5\\n4\\n1\\n5\\n4') == '2'\nassert solution('5\\n3\\n5\\n4\\n1') == '1'\nassert solution('7\\n7\\n7\\n7\\n7\\n7\\n7\\n7') == '0'\nassert solution('8\\n8\\n8\\n8\\n8\\n8\\n8\\n8') == '1'\nassert solution('7\\n7\\n7\\n7\\n7\\n7\\n7\\n7') == '0'\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\") == 2\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == '2'\nassert solution('10') == '3'\nassert solution('8') == '2'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == output()\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('10') == '3'\nassert solution('10\\n5') == '4'\nassert solution('10\\n5\\n2') == '5'\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8\\n') == '2'\nassert solution('7\\n') == '2'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == 3\nassert solution(\"3 2\") == 2\nassert solution(\"1 2\") == 1\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3\\n') == '3'\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3\\n') == '3'\nassert solution('2 3\\n') == '4'\nassert solution('3 3\\n') == '4'\nassert solution('100 4\\n') == '100'\nassert solution('0 0\\n') == '0'\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3') == '3'\nprint(solution(stdin=input()))\n\"\"\"\n\n\n\n\"\"\"\nBINARY SEARCH\n\nPROBLEM: Given an array of integers, find the index of the first occurrence of a given number in the array.\n\n-----Constraints-----\n - All values in input are integers.\n - 0 \\leq A[i] \\leq 10^9\n - 0 \\leq B \\leq 10^9\n - 1 \\leq C \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n3\n10 20 30 30 40 50\n40\n\n-----Output-----\nPrint the index of the first occurrence of B in the array.\n\n-----Sample Input-----\n3\n10 20 30 30 40 50\n40\n\n-----Sample Output-----\n1\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given a string s, find the longest palindromic substring in s.\n\n-----Constraints-----\n - The string s consists of only uppercase and lowercase English letters.\n - 1 \\leq s.length \\leq 3000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nHELLEHOLLEHOLLE\n\n-----Output-----\nPrint the longest palindromic substring in s.\n\n-----Sample Input-----\nHELLEHOLLEHOLLE\n\n-----Sample Output-----\nHELLO\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given an array of integers, find the pair of adjacent elements that has the largest product and return that product.\n\n-----Constraints-----\n - 1 \\leq A[i] \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n5\n5 4 3 2 3\n\n-----Output-----\nPrint the largest product possible.\n\n-----Sample Input-----\n5\n5 4 3 2 3\n\n-----Sample Output-----\n20\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given a list of numbers, find the length of the longest increasing subsequence in the given list of numbers.\n\n-----Constraints-----\n - 1 \\leq A[i] \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 3 5 2 4 6\n\n-----Output-----\nPrint the length of the longest increasing subsequence.\n\n-----Sample Input-----\n1 3 5 2 4 6\n\n-----Sample Output-----\n4\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given an array of numbers, find the length of the longest increasing subsequence in the given array of numbers.\n\n-----Constraints-----\n - 1 \\leq A[i] \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 3 5 2 4 6\n\n-----Output-----\nPrint the length of the longest increasing subsequence.\n\n-----Sample Input-----\n1 3 5 2 4 6\n\n-----Sample Output-----\n4\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given a list of numbers, find the length of the longest increasing subsequence in the given list of numbers.\n\n-----Constraints-----\n - 1 \\leq A[i] \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 3 5 2 4 6\n\n-----Output-----\nPrint the length of the longest increasing subsequence.\n\n-----Sample Input-----\n1 3 5 2 4 6\n\n-----Sample Output-----\n4\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given a list of numbers, find the longest increasing subsequence in the given list of numbers.\n\n-----Constraints-----\n - 1 \\leq A[i] \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 3 5 2 4 6\n\n-----Output-----\nPrint the longest increasing subsequence.\n\n-----Sample Input-----\n1 3 5 2 4 6\n\n-----Sample Output-----\n[1, 2, 3, 4, 5, 6]\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given a list of numbers, find the longest increasing subsequence in the given list of numbers.\n\n-----Constraints-----\n - 1 \\leq A[i] \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 3 5 2 4 6\n\n-----Output-----\nPrint the longest increasing subsequence.\n\n-----Sample Input-----\n1 3 5 2 4 6\n\n-----Sample Output-----\n[1, 2, 3, 4, 5, 6]\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given a list of numbers, find the longest increasing subsequence in the given list of numbers.\n\n-----Constraints-----\n - 1 \\leq A[i] \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 3 5 2 4 6\n\n-----Output-----\nPrint the longest increasing subsequence.\n\n-----Sample Input-----\n1 3 5 2 4 6\n\n-----Sample Output-----\n[1, 2, 3, 4, 5, 6]\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given a list of numbers, find the longest increasing subsequence in the given list of numbers.\n\n-----Constraints-----\n - 1 \\leq A[i] \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 3 5 2 4 6\n\n-----Output-----\nPrint the longest increasing subsequence.\n\n-----Sample Input-----\n1 3 5 2 4 6\n\n-----Sample Output-----\n[1, 2, 3, 4, 5, 6]\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given a list of numbers, find the longest increasing subsequence in the given list of numbers.\n\n-----Constraints-----\n - 1 \\leq A[i] \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 3 5 2 4 6\n\n-----Output-----\nPrint the longest increasing subsequence.\n\n-----Sample Input-----\n1 3 5 2 4 6\n\n-----Sample Output-----\n[1, 2, 3, 4, 5, 6]\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given a list of numbers, find the longest increasing subsequence in the given list of numbers.\n\n-----Constraints-----\n - 1 \\leq A[i] \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 3 5 2 4 6\n\n-----Output-----\nPrint the longest increasing subsequence.\n\n-----Sample Input-----\n1 3 5 2 4 6\n\n-----Sample Output-----\n[1, 2, 3, 4, 5, 6]\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given a list of numbers, find the longest increasing subsequence in the given list of numbers.\n\n-----Constraints-----\n - 1 \\leq A[i] \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 3 5 2 4 6\n\n-----Output-----\nPrint the longest increasing subsequence.\n\n-----Sample Input-----\n1 3 5 2 4 6\n\n-----Sample Output-----\n[1, 2, 3, 4, 5, 6]\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given a list of numbers, find the longest increasing subsequence in the given list of numbers.\n\n-----Constraints-----\n - 1 \\leq A[i] \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 3 5 2 4 6\n\n-----Output-----\nPrint the longest increasing subsequence.\n\n-----Sample Input-----\n1 3 5 2 4 6\n\n-----Sample Output-----\n[1, 2, 3, 4, 5, 6]\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given a list of numbers, find the longest increasing subsequence in the given list of numbers.\n\n-----Constraints-----\n - 1"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3') == '3'\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3\\n') == 3\n\n\"\"\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"3\"\nassert solution(\"4 5\") == \"2\"\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"3\"\n\n-----\nWe can first make one apple pie by simmering two of the three pieces of apple. Then, we can make two more by simmering the remaining piece and three more pieces obtained by cutting the whole apple.\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n') == '0'\nassert solution('3 1\\n') == '1'\nassert solution('3 2\\n') == '2'\nassert solution('3 3\\n') == '3'\n'''"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 12\") == '16'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 12') == '16'\nassert solution('1 1') == '0'\n\"\"\"\n\na, b = map(int, input().split())\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 12') == '16'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 12\") == \"16\"\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 12\") == \"16\"\n\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 12') == '16'\nprint(solution(stdin))\n\n'''"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 12') == '16'\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 12') == '16'\nassert solution('8 12') == '0'\n\"\"\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 12\\n\") == \"16\"\nassert solution(\"4 16\\n\") == \"12\"\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 12') == '16'\nprint(solution('4 12'))\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\nassert solution(\"asdfadsf\") == \"No\"\nassert solution(\"asdfadsfz\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\n\"\"\"\n\ns, t = (input() for i in range(2))\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\nassert solution('chokudak') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\nassert solution(\"badminton\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 16\") == \"9\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 16\") == \"9\"\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 16') == '9'\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\n2 4') == 'IMPOSSIBLE'\nassert solution('8 6\\n4 7') == '5'\nassert solution('1 0\\n2 10') == 'IMPOSSIBLE'\nassert solution('2 1\\n1 2') == '3'\nassert solution('1 1\\n2 2') == '1'"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 16') == '9'\nprint(solution('2 16'))"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 16\") == \"9\"\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 16') == '9'\n\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 16\") == \"9\"\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 16') == '9'\nassert solution('5 20') == 'IMPOSSIBLE'\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == IMPOSSIBLE\n\n----------------------\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(117) == \"Yes\"\nassert solution(123) == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('117') == 'Yes'\nassert solution('4') == 'No'\n\"\"\"\n\n\"\"\"\nGiven a string of digits, you need to reverse the digits.\n\nExamples:\nInput:  \"12345\"\nOutput: \"54321\"\n\nInput:  \"456\"\nOutput: \"654\"\n\nInput:  \"91234\"\nOutput: \"4321\"\n\nInput:  \"86779\"\nOutput: \"98776\"\n\"\"\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"117\") == \"Yes\"\nprint(solution(\"117\"))\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('117') == 'Yes'\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('117') == 'Yes'\nassert solution('987') == 'No'"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == \"Yes\"\nassert solution('7') == \"Yes\"\nassert solution('4') == \"No\"\nassert solution('3') == \"No\"\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11') == 'No'\nassert solution('7') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('117') == 'Yes'\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('117') == 'Yes'\n\nassert solution('777') == 'Yes'\n\nassert solution('777') == 'Yes'\n\nassert solution('897') == 'No'\n\nassert solution('000') == 'No'"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('117') == 'Yes'\nprint(solution('117'))\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"\nfrom functools import reduce"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12') == 'Yes'\n\"\"\"\nimport sys"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\") == \"Yes\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12') == 'Yes'\n\"\"\"\nimport sys"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12\") == \"Yes\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('101') == 'Yes'\nassert solution('12') == 'Yes'\nassert solution('1234') == 'No'\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12') == 'Yes'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\""
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == output\nprint(f\"Successfully prepared function. Output is {output}.\")\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n\n\"\"\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 0 1\") == \"0 1 -1 0\"\n\"\"\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\"\n\nfrom typing import List\nimport math\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 0 0 1') == '1 1 -1 0'"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('red blue') == '2 4'\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\""
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n\nS, T = input().split()\nA, B = input().split()\n\nA, B = int(A), int(B)\n\nU = input()\n\ns1 = 0\ns2 = 0\n\nfor i in range(A):\n    if S == U:\n        s1 += 1\n    else:\n        s2 += 1\n\nfor j in range(B):\n    if T == U:\n        s1 += 1\n    else:\n        s2 += 1\n\nprint(s1, s2)"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''red blue\n3 4\nred''') == '2 4'\n\n'''\n---Problem 03: Sequence Equation---\nThe sequence of integers from 1 to n is called a sequence (or arithmetic sequence for n > 1).\n\nIn a sequence, each term after the first is found by adding the same constant to the previous term.\n\nThe constant difference between successive terms in a sequence is called the common difference.\n\nFor example, the sequence (1, 2, 3, 4, 5, 6, 7, 8, 9) has a common difference of 1.\n\nThe difference between the consecutive terms in a sequence can be determined from the following formula:\n\ndifference = (a - b) / n\n\nIf the denominator is 0, then the common difference is undefined.\n\nFor the sequence (1, 3, 5, 7, 9), the sequence of differences would be:\n\n1, 1/2, 1/3, 1/4, 1/5, 1/6, 1/7, 1/8, 1/9\n\nWrite a function common_difference(sequence) that, given the sequence of integers as input,\nreturns the common difference of that sequence.\n\n-----Constraints-----\n - sequence is a list of integers with at least two entries.\n - sequence is in non-decreasing order.\n - sequence is in the range 1 <= n <= 10^7\n\n-----Sample Input-----\n[1, 3, 5, 7, 9]\n\n-----Sample Output-----\n1.0\n\n-----Explanation-----\nThe sequence is (1, 3, 5, 7, 9)\n\nThe common difference is 1.0 since it is the average of the difference between consecutive terms.\n'''"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''red blue\n3 4\nred''') == '2 4'\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\""
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n4\nc\ncc\n\"\"\") == \"Yes\"\n\n\"\"\"\nGiven are two strings A and B of length N. Find the length of the longest string C,\nsuch that C can be obtained by concatenating A with B and B with A.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - A, B consists of lowercase English letters.\n - |A| = N\n - |B| = N\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA\nB\n\n-----Output-----\nPrint the length of C.\n\n-----Sample Input-----\n4\nd\nh\n\n-----Sample Output-----\n2\n\n\"\"\""
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abcbac') == 'No'\nassert solution('aaaaaa') == 'Yes'\nassert solution('aabaa') == 'No'\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'No'\nassert solution('abcabc') == 'Yes'\nassert solution('abcabcabc') == 'Yes'\nassert solution('abcabcdef') == 'No'\n\n\"\"\""
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abcabc') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abcabcabcabc') == 'Yes'\nassert solution('abcbac') == 'No'\nassert solution('abcabcabcbac') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\nassert solution(\"abcabcabc\") == \"Yes\"\nassert solution(\"abccba\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcabc') == 'Yes'\n\"\"\""
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input) == expected_result\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abcabc') == 'Yes'\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\n\n\"\"\"\n\nfrom sys import stdin, stdout\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 1 2\\n') == '3.000000 0'\n\"\"\"\n\nimport re\n\nimport sys\n\npattern = re.compile(r'(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)')\n\nresult = 0"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 1 2') == '3.0 0'\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 1 2\") == \"3.0 0\""
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 1 2\") == \"3.000000 0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\nassert solution(\"2 3 2 1\") == \"3.000000 0\"\nassert solution(\"5 2 3 4\") == \"10.000000 1\"\nassert solution(\"5 2 3 5\") == \"10.000000 1\"\nassert solution(\"2 3 3 1\") == \"3.000000 1\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 1 2\") == \"3.000000 0\"\n\"\"\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n    2 3 1 2\n    \"\"\"\n) == \"3.000000 0\"\n\n\"\"\"\nInput:\n1 4 1 2\nOutput:\n0\nExplanation:\nNo line can be drawn which cuts the area into two parts of equal or smaller area.\n\nInput:\n3 3 1 1\nOutput:\n1.000000 1\nExplanation:\nDrawing a line x = 0 will cut the area into two parts of equal area.\nDrawing a line x = 2 will cut the area into two parts of equal area.\nDrawing a line x = 1 will cut the area into two parts of unequal area.\nThere is no way to cut the area into two parts of equal or smaller area.\n\nInput:\n6 7 1 1\nOutput:\n0.500000 1\nExplanation:\nDrawing a line x = 1 will cut the area into two parts of equal area.\nDrawing a line x = 3 will cut the area into two parts of equal area.\nDrawing a line x = 2 will cut the area into two parts of unequal area.\nThere is no way to cut the area into two parts of equal or smaller area.\n\"\"\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 1 2\") == \"3.0 0\"\n\"\"\""
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\nassert solution(\"4 2 2 2\") == \"2.000000 2\"\nassert solution(\"10 10 10 10\") == \"0.000000 1\"\nassert solution(\"0 0 1 1\") == \"0.000000 1\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 G W P Y W') == 'Four'\nassert solution('4 W G Y P Y W') == 'Four'\n\"\"\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 G Y P Y W') == 'Four'\nassert solution('3 G W Y P Y W') == 'Four'\nassert solution('3 G W Y P Y P') == 'Three'\n\n\"\"\"\nimport unittest\nimport sys\nimport collections\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\nG W Y P Y W\") == \"Four\"\n\"\"\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 W P G Y G W P\") == \"Four\"\nassert solution(\"8 G W P G Y G G W W P W P P W\") == \"Eight\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 G Y P W\\nG P G G') == \"Four\"\nassert solution('1 G\\nG G G') == \"Three\"\nassert solution('1 W\\nW W W') == \"Four\"\nassert solution('2 W G\\nG G G') == \"Four\"\nassert solution('2 W G\\nG G G\\nG G G') == \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 G W P Y W') == 'Four'\nassert solution('4 G W Y P Y W') == 'Four'\nassert solution('3 P G W Y W') == 'Four'\nassert solution('4 P G W Y Y') == 'Four'\nassert solution('3 P G W P Y W') == 'Four'\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\nG W Y P Y W') == 'Four'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\nP\\nW\\nG\") == \"Three\"\nassert solution(\"4\\nP\\nW\\nG\\nY\") == \"Four\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6GWWYPPYYW') == 'Four'\nassert solution('2YWPG') == 'Three'\nassert solution('3YYGW') == 'Four'\nassert solution('6YYG') == 'Four'\nassert solution('3GYY') == 'Three'\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6\nG W Y P Y W''') == 'Four'\nassert solution('''6\nW G Y P Y W''') == 'Four'\nassert solution('''6\nP W G Y P W''') == 'Three'\nassert solution('''6\nW P Y G G Y''') == 'Three'\nassert solution('''6\nW P G W G Y''') == 'Three'\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 3 2\\n2 3 1 3 4 2') == 6\nassert solution('5 3 3\\n1 2 4 2 3') == 2\nassert solution('5 5 6\\n1 2 6 10 3') == 2\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3 2\\n2 3 1 3 4 2\") == 6\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3 2\\n2 3 1 3 4 2\") == 6\nassert solution(\"5 3 3\\n1 2 4 2 3\") == 2\n\n\"\"\"\n\nn, x, y = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\n\ncnt = 0\nfor i in range(len(a)):\n    if a[i] >= x:\n        a[i] -= x\n        if a[i] >= y:\n            a[i] += y\n            cnt += 1\n        else:\n            a[i] = 0\nprint(cnt)\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 3 2\\n2 3 1 3 4 2') == '6'\nassert solution('5 3 3\\n1 2 4 2 3') == '2'\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\n\"\"\""
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output\n\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 3\\n1 2 6 10 3\\n\") == 2\nassert solution(\"6 3 2\\n2 3 1 3 4 2\\n\") == 6\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == '1'\nassert solution(test_input_2) == '3'\nassert solution(test_input_3) == '1'\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 3\\n1 2 6 10 3\\n') == 2\n\"\"\"\n\nimport sys\n\nDEBUG = False\ndata = sys.stdin.read().strip().split()\nn, x, y = [int(i) for i in data]\na = [int(i) for i in sys.stdin.read().strip().split()]\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 2\") == \"6\"\nassert solution(\"5 3 3\") == \"2\"\n\"\"\"\n\nfrom itertools import accumulate\nfrom functools import partial\n\nn, x, y = map(int, input().split())\ndurabilities = list(map(int, input().split()))\n\nn_max = 0\nn_min = 0\nfor i in range(n):\n    n_max = max(n_max, durabilities[i])\n    n_min = min(n_min, durabilities[i])\n\nsum_durabilities = list(accumulate(durabilities, partial(lambda x, y: max(0, y - x))))\nsum_durabilities.append(0)\n\nans = 0\n\nfor i in range(n_min, n_max + 1):\n    for j in range(n):\n        if i == durabilities[j]:\n            for k in range(j + 1, n):\n                if sum_durabilities[k] - sum_durabilities[j] == x:\n                    ans += 1\n                    break\n\nprint(ans)\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 2 6 2\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == solution(test_input_2)\n\n\"\"\"\nfrom typing import List, Iterator\nimport unittest\n\nclass UnionFind:\n    def __init__(self, size: int) -> None:\n        self.parent = [i for i in range(size + 1)]\n        self.size = [1] * (size + 1)\n    def find(self, i: int) -> int:\n        if self.parent[i] == i:\n            return i\n        self.parent[i] = self.find(self.parent[i])\n        return self.parent[i]\n    def union(self, x: int, y: int) -> None:\n        x = self.find(x)\n        y = self.find(y)\n        if self.size[x] < self.size[y]:\n            x, y = y, x\n        self.parent[y] = x\n        self.size[x] += self.size[y]\n    def same_check(self, x: int, y: int) -> bool:\n        return self.find(x) == self.find(y)\n\nclass Solution:\n    def __init__(self, n: int, m: int, a: List[int], b: List[int]) -> None:\n        self.n = n\n        self.a = a\n        self.b = b\n    def good_pairs(self) -> int:\n        uf = UnionFind(self.n)\n        ans = 0\n        for i in range(self.n):\n            for j in range(i + 1, self.n):\n                if self.a[i] + self.a[j] > self.b[i] + self.b[j]:\n                    if not uf.same_check(i, j):\n                        uf.union(i, j)\n                        ans += 1\n        return ans\n\nclass TestSolution(unittest.TestCase):\n    def test_equal(self):\n        self.assertEqual(Solution(5, [4, 8, 2, 6, 2], [4, 5, 4, 1, 3]).good_pairs(), 7)"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8 2 6 2\\n4 5 4 1 3\") == \"7\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_stdin_1) == test_stdout_1\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 8 2 6 2\\n4 5 4 1 3') == '7'\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8 2 6 2\\n4 5 4 1 3') == '7'\nassert solution('4 1 3 2 4\\n1 3 2 4') == '0'\nassert solution('4 1 3 2 4\\n1 3 2 5') == '1'\nassert solution('4 1 3 2 4\\n1 3 2 4\\n1 3 2 5') == '1'\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8 2 6 2\\n4 5 4 1 3\") == '7'\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n4 8 2 6 2\\n4 5 4 1 3\") == 7\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8 2 6 2\\n4 5 4 1 3') == 7\n\"\"\""
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n4 8 2 6 2\\n4 5 4 1 3\") == 7\nassert solution(\"4\\n1 3 2 4\\n1 3 2 4\") == 0\n\nprint(solution(stdin))\n\n\"\"\"\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution(\n            \"5\\n4 8 2 6 2\\n4 5 4 1 3\"),\n            7)\n        \n    def test_2(self):\n        self.assertEqual(solution(\n            \"4\\n1 3 2 4\\n1 3 2 4\"),\n            0)\n            \n    def test_3(self):\n        self.assertEqual(solution(\n            \"3\\n1 5 2\\n2 4 1\"),\n            2)\n\n    def test_4(self):\n        self."
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == '1 1 3 5 9'\n'''"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2\") == \"1 1\"\nassert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\"\n\n\nimport sys\nimport numpy as np\n\nN = int(sys.stdin.readline())\narr = np.array(list(map(int, sys.stdin.readline().split())))\n\narr[arr == 1] = 2\narr[arr == 2] = 1\narr[arr == 3] = 4\narr[arr == 4] = 3\narr[arr == 5] = 6\narr[arr == 6] = 5\narr[arr == 7] = 9\narr[arr == 8] = 10\narr[arr == 9] = 7\narr[arr == 10] = 8\n\nprint(*arr)\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1 2 4 5 10') == '1 1 3 5 9'\nassert solution('10 10000 50605065 1 5 89 5 999999999 60506056 1000000000') == '9999 9 50605065 1 5 89 5 999999999 60506055 999999999'\n\n\"\"\""
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n3 4\") == \"1\"\nassert solution(\"1 1\\n2 3\") == \"2\"\nassert solution(\"1 2\\n3 4\\n5 6\") == \"1\"\nassert solution(\"1 2\\n3 4\\n5 6\\n7 8\") == \"2\"\nassert solution(\"1 2\\n3 4\\n5 6\\n7 8\\n9 10\") == \"1\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 4\n1 2\n3 4\n5 4\n3 5''') == '1'\nassert solution('''17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6''') == '2'''\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\""
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == '1'\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == '2'"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 17\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\") == '2'\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\\n\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\\n\") == \"2\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n5 4\n1 2\n3 4\n5 4\n3 5\n''') == '1'\n\nassert solution('''\n17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6\n''') == '2'\n\nassert solution('''\n7 4\n1 2\n1 3\n5 6\n''') == '0'\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\\n\") == '1'\nassert solution(\"5 5\\n1 2\\n3 4\\n5 4\\n3 5\\n\") == '2'\nassert solution(\"5 6\\n1 2\\n3 4\\n5 4\\n3 5\\n\") == '2'\nassert solution(\"5 7\\n1 2\\n3 4\\n5 4\\n3 5\\n\") == '2'\n\"\"\""
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\\n\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"4\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\") == \"1\"\n\n---\n\nThe idea is to traverse the tree with BFS. At every step, we find all uncolored vertices with red edges and all uncolored vertices with blue edges, and remove them from the graph. For each step, we count how many uncolored vertices are left, and we will get the answer at the last step.\n\nFor example, if we have 5 vertices:\n\n1 0 0 0 2\n1 2\n2 3\n2 4\n2 5\n\nWe can remove 1 edge, then we will have 4 edges:\n\n1 1 2\n2 3\n2 4\n2 5\n\nWe can remove 2 edges, then we will have 3 edges:\n\n1 1 2\n1 3\n2 4\n2 5\n\nWe can remove 3 edges, then we will have 2 edges:\n\n1 1 2\n1 3\n3 4\n2 5\n\nWe can remove 4 edges, then we will have 1 edge:\n\n1 1 2\n3 4\n2 5\n\nSo, if we have 5 vertices, the number of nice edges is 1 + 2 + 3 + 4 + 1 = 10.\n\nThe complexity is $O(n \\cdot e)$, where $n$ is the number of vertices and $e$ is the number of edges.\n\nComplexity Analysis:\n\nTime complexity: O(n \\cdot e).\n\nSpace complexity: O(n + e).\n\n\"\"\"\n\nfrom collections import deque\nfrom typing import List\n\nclass Node:\n    def __init__(self, val: int, left: 'Node' = None, right: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5\n2 0 0 1 2\n1 2\n2 3\n2 4\n2 5\n\"\"\") == '1'\n\nassert solution(\"\"\"\n5\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n\"\"\") == '4'\n\nassert solution(\"\"\"\n3\n1 1 2\n2 3\n1 3\n\"\"\") == '0'\n\nassert solution(\"\"\"\n3\n1 1 2\n2 3\n1 3\n\"\"\") == '0'\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 2 3 0') == '4'\n\nassert solution('5 1 2 0 2 3') == '3'\n\nassert solution('5 1 2 3 3') == '0'\n\nassert solution('5 1 2 3 3') == '0'"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == '1'\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == '4'\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == '0'\n\nprint(solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\"))\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\\n\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\\n\") == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\\n') == '1'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '4'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '4'\n\"\"\""
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"gf\") == \"gf\"\n\nassert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('az') == 'bc'\nassert solution('bf') == 'bf'\nassert solution('nijfvj') == 'qoztvz'\nassert solution('tvqhwp') == 'tvqhwp'\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n3\nb\na\n\"\"\") == \"b\"\n\nassert solution(\n\"\"\"\n2\naz\nbf\n\"\"\") == \"bc\"\n\nassert solution(\n\"\"\"\n2\nab\nac\n\"\"\") == \"ab\"\n\nassert solution(\n\"\"\"\n2\naz\nac\n\"\"\") == \"ab\"\n\nassert solution(\n\"\"\"\n2\ns\na\n\"\"\") == \"s\""
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"ab\") == \"ab\"\nassert solution(\"cd\") == \"cd\"\nassert solution(\"ef\") == \"ef\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abefg\") == \"abefg\"\nassert solution(\"bcde\") == \"bcde\"\nassert solution(\"cdef\") == \"cdef\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"sabx\") == \"abx\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"bc\") == \"bc\"\nassert solution(\"abcde\") == \"abde\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\n\"\"\"\n\n\nimport math\n\nk = int(stdin.readline().strip())\ns = stdin.readline().strip()\nt = stdin.readline().strip()\n\ns_list = []\nt_list = []\n\nfor i in range(k):\n    s_list.append(s[i])\n    t_list.append(t[i])\n\nwhile len(s_list) > 0 and len(t_list) > 0:\n    if s_list[0] < t_list[0]:\n        s_list.append(s_list.pop(0))\n        t_list.append(t_list.pop(0))\n    else:\n        s_list.append(t_list.pop(0))\n        t_list.append(s_list.pop(0))"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"ab\") == \"ab\"\nassert solution(\"nijfvj\") == \"qoztvz\"\n\"\"\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\nassert solution(\"nijfvj\") == \"tvqhwp\"\nassert solution(\"abcdefghijk\") == \"zqxwv\"\nassert solution(\"qwert\") == \"yuiop\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('afogk') == 'alvuw'\nassert solution('asdji') == 'qoztvz'\nassert solution('vhgsbqasd') == 'hgvuw'\n\nassert solution('nijfvj') == 'qoztvz'\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\n\n\"\"\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\n\"\"\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n15 13 15 15 12') == 'YES\\n1 2 5'\nassert solution('5 4\\n20 10 40 30') == 'YES\\n1 2 3 4'\nassert solution('4 4\\n20 10 40 30') == 'NO'\nassert solution('5 3\\n15 15 15 15 12') == 'NO'\nassert solution('5 3\\n15 15 15 15 12') == 'NO'\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"5 3\n15 13 15 15 12\n\"\"\") == 'YES\\n1 2 5'\nassert solution(\"\"\"5 4\n15 13 15 15 12\n\"\"\") == 'NO'\nassert solution(\"\"\"4 4\n20 10 40 30\n\"\"\") == 'YES\\n1 2 3 4'\n\n\"\"\"\n\n\n\"\"\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n15 13 15 15 12') == 'YES\\n1 2 5'\nassert solution('5 4\\n15 13 15 15 12') == 'NO'\nassert solution('4 4\\n20 10 40 30') == 'YES\\n1 2 3 4'\n\"\"\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n\"\"\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n20 10 40 30\\n\") == \"YES\\n1 2 3 4\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\n\n\"\"\"\n\nn, k = map(int, input().split())\n\narr = list(map(int, input().split()))\n\ncheck = set()\n\nfor i in range(k):\n    min_value = arr[i]\n    min_idx = i\n    for j in range(i, n):\n        if arr[j] < min_value and j not in check:\n            min_value = arr[j]\n            min_idx = j\n    check.add(min_idx)\n    \n    if len(check) == k:\n        break"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(TEST1) == 'YES\\n1 2 5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 0 1 2 3 4 5 6 7 8\") == \"YES\\n0 1 0 0 0 1 0 1 0\"\nassert solution(\"7 4 9 3 5 8 2 6\") == \"YES\\n0 1 0 1 0 1 1 1\"\nassert solution(\"6 4 3 2 1 9 5\") == \"NO\"\nassert solution(\"5 1 3 6 8 2 9 0 10\") == \"NO\"\nassert solution(\"10 9 8 7 6 5 4 3 2 1 0\") == \"YES\\n0 0 0 0 0 0 0 1 0 1 0\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'NO'\nassert solution('10\\n5 1 3 6 8 2 9 0 10') == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution('7\\n5 1 3 6 8 2 9 0 10') == 'NO'\n\"\"\""
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4 5\\n5 6 8 7 2') == 'NO'\nassert solution('0 1 2 3\\n4 5 6 7') == 'YES\\n0 0 1 1 0 1 1 1 1 1'\nassert solution('0 1 2 3\\n4 5 6 7\\n7 6 5 4') == 'YES\\n0 0 1 0 1 0 0 1 1 1'\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"9\n5 1 3 6 8 2 9 0 10\"\"\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"\"\"5\n1 2 4 0 2\"\"\") == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 3 4') == 'YES\\n1 0 1 1 0'\nassert solution('4\\n5 3 1 2 0') == 'NO'\nassert solution('4\\n1 2 3 4') == 'YES\\n1 0 1 1 0'\nassert solution('5\\n1 2 3 4 0') == 'YES\\n1 1 1 1 0 0'\nassert solution('4\\n1 2 3 4') == 'YES\\n1 0 1 1 0'\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"1\\n1\") == \"YES\\n1 0\"\nassert solution(\"1\\n2\") == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 3 2') == 'YES\\n1 1 1 1 0'\nassert solution('9 8 7 6 5 4 3 2 1') == 'YES\\n0 0 0 1 0 1 1 0 1'\nassert solution('8 9 4 7 3 6 5 2 1') == 'YES\\n1 0 1 1 1 1 0 1 0'\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 4 0 2\") == \"YES\\n1 0 0 0 1 0 1 0 1\"\nassert solution(\"5\\n1 2 3 4 5\") == \"YES\\n0 1 1 1 1 0 0 0 1\"\n\"\"\""
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"7\\n1 2 3 4 5 6 7\") == \"YES\\n1 1 1 1 1 1 1 1\"\nassert solution(\"7\\n10 9 8 7 6 5 4 3 2 1 0\") == \"YES\\n0 1 0 0 0 1 0 1 0\"\nassert solution(\"9\\n1 2 3 4 5 6 7 8 9\") == \"NO\"\nassert solution(\"5\\n3 1 4 5 2\") == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 3 5') == 'NO'\nassert solution('7 1 5 6 8 2 0 3 4') == 'YES\\n0 1 0 0 1 0 1 0 1'\nassert solution('10 3 4 9 2 8 7 6 5 0 1') == 'NO'\n\"\"\""
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == \"2\"\nassert solution(\"10 2 3 7\") == \"3\"\nassert solution(\"100 51 51 51\") == \"0\"\nassert solution(\"1234 1 100 199\") == \"1134\"\nassert solution(\"1000000000 1 1 1000000000\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n\n\"\"\"\n\nt = int(stdin.readline())\nwhile t > 0:\n    L, v, l, r = map(int, stdin.readline().split())\n    q = int((r - l + 1) / v)\n    print(q)\n    t -= 1"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 3 7\") == \"3\"\nassert solution(\"100 51 51 51\") == \"0\"\nassert solution(\"1234 1 100 199\") == \"1134\"\nassert solution(\"1000000000 1 1 1000000000\") == \"0\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\nprint(\"The test for the solution is done.\")"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000') == '3\\n0\\n1134\\n0'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nres = []\nfor i in range(n):\n    l, v, lt, rt = [int(i) for i in sys.stdin.readline().split()]\n    ls = l // v * v\n    rs = rt // v * v\n    if ls < lt <= ls + v - 1 and rs >= lt:\n        res.append(0)\n    else:\n        res.append(rs - lt + 1)\nsys.stdout.write('\\n'.join(map(str, res)))\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000') == '3\\n0\\n1134\\n0'\n\"\"\"\n\n\"\"\"\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == '3\\n0\\n1134\\n0'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n\n\"\"\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\nprint(\"\u2714\")\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\n\"\"\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == 3\n\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\n\n\"\"\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\n\n\"\"\""
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '3'\nassert solution('2') == '1'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\nassert solution('16') == '238980386039604160'\n\n\"\"\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\nprint('The local tests are done. Now use solution() to get the real solution to the problem.')\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\n\nprint(solution(\"20\"))"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\n\"\"\""
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"u\") == \"d\"\nassert solution(\"abccbacb\") == \"acdb\"\nassert solution(\"abccbacb\") == \"acdb\"\nassert solution(\"aaaaa\") == \"\"\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\n\"\"\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('u') == ''\n\n----\n'''\n\ns, k = map(int, input().split())\nstring = input()\n\nfor i in range(k):\n    string = string[1:]\n    if string == '':\n        break\n    if string.find('a')!= -1:\n        string = string[:string.find('a')]\n    elif string.find('b')!= -1:\n        string = string[:string.find('b')]\n    elif string.find('c')!= -1:\n        string = string[:string.find('c')]\n    elif string.find('d')!= -1:\n        string = string[:string.find('d')]\n    elif string.find('e')!= -1:\n        string = string[:string.find('e')]\n    elif string.find('f')!= -1:\n        string = string[:string.find('f')]\n    elif string.find('g')!= -1:\n        string = string[:string.find('g')]\n    elif string.find('h')!= -1:\n        string = string[:string.find('h')]\n    elif string.find('i')!= -1:\n        string = string[:string.find('i')]\n    elif string.find('j')!= -1:\n        string = string[:string.find('j')]\n    elif string.find('k')!= -1:\n        string = string[:string.find('k')]\n    elif string.find('l')!= -1:\n        string = string[:string.find('l')]\n    elif string.find('m')!= -1:\n        string = string[:string.find('m')]\n    elif string.find('n')!= -1:\n        string = string[:string.find('n')]\n    elif string.find('o')!= -1:\n        string = string[:string.find('o')]\n    elif string.find('p')!= -1:\n        string = string[:string.find('p')]\n    elif string.find('q')!= -1:\n        string = string[:string.find('q')]\n    elif string.find('r')!= -1:\n        string = string[:string.find('r')]\n    elif string.find('s')!= -1:\n        string = string[:string.find('s')]\n    elif string.find('t')!= -1:\n        string = string[:string.find('t')]\n    elif string.find('u')!= -1:\n        string = string[:string.find('u')]\n    elif string.find('v')!= -1:\n        string = string[:string.find('v')]\n    elif string.find('w')!= -1:\n        string = string[:string.find('w')]\n    elif string.find('x')!= -1:\n        string = string[:string.find('x')]\n    elif string.find('y')!= -1:\n        string = string[:string.find('y')]\n    elif string.find('z')!= -1:\n        string = string[:string.find('z')]"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\n\"\"\"\nimport sys"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"u\") == \"\"\n\"\"\"\n\n\nn, k = [int(i) for i in input().split(' ')]\ns = input()\nwhile k > 0:\n    if s[0] == 'a':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'b':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'c':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'd':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'e':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'f':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'g':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'h':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'i':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'j':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'k':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'l':\n        s = s[1:]\n        k -= 1\n    elif s[0] =='m':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'n':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'o':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'p':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'q':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'r':\n        s = s[1:]\n        k -= 1\n    elif s[0] =='s':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 't':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'u':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'v':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'w':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'x':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'y':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'z':\n        s = s[1:]\n        k -= 1\n    else:\n        break\n\nprint(s)\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n\n\"\"\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('u') == 'f'\nassert solution('abc') == 'abc'\nassert solution('abcba') == 'abc'\nassert solution('ab') == ''\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n\"\"\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"u\") == \"\"\n\"\"\""
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == \"20\"\nprint(solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\"))\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == \"20\"\n\n\"\"\""
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == \"20\"\n\"\"\""
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n\n\"\"\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4') == '1'\nassert solution('3 4\\n1 2') == '1'\nassert solution('1 2\\n3 4\\n3 2') == '3'\nassert solution('1 2\\n3 4\\n1 2\\n1 2') == '4'\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\") == \"8\"\n\"\"\""
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n''') == '8'\nassert solution('''5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n''') == '20'\n\nassert solution('''5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n''') == '20'\nassert solution('''5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n''') == '20'\nassert solution('''5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n''') == '20'"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\nassert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"20\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n\n\"\"\""
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n.*\\n.*\\n.*\\n') == '3'\nassert solution('5 5\\n.*\\n.*\\n.*\\n.*\\n') == '-1'\nassert solution('3 3\\n.*\\n.*\\n.*\\n') == '-1'\nassert solution('3 3\\n.*\\n.*\\n.*\\n') == '-1'\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n.*\\n.*\\n.*') == '2 2 1'\nassert solution('5 5\\n.*.*\\n.*.*\\n.*.*\\n.*.*') == '3 3 1'\nassert solution('3 3\\n**\\n.*\\n.*') == '-1'\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n') == '3'\nassert solution('.*.*\\n.*.\\n.*.*\\n') == '-1'\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\".*...\\n.*...\\n..****\\n...**.\\n....*.\") == \"3\"\nassert solution(\".*.*.*.*.\\n*.*.*.*.\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\") == \"3\"\nassert solution(\".*...\\n.*...\\n..****\\n...*.*\\n...*.*\\n.....\\n.*.*.*\\n*.*.*.*\\n*.*.*.*\\n*.*.*.*\\n*.*.*.*\\n*.*.*.*\\n*.*.*.*\") == \"6\"\nassert solution(\".*.*.*.*.\\n.*.*.*.*.\\n*.*.*.*.*\\n.*.*.*.*.\\n.*.*.*.*.\\n*.*.*.*.*\\n.*.*.*.*.\\n*.*.*.*.*\\n.*.*.*.*.\\n*.*.*.*.*\\n.*.*.*.*.\") == \"11\"\nassert solution(\".*.*.*.*.\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"\nassert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"3\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"3\""
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\".*...\\n****.\\n.*...\\n.*...\") == 3\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\") == 3\nassert solution(\".*...\\n****.\\n.*...\\n.*...\") == -1\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\") == -1\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\") == -1\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\".*...\\n.*...\\n..****\\n...**.*\\n....*..\\n.*..**\\n**....\\n.*...*\\n****...\\n....*..\\n..*.*.\\n.*.*.*\\n.*.*.*\") == \"3\\n2 2 1\\n3 3 1\"\nassert solution(\".*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\\n\") == \"-1\"\nassert solution(\"3 3\\n.*.\\n.*.\\n*.*\\n\") == \"-1\"\n\n\"\"\"\n\nfrom collections import deque\nfrom itertools import product\nfrom typing import Tuple, List\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\\n3 5 1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"\n\n\"\"\"\n\n\"\"\"\nThe plan:\nThis is a similar problem to \n\nSudoku https://www.geeksforgeeks.org/sudoku-backtracking-7/\n\nWe represent the grid as a matrix (2D array).\nWe will loop over all the rows, looping over each column and then over the cells.\n\nIt is easy to check if a row, column or cell is full, by iterating over all the values and seeing if there is a duplicate.\n\nThis is the first step of the algorithm. Then we know that the first cell is free.\n\nWe can also quickly check if a column or cell is free by looking at the number of zeros in that column or row.\n\nNow it's time for the \"backtracking\". We should look at the first empty cell in the grid. If we're at the end of the grid, we're done, and we can return the grid.\n\nWe can check if the cell is free by looking at the values of its row and column.\nIf we're at the end of the grid, we can return the grid. Otherwise, we can try out all possibilities for the next cell. If we don't find a valid combination, we can try out the next empty cell.\n\nWe know that the next cell must be in the same row as the previous one. So we know that if the previous cell is already filled, the next cell must also be filled in the same row.\n\nWe know that the next cell must be in the same column as the previous one. So we know that if the previous cell is already filled, the next cell must also be filled in the same column.\n\nWe can backtrack in the next cell.\n\nWe can try out all possibilities for the next cell, or we can try out a new possibility for the next row or next column.\n\nWe can check if the next cell is free by looking at its value.\n\nIf it is free, we can try out all possibilities for it.\n\nIf it is not free, then we know that we've come to the end of the grid. We can return the grid.\n\nIf there are no possible moves (no valid cell is free), then we have to backtrack to the previous cell and try a new one.\n\nThe algorithm ends if there is a solution.\n\n\"\"\"\n\nclass Solution:\n    def solve_sudoku(self, input):\n        if not input:\n            return input\n        \n        grid = self.parse(input)\n        return self.solve(grid)\n    \n    def parse(self, input):\n        grid = []\n        for i in range(len(input)):\n            row = []\n            for j in range(len(input[0])):\n                if input[i][j] == '*':\n                    row.append(None)\n                else:\n                    row.append(int(input[i][j]))\n            grid.append(row)\n        return grid\n    \n    def solve(self, grid):\n        if not grid:\n            return grid\n        \n        row, col = self.find_next_empty(grid)\n        if row == -1:\n            return grid\n        for i in range(1, 10):\n            if self.is_valid(grid, row, col, i):\n                grid[row][col] = i\n                if self.solve(grid):\n                    return grid\n                grid[row][col] = 0\n        return False\n    \n    def is_valid(self, grid, row, col, value):\n        for i in range(len(grid)):\n            if grid[row][i] == value:\n                return False\n            if grid[i][col] == value:\n                return False\n            if grid[3 * (row // 3) + i // 3][3 * (col // 3) + i % 3] == value:\n                return False\n        return True\n    \n    def find_next_empty(self, grid):\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == 0:\n                    return i, j\n        return -1, -1\n\nassert Solution().solve_sudoku(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"123\") == \"No\"\nassert solution(\"221\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"575\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"0\") == \"Yes\"\nassert solution(\"100\") == \"No\"\nassert solution(\"100101\") == \"No\"\nassert solution(\"101\") == \"Yes\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('575') == 'Yes'\nassert solution('975') == 'Yes'\nassert solution('97512') == 'No'\nassert solution('9975') == 'No'\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"575\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(575) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '575'\n) == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100\") == \"Yes\"\nassert solution(\"503\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"575\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('575') == 'Yes'\nassert solution('7') == 'No'\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"1 1\") == \"Draw\"\nassert solution(\"7 7\") == \"Draw\"\nassert solution(\"8 6\") == \"Bob\"\nassert solution(\"8 7\") == \"Alice\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"7 9\") == \"Bob\"\nassert solution(\"3 8\") == \"Draw\"\n\"\"\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '8 6'\n) == 'Alice'\nassert solution(\n    '3 7'\n) == 'Bob'\nassert solution(\n    '7 2'\n) == 'Bob'\n\"\"\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 6\\n') == 'Alice'\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"8 6\"\n) == \"Alice\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 6') == 'Alice'\n\"\"\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"3 2\") == \"Bob\"\nassert solution(\"1 3\") == \"Draw\"\nassert solution(\"9 6\") == \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"6 8\") == \"Bob\"\nassert solution(\"4 8\") == \"Draw\"\nassert solution(\"8 4\") == \"Alice\"\nassert solution(\"6 6\") == \"Draw\"\n\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 2') == 'Alice'\nassert solution('8 7') == 'Bob'\nassert solution('7 7') == 'Draw'\nassert solution('2 8') == 'Alice'\nassert solution('8 2') == 'Bob'\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 6') == 'Alice'\nassert solution('8 6') == 'Bob'\nassert solution('8 6') == 'Draw'\nassert solution('8 6') == 'Draw'\nassert solution('8 6') == 'Alice'\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nprint(\"The 1st solution is correct!\")\n\n---"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\n\"\"\"\n\ns = input().split(',')\nprint(*s,sep=' ')\n\nprint(s)"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n\"\"\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"happy,newyear,enjoy,dolphine\") == \"happy newyear enjoy dolphine\"\n\"\"\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n\n\"\"\"\n\ns = 'happy,newyear,enjoy'\nprint(s.replace(',',''))\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n\") == \"2\\n1\"\nassert solution(\"2 2\\n1 1\\n1 1\\n\") == \"1\\n2\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 2\n2 0\n0 0\n-1 0\n1 0''') == '2\\n1'\n\n\"\"\""
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"3 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"3 4\\n1 1\\n0 0\\n-1 0\\n1 0\") == \"1\\n2\"\nassert solution(\"2 4\\n3 2\\n0 0\\n0 0\\n-1 0\\n1 0\") == \"3\\n1\"\nassert solution(\"3 4\\n2 1\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n\"\"\"\n\nfrom math import inf\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"3 3\\n0 0\\n1 0\\n0 0\\n0 0\\n0 0\") == \"1\\n3\\n1\\n2\"\nassert solution(\"3 3\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\") == \"2\\n3\\n1\\n2\"\n\n\"\"\""
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"3 3\\n0 0\\n0 0\\n0 0\") == \"2\\n1\\n2\"\nassert solution(\"5 10\\n-1 1\\n0 1\\n1 1\\n0 1\\n0 0\\n0 0\\n0 0\\n0 0\") == \"5\\n2\\n3\\n3\\n4\\n2\\n5\"\nassert solution(\"1 10\\n-1 10\\n0 10\") == \"1\\n1\"\n\"\"\"\n\n\"\"\"\n-------SOLUTION-------\n\"\"\""
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"4 4\\n-2 -4\\n5 5\\n-10 -8\\n2 4\\n1 3\") == \"3\\n1\\n2\\n2\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(2) == 14\nprint(solution(2))\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2) == 14"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"14\"\nassert solution(\"5\") == \"41\"\n\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == 14\nassert solution('7') == 126\nassert solution('1') == 1\n\"\"\"\n\na = input()\nb = int(a)\nc = b + b**2 + b**3\nprint(c)"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n\") == \"1\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n427\\n428\\n429\\n430\\n431\\n432\\n433\\n434\\n435\\n436\\n437\\n438\\n439\\n440\\n441\\n442\\n443\\n444\\n445\\n446\\n447\\n448\\n449\\n450\\n451\\n452\\n453\\n454\\n455\\n456\\n457\\n458\\n459\\n460\\n461\\n462\\n463\\n464\\n465\\n466\\n467\\n468\\n469\\n470\\n471\\n472\\n473\\n474\\n475\\n476\\n477\\n478\\n479\\n480\\n481\\n482\\n483\\n484\\n485\\n486\\n487\\n488\\n489\\n490\\n491\\n492\\n493\\n494\\n495\\n496\\n497\\n498\\n499\\n500\\n501\\n502\\n503\\n504\\n505\\n506\\n507\\n508\\n509\\n510\\n511\\n512\\n513\\n514\\n515\\n516\\n517\\n518\\n519\\n520\\n521\\n522\\n523\\n524\\n525\\n526\\n527\\n528\\n529\\n530\\n531\\n532\\n533\\n534\\n535\\n536\\n537\\n538\\n539\\n540\\n541\\n542\\n543\\n544\\n545\\n546\\n547\\n548\\n549\\n550\\n551\\n552\\n553\\n554\\n555\\n556\\n557\\n558\\n559\\n560\\n561\\n562\\n563\\n564\\n565\\n566\\n567\\n568\\n569\\n570\\n571\\n572\\n573\\n574\\n575\\n576\\n577\\n578\\n579\\n580\\n581\\n582\\n583\\n584\\n585\\n586\\n587\\n588\\n589\\n590\\n591\\n592\\n593\\n594\\n595\\n596\\n597\\n598\\n599\\n600\\n601\\n602\\n603\\n604\\n605\\n606\\n607\\n608\\n609\\n610\\n611"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 14\nprint(solution(input()))\n\n'''"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2) == 14\n\"\"\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n') == '14'\nprint('Test passed\\n')\n\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"14\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"14\"\n\nprint(solution(\"2\"))\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n#.#\\n.#.') == 'Yes'\nassert solution('3 2\\n#.#\\n#.#') == 'Yes'\nassert solution('3 2\\n#.#\\n#.#') == 'Yes'\nassert solution('3 2\\n#.#\\n#.\\n#.#') == 'Yes'\nassert solution('3 2\\n#.#\\n.#.\\n#.#') == 'Yes'\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('A') == 'A'\nassert solution('#') == '#'\nassert solution('#.#') == '#'\nassert solution('#.#\\n') == '#'\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\nassert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\nassert solution(\"3 2\\n#.\\n#.\\n#.\") == \"No\"\n\"\"\""
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.#\") == \"Yes\"\nassert solution(\"5 5\\n...\\n#..\\n.#.\\n.#.\\n#..\\n#..\\n#..\\n#..\\n#..\\n...\") == \"Yes\"\nassert solution(\"3 3\\n#.\\n#.\\n#.\") == \"No\"\nassert solution(\"3 2\\n#.#\\n#.#\\n#.#\\n#.\\n#.\") == \"No\"\nassert solution(\"5 5\\n.##\\n.#.\\n##.\\n###\\n##.\") == \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n.#\\n.#\\n#.\\n.#\") == \"Yes\"\nassert solution(\"3 2\\n.#\\n.#\\n#.\") == \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.') == 'Yes'\nassert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.\") == \"Yes\"\n\nassert solution(\"3 2\\n.#\\n.#\\n#.\\n#\\n.\") == \"No\"\n\nassert solution(\"3 3\\n#.#\\n.#.\\n#.#\\n#.#\\n#.#\\n#.\") == \"Yes\"\n\nassert solution(\"3 3\\n#.#\\n#.#\\n#.#\\n#.#\\n#.#\\n#.#\\n#.\") == \"Yes\"\n\nassert solution(\"1 1\\n#\") == \"Yes\""
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 2\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\") == \"Yes\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 5 2') == '53'\n\"\"\"\n\nimport sys\nfrom typing import Tuple, List\n\nA, B, C = map(int, sys.stdin.readline().split())\n\noutput = 0\n\nfor a in range(1, A + 1):\n    for b in range(1, B + 1):\n        for c in range(1, C + 1):\n            sum_value = a + b + c\n            if sum_value <= output:\n                break\n\n            if sum_value > output:\n                output = sum_value\n\n\nprint(output)"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5 2\") == \"53\"\nassert solution(\"1 2 3\") == \"6\"\nassert solution(\"4 8 9\") == \"81\"\n\"\"\"\n\nA, B, C = map(int, stdin.readline().strip().split())\nprint((A * (10 ** 9) + B * (10 ** 6) + C * (10 ** 3)) - 1)\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\">1 + 2 + 4 + 7 =?\\n\") == \"17\"\n\"\"\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 5 2') == '53'\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 5 2') == '53'"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n50\\n100\\n100\\n100') == '8200'\nassert solution('3\\n1\\n100\\n') == '5200'\n\"\"\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n4980\\n7980\\n6980') == '15950'\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4980\\n7980\\n6980') == '15950'\nprint('Test PASS.')\n\nSolution\nPython 2.7\nPython3.6\nAuthor: Redact\n'''\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\\n\") == \"15950\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4980\\n7980\\n6980\\n\") == \"15950\"\n\"\"\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n2\n2\n3\n''') == '1'\n\nassert solution('''\n3\n4780\n8080\n6980\n''') == '15950'\n\nassert solution('''\n4\n8080\n8080\n6980\n6980\n''') == '15950'\n\nassert solution('''\n5\n8080\n8080\n6980\n6980\n6980\n''') == '15950'\n\nassert solution('''\n1\n20000\n''') == '20000'"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\\n\") == \"15950\"\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n60\\n5\\n5\\n5\\n') == '290.0'\nassert solution('2\\n50\\n80\\n') == '160.0'\nassert solution('3\\n50\\n80\\n') == '200.0'\nassert solution('7\\n100\\n90\\n80\\n70\\n60\\n50\\n') == '300.0'\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4980\\n7980\\n6980\\n\") == \"15950\"\n\"\"\"\n\n\"\"\"\n    # return int(input()) * int(input()) // 2\n    return sum(int(i) for i in stdin.split('\\n')) // 2\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n10\\n20\\n') == '90'\nassert solution('4\\n10\\n20\\n30\\n40\\n') == '200'\nassert solution('6\\n1\\n2\\n3\\n4\\n5\\n') == '20'\nassert solution('7\\n1\\n2\\n3\\n4\\n5\\n6\\n') == '40'\n\n\"\"\"\n\nN = int(stdin.readline())\n\nprices = []\nfor i in range(N):\n    prices.append(int(stdin.readline()))\n\nprices = sorted(prices)\n\nprint(sum([a*b for a,b in zip(prices, [0.5, 0.5, 1] + [0 for i in range(N-2)])]))"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('29\\n20\\n7\\n35\\n120') == '215'\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\"\"\"\n\n\"\"\"\n- Input\nABC Don\nARC Curry\nAGC Pasta\nAPC Ramen\nATC Hanbagu\n\n- Output\n215\n\n- Solution\nABC Don\nARC Curry\nAGC Pasta\nAPC Ramen\nATC Hanbagu\n\"\"\"\n\nimport sys\n\ndish_input = sys.stdin.readlines()"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\\n\") == \"215\"\nassert solution(\"29\\n20\\n7\\n35\\n120\\n\") == \"215\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\nprint(\"Passed\")\n\n\"\"\"\n\nA, B, C, D, E = (int(stdin) for _ in range(5))\n\nstart = 0\n\nwhile (start + A) % 10!= 0 or (start + B) % 10!= 0 or (start + C) % 10!= 0 or (start + D) % 10!= 0 or (start + E) % 10!= 0:\n    start += 1\n\nprint(start)\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"29\\n20\\n7\\n35\\n120\"\n) == \"215\"\nassert solution(\n\"3\\n6\\n9\\n12\\n18\"\n) == \"36\"\n\"\"\"\nfrom math import inf"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\"\n\nfrom itertools import permutations\n\ntime = 0\nfor i in range(5):\n    a, b, c, d, e = map(int, input().split())\n    for order in list(permutations([a, b, c, d, e])):\n        if order[-1] % 10 == 0:\n            time = max(time, order[-1])\nprint(time)\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 30') == '7.5'\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\nprint(solution(\"2\\n10 30\"))\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 30\\n') == '7.5'\nassert solution('1 10\\n') == '1.0'\n\"\"\"\n\nN = int(input())\nA = list(map(int, input().split()))\nB = [1/num for num in A]\nC = sum(B)\n\nprint(round(C, 5))\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 30\") == \"7.5\"\nassert solution(\"10 10\") == \"1.0\"\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n10 30') == '7.5'\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 30') == '7.5'\n\"\"\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n10 30') == '7.5'\nassert solution('3\\n10 20 30') == '1.75'\nassert solution('3\\n10 20 30\\n100 150 200') == '0.333333'\n\nimport numpy as np\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n10 30') == '7.5'\n\"\"\"\n\nn = int(input())\nnums = list(map(int, input().split()))\n\nans = 0\nfor num in nums:\n    ans += 1 / num\n\nprint(ans)\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2\n10 30''') == '7.5'\n\"\"\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n15\\n11\\n14\\n12\") == \"2\"\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 15\\n11\\n14\\n12') == 2\nassert solution('1 2\\n3\\n4') == 0\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == '2'\nprint(solution(\"5 3\\n10\\n15\\n11\\n14\\n12\"))\n\n-----Big O Notation-----\nTime: O(N)\nSpace: O(N)\n\n-----Testcases-----\npython3 -m pytest -m'small' solution.py -v\n\n----\nhttps://www.geeksforgeeks.org/minimum-height-difference-two-trees/\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n\") == 2\n\"\"\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"\n\"\"\"\n\nimport sys\n\nn, k = map(int, input().split())\nh = [int(i) for i in sys.stdin.read().split()]\n\nheights = sorted(h)\nprint(heights[k - 1] - heights[0])\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n\") == \"2\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n\") == \"2\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 15\\n11\\n14\\n12\\n\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12\\n') == '2'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"B\") == \"A\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('B') == 'A'\nassert solution('a') == 'a'\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('B') == 'A'\nassert solution('a') == 'a'\nassert solution('A') == 'A'\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('B') == 'A'\nassert solution('a') == 'a'\nassert solution('A') == 'A'"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('A') == 'A'\nassert solution('a') == 'a'\nassert solution('B') == 'A'\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('B') == 'A'\nassert solution('a') == 'a'\nassert solution('A') == 'A'\n\"\"\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"B\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"A\") == \"A\"\nassert solution(\"Z\") == \"Z\"\nassert solution(\"z\") == \"z\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('B') == 'A'\nassert solution('a') == 'a'\nassert solution('A') == 'A'\nassert solution('b') == 'b'\nassert solution('Bb') == 'B'\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('B') == 'A'\n\"\"\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n') == '6'\nassert solution('2 3\\n') == '0'\nassert solution('3 2\\n') == '0'\nassert solution('3 3\\n') == '1'\nassert solution('1 1\\n') == '0'\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n') == '6'\n\"\"\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\n') == '6'\n\"\"\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n\") == \"6\"\nprint(solution(\"2 2\\n\"))\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2') == 6\n\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('K 2') == '6'\nassert solution('2 2') == '6'\n\nprint('Success')\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"3 0\") == \"0\"\nassert solution(\"0 3\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"6\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905XX\") == \"YYMM\"\nassert solution(\"XX1905\") == \"MMYY\"\nassert solution(\"0519\") == \"YYMM\"\nassert solution(\"1719\") == \"YYMM\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('190521') == 'YYMM'\nassert solution('19052112') == 'AMBIGUOUS'\nassert solution('1905211234') == 'AMBIGUOUS'\nassert solution('19052112341234') == 'AMBIGUOUS'\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1905\") == \"YYMM\"\n\"\"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905\") == \"YYMM\"\n\n\"\"\"\n\n\"\"\"\n----- Challenge 3 - Puzzles from Practice Problems -----\n- Valid Date\n- Valid Date 2\n- Valid Date 3\n- Valid Date 4\n- Valid Date 5\n- Valid Date 6\n\n\"\"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1905\") == \"YYMM\"\n\"\"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1905\") == \"YYMM\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('1011') == 'MMYY'\nassert solution('19') == 'AMBIGUOUS'\nassert solution('1010') == 'NA'\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1906\") == \"AMBIGUOUS\"\nassert solution(\"1905a\") == \"NA\"\n\n\"\"\"\n\nimport unittest\nimport re\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"190519\") == \"AMBIGUOUS\"\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == 'YYMM'\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '2'\n\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n3') == '2'\nprint('Passed')\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n\") == 2\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == 3\n\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n3') == '2'\n\"\"\"\n\nK = int(stdin.readline())\nodd_counter = 0\neven_counter = 0\nfor i in range(1, K + 1):\n    if i % 2 == 0:\n        even_counter += 1\n    else:\n        odd_counter += 1\nprint(odd_counter * even_counter)\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == 4\nassert solution(\"3\") == 2\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == 2\nassert solution(\"3\") == 2\nassert solution(\"4\") == 4\nassert solution(\"7\") == 6\nassert solution(\"8\") == 8\n\"\"\"\n\nk = int(stdin.readline().strip())"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == 2\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n') == '2'\nprint('Test pass.')\n\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9 12') == \"21\"\n\"\"\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 12\") == \"21\"\nprint(solution(\"9 12\"))\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9 12') == '21'\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\"\n\nA, B = [int(x) for x in stdin.split()]\nprint(str(A + B - 24) +'' + str(A + B))\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == '21'\n\nSolution 1:\n  stdin = input().split()\n  a,b = [int(x) for x in stdin]\n  print(str(a+b) +'o\\'clock')\n\nSolution 2:\n  import sys\n  stdin = [int(x) for x in sys.stdin]\n  a,b = stdin\n  print(str(a+b) +'o\\'clock')\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('9 12\\n') == '21'\n\"\"\"\n\nfrom datetime import datetime\nfrom typing import Union\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\"\n\nA, B = [int(i) for i in stdin.split()]\nprint(B - A)\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(2, 2919) == \"3719\"\nprint(solution(2, 2919))\n\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2919\\n\") == \"3719\"\n\"\"\"\n\n\"\"\"\n        1\n      1 1 1 1\n    1 1 1 1 1 1 1\n  1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2919') == '3719'\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2919\\n') == '3719'\nassert solution('1 1\\n') == '1'\nassert solution('3 7\\n') == '7'\nassert solution('4 10\\n') == '20'\nassert solution('5 2\\n') == '6'\n\"\"\"\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"2 2919\"\n) == \"3719\"\n\"\"\"\n\nn, r = map(int, input().split())"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2919\") == \"3719\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\">5<->5<->2<-<5>\") == \"30\"\nassert solution(\"3<-<2>5<->3<->5<->2<->5<-<2>\") == \"110\"\n\"\"\"\nfrom collections import deque\nfrom collections import defaultdict\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2919') == '3719'\nassert solution('1 3000') == '3000'\nassert solution('0 3') == '-100'\nassert solution('5 8000') == '-100'\nassert solution('3 751') == '749'\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(11, 2) == 4\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11 2') == '4'\n\"\"\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 2\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11 2') == '4'\n\"\"\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 2') == 4\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(11,2) == 4\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 2\") == '4'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11 2\") == \"4\"\nprint('Passed')\n\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11 2') == '4'\n\"\"\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11 2') == 4\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1, 2') == '1'\nassert solution('1, 2, 3') == '1'\nassert solution('2, 1') == '2'\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == '3'\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\"\n\nn = int(input())\nprint((n - 1) // 2)\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"5\") == \"3\"\nassert solution(\"5\") == \"3\"\nassert solution(\"3\") == \"1\"\nassert solution(\"3\") == \"1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n') == '3'\n'''"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(solution)\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == expected_result\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\nassert solution(\"5 5\") == \":(\".\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 4''') == 'Yay!'\nassert solution('''5 3''') == 'Yay!'\nassert solution('''4 3''') == 'Yay!'\nassert solution('''6 4''') == 'Yay!'\nassert solution('''4 4''') == 'Yay!'\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4\\n') == 'Yay!'\nassert solution('5 3\\n') == 'Yay!'\nassert solution('4 4\\n') == 'Yay!'\nassert solution('4 5\\n') == ':(\n\"\"\"\n\nimport sys\n\ninput_lines = []\nfor line in sys.stdin:\n    input_lines.append(line)\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('3 1') == 'Yay!'\nassert solution('4 4') == 'Yay!'\nassert solution('4 6') == ':(\nassert solution('1 16') == 'Yay!'\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"Yay!\"\nassert solution(\"10 5\") == \":(\nassert solution(\"7 3\") == \"Yay!\"\n\n\"\"\"\n\nimport ast\n\nA, B = ast.literal_eval(stdin.readline())\nprint(\"Yay!\") if A + B <= 16 else print(\":(\")\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\"\"\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\"\"\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n'''\n\n'''\nKhan did not go to the last fight with A[i] < B[i], so his final happiness is A[0] - B[0]. \n\nAnd if he goes to the last fight with A[i] >= B[i], then his final happiness is A[0] + A[1] - B[0] - B[1].\n\nSo if A is a subsequence of B, then the maximum final happiness of Khan is the maximum of all the above values.\n\nFor example, if A is {5, 6, 7, 8, 9} and B is {3, 5, 7, 9, 11}, then the maximum final happiness of Khan is 6."
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"Yay!\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1234567876') == '34'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1234567876') == '34'\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1234567876') == '34'\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1234567876\") == \"34\"\nprint(\"PASSED\")"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\n\"\"\"\n\nfrom typing import Tuple\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1234\") == \"3\"\nassert solution(\"98765\") == \"0\"\nassert solution(\"123456\") == \"0\"\nassert solution(\"111111\") == \"0\"\nassert solution(\"123456789\") == \"0\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\nassert solution(\"6 13 52 0 13 26 52\") == \"12 13\"\nassert solution(\"5 7 5 6 3\") == \"5 3\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\nassert solution(\"6 13 52 0 13 26 52\") == \"12 13\"\nassert solution(\"2 1\") == \"1 2\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('2 9') == '1 7'\nassert solution('7 13') == '12 13'\nassert solution('13 52 0 13 26 52') == '12 13'\n\n'''"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\n\nassert solution(\"2 9\") == \"1 7\"\n\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n\nassert solution(\"6 13 52 0 13 26 52\") == \"12 13\"\n\n\"\"\"\n\nimport sys\n\ninputs = sys.stdin.read()\n\nn = int(inputs.split('\\n')[0])\na = list(map(int, inputs.split('\\n')[1].split()))\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\n\nassert solution(\"2 9\") == \"1 7\"\n\nassert solution(\"7 2 1000000000 4 6 8 4 2\") == \"2999999987 2\"\n\nassert solution(\"6 13 52 0 13 26 52\") == \"12 13\"\n\n\n\n-----\n\nThe maximum number of people equals to $n$.\n\nEach of them has $x_i$ type of sword and $y_i$ of the number of sword that have been taken by the people who have broken into the basement.\n\nThis solution has a time complexity of O(n^3)."
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 2 1000000000 4 6 8 4 2\") == \"2999999987 2\"\nassert solution(\"6 13 52 0 13 26 52\") == \"12 13\"\n\"\"\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\n\nassert solution(\"2 9\") == \"1 7\"\n\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n\n\"\"\""
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\n\nassert solution(\"2 9\") == \"1 7\"\n\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n\n\"\"\""
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\nassert solution(\"6 13 52 0 13 26 52\") == \"12 13\"\n\n\"\"\""
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 4 1\\n') == '3'\nassert solution('3 1 4 1\\n') == '1'\nassert solution('5 1 1 2 2\\n') == '2'\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 1 4 1\") == \"3\"\n\"\"\"\n\nfrom collections import Counter\nn = int(input())\na = list(map(int, input().split()))\n\ntotal = sum(a)\nd = Counter(a)\n\ntotal_days = 0\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 4 1\\n3 1 2') == '3'\n\"\"\"\nimport collections"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 1 2\") == 3\n\"\"\""
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 4 1\\n3 1 4 1\") == 3\nassert solution(\"1 1 1\\n1 1 1\") == 1\nassert solution(\"1 1 1\\n1 1 2\") == 2\n\"\"\""
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 4 1\\n3 1 4 1\") == 3\nassert solution(\"3 1 4 1\\n1 1 1\") == 1\n\"\"\""
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 4 1\") == '3'\nassert solution(\"3 1 4 1\") == '1'\nassert solution(\"5 1 1 2 2\") == '2'\n\"\"\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 4 1\\n3 1 4 1\") == \"3\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('2 2 2') == '2'\nassert solution('2 1 2') == '2'\nassert solution('1 1 1') == '1'\nassert solution('1 1 1 1') == '0'\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n4\n3 1 4 1\n\"\"\"\n) == 3\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\\n\") == '2'\nassert solution(\"2 0\\n\") == '1'\nassert solution(\"3 2\\n1 3\\n2 3\\n\") == '2'"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 2\n1 2\n2 3''') == '2'\n\nassert solution('''2 0''') == '1'\n\nassert solution('''3 2\n1 3\n2 3''') == '2'\n\nassert solution('''5 5\n1 2\n2 3\n3 4\n4 5\n5 1''') == '2'\n\nassert solution('''6 5\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1''') == '3'"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\\n\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"2 0\\n\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n5 6\n1 2\n1 3\n1 4\n2 4\n3 4\n''') == '1\\n1 2\\n1 3\\n1 4\\n2 4\\n3 4\\n'\nassert solution('''\n4 2\n1 2\n2 3\n''') == '1\\n2\\n1 3\\n'\nassert solution('''\n4 1\n1 2\n2 3\n''') == '2\\n1 3\\n'\nassert solution('''\n3 2\n1 3\n2 3\n''') == '2\\n'\nassert solution('''\n3 1\n1 3\n2 3\n''') == '2\\n'\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\\n1 2\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\""
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2'\nassert solution('2 0\\n') == '1'\nassert solution('3 2\\n1 3\\n2 3') == '2'\n\n\n----\n\n\n\n\n\n------\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\\n4 2\"\nassert solution(\"2 0\") == \"1\\n1 2\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\") == \"4\"\nassert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n4 5\") == \"11\"\nassert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n4 5\") == \"11\"\nassert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n4 5\") == \"11\"\nassert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n4 5\") == \"11\"\n\"\"\""
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5 1\\n1 2 3 4 5') == 11\nassert solution('7 2\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4') == 4\nassert solution('5 1\\n1 2 3 4 5') == 11\nassert solution('7 2\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4') == 4\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open(r\"D:\\Github\\Coding-Challenge\\Coding-Challenge\\d4\\input\\input_small.txt\").read()) == \"11\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List, DefaultDict\n\nclass UnionFind():\n    def __init__(self, n: int):\n        self.n = n\n        self.parents = [-1] * n\n    def find(self, x: int) -> int:\n        if self.parents[x] < 0:\n            return x\n        self.parents[x] = self.find(self.parents[x])\n        return self.parents[x]\n    def union(self, x: int, y: int) -> bool:\n        x_parent = self.find(x)\n        y_parent = self.find(y)\n        if x_parent == y_parent:\n            return False\n        if self.parents[x_parent] > self.parents[y_parent]:\n            x_parent, y_parent = y_parent, x_parent\n        self.parents[x_parent] += self.parents[y_parent]\n        self.parents[y_parent] = x_parent\n        return True\n\nclass Solution:\n    def solve(self, n: int, k: int, a: List[int]) -> int:\n        # s = {i: i for i in range(1, n + 1)}\n        # for i in range(n - 1):\n        #     u, v = map(int, stdin.readline().split())\n        #     if s[u]!= s[v]:\n        #         s[min(u, v)] = max(u, v)\n        #         s[max(u, v)] = min(u, v)\n        # kth = {i: 0 for i in range(1, n + 1)}\n        # for i in range(1, n + 1):\n        #     kth[s[i]] += a[i - 1]\n        # kth = sorted(kth.items(), key=lambda x: x[1], reverse=True)\n        # s = UnionFind(n + 1)\n        # ans = 0\n        # for i in kth:\n        #     ans += i[1]\n        #     if s.union(s[i[0]], s[i[0] - 1]):\n        #         if s.find(i[0]) == s.find(i[0] - 1):\n        #             ans -= i[1]\n        #         if s.parents[i[0]] < k:\n        #             ans -= i[1]\n        # return ans\n\n        sum_tree = [0] * (n + 1)\n        for weight in a:\n            sum_tree[weight] += weight\n            sum_tree[weight + 1] += weight\n        for i in range(1, n):\n            sum_tree[i + 1] += sum_tree[i]\n        k_parent = {i: i for i in range(1, n + 1)}\n        for i in range(n - 1):\n            a, b = map(int, input().split())\n            if k_parent[a]!= k_parent[b]:\n                if sum_tree[a] > sum_tree[b]:\n                    a, b = b, a\n                k_parent[a] = k_parent[k_parent[a]]\n                k_parent[b] = k_parent[k_parent[b]]\n        k_parent = {k_parent[i]: i for i in k_parent}\n        for i in range(1, n + 1):\n            if k_parent[i] <= k:\n                sum_tree[i] = 0\n        return sum(sum_tree)\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 1\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5''') == '11'\n\nassert solution('''7 2\n2 1 2 1 2 1 1\n6 4\n1 5\n3 1\n2 3\n7 5\n7 4''') == '4'\n\"\"\"\n\nimport sys\nimport copy"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 1\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5\n''') == '11'\nassert solution('''7 2\n2 1 2 1 2 1 1\n6 4\n1 5\n3 1\n2 3\n7 5\n7 4\n''') == '4'\n\n\"\"\"\nimport collections"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3') == '3'\nassert solution('5 2') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n1 2\\n1 3\\n2 3\\n2 1\\n2 2\\n3 4\\n3 5\\n3 1\\n4 5\\n4 4\\n5 2\\n5 3') == '4'\n\nassert solution('3 3\\n1 2\\n2 1\\n3 1\\n3 2') == '3'\n\nassert solution('3 3\\n1 2\\n2 1\\n3 1\\n3 2') == '3'\n\nassert solution('5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1') == '6'\n\nassert solution('6 6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 1') == '6'"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5') == '11'\nassert solution('7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4') == '4'\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\n\n\"\"\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5') == 11\nassert solution('7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4') == 4"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\nassert solution(\"2 3\\n5 6 9999999999\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\nassert solution(\"3 3\\n1 1\\n5 6 9999999999\\n5 6 9999999999\") == \"1 1\\n2 1\\n2 9999999994\"\nassert solution(\"5 4\\n1 2 3 4 5\") == \"1 1\\n1 4\\n2 2\\n2 3\\n3 1\\n3 4\\n4 1\\n4 2\\n4 3\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2\") == \"1 1\"\nassert solution(\"2 3\") == \"2 1\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\""
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    2 3\n    5 10000000000\n    5 6 9999999999\n    \"\"\"\n) == \"\"\"\n1 1\n1 9\n2 2\n2 13\n3 1\n3 12\n\"\"\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13'\nassert solution('2 3\\n5 10000000000\\n5 6 9999999999') == '1 5\\n2 1\\n2 9999999994'"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13'\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 3 2\") == \"3 3\"\nassert solution(\"4 3 2\") == \"1 2\"\n\"\"\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13\\n3 1\\n3 12'\n\n\n-----\n\n'''"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\\n3 1\\n3 12\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\nprint(solution('3 6 5 4'))\n\n\"\"\"\n\na, b, c, d = [int(x) for x in input().split()]\nprint(a + b + c, a + c + b, b + c + a, a + b + c + d)\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n\n\"\"\"\n\nimport sys\n\nnums = sys.stdin.readline().split()\n\nnums = list(map(int, nums))\nnums.sort()\nprint(nums[0] + nums[1])\nprint(nums[0] + nums[2])\nprint(nums[1] + nums[2])\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nprint(solution(\"3 6 5 4\"))"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\n\"\"\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\nassert solution('40 40 40 60') == '20 20 20'\nassert solution('201 101 101 200') == '1 100 100'\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 6 5 4\") == \"2 1 3\"\nassert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"4 4 4 4\") == \"4 4 4\"\nassert solution(\"1 2 3 4\") == \"1 2 3\""
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n\n\"\"\"\n\nimport sys\n\nfrom collections import Counter\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n\"\"\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\nRBGRRBRGG\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\") == \"2\\nBRBGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\") == \"6\\nBGRRRRBGBGGBRRR\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9\\nRBGRRBRGG') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRBRBGBGBGRG'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\nRRR\\n\") == \"2\\nRRR\\n\"\nassert solution(\"8\\nRGR\\n\") == \"0\\nRRR\\n\"\nassert solution(\"8\\nGRR\\n\") == \"2\\nGRR\\n\"\nassert solution(\"9\\nGRR\\n\") == \"2\\nRRGR\\n\"\nassert solution(\"9\\nBGRR\\n\") == \"2\\nRRGB\\n\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\nRBGRRBRGG\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\") == \"2\\nBRBGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\") == \"6\\nBGRRRRBBGBGBGRG\""
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9\\nRBGRRBRGG\") == '2\\nRBGRGBRGR'\nassert solution(\"8\\nBBBGBRRR\") == '2\\nBRBGBRGR'\nassert solution(\"13\\nBBRRRRGGGGGRR\") == '6\\nBGRRRBGBGBGRG'"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\nRBGRRBRGG\\n\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGRRRRR\\n\") == \"2\\nRBGRGBRGR\"\nassert solution(\"13\\nBBRRRRRGGGGGRR\\n\") == \"6\\nBGRRRBGBGBGRG\"\n\"\"\""
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\nRBGRRBRGG\\n\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\\n\") == \"2\\nBRBGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\\n\") == \"6\\nBGRRRRBBGGRRRR\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\nRRRRRR\") == \"2\\nRRRRRR\"\nassert solution(\"8\\nRRRRRR\") == \"2\\nRRRRRR\"\nassert solution(\"13\\nRRRRRRGGGRRRR\") == \"6\\nBGRRRRRGBGBRRRR\"\n\nprint(\"The solution is correct!\")\n\n-----Problem-----\n\nYou are given a garland of $n$ lamps, each of them is red, green or blue. You are given a string, which contains $n$ characters: \"R\" - the lamp is red, \"G\" - the lamp is green and \"B\" - the lamp is blue.\n\nYou have to choose a color for each lamp so that the string is valid and all lamps have different colors. The string is valid if for any two adjacent lamps the color of the latter is different than the color of the former.\n\nThe string is called balanced if the number of \"R\" is equal to the number of \"G\" and the number of \"B\" is equal to the number of \"G\".\n\nYou have to output the minimum number of colors needed to make the string balanced and print this minimum number in the first line of the output. If there is no solution, print \"Impossible\".\n\nIf there are multiple solutions, print any of them in the following format:\n\n\"Case #id: #color1 #color2 #color3... #color#\"\n\nIn the case of the first test case, the string is balanced, so the colors can be \"R\", \"G\" and \"B\".\n\nIn the case of the second test case, there is no solution, so the string is not balanced.\n\nFor each test case, there is a single line containing a non-empty string, which contains only uppercase letters \"R\", \"G\" and \"B\". The length of the string is from $1$ to $10^5$.\n\n-----Sample Tests-----\nSample Input 1:\n\n9\nRBRRGG\n\nSample Output 1:\n\n2\nRRRR\n\nSample Input 2:\n\n8\nRGRGRG\n\nSample Output 2:\n\nImpossible\n\nSample Input 3:\n\n13\nRRRRRRRRGGG\n\nSample Output 3:\n\n6\nBGRRRRRGBG\n\n------Problem------\n\nYou are given an array of positive integers. You should find the sum of the integers with even indexes (0th, 2nd, 4th...).\n\nThen multiply this summed number and the final element of the array together.\n\nDon't forget that the first element has an index of 0.\n\nFor an empty array, the result will always be 0 (zero).\n\nInput\n\nThe first line of the input contains integer n (1 \\le n \\le 100) \u2014 the number of elements in the array.\n\nThe second line of the input contains n space-separated integers a1, a2,..., an (|a_i| \\le 10^6).\n\n-----Output-----\n\nPrint one integer: the answer to the problem.\n\n-----Examples-----\nInput\n7\n1 2 3 4 5 6 7\n\nOutput\n26\n\nInput\n8\n4 2 3 6 1 5 7 0\n\nOutput\n40\n\nInput\n4\n2 4 3 1\n\nOutput\n16\n\nInput\n5\n5 7 6 2 1\n\nOutput\n126\n\n------Problem------\n\nThe fraction 49/98 is a curious fraction, as an inexperienced mathematician in attempting to simplify it may incorrectly believe that 49/98 = 4/8, which is correct, is obtained by cancelling the 9s.\n\nWe shall consider fractions like, 30/50 = 3/5, to be trivial examples.\n\nThere are exactly four non-trivial examples of this type of fraction, less than one in value, and containing two digits in the numerator and denominator.\n\nIf the product of these four fractions is given in its lowest common terms, find the value of the denominator.\n\n-----Solution-----"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\\nRBGRRBRGG\\n\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\\n\") == \"2\\nBRBGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\\n\") == \"6\\nBGRBRBGBGBGRG\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\\nRBGRRBRGG\\n\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\\n\") == \"2\\nBRBGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\\n\") == \"6\\nBGRBRBGBGBGRG\"\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n3 3 4 7 5 6 8\") == \"4\\n2 3 5 6\"\nassert solution(\"6\\n1 3 5 2 4 6\") == \"2\\n1 4\"\nassert solution(\"4\\n10 9 8 7\") == \"1\\n1\"\nassert solution(\"9\\n6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\n\"\"\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 7 8 3 4 5 9 10 11\") == \"1 2 3 7 8 9\"\nassert solution(\"10 9 8 7\") == \"1 2\"\nassert solution(\"1 3 5 2 4 6\") == \"1 4\"\nassert solution(\"1 3 5 2\") == \"1 4\"\nassert solution(\"1 3 5\") == \"1 4\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 3 4 7 5 6\") == \"4\\n2 3 5 6\"\nassert solution(\"7\\n3 3 4 7 5 6 8\") == \"4\\n2 3 5 6\"\nassert solution(\"6\\n1 3 5 2 4 6\") == \"2\\n1 4\"\nassert solution(\"9\\n6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\n\"\"\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == \"4\"\nassert solution(\"6 3 5 2 4 6\") == \"2\"\nassert solution(\"1 3 5 2 4 6\") == \"1\"\nassert solution(\"9 6 7 8 3 4 5 9 10 11\") == \"6\"\n\n\"\"\""
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\nassert solution(\"10 9 8 7\") == \"1\\n1\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\n\"\"\""
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == \"4\", \"a\"\nassert solution(\"1 3 5 2 4 6\") == \"2\", \"b\"\nassert solution(\"10 9 8 7\") == \"1\", \"c\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\", \"d\"\nassert solution(\"1 3 5 2 4 6\") == \"2\", \"e\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == '4', 'Test 1'\nassert solution(\"6 7 8 3 4 5 9 10 11\") == '6', 'Test 2'\nassert solution(\"4 10 9 8 7\") == '1', 'Test 3'\nassert solution(\"9 6 7 8 3 4 5 9 10 11\") == '6', 'Test 4'\nassert solution(\"10 9 8 7\") == '1', 'Test 5'\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 7 8 3 4 5 9 10 11\") == '1 2 3 7 8 9'\nassert solution('1 3 5 2 4 6') == '1 4'\nassert solution('10 9 8 7') == '1 4'\nassert solution('1 3 5 2 4 6') == '1 4'\nassert solution('9 6 7 3 4 5 9 10 11') == '1 2 3 7 8 9'\n\n\n\n-----\n6 7 8 3 4 5 9 10 11\n1 3 5 2 4 6\n\n\n\n-----\n\n\n1 3 5 2 4 6\n1 4\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n-----\n5 3 4 7 8 9 10 11\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 4\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n6 7 8 3 4 5 9 10 11\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 4\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n6 7 8 3 4 5 9 10 11\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 4\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n6 7 8 3 4 5 9 10 11\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 4\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n6 7 8 3 4 5 9 10 11\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 4\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n6 7 8 3 4 5 9 10 11\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n6 7 8 3 4 5 9 10 11\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == \"4\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\"\nassert solution(\"4 10 9 8 7\") == \"1\"\nassert solution(\"9 6 7 8 3 4 5 9 10 11\") == \"6\"\nassert solution(\"10 9 8 7\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 4 7 5 6 8\") == 4\nassert solution(\"1 3 5 2 4 6\") == 2\nassert solution(\"1 3 5 2 4 6\") == 2\nassert solution(\"10 9 8 7\") == 1\nassert solution(\"6 7 8 3 4 5 9 10 11\") == 6\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"Yes\"\nassert solution(\"5 2\") == \"No\"\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\"\"\"\n\na, b = map(int, stdin.split())\nprint(\"Yes\" if a*b % 2 == 1 else \"No\")\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"Yes\"\nassert solution(\"4 2\") == \"No\"\n\"\"\"\n\nA, B = input().split()\nA = int(A)\nB = int(B)"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == 'Yes'"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1') == 'Yes'\n\"\"\"\n\nfrom unittest import TestCase\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1') == 'Yes'\n\n-----Explanation-----\nThe odd numbers are: 1, 3, 5, 7, 9\n3 * 1 = 3\n3 * 3 = 9\n\nSince 3 is the only odd number between 1 and 3, print Yes\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1') == 'Yes'\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\"\"\"\n\nimport sys\n\na, b = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\"\"\"\n\n\"\"\"\nGiven three integers A, B and C, return any string S such that:\n\nS has length A + B and contains exactly C A's unless S contains every possible A, in which case it contains C B's.\nString S should contain only lowercase English letters.\nIt can be proved that at least one solution exists.\n\nExample\n\nFor A = 1, B = 2, and C = 4, the output should be\n\nstringConstruction(A, B, C) = \"abacab\";\n\nThere are several ways to construct such string: \"a\", \"b\", \"ab\", \"ac\", \"bc\", \"abc\".\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer A\n\nGuaranteed constraints:\n1 \u2264 A \u2264 50.\n\n[input] integer B\n\nGuaranteed constraints:\n1 \u2264 B \u2264 50.\n\n[input] integer C\n\nGuaranteed constraints:\n1 \u2264 C \u2264 50.\n\n[output] string\n\nConstructs the given string.\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('81 58') == '110'\n\"\"\"\n\nimport math\n\nX, Y = input().split()\nX = int(X)\nY = int(Y)"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"81 58\") == \"110\"\nassert solution(\"77 65\") == \"74\"\nassert solution(\"40 30\") == \"40\"\nassert solution(\"30 40\") == \"40\"\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"81 58\") == \"110\"\nprint(\"Test succeeded.\")\n\n-----\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 1') == '1'\nassert solution('1 1 2') == '1'\nassert solution('1 1 2 2') == '2'\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"81 58\") == \"110\"\nprint(solution(\"81 58\"))"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''81 58''') == '110'\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('81 58') == '110'\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == '8'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nresult = 0\nfor i in range(1, n + 1):\n    for j in range(1, n + 1):\n        for k in range(1, n + 1):\n            result += 1\nprint(result)"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '0'\nassert solution('1') == '0'\nassert solution('2') == '9'\nassert solution('3') == '98'\nassert solution('4') == '980'\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == '8'\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == 8\n\"\"\"\n\nimport sys\nfrom math import factorial"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"8\"\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == '8'\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n') == '8'\n\"\"\"\n\n\"\"\"\nTakahashi is going to set a 3-character password.\nHow many possible passwords are there if each of its characters must be a digit between 1 and N (inclusive)?\n\n-----Constraints-----\n - 1 \\leq N \\leq 9\n - N is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint the number of possible passwords.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n8\n\nThere are eight possible passwords: 111, 112, 121, 122, 211, 212, 221, and 222.\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '0'\nassert solution('1 2 3') == '4'\nassert solution('2 3') == '4'\n\"\"\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"8\"\nprint(solution(\"2\"))\n\n\"\"\"\nimport os\nimport sys\n\nDEBUG = False"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 8\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"7\") == \"NO\"\nassert solution(\"8\") == \"YES\"\nassert solution(\"9\") == \"YES\"\n\"\"\"\n\nfrom typing import Optional"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"1\") == \"YES\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"3\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == 'YES'\nassert solution('3') == 'NO'\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"7\") == \"YES\"\nassert solution(\"6\") == \"NO\"\n\n-----Explanation-----\nThe growth of a five-year-old child will be celebrated.\n\"\"\"\n\nx = int(stdin.readline().strip())"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == 'YES'\nassert solution('8') == 'YES'\nassert solution('1') == 'NO'\nassert solution('9') == 'NO'\nassert solution('4') == 'NO'\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(0) == \"YES\"\nassert solution(1) == \"YES\"\nassert solution(5) == \"YES\"\nassert solution(10) == \"NO\"\nassert solution(20) == \"NO\"\n\n\"\"\"\n\nX = int(stdin.readline())\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n') == \"YES\"\nassert solution('3\\n') == \"NO\"\nassert solution('5\\n') == \"YES\"\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n\") == \"YES\"\n\n\"\"\"\n\n\"\"\"\n\u672c\u984c\u53ea\u8ad6\u65bc\u984c\u76ee\u6307\u5b9a\u4e86\u53ea\u6703\u5728\u6307\u5b9a\u5e74\u9f61\u4e4b\u5f8c\u624d\u6703\u5728\u6307\u5b9a\u7a2e\u985e\u8fb2\u4f5c\u7684\u8fb2\u4f5c\u3002\n\u56e0\u6b64\u5982\u679c\u6709\u5169\u500b\u53ca\u4ee5\u4e0a\u7684\u5e74\u9f61\u4e4b\u5f8c\u7684\u8fb2\u4f5c\uff0c\u5247\u53ef\u4ee5\u8aaa\u660e\u9019\u4e9b\u8fb2\u4f5c\u7686\u6703\u88ab\u8fb2\u4f5c\u5206\u7d44\u3002\n\n\u5148\u4f86\u5206\u6790\u6bcf\u500b\u7a2e\u985e\u8fb2\u4f5c\u7684\u5e74\u9f61\u7d44\u6210\uff0c\u63a5\u8457\u8a08\u7b97\u6bcf\u500b\u8fb2\u4f5c\u7684\u5e74\u9f61\u7d44\u6210\u662f\u5426\u548c\u4e4b\u524d\u88ab\u62bd\u9078\u8d70\u7684\u5e74\u9f61\u7d44\u6210\u4e00\u6a23\u3002\n\"\"\"\n\nfrom collections import defaultdict\nimport operator\nimport re\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        # \u628a\u8fb2\u4f5c\u653e\u9032\u5b57\u5178\u88e1\u9762\n        # \u8fb2\u4f5c\u7a2e\u985e\n        items = ['\u83dc', '\u679c', '\u8c6c', '\u9b5a', '\u9bad', '\u86cb']\n        \n        # \u628a\u5e74\u9f61\u653e\u9032\u5b57\u5178\u88e1\u9762\n        # {\u8fb2\u4f5c:{\u5e74\u9f61:\u7d44\u6210}}\n        # \u82e5\u67d0\u8fb2\u4f5c\u5177\u6709\u76f8\u540c\u7684\u5e74\u9f61\u7d44\u6210\uff0c\u5247\u6240\u6709\u8fb2\u4f5c\u7686\u6703\u88ab\u62bd\u9078\u8d70\n        result = defaultdict(dict)\n        # {\u8fb2\u4f5c:\u5e74\u9f61}\n        year = {}\n\n        # \u53d6\u51fa\u5e74\u9f61\n        for i in stdin.split('\\n'):\n            # \u5206\u6790\u5e74\u9f61\n            age = int(i)\n            # \u8fb2\u4f5c\n            for j in items:\n                # \u8981\u5c0d\u6bcf\u500b\u8fb2\u4f5c\u5206\u6790\uff0c\u56e0\u6b64\u6211\u5011\u53d6\u51fa\u8fb2\u4f5c\n                item = j\n                # \u53d6\u51fa\u76ee\u524d\u8fb2\u4f5c\u7684\u5e74\u9f61\n                if item in result:\n                    year = result[item]\n                    # \u628a\u5e74\u9f61\u52a0\u5165\u5b57\u5178\u88e1\u9762\n                    year[age] = age\n                    result[item] = year\n                    break\n                else:\n                    # \u5206\u6790\u5e74\u9f61\n                    result[item] = {}\n                    year[age] = age\n                    result[item] = year\n        # \u5c07\u6bcf\u4e00\u500b\u8fb2\u4f5c\u6309\u7167\u5e74\u9f61\u7531\u5927\u5230\u5c0f\u6392\u5e8f\n        sorted_result = sorted(result.items(), key=operator.itemgetter(0))\n\n        # \u628a\u5b57\u5178\u53cd\u8f49\n        reversed_result = defaultdict(dict)\n        for i in sorted_result:\n            reversed_result[i[0]] = i[1]\n\n        # \u53d6\u51fa\u6bcf\u4e00\u500b\u8fb2\u4f5c\u7684\u5e74\u9f61\u7d44\u6210\n        for j in reversed_result:\n            # \u53d6\u51fa\u6bcf\u4e00\u500b\u8fb2\u4f5c\u7684\u5e74\u9f61\u7d44\u6210\n            year = reversed_result[j]\n            # \u53d6\u51fa\u5176\u4e2d\u4e00\u500b\u5e74\u9f61\n            test = list(year.keys())[0]\n            # \u53d6\u51fa\u5176\u4ed6\u5169\u500b\u5e74\u9f61\n            year2 = list(year.keys())[1]\n            year3 = list(year.keys())[2]\n\n            # \u5982\u679c\u5169\u500b\u5e74\u9f61\u7684\u5e74\u9f61\u7d44\u6210\u90fd\u548c\u7b2c\u4e00\u500b\u5e74\u9f61\u4e00\u6a23\uff0c\u5247\u8aaa\u660e\u9019\u5169\u500b\u8fb2\u4f5c\u7686\u6703\u88ab\u62bd\u9078\u8d70\n            if year2[year2.index(test)+1] == test and year3[year3.index(test)+1] == test:\n                return 'YES'\n        return 'NO'"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\nABC = \"\"\nfor i in range(N):\n    ABC += \"ABC\"[i]\n\nprint(ABC)\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\n\"\"\"\n\nN = int(stdin.readline())\n\nprint(\"ABC\" + str(N % 1000))\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(ABD999) == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ABC999') == 'ABC'\nassert solution('ABD999') == 'ABC'\nassert solution('ABD1000') == 'ABC'\nassert solution('ABD1001') == 'ABC'\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\nassert solution(\"912\") == \"ABC\"\nassert solution(\"1\") == \"ABC\"\n\n\"\"\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"999\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC\") == \"ABC\"\nassert solution(\"ABCD\") == \"ABC\"\nassert solution(\"ABCDEF\") == \"ABC\"\nassert solution(\"ABCDEFG\") == \"ABC\"\nassert solution(\"ABCDEFGH\") == \"ABC\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABC\") == \"ABC\"\nassert solution(\"ABC001\") == \"ABC\"\nassert solution(\"ABC000\") == \"ABC\"\nassert solution(\"ABC999\") == \"ABC\"\nassert solution(\"ABC1000\") == \"ABC\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'ABC'\nassert solution('1') == 'ABC'\nassert solution('0') == 'ABC'\nassert solution('999') == 'ABC'\nassert solution('1000') == 'ABD'\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(ABC999) == \"ABC\"\n\nprint(solution(ABC999))\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 4 8 9 15') == 'Yay!'\n\"\"\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n\") == \"Yay!\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n\") == \"Yay!\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n\") == \"Yay!\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n\") == \"Yay!\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n\") == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15\\n') == 'Yay!'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n') == 'Yay!'\nassert solution('1\\n2\\n3\\n4\\n5\\n7\\n') == 'Yay!'\nassert solution('1\\n2\\n3\\n4\\n5\\n7\\n8\\n') == 'Yay!'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n') == 'Yay!'\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"1\\n2\\n4\\n8\\n9\\n15\"\n) == \"Yay!\"\nassert solution(\n    \"1\\n2\\n4\\n8\\n9\\n0\"\n) == \":(\\n\"\nassert solution(\n    \"1\\n2\\n4\\n8\\n9\\n10\"\n) == \":(\\n\"\nassert solution(\n    \"1\\n2\\n4\\n8\\n10\\n11\"\n) == \":)\"\n\nassert solution(\n    \"1\\n2\\n4\\n8\\n11\\n12\"\n) == \":)\""
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15\\n') == 'Yay!'\nassert solution('0\\n2\\n4\\n8\\n9\\n15\\n') == ':(\nassert solution('0\\n2\\n2\\n8\\n9\\n15\\n') == ':(\n\n\"\"\""
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15\\n') == 'Yay!'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n') == ':(\\n'\nassert solution('1\\n2\\n3\\n4\\n5\\n7\\n') == 'Yay!'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n') == ':(\\n'\n\n\"\"\""
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"1\n2\n4\n8\n9\n15\"\"\") == \"Yay!\"\n\"\"\""
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'\nassert solution('1\\n2\\n4\\n8\\n9\\n15\\n16') == 'Yay!'\nassert solution('1\\n2\\n4\\n8\\n9\\n15\\n16\\n17') == 'Yay!'\nassert solution('1\\n2\\n4\\n8\\n9\\n15\\n16\\n17\\n18') == 'Yay!'\nassert solution('1\\n2\\n4\\n8\\n9\\n15\\n16\\n17\\n18\\n19') == 'Yay!'\n\n'''"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3200\") == \"pink\"\nassert solution(\"5200\") == \"red\"\n\"\"\"\na = int(input())\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3200') == 'pink'\nassert solution('3201') =='red'\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"pink\") == \"pink\"\n\"\"\"\n\n\"\"\"\nINPUT:\n3200\nred\n\nOUTPUT:\nred\n\na = 3200 is not less than 3200, so we print s = red.\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3200', 'pink') == 'pink'\n\"\"\"\n\na = int(stdin())\ns = stdin()\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('pink') == 'pink'\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3200\") == \"pink\"\nassert solution(\"2600\") == \"red\"\nassert solution(\"2800\") == \"pink\"\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3200 pIsk\") == \"pIsk\"\nassert solution(\"pink\") == \"pink\"\n\"\"\"\n\na = int(input())\ns = input()\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3200') == 'pink'\nassert solution('3500') =='red'\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('pink') == 'pink'\nassert solution('yellow') =='red'\n\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1200') == 'ABC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1199') == 'ABC'\n\"\"\"\n\nr = int(input())"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1338') == 'ABC'\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1111\") == \"ABC\"\nassert solution(\"2999\") == \"ARC\"\nassert solution(\"1200\") == \"ABC\"\nassert solution(\"2501\") == \"ARC\"\nassert solution(\"3000\") == \"AGC\"\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'ABC'\nassert solution('ABC') == 'ABC'\nassert solution('ABC') == 'ABC'\nassert solution('ABC') == 'ABC'\nassert solution('ABC') == 'ABC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1234') == '1234'\nassert solution('12345') == '1234'\nassert solution('123456') == '1234'\n\n'''\n\nR = int(input())"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == \"ABC\"\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == 'A'\nassert solution('2') == 'B'\nassert solution('3') == 'C'\nassert solution('4') == 'D'\nassert solution('5') == 'E'\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1199') == 'ABC'\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(0) == \"ABC\"\nassert solution(1) == \"ARC\"\nassert solution(2) == \"AGC\"\nassert solution(3) == \"ABC\"\nassert solution(4) == \"ARC\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('111') == '999'\nassert solution('9') == '1'\nassert solution('119') == '991'\n\nprint(solution('111'))\nprint(solution('9'))\nprint(solution('119'))\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123\") == \"321\"\nassert solution(\"199\") == \"999\"\nassert solution(\"201\") == \"1001\"\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == '1'\nassert solution('9') == '9'\nassert solution('1111') == '1'\nassert solution('9') == '9'\nassert solution('1010') == '1'\n\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9111') == '9911'\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('119') == '991'\n\"\"\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"111\") == \"999\"\nassert solution(\"999\") == \"111\"\nassert solution(\"101\") == \"101\"\nassert solution(\"299\") == \"999\"\nassert solution(\"999\") == \"999\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"101\") == \"99\"\nassert solution(\"9\") == \"1\"\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1011') == '1111'\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"119\") == \"991\"\nprint(solution(\"119\"))\n\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"119\") == \"991\"\n\"\"\""
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\nassert solution(\"abbcc\") == \"abbcc\"\n\"\"\"\n\n\nfrom collections import Counter\nimport string"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_str) == solution_ref(test_str)"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\""
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\"\"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abbaac') == 'abac'\nassert solution('ac') == 'ac'\nassert solution('bccddaaf') == 'bcdaf'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\"\"\""
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\n\n\"\"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\n\"\"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 4\") == \"2\"\nassert solution(\"13 9\") == \"5\"\nassert solution(\"100 13\") == \"4\"\nassert solution(\"123 456\") == \"333\"\nassert solution(\"92 46\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5\n10 4\n13 9\n100 13\n123 456\n92 46\n\"\"\") == \"2\\n5\\n4\\n333\\n0\"\nprint(\"Cool!\")\nassert solution(\"\"\"\n5\n10 4\n13 9\n100 13\n123 456\n92 46\n\"\"\") == \"2\\n5\\n4\\n333\\n0\"\n\"\"\""
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n10 4\") == \"2\"\nassert solution(\"13 9\") == \"5\"\nassert solution(\"100 13\") == \"4\"\nassert solution(\"123 456\") == \"333\"\nassert solution(\"92 46\") == \"0\"\n\nprint(solution(input()))\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"123\\n4\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 4\") == \"2\"\nassert solution(\"13 9\") == \"5\"\nassert solution(\"100 13\") == \"4\"\nassert solution(\"123 456\") == \"333\"\nassert solution(\"92 46\") == \"0\""
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 4') == '2'\nassert solution('13 9') == '5'\nassert solution('100 13') == '4'\nassert solution('123 456') == '333'\nassert solution('92 46') == '0'\n\nprint(solution(\"10 4\"))\nprint(solution(\"13 9\"))\nprint(solution(\"100 13\"))\nprint(solution(\"123 456\"))\nprint(solution(\"92 46\"))\n\"\"\"\nimport math\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '10 4') == '2'\nassert solution(\n    '13 9') == '5'\nassert solution(\n    '100 13') == '4'\nassert solution(\n    '123 456') == '333'\nassert solution(\n    '92 46') == '0'\n\"\"\""
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n10 4\\n13 9\\n100 13\\n123 456\\n92 46\\n\") == \"2\\n5\\n4\\n333\\n0\"\nprint(\"OK\")\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == test_output_1\n\n-----Solution-----\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 4') == 2\nassert solution('13 9') == 5\nassert solution('100 13') == 4\nassert solution('123 456') == 333\nassert solution('92 46') == 0\n\"\"\""
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == 2.666666666666667\n\"\"\"\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667\n\"\"\"\n\n\nfrom math import ceil\nimport sys"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(sys.stdin.readlines())) == '2.666666666666667'\n\"\"\""
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == \"2.666666666666667\"\n\"\"\"\n\nimport math\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nres = 0\nfor i in range(n - k + 1):\n    res = max(res, math.floor(sum(a[i:i + k]) / k))\n\nprint(res)\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == 2.666666666666667\n\n---"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667\n\"\"\"\n\nn, k = map(int, input().split())\n\na = list(map(int, input().split()))\n\nmax_ = 0\nfor i in range(n - k + 1):\n    sum_ = 0\n    for j in range(k):\n        sum_ += a[i + j]\n    if sum_ / k > max_:\n        max_ = sum_ / k\n\nprint(max_)\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == 2.666666666666667\n\"\"\"\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'4 3\\n3 4 1 2'\n) == '2.666666666666667'\n\nassert solution(\n'5 3\\n3 5 4 1 2'\n) == '3.833333333333334'\n\n-----Explanation-----\nIn the first example the segment consists of 3 consecutive days (1, 2 and 4). The average temperature of this segment is (3 + 4 + 1) / 3 = 2.5, which is the maximal value possible for the average temperature. The heat intensity in this segment is 2.5.\n\nIn the second example the segment consists of 5 consecutive days (4, 1, 2, 3 and 5). The average temperature of this segment is (3 + 4 + 1 + 2 + 4) / 5 = 3.8, which is the maximal value possible for the average temperature. The heat intensity in this segment is 3.8.\n\nIn both cases the heat intensity value is 2.666666666666667."
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"YES\"\n\"\"\"\n\nfrom collections import Counter, defaultdict\nfrom typing import List, Set, Dict"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\") == 'YES'\nassert solution(\"4 2\\n4 1 2 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == 'YES'\nassert solution(\"4 2\\n4 1 2 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == 'NO'\nassert solution(\"6 2\\n6 1 2 3 4 5 6\\n1 2 3\\n4 2 5 6\\n2 3 4\\n4 1 5 6\\n3 1 2 4 5 6\\n3 4 5\\n2 4 3\\n4 5 6\\n2 5 3 6\\n5 2 3 6\\n1 6 2 3 4 5\\n5 3 6\\n3 6 4 2 5 1\\n1 6 2 3 4 5\\n5 4 3 6\\n2 4 3 6\\n4 3 6 2 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'YES'\n\"\"\""
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == 'NO'\nassert solution('1 1') == 'NO'\nassert solution('3 2') == 'YES'\nassert solution('1 2') == 'NO'\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n3 2\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\") == \"YES\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'NO'\n\nassert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'YES'\n\nassert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'NO'\n\nassert solution('1 1\\n4 4\\n4\\n4\\n1 1\\n1 1\\n1\\n') == 'YES'\n\nassert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'NO'"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'YES\\nNO\\nYES\\nYES\\nNO\\nYES\\n'\n\"\"\""
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2 3\") == \"NO\"\nassert solution(\"2 1\") == \"NO\"\nassert solution(\"3 2\") == \"YES\"\nassert solution(\"4 2\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2') == 'YES'\nassert solution('1 2 3') == 'NO'\nassert solution('3 2') == 'YES'\nassert solution('4 2') == 'YES'\nassert solution('5 1') == 'YES'\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bab\") == \"baabbb\"\n\"\"\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('baabbb') == 'bab'\nassert solution('ooopppssss') == 'oops'\nassert solution('z') == 'z'\nassert solution('110110111') == '111110111'\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"bab\") == \"baabbb\"\n\nassert solution(\"babbba\") == \"babbaba\"\n\nassert solution(\"abbabbabbbbbbb\") == \"abbabbabbbbbbb\"\n\nassert solution(\"z\") == \"z\"\n\nassert solution(\"aabbb\") == \"aabbb\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"baabbb\") == \"bab\"\n\"\"\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bab\") == \"baabbb\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('baabbb') == 'bab', 'wrong result'\nassert solution('ooopppssss') == 'oops'\nassert solution('z') == 'z'"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('bab') == 'baabbb'\nassert solution('baabbb') == 'bab'\nassert solution('z') == 'z'\n\n\"\"\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('baabbb') == 'bab'\nassert solution('ooopppssss') == 'oops'\n\"\"\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bab\") == \"baabbb\"\nassert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n\n\"\"\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4') == '1'\nassert solution('4 3\\n2 1 3\\n4 3 4\\n2 4 1') == '0'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3') == '0'\nassert solution('5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2') == '2'\nassert solution('1 0') == '0'\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == \"0\"\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n\") == \"1\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"2\"\nassert solution(\"1 0\\n\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == \"0\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 3\\n1 2 1\\n2 3 2\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == \"1\"\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\") == \"1\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n1 1 3\") == \"2\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == \"2\""
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == '1'\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n\") == '0'\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == '0'\nassert solution(\"1 0\\n\") == '0'\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == '2'"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4') == '1'\nassert solution('4 3\\n2 1 3\\n4 3 4\\n2 4 1') == '0'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3') == '0'\nassert solution('1 0\\n') == '0'\nassert solution('5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3') == '2'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''8 10\n1 2 1\n2 3 2\n2 4 5\n1 4 2\n6 3 3\n6 1 3\n3 5 2\n3 7 1\n4 8 1\n6 2 4''') == '1'\nassert solution('''4 3\n2 1 3\n4 3 4\n2 4 1''') == '0'\nassert solution('''3 3\n1 2 1\n2 3 3\n1 3 3''') == '0'\nassert solution('''1 0\n''') == '0'\nassert solution('''5 6\n1 2 2\n2 3 1\n4 5 3\n2 4 2\n1 4 2\n1 5 3''') == '2'"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == \"0\"\n\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\\n\") == \"1\"\n\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"2\"\n\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == \"0\"\n\nassert solution(\"1 0\\n\") == \"0\"\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom math import inf\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\\n\") == \"1\"\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == \"0\"\nassert solution(\"1 0\\n\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"2\""
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n\") == '0'\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == '1'\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\n\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n\") == \"0\"\n\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == \"0\"\n\nassert solution(\"1 0\\n\") == \"0\"\n\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"2\"\n\n\"\"\"\n\nfrom collections import deque, defaultdict\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBGRR\"\nassert solution(\"RR\") == \"RR\"\nassert solution(\"RGBG\") == \"RRRRRRRR\"\nassert solution(\"RGBG\") == \"RRRRRRRR\"\nassert solution(\"RGBG\") == \"RRRRRRRR\"\n\"\"\""
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RGBGRBB\") == '3\\nRGBRGBR'\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\n\"\"\"\n\nimport collections\nimport math\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBGRR\"\nassert solution(\"RRRRRR\") == \"RRRR\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"RGGB\") == \"GG\"\nassert solution(\"RBBB\") == \"RR\"\nassert solution(\"GB\") == \"G\"\nassert solution(\"RB\") == \"R\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\n\"\"\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"RGBGRRR\") == \"RR\"\nassert solution(\"RGBGRRBR\") == \"RRRR\"\nassert solution(\"RGBGRRRR\") == \"RRR\"\nassert solution(\"RGBGRRRRR\") == \"R\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"RGBGR\") == \"RR\"\nassert solution(\"RR\") == \"RR\"\nassert solution(\"GB\") == \"GB\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RGBRGBGR\") == \"RGBRGBR\"\nassert solution(\"GRB\") == \"GRB\"\nassert solution(\"RGBGRRR\") == \"RRR\"\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List, Dict, Set, Union, Tuple, Callable\nfrom functools import reduce\nfrom itertools import combinations\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('RGBGRBB') == 'RGBRGBR'\nassert solution('GRB') == 'GRB'\nassert solution('RGBRBB') == 'GRB'\nassert solution('BB') == 'BB'\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 JPY\\n0.1BTC\") == \"48000.0\"\nprint(\"Test 1:\", solution(\"1 JPY\\n0.1BTC\"), \"48000.0\")\n\nassert solution(\"2 JPY\\n10000 JPY\\n0.1BTC\") == \"48000.0\"\nprint(\"Test 2:\", solution(\"2 JPY\\n10000 JPY\\n0.1BTC\"), \"48000.0\")\n\nassert solution(\"3 JPY\\n10000 JPY\\n0.1BTC\\n1 JPY\\n10000 JPY\\n0.1BTC\") == \"80000.0\"\nprint(\"Test 3:\", solution(\"3 JPY\\n10000 JPY\\n0.1BTC\\n1 JPY\\n10000 JPY\\n0.1BTC\"), \"80000.0\")\n\nassert solution(\"4 JPY\\n10000 JPY\\n0.1BTC\\n1 JPY\\n10000 JPY\\n0.1BTC\\n1 JPY\\n10000 JPY\\n0.1BTC\") == \"80000.0\"\nprint(\"Test 4:\", solution(\"4 JPY\\n10000 JPY\\n0.1BTC\\n1 JPY\\n10000 JPY\\n0.1BTC\\n1 JPY\\n10000 JPY\\n0.1BTC\"), \"80000.0\")\n\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n10000 JPY\\n0.10000000 BTC\\n:\") == \"48000.0\"\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\":\n    1, JPY\n    2, BTC\n    :\n    3, JPY\n    :\n    4, JPY\n    :\n    5, JPY\n    :\n    6, JPY\n    :\n    7, JPY\n    :\n    8, JPY\n    :\n    9, JPY\n    :\n    10, JPY\n    :\n    11, JPY\n    :\n    12, JPY\n    :\n    13, JPY\n    :\n    14, JPY\n    :\n    15, JPY\n    :\n    16, JPY\n    :\n    17, JPY\n    :\n    18, JPY\n    :\n    19, JPY\n    :\n    20, JPY\n    :\n    21, JPY\n    :\n    22, JPY\n    :\n    23, JPY\n    :\n    24, JPY\n    :\n    25, JPY\n    :\n    26, JPY\n    :\n    27, JPY\n    :\n    28, JPY\n    :\n    29, JPY\n    :\n    30, JPY\n    :\n    31, JPY\n    :\n    32, JPY\n    :\n    33, JPY\n    :\n    34, JPY\n    :\n    35, JPY\n    :\n    36, JPY\n    :\n    37, JPY\n    :\n    38, JPY\n    :\n    39, JPY\n    :\n    40, JPY\n    :\n    41, JPY\n    :\n    42, JPY\n    :\n    43, JPY\n    :\n    44, JPY\n    :\n    45, JPY\n    :\n    46, JPY\n    :\n    47, JPY\n    :\n    48, JPY\n    :\n    49, JPY\n    :\n    50, JPY\n    :\n    51, JPY\n    :\n    52, JPY\n    :\n    53, JPY\n    :\n    54, JPY\n    :\n    55, JPY\n    :\n    56, JPY\n    :\n    57, JPY\n    :\n    58, JPY\n    :\n    59, JPY\n    :\n    60, JPY\n    :\n    61, JPY\n    :\n    62, JPY\n    :\n    63, JPY\n    :\n    64, JPY\n    :\n    65, JPY\n    :\n    66, JPY\n    :\n    67, JPY\n    :\n    68, JPY\n    :\n    69, JPY\n    :\n    70, JPY\n    :\n    71, JPY\n    :\n    72, JPY\n    :\n    73, JPY\n    :\n    74, JPY\n    :\n    75, JPY\n    :\n    76, JPY\n    :\n    77, JPY\n    :\n    78, JPY\n    :\n    79, JPY\n    :\n    80, JPY\n    :\n    81, JPY\n    :\n    82, JPY\n    :\n    83, JPY\n    :\n    84, JPY\n    :\n    85, JPY\n    :\n    86, JPY\n    :\n    87, JPY\n    :\n    88, JPY\n    :\n    89, JPY\n    :\n    90, JPY\n    :\n    91, JPY\n    :\n    92, JPY\n    :\n    93, JPY\n    :\n    94, JPY\n    :\n    95, JPY\n    :\n    96, JPY\n    :\n    97, JPY\n    :\n    98, JPY\n    :\n    99, JPY\n    :\n    100, JPY\n    :\n    101, JPY\n    :\n    102, JPY\n    :\n    103, JPY\n    :\n    104, JPY\n    :\n    105, JPY\n    :\n    106, JPY\n    :\n    107, JPY\n    :\n    108, JPY\n    :\n    109, JPY\n    :\n    110, JPY\n    :\n    111, JPY\n    :\n    112, JPY\n    :\n    113, JPY\n    :\n    114, JPY\n    :\n    115, JPY\n    :\n    116, JPY\n    :\n    117, JPY\n    :\n    118, JPY\n    :\n    119, JPY\n    :\n    120, JPY\n    :\n    121, JPY\n    :\n    122, JPY\n    :\n    123, JPY\n    :\n    124, JPY\n    :\n    125, JPY\n    :\n    126, JPY\n    :\n    127, JPY\n    :\n    128, JPY\n    :\n    129, JPY\n    :\n    130, JPY\n    :\n    131, JPY\n    :\n    132, JPY\n    :\n    133, JPY\n    :\n    134, JPY\n    :\n    135, JPY\n    :\n    136, JPY\n    :\n    137, JPY\n    :\n    138, JPY\n    :\n    139, JPY\n    :\n    140, JPY\n    :\n    141, JPY\n    :\n    142, JPY\n    :\n    143, JPY\n    :\n    144, JPY\n    :\n    145, JPY\n    :\n    146, JPY\n    :\n    147, JPY\n    :\n    148, JPY\n    :\n    149, JPY\n    :\n    150, JPY\n    :\n    151, JPY\n    :\n    152, JPY\n    :\n    153, JPY\n    :\n    154, JPY\n    :\n    155, JPY\n    :\n    156, JPY\n    :\n    157, JPY\n    :\n    158, JPY\n    :\n    159, JPY\n    :\n    160, JPY\n    :\n    161, JPY\n    :\n    162, JPY\n    :\n    163, JPY\n    :\n    164, JPY\n    :\n    165, JPY\n    :\n    166, JPY\n    :\n    167, JPY\n    :\n    168, JPY\n    :\n    169, JPY\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10000 JPY\\n0.10000000 BTC') == '48000.0'\n\n-------\n\nWrite 5 lines of code to test the correctness of solution:\nTakahashi received otoshidama (New Year's money gifts) from N of his relatives. You are given N values x_1, x_2,..., x_N and N strings u_1, u_2,..., u_N as input. Each string u_i is either JPY or BTC, and x_i and u_i represent the content of the otoshidama from the i-th relative.\nFor example, if x_1 = 10000 and u_1 = JPY, the otoshidama from the first relative is 10000 Japanese yen; if x_2 = 0.10000000 and u_2 = BTC, the otoshidama from the second relative is 0.1 bitcoins.\nIf we convert the bitcoins into yen at the rate of 380000.0 JPY per 1.0 BTC, how much are the gifts worth in total?\n\n-----Constraints-----\n - 2 \\leq N \\leq 10\n - u_i = JPY or BTC.\n - If u_i = JPY, x_i is an integer such that 1 \\leq x_i \\leq 10^8.\n - If u_i = BTC, x_i is a decimal with 8 decimal digits, such that 0.00000001 \\leq x_i \\leq 100.00000000.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nx_1 u_1\nx_2 u_2\n:\nx_N u_N\n\n-----Output-----\nIf the gifts are worth Y yen in total, print the value Y (not necessarily an integer).\nOutput will be judged correct when the absolute or relative error from the judge's output is at most 10^{-5}.\n\n-----Sample Input-----\n2\n10000 JPY\n0.10000000 BTC\n\n-----Sample Output-----\n48000.0\n\nThe otoshidama from the first relative is 10000 yen. The otoshidama from the second relative is 0.1 bitcoins, which is worth 38000.0 yen if converted at the rate of 380000.0 JPY per 1.0 BTC. The sum of these is 48000.0 yen.\nOutputs such as 48000 and 48000.1 will also be judged correct.\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == '48000.0'\n\"\"\"\n\nfrom math import log10\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10000 JPY\\n0.10000000 BTC') == '48000.0'\n\"\"\"\n\nN = int(stdin.readline())\nx_list = []\nu_list = []\nfor _ in range(N):\n    x, u = stdin.readline().split()\n    x_list.append(float(x))\n    u_list.append(u)"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\":\\n2\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\nprint(\"Passed\")\n\"\"\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10000 JPY\\n0.10000000 BTC') == 48000.0\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10000 JPY\\n0.10000000 BTC') == 48000.0\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n') == '3'\nassert solution('4 2\\n') == '3'\nassert solution('4 3\\n') == '4'\nassert solution('5 5\\n') == '4'\nassert solution('10 7\\n') == '7'\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2') == '3'\nassert solution('2 1') == '1'\nassert solution('100 1000') == '999'\n\n\"\"\"\nimport math"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n') == '3'\nprint(solution(stdin))\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2') == '3'\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '4 2\\n') == '3'\nprint('Passed')\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2') == '3'\n\"\"\"\n\nN, i = [int(item) for item in stdin.split()]\nprint(i-1)\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ip cc') == 'icpc'\nassert solution('dp dp') == 'dpdp'\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\nassert solution(\"lk hw rr\") == \"lkhwrr\"\n\"\"\"\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '2'\n    'ip cc'\n) == 'icpc'\n\n------\n\n'''"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\n\"\"\"\nimport unittest\nfrom typing import List"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ip cc') == 'icpc'\n\"\"\"\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ip cc') == 'icpc'"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ip cc') == 'icpc'\nassert solution('ip') == 'ip'\nassert solution('') == ''\n\"\"\"\n\nimport ast\nimport sys\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'abc'\nassert solution('abc ') == 'abc '\nassert solution('ab c') == 'a b c'"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ip cc') == 'icpc'\nprint('Passed')\n\n\"\"\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABA\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABA') == 'Yes'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABA') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABA\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABA') == 'Yes'\nassert solution('ABB') == 'Yes'\nassert solution('BAB') == 'No'\nassert solution('AAB') == 'No'\n\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"BAA\") == \"Yes\"\nassert solution(\"ABA\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"ABB\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('AAA') == 'Yes'\nassert solution('ABA') == 'Yes'\nassert solution('BAA') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"BBA\") == \"Yes\"\nassert solution(\"ABB\") == \"No\"\nassert solution(\"BAB\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"BBA\") == \"No\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('SRS') == '2'\nassert solution('RRS') == '2'\nassert solution('S') == '0'\n\"\"\"\n\n\"\"\"\n\u89e3\u8aac\n\n\u5148\u982d\u304b\u3089\u7d42\u7aef\u307e\u3067\u56de\u3059\n0: S\n1: S\n2: R\n3: R\n4: S\n5: R\n6: R\n7: R\n8: S\n9: S\n10: S\n11: R\n12: R\n13: S\n14: R\n15: R\n16: S\n\n\u5148\u982d\u304b\u3089\u7d42\u7aef\u307e\u3067\u30921\u3064\u305a\u3064\u56de\u3057\u3001rain\u3067\u306a\u3051\u308c\u3070\u6c34\u3067\u3042\u308c\u3070\u30ab\u30a6\u30f3\u30c8\u3059\u308b\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''RRS\nRRR''') == '2'\n\nassert solution('''SRS\nRSS\nRSR\nRRS\n''') == '3'\n\nprint(solution(input()))\n'''"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"SRSR\") == 2\nassert solution(\"SRRS\") == 2\nassert solution(\"RRS\") == 2\nassert solution(\"RRR\") == 1\nassert solution(\"RRSR\") == 2\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('RRR') == 2\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RRR\") == 1\nassert solution(\"RRS\") == 2\nassert solution(\"RRRRS\") == 2\nassert solution(\"RRRRSR\") == 2\nassert solution(\"RRRRSRRSRRSR\") == 2\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RRR\") == 3\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('RRR') == 3\n\"\"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"SRS\") == 2\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RRR\") == 1\nassert solution(\"SRS\") == 1\nassert solution(\"SRSR\") == 2\nassert solution(\"RRSR\") == 3\nassert solution(\"SRSRS\") == 2\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('RRS') == 2\nassert solution('SRS') == 3\nassert solution('SRR') == 3\nassert solution('RRSR') == 3\nassert solution('RRRR') == 4\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3\\n1 2 3') == '3 1 2'\nassert solution('1 2 3\\n2 1 3') == '3 1 2'\nassert solution('1 2 3\\n3 1 2') == '3 1 2'\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n1 2 3\n\"\"\"\n) == \"\"\"\n3 1 2\n\"\"\"\n\nassert solution(\n\"\"\"\n5 6 7\n\"\"\"\n) == \"\"\"\n7 6 5\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 1\") == \"3 1 2\"\nassert solution(\"1 1 2\") == \"2 1 1\"\nassert solution(\"1 2 3\") == \"3 2 1\"\n\nimport os\nimport sys"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == '3 1 2'\n\n-------"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n\nassert solution(\"4 5 6\") == \"6 5 4\"\n\nassert solution(\"10 11 12\") == \"12 11 10\"\n\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"2 3 1\") == \"3 1 2\"\nassert solution(\"3 1 2\") == \"1 2 3\"\nassert solution(\"4 5 6\") == \"6 5 4\"\nassert solution(\"2 3 1\") == \"3 1 2\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"1 1 1\") == \"1 1 1\"\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n\"\"\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nprint(\"PASS\")\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('30 100') == '100'\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('30 100') == '100'\n\"\"\"\n\nfrom unittest import TestCase\n\n\nclass Solution:\n    def solve(self, A, B):\n        if A < 0 or A > 100:\n            return None\n        if B < 0 or B > 1000:\n            return None\n\n        if B % 2!= 0:\n            return None\n\n        if 13 <= A <= 100:\n            return B\n        if A <= 6:\n            return 0\n        if A >= 12:\n            return B / 2\n\n        return B / 2 - 1\n\n\nclass TestSolution(TestCase):\n    def test_example_1(self):\n        assert Solution().solve(30, 100) == 100\n\n    def test_example_2(self):\n        assert Solution().solve(100, 100) == 0\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('30 100\\n') == '100'\n'''"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"30 100\") == \"100\"\n\n\"\"\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('30 100') == '100'\n\"\"\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 10\") == \"10\"\n\"\"\"\n\nA, B = list(map(int, input().split()))\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('30 100') == '100'\n\"\"\"\n\na, b = map(int, input().split())\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('30 100') == '100'\n\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('+-') == '2'\n\"\"\"\n\nS = input()\nintegers = [0, 0, 0, 0]\n\nfor s in S:\n    if s == '+':\n        integers[0] += 1\n    elif s == '-':\n        integers[0] -= 1\n    integers[1] = integers[0] // 2\n    integers[2] = integers[0] // 2\n    integers[3] = integers[0] // 2\n\nprint(*integers)"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('+-') == '2'\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"+-\") == \"2\"\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('+-') == '2'\nassert solution('+-++') == '1'\nassert solution('+-+++') == '0'\nassert solution('+-+++-') == '-1'\n\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('+-') == '2'\nassert solution('-+-+') == '0'\nassert solution('+-0') == '2'\nassert solution('0') == '0'\nassert solution('0+') == '1'\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"+-\") == 2\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"+-\") == \"2\"\nassert solution(\"--\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"+-\") == \"2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"+-\") == \"0\"\nassert solution(\"+-++\") == \"1\"\n\nprint(\"Successfully passed!\")\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"+-\") == \"2\"\nprint(\"Test 1 Passed\")\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/06/30') == 'TBD'\n\nimport sys"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/04/29') == 'TBD'\nassert solution('2019/04/32') == 'TBD'\n\"\"\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/29\") == \"TBD\"\n\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/31\") == \"TBD\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2018/04/30\") == \"TBD\"\nassert solution(\"2000/1/1\") == \"TBD\"\n\"\"\"\n\nfrom datetime import datetime\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2020/01/10) == \"TBD\"\nassert solution(2019/04/30) == \"Heisei\"\nassert solution(2019/02/29) == \"TBD\"\n\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/04/29') == 'TBD'\n\"\"\"\nimport datetime\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/31\") == \"TBD\"\nassert solution(\"2020/01/01\") == \"TBD\"\nassert solution(\"2019/04/32\") == \"TBD\"\nassert solution(\"2019/04/33\") == \"TBD\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/02/29\") == \"TBD\"\n\n\"\"\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'\nassert solution('3\\n1337 1337 1337') == '3'\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"18\") == \"14\"\nassert solution(\"10\") == \"9\"\nassert solution(\"3\") == \"3\"\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == 14\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == 9\nassert solution(\"3\\n1337 1337 1337\") == 3\n\"\"\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == '14'\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == '9'\nassert solution(\"3\\n1337 1337 1337\") == '3'\nassert solution(\"1\\n5\") == '1'\nassert solution(\"2\\n7 6\") == '2'\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"18\") == \"14\"\nassert solution(\"10\") == \"9\"\nassert solution(\"3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\n\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'\n\nassert solution('3\\n1337 1337 1337') == '3'\n\n\n\"\"\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'\nassert solution('3\\n1337 1337 1337') == '3'\n\n\n\"\"\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"18 2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == \"14\"\nassert solution(\"10 6 6 3 6 1000000000 3 3 6 6\") == \"9\"\nassert solution(\"3 1337 1337 1337\") == \"3\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == 14\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == 9\nassert solution('3\\n1337 1337 1337') == 3\n\n\n\"\"\""
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'\nassert solution('3\\n1337 1337 1337') == '3'\n\n\n-----Question-----\n\nFind a sequence of contests such that the number of problems in each contest is exactly twice the number of problems in the previous contest.\n\n-----Hints-----\n\nIf you know that the number of problems in the last contest is $K$, you can find the number of problems in the first contest with $2K$ problems.\n\nIf you have $k$ problems in the last contest and $2k$ problems in the previous one, you can always find $2k$ problems in the first contest.\n\nThe number of problems in the first contest can be found with $k + k/2$.\n\nIf the number of problems in the first contest is $k$, then the number of problems in the second one is $2k - 2k/2 = k/2$.\n\nIf the number of problems in the first contest is $k - 1$, then the number of problems in the second one is $2k - 1 = k/2 + 1$.\n\nIf the number of problems in the first contest is $k - 2$, then the number of problems in the second one is $2k - 2 = k/2 + 2$.\n\nAnd so on.\n\nThe number of problems in the last contest can be found with $2k - 2$.\n\nIf the number of problems in the last contest is $2k - 2$, then the number of problems in the first one is $k - 2 = 2k/2 - 1$.\n\nIf the number of problems in the last contest is $2k - 3$, then the number of problems in the first one is $k - 3 = 2k/2 - 2$.\n\nSo on.\n\"\"\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == '2\\n2 1'\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2\\n') == '2\\n2 1'\n\"\"\"\n\nn, k = map(int, input().split())\nids = list(map(int, input().split()))\n\nk_queue = []\n\nfor i in range(k):\n    k_queue.append(0)\n\nid_queue = []\nfor i in range(k):\n    id_queue.append(0)\n\nk_queue_len = k\n\nfor i in range(n):\n    k_queue_len -= 1\n    if k_queue_len < 0:\n        k_queue_len = k - 1\n    if ids[i] in id_queue:\n        continue\n    if ids[i] in k_queue:\n        k_queue.remove(ids[i])\n        k_queue.insert(0, ids[i])\n        id_queue.remove(ids[i])\n        id_queue.insert(0, ids[i])\n    else:\n        while len(k_queue) > 0:\n            if ids[i] < k_queue[-1]:\n                break\n            k_queue.pop()\n            id_queue.pop()\n        k_queue.append(ids[i])\n        id_queue.append(ids[i])\n\nprint(len(k_queue))\nprint(' '.join(map(str, k_queue)))"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2\\n') == '2\\n2 1'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3\\n') == '3\\n1 3 2'\n\"\"\"\n\nn, k = map(int, input().split())\nls = list(map(int, input().split()))\n\nlast_seen = {}\nfor i, v in enumerate(ls):\n    if v in last_seen:\n        if len(last_seen) < k:\n            print(v)\n            for vv in last_seen:\n                print(vv)\n            last_seen[v].append(i)\n            if len(last_seen) == k:\n                print(v)\n                print(last_seen[v][-1])\n                for vv in last_seen[v]:\n                    print(vv)\n    else:\n        last_seen[v] = [i]\n        if len(last_seen) == k:\n            print(v)\n            print(last_seen[v][-1])\n            for vv in last_seen[v]:\n                print(vv)\n    if i < n - 1:\n        print(v, i)\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\nassert solution(\"2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\nassert solution(\"10 4\\n1 2 3 2 1 3 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\n\n\"\"\""
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"7 2\\n1 2 3 2 1 3 2\"\n) == \"2\\n2 1\"\n\nassert solution(\n\"10 4\\n2 3 3 1 1 2 1 2 3 3\"\n) == \"3\\n1 3 2\""
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\nassert solution(\"10 4\\n1 2 3 2 1 3 2\") == \"2\\n1 3 2\"\n\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"7 2\\n\"\n    \"1 2 3 2 1 3 2\\n\"\n) == \"2\\n2 1\"\nassert solution(\n    \"10 4\\n\"\n    \"2 3 3 1 1 2 1 2 3 3\\n\"\n) == \"3\\n1 3 2\""
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\") == \"2\\n2 1\"\nassert solution(\"10 4\") == \"3\\n1 3 2\"\n\"\"\""
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\nassert solution(\"5 2\\n2 2 5 4\\n\") == \"1\\n2 2 4 5\"\n\n\"\"\""
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n8\\n4\\n2\\n1\") == \"1 -1 2 3\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 8 2 4\\n8\\n5\\n14\\n10\") == '1 -1 3 2'\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2\\n8\\n2\\n4\") == \"1\\n-1\\n3\\n2\"\n\"\"\"\n\nn, q = map(int, input().split())\n\ncoins = list(map(int, input().split()))\n\nfor _ in range(q):\n    b = int(input())\n    min_value = 0\n    # print(b)\n    for i in range(n):\n        if b == 0:\n            if min_value == 0:\n                min_value = -1\n            break\n        # print(b, min_value, 2 ** i, b >= 2 ** i)\n        if b >= 2 ** i and min_value == 0:\n            min_value = i + 1\n            continue\n        if b < 2 ** i and min_value == 0:\n            min_value = -1\n            break\n    print(min_value)\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n3\\n1') == '1\\n2\\n-1'\n\"\"\"\n\nimport sys\nfrom typing import List\n\n\nclass Solution:\n    def solution(self, input_str: str) -> str:\n        n, q = input_str.split('\\n')\n        coins = list(map(int, input_str.split('\\n')[1:]))\n        query = list(map(int, input_str.split('\\n')[2:]))\n        n = int(n)\n        q = int(q)\n        max_n = max(coins)\n        min_n = min(coins)\n        if min_n == max_n:\n            return''.join(['1'] * q)\n        else:\n            return''.join(['-1'] * q)\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n2\\n2\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\") == \"1 -1 3 2\"\n\"\"\"\n\nimport math\n\n_, _ = map(int, input().split())\na = list(map(int, input().split()))\nfor _ in range(int(input())):\n    print(math.floor(math.log(int(input()), 2)) + 1)\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 1\\n2\\n3\\n4\\n2 2') == '3'\n\"\"\"\n\nn, q = map(int, stdin.readline().split())\narr = list(map(int, stdin.readline().split()))\na = list(map(int, stdin.readline().split()))\n\nfor i in range(q):\n    b = int(stdin.readline())\n    x = 1\n    t = 2\n    while t < n:\n        t *= 2\n        x += 1\n    x -= 1\n    t = 2 ** x\n    while t > 0:\n        if t >= b:\n            t //= a[x]\n            x -= 1\n        else:\n            x -= 1\n    print(x + 1)\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4 8 2 4\\n8\\n5\\n14\\n10\\n') == '1 -1 3 2 2'\n\"\"\""
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n4 5\\n2 4\\n1 3\\n2 5\\n2 4\\n1 4\\n2 3\\n1 2\\n2 5\\n2 5\\n1 5\\n1 5\\n1 2\\n1 3\\n1 4\\n2 2\\n2 1\\n1 4\\n1 2\\n1 2\\n2 2\\n2 3\\n1 4\\n2 4\\n2 3\\n2 4\\n1 4\\n1 2\\n1 3\\n1 4\\n2 3\\n1 4\\n1 4\\n2 3\\n1 4\\n2 2\\n2 5\\n2 4\\n1 5\\n2 2\\n1 2\\n2 4\\n1 2\\n1 2\\n1 3\\n1 4\\n1 4\\n2 4\\n2 4\\n1 4\\n1 3\\n2 2\\n2 3\\n1 4\\n1 4\\n2 5\\n2 3\\n2 4\\n2 4\\n2 5\\n1 5\\n1 4\\n1 3\\n1 4\\n1 5\\n2 4\\n1 2\\n1 3\\n2 5\\n1 3\\n1 4\\n1 3\\n2 4\\n1 2\\n2 4\\n1 2\\n1 3\\n1 4\\n2 5\\n2 4\\n1 2\\n2 3\\n2 4\\n1 2\\n1 5\\n1 4\\n1 3\\n2 2\\n1 5\\n2 2\\n1 4\\n2 2\\n2 3\\n1 3\\n1 2\\n1 5\\n1 2\\n1 5\\n1 3\\n1 5\\n2 2\\n1 3\\n2 4\\n1 2\\n1 4\\n1 2\\n1 4\\n1 4\\n1 2\\n1 5\\n2 2\\n1 2\\n1 2\\n1 5\\n2 2\\n1 4\\n1 5\\n1 5\\n2 4\\n2 4\\n2 4\\n2 3\\n2 2\\n1 3\\n2 2\\n1 2\\n1 2\\n2 3\\n2 4\\n1 4\\n1 3\\n1 5\\n1 2\\n2 2\\n1 2\\n1 2\\n1 4\\n1 3\\n1 2\\n2 2\\n1 4\\n1 5\\n1 2\\n2 4\\n2 5\\n2 2\\n1 3\\n1 2\\n1 4\\n1 5\\n1 3\\n1 3\\n1 4\\n1 2\\n1 2\\n1 4\\n1 5\\n1 2\\n1 2\\n1 4\\n2 4\\n1 2\\n1 5\\n1 2\\n1 2\\n1 5\\n1 2\\n1 4\\n1 3\\n1 5\\n1 4\\n1 5\\n1 3\\n1 2\\n1 4\\n1 2\\n1 2\\n1 5\\n1 2\\n1 5\\n1 3\\n1 5\\n2 2\\n2 4\\n1 4\\n1 4\\n1 2\\n1 5\\n1 4\\n1 5\\n1 3\\n1 5\\n1 5\\n1 2\\n1 4\\n1 2\\n1 2\\n1 3\\n1 3\\n1 5\\n2 3\\n2 2\\n2 4\\n1 2\\n1 2\\n1 4\\n1 5\\n1 4\\n1 4\\n1 3\\n1 5\\n2 2\\n2 4\\n1 2\\n1 2\\n1 2\\n1 3\\n2 4\\n2 2\\n1 3\\n1 2\\n1 2\\n1 5\\n1 2\\n1 4\\n1 5\\n1 3\\n1 2\\n1 3\\n1 4\\n1 5\\n1 3\\n1 4\\n1 5\\n1 2\\n1 4\\n1 2\\n1 3\\n1 2\\n1 4\\n1 5\\n1 5\\n1 4\\n1 5\\n1 4\\n1 2\\n1 4\\n1 3\\n1 5\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 3\\n1 4\\n1 5\\n1 4\\n1 4\\n1 2\\n1 4\\n1 2\\n1 5\\n1 4\\n1 5\\n1 3\\n1 5\\n1 5\\n1 4\\n1 5\\n1 4\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 5\\n1 2\\n1 2\\n1 5\\n1 2\\n1 2\\n1 2\\n1 4\\n1 5\\n1 5\\n1 4\\n1 4\\n1 2\\n1 3\\n1 2\\n1 4\\n1 4\\n1 3\\n1 5\\n1 5\\n1 2\\n1 4\\n1 5\\n1 3\\n1 2\\n1 5\\n1 5\\n1 5\\n1 5\\n1 4\\n1 5\\n1 5\\n1 5\\n1 5\\n1 2\\n1 4\\n1 2\\n1 2\\n1 2\\n1 5\\n1 4\\n1 3\\n1 2\\n1 2\\n1 2\\n1 3\\n1 5\\n1 2\\n1 5\\n1 2\\n1 5\\n1 2\\n1 4\\n1 2\\n1 2\\n1 5\\n1 4\\n1 2\\n1 5\\n1 5\\n1 2\\n1 2\\n1 5\\n1 4\\n1 4\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 5\\n1 2\\n1 5\\n1 2\\n1 5\\n1 2\\n1 4\\n1 2\\n1 2\\n1 2\\n1 2\\n1 4\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 4\\n1 5\\n1 5\\n1 5\\n1 5\\n1"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 8 2 4\\n8\\n5\\n14\\n10\\n') == '1 -1 3 2'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '0'\nassert solution('3 3') == '0'\nassert solution('2 2 2') == '0'\nassert solution('1 2 2 2') == '0'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == \"21\"\n\n\"\"\"\nfrom collections import Counter\n\nfrom utils import timing\n\ninput_n, input_k = [int(x) for x in input().split()]\nfav_nums = [int(x) for x in input().split()]\ncount = [int(x) for x in input().split()]\nassert len(count) == input_n * input_k\nassert len(fav_nums) == input_n\n\nsorted_count = sorted(count, reverse=True)\nassert all(x <= input_k for x in sorted_count)\n\ncount_counter = Counter(count)\n\nresult = 0\ncount_dict = {}\nfor i in range(input_k, 0, -1):\n    fav_num = fav_nums[count_counter[i]]\n    if count_dict.get(fav_num, 0) < i:\n        count_dict[fav_num] = i\n    else:\n        continue\n    result += i\n\nfor key, value in count_dict.items():\n    result += value\n\nprint(result)\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\") == \"21\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\") == '21'\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == '0'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 3\n1 3 2 8 5 5 8 2 2 8 5 2''') == '21'\nassert solution('''3 3\n9 9 9 9 9 9 9 9 9 9''') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\\n\") == \"21\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7') == '21'\n\nassert solution('3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == '0'\n\nprint('Success')"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\"\n\"\"\"\n\n\nclass Player:\n    def __init__(self, f: int, cards: str):\n        self.cards = cards\n        self.f = f\n\n    def get_cards(self) -> str:\n        return self.cards\n\n    def get_f(self) -> int:\n        return self.f\n\n    def set_f(self, f: int):\n        self.f = f\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 1 1') == 0\n\"\"\""
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == '2\\n1 2 3\\n1 1 2\\n'\nassert solution(\"3\\n2 8 10\") == '2\\n2 2 1\\n'\nassert solution(\"4\\n1 1 1 1\") == '0\\n'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2 8 10') == '2\\n2 2 1'\n\"\"\""
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n') == '1 2 3\\n1 1 2\\n1 2 1\\n1 3 2\\n1 4 2\\n1 5 2\\n2 1 3\\n2 2 1\\n2 3 1\\n2 4 2\\n2 5 2\\n3 1 4\\n3 2 4\\n3 4 1\\n3 5 2\\n4 1 5\\n4 2 5\\n4 5 1\\n4 6 2\\n5 1 6\\n5 2 6\\n5 6 1\\n5 7 2\\n6 1 7\\n6 2 7\\n6 7 1\\n6 8 2\\n7 1 8\\n7 2 8\\n7 8 1\\n7 9 2\\n8 1 9\\n8 2 9\\n8 9 1\\n8 10 2\\n9 1 10\\n9 2 10\\n9 10 1\\n9 11 2\\n10 1 11\\n10 2 11\\n10 11 1\\n10 12 2\\n11 1 12\\n11 2 12\\n11 12 1\\n11 13 2\\n12 1 13\\n12 2 13\\n12 13 1\\n12 14 2\\n13 1 14\\n13 2 14\\n13 14 1\\n13 15 2\\n14 1 15\\n14 2 15\\n14 15 1\\n14 16 2\\n15 1 16\\n15 2 16\\n15 16 1\\n15 17 2\\n16 1 17\\n16 2 17\\n16 17 1\\n16 18 2\\n17 1 18\\n17 2 18\\n17 18 1\\n17 19 2\\n18 1 19\\n18 2 19\\n18 19 1\\n18 20 2\\n19 1 20\\n19 2 20\\n19 20 1\\n19 21 2\\n20 1 21\\n20 2 21\\n20 21 1\\n20 22 2\\n21 1 22\\n21 2 22\\n21 22 1\\n21 23 2\\n22 1 23\\n22 2 23\\n22 23 1\\n22 24 2\\n23 1 24\\n23 2 24\\n23 24 1\\n23 25 2\\n24 1 25\\n24 2 25\\n24 25 1\\n24 26 2\\n25 1 26\\n25 2 26\\n25 26 1\\n25 27 2\\n26 1 27\\n26 2 27\\n26 27 1\\n26 28 2\\n27 1 28\\n27 2 28\\n27 28 1\\n27 29 2\\n28 1 29\\n28 2 29\\n28 29 1\\n28 30 2\\n29 1 30\\n29 2 30\\n29 30 1\\n29 31 2\\n30 1 31\\n30 2 31\\n30 31 1\\n30 32 2\\n31 1 32\\n31 2 32\\n31 32 1\\n31 33 2\\n32 1 33\\n32 2 33\\n32 33 1\\n32 34 2\\n33 1 34\\n33 2 34\\n33 34 1\\n33 35 2\\n34 1 35\\n34 2 35\\n34 35 1\\n34 36 2\\n35 1 36\\n35 2 36\\n35 36 1\\n35 37 2\\n36 1 37\\n36 2 37\\n36 37 1\\n36 38 2\\n37 1 38\\n37 2 38\\n37 38 1\\n37 39 2\\n38 1 39\\n38 2 39\\n38 39 1\\n38 40 2\\n39 1 40\\n39 2 40\\n39 40 1\\n39 41 2\\n40 1 41\\n40 2 41\\n40 41 1\\n40 42 2\\n41 1 42\\n41 2 42\\n41 42 1\\n41 43 2\\n42 1 43\\n42 2 43\\n42 43 1\\n42 44 2\\n43 1 44\\n43 2 44\\n43 44 1\\n43 45 2\\n44 1 45\\n44 2 45\\n44 45 1\\n44 46 2\\n45 1 46\\n45 2 46\\n45 46 1\\n45 47 2\\n46 1 47\\n46 2 47\\n46 47 1\\n46 48 2\\n47 1 48\\n47 2 48\\n47 48 1\\n47 49 2\\n48 1 49\\n48 2 49\\n48 49 1\\n48 50 2\\n49 1 50\\n49 2 50\\n49 50 1\\n49 51 2\\n50 1 51\\n50 2 51\\n50 51 1\\n50 52 2\\n51 1 52\\n51 2 52\\n51 52 1\\n51 53 2\\n52 1 53\\n52 2 53\\n52 53 1\\n52 54 2\\n53 1 54\\n53 2 54\\n53 54 1\\n53 55 2\\n54 1 55\\n54 2 55\\n54 55 1\\n54 56 2\\n55 1 56\\n55 2 56\\n55 56 1\\n55 57 2\\n56 1 57\\n56 2 57\\n56 57 1\\n56 58 2\\n57 1 58\\n57 2 58\\n57 58 1\\n57 59 2\\n58 1 59\\n58 2 59\\n58 59 1\\n58 60 2\\n59 1 60\\n59 2 60\\n59 60 1\\n59 61 2\\n60 1 61\\n60 2 61\\n60 61 1\\n60 62 2\\n61 1 62\\n61 2 62\\n61 62 1\\n61 63 2\\n62 1 63\\n62 2 63\\n62 63 1\\n62 64 2\\n63 1 64\\n63 2 64\\n63 64 1\\n63 65 2\\n64 1 65\\n64 2 65\\n64 65 1\\n64 66 2\\n65 1 66\\n65 2 66\\n65 66 1\\n65 67 2\\n66 1 67\\n66 2 67\\n66 67 1\\n66 68 2\\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 4 6 6 6\\n') == '2\\n1 2 3\\n1 1 2\\n'\nassert solution('3\\n2 8 10\\n') == '2\\n2 2 1\\n'\nassert solution('4\\n1 1 1 1\\n') == '0\\n'\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n2 4 6 6 6\n''') == '2'\n\nassert solution('''3\n2 8 10\n''') == '2'\n\nassert solution('''4\n1 1 1 1\n''') == '0'\n\nassert solution('''4\n2 8 10\n2 8 10\n''') == '2'\n\nassert solution('''5\n2 4 6 6 6\n''') == '2'"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 4 6 6 6\\n\") == \"2\"\nassert solution(\"5\\n4 5 4 5 4\\n\") == \"3\"\nassert solution(\"3\\n8 10\\n\") == \"2\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"0\"\nassert solution(\"4\\n4 4 4 4\\n\") == \"0\"\nprint(\"Passed!\")"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == \"2\\n1 2 3\\n1 1 2\\n\"\nassert solution(\"3\\n2 8 10\") == \"2\\n2 2 1\\n\"\n\"\"\""
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 6 6 6\") == \"2\"\nassert solution(\"2 8 10\") == \"2\"\nassert solution(\"1 1 1 1\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 6 6 6\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"6 1\\n\"\n    \"100010\\n\"\n    \"6 2\\n\"\n    \"000000\\n\"\n    \"5 1\\n\"\n    \"10101\\n\"\n    \"3 1\\n\"\n    \"001\\n\"\n    \"2 2\\n\"\n    \"00\\n\"\n    \"1 1\\n\"\n    \"0\\n\"\n) == \"1\\n2\\n0\\n1\\n1\\n1\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"11111111\") == 0\nassert solution(\"10100100\") == 2\nassert solution(\"10011001\") == 1\n\"\"\"\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10100100\") == 2\nassert solution(\"11111111\") == 0\nassert solution(\"10110110\") == 1\nassert solution(\"10010001\") == 1\n\n\"\"\"\nimport math"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10100100\") == 2\nassert solution(\"11111111\") == 0\nassert solution(\"00000000\") == 0\nassert solution(\"00100000\") == 1\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10000010\") == 2\nassert solution(\"00000000\") == 0\nassert solution(\"00100000\") == 1\nassert solution(\"10100100\") == 2\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10101\") == 2\nassert solution(\"10100\") == 0\nassert solution(\"11110\") == 1\nassert solution(\"110011\") == 2\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"101010\") == 2\nassert solution(\"0101010\") == 0\nassert solution(\"10011010\") == 1\nassert solution(\"100101010\") == 2\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100010\") == \"1\"\nassert solution(\"100101\") == \"2\"\nassert solution(\"11101\") == \"0\"\nassert solution(\"1011111\") == \"1\"\nassert solution(\"11111\") == \"1\"\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100010') == 1\nassert solution('10101') == 2\nassert solution('000000') == 0\nassert solution('00100010') == 1\nassert solution
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == 3\n\nassert solution('29 30\\n30 30\\n29 29\\n28 30\\n30 30') == 3\n\nassert solution('2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3') == 4\n\n\"\"\"\nimport sys\n\nlines = sys.stdin.readlines()\nn, k = list(map(int, lines[0].split()))\n\ns = set()\n\nfor line in lines[1:]:\n    l, r = list(map(int, line.split()))\n    for i in range(l, r+1):\n        s.add(i)\n\nbad = set()\nfor i, line in enumerate(lines):\n    l, r = list(map(int, line.split()))\n    for j in range(l, r+1):\n        if j in s:\n            bad.add(i)\n\nto_remove = set()\nfor i in range(k):\n    to_remove |= bad\n\nwhile bad:\n    bad -= to_remove\n\nprint(len(to_remove))\n\nfor i in sorted(to_remove):\n    print(i+1, end=' ')\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1') == '0 1'\nassert solution('7 2') == '1 2'\nassert solution('7 4') == '2 3 4'\nassert solution('7 3') == '2 3 4'\nassert solution('7 5') == '0 1 2 3'\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input))"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n4 6 7'\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30') == '3\\n1 4 5'\nassert solution('6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3') == '4\\n1 3 5 6'\n\"\"\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n4 6 7'\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30') == '3\\n1 4 5'\n\n-----\n'''\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == '3\\n4 6 7'\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == '3\\n4 6 7'\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == '3\\n1 4 5'\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == '4\\n1 3 5 6'\nassert solution(\"7 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == '4\\n1 3 5 6'\n\"\"\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n4 6 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\") == \"3\\n1 4 5\"\n\nprint(solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n'))\nprint(solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n'))\n\nassert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n4 6 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\") == \"3\\n1 4 5\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\"\n\n\"\"\"\n\n\nimport sys\nimport math\nfrom collections import defaultdict"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == '3\\n4 6 7'\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == '3\\n1 4 5'\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == '4\\n1 3 5 6'\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n') == '30\\n31\\n10'\n\"\"\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n\") == \"30\\n31\\n10\"\n\"\"\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n\") == \"30\\n31\\n10\"\nassert solution(\"3\\n3 4 6\\n\") == \"10\"\n\n\"\"\"\nfrom functools import reduce\nimport sys\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\") == \"30\"\nassert solution(\"3\\n3 4 6\\n\") == \"10\"\n\"\"\"\n\nimport sys\nimport heapq\n\nassert len(sys.argv) == 2\nlines = open(sys.argv[1]).readlines()\n\nq = int(lines[0])\n\nproblems = [int(i) for i in lines[1].split(\" \")]\n\nheap = []\nheapq.heapify(heap)\nfor i in range(len(problems)):\n    heapq.heappush(heap, -problems[i])\n\nanswer = 0\n\nfor i in range(q):\n    answer = heapq.heappop(heap)\n    heapq.heappush(heap, answer + 1)\n\nprint(answer)\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n5 6 15 30\n4\n10 6 30 15\n3\n3 4 6''') == '30\\n31\\n10'\n\n'''\nIn the example above the optimal contest consists of two problems from the first query, and one problem from the second query. The cumulative prettiness of the contest is:\n\n30 + 6 = 36\n30 + 6 + 15 = 36\n10 + 6 = 16\n10 + 6 + 15 = 31\nSo the maximum possible cumulative prettiness of the contest is 36.\n\nIn the third query the optimal contest consists of only one problem from the query:\n\n30 + 6 = 36\n\nAnd the cumulative prettiness of the contest is 36.\n\n'''"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n0\\n0\\n0') == '0'\nassert solution('1\\n1\\n0\\n1') == '1'\nassert solution('1\\n1\\n0\\n0\\n0') == '1'\nassert solution('2\\n3\\n1\\n0\\n1') == '3'\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n5 6 15 30') == '30'\nassert solution('4\\n10 6 30 15') == '31'\nassert solution('3\\n3 4 6') == '10'\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5 6 15 30\") == \"30\\n\"\nassert solution(\"4\\n10 6 30 15\") == \"31\\n\"\nassert solution(\"3\\n3 4 6\") == \"10\\n\"\n\n\n'''\n\nfrom itertools import permutations\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n\") == \"30\\n31\\n10\"\n\"\"\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_0) == test_output_0\n\"\"\"\n\nwith open(\"task-2.txt\") as f:\n    n = int(f.readline())\n    a = list(map(int, f.readline().split()))\n    q = int(f.readline())\n    b = []\n    for i in range(q):\n        s = f.readline()\n        s = s.split()\n        n = int(s[0])\n        c = int(s[1])\n        b.append([n, c])\n    print(b)\n    "
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2\\n10 1 20\\n2\\n3 6\") == \"2\\n1\\n2\\n1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\nassert solution(\"6\\n1\\n2\\n1\\n2\\n3\\n1\") == \"3\"\nassert solution(\"7\\n1\\n2\\n3\\n4\\n5\\n6\\n1\") == \"1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '2'\nassert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '1'\n\"\"\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2\\n10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\n\"\"\""
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\nassert solution(\"4\\n1\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"1\\n2\\n2\\n1\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100') == '2\\n1\\n2\\n1'\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\") == \"2\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\") == \"1\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\") == \"2\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\") == \"1\"\n\n\nassert solution(\"4\\n1\\n42\") == \"1\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str([4,2,10,1,20]) == 2)\nassert solution(str([2,3,6,5,4,99,100]) == 2)\nassert solution(str([42])) == 1\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2\\n3\\n4\\n99\\n100\") == \"2\\n1\\n2\\n1\"\nassert solution(\"5\\n2\\n3\\n4\\n99\\n100\") == \"2\\n1\\n2\\n1\"\nassert solution(\"1\\n42\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n1 1 1 1') == ''\nassert solution('1\\n2 1 1 1') == 'YES'\nassert solution('1\\n2 1 1 2') == 'YES'\nassert solution('1\\n2 1 1 3') == 'NO'"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str([1,2,3,4])) == \"YES\"\nassert solution(str([1,2,3,6])) == \"NO\"\nassert solution(str([5,2,6,27])) == \"YES\"\nassert solution(str([3,3,5,18])) == \"NO\"\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 3 6\\n1 2 3 6\\n5 2 6 27\\n3 3 5 18') == 'YES\\nNO\\nNO\\nYES'\nassert solution('3 3 5 18\\n4 2 6 27\\n1 2 3 6') == 'NO\\nNO\\nYES'\n\"\"\"\n\n\nimport sys\nimport itertools\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 6\") == \"NO\"\nassert solution(\"5 2 6 27\") == \"NO\"\nassert solution(\"3 3 5 18\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4\\n1 2 3 6') == 'YES'\nassert solution('5 2 6 27\\n3 3 5 18') == 'NO'\nassert solution('5 2 6 27\\n3 3 5 18') == 'NO'\nassert solution('1 2 3 4\\n1 2 3 6') == 'YES'\nassert solution('1 2 3 4\\n1 2 3 6') == 'YES'\n\n-----Constraints-----\n1 <= a <= 10^9\n1 <= b <= 10^9\n1 <= n <= 10^9\n0 <= S <= 10^9\n0 <= x, y <= a\n\n\"\"\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 3 6\\n1 2 3 6\") == \"YES\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(expected_output)\n\"\"\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\\n1 2 3 6\") == \"YES\"\n\"\"\"\nfrom math import gcd"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 6\") == \"NO\"\nassert solution(\"5 2 6 27\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 4\") == 'YES'\n\"\"\""
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 2 7 3 3 1 4') == 'YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n'\nassert solution('5 4 3 2 1 0') == 'YES\\n1\\n3\\n4\\n5 4 3 1\\n'\nassert solution('5 0 4 3 2 1') == 'YES\\n0\\n3\\n4\\n5 4 3 1\\n'\nassert solution('5 2 4 3 1 0') == 'NO\\n'\nassert solution('0 1 2 3 4') == 'YES\\n0\\n'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 4 3 2 1 0\") == \"YES\"\nassert solution(\"1 1 2 1 2\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n\"\nassert solution(\"5 4 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\nassert solution(\"5 1 1 2 1 2\") == \"NO\\n\"\nassert solution(\"5 0 1 2 3 4\") == \"YES\\n0\\n\"\nassert solution(\"4 3 2 1 0\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\n\n\"\"\""
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 3 1 4 2 3\") == \"YES\"\nassert solution(\"5 1 4 3 2 3\") == \"NO\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n\"\nassert solution(\n\"5 4 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\nassert solution(\n\"5 0\") == \"YES\\n1\\n3\\n4\\n5 0\\n\"\nassert solution(\n\"1 1 2 1 2\") == \"NO\\n\"\nassert solution(\n\"0 1 2 3 4\") == \"YES\\n0\\n\""
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 4 3 2 1 0\") == \"YES\"\nassert solution(\"5 4 3 2 1\") == \"NO\"\nassert solution(\"5 4 3 2 1 2\") == \"NO\"\nassert solution(\"4 3 1 5 3\") == \"YES\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n4 3 1 5 3\\n') == 'YES\\n1\\n3\\n5 4 3 1\\n'\nassert solution('5\\n0 1 2 3 4\\n') == 'YES\\n0\\n'\nassert solution('5\\n0 1 2 3 4\\n') == 'YES\\n0\\n'\nassert solution('5\\n0 1 2 3 4\\n') == 'YES\\n0\\n'\nassert solution('5\\n0 1 2 3 4\\n') == 'YES\\n0\\n'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\"\nassert solution(\"5 4 3 1 5 3\") == \"YES\\n1\\n3\\n4 5\\n5 4 3 1\"\nassert solution(\"5 1 1 2 1 2\") == \"NO\"\nassert solution(\"5 0 1 2 1 2\") == \"YES\\n0\\n1 2 3 4 5\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n\"\nassert solution(\"5 4 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 5 4 3 1\\n\"\nassert solution(\"5 1 1 2 1 2\") == \"NO\\n\"\nassert solution(\"5 0 1 2 1 2\") == \"YES\\n0\\n\"\nassert solution(\"1 1 2 1 2\") == \"NO\\n\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == 'YES\\n2\\n3 7\\n5\\n7 4 3 2 1'\nassert solution(\"5 3 1 5 3\") == 'YES\\n1\\n3\\n4\\n5 4 3 1'\nassert solution(\"5 1 1 2 1 2\") == 'NO'\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1') == '-1'\n\n\"\"\"\n\nfrom sys import stdin\n\nn, k = map(int, stdin.readline().split())\nbooks = [list(map(int, stdin.readline().split())) for _ in range(n)]\nbooks.sort()\nalice = 0\nbob = 0\ncurrent_sum = 0\n\nfor book in books:\n    current_sum += book[0]\n    if book[1] == 1:\n        alice += book[2]\n    else:\n        bob += book[2]\n    if alice >= k and bob >= k:\n        print(current_sum)\n        break\nelse:\n    print(-1)\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"9\"\nassert solution(\"3 2\") == \"6\"\nassert solution(\"8 3\") == \"17\"\nassert solution(\"5 2\") == \"8\"\nassert solution(\"3 1\") == \"6\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n\"\"\") == \"18\"\nassert solution(\"\"\"5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 1\n\"\"\") == \"8\"\n\nassert solution(\"\"\"5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n\"\"\") == \"-1\""
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == \"18\"\n\"\"\""
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n''') == '18'\n\nassert solution('''\n5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 1\n''') == '8'\n\nassert solution('''\n5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n''') == '-1'\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n\"\"\") == \"18\"\nassert solution(\"\"\"\n5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 1\n\"\"\") == \"8\"\nassert solution(\"\"\"\n5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n\"\"\") == \"-1\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n\"\"\") == \"18\"\n\nassert solution(\"\"\"5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 1\n\"\"\") == \"8\"\n\nassert solution(\"\"\"5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n\"\"\") == \"-1\"\n\n-----Debug-----"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n\") == 18\n\n\"\"\"\n\nfrom collections import defaultdict, deque\nfrom itertools import islice"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n\"\"\") == '18'\nassert solution(\"\"\"5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 1\n\"\"\") == '8'\nassert solution(\"\"\"5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n\"\"\") == '-1'\n\"\"\""
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5') == '2\\n6\\n-1\\n7'\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n\"\"\"\n) == \"6\"\nassert solution(\n\"\"\"\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n\"\"\"\n) == \"-1\"\nassert solution(\n\"\"\"\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n\"\"\"\n) == \"7\"\n\n\"\"\"\nInput\n4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n\nOutput\n2\n6\n-1\n7\n\"\"\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input) == output\n\"\"\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '3'\nassert solution('1 2 3\\n4 5 6') == '6'\nassert solution('1 2 3\\n4 5 6\\n7 8 9') == '9'\nassert solution('1 2 3\\n4 5 6\\n7 8 9\\n10 11 12') == '12'\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n') == '2\\n6\\n-1\\n7'\n\"\"\"\n\n\nfrom __future__ import annotations\nimport sys\nfrom collections import defaultdict\nfrom typing import List\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '2'\nassert solution('''\n7 3\n4 9 4 5 7 7 6\n5 1\n10 9 7 1 2 2\n8 4\n1 1 1 1 1 1 1\n5 3\n3 7 6 4 1 2\n3 2\n2 2\n2 2\n3 3\n3 3\n''') == '6'\nassert solution('''\n8 1\n1 1 1 1 1 1 1\n5 1\n10 9 7 1 2 2\n8 4\n1 1 1 1 1 1 1\n5 3\n3 7 6 4 1 2\n3 2\n2 2\n2 2\n3 3\n3 3\n''') == '6'\nassert solution('''\n7 1\n1 1 1 1 1 1 1\n5 1\n10 9 7 1 2 2\n8 4\n1 1 1 1 1 1 1\n5 3\n3 7 6 4 1 2\n3 2\n2 2\n2 2\n3 3\n3 3\n''') == '-1'\nassert solution('''\n8 2\n2 3 4 5 6 7 8 9\n8 2\n1 2 3 4 5 6 7 8\n''') == '1'\n\n-----Bite-----\n\nCreate an algorithm that takes the old price of each product and the maximum difference $k$ that can be changed for each product. It should return the maximum price possible for all products.\n\nThe best approach would be to sort the products from the highest price to the lowest and then always increase the price for the current product. So you can just iterate the array from the end."
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n1 1 2 3 1\") == \"2\"\nassert solution(\"5 1\\n1 1 2 3 1\") == \"2\"\nassert solution(\"4 2\\n6 4 8 5\") == \"6\"\nassert solution(\"2 2\\n1 6\") == \"-1\"\nassert solution(\"5 2 5\\n6 4 8 5\") == \"7\"\nprint(\"The code ran Correctly\")\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n4 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '2\n6\n-1\n7\n'''\n)\n\nassert solution('''\n4 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '2\n6\n-1\n7\n'''\n)"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n\") == '2\\n6\\n-1\\n7'\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 15 16 42 23\") == \"0\"\n\"\"\"\n\nfrom collections import Counter, deque, OrderedDict\nfrom itertools import combinations\nfrom operator import itemgetter\nimport unittest\nimport sys\n\nsys.setrecursionlimit(10000000)"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42 4 8 15 16 23 15 16 42 23 42\") == \"3\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 8 15 16 23') == '5'\n\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '0'\n\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '3'"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n4 8 15 16 23') == '5'\nassert solution('12\\n4 8 4 8 15 16 8 16 23 15 16 4 42 23 42') == '3'\nassert solution('15\\n4 8 4 8 15 16 8 16 23 15 16 4 42 23 42') == '0'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8 15 16 23') == '5'\nassert solution('4 8 4 15 16 8 23 15 16 42 23 42') == '0'\nassert solution('4 8 4 15 16 8 16 23 15 16 42 23 42') == '3'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8 15 16 23') == '5'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '0'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '3'\nassert solution('4 8 4 8 8 15 16 8 16 23 15 16 42 23 42') == '3'\nassert solution('4 8 4 8 8 15 16 8 16 23 15 16 42 23 42') == '3'\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8 15 16 23') == 5\nassert solution('4 8 4 15 16 8 23 15 16 42 23 42') == 3\nassert solution('4 8 4 15 16 8 16 23 15 16 42 23 42') == 3\nassert solution('4 8 4 15 16 8 16 23 15 16 42 23 42 4 8 15 16 23') == 3\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42 4 8 15 16 23') == 3\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 8 15 16 23\\n') == '5'\nassert solution('4 8 15 16 23\\n') == '5'\n\"\"\""
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\") == '0'\nassert solution(\"13 42\") == '3'\nassert solution(\"18 4\") == '2'\nassert solution(\"1337 420\") == '92'\nassert solution(\"123456789 1000000000\") == '87654322'\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5\\n13 42') == '0\\n3'\nassert solution('13 37\\n18 4') == '2\\n0'\nassert solution('123456789 1000000000\\n100500 9000') == '92\\n87654322'\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5') == 0\nassert solution('13 42') == 3\nassert solution('18 4') == 2\nassert solution('1337 420') == 92\nassert solution('123456789 1000000000') == 87654322\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\") == \"0\"\nassert solution(\"13 42\") == \"3\"\nassert solution(\"18 4\") == \"2\"\nassert solution(\"1337 420\") == \"92\"\nassert solution(\"123456789 1000000000\") == \"87654322\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 2\") == \"0\"\nassert solution(\"1\\n5\") == \"2\"\nassert solution(\"5\\n8\") == \"3\"\nassert solution(\"10\\n36\") == \"1\"\nassert solution(\"20\\n100\") == \"7\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\"\nassert solution(\"13 37\\n18 4\") == \"2\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"9150\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"9150\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"9150\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 5\\n13 42') == '0'\nassert solution('13 37\\n20 17') == '3'\nassert solution('123456789 1000000000\\n100500 9000') == '92'\nassert solution('100500 9000') == '87654322'\nassert solution('1337 420') == '2'\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\") == \"0\"\nassert solution(\"13 42\") == \"3\"\nassert solution(\"18 4\") == \"2\"\nassert solution(\"1337 420\") == \"92\"\nassert solution(\"123456789 1000000000\") == \"87654322\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1') == '1'\nassert solution('10 8') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1') == ''\nassert solution('2 10') == '0'\nassert solution('3 9') == '2'\nassert solution('4 8') == '1'\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n\n\"\"\""
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\nassert solution('4 2 10\\n4 4 6\\n6 4 8') == '5\\n0\\n8'\n\"\"\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''7\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999''') == '12339'\nassert solution('''8\n10 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999''') == '0'\nassert solution('''9\n10 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n''') == '15'\nassert solution('''10\n10 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n''') == '54306'\nassert solution('''11\n17 8 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n''') == '999999995'\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5 12345\") == \"12339\"\nassert solution(\"5 0 4\") == \"0\"\nassert solution(\"10 5 15\") == \"15\"\nassert solution(\"17 8 54321\") == \"54306\"\nassert solution(\"499999993 9 1000000000\") == \"999999995\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\nprint(solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998')"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n\"\"\"\nimport sys\nimport numpy as np\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 5 12345') == '12339'\nassert solution('5 0 4') == '0'\nassert solution('10 5 15') == '15'\nassert solution('17 8 54321') == '54306'\nassert solution('499999993 9 1000000000') == '999999995'\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''7\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999''') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n\"\"\"\n\nimport math\n\ntests = int(stdin.readline().strip())\n\nfor test in range(tests):\n    first, second, n = [int(x) for x in stdin.readline().strip().split()]\n    # first, second, n = [int(x) for x in input().strip().split()]\n    # n = int(input())\n    res = math.floor(n / first) * second\n    # n = int(input())\n    # print(n % first)\n    # n = int(input())\n    if n % first == second:\n        res += second\n    print(res)\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n\n-------------\n>>> \n=============== RESTART: /Users/hsiaotingluv/Desktop/python/20200610_python_do_homework/homework2.py ===============\n0\n0\n0\n0\n0\n0\n0\n\n>>> \n=============== RESTART: /Users/hsiaotingluv/Desktop/python/20200610_python_do_homework/homework2.py ===============\n12339\n0\n15\n54306\n999999995\n185\n999999998\n\n\"\"\""
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''7 2\n1 2 2 3 2 4 10\n''') == '6'\n\nassert solution('''8 2\n1 2 2 3 2 4 6 10\n''') == '8'\n\nassert solution('''7 3\n1 2 2 3 2 4 5\n''') == '4'\n\nassert solution('''2 2\n1 2\n''') == '0'\nassert solution('''5 3\n1 2 3 4 5\n''') == '1'\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n\"\"\""
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\nassert solution('8 3\\n1 2 2 3 2 4 6 10') == '8'"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"1 2 2 3 2 4 5\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n\nprint('Hooray!')"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == expected\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n\"\"\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABC') == 'abc'\nassert solution('AA') == 'aA'\nassert solution('BB') == 'bB'\n\"\"\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABC') == 'abc'\nassert solution('ABSC') == 'absC'\nassert solution('ABCD') == 'abcd'\n\"\"\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC\", 1) == \"aBC\"\n\n-----\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ABC') == 'abc'\nassert solution('abC') == 'aBC'\nassert solution('ABCD') == 'abcD'\n\"\"\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABBC\") == \"aBC\"\nassert solution(\"ABC\") == \"abc\"\n\"\"\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABC\") == \"abc\"\n\"\"\"\n\nfrom unittest import TestCase\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC\") == \"aBC\"\nassert solution(\"AaBCC\") == \"AaBcc\"\nassert solution(\"AABBC\") == \"AABbC\"\nassert solution(\"ABCD\") == \"AbCd\"\n\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABC\") == \"aBC\"\nassert solution(\"abC\") == \"AbC\"\nassert solution(\"aBC\") == \"ABC\"\n\"\"\"\nimport re"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC\") == \"abc\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"ABCabc\") == \"abcabc\"\nassert solution(\"ABcAbC\") == \"abcabc\"\nassert solution(\"abcABC\") == \"abcabc\"\n\"\"\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABC\") == \"aBC\"\n\n-------------\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40''') == '''3\n4\n6\n1\n5\n2'''\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40''') == '3\\n4\\n6\\n1\\n5\\n2'\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == '3\\n4\\n6\\n1\\n5\\n2'\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == '3\\n2\\n4\\n1\\n5\\n6'\n\"\"\""
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == '3\\n4\\n6\\n1\\n5\\n2'\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == '3\\n4\\n6\\n1\\n5\\n2'\n\"\"\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str_input) == str_output\nprint(solution(str_input))\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\nkhabarovsk 20\\nmoscow 10\\nkazan 50\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == '3\\n4\\n6\\n1\\n5\\n2'\nassert solution(\"moscow 10\\nkazan 50\\nkhabarovsk 20\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == '4\\n6\\n1\\n5\\n3\\n2'\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 35\\nkazan 50\\nmoscow 60\\nkhabarovsk 40\") == '3\\n5\\n2\\n1\\n4\\n6'\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 35\\nkhabarovsk 40\") == '2\\n4\\n1\\n5\\n3\\n6'\nassert solution(\"moscow 10\\nkazan 50\\nkhabarovsk 20\\nkazan 35\\nmoscow 35\\nkhabarovsk 40\") == '4\\n6\\n3\\n5\\n2\\n1'\n\"\"\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\n\"\"\") == \"\"\"\n3\n4\n6\n1\n5\n2\n\"\"\"\n\nprint(solution(input()))"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 500\") == 'Yes'\nassert solution(\"3 900\") == 'No'\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\"\n\nK, X = [int(i) for i in input().split()]\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"Yes\"\nassert solution(\"2 1\") == \"No\"\nassert solution(\"3 0\") == \"No\"\nassert solution(\"3 3\") == \"Yes\"\nassert solution(\"3 4\") == \"Yes\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 900') == 'Yes'\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 900') == 'Yes'\nassert solution('2 800') == 'No'\nassert solution('2 700') == 'No'\nassert solution('2 600') == 'No'\nassert solution('2 500') == 'Yes'\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\"\"\"\n\n\"\"\"\nN = int(stdin)\nK = int(stdin)"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 10') == '0.145833333333'\n\"\"\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10\") == \"0.145833333333\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\nassert solution(\"3 11\") == \"0.115555555556\"\nassert solution(\"5 10\") == \"0.55\"\nassert solution(\"5 11\") == \"0.53377853493\"\nassert solution(\"5 12\") == \"0.59183673469\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 10') == '0.145833333333'"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\nprint(solution(stdin))"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nfrom collections import Counter\nfrom math import factorial\nfrom itertools import product"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('SAT') == 1\nassert solution('SUN') == 0\nassert solution('MON') == 0\nassert solution('TUE') == 0\nassert solution('WED') == 0\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"SAT\") == 1\nassert solution(\"MON\") == 0\nassert solution(\"TUE\") == 1\nassert solution(\"WED\") == 2\nassert solution(\"THU\") == 3\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(SAT) == 1\n\"\"\""
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"SUN\") == '1'\nassert solution(\"MON\") == '1'\nassert solution(\"TUE\") == '1'\nassert solution(\"WED\") == '1'\nassert solution(\"THU\") == '1'\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"SAT\") == 1\n\"\"\"\n\nfrom datetime import datetime"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(SAT) == 1\n\"\"\""
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"SAT\") == \"1\"\n\"\"\""
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('SUN') == '1'\nassert solution('MON') == '2'\nassert solution('TUE') == '3'\nassert solution('WED') == '4'\nassert solution('THU') == '5'\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"SAT\") == \"1\"\nassert solution(\"SUN\") == \"0\"\nassert solution(\"MON\") == \"6\"\nassert solution(\"TUE\") == \"2\"\nassert solution(\"WED\") == \"3\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"SAT\") == \"1\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\nprint(\"It works!\")"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 10 20\\n') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    r = 2,\n    D = 10,\n    x_2000 = 20\n    ) == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\nr, D, x_2000 = map(int, stdin.split())\n\nprint('\\n'.join([str(r * x_2000 - D)] * 10))\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10 20\") == \"30\"\nassert solution(\"2 10 30\") == \"50\"\nassert solution(\"3 5 10\") == \"22\"\nassert solution(\"2 5 100\") == \"1000\"\nassert solution(\"3 2 100\") == \"300\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 10 20\") == \"30\"\nassert solution(\"3 10 20\") == \"40\"\nassert solution(\"5 10 20\") == \"70\"\nassert solution(\"3 100 20\") == \"340\"\nassert solution(\"2 10 100\") == \"340\"\n\n-----\nhttps://www.hackerrank.com/challenges/algs-rainwater/problem\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\"\nassert solution(\"6\\n1 2 3 3 4 4 5\") == \"10\"\nassert solution(\"1\\n1\") == \"1\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\\n\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\\n\"\nassert solution(\"3\\n4 1 2\") == \"0\\n\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\\n\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 3 1 1 4') == '5'\nassert solution('5\\n1 3 2 1 4') == '4'\nassert solution('3\\n4 1 2') == '0'\nassert solution('3\\n1 2 4') == '0'\nassert solution('4\\n1 3 2') == '0'\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == 5\nassert solution(\"5\\n1 3 2 1 4\") == 4\nassert solution(\"3\\n4 1 2\") == 0\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 3 1 1 4') == 5\nassert solution('5\\n1 3 2 1 4') == 4\nassert solution('3\\n4 1 2') == 0\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 3 1 1 4\") == \"5\"\nassert solution(\"1 3 2 1 4\") == \"4\"\nassert solution(\"1 3 2 1 4\") == \"0\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n1 3 1 1 4\n''') == '5'\nassert solution('''5\n1 3 2 1 4\n''') == '4'\nassert solution('''3\n4 1 2\n''') == '0'"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\"\nassert solution(\"5\\n4 1 2\") == \"0\"\nassert solution(\"3\\n4 4 3\") == \"0\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3 1 1 4') == '5'\nassert solution('1 3 2 1 4') == '4'\nassert solution('4 1 2') == '0'\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == 'NO\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000'\nprint(solution(stdin))\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n\"\"\") == \"\"\"\nYES\n3 2 1\nYES\n100 100 100\nNO\nNO\nYES\n1 1 1000000000\n\"\"\"\n\n\"\"\"\n5\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n\n5\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n\n5\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n\"\"\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1\") == \"NO\"\nassert solution(\"2 2 3\") == \"NO\"\nassert solution(\"3 2 3\") == \"NO\"\nassert solution(\"3 2 1\") == \"YES\"\nassert solution(\"100 100 100\") == \"YES\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 3\\n1 1 1\\n3 2 2\\n4 4 4\\n5 5 5\\n1 1 1\") == \"YES\\n1 1 1\"\nassert solution(\"2 2 3\\n1 1 1\\n4 4 4\") == \"NO\"\n\"\"\"\nimport itertools\nimport re"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n\"\"\""
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\\n\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n\"\"\"\n\n\nimport sys\n\nstdin = sys.stdin\nt = int(next(stdin))\n\nfor _ in range(t):\n    x, y, z = map(int, next(stdin).split())\n    a = max(x, y)\n    b = max(x, z)\n    c = max(y, z)\n    if a < b and b < c:\n        print(a, b, c)\n    else:\n        print('NO')"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 3\") == \"YES\"\nassert solution(\"100 100 100\") == \"NO\"\nassert solution(\"50 49 49\") == \"YES\"\nassert solution(\"10 30 20\") == \"YES\"\nassert solution(\"1 1000000000 1000000000\") == \"YES\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == 'YES\\n2 1'\nassert solution('3\\n5\\n5') == 'YES\\n5 3'\nassert solution('2\\n5\\n5\\n1') == 'YES\\n5 5 1'\nassert solution('10\\n3\\n6\\n2') == 'NO\\nNO\\n6 3'\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\nprint(solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\"))"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\""
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 2 6\n5 2 1 4 2\n''') == '4'\nassert solution('''5 1 4\n4 2 3 4 1\n''') == '1'\nassert solution('''5 3 3\n1 2 3 1 1\n''') == '5'\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\n\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\n\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'\n\"\"\"\nfrom collections import deque\nfrom typing import List, Deque\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 21\nassert solution(\"sadfaasdda\") == 0\nassert solution(\"ab\") == 2\nassert solution(\"a\") == 1\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abcdef') == 6\nassert solution('bcaba') == 5\nassert solution('bacaba') == 4\nassert solution('aaaaaa') == 0\nassert solution('abc') == 3\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"aaaaaa\") == 21\n\"\"\"\n\nfrom sys import stdin\n\nn, k = [int(x) for x in stdin.readline().split()]\ns = stdin.readline()\n\nletters = [chr(i) for i in range(ord('a'), ord('z') + 1)]\n\nprint(len(s))\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''7 2\nabacaba\na b''') == '12'\nassert solution('''10 3\nsadfaasdda\nf a d''') == '21'\nassert solution('''7 1\naaaaaaa\nb''') == '0'\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\n\"\"\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacaba\") == 12\n\"\"\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\n\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\n\"\"\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aaaaaaa\", \"b\") == 0\nassert solution(\"abacaba\", \"a b\") == 12\nassert solution(\"abcdefghijklmnopqrstuvwxyz\", \"a b c\") == 23\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2\\n-1\\n6'\nassert solution('4\\n3\\n1 2 3\\n4\\n-1 -2 -1 -3') == '1\\n-1'\nassert solution('4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2\\n-1\\n6'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == '2\\n-1\\n6'\nassert solution(\"4\\n1\\n-1 -2 -1 -3\") == '-1'\nassert solution(\"4\\n4\\n1 1 2 2 3\") == '5'\nassert solution(\"4\\n1\\n1 1 1 1\") == '0'\nassert solution(\"4\\n1\\n-1 -1 -1 -1\") == '0'\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"2\\n3\\n1 2 3\\n4\\n3 4 5\") == \"5\\n5\\n7\"\nassert solution(\"2\\n2\\n1 2\\n3\\n2 1\") == \"4\\n3\\n1\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '''\n2\n-1\n6\n-2999999997\n'''\nprint(solution(input()))\n\n'''\nIn the first test case of the example, one of the possible answers is $[1, 2, \\underline{3}, \\underline{-1}, -2]$.\n\nIn the second test case of the example, one of the possible answers is $[-1, -2, \\underline{-1}, -3]$.\n\nIn the third test case of the example, one of the possible answers is $[\\underline{-2}, 8, 3, \\underline{8}, \\underline{-4}, -15, \\underline{5}, \\underline{-2}, -3, \\underline{1}]$.\n\nIn the fourth test case of the example, one of the possible answers is $[\\underline{1}, \\underline{-1000000000}, \\underline{1}, \\underline{-1000000000}, \\underline{1}, \\underline{-1000000000}]$.\n'''"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n\"\"\") == \"\"\"\n2\n-1\n6\n-2999999997\n\"\"\"\n\nassert solution(\"\"\"\n4\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n\"\"\") == \"\"\"\n2\n-1\n6\n-2999999997\n\"\"\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n5\\n1 2 3 -1 -2') == '2'\nassert solution('4\\n4\\n-1 -2 -1 -3') == '-1'\nassert solution('10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '6'\nassert solution('6\\n1 -1000000000 1 -1000000000 1 -1000000000') == '-2999999997'\n\n\n\"\"\""
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"2\\n4\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"2\\n4\\n-1 -2 -1 -3\\n4\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"1\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\\n-2999999997\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2\\n-1\\n6\\n-2999999997'\nassert solution('4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2\\n-1\\n6\\n-2999999997'\n\n\n\n-----Problem-----\n\nYou have a list of integers and you want to choose the maximal possible sum of the list, where the sum of the chosen numbers does not exceed some given value.\n\nExample:\n\nlist_of_integers = [2, 3, 4, 5, 6]\nchosen_sum = 9\n\nthe output should be\nmaximalSum(list_of_integers, chosen_sum) = 10.\n\nThere are 3 possible ways to choose 2 elements from the list of integers.\n\n2 + 3 + 4 + 5 = 9\n2 + 3 + 4 + 6 = 9\n2 + 3 + 5 + 6 = 9\nthe sum of the chosen elements are [2, 3, 4, 5] and [2, 3, 4, 6], so the answer is 10."
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\\n\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"3\\n4\\n1 2 3 4\\n2\\n5\\n\") == \"2\\n5\\n\"\nassert solution(\"2\\n4\\n1 2 -2\\n4\\n1 1\\n\") == \"2\\n1\\n\"\nassert solution(\"2\\n4\\n-1 -2\\n4\\n-1 -2\\n\") == \"4\\n-1\\n\"\nassert solution(\"1\\n4\\n-1 -2\\n4\\n-1 -2\\n\") == \"4\\n\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nprint('Success')\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\\n\") == \"3 5\\n2 1\\n3 2\\n3 4\""
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == '3 5\\n2 1\\n3 2\\n3 4'\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == '4 1\\n1 2\\n1 3'\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == '3 2\\n2 5\\n8 5\\n6 1\\n2 7'\n\n\n\"\"\"\nfrom collections import defaultdict, Counter\nfrom typing import List\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n\"\"\") == \"\"\"\n3 2\n2 5\n8 5\n6 1\n2 7\n1 2\n3 4\n\"\"\"\n\nassert solution(\"\"\"\n5 5\n1 2\n2 3\n3 5\n4 3\n1 5\n\"\"\") == \"\"\"\n3 5\n2 1\n3 2\n3 4\n\"\"\"\n\nassert solution(\"\"\"\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n\"\"\") == \"\"\"\n4 1\n1 2\n1 3\n\"\"\"\n\nassert solution(\"\"\"\n8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n\"\"\") == \"\"\"\n3 2\n2 5\n8 5\n6 1\n2 7\n1 2\n3 4\n\"\"\"\n\nassert solution(\"\"\"\n5 5\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n\"\"\") == \"\"\"\n3 2\n2 5\n8 5\n6 1\n2 7\n1 2\n3 4\n\"\"\""
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n\n\"\"\"\n\nimport sys\nimport math\nimport copy\nfrom collections import deque\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5') == '3 5\\n2 1\\n3 2\\n3 4'\nassert solution('4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4') == '4 1\\n1 2\\n1 3'\nassert solution('8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n') == '3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4'"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n5 5\n1 2\n2 3\n3 5\n4 3\n1 5\n\"\"\"\n) == \"\"\"\n3 5\n2 1\n3 2\n3 4\n\"\"\"\n\nassert solution(\n    \"\"\"\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n\"\"\"\n) == \"\"\"\n4 1\n1 2\n1 3\n\"\"\"\n\nassert solution(\n    \"\"\"\n8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n\"\"\"\n) == \"\"\"\n3 2\n2 5\n8 5\n6 1\n2 7\n1 2\n3 4\n\"\"\"\n\n\nassert solution(\"5 3\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\\n\") == \"\"\"\n3 5\n2 1\n3 2\n3 4\n\"\"\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n2 3') == '2 1\\n3 2'\nassert solution('1 2\\n2 3\\n3 4') == '2 1\\n3 2\\n4 3'\nassert solution('1 2\\n2 3\\n3 4\\n4 5') == '2 1\\n3 2\\n4 3\\n5 4'\n\nassert solution('') == ''\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\nassert solution(\"2 2\\n1 2\") == \"2 1\"\nassert solution(\"1 2\\n2 1\") == \"1 2\"\n\n\"\"\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n3 4\\n\") == \"3 2\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('499993') == '41664916690999888'\n\n\n-----Solution-----\n\n\n\n-----Test Data-----\n\n\n-----Efficient Test Data-----\n\nInput:\n4\n1\n1\n2\n3\n\nOutput:\n0\n2\n1\n3\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n5\\n499993\\n') == '0'\nassert solution('2\\n5\\n499993\\n') == '40'\nassert solution('3\\n5\\n499993\\n') == '41664916690999888'\n\"\"\""
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5\\n99993\") == \"0\\n40\\n41664916690999888\"\n\"\"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n499993') == '0\\n40\\n41664916690999888'\n\"\"\""
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == 0\nassert solution(\"2\") == 1\nassert solution(\"3\") == 2\nassert solution(\"4\") == 3\nassert solution(\"5\") == 4\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n499993') == '0\\n40\\n41664916690999888'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n5') == '0'\nassert solution('499993') == '41664916690999888'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('499993') == '41664916690999888'\n\"\"\"\n\nimport sys\nfrom copy import deepcopy\nfrom collections import defaultdict\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('499993') == '41664916690999888'\n\"\"\"\nimport sys"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n\n---------------\n\nhttps://www.codewars.com/kata/589934db4a2b8d6f50000b7a/solutions/python\n\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nt = 0\nm = [0] * (n + 1)\nfor i in range(n):\n    if a[i] % 2 == 1:\n        t += 1\n    m[a[i]] = t\n\nprint(*m[1:])\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\n\"\"\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6 7 4 3') == '1 1 1 2 -1 1 1 3 1 1'\n\"\"\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\"\n\n\"\"\"\n\u041a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split(' ')]"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\nassert solution(\"64\\n32\\n97\\n2\\n123456\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"64 32 97\") == \"2 4 8\"\n\nassert solution(\"2 12345\") == \"NO\"\n\nassert solution(\"12345\") == \"YES\"\n\nassert solution(\"123456789\") == \"NO\"\n\nassert solution(\"1234567890123\") == \"YES\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\nassert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\nassert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\nassert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\nassert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == 'YES'\nassert solution('2\\n1') == 'YES'\nassert solution('2\\n3') == 'NO'\nassert solution('3\\n5') == 'YES'\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == 'YES\\n2 4 8'\n\"\"\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2') == 'YES\\n2 4 8 '\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 A \u0438 B \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u0437 \u043d\u0438\u0445. \n\u0427\u0438\u0441\u043b\u0430 \u2014 \u0446\u0435\u043b\u044b\u0435 \u043e\u0442 1 \u0434\u043e 1000.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\n\u0422\u0435\u0441\u0442 1\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n1\n2\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n2\n\n\"\"\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('64 32 97 2 12345') == 'YES 2 4 8'\n\"\"\"\nimport sys"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''64\n32\n97\n2\n12345''') == 'YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823'\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\nassert solution(\"2\\n3\\n4\\n5\") == \"NO\"\nassert solution(\"2\\n4\\n8\\n16\") == \"YES\"\nassert solution(\"2\\n9\\n16\\n25\") == \"NO\"\nassert solution(\"3\\n9\\n27\\n81\") == \"YES\\n3 5 823\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'YES'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n') == 'NO'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n') == 'YES'\nassert solution('2\\n3\\n4\\n5\\n6\\n') == 'NO'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n') == 'YES'\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'a'\nassert solution('ab') == 'a'\nassert solution('bb') == 'b'\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"bbbb\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"bbbbb\") == 2\nassert solution(\"abbaba\") == 0\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\nbbbb''') == '2'\nassert solution('''6\nababab''') == '0'\nassert solution('''2\naa''') == '1'\nassert solution('''5\naaaaa''') == '5'\nassert solution('''6\naaaaa''') == '0'\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"aabab\") == 0\nassert solution(\"ababab\") == 0\nassert solution(\"aaaaaaaaaaa\") == 0\nassert solution(\"aaaaaaaaabaaaaabaaa\") == 1\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"bbbb\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"ba\") == 0\nassert solution(\"ab\") == 1\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"ba\") == 1\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"abb\") == 1\nassert solution(\"bab\") == 1\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"baabaa\") == 0\nassert solution(\"ababa\") == 2\nassert solution(\"abaab\") == 0\nassert solution(\"abbba\") == 1\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aaaa\") == 0\nassert solution(\"aabbaa\") == 2\nassert solution(\"baabb\") == 2\n\n\"\"\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == \"15\"\n\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2') == '15'\nassert solution('5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n') == '9'\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2') == '15'\nassert solution('5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n') == '9'"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\""
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\nassert solution(\"3\\n1 1\\n2 1\\n\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n2 1\\n1 1\\n1 0\\n2 0\\n1 1\\n0 1\\n2 2\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n\"\"\""
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n') == '9'\nassert solution('8\\n2 1\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n') == '15'\n\n\"\"\"\n\nimport sys\nimport sys\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1\\n2 0\\n3 2\\n4 3\") == \"9\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\") == \"9\"\nassert solution(\"8\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n1 1\\n4 3\\n1 2\") == \"15\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 0\\n2 0\\n3 2\\n4 3\") == \"9\"\nassert solution(\"8\\n1 2\\n2 0\\n3 0\\n4 0\\n5 1\\n6 2\\n7 3\\n8 4\") == \"15\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1\\n') == '2'\nprint('OK!')"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"2\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1') == '2'\nassert solution('1 3') == '2'\n\"\"\""
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n1''') == '2'\n\n'''\nSolution:\n1. Find the smallest and largest number from the first two lines.\n2. Use them to find the right answer.\n'''\n'''\nHint\n1. In order to find the smallest number, you need to make sure that the smallest number is larger than the largest number.\n2. You could try it out and find out what happens when the smallest number is the answer and what happens when the largest number is the answer.\n3. Think about the edge cases when the smallest number is the answer.\n4. Think about the edge cases when the largest number is the answer.\n5. Try it out, make sure that the edge cases are covered.\n'''\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3') == '2'\nassert solution('1 3 2') == '3'\n\"\"\"\nfrom util import hook\n\n\n@hook.command\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1') == '2'\n\"\"\""
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"3 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"1 2\") == \"1\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\nassert solution(\"5\") == \"2.000000000000\"\nassert solution(\"7\") == \"4.000000000000\"\nassert solution(\"9\") == \"6.000000000000\"\nassert solution(\"11\") == \"8.000000000000\"\n\"\"\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '1.000000000000'\n\"\"\"\n\n\"\"\"\n2) For two positive integers x and y. The task is to find the maximal sum of squares of x and y that is less than or equal to a given integer n.\n\n-----Constraints-----\n - 0 \u2264 x, y \u2264 1000\n - x, y and n are integers.\n\n-----Input-----\nThe first line of input contains a single integer t, denoting the number of test cases.\nNext t lines contains two integers x and y.\n\n-----Output-----\nFor each test case, print a single line containing the maximum possible value of the sum of squares of x and y which is less than or equal to n.\nYour output is considered correct if its absolute or relative error from our answer is at most 10^{-6}.\n\n-----Sample Input-----\n3\n1 1\n2 3\n2 3\n\n-----Sample Output-----\n2.0\n3.0\n4.0\n\nExplanation:\nIn the first case, 1 + 1 = 2 and 2 is less than or equal to 3, hence the maximum possible value of the sum of squares of x and y that is less than or equal to 3 is 2.\nIn the second case, 2 + 3 = 5 and 5 is less than or equal to 3, hence the maximum possible value of the sum of squares of x and y that is less than or equal to 3 is 3.\nIn the third case, 2 + 3 = 5 and 5 is less than or equal to 3, hence the maximum possible value of the sum of squares of x and y that is less than or equal to 3 is 4.\n\"\"\"\n\n\"\"\"\n3) The first line of input contains an integer n.\nThe second line of input contains n space-separated integers a1,a2,...,an.\n\n-----Constraints-----\n - 1 \u2264 a1,a2,...,an \u2264 100\n - 1 \u2264 n \u2264 100\n - 1 \u2264 ai \u2264 10000\n - ai is an integer.\n\n-----Input-----\n5\n1 1 1 1\n\n-----Output-----\n1\n\nExplanation:\nFor n = 5, there are 5 integers: 1, 1, 1, 1 and 1.\nThe sum of squares of those 5 integers is 1 + 1 + 1 + 1 + 1 = 5.\n\n-----Sample Input-----\n2\n1 2 3\n4 5 6\n\n-----Sample Output-----\n4\n9\n\"\"\"\n\n\"\"\"\n4) Find the number of occurrences of the smallest number in a given array of positive integers.\n\n-----Constraints-----\n - 1 \u2264 n \u2264 100,000\n - 1 \u2264 ai \u2264 100,000\n - ai is an integer.\n\n-----Input-----\nFirst line of input contains an integer n, denoting the number of elements in the array.\nSecond line of input contains n space-separated integers, denoting the elements of the array.\n\n-----Output-----\nPrint the number of occurrences of the smallest number in the array.\nYour output is considered correct if its absolute or relative error from our answer is at most 10^{-4}.\n\n-----Sample Input-----\n5\n5 2 1 3 1\n\n-----Sample Output-----\n2\n\nExplanation:\nThere are two occurrences of 1 in the array.\n\"\"\"\n\n\"\"\"\n5) For a given natural number n. Find the sum of squares of its digits.\n\n-----Constraints-----\n - n \u2264 100,000\n - n is an integer.\n\n-----Input-----\nFirst line of input contains a single integer t, denoting the number of test cases.\nFirst line of test case contains an integer n.\n\n-----Output-----\nPrint the sum of squares of its digits.\nYour output is considered correct if its absolute or relative error from our answer is at most 10^{-6}.\n\n-----Sample Input-----\n2\n13\n12\n\n-----Sample Output-----\n85\n64\n\"\"\"\n\n\"\"\"\n6) Given an array of positive integers, which contains all the elements in a given set.\nYou have to find the number of elements in the array, such that there exists a pair of elements whose product is odd.\n\n-----Constraints-----\n - 1 \u2264 n \u2264 100,000\n - n is an integer.\n - 1 \u2264 ai \u2264 100,000\n - ai is an integer.\n\n-----Input-----\nFirst line of input contains a single integer t, denoting the number of test cases.\nFirst line of test case contains an integer n, denoting the number of elements in the array.\nNext line contains n space-separated integers, denoting the elements of the array.\n\n-----Output-----\nPrint the number of pairs of elements, whose product is odd.\nYour output is considered correct if its absolute or relative error from our answer is at most 10^{-6}.\n\n-----Sample Input-----\n2\n6\n1 2 4 5 6 7\n6\n6 5 4 3 2 1\n\n-----Sample Output-----\n1\n0\n\"\"\"\n\n\"\"\"\n7) Find the number of occurrences of a given character in a string.\n\n-----Constraints-----\n - 1 \u2264 n \u2264 100,000\n - n is an integer.\n - 1 \u2264 ai \u2264 100,000\n - ai is an integer.\n\n-----Input-----\nFirst line of input contains a single integer t, denoting the number of test cases.\nFirst line of test case contains a string s.\n\n-----Output-----\nPrint the number of occurrences of the character in the string.\nYour output is considered correct if its absolute or relative error from our answer is at most 10^{-4}.\n\n-----Sample Input-----\n3\nabcde\nabde\nabd\n\n-----Sample Output-----\n3\n2\n1\n\nExplanation:\nIn the first test case, 3 characters, i.e., a, b, c are present in the string.\nIn the second test case, 2 characters, i.e., a and b, are present in the string.\nIn the third test case, 1 character, i.e., a, is present in the string.\n\"\"\"\n\n\"\"\"\n8) Given a string, print all possible substrings of the string.\n\n-----Constraints-----\n - 1 \u2264 n \u2264 100,000\n - n is an integer.\n - 1 \u2264 ai \u2264 100,000\n - ai is an integer.\n\n-----Input-----\nFirst line of input contains a single integer t, denoting the number of test cases.\nFirst line of test case contains a string s.\n\n-----Output-----\nPrint the substrings of the string, separated by a space.\nYour output is considered correct if its absolute or relative error from our answer is at most 10^{-3}.\n\n-----Sample Input-----\n2\ngeeksgeeks\n\n-----Sample Output-----\ngeeksge\ngeksge\ngeksg\ngeeksge\ngeksge\ngeek\n\nExplanation:\nIn the first test case, geeksgeeks contains two substrings: geeksgeeks and geeksge.\nIn the second test case, geeksgeeks contains two substrings: geeksgeeks and geksge.\n\"\"\"\n\n\"\"\"\n9) Given a string, print the substrings of the string, such that each character of the substring is an even-indexed character of the string.\n\n-----Constraints-----\n - 1 \u2264 n \u2264 100,000\n - n is an integer.\n - 1 \u2264 ai \u2264 100,000\n - ai is an integer.\n\n-----Input-----\nFirst line of input contains a single integer t, denoting the number of test cases.\nFirst line of test case contains a string s.\n\n-----Output-----\nPrint the substrings of the string, such that each character of the substring is an even-indexed character of the string, separated by a space.\nYour output is considered correct if its absolute or relative error from our answer is at most 10^{-3}.\n\n-----Sample Input-----\n3\ncodeleet\nabc\nabec\n\n-----Sample Output-----\nc o d e l e t\na b c\na b e c\n\"\"\"\n\n\"\"\"\n10) Given a number n. Find the sum of the numbers in the range from 1"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3) == \"1.0\"\n\"\"\"\n\nl = int(input())\n\nmax_volume = 0\n\nfor d1 in range(1, l+1):\n    for d2 in range(1, l+1):\n        for d3 in range(1, l+1):\n            if d1+d2+d3 == l:\n                volume = d1*d2*d3\n                if volume > max_volume:\n                    max_volume = volume\n\nprint(max_volume)\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\n\"\"\"\n\nL = int(input())"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\n\nprint(solution(\"3\"))\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '1.000000000000'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\nassert solution(\"9\") == \"3.000000000000\"\nassert solution(\"5\") == \"2.000000000000\"\nassert solution(\"7\") == \"3.500000000000\"\nassert solution(\"6\") == \"4.000000000000\"\n\nprint(\"Teste unit\u00e1rio passou para: \", solution(\"3\"))"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == \"1.000000000000\"\n\"\"\"\n\nl = int(input())\na = l // 3\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3) == 1.000000000000\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n') == '1.000000000000'\nassert solution('4\\n') == '3.000000000000'\nassert solution('5\\n') == '6.000000000000'\n\"\"\"\n\nimport sys\n\ndimensions = [float(x) for x in sys.stdin.readline().strip().split('\\n')]"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == 'Hello World'\nassert solution('2') == '7'\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"5\"\nassert solution(\"5\") == \"5\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == 'Hello World'\nassert solution('2') == '3'\n'''\n\nimport sys\nimport os\nimport time\nimport math\nimport heapq\nfrom collections import Counter, deque, defaultdict\nfrom itertools import combinations, permutations, combinations_with_replacement, groupby\nfrom bisect import bisect_left, bisect_right\nfrom functools import reduce\nfrom math import gcd, factorial, sqrt, log, sin, cos, tan, degrees, radians, ceil, floor\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom fractions import Fraction\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 'Hello World'\nassert solution('2') == '8'\nassert solution('3') == '6'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n') == 'Hello World\\n'\nassert solution('2\\n1\\n1\\n2\\n') == '3\\n'\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"5\"\n\"\"\"\n\nN = int(input())"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"Hello World\"\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"Hello World\\n\"\n\"\"\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"3333\"\nassert solution(\"3 4\") == \"4444\"\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3') == '3333'\n\"\"\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"3333\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3') == '3333'"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"3333\"\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '4 3'\n) == '3333'\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"3333\"\nassert solution(\"5 2\") == \"55\"\nassert solution(\"3 4\") == \"44\"\n\"\"\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3') == '3333'\nassert solution('4 4') == '4444'\nassert solution('9 9') == '9999'\nassert solution('1 2') == '212'\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3') == '3333'\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('a') == 'b'\n\nassert solution('c') == 'd'\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"x\") == \"z\"\nassert solution(\"q\") == \"q\"\nassert solution(\"z\") == \"z\"\nassert solution(\"b\") == \"c\"\n\nprint(solution(\"a\"))\nprint(solution(\"x\"))\nprint(solution(\"q\"))\nprint(solution(\"z\"))\nprint(solution(\"b\"))\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"a\"\n) == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('a') == 'b'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('a') == 'b'\n\"\"\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a\") == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a') == 'b'\nassert solution('c') == 'd'\n\"\"\"\n\nimport unittest\nimport sys\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a\") == \"b\"\n\"\"\"\n\n\"\"\"\nimport sys\n\ns = stdin.readline().strip()\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a') == 'b'\n\n'''\n\nimport unittest\nimport subprocess\nimport sys\nimport io\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_a(self):\n        _ = subprocess.Popen(['python3','solution.py'], stdout = subprocess.PIPE, stdin = subprocess.PIPE, stderr = subprocess.STDOUT)\n        out, err = _.communicate(input = 'a'.encode('utf-8'))\n        expected = 'b'.encode('utf-8')\n        self.assertEqual(out, expected)"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('order atc') == 'atcoder'\nassert solution('coder atc') == 'atcoder'\nassert solution('coder atcc') == 'atccoder'\n\"\"\"\n\nimport unittest\nimport sys"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('oder atc') == 'atcoder'\n\"\"\"\n\nS, T = stdin.split()\nprint(T + S)\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('oder atc') == 'atcoder'\nassert solution('abc') == 'abcabc'\n\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"oder atc\") == \"atcoder\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('lintcode') == 'lintcode'\n\nassert solution('aabcc') == 'aaabc'\nassert solution('abc') == 'abcabc'\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('oder', 'atc') == 'atcoder'\nassert solution('banana', 'banan') == 'bananabanan'\nassert solution('b', 'a') == 'ab'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\n\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('oder atc') == 'atcoder'\n\"\"\"\n\nS = input()\nT = input()\n\nprint(T + S)\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\nprint(solution(\"oder atc\"), \"atcoder\")\n\"\"\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 5 7 8 2\") == \"0\"\nassert solution(\"6\\n5 1 2 4 6 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 5 7 8 2\") == \"0\"\n\"\"\""
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 5 7 8 2') == '0'\nassert solution('6\\n5 1 2 4 6 3') == '0'\nassert solution('2\\n1000000 1000000') == '1000000'\n\"\"\""
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 2 4 6 3\\n\") == \"0\"\nassert solution(\"6 5 4 3 2 1\\n\") == \"1\"\nassert solution(\"1000000 1000000\\n\") == \"1000000\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('5\\n1 5 7 8 2') == 0\nassert solution('6\\n5 1 2 4 6 3') == 0\nassert solution('2\\n1000000 1000000') == 1000000\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1 2 3 3 3') == '0'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '1'\nassert solution('1 1 2 3 3 3') == '0'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '1'\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 2 4 6 3\") == '0'\nassert solution(\"6 5 1 2 4 6 3\") == '0'\nassert solution(\"1000000 1000000\") == '1000000'\nassert solution(\"2 3 4 5 6 7 8\") == '0'\nassert solution(\"3 3 3 3 3 3 3 3\") == '0'\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 2 4 6 3\") == \"0\"\nassert solution(\"6 5 1 2 4 6 3\") == \"0\"\nassert solution(\"1 1000000000\") == \"1\"\nassert solution(\"1 1000000000 2 1000000000\") == \"0\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1\\n2') == '2'\nassert solution('1\\n2\\n3') == '0'\nassert solution('1\\n2\\n3\\n4') == '0'\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2 3 3\") == 5\n\"\"\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 2 3 3\\n7 10 50 12 1 8') == '5'\n\nassert solution('1 1 100 99\\n100') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(print(input()))\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2 3 1\\n7 10 50 12 1 8\\n') == '6'\nassert solution('1 1 100 99\\n100\\n') == '1'\n\"\"\""
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 3\\n7 10 50 12 1 8\\n') == '5'\nassert solution('1 1 100 99\\n100\\n') == '1'\nassert solution('1 1 100 99\\n100\\n') == '1'\n\"\"\"\n\nimport unittest\n\nfrom collections import deque\nfrom typing import Dict, List, Deque, Tuple\n\nPoint = Tuple[int, int]\nPointSet = Dict[Point, int]"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\") == \"5\"\nassert solution(\"1 1 100 99\\n100\") == \"1\"\nassert solution(\"7 4 2 1\\n1 3 5 4 2 7 6\") == \"6\"\n\"\"\"\n\nn, a, b, k = [int(x) for x in input().split()]\nh = [int(x) for x in input().split()]\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\\n\") == \"5\"\nassert solution(\"1 1 100 99\\n100\\n\") == \"1\"\nassert solution(\"7 4 2 1\\n1 3 5 4 2 7 6\\n\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 4 2 1\\n1 3 5 4 2 7 6') == '6'\n\"\"\"\n\nfrom collections import deque\n\nn, a, b, k = map(int, stdin.readline().split())\nh = list(map(int, stdin.readline().split()))\n\nhp = sum(h)"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\") == \"5\"\nassert solution(\"1 1 100 99\\n100\") == \"1\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3\\n3 2 0 6 10 12\\n\") == 3\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n0 1 2 3\") == \"0\\n0 1 2 3\"\nassert solution(\"4 2\\n3 4 2\") == \"3\\n3 4 2\"\n\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'abc'\nassert solution('abcde') == 'abcde'\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2 0 6 10 12\\n') == '3'\nassert solution('3 2 0 6 10 12\\n') == '3'\nassert solution('3 2 0 6 10 12\\n') == '3'"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 0 6 10 12\") == '3'\nassert solution(\"4 2 0 6 10 12\") == '3'\nassert solution(\"6 2 0 6 10 12\") == '3'\nassert solution(\"1 1 1 1 1\") == '0'\nassert solution
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3') == '0'\nassert solution('3 1') == '1'\nassert solution('5 7') == '3'\nassert solution('6 3') == '0'\nassert solution('5 7') == '3'\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3\\n3 2 0 6 10 12\") == '3'\n\n\"\"\"\n\nfrom typing import List\n\nfrom helpers import input_parser\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n0 1 2 3') == '0'\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n0 1 2 3\") == \"0\\n0 1 2 3\"\nassert solution(\"6 3\\n3 2 0 6 10 12\") == \"3\\n3 2 0 7 10 14\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 0 6 10 12\") == \"3\"\nassert solution(\"4 2 0 6 10 12\") == \"0\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3') == '8'\n\"\"\""
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5') == '20'"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == \"20\"\n\"\"\""
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(solution_input_1) == solution_expected_1\nassert solution(solution_input_2) == solution_expected_2\nassert solution(solution_input_3) == solution_expected_3\nassert solution(solution_input_4) == solution_expected_4\nassert solution(solution_input_5) == solution_expected_5\n\nprint('The local tests are done. Now use the solution() function '\n      'to make sure it works on the testsuite.')\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 0 2 0\") == \"8\"\n\"\"\"\nimport sys\nfrom collections import Counter, defaultdict, deque\nfrom itertools import combinations, groupby, permutations, product\nfrom math import factorial\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3''') == \"8\"\nassert solution('''5 3\n4 2 1 3 2\n3 5\n4 2\n2 5''') == \"20\"\n\n\"\"\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n1\\n10000 10000 10000 10000\") == \"YES\\nNO\\nYES\\nNO\"\nassert solution(\"4\\n1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n1\\n10000 10000 10000 10000\") == \"NO\\nNO\\nNO\\nNO\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\") == \"YES\"\nassert solution(\"4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n1 10 10\\n2\\n10 5 2 10 1 1 2 5\") == \"YES\"\nassert solution(\"1\\n1 10 10\\n2\\n10 5 2 10 1 1 2 5\") == \"YES\"\nassert solution(\"1\\n10000 10000 10000 10000\\n2\\n10 5 1 10 5 1 1 1\") == \"NO\"\nassert solution(\"1\\n1 1 1 1 1 1 1 1\\n1\") == \"YES\"\nassert solution(\"1\\n1 1 1 1 1 1 1 1\\n1\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == \"YES\"\nassert solution(\"4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == \"NO\"\n\"\"\"\n\n\"\"\"\nQ3. Mizzi's Anniversaries\n\n\nComplexity:\n    Time: O(N*log(N))\n    Space: O(N)\n    \n\"\"\""
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2\\n1 2 3 4\\n2\\n1 1 1 1 1') == 'YES'\nassert solution('1\\n1\\n1 1 1 1 1') == 'YES'\nassert solution('1\\n1\\n1 1 1 1 1') == 'NO'\nassert solution('4\\n1\\n1 1 1 1 1') == 'YES'\nassert solution('4\\n2\\n1 1 1 1 1') == 'YES'\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\") == 'YES\\nYES\\nNO\\nYES\\nYES'\nassert solution(\"5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\") == 'NO\\nNO\\nNO\\nYES\\nYES'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 1 1 1\\n2\\n2 1 1 1 1 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == 'YES\\nYES\\nNO\\nYES\\nYES'\n\"\"\"\n\nimport sys\nfrom math import gcd\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_data) == expected_result\n\"\"\"\n\nfrom math import sqrt\n\nfrom itertools import combinations"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1''') == 'YES\\nYES\\nNO\\nYES\\nYES'\n\nassert solution('''5\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000''') == 'YES\\nNO\\nNO\\nNO\\nNO'\n\n\"\"\"\n\n\"\"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n1\\n10000 10000 10000 10000') == 'YES\\nNO\\nYES\\nYES'\nassert solution('4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000') == 'NO\\nNO\\nNO\\nNO'\nassert solution('3\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000') == 'YES\\nYES\\nNO'\nassert solution('2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000') == 'NO'\nassert solution('4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10000 10000 1 1 1\\n1\\n10000 10000 10000 10000') == 'NO'\n\nprint(solution(\"4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\"))\n\n\"\"\"\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if len(set(l))!= 1:\n        print(\"NO\")\n    elif l[0] * l[1] == n * l[2] * l[3]:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n3 5 3\n1 2 1\n2 3 9\n2 3 9\n''') == '9'\nassert solution('''\n6 10 3\n1 4 4\n4 2 5\n2 3 2\n3 1 1\n4 5 8\n4 5 8\n5 3 1\n2 3 1\n5 6 5\n''') == '5'\n\nassert solution('''\n7 10 3\n1 2 4\n2 3 2\n3 1 4\n1 3 4\n4 2 3\n2 1 1\n5 5 1\n5 6 9\n''') == '2'\n\nassert solution('''\n6 10 3\n3 4 5\n5 1 4\n1 2 1\n4 3 1\n5 4 4\n1 4 1\n4 3 5\n5 4 1\n4 6 4\n''') == '5'\n\nassert solution('''\n4 4 3\n1 2 1\n2 3 1\n3 1 1\n1 3 1\n''') == '2'\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\\n0 1 2\\n0 2 1\\n\") == \"2\"\nassert solution(\"4 4 0\\n0 1 2\\n0 2 1\\n0 3 1\\n\") == \"0\"\nassert solution(\"4 4 2\\n0 1 2\\n0 2 1\\n0 3 1\\n\") == \"1\"\n\n'''\nimport sys\nfrom heapq import heappush, heappop"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\") == \"3\"\n\nassert solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\") == \"9\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 2\\n1 2 1\\n3 4 2\\n1 2 5\\n4 1 4\\n1 2 3\\n3 2 3\") == \"3\"\n\"\"\"\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n\n    def addEdge(self, u, v, w):\n        self.graph[u].append([v,w])\n\n    def topologicalSortUtil(self, v, visited, stack):\n        visited.add(v)\n\n        for neighbour in self.graph[v]:\n            if neighbour[0] not in visited:\n                self.topologicalSortUtil(neighbour[0], visited, stack)\n\n        stack.insert(0, v)\n\n    def topologicalSort(self):\n        visited = set()\n        stack = []\n\n        for vertex in list(self.graph):\n            if vertex not in visited:\n                self.topologicalSortUtil(vertex, visited, stack)\n\n        print(stack)\n\n    def findShortestPath(self, s, d):\n        visited = set()\n        stack = []\n\n        self.topologicalSortUtil(s, visited, stack)\n\n        dist = [float(\"inf\")] * self.V\n        dist[s] = 0\n        print(dist)\n\n        while stack:\n            i = stack.pop(0)\n\n            for neighbour in self.graph[i]:\n                if neighbour[0] in visited:\n                    continue\n\n                if dist[neighbour[0]] > dist[i] + neighbour[1]:\n                    dist[neighbour[0]] = dist[i] + neighbour[1]\n\n            visited.add(i)\n\n        return dist[d]"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n') == '3'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''6 10 5\n2 5 1\n5 3 9\n6 2 2\n1 3 1\n5 1 8\n6 5 10\n1 6 5\n6 4 6\n3 6 2\n3 4 5''') == '3'\n\n'''\n\u0417\u0430\u0434\u0430\u0447\u0430 \u00ab\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b\u00bb\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435\n\u041f\u043e\u043b\u0443\u0447\u0438\u0432 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u044d\u0442\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438 \u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u043d\u0430 2 \u0442\u0430\u043a\u0438\u0435, \u0447\u0442\u043e \u0441\u0443\u043c\u043c\u0430 \u0438\u0445 \u0434\u0435\u043b\u0435\u043d\u0438\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0447\u0438\u0441\u043b\u043e 3. \u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e, \u0444\u0430\u0439\u043b \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043c\u043e\u0436\u043d\u043e \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435.\n\n\u0417\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u0435\n\u0414\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u044b \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043a\u043b\u044e\u0447\u0438 \u2014 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u043b\u0438\u043c\u044b\u0445 \u043d\u0430 2 \u0447\u0438\u0441\u0435\u043b \u0438 \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u2014 \u0441\u0430\u043c\u0438 \u0447\u0438\u0441\u043b\u0430.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430 2, \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0442\u044c\u0441\u044f. \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u2014 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043a\u043e\u043c\u044b\u043c\u0438.\n\n3 4 2 3\n3\n5\n3\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b\n\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435 \u0438\u0441\u043a\u043e\u043c\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438 \u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0435\u0439\u0441\u044f \u0441\u043e \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0438\u0437 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043d\u0430 2.\n\n\n6\n\n1\n\n3\n\n2\n\n3\n\n2\n\n3\n\n2\n\n3\n\n3\n\n4\n\n5\n\n6\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n100\n\n101\n\n102\n\n103\n\n104\n\n105\n\n106\n\n107\n\n108\n\n109\n\n110\n\n111\n\n112\n\n113\n\n114\n\n115\n\n116\n\n117\n\n118\n\n119\n\n120\n\n121\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 1\\n2 3 1\\n1 4 2\") == \"2\"\nassert solution(\"5 2 5\\n1 3 3\\n1 2 1\") == \"2\"\nassert solution(\"5 2 5\\n1 3 9\\n1 2 2\") == \"3\"\nassert solution(\"5 3 8\\n1 3 3\\n2 3 2\\n1 4 6\") == \"4\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10 3\") == 3\nassert solution(\"6 10 6\") == 6\nassert solution(\"7 15 18\") == 9\nassert solution(\"7 15 17\") == 9\n\"\"\"\nimport sys\nimport heapq\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''6 10 5\n2 5 1\n5 3 9\n6 2 2\n1 3 1\n5 1 8\n6 5 10\n1 6 5\n6 4 6\n3 6 2\n3 4 5''') == 3\n\nassert solution('''7 15 18\n2 6 3\n5 7 4\n6 5 4\n3 6 9\n6 7 7\n1 6 4\n7 1 6\n7 2 1\n4 3 2\n3 2 8\n5 3 6\n2 5 5\n3 7 9\n4 1 8\n2 1 1''') == 9\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10 1\") == \"1\"\nassert solution(\"6 10 5\") == \"3\"\nassert solution(\"7 15 18\") == \"9\"\n\"\"\"\n\nn, m, k = list(map(int, input().split()))\ng = [[] for _ in range(n)]\nfor _ in range(m):\n    u, v, w = list(map(int, input().split()))\n    g[u - 1].append((v - 1, w))\n    g[v - 1].append((u - 1, w))\n\nINF = 10000000000\nd = [INF] * n\nd[0] = 0\nq = []\nheapq.heappush(q, (0, 0))\nwhile q:\n    _, u = heapq.heappop(q)\n    for v, w in g[u]:\n        if d[v] > d[u] + w:\n            d[v] = d[u] + w\n            heapq.heappush(q, (d[v], v))\n\nprint(d[k - 1])\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n\nprint(\"OK\")\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\\n1 1 1 1 1 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\\n2 2 1 1 2 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\""
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1 3 4 2\\n\") == \"3 1\\n1 1 1 1 1\"\nassert solution(\"6\\n1 5 12 13 2 15\\n\") == \"7 2\\n2 2 1 1 2 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\\n\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\n\n-----Solution-----\n\nThis one was a nice one. I was first trying to convert the string to list and then calculate the number of teams and the total diversity, but it didn't worked. I was trying to sort the list first and then divide the list into groups with different length and I was not able to sort the list.\n\nI got a hint on Codility that the input is not empty, so I wasn't able to sort the list.\n\nI decided to solve this problem with some sort of brute force, so it was clear that I have to do the brute force first.\n\nThe idea is to find the solution that has the least total diversity.\n\n1) Find all the combinations of different lengths.\n2) Check if all the combinations have the same total diversity. If yes, return the solution.\n3) Find the combination with the least total diversity.\n4) Return the solution, the length of the shortest combination, the difference between the maximum and minimum values in the list and the number of the combination."
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 1 3 4 2\\n') == '3 1\\n1 1 1 1 1\\n'\nassert solution('6\\n1 2 5 129 185 581 1041 1909 1580 8150\\n') == '7486 3\\n3 3 3 2 2 2 2 1 1 1\\n'\nassert solution('10\\n1 2 5 129 185 581 1041 1909 1580 8150\\n') == '7486 3\\n3 3 3 2 2 2 2 1 1 1\\n'"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 1 3 4 2') == '3 1'\nassert solution('6\\n1 5 12 13 2 15') == '7 2'\nassert solution('10\\n1 2 5 129 185 581 1041 1909 1580 8150') == '7486 3'\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == '3 1'\nassert solution(\"6\\n1 5 12 13 2 15\") == '7 2'\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == '7486 3'\nprint('The solution is correct!')\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 1 3 4 2') == '3 1\\n1 1 1 1 1 1'\nassert solution('6\\n1 5 12 13 2 15') == '7 2\\n2 2 1 1 2 1'\nassert solution('10\\n1 2 5 129 185 581 1041 1909 1580 8150') == '7486 3\\n3 3 3 2 2 2 2 1 1 1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n') == '1'\nassert solution('8\\n') == '3'\nassert solution('9\\n') == '2'\nassert solution('10\\n') == '3'\n\"\"\""
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n5009') == '1\\n5000 9'\nassert solution('5\\n7\\n9876') == '1\\n1'\nassert solution('1\\n10000') == '1\\n10000'\nassert solution('2\\n10\\n10') == '2\\n1'\nassert solution('1\\n10') == '1\\n1'\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1') == '1'\nassert solution('3\\n1') == '1'\nassert solution('4\\n9') == '2'\nassert solution('4\\n9') == '2'\nassert solution('4\\n9') == '2'\n\"\"\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5\n5009\n7\n9876\n10000\n10\n\"\"\") == \"\"\"\n2\n5000 9\n1\n7 \n4\n800 70 6 9000 \n1\n10000 \n1\n10\n\"\"\"\n\nprint(solution(\"\"\"\n5\n5009\n7\n9876\n10000\n10\n\"\"\"))\nassert solution(\"\"\"\n5\n5009\n7\n9876\n10000\n10\n\"\"\") == \"\"\"\n2\n5000 9\n1\n7 \n4\n800 70 6 9000 \n1\n10000 \n1\n10\n\"\"\""
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n5009') == '2\\n5000 9'\nassert solution('3\\n7') == '1\\n1'\nassert solution('2\\n9876') == '1\\n1'\nassert solution('2\\n10000') == '1\\n1'\nassert solution('1\\n10') == '1\\n1'\n\"\"\"\n\nimport sys\nimport functools\nimport math\n\nDEBUG = False\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5009\") == \"2\\n5000 9\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n5\\n\") == \"1\\n5002\"\n\"\"\"\n\nimport collections\nfrom typing import List\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n5009\\n7\\n9876\\n10000\\n10\") == \"2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\"\nassert solution(\"1\\n1\") == \"1\\n1\"\nassert solution(\"2\\n1\\n2\") == \"1\\n2\"\nassert solution(\"3\\n1\\n2\\n3\") == \"1\\n2\"\nassert solution(\"4\\n1\\n2\\n3\\n4\") == \"2\\n1\\n2\\n1\\n4\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1\n11\n22\n10001\n5000\n\"\"\") == \"\"\"\n1\n5000 1\n22\n2\n10001 2\n1\n5000\n1\n1\n1\n5009\n1\n\"\"\"\n\n\"\"\"\n[+]Temporal marker            :  Wed, 21:01 | Feb 19, 20\n[+]Temporal marker untethered :  Wed, 21:17 | Feb 19, 20\n[+]Comments                  : *Implemented for 100% and solving problems correctly\n                                *Ran out of time\n                                *Liked the solution\n                                *Once I had the solution, I was curious if I could solve the problem by hand\n                                *Solved the problem by hand and was surprised that I did not know how to solve it\n                                *Thanks to this solution, I have practiced using a phone's dial pad\n                                *And I am glad that I could use the solution to solve this problem\n                                *As a reward for solving this problem, I am giving myself this title: problem solver\n                                *Solved the problem in 15 minutes, the first time I was able to solve a problem with this solution\n                                *Solved the problem in 10 minutes, the second time I was able to solve a problem with this solution\n                                *Solved the problem in 10 minutes, the third time I was able to solve a problem with this solution\n                                *Solved the problem in 10 minutes, the forth time I was able to solve a problem with this solution\n                                *Solved the problem in 10 minutes, the fifth time I was able to solve a problem with this solution\n[+]Tread speed               :  Paced\n[+]Level                     :  Easy\n[+]LINK                      :  https://www.interviewbit.com/courses/programming/topics/design-of-algorithms/\n[+] Supplement Sources       : N/A\n\"\"\""
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2') == '1\\n1'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5009\\n7\\n9876\\n10000\\n10\\n\") == '2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10'\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\\n3\\n2 3 1\") == \"1 1 1 1 1\"\nassert solution(\"1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"1 1 1 1 1\"\nassert solution(\"1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\") == \"1 3 3 3 3\"\n\"\"\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"1 1 1 1 1\"\n\"\"\"\n\n\"\"\"\nGiven:\n\nq = number of queries\nn = number of kids\np = list of kids\n\nFor each query:\n    Find the kid which is getting the book, say kid k, who is getting the book at day i, say day i.\n    For each day i, find the kid who is getting the book at day i, say day i.\n    Find the number of days it takes for the book to return to that kid, say d\n    Print the answer of each query\n\nInput:\n3\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n\nOutput:\n1 1 1 1 1\n3 3 3\n2 3 3 2 1 3\n1\n2 2 2 2\n4 4 4 1 4\n\nSOLUTION:\n\n1) Make a list of the kids\n\n2) Make a dictionary for each kid.\n    - key = kid\n    - value = [day, next_day]\n\n3) Make a dictionary for each book.\n    - key = book\n    - value = [day, next_day]\n\n4) Run through each query\n    - run through each book\n        - run through each kid\n            - record the day the book is returned to him\n\n5) Return the dictionary with the days\n\"\"\""
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n5 1 2 4 3\\n\") == \"1 1 1 1 1\"\nassert solution(\"4\\n1 2 3 4\\n3\\n2 3 1\\n5\\n5 1 2 4 3\\n\") == \"3 3 3\"\nassert solution(\"4\\n1 2 3 4\\n3\\n2 3 1\\n5\\n5 1 2 4 3\\n\") == \"2 3 3 2 1 3\"\n\"\"\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 1 2\") == \"1 1 1 1\"\nassert solution(\"5\\n4 6 2 1 5 3\") == \"3 3 3\"\nassert solution(\"6\\n4 6 2 1 5 3\") == \"2 3 3 2 1 3\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nQ = int(input())\nfor _ in range(Q):\n    n = int(input())\n    p = list(map(int, input().split()))\n    d = [0] * n\n    for i in range(n - 1):\n        j = i\n        while j < n and p[j]!= i + 1:\n            d[p[j] - 1] += 1\n            j += 1\n    for i in range(n):\n        print(d[i], end=\" \")\n    print()\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 1 2 4') == '1 1 1 1'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3') == '1 1 1 1 1'\nassert solution('6 8\\n1 2 3 4 5 6 7 8\\n4\\n1 2 4 3 5 6\\n6\\n2 3 4 5 6 7 8\\n7\\n1 2 3 4 5 6 7 8\\n8\\n2 3 4 5 6 7 8 9') == '1 1 1 1 1 3 3 3'\n\"\"\"\n\nimport sys\n\ndebug = False\ndata = sys.stdin.read().strip().split(\"\\n\")"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 4 1 2\\n1\\n1\\n4\\n3 4 1 2') == '1 1 1 1'\nassert solution('2\\n2 3 1\\n1\\n1\\n2\\n2\\n1') == '3 3 3 2 2 2'\n\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(200_000)"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4'\n\"\"\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3 1 2\\n1 3 4') == '1 1 1 1', 'example1'\nassert solution('6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3') == '1 1 1 1 1', 'example2'\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str([\n    5,\n    [1, 2, 3, 4, 5],\n    3,\n    [1, 2, 2],\n    4,\n    [1, 1, 1, 1]\n])) == [3, 2, 1]\n\"\"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5\\n3\\n1 2 2') == '3'\nassert solution('1 2 3 4 5\\n2\\n1 2') == '2'\nassert solution('1 2 3 4 5\\n1\\n1 1 1 1') == '1'\nassert solution('1 2 3 4 5\\n5\\n1 1 1 1 1') == '1'\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3\") == \"2\"\nassert solution(\"1\\n4\") == \"1\"\nassert solution(\"2\\n5\") == \"3\"\n\nprint(\"All tests passed.\")\n\"\"\""
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '1'\nassert solution('2\\n2') == '1'\nassert solution('3\\n3') == '3'\nassert solution('4\\n3') == '3'\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\\n2\\n1 1 1 1\") == \"2\"\nassert solution(\"3\\n5\\n1 2 3 4 5\\n3\\n1 2 2\") == \"1\"\n\"\"\"\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3 4\\n3\\n1 2 2') == '1'\nassert solution('4\\n1 2 3 4\\n3\\n1 1 1 1') == '1'\n\"\"\"\nimport sys\nimport math\nimport collections"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\\n2\\n1 1 1 1\") == \"1\\n1\\n1\"\nassert solution(\"3\\n1 2 3\\n2\\n1 1 1\") == \"1\\n1\\n1\"\nassert solution(\"3\\n1 2 3\\n2\\n1 2 2\") == \"1\\n2\\n2\"\n\"\"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1') == '3\\n2\\n1'\nassert solution('5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1') == '5\\n5\\n2'\nassert solution('5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1') == '2\\n2\\n2'\n\"\"\"\n\n\nfrom sys import stdin\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1\") == \"3\\n2\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\\n\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n\") == \"5 4 0 5 3 3 9 0 2 5\"\n\n\"\"\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\") == \"5 4 0 5 3 3 9 0 2 5\"\n\n\"\"\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\\n\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n\") == \"5 4 0 5 3 3 9 0 2 5\"\n\"\"\""
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n\"\"\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 4 2 1 5 4 3 7 1 2 5\") == '5 4 0 5 3 3 9 0 2 5'\nassert solution(\"10 4\") == '0 0 1 2'\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n\n\"\"\""
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n\") == \"5 4 0 5 3 3 9 0 2 5\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n\") == \"5 4 0 5 3 3 9 0 2 5\"\n\"\"\""
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 2\\n\") == \"0 0 1\"\nassert solution(\"2 2\\n1 2\\n4 3\\n\") == \"0 0 1 2\""
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\") == \"5 4 0 5 3 3 9 0 2 5\""
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\n\"\"\"\n\n\"\"\"\nPython\n\nclass Solution:\n    def solution(self, stdin):\n        n, k = list(map(int, stdin.split(' ')))\n        p = list(map(int, stdin.split('\\n')[1].split(' ')))\n        q = list(map(int, stdin.split('\\n')[2].split(' ')))\n        if len(p)!= len(q):\n            return \"NO\"\n\n        def is_sorted(arr):\n            if arr == sorted(arr):\n                return True\n            else:\n                return False\n        # first, check if the sorted strings exist\n        if is_sorted(p) and is_sorted(q):\n            # now check if the sorted strings have same letters\n            if set(p) == set(q):\n                pass\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n\nassert Solution().solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\n\"\"\"\n\"\"\"\nC++"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"YES\"\nassert solution(\"3 1\") == \"NO\"\nassert solution(\"4 4\") == \"NO\"\nassert solution(\"3 2\") == \"YES\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n1 2 3\\n1 3 2') == 'abb'\nassert solution('4 1\\n3 4 1\\n2 3 4') == 'NO'\nassert solution('3 2\\n1 2 3\\n1 3 2\\n2 3 1') == 'NO'\nassert solution('3 3\\n1 2 3\\n1 3 2\\n2 3 1') == 'NO'\nassert solution('3 2\\n1 2 3\\n1 3 2\\n3 2 1') == 'NO'\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n1 2 3\\n1 3 2') == 'YES\\nabb'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\nassert solution(\"3 2\\n1 2 3\\n2 1 3\") == \"NO\"\nassert solution(\"3 2\\n1 2 3\\n1 2 3\") == \"YES\\nabc\"\nassert solution(\"3 2\\n1 2 3\\n2 3 1\") == \"YES\\nabb\"\nassert solution(\"3 2\\n1 3 2\\n1 2 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'NO'\nassert solution('2 1') == 'NO'\nassert solution('1 2') == 'NO'\nassert solution('1 2 3') == 'NO'\nassert solution('3 1 2') == 'NO'\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == output()\n\n-----Test input-----\n\n3 2\n1 2 3\n1 3 2\n\n3 3\n1 2 3\n1 3 2\n1 2 3\n\n3 3\n1 2 3\n2 3 1\n1 3 2\n\n3 2\n1 2 3\n2 1 3\n\n3 3\n1 2 3\n3 2 1\n1 3 2\n\n-----Example output-----\nYES\nabc\nab\n\n\"\"\"\n\nn, k = list(map(int, input().split()))\n\np = list(map(int, input().split()))\nq = list(map(int, input().split()))\n\narr = [chr(i) for i in range(97, 97 + k)]\n\nprint(\"YES\" if sorted(arr) == sorted(arr[p[i]-1:p[i]]+arr[p[i]:p[i]+1]+arr[p[i]-1:p[i]] for i in range(n)) and sorted(arr) == sorted(arr[q[i]-1:q[i]]+arr[q[i]:q[i]+1]+arr[q[i]-1:q[i]] for i in range(n)) else \"NO\")\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == \"abb\"\n\"\"\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n1 2 3\\n1 3 2') == 'abb'\n\n\n-----Explanation-----\n\nstring = 'abb'\n\nIt is possible to restore the original string if you write all symbols of the string in the permutation order.\n\nFor example, if the permutation is p = [2, 1, 3] then a string abb is correct if:\n\ns[p[0]] = 'a'\ns[p[1]] = 'b'\ns[p[2]] = 'b'\n\ns[p[0]] <= s[p[1]]\ns[p[1]] <= s[p[2]]\n\ns[p[0]] <= s[p[2]]\n\nThere are no pairs of indices (i, j) such that:\n\ns[p[i]] > s[p[j]]\n\n---"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n10 20 10\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\nassert solution(\"2\\n1\") == \"2\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n20 10 20\\n') == '43'\nassert solution('4\\n10 10 10 10\\n') == '64'\nassert solution('6\\n5 4 5 4 4 5\\n') == '69'\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n20 10 20\\n') == '43\\n1 3 2'\nassert solution('4\\n10 10 10 10\\n') == '64\\n2 1 4 3'\nassert solution('6\\n5 4 5 4 4 5\\n') == '69\\n6 1 3 5 2 4'\nassert solution('2\\n1 4\\n') == '3\\n2 1'\n\n\"\"\""
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n20 10 20\\n') == '43'\nassert solution('4\\n10 10 10 10\\n') == '64'\nassert solution('6\\n5 4 5 4 4 5\\n') == '69'\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n20 10 20\\n\") == \"43\\n1 3 2\"\nassert solution(\"4\\n10 10 10 10\\n\") == \"64\\n2 1 4 3\"\nassert solution(\"6\\n5 4 5 4 4 5\\n\") == \"69\\n6 1 3 5 2 4\"\nassert solution(\"2\\n1 4\\n\") == \"3\\n2 1\""
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n10 10 10 10\") == \"64\\n2 1 4 3\"\n\n\"\"\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n20 10 20') == 43\nassert solution('4\\n10 10 10 10') == 64\nassert solution('6\\n5 4 5 4 4 5') == 69\nassert solution('2\\n1 4') == 3\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n4 2 5 1 3') == '3'\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 5 1 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 5 1 3') == '3'\n\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 5 1 3\") == '3'\n\"\"\"\n\n\n\"\"\"\nThe key is to notice that for any pair (i, j),\n if P_i > P_j, then P_j > P_i.\n In other words, increasing elements can not be contained in increasing-order sequences.\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 5 1 3\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 5 1 3\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 5 1 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input) == expected_output\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == '3'\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3 3 3') == '1'\n\"\"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 3 3') == 1\n\"\"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\nassert solution('3\\n3 3 3 3') == '0'\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 3 3 3\") == 1\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\n\"\"\"\n\nN = int(input())\na = list(map(int, input().split()))\nfreq = {}\nfor i in a:\n    if i not in freq:\n        freq[i] = 0\n    freq[i] += 1\nfor i in freq:\n    if freq[i] > i:\n        print(freq[i] - i)\n        break\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 3 3 3') == '1'"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\n\n\"\"\""
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('2 3') == '1'\n'''\n\n'''\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\nprint(solution(\"0 2 3 4 5\"))"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 2 3 4 5') == '1'\nassert solution('2 0 1 4 5') == '0'\nassert solution('0 0 3 4 5') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 2 3 4 5') == '1'\nprint(solution('0 2 3 4 5'))\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 2 3 4 5') == '1'\nprint('Test passes.')\n\n-----\nExplanation\nIn this case, Snuke assigned 0 to x_1, so we should print 1.\n\n-- Python cases --\nInput:\n0\nOutput:\n1\n\nInput:\n0 1 2 3 4 5\nOutput:\n2\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 2 3 4 5') == '1'\n\"\"\"\nimport re\n\n_, *args = input()\n\np = re.compile(r'([a-z])[0]')\n\nfor i, c in enumerate(args):\n    if p.match(c):\n        print(i + 1)\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 2 3 4 5') == '1'\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4 5') == '1'\n\"\"\"\n\nstdin = input()\nnumbers = stdin.split(' ')\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])\n\nprint(numbers.index(0) + 1)\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\") == \"0\"\nprint(solution(\"3 5\"))\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\n') == 0\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open('input.txt', 'r').read()) == str(0)\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\") == 0\n\n\"\"\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n\") == \"0\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5') == 0\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n\") == \"0\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\") == \"0\"\n\"\"\"\n\nfrom itertools import product\n\nh, w = input().split()\nH, W = int(h), int(w)\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\n3 2') == '0'\nprint(solution('4 5\\n3 2'), end='')\n\nassert solution('3 4\\n2 1') == '2'\nprint(solution('3 4\\n2 1'), end='')\n\nassert solution('5 5\\n5 5') == '0'\nprint(solution('5 5\\n5 5'), end='')\n\nassert solution('1 1\\n1 1') == '0'\nprint(solution('1 1\\n1 1'), end='')\n\nassert solution('1 2\\n1 1') == '2'\nprint(solution('1 2\\n1 1'), end='')"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n1 10 100''') == 'Yes'\nassert solution('''2\n2 4 6''') == 'No'\nassert solution('''3\n1 10 100''') == 'Yes'\nassert solution('''2\n1 10 100''') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 10 100\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == 'Yes'\n\n-------\n\n>>> def solution(stdin):\n    sequence = stdin.strip().split('\\n')\n    for num in sequence:\n        num = int(num)\n        if num % 4 == 0:\n            continue\n        if num % 4!= 0:\n            return 'No'\n    return 'Yes'\n\nassert solution('') == 'Yes'\nassert solution('1\\n2') == 'No'\nassert solution('2\\n2') == 'No'\nassert solution('1\\n10 100') == 'No'\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 10 100\\n\") == \"Yes\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10 100\") == \"Yes\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n 10 100\") == \"Yes\"\nassert solution(\"3\\n 1 10 100\") == \"Yes\"\nassert solution(\"3\\n 10 100 1\") == \"No\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 10 100\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 10 100') == 'Yes'\nassert solution('3 100 10') == 'Yes'\nassert solution('3 100 100') == 'No'\nassert solution('10 100 10') == 'Yes'\nassert solution('100 10 100') == 'No'\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(s) == 'Yes'\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 10 100\\n\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\n\nassert solution('abc') == 'No'\nassert solution('abcd') == 'No'\n\nassert solution('abcc') == 'No'\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"yx\"\n) == \"Yes\"\nassert solution(\n    \"axy\"\n) == \"Yes\"\nassert solution(\n    \"abc\"\n) == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"xy\") == \"Yes\"\nassert solution(\"yx\") == \"Yes\"\nassert solution(\"xy\") < \"yxa\"\n\n----\nx = \"xy\"\ny = \"yxa\"\n\nl1 = list(x)\nl2 = list(y)\n\nfor i, j in zip(l1, l2):\n    if i < j:\n        print(\"Yes\")\n        break\nelse:\n    print(\"No\")\n\n----\nprint(\"Yes\")\nprint(\"Yes\")\nprint(\"No\")\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\n\"\"\""
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('atcoder') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcd\") == \"Yes\"\nassert solution(\"abca\") == \"Yes\"\nassert solution(\"abcde\") == \"No\"\nassert solution(\"abcc\") == \"No\"\nassert solution(\"abccd\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('ab') == 'ab'\nassert solution('abb') == 'abba'\nassert solution('abc') == 'abc'\nassert solution('aabc') == 'abca'\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"atcoder\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"atcoder\") == \"No\"\nassert solution(\"abc\") == \"No\"\n\n------"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 1') == 'YES'\nassert solution('2 2 1') == 'NO'\nassert solution('2 1 1') == 'NO'\nassert solution('2 1 2') == 'YES'\nassert solution('1 3 3') == 'YES'\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_1) == \"YES\"\nassert solution(test_2) == \"NO\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 5 1') == 'YES'\n\"\"\"\n\na, b, c = map(int, stdin.readline().split(' '))\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 5 1') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 5 1\\n') == 'YES'\nassert solution('4 2 1\\n') == 'NO'\nassert solution('2 2 5\\n') == 'NO'\nassert solution('7 1 1\\n') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5 1\") == 'YES'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n\n\"\"\"\n\nA, B, C = (int(i) for i in stdin.split())"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5 1\\n\") == \"YES\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == 1\nassert solution(\"1 1\") == 1\nassert solution(\"10 10\") == 100\nassert solution(\"100 100\") == 10000\nassert solution(\"123 123\") == 123123\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '2 2'\n) == '1'\nassert solution(\n    '1 2'\n) == '1'\nassert solution(\n    '3 2'\n) == '2'\nassert solution(\n    '2 2'\n) == '1'\n\"\"\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"3 4\") == \"9\"\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"4 4\") == \"8\"\nassert solution(\"5 5\") == \"20\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == '6'\nassert solution(\"4 5\") == '6'\nassert solution(\"100 100\") == '10000'\n\"\"\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('4 6') == '36'\nassert solution('4 2') == '4'\nassert solution('2 2') == '1'\nassert solution('100 100') == '10000'\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2') == '1'\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '3'\nassert solution('1 2 3\\n4 5 6') == '3'\n\n-----Explanation-----\nInput:\n13 3 1\n\nOutput:\n3\n\nThe seats:\n+---+---+---+---+\n|   |   |   |   |\n+---+---+---+---+\n|   |   |   |   |\n+---+---+---+---+\n|   |   |   |   |\n+---+---+---+---+\n|   |   |   |   |\n+---+---+---+---+\n\nCan accommodate all three.\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13 3 1') == '3'\n\"\"\"\nfrom typing import List\n\nX, Y, Z = list(map(int, input().split(' ')))\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13 3 1') == '3'\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('13 3 1\\n') == '3'\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 1\") == \"3\"\nassert solution(\"2 3 1\") == \"3\"\nassert solution(\"3 3 1\") == \"1\"\nassert solution(\"4 3 1\") == \"1\"\nassert solution(\"5 3 1\") == \"1\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13 3 1\") == 3\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('13 3 1') == '3'\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"13 3 1\\n\") == \"3\"\nassert solution(\"10 9 3\\n\") == \"3\"\nassert solution(\"1 1 1\\n\") == \"1\"\nassert solution(\"1 10 1\\n\") == \"1\"\nassert solution(\"1 10 10\\n\") == \"1\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 2\\n\") == \"3\"\nassert solution(\"6 3 3\\n\") == \"2\"\nassert solution(\"7 3 2\\n\") == \"3\"\nassert solution(\"8 3 2\\n\") == \"4\"\nassert solution(\"10 5 3\\n\") == \"3\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13 3 1') == '3'\n\"\"\""
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5\") == 2\n\"\"\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == \"2\"\nprint(\"Success!\")\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5\") == 2\n\"\"\""
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\n1 3\n1 3\n4 2\n0 4\n5 5\n\"\"\") == \"2\"\n\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4') == 2\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5') == '2'\n\"\"\"\nimport sys"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5\\n') == '2'\n\n\"\"\""
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == \"2\"\n\"\"\"\n\nfrom collections import defaultdict\nimport sys\n\ninputs = sys.stdin.readlines()\n\npoints = defaultdict(list)\nfor i in range(len(inputs)):\n    if i % 2 == 0:\n        points[int(inputs[i].split(\" \")[0])].append((int(inputs[i].split(\" \")[1]), int(inputs[i].split(\" \")[2])))\n\nprint(points)\n\ns = set()\nfor i in points.values():\n    s = s.union(set(i))\n\nprint(s)\n\nres = 0\nfor i in points.values():\n    for j in i:\n        if j[0] < j[1]:\n            res += 1\n\nprint(res)"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4\\n0 3') == '7'\n\"\"\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"2 4\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4') == '7'\n\"\"\"\n\nN, T = map(int, input().split(' '))\nts = list(map(int, input().split(' ')))"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\n-----Solution-----\n\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u043a\u043b\u044e\u0447 - \u0447\u0438\u0441\u043b\u043e \u043e\u0442 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 - \u0447\u0438\u0441\u043b\u043e \u043e\u0442 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f, \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441\u0447\u0435\u0442\u0447\u0438\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043e\u0442\u043c\u0435\u0447\u0430\u0435\u043c \u043a\u0430\u043a \u0438\u043d\u0434\u0435\u043a\u0441 \u043a\u043b\u044e\u0447\u0430.\n\u0418\u0442\u0435\u0440\u0438\u0440\u0443\u0435\u043c\u0441\u044f \u043f\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 N \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f.\n\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u0430 \u0441\u0442\u0430\u0432\u0438\u043c \u043d\u0430 \u0432\u0442\u043e\u0440\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u0441\u043f\u0438\u0441\u043a\u0430,\n\u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u043f\u0438\u0441\u043a\u0430.\n\u0414\u0430\u043b\u0435\u0435 \u043f\u043e\u0434\u0443\u043c\u0430\u0435\u043c, \u043a\u0430\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043c\u044b \u0437\u0430\u043d\u0435\u0441\u0435\u043c \u0432 \u0441\u0447\u0435\u0442\u0447\u0438\u043a.\n\u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 abs \u043c\u044b \u043e\u0442\u0440\u0435\u0437\u0430\u0435\u043c \u0432\u0442\u043e\u0440\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 \u043f\u0435\u0440\u0432\u043e\u0433\u043e,\n\u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0434\u0435\u043b\u0430\u0435\u043c \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435 \u0438 \u043f\u0440\u0438\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.\n\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u0443 \u0432\u0440\u0435\u043c\u044f, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 t_i.\n\u0422\u0430\u043a \u0436\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u0441\u0447\u0435\u0442\u0447\u0438\u043a \u043e\u0442 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.\n\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438."
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 3\\n0 2\") == '4'\n\"\"\"\nfrom dataclasses import dataclass\n\n@dataclass\nclass Interval:\n    start: int\n    end: int"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n2 4\n0 3\n\n\"\"\") == '7'\n\n-----"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4\\n0 3') == '7'\nassert solution('2 2\\n0 0') == '0'\n\nsolution(*input().strip().split('\\n'))\n\"\"\"\n\nN, T = input().strip().split('\\n')\nT = int(T)"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 3\\n') == '7'\nassert solution('2 4\\n') == '7'\nassert solution('2 1\\n') == '2'\nassert solution('2 1\\n2 1\\n') == '4'\nassert solution('1 1\\n') == '1'\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\""
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1''') == '1'\n\nassert solution('''10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n''') == '0'\n\nassert solution('''8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1''') == '1'\n\nassert solution('''10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n''') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n1\\n2\\n3\\n?2\\nL4\\n?1\\nL5\\n?1\\n\") == \"1\\n1\\n2\"\nassert solution(\"10\\n100\\nR100000\\nR123\\nL101\\n?123\\nL10\\nR115\\n?100\\nR110\\n?115\\n\") == \"0\\n2\\n1\""
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"\n\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\\n2\\n1\"\n\"\"\"\nimport sys\nfrom bisect import bisect"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n\") == '1\\n1\\n2'\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n\") == '0\\n2\\n1'\n\n\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(expected)\n\n\"\"\"\n\n\"\"\"\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1\n\n\"\"\"\n\nimport sys\nimport functools\n\nclass Solution:\n    def solution(self, input: str) -> None:\n        input = sys.stdin.read()\n        n = int(input)\n        \n        print(n)\n        \n        for i in range(n):\n            cmd, n = input().split()\n            n = int(n)\n            \n            if cmd == \"L\":\n                print(n-1)\n            elif cmd == \"R\":\n                print(n+1)\n            else:\n                print(min(n+1, 2*n+2))\n        \n        #print(i)\n            \n    "
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n1\\n2\\n3\\n?2\\nL4\\n?1\\nL5\\n?1\\n\") == '1\\n1\\n2'\nassert solution(\"10\\n100\\nR100000\\nR123\\nL101\\n?123\\nL10\\nR115\\n?100\\nR110\\n?115\\n\") == '0\\n2\\n1'\nassert solution(\"10\\n100\\nR100000\\nR123\\nL101\\n?123\\nL10\\nR115\\n?100\\nR110\\n?115\\n\") == '0\\n2\\n1'\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1''') == '1\\n1\\n2'\nassert solution('''10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n''') == '0\\n2\\n1'\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n\") == '1\\n1\\n2'\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n\") == '0\\n2\\n1'\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n1\\n2\\n3\\n?2\\nL4\\n?1\\nL5\\n?1\\n\") == \"1\\n1\\n2\"\n\nassert solution(\"10\\n100\\n100000\\n123\\nL101\\n?123\\nL10\\nR115\\n?100\\nR110\\n?115\\n\") == \"0\\n2\\n1\"\n\n\"\"\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\\n\") == \"0\\n4\\n6\\n6\\n-1\\n6\\n72\"\n\"\"\""
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n10\\n16\\n26\\n36\\n46\\n') == '0\\n2\\n3\\n4\\n5\\n4\\n'\nassert solution('1\\n9\\n5\\n5\\n10\\n') == '0\\n1\\n0\\n1\\n1\\n1'\nassert solution('2\\n24\\n16\\n32\\n12\\n48\\n') == '1\\n1\\n2\\n2\\n2\\n2\\n'\nassert solution('3\\n50\\n20\\n40\\n5\\n100\\n') == '3\\n2\\n3\\n1\\n0\\n1'\n\n\"\"\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"30\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == \"6\\n4\\n6\\n6\\n-1\\n6\\n72\"\n\"\"\"\n\nq = int(input())\n\nfor i in range(q):\n    n = int(input())\n    i = 1\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        elif n % 3 == 0:\n            n = n // 3\n        elif n % 5 == 0:\n            n = n // 5\n        else:\n            n = -1\n        i += 1\n    print(i - 1)\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000') == '0\\n4\\n6\\n6\\n-1\\n6\\n72'\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == '0\\n4\\n6\\n6\\n-1\\n6\\n6720'\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2\\n3\\n5\") == \"2\"\nassert solution(\"7\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == \"6\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n2 1\\n2 3') == '2\\n1\\n1'\nassert solution('5 2\\n2 1\\n2 3') == '-1\\n1\\n1'\nassert solution('5 4\\n2 1\\n2 3') == '-1\\n1\\n1'\nassert solution('5 5\\n2 1\\n2 3') == '-1\\n1\\n1'"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n5\\n1\\n1\\n3\\n5\\n6\\n6\\n1\\n3\\n5\") == \"1\\n2\\n3\\n4\\n1\\n1\\n1\\n1\\n1\\n1\"\nassert solution(\"4\\n4\\n4\\n4\\n1\\n1\\n1\\n1\\n1\") == \"-1\\n-1\\n-1\\n-1\\n1\\n1\\n1\\n1\\n1\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\"\nassert solution(\"7\\n5\\n1\\n1\\n3\\n5\\n6\\n6\\n1\\n3\\n5\") == \"1\\n2\\n3\\n4\\n1\\n1\\n1\\n1\\n1\\n1\"\nassert solution(\"3\\n3\\n3\\n3\\n1\\n1\\n1\\n1\\n1\") == \"-1\\n-1\\n-1\\n-1\\n1\\n1\\n1\\n1\\n1\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == \"0\\n4\\n6\\n6\\n-1\\n6\\n72\\n\", \"Wrong solution\"\nprint(\"Success\")\n\n\"\"\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000') == '4'\nassert solution('2\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000') == '-1'\nassert solution('2\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000') == '-1'\nassert solution('2\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000') == '-1'\nassert solution('2\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000') == '-1'\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1 3\") == \"YES\"\nassert solution(\"4\\n1 1 2 1\") == \"NO\"\nassert solution(\"4\\n11 11\") == \"YES\"\nassert solution(\"1\\n100\") == \"YES\"\nassert solution(\"2\\n10 100\") == \"YES\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\") == \"NO\"\nassert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"1\\n11 11\\n1\\n100\") == \"YES\"\n\nprint(solution(input()))"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\n''') == 'YES\\nNO\\nYES\\n'\n\nassert solution('''\n4\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\n''') == 'YES\\nNO\\nYES\\n'\n\nassert solution('''\n4\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\n''') == 'YES\\nNO\\nYES\\n'\n\nassert solution('''\n3\n2\n2 2\n2\n1\n1 1\n2\n1\n1\n''') == 'YES\\nNO\\nYES\\n'\n\nassert solution('''\n3\n2\n2 2\n2\n1\n1 1\n1\n1\n''') == 'YES\\nNO\\nYES\\n'"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_cases[0]) == \"YES\"\nassert solution(test_cases[1]) == \"NO\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_cases[0]) == \"NO\"\nassert solution(test_cases[1]) == \"YES\"\nassert solution(test_cases[2]) == \"YES\"\nassert solution(test_cases[3]) == \"YES\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"\n\n\"\"\"\n\nimport sys\nimport os\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"NO\"\nassert solution(\"5\\n1 1 3 1\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"2\\n100\\n0\\n100\") == \"NO\"\nassert solution(\"3\\n11\\n1\\n100\") == \"YES\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1 3') == 'YES'\nassert solution('4\\n1 1 2 1') == 'NO'\nassert solution('1\\n11 11') == 'YES'\nassert solution('2\\n100 100') == 'YES'\nassert solution('2\\n100 100') == 'YES'\n\"\"\"\nimport unittest\nimport sys\n\n\nclass Test_Tetris(unittest.TestCase):\n    def test_solution_1(self):\n        "
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n\"\"\"\n\nimport sys\n\nt = int(sys.stdin.readline())\n\nfor i in range(t):\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n\n    if all(x <= 0 for x in a):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 1 3\\n3\\n1 1 2 1\") == \"YES\"\nassert solution(\"2\\n1 1 3\\n4\\n1 1 2 1\") == \"NO\"\nassert solution(\"2\\n11 11\\n1\\n100\") == \"YES\"\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solution(self, stdin: List[str]) -> str:\n        pass\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\", \"bacabaa\") == 4\nassert solution(\"zcabd\", \"dbacz\") == 0\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abacaba') == '4'\nassert solution('zcabd') == '0'\nassert solution('bacabaa') == '4'"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacaba\", \"bacabaa\") == 4\nassert solution(\"zcabd\", \"dbacz\") == 0\nassert solution(\"aaabb\", \"bbbaa\") == 2\nassert solution(\"abacaba\", \"bacabaa\") == 4\nassert solution(\"aab\", \"baa\") == 1\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a=\"abacaba\", b=\"bacabaa\") == 4\nassert solution(a=\"zcabd\", b=\"dbacz\") == 0\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\nassert solution('abacaba') == 'bacabaa'\nassert solution('zcabd') == 'dbacz'\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abacaba') == '4'\nassert solution('zcabd') == '0'\nassert solution('dbacz') == '0'\n\"\"\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List\n\n\nclass Solution:\n    def __init__(self, stdin: List[str]):\n        self.n = int(stdin[0])\n        self.a = stdin[1]\n        self.b = stdin[2]\n        self.ans = float(\"inf\")\n        self.a_counter = Counter(self.a)\n        self.b_counter = Counter(self.b)\n        self.a_len = len(self.a_counter)\n        self.b_len = len(self.b_counter)\n\n    def run(self) -> str:\n        self.b_counter = Counter(self.b)\n        self.a_counter[self.b[0]] -= 1\n        self.b_counter[self.a[0]] -= 1\n        if self.a_counter[self.b[0]] >= 0:\n            self.a_counter[self.b[0]] -= 1\n        if self.b_counter[self.a[0]] >= 0:\n            self.b_counter[self.a[0]] -= 1\n        if self.b_counter[self.b[0]] >= 0:\n            self.a_counter[self.b[0]] -= 1\n        if self.a_counter[self.b[0]] >= 0:\n            self.b_counter[self.a[0]] -= 1\n        if self.a_counter[self.b[0]] >= 0:\n            self.a_counter[self.b[0]] -= 1\n        self.a_counter[self.a[0]] += 1\n        self.b_counter[self.b[0]] += 1\n        self.a_counter[self.b[0]] += 1\n        self.b_counter[self.a[0]] += 1\n\n        self.a_counter[self.a[0]] += 1\n        self.b_counter[self.b[0]] += 1\n\n        if self.a_counter[self.a[0]] >= 0 and self.b_counter[self.b[0]] >= 0:\n            self.ans = min(self.ans, 2 * self.a_len)\n        if self.a_counter[self.a[0]] >= 0 and self.b_counter[self.b[0]] < 0:\n            self.ans = min(self.ans, self.a_len)\n        if self.a_counter[self.a[0]] < 0 and self.b_counter[self.b[0]] >= 0:\n            self.ans = min(self.ans, self.b_len)\n        if self.a_counter[self.a[0]] < 0 and self.b_counter[self.b[0]] < 0:\n            self.ans = min(self.ans, abs(self.a_counter[self.b[0]]) + abs(self.b_counter[self.a[0]]))\n        return str(self.ans)\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abacaba', 'bacabaa') == 4\nassert solution('zcabd', 'dbacz') == 0\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('zcabd') == '0'\nassert solution('dbacz') == '0'\nassert solution('abcde') == '5'\nassert solution('abcefgh') == '8'\nassert solution('abcdefgh') == '8'\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abacaba') == 4\nassert solution('bacabaa') == 0\nassert solution('zcabd') == 0\nassert solution('dbacz') == 4\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == '8 -17 2999999997 0 1'\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\nprint(solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\"))\n\n\"\"\"\n\nimport sys\nfrom typing import List\n\nT = int(sys.stdin.readline())\nfor t in range(T):\n    a, b, k = map(int, sys.stdin.readline().split())\n    s = 0\n    for i in range(k):\n        s += a-b\n    print(s)\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 2\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\") == \"0 -1 -1\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 1 10\\n7 2 9\\n3 2 1\") == \"7\\n28\"\n\"\"\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n198\\n-17\\n2999999997\\n0\\n1\") == '8\\n198\\n-17\\n2999999997\\n0\\n1'\nassert solution(\"5\\n2\\n3\\n100 1 4\\n1\\n10 5\") == '8\\n198\\n-17\\n2999999997\\n0\\n1'\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7\\n7 7') == '0\\n0'\nassert solution('2\\n2 2') == '1\\n0'\nassert solution('1\\n1 1') == '-1\\n0'\n\"\"\"\n\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \\\n    \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\n\n\"\"\""
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999''') == '8 198 -17 2999999997 0 1'\n\n\"\"\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000') == '1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\\n\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089\"\nprint(\"Test pass.\")\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5\\n12345') == '3'\nassert solution('12\\n312') == '10'\nassert solution('17\\n495970') == '0'\nassert solution('8\\n214512') == '5'\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1\\n2\\n3\") == \"3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1\") == \"1\"\nassert solution(\"5\\n1\") == \"1\"\nassert solution(\"5\\n2\") == \"3\"\nassert solution(\"4\\n2\") == \"3\"\nassert solution(\"5\\n3\") == \"7\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n6') == '9'\nassert solution('1\\n1') == '1'\nassert solution('1\\n2') == '3'\nassert solution('1\\n6') == '9'\nassert solution('1\\n13') == '13'\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n\"\"\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2\\n1\\n2\\n3\\n2\\n4') == '6'\nassert solution('4\\n1\\n2\\n2\\n1\\n2\\n3\\n2\\n4') == '7'\n\"\"\"\nimport math"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1\") == \"2\"\nassert solution(\"4\\n2\") == \"3\"\nassert solution(\"5\\n6\") == \"7\"\nassert solution(\"5\\n1\") == \"2\"\nassert solution(\"5\\n2\") == \"3\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1') == '1'\nassert solution('4\\n2') == '1'\nassert solution('4\\n6') == '3'\nassert solution('4\\n13') == '9'\nassert solution('4\\n14') == '9'\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10') == '7077177177999999999'\nassert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10') == '7077177177999999999'\nassert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10') == '7077177177999999999'\nassert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10') == '7077177177999999999'\nassert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10') == '7077177177999999999'\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70\\n77\\n177177\\n999999999\\n55\\n10\""
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10') == '707717717799999999999'\nassert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10') == '707717717799999999999'\nassert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10') == '707717717799999999999'\nassert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10') == '707717717799999999999'\nassert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10') == '707717717799999999999'\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 8 5 3\") == \"70\"\nassert solution(\"12 8 8 7 2\") == \"77\"\nassert solution(\"12343 43 4543 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 10 8 5 3\") == 70\nassert solution(\"12 8 8 7 2\") == 77\nassert solution(\"12343 43 4543 39 123212\") == 177177\nassert solution(\"1000000000 1000000000 1 1 1\") == 999999999999999999\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == 999999999999999999\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70 77 177177 999999999955 10\"\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70 77 177177 999999999955 10\"\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70 77 177177 999999999955 10\"\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70 77 177177 999999999955 10\"\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70 77 177177 999999999955 10\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"707717727999\"\n\n\"\"\""
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == '70\\n77\\n177177\\n999999999\\n55\\n10'"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 10 8 5 3\") == \"70\"\nassert solution(\"12 8 8 7 2\") == \"77\"\nassert solution(\"12343 43 4543 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10''') == '70'\n\nassert solution('''10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10''') == '77'\n\nassert solution('''10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10''') == '177177'\n\nassert solution('''10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10''') == '999999999000000000'\n\nassert solution('''10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10''') == '999999999'"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('123') == '321'\nassert solution('456') == '654'\n\"\"\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n10 10\") == \"1\"\nassert solution(\"2 4\\n7 4\") == \"2\"\nassert solution(\"9 3\\n\") == \"2\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----\n2\n2 3\n2 3\n\n2\n1 2\n1 2\n\n1\n1 2\n1 2\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"7 4\") == \"2\"\nassert solution(\"9 3\") == \"1\""
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"7 4\") == \"2\"\nassert solution(\"9 3\") == \"1\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n10 10') == '1'\nassert solution('2 4\\n7 4') == '2'\nassert solution('2 4\\n1 1') == '0'\nassert solution('2 4\\n10 10') == '2'\nassert solution('2 4\\n5 5') == '1'"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n10 10\") == \"1\"\nassert solution(\"2 4\\n7 4\") == \"0\"\nassert solution(\"9 3\\n\") == \"2\"\nassert solution(\"2 4\\n7 4\") == \"2\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n10 10\") == \"1\"\nassert solution(\"2 4\\n7 4\") == \"2\"\nassert solution(\"9 3\\n2 4\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\\n\") == \"1\\n0\\n2\\n2\\n1\"\nassert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\\n\") == \"1\\n0\\n2\\n2\\n1\"\n\"\"\"\n\nimport sys\n\nT = int(input())\n\nfor i in range(T):\n    a, b = [int(x) for x in input().split()]\n    ans = 0\n    ans += (a % 2)\n    if a < b:\n        ans += abs(b - a) // 2\n    else:\n        ans += abs(a - b) // 2\n\n    print(ans)\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n2 3\n10 10\n2 4\n7 4\n9 3\n''') == '''1\n0\n2\n2\n1\n'''\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n1\n2\n3\n4\n5\n''') == '1'\nassert solution('''\n6\n9\n8\n7\n10\n11\n''') == '1'\nassert solution('''\n4\n9\n8\n7\n10\n11\n''') == '2'\nassert solution('''\n13\n8\n9\n10\n5\n12\n''') == '2'\nassert solution('''\n9\n5\n8\n7\n10\n11\n''') == '0'\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\n\"\"\"\n\nfrom typing import List, Dict, Tuple, Set\n\nTESTS = [\n    {\n        \"stdin\": \"1\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\",\n        \"expected\": \"37\",\n    },\n    {\n        \"stdin\": \"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\",\n        \"expected\": \"37\",\n    },\n    {\n        \"stdin\": \"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\",\n        \"expected\": \"37\",\n    },\n]\n\n\nclass Node:\n    def __init__(self, val: int, children: List[\"Node\"]) -> None:\n        self.val = val\n        self.children = children\n\n\nclass Tree:\n    def __init__(self, root: Node) -> None:\n        self.root = root\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\n\"\"\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\nprint(\"Test PASSED\")\n\n\"\"\"\n\nfrom sys import stdin, stdout\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\nprint('PASSED')\n\n\n\n-----\n\nWrite a program that accepts a sequence of lines as input and prints the lines as output after making all characters in the sentence capitalized.\n\nSuppose the following input is supplied to the program:\n\nHello world\nPractice makes perfect\nThen, the output should be:\n\nHELLO WORLD\nPRACTICE MAKES PERFECT\n\n\n-----\n\nWrite a program that takes as input a string and returns a list of its longest lines (longer than 4 characters). The order of the list items should be the same as in the input.\n\nInput:\n\ntext = \"Hello\\nWorld\\nPractice\\nmakes\\nperfect\"\n\nOutput:\n\n['Hello', 'World', 'Practice','makes', 'perfect']\n\ntext = \"Python\\nExercises\\nSave\\nTime\"\n\nOutput:\n\n['Exercises', 'Save', 'Time']\n\n\n-----\n\nGiven a string, return a new string where \"not \" has been added to the front. However, if the string already begins with \"not\", return the string unchanged.\n\nnot_string('candy') \u2192 'not candy'\nnot_string('x') \u2192 'not x'\nnot_string('not bad') \u2192 'not bad'\n\n\n-----\n\nGiven an integer, return True if the number is within 10 of either 100 or 200.\n\nNote: abs(num) computes the absolute value of a number.\n\nnear_hundred(93) \u2192 True\nnear_hundred(90) \u2192 True\nnear_hundred(89) \u2192 False\n\n\n-----\n\nGiven a string, return a string where for every char in the original, there are two chars.\n\ndouble_char('The') \u2192 'TThhee'\ndouble_char('AAbb') \u2192 'AAAAbbbb'\ndouble_char('Hi-There') \u2192 'HHii--TThheerree'\n\n\n-----\n\nGiven a string, we'll say that the front is the first 3 chars of the string. If the string length is less than 3, the front is whatever is there. Return a new string which is 3 copies of the front.\n\nfront3('Java') \u2192 'JavJavJav'\nfront3('Chocolate') \u2192 'ChoChoCho'\nfront3('abc') \u2192 'abcabcabc'\n\n\n-----\n\nGiven an integer n, return True if it is within 10 of 100 or 200. Note: abs(num) computes the absolute value of a number.\n\nnear_hundred(93) \u2192 True\nnear_hundred(90) \u2192 True\nnear_hundred(89) \u2192 False\n\n\n-----\n\nGiven a string, return a version without the first and last char, so \"Hello\" yields \"ell\". The string length will be at least 2.\n\n\n-----\n\nGiven a string, return True if it ends in \"py\", and False otherwise.\n\nends('ilovepy') \u2192 True\nends('welovepy') \u2192 True\nends('welovepyforreal') \u2192 False\nends('pyiscool') \u2192 False\n\n\n-----\n\nGiven three integers, a b c, return True if one of b or c is \"close\" (differing from a by at most 1), while the other is \"far\", differing from both other values by 2 or more. Return False otherwise.\n\nclose_far(1, 2, 10) \u2192 True\nclose_far(1, 2, 3) \u2192 False\nclose_far(4, 1, 3) \u2192 True\n\n\n-----\n\nGiven a string, return a string where for every char in the original, there are two chars.\n\ndouble_char('The') \u2192 'TThhee'\ndouble_char('AAbb') \u2192 'AAAAbbbb'\ndouble_char('Hi-There') \u2192 'HHii--TThheerree'\n\n\n-----\n\nGiven three integers between 1 and 11, if their sum is less than or equal to 21, return their sum. If their sum exceeds 21 and there's an eleven, reduce the total sum by 10. Finally, if the sum (even after adjustment) exceeds 21, return 'BUST'\n\n\n-----\n\nGiven three integers between 1 and 11, if their sum is less than or equal to 21, return their sum. If their sum exceeds 21 and there's an eleven, reduce the total sum by 10. Finally, if the sum (even after adjustment) exceeds 21, return 'BUST'"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\nassert solution('4\\n22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\nassert solution('4\\n22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\nassert solution('4\\n22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\nassert solution('4\\n22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('22\\n9999\\n1\\n777\\n') == '13\\n90\\n1\\n66'\nprint('The local tests are done. Try Solution online.')\n\"\"\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"22\") == \"13\"\nassert solution(\"9999\") == \"90\"\nassert solution(\"1\") == \"1\"\nassert solution(\"777\") == \"66\"\n\"\"\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\n\"\"\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == '13\\n90\\n1\\n66'\n\"\"\""
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n777\n22\n11\n111\n''') == '13\\n90\\n1\\n66'\n\"\"\""
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\") == \"NO\"\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\"\n\"\"\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5\n2 3 1 3 2\n6\n1 1 2 2 2 1\"\"\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"\"\"3\n1\n5\n5\n1 1 1 1 1\"\"\") == \"NO\"\nassert solution(\"\"\"4\n6\n2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\"\"\") == \"YES\\n2 2\\n4 1\"\n\n\"\"\""
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\") == \"NO\"\nassert solution(\"4\\n6\\n2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\"\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\") == \"YES\\n2 2\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\") == \"NO\"\nassert solution(\"4\\n6\\n2 2 2 2 2\\n5\\n2 2 2 2 2\") == \"YES\\n2 2\"\n\n\n\"\"\"\nfrom typing import List\nimport itertools\nfrom collections import defaultdict\nimport sys"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 2 2\\n5\\n2 2 2 2 2') == 'YES\\n2 6\\n1 2'\n\"\"\"\n\nfrom collections import defaultdict\nimport math\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\n\nassert solution(\"4\\n6\\n2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\"\n\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\") == \"NO\"\nassert solution(\"3\\n2\\n2\\n2\\n2\") == \"NO\"\nassert solution(\"2\\n2\\n1\\n1\") == \"NO\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'NO'\nassert solution('0\\n0') == 'YES\\n1 1\\n2 2\\n3 1\\n3 1\\n4 1\\n5 0'\nassert solution('2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1') == 'YES\\n2 6\\n1 2\\n3 1'"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"2\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\"\"\") == 'YES\\n2 6\\n1 2'\nassert solution(\"\"\"3\n1\n5\n5\n1 1 1 1 1\n2\n2 3\n\"\"\") == 'NO'\nassert solution(\"\"\"4\n6\n2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\"\"\") == 'YES\\n2 2\\n4 1'\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3\\n2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\\n5\\n2 2 2 2 2\") == 'YES\\n2 6\\n1 2'\nassert solution(\"4\\n2 3\\n2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\\n5\\n2 2 2 2 2\") == 'NO'\nassert solution(\"4\\n2 3\\n2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\\n5\\n2 2 2 2 2\") == 'YES\\n2 6\\n1 2'\n\n\"\"\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 2 2 2 2\\n5\\n2 2 2 2 2\") == 'YES\\n2 2'\nassert solution(\"3\\n2 2 2\\n5\\n2 2 2 2 2\") == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2 3\\n1') == '5'\nassert solution('3 -1 0 2\\n3') == '6'\nassert solution('2 -3 -1 5 -4\\n2') == '13'\n\"\"\"\n\nfrom collections import deque\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A, K):\n        \"\"\"\n        :type A: List[int]\n        :type K: int\n        :rtype: int\n        \"\"\"\n        if not A:\n            return 0\n        neg_A = []\n        for i in range(len(A)):\n            if A[i] < 0:\n                neg_A.append(-A[i])\n        neg_A.sort()\n        index = 0\n        while K > 0 and index < len(neg_A):\n            if neg_A[index] == 0:\n                break\n            if K % 2 == 0:\n                A[index] = neg_A[index]\n            else:\n                A[index] = -A[index]\n            K -= 1\n            index += 1\n        if K > 0:\n            A.sort()\n            while K > 0:\n                A[-1] = -A[-1]\n                K -= 1\n        return sum(A)\n\n\nclass Solution2:\n    def largestSumAfterKNegations(self, A, K):\n        \"\"\"\n        :type A: List[int]\n        :type K: int\n        :rtype: int\n        \"\"\"\n        A.sort()\n        queue = deque()\n        for a in A:\n            if a <= 0:\n                queue.append(a)\n        if K == 0:\n            return sum(A)\n        if K % 2 == 0:\n            for _ in range(K):\n                if not queue:\n                    return sum(A)\n                queue.append(queue.popleft())\n        else:\n            for _ in range(K):\n                if not queue:\n                    return sum(A)\n                queue.appendleft(queue.pop())\n        A.sort()\n        return sum(A)\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 3', '1') == '5'\nassert solution('3 -1 0 2', '3') == '6'\nassert solution('2 -3 -1 5 -4', '2') == '13'\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 3') == 5\nassert solution('3 -1 0 2') == 6\nassert solution('2 -3 -1 5 -4') == 13\n\n\n\n\u00a0\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        # A.sort()\n        # for i in range(K):\n        #     if A[i] < 0:\n        #         A[i] = -A[i]\n        #     else:\n        #         break\n        # return sum(A)\n        # \u4f7f\u7528a_i = -a_i\n        # \u6240\u4ee5\u6700\u5927\u7684\u503c\u53ea\u80fd\u6709\u6700\u5927\u7684\u7d22\u5f15\u52a0K\u7684\u90a3\u4e2a\u6570\n        # \u6211\u4eec\u5148\u6392\u5e8f\uff0c\u7136\u540e\u6bcf\u6b21\u9047\u5230\u6700\u5927\u7684\u5c31\u628a\u4e00\u4e2a\u5143\u7d20\u53d8\u6210\u8d1f\u6570\uff0c\n        # \u7136\u540e\u7d2f\u52a0sum\n        A.sort()\n        for i in range(K):\n            if A[i] < 0:\n                A[i] = -A[i]\n            else:\n                break\n        return sum(A)\n        \n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 1 4') == 9\nassert solution('2 -3 -1 4') == 6\nassert solution('3 -1 0 2') == 6\nassert solution('-3 -1 0 2') == 3\nassert solution('3 -1 0') == 0\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 3\") == 5\nassert solution(\"3 -1 0 2\") == 6\nassert solution(\"2 -3 -1 5 -4\") == 13\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"[4,2,3]\\n1\") == 5\nassert solution(\"[3,-1,0,2]\\n3\") == 6\nassert solution(\"[2,-3,-1,5,-4]\\n2\") == 13\n\"\"\"\n\n\nfrom collections import deque\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A, K: int) -> int:\n        heapq.heapify(A)\n        while K:\n            heapq.heappop(A)\n            heapq.heappush(A, -heapq.heappop(A))\n            K -= 1\n\n        return sum(A)\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4,2,3\", 1) == 5\nassert solution(\"3,-1,0,2\", 3) == 6\nassert solution(\"2,-3,-1,5,-4\", 2) == 13\nassert solution(\"2,3,-1,5,-4\", 2) == 6\nassert solution(\"4,2,3\", 1) == 5\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"[4,2,3] K = 1\") == \"5\"\nassert solution(\"[3,-1,0,2] K = 3\") == \"6\"\nassert solution(\"[2,-3,-1,5,-4] K = 2\") == \"13\""
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 3') == 5\nassert solution('3 -1 0 2') == 6\nassert solution('2 -3 -1 5 -4') == 13\nassert solution('1 5 -4') == 7\nassert solution('1 -1 5') == 1\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 3\\n1\\n') == '5\\n'\nassert solution('3 -1 0 2\\n3\\n') == '6\\n'\nassert solution('2 -3 -1 5 -4\\n2\\n') == '13\\n'\n\n\n'''\n\n\n\n\nfrom typing import List\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        count = 0\n        for num in A:\n            if num < 0:\n                if K > 0:\n                    count += 1\n                    K -= 1\n                else:\n                    if num >= -A[0]:\n                        K += 1\n                        count += 1\n                    else:\n                        return -sum(A)\n            else:\n                break\n        return sum(A) - count * 2 * min(A)\n\n\n\nassert Solution().largestSumAfterKNegations([4,2,3], 1) == 5\nassert Solution().largestSumAfterKNegations([3,-1,0,2], 3) == 6\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('[0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]') == 'true'\nassert solution('[0, 2, 1, -6, 6, 7, 9, 1, 2, 0, 1]') == 'false'\nassert solution('[3,3,6,5,-2,2,5,1,-9,4]') == 'true'"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\n\n\"\"\"\nclass Solution:\n    def canThreePartsEqualSum(self, A):\n        s = sum(A)\n        if s%3!= 0:\n            return False\n        res, s = 0, 0\n        for a in A:\n            s += a\n            if s == res:\n                res += 1\n        return res > 2\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(True) or str(False)\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(A) == result\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('[0,2,1,-6,6,-7,9,1,2,0,1]') == 'true'\nassert solution('[0,2,1,-6,6,7,9,-1,2,0,1]') == 'false'\nassert solution('[3,3,6,5,-2,2,5,1,-9,4]') == 'true'\n\nHint #1  \nThe sum of a subarray (A[i], A[i+1],..., A[j]) equals the sum of A[j] and all numbers prior.\n\nHint #2  \nIf you can't partition the array into three non-empty parts with equal sums, then the answer is false.\n\nHint #3  \nLet's see if we can find three non-empty parts with equal sums.\n\nWe can split the array into A[0] and A[A.length - 1].\nWhat about A[1] and A[A.length - 2].\nAnd finally, A[2] and A[A.length - 3].\nDoes this lead to a condition for the answer to be true?\n\nIf you can find three non-empty parts with equal sums, then the answer is true.\n\nIf you can't find three non-empty parts with equal sums, then the answer is false.\n\nExample 1:\n\nInput: A = [0,2,1,-6,6,-7,9,1,2,0,1]\nOutput: true\nExplanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1\n\nExample 2:\n\nInput: A = [0,2,1,-6,6,7,9,-1,2,0,1]\nOutput: false\n\nExample 3:\n\nInput: A = [3,3,6,5,-2,2,5,1,-9,4]\nOutput: true\nExplanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 2 1 -6 6 -7 9 1 2 0 1') == True\nassert solution('0 2 1 -6 6 7 9 -1 2 0 1') == False\nassert solution('3 3 6 5 -2 2 5 1 -9 4') == True\n\n'''\n\nfrom typing import List\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == \"true\"\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == \"false\"\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == \"true\""
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0,2,1,-6,6,-7,9,1,2,0,1\") == True\nassert solution(\"0,2,1,-6,6,7,9,-1,2,0,1\") == False\nassert solution(\"3,3,6,5,-2,2,5,1,-9,4\") == True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\nassert solution(\"[1,2,3,4]\") == True\nassert solution(\"[1,2,3,4,5]\") == False\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 2 1 -6 6 -7 9 1 2 0 1\") == \"true\"\nassert solution(\"0 2 1 -6 6 7 9 -1 2 0 1\") == \"false\"\nassert solution(\"3 3 6 5 -2 2 5 1 -9 4\") == \"true\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nabcd\\nefgh\\nijkl\\nmnop\") == \"abcd\\nijkl\\nmno\"\n\"\"\"\n\nimport math\nimport itertools\nimport copy"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\nbeat\\n: \\nvet\\n: \\nbeet\\n: \\nbed\\n: \\nbet\\n: \\nbeet\\n\") == \"beet and vet\"\n\n\"\"\""
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\nbeat\\n: \\nbeat\\nvet\\n: \\nbeet\\nbed\\n: \\nvet\\nbet\\n: \\nbet\") =='vet vet\\nbeet beat\\n'\n\"\"\""
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3c2d1\\n2c1d1\\n1d1c2\\n') == 'd1d1c2'\nassert solution('4\\n3c2d1\\n2c1d1\\n1d1c2\\n') == 'd1d1c2'\nassert solution('4\\n3c2d1\\n2c1d1\\n1d1c2\\n') == 'd1d1c2'\nassert solution('4\\n3c2d1\\n2c1d1\\n1d1c2\\n') == 'd1d1c2'\n\n\"\"\"\n\nN = int(stdin.readline())\nvotes = []\nfor i in range(N):\n    votes.append(stdin.readline())\n\nvote_count = {}\nfor vote in votes:\n    vote_count[vote] = vote_count.get(vote, 0) + 1\n\nmax_count = max(vote_count.values())\nmax_votes = [k for k,v in vote_count.items() if v == max_count]\nsorted_max_votes = sorted(max_votes)\n\nfor vote in sorted_max_votes:\n    print(vote)"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == 'beet\\nvet'\n\n\"\"\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nabc\\ndef\\nefg\\nxyz') == 'abc\\ndef\\nxyz'\n\nassert solution('5\\nxyz\\n123\\nabc\\nxyz\\n1234') == '123\\n1234\\nxyz'\n\nassert solution('6\\n123\\n1234\\n12345\\n123456\\n1234567') == '1234\\n12345\\n123456\\n1234567'\n\nassert solution('8\\nabcdefg\\nhijklmn\\noqrstu\\nvwxyz\\n1234567\\n7654321\\nabcdefgh') == 'abcdefg\\nhijklmn\\noqrstu\\nabcdefgh\\n1234567\\n7654321'\n\n-----Explanation-----\nWe have N voting papers, each of which has a string written on it. Since the votes are returned in lexicographical order, we need to sort the strings in the ballots list before printing them.\n\nBefore sorting the list, the votes are in the form of a list of string lists, where each string list is sorted in lexicographical order.\n\nTo sort a list of string lists, we can use the sorted() function:\n\nsorted(list_of_lists)\n\nWe then need to sort this list of lists, because the function sorted() returns a new list with the strings in lexicographical order.\n\nIf we want to sort the strings in lexicographical order, we can use the sorted() function, then sort each string in the list of strings:\n\nsorted(list_of_lists, key = str.lower)\n\nThe key argument is optional. It is a function or lambda that can be used to extract a comparison key from each list element.\n\nIf the key argument is not provided, the function will be None, and sorted() will sort the list using the natural order.\n\nsorted(list_of_lists, key = str.lower, reverse = True)\n\nThe order of the key argument is important. If the key argument is provided, then the list will be sorted in the order of the key argument, and the sorting will be descending.\n\nsorted(list_of_lists, key = str.lower, reverse = False)\n\nNow we have the votes sorted in lexicographical order. We can print the strings of the most votes in lexicographical order.\n\n-----Test Case-----\n1\nbeet\n\nWe have one vote and one string written on it. Since the votes are returned in lexicographical order, we print the string in lexicographical order.\n\n2\nabc\n\nWe have two votes and three strings written on them. Since the votes are returned in lexicographical order, we print the strings in lexicographical order.\n\n3\n1234\n\nWe have three votes and four strings written on them. Since the votes are returned in lexicographical order, we print the strings in lexicographical order.\n\n4\n123\n\nWe have one vote and two strings written on it. Since the votes are returned in lexicographical order, we print the strings in lexicographical order.\n\n5\nabc\n123\n\nWe have three votes and three strings written on them. Since the votes are returned in lexicographical order, we print the strings in lexicographical order.\n\n6\n123\n1234\n12345\n123456\n1234567\n\nWe have six votes and seven strings written on them. Since the votes are returned in lexicographical order, we print the strings in lexicographical order.\n\n7\nabcdefg\nhijklmn\noqrstu\nvwxyz\n1234567\n7654321\nabcdefgh\n\nWe have seven votes and nine strings written on them. Since the votes are returned in lexicographical order, we print the strings in lexicographical order.\n\n8\nabcdefg\nhijklmn\noqrstu\nvwxyz\n1234567\n7654321\nabcdefgh\n12345678\n76543210\nabcdefghi\n\nWe have eight votes and nine strings written on them. Since the votes are returned in lexicographical order, we print the strings in lexicographical order.\n\n\"\"\"\n\nimport numpy as np\nimport pandas as pd"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet\") == \"beet\\nvet\"\n\"\"\"\n\n\nimport unittest\nimport sys\nimport collections"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(sample_input) == \"beet\\nvet\"\n\"\"\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet') == 'beet\\nvet'\n\n-----Problem-----\nIn the previous challenge, you printed all the strings that are written on the most number of votes.\n\nIn this challenge, you should print the strings that are written on the most number of votes, in lexicographical order.\n\nYou will receive N, the number of strings, followed by strings.\n\nInput Format\nThe first line contains the integer N, the number of strings.\nThe next line contains the length of each string, S.\nThe next line contains a string S, consisting of lowercase English letters.\n\nOutput Format\nPrint all strings in question in lexicographical order.\n\nSample Input 0\n7\na\nb\nc\nd\ne\nf\ng\n\nSample Output 0\na\nb\nc\nd\ne\nf\ng\n\nSample Input 1\n2\na\nb\n\nSample Output 1\na\nb\n\nSample Input 2\n7\na\nb\nc\nd\ne\nf\ng\n\nSample Output 2\na\nb\nc\nd\ne\nf\ng\n'''\n\n'''\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\nbeat\\n: beat\\nvet\\n: vet\\nbeet\\n: beet\\nbed\\n: bed\\nbet\\n: bet\\n\") == \"beet and vet\"\nassert solution(\"5\\nbeet\\n: beet\\nvet\\n: vet\\n\") == \"beet and vet\"\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2\n4 8\n''') == '8'\nassert solution('''3\n3 4 7\n''') == '9'\nassert solution('''4\n1 1 1 1\n''') == '0'\nassert solution('''1\n0\n''') == '0'\n\nprint('PASSED')\n\n\"\"\"\nRun Time: 0.01s\n\"\"\""
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8\\n') == '8'\n\n\"\"\"\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n4 8\") == \"8\"\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 3\") == \"1\"\n\"\"\"\n\nimport ast\nimport sys\n\nN = int(input())\na = ast.literal_eval(input())\n\ntotal_cost = 0\nfor i in range(N):\n    min_cost = sys.maxsize\n    for j in range(N):\n        if i!= j:\n            min_cost = min(min_cost, (a[i] - a[j]) ** 2)\n    total_cost += min_cost\nprint(total_cost)\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n4 8\") == \"8\"\nassert solution(\"3\\n10 15 16\") == \"15\"\nassert solution(\"6\\n2 4 1 2 4 1\") == \"12\"\nassert solution(\"6\\n3 3 3 3 3 3\") == \"0\"\nassert solution(\"5\\n8 2 4 3 1\") == \"12\"\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8\") == \"8\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n4 8') == '8'\n\"\"\"\nimport sys"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n4 8\\n\") == \"8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n4 8\") == \"8\"\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\nb = list(map(int, sys.stdin.readline().split()))\n\nprint(sum((i-j)**2 for i, j in zip(a, b)))\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8\") == \"8\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1234 150 100') == '84'\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"150\\n100\\n\") == \"84\"\nassert solution(\"1234\\n150\\n100\\n\") == \"84\"\nassert solution(\"200\\n300\\n\") == \"100\"\nassert solution(\"800\\n300\\n\") == \"500\"\n\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\""
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1234) == '1084'\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\n\"\"\"\n\nX = int(input())\nA = int(input())\nB = int(input())\n\nA = A * 10000\nB = B * 10000\n\nleft = X - A - B\n\nprint(left // 10000)\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\nprint(solution(\"1234 150 100\"))\n\"\"\"\n\nx = int(input())\na = int(input())\nb = int(input())\n\nprint(x - (a + b))\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == output()\n\"\"\""
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\"\nimport collections"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"8\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2') == 8\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"8\"\nassert solution(\"4 2\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n\") == \"8\"\nassert solution(\"3 2\\n\") == \"6\"\nassert solution(\"2 3\\n\") == \"6\"\n\"\"\"\n\nimport sys\n\na = [int(x) for x in sys.stdin.readline().split()]\n\nn = a[0]\nm = a[1]"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2') == '8'\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n') == '8'\n\"\"\"\nfrom collections import defaultdict\nfrom functools import lru_cache\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 1\n\"\"\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n\"\"\"\n\nN, M = [int(x) for x in stdin.split()]\n\nbus_from, bus_to = [], []\nfor i in range(M):\n    a, b = [int(x) for x in stdin.split()]\n    bus_from.append(a)\n    bus_to.append(b)"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n1 2\\n2 3\\n') == 'POSSIBLE'\nassert solution('2 2\\n1 2\\n') == 'IMPOSSIBLE'\nassert solution('3 4\\n1 2\\n2 3\\n') == 'IMPOSSIBLE'\nassert solution('3 2\\n1 2\\n2 3\\n1 3\\n') == 'POSSIBLE'\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == 'POSSIBLE'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n\n\"\"\""
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == 'POSSIBLE'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == 'POSSIBLE'\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('3 2\\n1 3\\n2 2') == 'IMPOSSIBLE'\nassert solution('3 2\\n1 2\\n2 3') == 'POSSIBLE'\n\n-------Test Input-----\n\n> py -3 solve_1.py\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n1 3\n2 3\n2 4\n1 2\n3 4\n\n5 3\n1 2\n2 3\n3 4\n4 5\n5 6\n3 5\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\\n\") == \"POSSIBLE\"\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\n\nservices = []\nfor _ in range(m):\n    a, b = [int(x) for x in input().split()]\n    services.append((a, b))\n\nservices = set(services)\n\nislands = set()\nfor i in range(1, n + 1):\n    islands.add(i)\n\npaths = set()\nfor i in islands:\n    for j in islands:\n        if i!= j:\n            paths.add((i, j))\n\nfor i in services:\n    paths.remove((i[0], i[1]))\n\nfor i in paths:\n    if i[0] == 1:\n        if i[1] == n:\n            print(\"POSSIBLE\")\n            break\nelse:\n    print(\"IMPOSSIBLE\")\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('atcoder') == 'acdr'\n\n\"\"\"\n\nfrom typing import Any"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('atcoder') == 'acdr'\nprint(solution('atcoder'))"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == output\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('atcoder') == 'acdr'\n\"\"\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\nprint(solution(\"atcoder\"))\nassert solution(\"abc\") == \"abc\"\nprint(solution(\"abc\"))\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\nprint(\"Tests passed.\")\n\n-----\natcoder\n\n-----\nacdr\n\n-----\n\"\"\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"rng gorilla apple\") == 'YES'\nassert solution(\"rng gorilla bpple\") == 'NO'\n\"\"\"\n\nimport sys\n\nA = list(map(str, sys.stdin.readline().split()))\nB = list(map(str, sys.stdin.readline().split()))\nC = list(map(str, sys.stdin.readline().split()))\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\nassert solution(\"rng gorilla apple\") == \"YES\"\nassert solution(\"rng gorilla apple\") == \"YES\"\nassert solution(\"rng gorilla apple\") == \"YES\"\nassert solution(\"rng gorilla apple\") == \"YES\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\nassert solution(\"rng capple apple\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\naa\nbb\ncc\n''') == 'YES'\nassert solution('''\na\nb\naa\n''') == 'NO'\n\n\"\"\"\nLet us assume that we can remove any character from a string.\n\nThe idea is to find out that whether there is a chain of strings from A to C.\n\nThe problem is easy when we consider A to be the starting point of the chain.\n\nIf A to C is not a chain, then A must be removed from the beginning.\n\nIf A is the initial character of the string, then we can't remove it.\n\nLet us denote the longest common substring of two strings by LCS.\n\nIf the longest common substring is not the initial character, then it must be in the middle of the string.\n\nIf the longest common substring is the initial character, then we can't remove it.\n\nLet us denote the longest common substring of two strings by LCS.\n\nIf the length of LCS is 0, then there is no common substring.\n\nIf the length of LCS is 1, then there is only one common substring.\n\nIf the length of LCS is > 1, then there are more than one common substring.\n\nThe problem then becomes checking whether there is a chain between A to C.\n\nIf the length of LCS is 1, then there is a common substring.\n\nIf the length of LCS is 2, then there are two common substring.\n\nIf the length of LCS is > 2, then there are more than two common substring.\n\nIf there is a chain between A to C, then there is a common substring.\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\n\"\"\"\n\nfrom typing import Dict"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3624\") == \"GREATER\"\nassert solution(\"2436\") == \"LESS\"\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\"\n\nfrom sys import stdin\n\nA = int(stdin.readline().strip())\nB = int(stdin.readline().strip())"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('36 24') == 'GREATER'\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('36 24') == 'GREATER'\n\n-----Explanation-----\nThe bigger number is 36 and it's greater than 24. So, the answer is GREATER.\n\"\"\"\n\nfrom math import *\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n36\n24\n''') == 'GREATER'\n\nassert solution('''\n1\n1\n''') == 'EQUAL'\n\nassert solution('''\n36\n24\n''') == 'LESS'\n\nassert solution('''\n1\n1\n''') == 'EQUAL'\n\nassert solution('''\n1\n2\n''') == 'LESS'"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"36 24\") == 'GREATER'\n\n\"\"\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\nassert solution(\"5 3\") == \"LESS\"\n\"\"\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('36 24') == 'GREATER'\n\"\"\"\n\nfrom typing import Dict, List, Set"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('36 24') == \"GREATER\"\n\"\"\"\n\nA, B = map(int, input().split())\n\nprint(\"GREATER\" if A > B else \"LESS\" if A < B else \"EQUAL\")\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"apple\\napple\\ngrape\\n2\\napple\\ngrape\") == \"2\"\nassert solution(\"apple\\napple\\ngrape\\n2\\napple\\ngrape\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\\n\") == '2'\n\"\"\"\n\nN, S, T = map(str, input().split())\nprint(N, S, T)"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"apple\\norange\\napple\\n1\\ngrape\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\\n\") == \"2\"\n\"\"\"\n\nimport sys\n\nN = int(input())\ns_list = [input() for _ in range(N)]\nM = int(input())\nt_list = [input() for _ in range(M)]\n\nb = set()\nfor i in range(N):\n    if s_list[i] not in b:\n        b.add(s_list[i])\n\nr = set()\nfor j in range(M):\n    if t_list[j] not in r:\n        r.add(t_list[j])\n\nresult = 0\nfor i in b:\n    for j in r:\n        if i == j:\n            result += 1\n\nprint(result)"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"apple\\norange\\napple\") == \"2\"\n\"\"\"\n\nfrom typing import List\nimport collections\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\napple\\norange\\napple\\n1\\ngrape') == '2'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"3\\n\"\n    \"apple\\n\"\n    \"orange\\n\"\n    \":\\n\"\n    \"apple\\n\"\n    \"1\\n\"\n    \"grape\\n\"\n) == \"2\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 abc 3\") == \"1\"\nassert solution(\"1 x 1\") == \"0\"\nassert solution(\"1 abc x 1\") == \"0\"\nassert solution(\"1 x 2 abc x 1\") == \"2\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\":3\") == \"0\"\nassert solution(\"3:1\") == \"1\"\nassert solution(\"3:2\") == \"1\"\nassert solution(\"3:3\") == \"2\"\nassert solution(\"3:4\") == \"1\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\nassert solution('G') == 'C'\nassert solution('T') == 'A'\n\"\"\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\"\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\"\n\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\n\"\"\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n3 2 2 4 1\\n1 2 2 2 1') == '14'\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"5\\n\"\n    \"3 2 2 4 1\"\n    ) == \"14\"\nassert solution(\n    \"5\\n\"\n    \"1 2 2 4 1\"\n    ) == \"14\"\nassert solution(\n    \"6\\n\"\n    \"1 2 2 4 1 5\"\n    ) == \"21\"\nassert solution(\n    \"7\\n\"\n    \"1 2 2 4 1 5 6\"\n    ) == \"21\"\nassert solution(\n    \"5\\n\"\n    \"1 2 2 4 1\"\n    ) == \"14\"\n\n-----\n\"\"\""
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def max_collected_candies(self, n: int, a: list):\n        best_candies = 0\n        current_candies = 0\n        for row in a:\n            current_candies += row[0]\n            best_candies = max(best_candies, current_candies)\n            current_candies = max(current_candies, sum(row))\n            best_candies = max(best_candies, current_candies)\n        return best_candies\n\n\nclass TestSolution(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution('3\\n2 2 2 4 1\\n1 2 2 2 1'), 14)\n\n    def test_2(self):\n        self.assertEqual(solution('5\\n3 2 2 4 1\\n1 2 2 2 1'), 14)\n\n    def test_3(self):\n        self.assertEqual(solution('5\\n3 1 1 2 2\\n2 2 4 2 4'), 16)\n\n    def test_4(self):\n        self.assertEqual(solution('5\\n3 2 1 2 1\\n2 4 4 1 1'), 17)\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n3 2 2 4 1') == '14'\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 3 4') == '6'\nassert solution('3\\n2 1 1') == '2'\n\"\"\""
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2 2 4 1') == '14'\nprint('Test pass.')\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n3 2 2 4 1\n1 2 2 2 1''') == 14\n\n\"\"\"\nimport math\nimport re\n\nstdin = '''5\n3 2 2 4 1\n1 2 2 2 1'''\n\nnum_of_rows = int(stdin.split()[0])\n\npattern = re.compile('(\\d+)')\n\nstdin = stdin.split('\\n')\n\nm = [[int(y) for y in pattern.findall(x)] for x in stdin[1:]]\n\nprint(m)\n\nmx_candy = 0\n\nfor row in m:\n    for i in range(len(row)):\n        row[i] += row[i - 1] if i > 0 else 0\n    mx_candy = max(mx_candy, row[-1])\n\nprint(mx_candy)"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(example1) == '14'\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2 2 4 1') == '14'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n3 2 2 4 1') == '14'\n\"\"\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n2 2 2\\n') == '1'\n\"\"\"\n\nfrom math import ceil, log\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 2\") == \"1\"\nassert solution(\"3 3 3\") == \"4\"\nassert solution(\"5 5 5\") == \"9\"\nassert solution(\"10 10 10\") == \"13\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n2 2 2') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 1') == ''\nassert solution('3 1 3') == '2'\n\"\"\"\n\nimport unittest\nfrom typing import List\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n1 1 1') == '1'\nassert solution('3 3\\n1 1 1') == '3'\nassert solution('4 1\\n1 1 1') == '1'\nassert solution('5 5\\n1 1 1') == '0'\n\"\"\"\n\nimport sys\n\ninputs = sys.stdin.read().splitlines()\nn = int(inputs[0])\ncandies = inputs[1].split()\nmax_candies = int(candies[0])\nmax_candy_set = set()\nmax_candy_set.add(max_candies)\nans = 0\nfor i in range(n):\n    candies[i] = int(candies[i])\n    if candies[i] in max_candy_set:\n        ans += 1\n    else:\n        max_candy_set.add(candies[i])\nprint(ans)\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n2 2 2\") == '1'\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\"\n\nimport collections\nimport sys\n\nlines = [line.strip() for line in sys.stdin.readlines()]\nN = int(lines[0])\nA = [int(x) for x in lines[1].split()]\nX = int(lines[2])\n\nQ = collections.deque()\nfor i in range(N):\n    if A[i] > X:\n        Q.append(A[i])\n\nans = 0\nwhile Q:\n    num = Q.popleft()\n    if num < X:\n        Q.append(num * 2)\n    else:\n        ans += 1\n        if num % 2 == 0:\n            Q.append(num // 2)\n        else:\n            Q.append(num // 2 + 1)\n\nsys.stdout.write(str(ans))\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n2 2 2') == '1'\n\"\"\""
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 10\\n5 1 10\\n4 1 10\\n3 1 10\\n2 1 10\\n\") == \"4\"\n\n-----\n3 2 2\n5 1 10\n4 1 10\n3 1 10\n2 1 10\n\n------\n4\n\n5 1 10\n4 1 10\n3 1 10\n2 1 10\n\n------\n4\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\"\n\nn, *candies = map(int, stdin.strip().split())\ncnt = 0\n\nwhile len(candies) > 1:\n    if candies[0] + candies[1] > candies[2]:\n        candies[0] += candies[1]\n        candies[2] = candies[0]\n        candies.pop(1)\n        cnt += 1\n    else:\n        candies[1] += candies[2]\n        candies.pop(2)\n        cnt += 1\n\nprint(cnt)\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == expected_result\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"3 1 1\\n2 1 2\\n1 0 1\") == \"No\"\nassert solution(\"5 1 2\\n1 0 1\\n3 1 4\\n3 1 4\") == \"Yes\"\nassert solution(\"5 1 2\\n1 1 2\\n3 1 4\\n3 1 4\") == \"Yes\"\nassert solution(\"5 1 2\\n1 3 2\\n3 1 4\\n3 1 4\") == \"Yes\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"1 0 1\\n2 1 2\\n3 1 2\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"No\""
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\nassert solution(\"3 1 2\\n3 1 2\\n3 1 2\") == \"No\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\nassert solution('ARC\\nABC') == 'ABC'\nassert solution('ABC\\nARC') == 'ARC'\nassert solution('ARC\\nABC\\nARC') == 'ABC'\n\"\"\"\nimport unittest\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ARC\") == \"ARC\"\n\n---Problem---\nThe AtCoder Inc. holds a contest every Saturday.\nThere are two types of contests called ABC and ARC, and just one of them is held at a time.\nThe company holds these two types of contests alternately: an ARC follows an ABC and vice versa.\nGiven a string S representing the type of the contest held last week, print the string representing the type of the contest held this week.\n\n-----Constraints-----\n - S is ABC or ARC.\n\n-----Input-----\nABC\n\n-----Output-----\nARC\n\nThey held an ABC last week, so they will hold an ARC this week.\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC\") == \"ARC\"\n\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABC\") == \"ARC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC\") == \"ARC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ARC') == 'ARC'\nassert solution('ABC') == 'ARC'\n\n---\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ARC\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n\n\"\"\""
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 8 2''') == '''3'''\nassert solution('''1 2 4''') == '''0'''\nassert solution('''2 4 6''') == '''1'''\nassert solution('''2 2 1''') == '''0'''\nassert solution('''2 2 2''') == '''0'''\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 8 2') == '3'\n\"\"\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 8 2\\n') == '3'"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('4 8 2\\n') == '3'\nassert solution('1 100 100\\n') == '0'\nassert solution('100 200 100\\n') == '5'\nassert solution('100 200 10\\n') == '1'\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 8 2') == '3'\n\"\"\""
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8 2\") == \"3\"\nprint(\"Test pass.\")\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8 2\\n\") == \"3\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(int(input()))\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('25') == 'Christmas'\n\nimport sys\nassert solution(sys.stdin.read()) == 'Christmas'\n\"\"\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n\"\"\"\n\nfrom datetime import date\n\nn = int(input())\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('25') == 'Christmas'\n\nprint(solution('25'))\n\"\"\"\n\nstdin = input()"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"25\") == \"Christmas\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n'''"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\n\"\"\"\n\nD = int(input())"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(5) == 'Christmas'\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('22') == 'Christmas Eve Eve Eve Eve'\nassert solution('24') == 'Christmas Eve Eve Eve'\nassert solution('25') == 'Christmas'\n\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"25\") == \"Christmas\"\n\n\"\"\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\") == \"4\"\n\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7') == '4'\nassert solution('8') == '4'\nassert solution('6') == '2'\n\nprint('Success')\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7') == '4'\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n7\n    \"\"\"\n) == \"4\"\nprint(\"PASSED\")\n\n\"\"\"\n7\n    \"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/5b0d25d2f8b3ed0013b3f0d6\n\nGiven a string of digits, you should replace any digit below 5 with '0' and any digit 5 and above with '1'. Return the resulting string.\n\nreplaceDigits(\"a12345\") == \"a0235\"\nreplaceDigits(\"900179\") == \"901179\"\nreplaceDigits(\"56789\") == \"56789\"\n\n\"\"\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\") == \"4\"\nassert solution(\"6\") == \"4\"\nassert solution(\"8\") == \"4\"\nassert solution(\"4\") == \"0\"\nassert solution(\"9\") == \"0\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1\") == \"1\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"2\\n2\") == \"2\"\nassert solution(\"1\\n2\") == \"2\"\nassert solution(\"2\\n3\") == \"2\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7') == '4'\nassert solution('6') == '3'\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\") == 4\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\") == \"4\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7') == '4'\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1) == \"Yes\"\nassert solution(3) == \"Yes\"\nassert solution(4) == \"Yes\"\nassert solution(5) == \"No\"\nassert solution(6) == \"No\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\n---"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 7 9 3') == 'Yes'\nassert solution('4 7 8 3') == 'No'\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n\"\"\"\nfrom collections import deque\nfrom itertools import permutations\nfrom typing import List\n\n\nclass Solution:\n    def canCommunicate(self, x: int, y: int, z: int) -> bool:\n        graph = {k: set() for k in range(1, x + 1)}\n        for i in range(1, x + 1):\n            for j in range(i + 1, x + 1):\n                distance = self.get_distance(i, j)\n                if distance <= y:\n                    graph[i].add(j)\n                    graph[j].add(i)\n        stack = deque()\n        visited = set()\n        stack.append(1)\n        while stack:\n            curr = stack.pop()\n            if curr in visited:\n                continue\n            visited.add(curr)\n            for neighbour in graph[curr]:\n                stack.append(neighbour)\n        return z in visited\n\n    def get_distance(self, x, y):\n        return abs(x - y)\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yes\"\n\n---"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n\n\"\"\"\n\na, b, c, d = [int(i) for i in stdin.readlines()[0].split(' ')]"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\nprint(solution(stdin), end=\"\")\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\n-----Explanation-----\n\"atcoder beginner contest\" is split into three words. The acronyms for the three words are: \"AT\", \"C\" and \"O\". Their initial letters are A, T and C. Finally, these three words are concatenated to obtain ABC.\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\n\"\"\"\n\ns_1, s_2, s_3 = map(str, input().split())\nprint(''.join([s_1[0].upper() + s_2[0].upper() + s_3[0].upper()]))"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == \"Yes\"\n\n----\n\nimport re"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"100 200 300\") == \"No\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('50 100 120') == 'Yes'\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n\"\"\"\n\nimport unittest\nfrom collections import namedtuple\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n\"\"\"\n\n\"\"\"\n@dataclass\nclass Math():\n    @staticmethod\n    def gcd(a: int, b: int) -> int:\n        pass\n\n    @staticmethod\n    def lcm(a: int, b: int) -> int:\n        pass\n\n@dataclass\nclass Takahashi():\n    total: int\n    coin: int\n\n    def can_buy(self, target: int) -> bool:\n        pass"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"50 100 120\") == 'Yes'\nassert solution(\"50 0 120\") == 'No'\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"50 100 100\") == \"No\"\nassert solution(\"10 10 10\") == \"No\"\nassert solution(\"1 1 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nprint(solution(\"50 100 120\"))\n\n-----Explanation-----\nIn this case, the problem is easy to solve. Takahashi has 50 yen and 100 yen. He wants a 120-yen toy.\nTakahashi has 150 yen, so he can buy the 120-yen toy.\nThe program prints Yes.\n\"\"\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('50 100 120') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\n\"\"\"\n\nN, A = map(int, input().split())\ncards = list(map(int, input().split()))"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 8\\n7 9 8 9') == 5\n\"\"\"\n\nn, a = map(int, stdin.readline().split())\nls = [int(x) for x in stdin.readline().split()]\n\nls.sort()\ncount = 0\nfor i in range(n):\n    l, r = 0, n - 1\n    while l < r:\n        if ls[l] + ls[r] == a:\n            count += 1\n            break\n        elif ls[l] + ls[r] > a:\n            r -= 1\n        else:\n            l += 1\n\nprint(count)\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n\"\"\"\nimport sys\nimport collections\nimport itertools\nimport math\nfrom typing import List\nimport unittest\n\nsys.setrecursionlimit(100000)\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        assert solution('4 8\\n7 9 8 9') == '5'\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\n\"\"\""
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n\"\"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\n\n-----\n3. Longest Substring Without Repeating Characters\nGiven a string, find the length of the longest substring without repeating characters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nabacb\n\n-----Output-----\nPrint the length of the longest substring in a line.\n\n-----Sample Input-----\nabbbbbbbbba\n\n-----Sample Output-----\n7\n\n-----\n4. Longest Palindromic Substring\nGiven a string, find the length of the longest substring which is palindrome.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nabacbcbb\n\n-----Output-----\n7\n\n-----\n5. Longest Substring with At Most K Distinct Characters\nFind the length of the longest substring T of a given string (consists of lowercase letters only) such that every character in T appears no less than k times.\n\n-----Input-----\nInput is given from Standard Input in the following format:\naaabb\n2\n\n-----Output-----\n3\n\n-----\n6. Design Circular Queue\nDesign a class for a circular queue, which supports the following operations:\n - Enqueue an integer into the circular queue.\n - Dequeue an integer from the circular queue.\n - Get the front item from the queue.\n - Get the size of the queue.\n - isEmpty()\n - isFull()\n\n-----Input-----\nInput is given from Standard Input in the following format:\nenqueue(1)\nenqueue(2)\ndequeue()\ndequeue()\nisEmpty()\nisFull()\nfront()\nsize()\n\n-----Output-----\n1\n2\n1\n2\n0\n0\n1\n2\n\n-----\n7. Reverse Integer\nGiven an integer, reverse the digits of it. If the number is an overflow, return 0.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n123\n\n-----Output-----\n321\n\n-----\n8. Replace All Digits with the Greatest in Their Circular Queue\nGiven an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 0 0 1 0 1 0 1 1 1 1 1 1 1\n\n-----Output-----\n1 1 1 1 1 1 1 1 0 0 0 1 1 1\n\n-----\n9. Replace Elements with Greatest Element on Right Side\nGiven an integer array nums, move all of the even integers at the beginning of the array followed by all of the odd integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n10\n1 2 3 4 5 6 7 8 9 10\n\n-----Output-----\n2 4 6 8 10 1 3 5 7 9 10\n\n-----\n10. Reverse Integer\nGiven a 32-bit signed integer, reverse digits of an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1234\n\n-----Output-----\n4321\n\n-----\n11. Rotation of Array\nReverse array in-place (5 Marks)\nGiven an array of integers, reverse the array in place.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n\n-----Output-----\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 1\n\n-----\n12. Remove All Adjacent Duplicates In String (5 Marks)\nGiven a string, remove all adjacent duplicates from the string.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nabaca\n\n-----Output-----\naca\n\n-----\n13. Longest Common Prefix\nWrite a function to find the longest common prefix string amongst an array of strings.\n\n-----Input-----\nInput is given from Standard Input in the following format:\ndog cat wolf\n\n-----Output-----\ndog\n\n-----\n14. Longest Common Prefix\nWrite a function to find the longest common prefix string amongst an array of strings.\n\n-----Input-----\nInput is given from Standard Input in the following format:\ndog cat wolf\n\n-----Output-----\ndog\n\n-----\n15. Longest Common Subsequence\nGiven two strings, find the longest common subsequence (LCS).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nabcd\nabed\n\n-----Output-----\nab\n\n-----\n16. Valid Anagram\nGiven two strings, check whether two given strings are anagram of each other or not.\n\n-----Input-----\nInput is given from Standard Input in the following format:\ncat dog\ndog cat\n\n-----Output-----\ntrue\n\n-----\n17. Number of Distinct Islands\nGiven an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.\n\nAn island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically.\nYou may assume all four edges of the grid are all surrounded by water.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n11110\n11010\n11000\n00000\n\n-----Output-----\n1\n\n-----\n18. Rotate Matrix\nRotate the given matrix in-place 90 degrees (clockwise).\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\n\n-----Output-----\n5 6 7 8 1\n2 3 4 9 10\n11 12 13 14 15\n16 15 14 13 9\n\n-----\n19. Add Two Numbers\nYou are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n9 -> 9 -> 3 -> 4 -> 5\n5 -> 6 -> 4\n\n-----Output-----\nOutput: 7 -> 0 -> 8\n\n-----\n20. Merge Two Sorted Lists\nMerge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 -> 2 -> 4\n3 -> 4 -> 5\n\n-----Output-----\n1 -> 2 -> 3 -> 4 -> 4 -> 5\n\n-----\n21. Merge K Sorted Lists\nYou are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\nMerge all the linked-lists into one sorted linked-list and return it.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n5 -> 8 -> 20\n4 -> 11 -> 15\n3 -> 6 -> 7\n2 -> 5 -> 10\n1 -> 2 -> 4\n\n-----Output-----\n1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 10 -> 11 -> 15 -> 20\n\n-----\n22. Generate Parentheses\nGiven n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n\n-----Input"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2 3\") == \"4 2 1 3\"\nassert solution(\"7 7 7 7\") == \"7 7 7 7\"\nassert solution(\"7 5 6 4\") == \"7 5 6 4\"\n\"\"\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 2 3') == '4 2 1 3'\nassert solution('1 2 3 4') == '1 2 3 4'\nassert solution('6 4 5 8 9 7 3 2 1') == '6 4 9 2 5 8 7 3 1'\nassert solution('3 1 1') == '3 1 1'\nassert solution('5 4 2 1 3') == '5 4 1 3 2'\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('1 2 3 4') == '4 2 1 3'\nassert solution('1 2 3 4 5') == '5 4 2 1 3'\n\"\"\"\n\nfrom typing import List\nfrom collections import deque\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\nassert solution(\"2\\n1 2\") == \"1 2\"\nassert solution(\"2\\n3 4\") == \"3 4\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\nassert solution(\"5\\n4 5 6 7 8 9\") == \"9 8 7 6 5 4\"\n\n-----\n\u201c \u201d\u201d\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n4\n1 2 3 4\n''') == '4 2 1 3'\n\n\"\"\"\nTODO:\n1. Get rid of the usage of the first \"n\".\n2. Think about the edge case \"empty input\"\n3. Think about the way to solve the problem with a different approach.\n\"\"\""
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\") == '4 2 1 3'\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 3 4') == '4 2 1 3'\n\"\"\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 3\\n4 5 6\\n\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n3 2 5 6') == 'Yes'\nassert solution('10 10\\n4 5 6') == 'No'\nassert solution('10 10\\n4 2 5 6') == 'Yes'\nassert solution('10 10\\n4 1 2 5 6') == 'No'\nassert solution('10 10\\n4 1 5 2 6') == 'No'\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 3\\n4 5 6\\n\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(s) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 3\\n4 5 6\\n') == 'Yes'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\"\n\nH, N = list(map(int, input().split()))\narr = list(map(int, input().split()))\n\nmax_s = arr[0]\nmin_s = arr[0]\n\nfor s in arr[1:]:\n    max_s = max(max_s, s)\n    min_s = min(min_s, s)\n\nprint(\"Yes\" if max_s - min_s <= N else \"No\")\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 3\\n4 5 6\\n') == 'Yes'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 3\\n4 5 6\") == 'Yes'\nassert solution(\"20 20\\n1 2 3 4 5 6 7 8 9 10\") == 'No'\nassert solution(\"5 3\\n4 1 2 1\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 3\\n4 5 6\\n\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"abaababaab\"\n) == 6\n\"\"\""
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abaababaab\") == 6\n\"\"\"\n\ns = input()\n\nmax_len = 0\n\ncur_len = 0\n\nfor i in range(len(s)):\n    if s[i] == 'a':\n        cur_len += 1\n    else:\n        cur_len = 0\n    max_len = max(max_len, cur_len)\n\nprint(max_len)"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abaababaab') == 6\n\n-------"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abaababaab') == 6\nassert solution('aaaababaab') == 7\nassert solution('aaaaa') == 5\nassert solution('a') == 1\nassert solution('ababab') == 4\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abaababaab') == 6\nassert solution('abaababaa') == 5\nassert solution('abaababa') == 6\nassert solution('abaabab') == 6\nassert solution('abaaba') == 6\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abaababaab\") == 6\n\"\"\""
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == \"6\"\n\"\"\""
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abaababaab') == 6\n\"\"\""
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abaababaab') == 6\n\"\"\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abaababaab\") == 6\n\"\"\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"bca\") == \"No\"\nassert solution(\"abc\") == \"Yes\"\nassert solution(\"abd\") == \"No\"\nassert solution(\"abb\") == \"Yes\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abc\") == \"Yes\"\nassert solution(\"bac\") == \"Yes\"\nassert solution(\"acb\") == \"Yes\"\nassert solution(\"cab\") == \"No\"\nassert solution(\"bca\") == \"No\"\n\"\"\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abc\") == \"Yes\"\nassert solution(\"bac\") == \"Yes\"\nassert solution(\"bca\") == \"No\"\n\"\"\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abc\") == \"Yes\"\nassert solution(\"bac\") == \"Yes\"\nassert solution(\"bca\") == \"No\"\nassert solution(\"cab\") == \"Yes\"\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abc') == 'cba'\nassert solution('bac') == 'cba'\n\n\"\"\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('abc') == 'No'\n\nimport unittest\nimport random\nimport string\n\nclass TestCase(unittest.TestCase):\n    def test(self):\n        self.assertEqual(solution('bac'), 'Yes')\n        self.assertEqual(solution('abc'), 'No')\n\nunittest.main()"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('abc') == 'No'\n\"\"\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a\") == \"Yes\"\nassert solution(\"b\") == \"Yes\"\nassert solution(\"c\") == \"Yes\"\nassert solution(\"ab\") == \"Yes\"\nassert solution(\"ac\") == \"Yes\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution([\"5\",\"3\",\"1\",\"4\",\"2\"]) == \"3\"\nassert solution([\"1\",\"4\",\"1\",\"1\",\"6\"]) == \"4\"\nassert solution([\"3\",\"2\",\"1\",\"0\",\"1\"]) == \"1\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input) == output\n\n\"\"\"\n\nfrom tools import timing\nimport random\n\n\n@timing\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n1') == ''\nassert solution('1\\n1\\n') == ''\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == '646'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nres = 0\n\nfor i in range(n):\n    for j in range(n):\n        res += a[i] * b[j]\n        res %= 998244353\n\nprint(res)\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 8 7 2 4\\n9 7 2 9 3') == '646'\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 8 7 2 4\\n9 7 2 9 3') == '646'\nassert solution('1\\n1000000\\n1000000') == '757402647'\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\n\"\"\"\n\nimport sys\nimport math\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\nb = list(map(int, sys.stdin.readline().split()))\n\na.sort()\nb.sort()\n\nsum = 0\nfor i in range(n):\n    sum += a[i]*b[i]\nprint(sum%998244353)"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\n\n\"\"\"\n\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\n\na_i_b_i = 0\nfor i in range(0, len(a)):\n    a_i_b_i += a[i] * b[i]\n\nprint(a_i_b_i % 1000000)\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\nprint(solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\"))\n\n\"\"\"\n\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution([\"1\", \"2\"]) == \"4\"\nassert solution([\"1\", \"8\", \"7\", \"2\", \"4\"]) == \"646\"\nassert solution([\"1\", \"8\", \"7\", \"2\", \"4\", \"5\", \"6\", \"9\", \"10\", \"3\"]) == \"628\"\n\nimport unittest\n\nclass Tests020(unittest.TestCase):\n    def test010(self):\n        self.assertEqual(solution([\"1\", \"2\"]), \"4\")\n\n    def test020(self):\n        self.assertEqual(solution([\"1\", \"8\", \"7\", \"2\", \"4\"]), \"646\")\n\n    def test030(self):\n        self."
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == '7'\nassert solution(\"7 3 3\\n2 5 7 4 6\\n5 4\\n3 1\\n9 7\") == '17'"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == '7'\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == '17'\n\"\"\""
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\\n') == '7'\nassert solution('9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n') == '17'\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n7 4 5\n2 5 4 2 6 3 1\n2 1\n6 5\n2 1\n3 1\n    \"\"\") == '17'\n\n\"\"\""
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == 17\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == 17\n\"\"\"\n\nimport sys\nimport os\n\nimport numpy as np\nfrom scipy.optimize import minimize\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 1') == '1'\nassert solution('1 1 1') == '1'\nassert solution('2 3') == '2'\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\") == '17'\nassert solution(\"5 1 4\\n2 5 7 4 6\") == '17'\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == \"17\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 6 2\\n1 2\\n1 4\\n1 2\\n1 4\\n3 1\\n3 1\\n5 5\\n1 4') == '17'\nassert solution('5 9 4\\n1 5\\n1 3\\n2 3\\n2 5\\n2 3\\n2 5\\n4 5\\n1 4\\n1 2\\n2 2\\n2 4\\n2 2\\n2 4\\n4 4') == '17'\nassert solution('5 9 7\\n1 4\\n1 3\\n2 5\\n2 3\\n2 5\\n2 3\\n2 5\\n4 5\\n1 4\\n1 3\\n2 5\\n2 3\\n2 5\\n2 3\\n2 5\\n4 5') == '17'\nassert solution('3 2 2\\n2 5\\n2 3\\n2 5\\n1 5\\n1 3\\n1 5\\n1 2\\n1 4\\n3 1\\n3 1\\n4 4') == '7'\nassert solution('3 2 2\\n2 3\\n2 3\\n1 3\\n1 2\\n1 4\\n3 1\\n3 1\\n4 4') == '7'\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\") == \"2\"\n\"\"\""
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\") == '2'\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\") == '0'\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\") == '1'\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n') == '2'\nassert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n') == '0'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n') == '1'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n') == '2'\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n2 3') == '2'\nassert solution('1 2\\n1 3') == '0'\nassert solution('1 2\\n2 3\\n2 4\\n3 4') == '2'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == '0'\nassert solution('1') == '1'\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '0'\nassert solution('1 2 4') == '2'\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == \"2\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n') == '2'\nassert solution('7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n') == '0'\nassert solution('7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n') == '1'\n\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"0\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"1\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"0\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"1\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n4 5') == '2'\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5\\n1 2') == '2'\n\"\"\"\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"3 7\\n\"\n    \"4 12\\n\"\n    \"2 1000000000\\n\"\n    \"7 97\\n\"\n    \"1000000000 1000000000\\n\"\n    \"2 1\"\n) == \"10\\n\"\nprint(\"The first test case is correct.\")\n\nassert solution(\n    \"3 7\\n\"\n    \"4 12\\n\"\n    \"2 1000000000\\n\"\n    \"7 97\\n\"\n    \"1000000000 1000000000\\n\"\n    \"2 1\"\n) == \"15\\n\"\nprint(\"The second test case is correct.\")\n\nassert solution(\n    \"3 7\\n\"\n    \"4 12\\n\"\n    \"2 1000000000\\n\"\n    \"7 97\\n\"\n    \"1000000000 1000000000\\n\"\n    \"2 1\"\n) == \"1999999999\\n\"\nprint(\"The third test case is correct.\")\n\nassert solution(\n    \"3 7\\n\"\n    \"4 12\\n\"\n    \"2 1000000000\\n\"\n    \"7 97\\n\"\n    \"1000000000 1000000000\\n\"\n    \"2 1\"\n) == \"113\\n\"\nprint(\"The fourth test case is correct.\")\n\nassert solution(\n    \"3 7\\n\"\n    \"4 12\\n\"\n    \"2 1000000000\\n\"\n    \"7 97\\n\"\n    \"1000000000 1000000000\\n\"\n    \"2 1\"\n) == \"1000000001\\n\"\nprint(\"The fifth test case is correct.\")"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 2''') == '3'\nassert solution('''5 3''') == '7'\nassert solution('''7 10''') == '9'\nassert solution('''7 1''') == '1'\nassert solution('''1 1''') == '1'\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n\"\"\"\nfrom math import ceil, floor"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 7') == '10'\nassert solution('4 12') == '15'\nassert solution('2 1000000000') == '1999999999'\nassert solution('7 97') == '113'\nassert solution('1000000000 1000000000') == '1000000001'\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7\") == \"10\"\nassert solution(\"4 12\") == \"15\"\nassert solution(\"2 1000000000\") == \"1999999999\"\nassert solution(\"7 97\") == \"113\"\nassert solution(\"1000000000 1000000000\") == \"1000000001\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 7\") == \"10\"\n\"\"\"\nfrom __future__ import annotations\nfrom collections import deque\nimport sys\nfrom typing import Generator, List, Tuple\n\nfrom icontract import require, ensure\n\n\nclass Node:\n    \"\"\"Represent a node in a linked list.\n\n    The list is the only attribute.\n\n    \"\"\"\n\n    def __init__(self, data: int) -> None:\n        self.data = data\n        self.next: Node | None = None\n\n\nclass LinkedList:\n    \"\"\"Represent a linked list.\n\n    The list is the only attribute.\n\n    \"\"\"\n\n    def __init__(self, head: Node) -> None:\n        self.head = head\n\n    def __repr__(self) -> str:\n        \"\"\"Represent the list as a string.\"\"\"\n        if self.head is None:\n            return \"Empty list\"\n\n        def f(node: Node) -> Generator[str, None, None]:\n            while node is not None:\n                yield f\"{node.data}\"\n                node = node.next\n\n        return \" -> \".join(f(self.head))\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 7\") == \"10\"\nassert solution(\"4 12\") == \"15\"\nassert solution(\"2 1000000000\") == \"1999999999\"\nassert solution(\"7 97\") == \"113\"\nassert solution(\"1000000000 1000000000\") == \"1000000001\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\\n') == '10\\n15\\n1999999999\\n113\\n1000000001\\n1\\n'\nprint(solution('3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\\n'))"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 12') == '7'\nassert solution('3 7') == '10'\nassert solution('2 1000000000') == '1999999999'\nassert solution('7 97') == '113'\nassert solution('1000000000 1000000000') == '1000000001'\n\n\"\"\"\n\n\"\"\"\n7.15.2020\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 7\") == \"10\"\nassert solution(\"4 12\") == \"15\"\nassert solution(\"2 1000000000\") == \"1999999999\"\nassert solution(\"7 97\") == \"113\"\nassert solution(\"1000000000 1000000000\") == \"1000000001\"\n\"\"\""
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2\\n') == '2\\n2 1'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3\\n') == '3\\n1 3 2'\nassert solution('2 5\\n1 3\\n') == '1'\nassert solution('2 3\\n1 3\\n') == '1'\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''7 2\n1 2 3 2 1 3 2\n''') == '2\n2 1'\n\nassert solution('''10 4\n2 3 3 1 1 2 1 2 3 3\n''') == '3\n1 3 2'\n\nassert solution('''5 2\n1 2 3 2 1\n''') == '1\n2 3 1'\n\nassert solution('''5 3\n1 2 3 2 1\n''') == '2\n1 3 2'\n\n\n'''\n\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430:\n\n\u041f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438\u0437 \u0441\u0435\u0442\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 \u043a\u0430\u043a\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0443\u0436\u0435 \u0432\u0438\u0434\u043d\u043e \u0432 \u043f\u0430\u043c\u044f\u0442\u0438 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u043d\u0443\u043b\u0435\u0432\u0443\u044e \u043f\u043e\u0437\u0438\u0446\u0438\u044e.\n\n\u041e\u0442\u043a\u0440\u044b\u0442\u044b\u0435 \u043a\u043e\u043d\u0432\u0435\u0440\u0441\u0438\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0442\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f.\n\n\u041a\u043e\u0433\u0434\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043e $n$ \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c \u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u0445 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435.\n\n\u041f\u043e\u0437\u0438\u0446\u0438\u044f \u0432 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0441\u0435\u0442\u0438 \u043d\u0435 \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f, \u0430 \u0432\u043e \u0432\u0441\u0435\u0445 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u0445 \u0441\u0440\u0430\u0437\u0443 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043e\u0434\u043d\u0443 \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0432\u043f\u0435\u0440\u0435\u0434. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0448\u043b\u043e \u0438\u0437 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0432 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u044d\u0442\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043d\u0435 \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f, \u0430 \u0432 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0431\u0440\u0430\u043d\u0430 \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0431\u044b\u043b\u043e \u0432\u044b\u0432\u0435\u0434\u0435\u043d\u043e \u0442\u043e \u0438\u0437 \u0434\u0432\u0443\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u043e\u0442 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u043f\u0435\u0440\u0432\u043e\u0435.\n\n\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 $n$ \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u043f\u0443\u0441\u0442\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430.\n\n\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442\u0441\u044f \u0442\u043e, \u0447\u0442\u043e \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0443\u0441\u0442\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043d\u0443\u043b\u0435\u0432\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438.\n\n\u041f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043d\u0438\u043a\u043e\u043c, \u0441\u043f\u0438\u0441\u043e\ufffd"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\nassert solution(\"5 5\\n2 2 1 2 1 2\") == \"1\\n2\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2') == '2\\n2 1'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3') == '3\\n1 3 2'\nassert solution('10 6\\n2 3 3 1 1 2 1 2 3 3') == '2\\n2 1'\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2 3 2 1\\n\") == \"2\\n2 1\\n\"\nassert solution(\"3 2\\n1 1 1\\n\") == \"1\\n1 1\\n\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2') == '2\\n2 1'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3') == '3\\n1 3 2'\nassert solution('11 1\\n2 2') == '1\\n2'\nassert solution('7 1\\n1 2 3 2 1 3 2') == '0\\n1 2 3'\nassert solution('10 3\\n3 2 3 2') == '1\\n3 2'\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\"\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open('input.txt').read()) == open('output.txt').read()\nprint(\"You are awesome!\")\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100''') == '263'"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n\") == \"263\"\n\n\"\"\"\n\nimport sys\nimport math\nfrom collections import defaultdict\nfrom typing import List\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\n\"\"\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test) == test_result\nprint(\"Cool!\")\n\n\"\"\"\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n\") == \"263\"\nprint(\"Passed.\")"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n\") == '263'\nprint('Passed')\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n\") == \"263\"\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n') == '263'\n\"\"\"\n\nimport sys\nimport itertools\n\nassert len(sys.argv) >= 2, \"No arguments given.\"\n\narg_count = len(sys.argv)\n\nturn_count = int(sys.argv[1])\n\nassert turn_count >= 1\n\nassert len(sys.argv) % 2 == 0\n\ncard_count = len(sys.argv) // 2\n\nturn_cards = {}\n\nturn_index = 0\n\nwhile turn_index < card_count:\n    turn_cards[turn_index] = []\n    for card in range(0, 2):\n        turn_cards[turn_index].append(sys.argv[turn_index + card + 1])\n    turn_index += 2\n\nfor card in turn_cards.keys():\n    assert turn_cards[card][0] >= 1\n    "
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\") == 3\nassert solution(\"dfcbbcfeeedbaea\") == 2\nassert solution(\"abcab\") == 2\nassert solution(\"aaa\") == 1\nassert solution(\"aaaa\") == 1\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abacaba') == '3'\n\"\"\""
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"6\"\n\n\"\"\""
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"6\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"5\"\n\"\"\"\n\ns, q = stdin.split(\"\\n\\n\")\nq = q.split(\"\\n\")\n\ns = s.split(\"\\n\")[1:]\ns = \"\".join(s)\n\nfor i in q[1:]:\n    i = i.split()\n    if int(i[0]) == 1:\n        print(len(set(s[int(i[1])-1: int(i[2])])))\n    else:\n        s = s[:int(i[1])-1] + i[3] + s[int(i[2])-1:]\n        print(len(set(s)))\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"2\"\n\"\"\"\n\ns = list(stdin)\nprint(len(set(s)))\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacaba\") == 3\nassert solution(\"dfcbbcfeeedbaea\") == 5\nassert solution(\"codeforces\") == \"cdfrces\"\n\"\"\"\nimport string"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == 'codeforce'\nassert solution(\"dfcbbcfeeedbaea\") == 'dbea'\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"6\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"6\"\n\"\"\"\n\nimport sys\n\ns = sys.stdin.readline().strip()\n\nn = int(sys.stdin.readline())\n\nfor i in range(n):\n    l, r = map(int, sys.stdin.readline().strip().split())\n    print(len(set(s[l - 1:r])))\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"154873296\") == \"154873396\"\nassert solution(\"386592714\") == \"336592714\"\nassert solution(\"729641835\") == \"729645835\"\nassert solution(\"863725149\") == \"863725145\"\nassert solution(\"975314628\") == \"979314628\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n\"\n        \"154873296\\n\"\n        \"386592714\\n\"\n        \"729641835\\n\"\n        \"863725149\\n\"\n        \"975314628\\n\"\n        \"412968357\\n\"\n        \"631457982\\n\"\n        \"598236471\\n\"\n        \"247189563\\n\") == '336592714\\n'\nassert solution(\"2\\n\"\n        \"386579275\\n\"\n        \"366927145\\n\"\n        \"729645835\\n\"\n        \"863725145\\n\"\n        \"976351828\\n\"\n        \"412968357\\n\"\n        \"631457982\\n\"\n        \"598236471\\n\"\n        \"247189563\\n\") == '86579276\\n'\nassert solution(\"3\\n\"\n        \"729645835\\n\"\n        \"863725145\\n\"\n        \"976351828\\n\"\n        \"412968357\\n\"\n        \"631457982\\n\"\n        \"598236471\\n\"\n        \"247189563\\n\"\n        \"386579275\\n\") == '963518287\\n'\nassert solution(\"4\\n\"\n        \"412968357\\n\"\n        \"631457982\\n\"\n        \"598236471\\n\"\n        \"247189563\\n\"\n        \"386579275\\n\"\n        \"366927145\\n\"\n        \"729645835\\n\"\n        \"976351828\\n\") == '963518287\\n'\nassert solution(\"5\\n\"\n        \"412968357\\n\"\n        \"631457982\\n\"\n        \"598236471\\n\"\n        \"247189563\\n\"\n        \"386579275\\n\"\n        \"366927145\\n\"\n        \"729645835\\n\"\n        \"976351828\\n\") == '963518287\\n'\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563''') == '''154873396\n336592714\n729645835\n863725145\n979314628\n412958357\n631457992\n998236471\n247789563'''\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\n'''\nSolution:\n\n[Task description and assumptions]:\n\nThe sudoku puzzle has been solved.\n\nWhen you write the solution of the sudoku puzzle, you are supposed to replace each number $i$ in this field with any number from the range $[1; 9]$, so that no line or column or block has exactly two equal numbers. If you write a solution with at most $9$ numbers, then it will be accepted.\n\nIt is guaranteed that there is at least one solution to this problem.\n\nWhen you write a solution with more than $9$ numbers, you must write all possible solutions.\n\nIt is guaranteed that there is at least one solution.\n\nIt is not required to print the solution.\n\nThe number of test cases is at most $10^4$.\n\nWhen the solution is printed, each line must contain exactly $9$ numbers from $[1; 9]$.\n\nThe number of lines is exactly 9, except the last line, which may contain $10-9$ numbers, because it contains only the last digit of the solution.\n\nFinally, the number of lines in the printed solution is not more than $10^{5}$.\n\nThe lines are ordered according to the column number in the initial sudoku puzzle.\n\nAssumptions:\n\n- There is at least one solution.\n\n- When you write the solution, you are supposed to replace each number $i$ in this field with any number from the range $[1; 9]$, so that no line or column or block has exactly two equal numbers. If you write a solution with at most $9$ numbers, then it will be accepted.\n\n- When you write a solution with more than $9$ numbers, you must write all possible solutions.\n\n- It is not required to print the solution.\n\n- The number of test cases is at most $10^4$.\n\n- When the solution is printed, each line must contain exactly $9$ numbers from $[1; 9]$.\n\n- The number of lines is exactly 9, except the last line, which may contain $10-9$ numbers, because it contains only the last digit of the solution.\n\n- Finally, the number of lines in the printed solution is not more than $10^{5}$.\n\n- The lines are ordered according to the column number in the initial sudoku puzzle.\n\nTask description\n\nWrite a program that solves the sudoku puzzle. Each line of the input contains 9 characters from the set {'1', '2',..., '9'}, without any whitespaces. The input of the program ends with the number 0. The program should print the solution, if exists.\n\nIf there are several solutions, you must print the one, with the smallest number of lines. If there are several solutions with the same number of lines, you can print any of them. If there is no solution, you must print \"No solution\".\n\nThe cell (i, j) of the sudoku puzzle is shown by the character '*' or '0', if the cell contains the number, 0 or *, respectively. The number in a cell can be determined by the row index (starting with 0) and column index (starting with 0).\n\n\n-----Sample Input-----\n\n3\n*0*0*\n1*0*0\n0*0*0\n1*0*0\n0*0*0\n1*0*0\n0*0*0\n1*0*0\n\n3\n*0*0*\n0*0*0\n0*0*0\n0*0*0\n0*0*0\n0*0*0\n0*0*0\n0*0*0\n\n3\n*0*0*\n0*0*0\n0*0*0\n0*0*0\n0*0*0\n0*0*0\n0*0*0\n0*0*0\n\n3\n*0*0*\n0*0*0\n0*0*0\n0*0*0\n0*0*0\n0*0*0\n0*0*0\n0*0*0\n0*0*0\n\n3\n*0*0*\n0*0*0\n0*0*0\n0*0*0\n0*0*0\n0*0*0\n0*0*0\n0*0*0\n0*0*0\n\n3\n*0*0*\n0*0*0\n0*0*0\n0*0*0\n0*0*0\n0*0*0\n0*0*0\n0*0*0\n0*0*0\n0*0*0\n\nSample Output\n\n00\n01\n02\n10\n11\n12\n20\n21\n22\n\n03\n04\n05\n06\n07\n08\n09\n\n20\n23\n24\n25\n26\n27\n28\n29\n\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n\n61\n62\n63\n64\n65\n66\n67\n68\n69\n\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n\n81\n82\n83\n84\n85\n86\n87\n88\n89\n\n91\n92\n93\n94\n95\n96\n97\n98\n99\n\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\n\"\"\""
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\n\n-----Problem-----\n\nhttps://codeforces.com/contest/1478/problem/A\n\n\"\"\"\n\ntest = int(input())\n\nfor i in range(test):\n    n = 9\n    x = [0 for i in range(n**2)]\n    for i in range(n):\n        temp = [int(j) for j in input().strip()]\n        for j in range(n):\n            if temp[j] == 0:\n                x[j] = 1\n    for j in range(n**2):\n        if x[j] == 1:\n            for k in range(n**2):\n                if x[k] == 0:\n                    x[k] = 1\n                    break\n            if x[j] == 0:\n                break\n        if x[n**2-j-1] == 1:\n            for k in range(n**2):\n                if x[k] == 0:\n                    x[k] = 1\n                    break\n            if x[n**2-j-1] == 0:\n                break\n    for i in range(n):\n        s = ''\n        for j in range(n):\n            s += str(x[i*n+j])\n        print(s)\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '154873296'\n) == '154873396'\n\nassert solution(\n    '386592714'\n) == '336592714'\n\nassert solution(\n    '729641835'\n) == '729645835'\n\nassert solution(\n    '863725149'\n) == '863725145'\n\nassert solution(\n    '975314628'\n) == '979314628'"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin_lines) == stdout_lines"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563''') == '''154873396\n336592714\n729645835\n863725145\n979314628\n412958357\n631457992\n998236471\n247789563'''\n\n-----Explanation-----\n\nExample case 1.\n\nThe initial field:\n\n154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\n\nThe changed field:\n\n154873396\n336592714\n729645835\n863725145\n979314628\n412958357\n631457992\n998236471\n247789563\n\nThe answer is correct.\n\nNote that this is not the only correct answer. We have another one, which is also valid, but has the same number of changed cells:\n\n336592714\n729645835\n863725145\n979314628\n412958357\n631457992\n998236471\n247789563\n154873396\n\n'''\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"154873296\") == \"154873396\"\nassert solution(\"386592714\") == \"336592714\"\nassert solution(\"729641835\") == \"729645835\"\nassert solution(\"863725149\") == \"863725145\"\nassert solution(\"975314628\") == \"979314628\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\nassert solution(\"386592714\\n154873296\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"336592714\\n154873396\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\nassert solution(\"729641835\\n863725149\\n154873296\\n386592714\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"336592714\\n154873396\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\nassert solution(\"863725149\\n154873296\\n729641835\\n386592714\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"336592714\\n154873396\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\nassert solution(\"975314628\\n412968357\\n631457982\\n729645835\\n863725145\\n386592714\\n154873296\\n979314628\\n598236471\\n247189563\") == \"336592714\\n154873396\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''9 6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9''') == '''3\n6\n8\n-1\n9\n4'''\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == \"3\\n6\\n8\\n-1\\n9\\n4\"\n\n\"\"\"\n\nfrom typing import List, Optional\n\n\nclass Solution:\n    def spread(self, adj_list: List[int], u: int, k: int, idx: int) -> Optional[int]:\n        def dfs(v: int) -> Optional[int]:\n            nonlocal depth\n            if depth == k:\n                return v\n\n            depth += 1\n            for x in adj_list[v]:\n                if x == u:\n                    continue\n                if visited[x]:\n                    continue\n                visited[x] = True\n                dfs(x)\n\n        depth = 0\n        visited = [False] * len(adj_list)\n        visited[u] = True\n        dfs(u)\n        return visited[k] if k < len(visited) else None\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 8 7 3 4 1 2 6 5\") == \"9 4 6 2 8 1 3 5 7\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n1 2\\n2 4') == '2'\nassert solution('6 5\\n1 2\\n3 4\\n1 3\\n5 6\\n2 4\\n2 5\\n2 6\\n2 7\\n2 8\\n2 9\\n2 10') == '2'\nassert solution('4 3\\n1 2\\n2 4\\n1 3') == '2'\nassert solution('4 5\\n1 2\\n3 4\\n1 3\\n5 6\\n1 4\\n5 7\\n1 5\\n5 8\\n1 6\\n5 9\\n1 7\\n5 10\\n1 8\\n5 11\\n1 9\\n5 12\\n1 10\\n5 13\\n1 11\\n5 14\\n1 12\\n5 15\\n1 13\\n5 16\\n1 14\\n5 17\\n1 15\\n5 18\\n1 16\\n5 19\\n1 17\\n5 20\\n1 18\\n5 21\\n1 19\\n5 22\\n1 20\\n5 23\\n1 21\\n5 24\\n1 22\\n5 25\\n1 23\\n5 26\\n1 24\\n5 27\\n1 25\\n5 28\\n1 26\\n5 29\\n1 27\\n5 30\\n1 28\\n5 31\\n1 29\\n5 32\\n1 30\\n5 33\\n1 31\\n5 34\\n1 32\\n5 35\\n1 33\\n5 36\\n1 34\\n5 37\\n1 35\\n5 38\\n1 36\\n5 39\\n1 37\\n5 40\\n1 38\\n5 41\\n1 39\\n5 42\\n1 40\\n5 43\\n1 41\\n5 44\\n1 42\\n5 45\\n1 43\\n5 46\\n1 44\\n5 47\\n1 45\\n5 48\\n1 46\\n5 49\\n1 47\\n5 50\\n1 48\\n5 51\\n1 49\\n5 52\\n1 50\\n5 53\\n1 51\\n5 54\\n1 52\\n5 55\\n1 53\\n5 56\\n1 54\\n5 57\\n1 55\\n5 58\\n1 56\\n5 59\\n1 57\\n5 60\\n1 58\\n5 61\\n1 59\\n5 62\\n1 60\\n5 63\\n1 61\\n5 64\\n1 62\\n5 65\\n1 63\\n5 66\\n1 64\\n5 67\\n1 65\\n5 68\\n1 66\\n5 69\\n1 67\\n5 70\\n1 68\\n5 71\\n1 69\\n5 72\\n1 70\\n5 73\\n1 71\\n5 74\\n1 72\\n5 75\\n1 73\\n5 76\\n1 74\\n5 77\\n1 75\\n5 78\\n1 76\\n5 79\\n1 77\\n5 80\\n1 78\\n5 81\\n1 79\\n5 82\\n1 80\\n5 83\\n1 81\\n5 84\\n1 82\\n5 85\\n1 83\\n5 86\\n1 84\\n5 87\\n1 85\\n5 88\\n1 86\\n5 89\\n1 87\\n5 90\\n1 88\\n5 91\\n1 89\\n5 92\\n1 90\\n5 93\\n1 91\\n5 94\\n1 92\\n5 95\\n1 93\\n5 96\\n1 94\\n5 97\\n1 95\\n5 98\\n1 96\\n5"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\") == '9\\n4\\n-1'\n\nsolution(\"9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\")"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 9\\n5 3\\n4 3\\n7 3\\n9\\n4\\n4\\n\") == \"9\\n-1\\n4\"\n\"\"\"\n\nimport sys\n\n\nclass Officer:\n    def __init__(self, index: int, superior: int):\n        self.index = index\n        self.superior = superior\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 4\\n1 3\\n4 2\\n3 2\\n1 5\\n1 3\") == \"2 3 4 5\"\nassert solution(\"3 4\\n3 2\\n2 3\\n1 4\") == \"2 3 4 1\"\nassert solution(\"4 3\\n3 2\\n2 1\\n1 4\") == \"1 3 2 4\"\nassert solution(\"4 4\\n1 4\\n3 4\\n2 4\\n2 3\\n1 3\\n1 2\") == \"3 2 4 1 2\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3\\n1 2\\n1 3\\n2 2\\n3 2\\n3 3\\n1 2\\n1 3\\n2 3\\n2 2\\n3 2\\n3 3\\n1 2\\n1 3\\n2 3\\n2 2\\n3 2\\n3 3\") == \"8\"\nassert solution(\"4\\n1 3\\n1 2\\n1 3\\n2 2\\n3 2\\n3 3\\n1 2\\n1 3\\n2 3\\n2 2\\n3 2\\n3 3\\n1 2\\n1 3\\n2 3\\n2 2\\n3 2\\n3 3\") == \"9\"\nassert solution(\"4\\n1 3\\n1 2\\n1 3\\n2 2\\n3 2\\n3 3\\n1 2\\n1 3\\n2 3\\n2 2\\n3 2\\n3 3\\n1 2\\n1 3\\n2 3\\n2 2\\n3 2\\n3 3\") == \"7\"\nassert solution(\"4\\n1 3\\n1 2\\n1 3\\n2 2\\n3 2\\n3 3\\n1 2\\n1 3\\n2 3\\n2 2\\n3 2\\n3 3\\n1 2\\n1 3\\n2 3\\n2 2\\n3 2\\n3 3\") == \"9\"\nassert solution(\"4\\n1 3\\n1 2\\n1 3\\n2 2\\n3 2\\n3 3\\n1 2\\n1 3\\n2 3\\n2 2\\n3 2\\n3 3\\n1 2\\n1 3\\n2 3\\n2 2\\n3 2\\n3 3\") == \"8\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''9 6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9''') == '3\n6\n8\n-1\n9\n4\n'''\n)\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''9 6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9''') == '''3\n6\n8\n-1\n9\n4'''\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 2 8\") == \"YES\"\nassert solution(\"100 101 102 105\") == \"YES\"\nassert solution(\"3 2 1 100000000\") == \"NO\"\nassert solution(\"10 20 15 14\") == \"YES\"\nassert solution(\"101 101 101 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n3 1 2 100\") == \"NO\"\nassert solution(\"4\\n4 2 2 100\") == \"YES\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 2 1\") == \"NO\"\nassert solution(\"100 101 102 105\") == \"YES\"\nassert solution(\"3 2 1 100000000\") == \"YES\"\nassert solution(\"10 20 15 14\") == \"NO\"\nassert solution(\"101 101 101 3\") == \"YES\""
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\"\n\n\"\"\"\nfrom typing import List\n\nt = int(input())\n\nfor _ in range(t):\n    a, b, c, n = map(int, input().split())\n    if a + b + c!= n:\n        print(\"NO\")\n    elif (a > 0 and b == 0 and c == 0) or (a == 0 and b > 0 and c == 0) or (a == 0 and b == 0 and c > 0):\n        print(\"YES\")\n    elif (a > 0 and b > 0 and c > 0) or (a == 0 and b == 0 and c == 0) or (a > 0 and b == 0 and c == 0) or (a == 0 and b > 0 and c == 0) or (a == 0 and b == 0 and c > 0):\n        print(\"YES\")\n    elif (a > 0 and b == 0 and c < 0) or (a == 0 and b > 0 and c < 0) or (a == 0 and b == 0 and c < 0):\n        print(\"YES\")\n    elif (a < 0 and b > 0 and c < 0) or (a < 0 and b == 0 and c < 0) or (a < 0 and b == 0 and c == 0) or (a < 0 and b == 0 and c > 0) or (a == 0 and b < 0 and c == 0) or (a == 0 and b < 0 and c > 0) or (a == 0 and b == 0 and c < 0):\n        print(\"YES\")\n    elif (a > 0 and b > 0 and c == 0) or (a > 0 and b < 0 and c < 0) or (a < 0 and b < 0 and c < 0) or (a == 0 and b == 0 and c == 0) or (a < 0 and b > 0 and c == 0) or (a < 0 and b == 0 and c > 0) or (a == 0 and b > 0 and c == 0):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 2 8\") == \"YES\"\nassert solution(\"100 101 102 105\") == \"YES\"\nassert solution(\"3 2 1 100000000\") == \"NO\"\nassert solution(\"10 20 15 14\") == \"YES\"\nassert solution(\"101 101 101 3\") == \"NO\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\\nYES\\nNO\\nNO\\nYES\""
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 2 8') == 'YES'\nassert solution('100 101 102 105') == 'YES'\nassert solution('3 2 1 100000000') == 'YES'\nassert solution('10 20 15 14') == 'NO'\nassert solution('101 101 101 3') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\"\nassert solution(\"5\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"NO\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_1) == 'YES'\nassert solution(test_input_2) == 'YES'\nassert solution(test_input_3) == 'NO'\nassert solution(test_input_4) == 'NO'\nassert solution(test_input_5) == 'YES'"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n1 2 3 4') == '3 4 6 5'\nassert solution('5 5\\n2 1 5 3 5') == '9 8 12 6 8'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == '3 3'\nassert solution('1 1\\n1') == '0'\nassert solution('5 5\\n2 1 5 3 5') == '9 8 12 6 8'\n\n\"\"\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 5 3 5') == '9 8 12 6 8'\nassert solution('1 2 1 1 2 2 2 2 2 2') == '3 3'\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == '3 4 6 5'\nassert solution(\"5 5\\n2 1 5 3 5\") == '9 8 12 6 8'\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == '3 3'\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == '3 3'\n\n\n\n---Problem 24---\n\nA permutation can be specified by an array P, where P[i] represents the location of the element at i in the permutation. For example, the permutation ([2,1,3]) can be represented as follows:\n\n[0,1,2]\n[1,2,0]\n[2,0,1]\nWrite a function:"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\nassert solution(\"1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"3 4 6 5\", \"Wrong answer for 4 4\"\nassert solution(\"5 5\") == \"9 8 12 6 8\", \"Wrong answer for 5 5\"\nassert solution(\"2 10\") == \"3 3\", \"Wrong answer for 2 10\"\nassert solution(\"1 2 1 1 2 2 2 2 2 2\") == \"3 3\", \"Wrong answer for 1 2 1 1 2 2 2 2 2 2\"\n\n\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4') == '3 4 6 5'\nassert solution('5 5') == '9 8 12 6 8'\nassert solution('2 10') == '3 3'\n\n\"\"\""
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n1 2 3 4') == '3 4 6 5'\nassert solution('5 5\\n2 1 5 3 5') == '9 8 12 6 8'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == '3 3'\n\n\"\"\"\nimport sys\nfrom itertools import permutations\nfrom typing import Tuple, List, Dict\n\nsys.stdin = open('input.txt')\n\nn, m = list(map(int, input().split()))\n\nx = list(map(int, input().split()))"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1 2 3 4\\n\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\\n\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\\n\") == \"3 3\"\n\n\"\"\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\") == \"3 4 6 5\"\nassert solution(\"5 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\") == \"3 3\""
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\""
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 3') == 'NO'\nassert solution('10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7') == 'NO'"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n') == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\nassert solution('10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n') == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\\n1 2\\n1 3\\n2 5\\n2 6\\n3 7\\n3 8\\n4 7\\n4 9\\n5 10\\n6 10\\n7 11\\n11 13\\n8 13\\n9 14\\n10 15\\n12 15\\n14 16\\n16 17\\n17 18\\n6 10\\n8 14\\n12 18\\n17 20\\n19 20\\n21 22\\n22 23\\n23 24\\n24 25\\n25 26\\n26 27\\n26 27\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\nassert solution(\"7 3\\n1 2\\n1 3\\n2 5\\n2 6\\n3 7\\n3 8\\n4 7\\n4 9\\n5 10\\n6 10\\n7 11\\n11 13\\n8 13\\n9 14\\n10 15\\n12 15\\n14 16\\n16 17\\n17 18\\n6 10\\n8 14\\n12 18\\n17 20\\n19 20\\n21 22\\n22 23\\n23 24\\n24 25\\n25 26\\n26 27\\n26 27\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n\"\"\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n5 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7\n''') == '''\nYES\nYES\nYES\nYES\nNO\nNO\n'''\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\" * 6\nassert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\" * 6\nassert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"NO\" * 6\nassert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\" * 6\nassert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\" * 6\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''10 6\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n7 8\n7 9\n9 10\n4 3 8 9 10\n3 2 4 6\n3 2 1 5\n3 4 8 2\n2 6 10\n3 5 4 7''') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\n\nassert solution('''8 7\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n4 8\n4 7\n5 6\n6 7\n3 2 4 6\n2 1 3 5\n2 3 5 4\n2 4 5 3\n3 4 5 6\n4 5 6 7\n5 6 7 8\n6 7 8\n5 7 8\n3 5 6 8''') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\n\nassert solution('''7 8\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n4 8\n4 7\n5 6\n6 7\n3 2 4 6\n2 1 3 5\n2 3 5 4\n2 4 5 3\n3 4 5 6\n4 5 6 7\n5 6 7 8\n6 7 8\n3 5 6 8''') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\n\nassert solution('''8 8\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n4 8\n4 7\n5 6\n6 7\n3 2 4 6\n2 1 3 5\n2 3 5 4\n2 4 5 3\n3 4 5 6\n4 5 6 7\n5 6 7 8\n6 7 8\n3 5 6 8''') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\n\nassert solution('''7 7\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n4 8\n4 7\n5 6\n6 7\n3 2 4 6\n2 1 3 5\n2 3 5 4\n2 4 5 3\n3 4 5 6\n4 5 6 7\n5 6 7 8\n6 7 8\n3 5 6 8''') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2') == \"YES\\nYES\\nYES\\nNO\\nNO\"\nassert solution('1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2') == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n\"\"\"\n\nfrom collections import defaultdict, deque\nfrom math import inf\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'NO'\n\"\"\"\nimport sys"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\") == \"YES\\n1 3\\n3 5\"\nassert solution(\"4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'\nassert solution('3\\n2\\n1 2\\n') == 'YES\\n1 2\\n2 3\\n'\n\n------ Test case 1 ------\nInput\n2\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n2\n1 1\n2 2\n3 3\n4 4\n\nOutput\nYES\n1 3\n3 5\n5 4\n1 2\nNO\nYES\n1 2\n1 3\n1 4\n\n------ Test case 2 ------\nInput\n1\n3\n1 2 1\n\nOutput\nYES\n1 2\n1 3\n2 3\nNO\n\n------ Test case 3 ------\nInput\n1\n4\n1 2 2 1 3\n\nOutput\nNO\n\n------ Test case 4 ------\nInput\n1\n5\n1 2 2 1 3\n\nOutput\nNO\n\n\"\"\""
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_0) == 'YES\\n1 2\\n1 3\\n1 4\\nYES\\n1 3\\n1 2\\n1 4\\n1 2\\nNO'\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n''') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'\nassert solution('''\n2\n2\n1 2\n2 1\n2\n2\n''') == 'YES\\n1 2\\n1 2\\nYES'\nassert solution('''\n1\n2\n2\n2\n''') == 'NO'\nassert solution('''\n1\n1\n2\n2\n''') == 'YES'\nassert solution('''\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n''') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nYES'\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n2') == 'YES'\nassert solution('1\\n3') == 'YES'\nassert solution('1\\n5') == 'YES'\nassert solution('1\\n2\\n1 2\\n3 4') == 'YES'\nassert solution('1\\n2\\n1 2\\n3 4\\n5 6\\n4 5') == 'NO'\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '1 3'\nassert solution('1 1000 101 1000') == '1 1000 101 1000'\nassert solution('2 3 4 5 6') == '2 3'\nassert solution('2 3 4 5 6 7') == '2 3 4 5 6'\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == 'YES\\n1 3\\n3 5\\n5 4\\n1 2'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100_000)\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\"\nassert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"NO\\nYES\\n1 2\\n1 3\\n1 4\"\n\n\"\"\"\nimport heapq"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n') == 'YES\\n1 3\\n3 5\\n5 4'\nassert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n') == 'NO\\nYES\\n1 2\\n1 3\\n1 4'\nassert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n') == 'NO\\nYES\\n1 2\\n1 3\\n1 4'\n\"\"\"\nimport sys"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11011010\") == \"01111010\"\nassert solution(\"11011011\") == \"01111101\"\nassert solution(\"1111100\") == \"0011111\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11101010') == '010'\nassert solution('11101110') == '010'\nassert solution('11111000') == '010'\nassert solution('11111010') == '010'\nassert solution('11111011') == '011'\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11101100\") == \"10011010\"\n\"\"\"\n\nimport sys\n\ntest_count = int(sys.stdin.readline())\nfor _ in range(test_count):\n    n, k = list(map(int, sys.stdin.readline().strip().split()))\n    arr = sys.stdin.readline().strip()\n    out = []\n    for i in range(n):\n        if i < k:\n            out.append(arr[i])\n            continue\n        out.append(max(arr[i], arr[i-k]))\n    print(\"\".join(out))"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11101010\") == \"01111010\"\nassert solution(\"11101010\") == \"01111010\"\nassert solution(\"11101010\") == \"01111010\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\""
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_case_1) == test_case_1_answer\nassert solution(test_case_2) == test_case_2_answer\n\n\n\"\"\"\n\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11101101\") == \"10110111\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11101010') == '011110'\n\n\"\"\""
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11101110') == '11101110'\nassert solution('11011010') == '01111010'\nassert solution('1111100') == '0011111'\n\n\"\"\"\n\n\nfrom typing import IO\nimport sys\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11011010') == '01111010'\nassert solution('7 9') == '011111'\nassert solution('1111100') == '1101100'\n\n\"\"\"\nfrom __future__ import annotations\nfrom typing import Union, List, Optional\nfrom collections import deque\n\nimport sys\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11101010\") == \"01111010\"\nassert solution(\"11101010\") == \"01111010\"\nassert solution(\"11111010\") == \"0011111\"\nassert solution(\"11111010\") == \"0011111\"\n\n\"\"\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9''') == '3'\n\nassert solution('''5 1\n29 30\n30 30\n29 29\n28 30\n30 30''') == '3'\n\nassert solution('''6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3''') == '4'\n\n\n------Test Time------\n\"\"\""
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\") == \"1 2 3\"\n\"\"\"\n\nfrom collections import defaultdict, deque"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == \"3\\n1 4 7\"\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30') == \"3\\n1 2 4\"\nassert solution('6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3') == \"4\\n1 3 5 6\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_data) == test_results\nprint(solution(data))\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n1 4 7\\n\"\n\n\"\"\""
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('2\\n3\\n4\\n') == '1\\n'\nassert solution('3\\n4\\n5\\n6\\n') == '2\\n3\\n4\\n5\\n6\\n'\nassert solution('2\\n1\\n2\\n3\\n4\\n') == '0\\n'\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n1 4 7'\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30') == '3\\n1 2 4'\nassert solution('6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3') == '4\\n1 3 5 6'\nassert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n1 4 7'\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30') == '3\\n1 2 4'\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\n\"\"\"\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == \"3\"\nassert solution(\"5\\n2 1 4 3 5\") == \"19\"\nassert solution(\"2\\n2 1\\n-3 0\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 3 2\\n-100 2 3') == '3'\nassert solution('5\\n2 1 4 3 5\\n2 2 2 3 4') == '19'\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3\n1 3 2\n-100 2 3\"\"\") == \"3\"\nassert solution(\"\"\"5\n2 1 4 3 5\n2 2 2 3 4\"\"\") == \"19\"\nassert solution(\"\"\"5\n2 1 4 3 5\n-3 0 2 -1 0\"\"\") == \"0\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\\n\") == '3'\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3\\n3 2 1') == '3'\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 1 2 2 1\\n1 1 2 1 3\") == \"10\"\nassert solution(\"5\\n2 1 3 1 1\\n2 1 3 1 1\") == \"8\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\\n\") == \"3\\n0\"\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\\n\") == \"19\\n\"\nprint('The local tests are done. Try Solution Online 2')"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n2 4 7\n1 2 3''') == '7'\nassert solution('''5\n1 3 4 2 5\n2 3 1 2 4\n''') == '10'\nassert solution('''5\n2 4 7 3 1\n3 2 3 4 1\n''') == '10'\n\nprint(solution(input()))\n\n------Test Input--------\n\n5\n1 3 4 2 5\n2 2 2 3 4\n\n9\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n\n4\n1 2 2 3\n2 1 2 3\n3 1 2 3\n3 2 1 3\n\n3\n1 2 3\n3 1 2\n3 2 1\n\n5\n2 1 4 3 5\n2 2 2 3 4\n\n8\n2 1 4 3 5 6 7 8\n3 1 4 3 5 6 7 8\n\n10\n1 2 4 5 6 7 8 9 10\n1 2 4 5 6 7 8 9 10\n\n7\n1 2 4 2 3 2 1\n2 1 3 3 2 3 1\n3 1 3 2 1 1 1\n1 2 2 3 1 1 1\n1 2 2 3 1 1 1\n\n5\n1 4 6 3 4\n2 1 6 4 3\n\n7\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n\n10\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n\n20\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == 3\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == 19\nassert solution(\"2\\n2 1\\n-3 0\") == 0\n\"\"\""
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n1 2 1\\n2 3 2\\n3 4 2\\n4 1 2') == '21 7 15 21 3'\n\"\"\""
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\\n\") == \"21 7 15 21 3 \""
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a) == b\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2 1\\n2 3 2\\n1 3 2\\n3 4 3\\n2 4 1\\n3 4 2\\n3 1 3\\n4 2 3\\n1 4 2\\n2 4 1\\n4 2 1\\n4 3 3\\n4 1 4\\n3 1 2\\n3 2 3\\n1 3 1\\n2 1 2') == '21 7 15 21 3'\nassert solution('6 5\\n1 2 3\\n2 3 4\\n3 4 5\\n4 5 6\\n1 2 4\\n2 3 4\\n1 3 1\\n2 4 2\\n1 4 2\\n3 4 3\\n3 5 2\\n4 5 1\\n4 5 2\\n4 5 4\\n4 2 3\\n2 4 4\\n1 5 2\\n2 1 2\\n1 5 1\\n2 3 1\\n1 4 1\\n1 3 1\\n1 2 1') == '1 3 3'\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7 5\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1''') == '21 7 15 21 3'\nassert solution('''1 2\n2 3 2\n1 3 2''') == '0 0'\nassert solution('''3 3\n1 2 1\n2 3 2\n1 3 2''') == '1 3 3'\nassert solution('''1 2\n2 3 2\n1 3 2''') == '0 0'\nassert solution('''1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1''') == '21 7 15 21 3'\n\"\"\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == '21 7 15 21 3'\nassert solution(\"1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == '3'\n\n\n\"\"\"\nfrom typing import List, Dict\nfrom collections import deque, defaultdict\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\nprint(solution(\"7 4\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\"))\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n\n\"\"\"\n\nclass Node:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\\n\") == \"21 7 15 21 3\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\") == \"YES\"\nassert solution(\"3\\n1 2 4\\n4\\n1 3 4 4\") == \"YES\"\nassert solution(\"3\\n100\\n1 2 4\") == \"NO\"\nassert solution(\"3\\n1 2 2\\n3\\n1 2 4\") == \"NO\"\nassert solution(\"3\\n1 2 2\\n3\\n1 2 4\") == \"NO\"\n\nprint(solution(\"4\\n1 2 2 2\"))\nprint(solution(\"4\\n1 2 2 2\"))\n\n\"\"\""
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100\") == 'YES'\nassert solution(\"5\\n3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100\") == 'NO'\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\") == \"NO\"\nassert solution(\"3\\n1 2 4\\n4\\n1 3 4 4\") == \"YES\"\nassert solution(\"1\\n100\") == \"YES\"\n\n\n-----Test-----\n\nimport collections\nimport sys\nimport unittest\nfrom io import StringIO\n\nclass Test_Exercise(unittest.TestCase):\n    def test_1(self):\n        with StringIO(\"\"\"5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\"\"\") as buf:\n            sys.stdin = buf\n            self.assertEqual(solution(\"\"), \"YES\")\n\n    def test_2(self):\n        with StringIO(\"\"\"3\n1 2 2\n4\n5 5 5 5\"\"\") as buf:\n            sys.stdin = buf\n            self.assertEqual(solution(\"\"), \"NO\")\n\n    def test_3(self):\n        with StringIO(\"\"\"3\n1 2 4\n4\n1 3 4 4\"\"\") as buf:\n            sys.stdin = buf\n            self."
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 2\") == \"YES\"\nassert solution(\"4\\n5 5 5 5\") == \"NO\"\nassert solution(\"3\\n1 2 4\") == \"YES\"\nassert solution(\"1\\n100\") == \"YES\"\nassert solution(\"1\\n100\\n1 100\") == \"YES\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'YES'\nassert solution('3\\n1 2 2') == 'YES'\nassert solution('4\\n5 5 5 5') == 'NO'\nassert solution('3\\n1 2 4') == 'NO'\nassert solution('1\\n100') == 'YES'\n\n'''\n\nfrom typing import List\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input) == output\n\n\"\"\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2 4\\n5 5 5 5') == 'YES'\nassert solution('3\\n1 2 2\\n4') == 'YES'\nassert solution('2\\n1 2 4') == 'NO'\nassert solution('2\\n1 3 4') == 'NO'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n5\\n1 2 4\") == \"YES\"\nassert solution(\"4\\n5 5 5 5\") == \"NO\"\nassert solution(\"1\\n100\") == \"NO\"\nassert solution(\"3\\n1 2 4\") == \"YES\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 2\\n4\\n5 5 5 5') == 'NO'\nassert solution('3\\n1 2 2\\n4\\n1 3 4 4') == 'YES'\nassert solution('1\\n100') == 'YES'\nassert solution('2\\n1 2 4') == 'YES'\nassert solution('1\\n3') == 'NO'\n\n\"\"\"\nfrom typing import Iterator\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 3 4\\n5 5 5 5') == 'YES'\nassert solution('2\\n1 2\\n3 4') == 'YES'\nassert solution('2\\n2 1') == 'NO'"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 4\\n1010\\n1101\\n') == '12'\n\nassert solution('4 5\\n1001\\n10101\\n') == '11'\nassert solution('4 5\\n1101\\n10101\\n') == '11'\n\nassert solution('4 4\\n1010\\n1010\\n') == '0'\nassert solution('4 5\\n1010\\n1010\\n') == '0'"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"4 5\") == \"11\""
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"4 5\") == \"11\"\n\"\"\""
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\""
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"NO\"\nassert solution(\"8\") == \"YES\\n2 4 1 5\"\nassert solution(\"6\") == \"NO\"\nassert solution(\"10\") == \"YES\\n2 4 6 8 1 3 5 11\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"NO\"\nassert solution(\"6\") == \"YES\\n2 4 1 5\"\nassert solution(\"8\") == \"YES\\n2 4 6 8 1 3 5 11\"\nassert solution(\"10\") == \"NO\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n6\") == \"NO\"\nassert solution(\"4\\n8\") == \"YES\\n2 4 1 5\"\nassert solution(\"6\\n10\") == \"NO\"\nassert solution(\"8\\n12\") == \"YES\\n2 4 6 8 1 3 5 11\"\nassert solution(\"10\\n14\") == \"NO\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n6\") == \"2 4 1 5\"\nassert solution(\"8\\n10\") == \"2 4 6 8 1 3 5 11\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n4') == 'NO'\nassert solution('6\\n8') == '2 4 1 5'\nassert solution('10\\n16') == 'NO'\nassert solution('2\\n4') == 'NO'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n4\") == \"NO\"\nassert solution(\"6\\n8\") == \"2 4 1 5\"\nassert solution(\"10\\n18\") == \"NO\"\nassert solution(\"14\\n22\") == \"YES\\n2 4 6 8 1 3 5 11\"\nassert solution(\"4\\n8\") == \"NO\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n6\") == \"NO\"\nassert solution(\"6\\n8\") == \"2 4 1 5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"NO\"\nassert solution(\"6\") == \"NO\"\nassert solution(\"8\") == \"YES\\n2 4 1 5\"\nassert solution(\"10\") == \"NO\"\nassert solution(\"14\") == \"NO\"\n\"\"\"\n\nfrom collections import Counter\n\nimport numpy as np\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n8\") == \"NO\"\nassert solution(\"10\\n10\") == \"NO\"\nassert solution(\"8\\n6\") == \"YES\\n2 4 1 5\"\nassert solution(\"8\\n8\") == \"NO\"\nassert solution(\"7\\n6\") == \"YES\\n2 4 1 5\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n4\\n6\\n8\\n10\") == \"NO\\nYES\\n2 4 1 5\"\nassert solution(\"1\\n1\\n2\\n2\") == \"NO\\nYES\\n2 4 1 5\"\n\"\"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3\\n1 1 2\\n5\\n1 1 1 1\") == '5\\n1\\n0\\n4\\n0'\n\"\"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 2 3\") == \"2\"\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 1 1 1\\n1\\n1 1') == '0'\nassert solution('4\\n2 1 3 4\\n3') == '0'\nassert solution('4\\n1 1 2 1\\n1\\n1 1') == '1'\nassert solution('4\\n1 1 2 1\\n1\\n1 1') == '1'\nassert solution('4\\n1 1 2 1\\n2\\n1 1') == '0'\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1 2\\n2\\n3\") == \"3\"\nassert solution(\"7\\n1 1 1 1 1\\n2\") == \"0\"\nassert solution(\"9\\n3 1 4 1 5 9 2 6 5\\n3\") == \"5\"\nassert solution(\"8\\n8 7 6 5 4 3 2 1\\n1\") == \"1\"\nassert solution(\"4\\n1 1 2\\n2\\n3\") == \"0\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 1 2 3') == '3'\n\"\"\""
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\n3 1 4 1 5 9 2 6 5\") == \"5\"\nassert solution(\"9\\n3 1 4 1 5 9 2 6 5\") == \"5\"\nassert solution(\"9\\n3 1 4 1 5 9 2 6 5\") == \"5\"\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(expected_output)\n\"\"\"\n\nimport sys\nfrom typing import List, Dict\nfrom collections import Counter\n\nsys.setrecursionlimit(10 ** 6)\n\n\nclass Solution:\n    def __init__(self, stdin: str):\n        self.data = self.get_data(stdin)\n\n    def get_data(self, stdin: str) -> List[List[int]]:\n        \"\"\"\n        Collects all data from the input\n        :param stdin:\n        :return:\n        \"\"\"\n        data = []\n        lines = stdin.split(\"\\n\")\n        for line in lines:\n            if line:\n                data.append(list(map(int, line.split())))\n        return data\n\n    def count_special_elements(self, data: List[List[int]], n: int) -> int:\n        \"\"\"\n        Counts how many elements are special\n        :param data:\n        :param n:\n        :return:\n        \"\"\"\n        result = 0\n        for i in range(n):\n            current_element = data[i][0]\n            current_array = data[i]\n            count = self.count_consecutive_elements(current_element, current_array)\n            if count > 1:\n                result += 1\n        return result\n\n    def count_consecutive_elements(self, first_element: int, array: List[int]) -> int:\n        \"\"\"\n        Counts the elements consecutive to the given element\n        :param first_element:\n        :param array:\n        :return:\n        \"\"\"\n        result = 0\n        for i in range(len(array)):\n            if array[i] == first_element:\n                count = 1\n                while i + count < len(array) and array[i + count] == array[i]:\n                    count += 1\n                result += count\n                if count == len(array) - i:\n                    return len(array) - i\n        return result\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1 2\\n2\\n\") == \"2\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10000)\n\nnumber_of_test_cases = int(sys.stdin.readline())\n\nfor _ in range(number_of_test_cases):\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    if n == 1:\n        print(0)\n        continue\n\n    special = []\n    for i in range(n - 1):\n        if a[i] + a[i + 1] in a[i + 2:]:\n            special.append(a[i])\n    print(len(special))\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n9\\n3 1 4 1 5 9 2 6 5\") == \"5\"\nassert solution(\"7\\n8\\n8 7 6 5 4 3 2 1\") == \"0\"\nassert solution(\"1\\n2\\n3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"7\"\n\n\"\"\"\nfrom itertools import combinations\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"7\"\n\n\"\"\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n5') == '3'\n\"\"\""
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\\n\") == \"3\\n4\\n2\\n7\"\nprint('The local tests are done. Try Solution Online.')\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"3\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"4\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"2\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"7\"\nassert solution(\"4\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\\n\") == \"3\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"3\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"4\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"2\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"7\"\n\n\"\"\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7') == '3\\n4\\n2\\n7'\nassert solution('5\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7') == '4\\n2\\n7'\nassert solution('5\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7') == '4\\n2\\n7'\nassert solution('5\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7') == '4\\n2\\n7'\nassert solution('5\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7') == '4\\n2\\n7'\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == '3'\nassert solution(\"3\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == '2'\nassert solution(\"4\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == '2'\nassert solution(\"7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\\n3 1\\n4 2\\n5 3\\n6 5\\n7 6\\n3 2\\n4 3\\n5 4\\n6 5\\n7 7\\n4 4\\n6 8\\n7 7\") == '7'\n\n\"\"\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7') == '3'\nassert solution('5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3') == '4'\nassert solution('5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3') == '2'\nassert solution('5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3') == '7'\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\") == \"3\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\") == \"4\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\") == \"2\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\") == \"7\"\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nt = int(stdin.readline().strip())\nfor _ in range(t):\n    n = int(stdin.readline().strip())\n    l_lst = sorted([int(l) for l in stdin.readline().strip().split()])\n    r_lst = sorted([int(r) for r in stdin.readline().strip().split()])\n    max_lst = [l_lst[0], r_lst[0]]\n    for l, r in zip(l_lst[1:], r_lst[1:]):\n        if r < l:\n            break\n        if l <= max_lst[1] <= r:\n            max_lst[1] = r\n        elif l <= max_lst[0] <= r:\n            max_lst[0] = l\n    print(len(l_lst) - sum(max_lst))\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 20\") == \"1180\"\n\"\"\"\nfrom collections import deque\n\ntests = int(input())\nfor t in range(tests):\n    hours, minutes = map(int, input().split())\n    d = deque([hours, minutes])\n    while d[0]!= 0 or d[1]!= 0:\n        if d[0] == 0:\n            d[0] = 23\n            d[1] -= 60\n        else:\n            d[0] -= 1\n        if d[0] < 10:\n            d[0] = '0' + str(d[0])\n        if d[1] < 10:\n            d[1] = '0' + str(d[1])\n        print(''.join(d))\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(read()) == write()"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\\n3\") == \"6\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\n\"\"\"\n\nimport io\nimport sys\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(    \"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\nassert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\""
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\nprint(solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\"))\n\n\"\"\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"23 55\") == \"5\"\nassert solution(\"23 0\") == \"60\"\nassert solution(\"0 1\") == \"1439\"\nassert solution(\"4 20\") == \"1180\"\nassert solution(\"23 59\") == \"1\"\n\nprint(solution(input()))\n\n\"\"\"\n\nfrom typing import Iterator"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2\") == \"1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n\ntest_cases = int(input())\nfor case_no in range(1, test_cases + 1):\n    h, m = [int(x) for x in input().split()]\n    print(h * 60 + m - (h * 60 + m) % 60)"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"LRUD\") == \"LR\"\nassert solution(\"LRUD\") == \"LR\"\nassert solution(\"LURD\") == \"LDR\"\nassert solution(\"LDR\") == \"DR\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1000000)\n\nclass Solution:\n    def __init__(self):\n        self.parent = {}\n\n    def find(self, x):\n        if self.parent[x]!= x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n\n    def union(self, x, y):\n        root_x = self.find(x)\n        root_y = self.find(y)\n        if root_x!= root_y:\n            self.parent[root_x] = root_y\n\n    def lca(self, x, y):\n        root_x = self.find(x)\n        root_y = self.find(y)\n        if root_x == root_y:\n            return root_x\n        else:\n            return -1\n\n    def dfs(self, path, pos):\n        if pos >= len(path):\n            return\n        if path[pos] == 'R' and path[pos + 1] == 'L':\n            self.union(path[pos], path[pos + 1])\n            self.dfs(path, pos + 2)\n        elif path[pos] == 'L' and path[pos + 1] == 'R':\n            self.union(path[pos], path[pos + 1])\n            self.dfs(path, pos + 2)\n        elif path[pos] == 'U' and path[pos + 1] == 'D':\n            self.union(path[pos], path[pos + 1])\n            self.dfs(path, pos + 2)\n        elif path[pos] == 'D' and path[pos + 1] == 'U':\n            self.union(path[pos], path[pos + 1])\n            self.dfs(path, pos + 2)\n        elif path[pos] == 'R' and path[pos + 1] == 'L':\n            if path[pos + 2] == 'U':\n                self.union(path[pos], path[pos + 1])\n                self.union(path[pos], path[pos + 2])\n                self.dfs(path, pos + 3)\n            elif path[pos + 2] == 'D':\n                self.union(path[pos], path[pos + 1])\n                self.union(path[pos], path[pos + 2])\n                self.dfs(path, pos + 3)\n            else:\n                self.dfs(path, pos + 2)\n        elif path[pos] == 'L' and path[pos + 1] == 'R':\n            if path[pos + 2] == 'U':\n                self.union(path[pos], path[pos + 1])\n                self.union(path[pos], path[pos + 2])\n                self.dfs(path, pos + 3)\n            elif path[pos + 2] == 'D':\n                self.union(path[pos], path[pos + 1])\n                self.union(path[pos], path[pos + 2])\n                self.dfs(path, pos + 3)\n            else:\n                self.dfs(path, pos + 2)\n        elif path[pos] == 'U' and path[pos + 1] == 'D':\n            if path[pos + 2] == 'R':\n                self.union(path[pos], path[pos + 1])\n                self.union(path[pos], path[pos + 2])\n                self.dfs(path, pos + 3)\n            elif path[pos + 2] == 'L':\n                self.union(path[pos], path[pos + 1])\n                self.union(path[pos], path[pos + 2])\n                self.dfs(path, pos + 3)\n            else:\n                self.dfs(path, pos + 2)\n        elif path[pos] == 'D' and path[pos + 1] == 'U':\n            if path[pos + 2] == 'R':\n                self.union(path[pos], path[pos + 1])\n                self.union(path[pos], path[pos + 2])\n                self.dfs(path, pos + 3)\n            elif path[pos + 2] == 'L':\n                self.union(path[pos], path[pos + 1])\n                self.union(path[pos], path[pos + 2])\n                self.dfs(path, pos + 3)\n            else:\n                self.dfs(path, pos + 2)\n        else:\n            self.dfs(path, pos + 1)\n\n    def solution(self, stdin):\n        input = stdin.splitlines()\n        n = int(input[0])\n        path = input[1]\n        self.dfs(path, 0)\n\n        visited = set()\n        for i in range"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('LRUD') == 'LRUD'\nassert solution('LLDDR') == 'LDRR'\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"LRUD\") == \"1 2\"\nassert solution(\"LURD\") == \"1 4\"\nassert solution(\"RRUDU\") == \"3 4\"\nassert solution(\"LLDDR\") == \"-1\"\nprint('all tests passed...')\n\"\"\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('LRUD') == '1 2'\nassert solution('LURD') == '1 4'\nassert solution('RRUDU') == '3 4'\nassert solution('LLDDR') == '-1'\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('LRUD') == 'L1R2U1D'\nassert solution('LURD') == 'L1R2U1D'\nassert solution('RRUDU') == 'R3U1D'\nassert solution('LLDDR') == 'L1R2U1D'\n\"\"\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('LRUD') == '1 2'\nassert solution('LURD') == '1 4'\nassert solution('RRUDU') == '3 4'\nassert solution('LLDDR') == '-1'\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('LRUD') == 'LR'\nassert solution('LLR') == 'LR'\nassert solution('RRLD') == 'RRLD'\nassert solution('RLRD') == 'RLRD'\n\n\"\"\"\n\nfrom collections import Counter\nfrom functools import reduce\nfrom operator import add"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"LRUD\") == \"1 2\"\nassert solution(\"LURD\") == \"1 4\"\nassert solution(\"RRUDU\") == \"3 4\"\nassert solution(\"LLDDR\") == \"-1\""
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"LRUD\") == \"LR\"\nassert solution(\"LURD\") == \"L\"\nassert solution(\"RRUDU\") == \"RRU\"\nassert solution(\"LLDDR\") == \"LLDR\"\nassert solution(\"LLLL\") == \"LLLL\"\n\n\"\"\"\n\n\nimport sys\nimport functools\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"LRUD\") == \"LRRD\"\nassert solution(\"RDRULULDRUDLRRD\") == \"RDRDDRDRDDRDRDRDRDRDDRDDRDRDDRDRDRDRDRDRDRDRDDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDR"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3') == '3\\n1\\n0\\n2'\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\") == \"3\"\nassert solution(\"5\\n2 1 5 4 3\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"4\\n1 1 1 3\") == \"2\"\nprint('The local tests are done. Click on \"Check\" for more details about submission')\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('7\\n4 2 4 1 4 3 4') == '3'\nassert solution('5\\n2 1 5 4 3') == '1'\nassert solution('1\\n1') == '0'\nassert solution('4\\n1 1 1 3') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 7 4 1 4 3 4') == '3'\n\"\"\"\n\n\nfrom itertools import combinations\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a) == result\nprint(solution(a))\n\n\n\"\"\"\n\nimport math\nfrom collections import Counter\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n4 2 4 1 4 3 4') == '3'\nassert solution('5\\n2 1 5 4 3') == '1'\nassert solution('1\\n1') == '0'\nassert solution('4\\n1 1 1 3') == '2'\nprint('The local tests are done. Now task do.')\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\") == \"3\"\nassert solution(\"5\\n2 1 5 4 3\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"4\\n1 1 1 3\") == \"2\""
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n4 2 4 1 4 3 4') == '3'\n\"\"\"\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    result = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i == j:\n                continue\n            elif arr[i] == arr[j]:\n                result = max(result, j - i + 1)\n    print(result)\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n7\\n4 2 4 1 4 3 4\") == \"3\\n1\\n0\\n2\"\nassert solution(\"5\\n2 1 5 4 3\") == \"2\\n1\\n0\\n2\"\nassert solution(\"1\\n1\") == \"1\\n1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 4 1 4 3 4\") == \"3\"\nassert solution(\"5\") == \"1\"\nassert solution(\"1 1 1 3\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\n\n\"\"\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n9 4 1 7 10 1 6 5') == '121'\nassert solution('1\\n1337') == '0'\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2\\n2 3') == '2\\n'\nassert solution('8\\n9 4 1 7 10 1 6 5') == '121\\n'\nassert solution('1\\n1337') == '0\\n'\nprint('Passed')\n\"\"\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == \"121\"\nassert solution(\"1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == \"121\"\nassert solution(\"8 1\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == \"0\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8') == '121'\nassert solution('8\\n9 4 1 7 10 1 6 5\\n') == '0'\nassert solution('8\\n1337\\n') == '0'\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n9 4 1 7 10 1 6 5') == '121'\nassert solution('1\\n1337') == '0'\nassert solution('6\\n8 3 7 9') == '36'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\nassert solution(\"7\\n3 3 3 3 3 3 3 3\") == \"66\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n1 4\\n2 4\\n2 3\\n2 1\\n1 2\\n1 3\\n\") == \"121\"\n\"\"\""
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8\") == '121'\nassert solution(\"1\\n1337\") == '0'\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 2 1 3\\n10 6\") == '6'\nassert solution(\"5 10\\n20 100 50 20 100500\") == '0'\nassert solution(\"5 10\\n24 24 24 24 24 24 24 24 24 24\") == '8'\n\n\n\n>>> from datetime import datetime\n>>> s = datetime.now()\n>>> solution(\"5 10\\n20 100 50 20 100500\")\n'0'\n>>> datetime.now() - s\ndatetime.timedelta(seconds=3.566375)\n>>> s = datetime.now()\n>>> solution(\"5 10\\n24 24 24 24 24 24 24 24 24 24\")\n'8'\n>>> datetime.now() - s\ndatetime.timedelta(seconds=3.549650)\n\n\n\n\n----\nsolution([2,3,4,5,7,10,20,50,70,100,2000,500,700,1000,5000,10000,50000])\n\n\n\n'''\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\") == \"6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nimport sys\n\nn, k = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\n\nmin_moves = 0\n\nfor i in range(n):\n    remainder = a[i] % k\n    if remainder!= 0:\n        moves = a[i] // k + 1\n        min_moves += moves - 1\n        a[i] = k * moves\n\nfor i in range(1, n):\n    if a[i - 1] % k == 0:\n        a[i] = a[i - 1] + k\n    else:\n        a[i] = a[i - 1] + a[i] // k + 1\n\nprint(min_moves)"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 2 1 3\\n10 6') == '6'\nassert solution('10 6\\n8 7 1 8 3 7 5 10 8 9') == '0'\nassert solution('5 10\\n20 100 50 20 100500') == '227'\nassert solution('10 25\\n24 24 24 24 24 24 24 24 24 24') == '8'\n\n\n-----Explanation-----\n\nThe first test case is the one with number of test cases equal to 5.\n\nThe second test case has number of test cases equal to 5.\n\nIn the first test case:  the array contains 4 elements;  the required divisor is 3, so the solution is 6 moves.\n\nIn the second test case:  the array contains 10 elements;  the required divisor is 10, so the solution is 0 moves.\n\nIn the third test case:  the array contains 5 elements;  the required divisor is 10, so the solution is 227 moves.\n\nIn the fourth test case:  the array contains 10 elements;  the required divisor is 25, so the solution is 8 moves.\n\n\n-----Solution-----\n\n\"\"\"\n\nimport sys\n\nt = int(sys.stdin.readline())\n\nfor _ in range(t):\n    n, k = list(map(int, sys.stdin.readline().split()))\n    a = list(map(int, sys.stdin.readline().split()))\n    sum = 0\n    moves = 0\n\n    for i in range(n):\n        if a[i] % k!= 0:\n            sum += a[i] % k\n            moves += 1\n        a[i] = a[i] // k\n\n    for i in range(n):\n        if a[i] > 0:\n            moves += 1\n            sum += a[i]\n\n    if sum == 0:\n        print(moves)\n    else:\n        print(moves + sum)"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500') == '6'\nassert solution('4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500') == '18'\nassert solution('4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500') == '0'\nassert solution('4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500') == '227'\nassert solution('4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500') == '8'\n\n\n\n\n'''\n\nfrom sys import stdin\n\nt = int(stdin.readline())"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\") == '6\\n18\\n0\\n227\\n8'\nassert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\") == '6\\n18\\n0\\n227\\n8'\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\") == '6\\n18\\n0\\n227\\n8'\n\n\"\"\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '5\\n4\\n1 2 1 3\\n10\\6\\n8 7 1 8 3 7 5 10 8 9') == '6\\n18\\n0\\n227\\n8'\n\"\"\""
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\") == '6'\nassert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == '8'\nassert solution(\"5 10\\n1 2 3 4 5 6 7 8\\n\") == '0'\nassert solution(\"1 2 3 4 5 6 7 8\\n\") == '8'\n\n-----"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 1\\n1 1\\n2 2\") == \"1\"\nassert solution(\"2\\n2 2\\n1 1\\n1 1\") == \"2\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3\\n1 1\\n') == '1'\nassert solution('1 2 3\\n1 1\\n') == '2'\nassert solution('1 2 3\\n1 1\\n') == '2'\nassert solution('1 2 3\\n1 1\\n') == '2'\nassert solution('1 2 3\\n1 1\\n') == '2'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1,2') == '1'\nassert solution('1,1') == '1'\nassert solution('1,2,3') == '2'\nassert solution('1,2,3,2') == '2'\nassert solution('1,2,3,2,2') == '3'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2') == '2'\nassert solution('1\\n2\\n3') == '3'\nassert solution('1\\n2\\n3\\n3') == '3'\nassert solution('1\\n2\\n3\\n3\\n3') == '3'\nassert solution('1\\n2\\n3\\n3\\n3\\n3') == '3'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n2') == 1\n\"\"\"\n\nfrom typing import List\nimport itertools\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 20 30\") == \"3\"\nassert solution(\"10 10 10\") == \"3\"\nassert solution(\"20 20 10\") == \"2\"\nassert solution(\"10 10 10\") == \"3\"\nassert solution(\"10 10 10\") == \"3\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n1 1') == '2'\nassert solution('1\\n2') == '1'\nassert solution('2\\n2 2') == '1'\nassert solution('2\\n1 1 2') == '2'\nassert solution('3\\n1 2') == '2'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\") == \"4\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n7\") == \"5\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4 5') == '2'\nassert solution('1 2') == '2'\nassert solution('1 2 3') == '3'\nassert solution('1 1 1') == '1'\nassert solution('1 1 1 1') == '1'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n1\\n1') == '2'\nassert solution('1\\n2\\n1') == '2'\nassert solution('1\\n2\\n3\\n1\\n2') == '3'\n\nprint('passed')\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1) == [1]\nassert solution(2) == [1,1]\nassert solution(3) == [1,3,3,1]\nassert solution(4) == [1,4,6,4,1]\n\n\"\"\"\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == [1, 3, 3, 1]\n\"\"\"\n\n\"\"\"\nDP\ndp[i] represents the i-th row in the Pascal triangle\ndp[i] is built by adding the dp[i-1] and dp[i-2]\n\ntime: O(n)\nspace: O(n)\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        dp = [[1]]\n        for i in range(rowIndex):\n            dp.append([1] * (i + 2))\n            for j in range(1, i + 1):\n                dp[i + 1][j] = dp[i][j - 1] + dp[i][j]\n        return dp[rowIndex]\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == [1, 3, 3, 1]\n\n##"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == [1,3,3,1]\n\n\"\"\"\n\nimport numpy as np\n\nclass Solution:\n    def pascal_triangle(self, index: int) -> List[int]:\n        if index == 0:\n            return [1]\n\n        if index == 1:\n            return [1, 1]\n\n        result = np.array([1, 1])\n        for i in range(2, index + 1):\n            result = np.convolve(result, [1, 1])\n\n        return result\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == [1, 3, 3, 1]\n\n\"\"\"\n\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> list:\n        if rowIndex == 0:\n            return [1]\n\n        res = [[1], [1, 1]]\n\n        if rowIndex == 1:\n            return res[-1]\n\n        for i in range(2, rowIndex + 1):\n            temp = [1] * (i + 1)\n            for j in range(1, i):\n                temp[j] = res[-1][j - 1] + res[-1][j]\n            res.append(temp)\n\n        return res[-1]\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3) == [1,3,3,1]\n\"\"\"\n\nclass Solution:\n    \"\"\"O(k) time | O(k) space\"\"\"\n    def getRow(self, rowIndex: int) -> [int]:\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1,1]\n        currentRow = [1,1]\n        for row in range(2, rowIndex + 1):\n            nextRow = [1]\n            for i in range(len(currentRow) - 1):\n                nextRow.append(currentRow[i] + currentRow[i + 1])\n            nextRow.append(1)\n            currentRow = nextRow\n        return currentRow\n\n\nclass Solution2:\n    \"\"\"O(k) time | O(k) space\"\"\"\n    def getRow(self, rowIndex: int) -> [int]:\n        currentRow = [1]\n        for row in range(1, rowIndex + 1):\n            nextRow = [1]\n            for i in range(len(currentRow) - 1):\n                nextRow.append(currentRow[i] + currentRow[i + 1])\n            nextRow.append(1)\n            currentRow = nextRow\n        return currentRow\n\n\n\ns = Solution2()\nassert s.getRow(3) == [1,3,3,1]\nassert s.getRow(0) == [1]\nassert s.getRow(1) == [1,1]\nassert s.getRow(2) == [1,2,1]\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == [1,3,3,1]\nassert solution('7') == [1,5,10,10,5,1]\nassert solution('21') == [1,3,6,21,45,210,252,462,1716,5594,15741,531441,2922161,\n2251762,64356448,478638400,409096000,402692160,4611656000,4492160000,4308480640,\n4444846720,5042769024,4423073840,4784640160,516953952,7059704096,5317618176,\n6096044112,6447864064,6871382464,7122852160,7390782464,795949120,9041539072,\n8138464128,9071798960,9479457552,9863295616,1027710432,1047165920,1084848064,\n1105238272,1106354928,1106819552,1107657920,1207377760,1217309184,1249271040,\n1232139264,1251138592,1267199552,1274128064,1290541728,1296649024,1306883824,\n1310987824,1312339264,1315764288,1317537280,1318869152,1366791168,1350377520,\n1335576160,1322774720,1320341600,1321708416,1357986960,1398337824,1405759264,\n1415772864,1460807760,1466396864,1481316256,146560640,1446753760,1427337152,\n142464128,1411848640,1409834960,140806464,1395348256,1396206560,1395408064,\n1396176064,1386551760,1386131664,1395384560,1389337024,1389166464,1380496496,\n1371380896,1386356864,1382436160,1381718336,1398486464,1393625536,1397564480,\n1398933152,1398422432,139894928,1398702520,1399581664,1399296864,1398110560,\n1397833936,1396321728,1396129664,1395754864,1395347056,1390065248,1390411264,\n1393811264,1398129664,1398193664,1396261728,1395668864,1397933152,1391725472,\n1388254144,1387855136,138490928,1385922720,1385908480,1382819824,1381340096,\n1380908480,1385265760,1385151360,1386256736,1389288128,1395283280,1395111360,\n1394158720,1396341760,1397074240,1394969600,1394415552,1390491456,1381229568,\n1378747024,1387321600,1380332992,1372316256,1372010464,1371625120,1371636288,\n1372380288,1371788480,1372716672,1372866560,1372944256,1372725664,1373435728,\n1373637280,1374619168,1376627536,1378089280,1379798080,1379532160,1379999168,\n1379284736,1379462464,1375892416,1378093696,1377577760,1376886464,1375864256,\n1376770048,1376544128,1376355232,1376572160,1377027264,1376139568,1377698816,\n1377477696,1377526064,1377473360,1377846464,1377280256,1376832832,1376927104,\n1376941280,1376964064,1377087232,1377220352,1376710320,1376637184,1376664384,\n1376782880,1376994624,1378117728,1378263424,1378333520,1378406464,1378517472,\n1378246960,1379041600,1379209664,1379220352,1379278048,1379662576,1379718768,\n1379856064,1379933152,1380115264,1380764560,1380891360,1380990336,1380998928,\n1381719104,1382027296,1382136192,1382245664,1382745120,1382777216,1382539104,\n1383108800,1383181488,1383817280,1384190560,1384512128,1384734240,1384741632,\n1384786928,1384812928,1384928320,1384935904,1384840064,1384466208,1384633760,\n1384664192,1384801024,1384891824,1384869216,1385236512,1385253664,1385302560,\n1385546240,1385573248,1385932320,1386330400,1386714880,1386756864,1386877824,\n1387028864,1387052864,1386956224,1387107200,1387118464,1387057280,1387075232,\n1387069312,1387279680,1387295056,1387969792,1389898560,1390228528,1390302720,\n1391485120,1391635824,1391674528,1391751424,1392038816,1392194080,1392526368,\n1392543856,1392664736,1392686016,1392729536,1392807024,1392948992,1392992128,\n1393029824,1393137920,1393162080,1393193776,1393208064,1393318144,1393399232,\n1393609520,1393701312,1393708736,1393684416,1393753608,1393758464,1393688448,\n1393792256,1393808128,1393809472,1393877120,1393937216,1393970016,1393985408,\n1393991680,1393997760,1394009760,1394033152,1394087456,1394110240,1394119360,\n1394119456,1394166208,1394173664,1394187232,1394193520,1394362080,1394409728,\n1394443616,1394449216,1394488064,1394943232,1394953408,1394960384,1394966560,\n1394873248,1394899328,1394913600,1394946752,1394969424,1394978208,1394983392,\n1394986272,1394990240,1395021424,1395044992,1395064480,1395117472,1395119488,\n1395131552,1395136448,1395144864,1395149856,1395153664,1395160160,1395163744,\n1395168832,1395173632,1395177728,1395179200,1395190976,1395193248,1395197120,\n1395194224,1395195232,1395232720,13"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3) == [1,3,3,1]"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == [1, 4, 6, 4, 1]\nassert solution(\"5\") == [1, 5, 10, 10, 5, 1]\n\"\"\"\nimport bisect\nimport sys\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\n\"\"\""
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('00000000000000000000000010000000') == 1\nassert solution('0000000000000000000000001010111') == 3\nassert solution('111111111111111111111111111111101') == 31\n\"\"\""
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('00000000000000000000000000001011') == 3\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n:\n            n &= n - 1\n            count += 1\n        return count\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count('1')\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n:\n            count += 1\n            n = n & (n-1)\n        return count\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        # return bin(n).count('1')\n        count = 0\n        while n:\n            count += 1\n            n &= n - 1\n        return count"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\n\"\"\"\n\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count(\"1\")\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"01110\") == 3\nassert solution(\"11111111111111111111111111111101\") == 31\n\"\"\"\n\nfrom collections import Counter\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        cnt = 0\n        while n > 0:\n            if n & 1:\n                cnt += 1\n            n >>= 1\n        return cnt\n\n    def hammingWeight_1(self, n: int) -> int:\n        return sum([int(i) for i in list(str(n))])\n\nclass Solution2:\n    def hammingWeight(self, n: int) -> int:\n        cnt = 0\n        while n > 0:\n            n, reminder = divmod(n, 2)\n            cnt += reminder\n        return cnt\n\nclass Solution3:\n    def hammingWeight(self, n: int) -> int:\n        cnt = 0\n        while n > 0:\n            cnt += n & 1\n            n >>= 1\n        return cnt\n\nclass Solution4:\n    def hammingWeight(self, n: int) -> int:\n        cnt = 0\n        for _ in range(32):\n            cnt += n & 1\n            n >>= 1\n        return cnt\n\nclass Solution5:\n    def hammingWeight(self, n: int) -> int:\n        cnt = 0\n        while n > 0:\n            cnt += 1\n            n &= n-1\n        return cnt\n\nclass Solution6:\n    def hammingWeight(self, n: int) -> int:\n        cnt = 0\n        for i in range(32):\n            if n & (1 << i):\n                cnt += 1\n        return cnt\n\nclass Solution7:\n    def hammingWeight(self, n: int) -> int:\n        cnt = 0\n        for i in range(32):\n            if n & (1 << i):\n                cnt += 1\n        return cnt\n\nclass Solution8:\n    def hammingWeight(self, n: int) -> int:\n        cnt = 0\n        for i in range(32):\n            if n & (1 << i):\n                cnt += 1\n        return cnt\n\nclass Solution9:\n    def hammingWeight(self, n: int) -> int:\n        cnt = 0\n        for i in range(32):\n            if n & (1 << i):\n                cnt += 1\n        return cnt"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11100101') == 3\nassert solution('1101') == 3\nassert solution('11101') == 3\nassert solution('1111') == 4\nassert solution('11100111011101111011111111011011110110111111110110111111110110111111110111') == 62\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('00000000000000000000000010000000') == 1\nassert solution('00000000000000000000000010110010') == 3\nassert solution('1111111111111111111111111111111111') == 31\nassert solution('111111111111111111111111111111101') == 31\nassert solution('11111111111111111111111111101101') == 31\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\n\"\"\""
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        \n        return bin(n).count(\"1\")\n\n\"\"\"\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n > 0:\n            n &= n - 1\n            count += 1\n        return count\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count('1')"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"42\") == \"43\"\nassert solution(\"99\") == \"100\"\nassert solution(\"942\") == \"943\"\nassert solution(\"5432\") == \"5433\"\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1234\") == \"1235\"\nassert solution(\"54321\") == \"5432\"\nassert solution(\"98765\") == \"98766\"\nassert solution(\"54321\") == \"5432\"\nassert solution(\"12345\") == \"12346\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1234\") == \"1235\"\nassert solution(\"91234\") == \"91235\"\nassert solution(\"43211\") == \"43221\"\nassert solution(\"1\") == \"2\"\n\nassert solution(\"11\") == \"12\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1234') == '1235'\nassert solution('12') == '13'\nassert solution('1') == '2'\nassert solution('0') == '1'\nassert solution('-1') == '0'\n\"\"\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution([1,2,3]) == [1,2,4]\nassert solution([4,3,2,1]) == [4,3,2,2]\nassert solution([9,9,9]) == [1,0,0,0]\nassert solution([1,2,3,1]) == [1,2,4,1]\nassert solution([0]) == [1]\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123\") == \"124\"\n\"\"\""
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1234') == '1235'\nassert solution('9875') == '9976'\nassert solution('1111') == '1112'\nassert solution('9') == '10'\nassert solution('0') == '1'\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('123321') == '123422'"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1234\") == \"1235\"\nassert solution(\"91234\") == \"101235\"\nassert solution(\"1\") == \"2\"\nassert solution(\"4\") == \"5\"\nassert solution(\"1\") == \"2\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1234') == '1235'\nassert solution('54321') == '5432'\n\nassert solution('0') == '1'\nassert solution('1') == '2'\n\nassert solution('9') == '10'\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"4\"\nassert solution(\"10 10\") == \"20\"\n\"\"\"\nimport sys\n\na, b = map(int, sys.stdin.readline().split())\n\nprint(max(a + b, a - b, a * b))\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1') == '4'\n\"\"\"\n\nA, B = [int(i) for i in stdin.split()]\n\nprint(max(A + B, A - B, A * B))\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1') == '4'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == \"4\"\n\"\"\"\n\nA, B = map(int, input().split(' '))\n\nprint(max(A+B, A-B, A*B))\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"4\"\n\"\"\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1') == '4'\nassert solution('1 1') == '1'\n\"\"\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"4\"\n\n\"\"\"\nimport re\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1') == '4'\nassert solution('3 2') == '5'\n\"\"\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n3 1\n\"\"\") == \"4\"\n\nassert solution(\n\"\"\"\n1 2\n\"\"\") == \"3\"\n\nassert solution(\n\"\"\"\n1 1\n\"\"\") == \"1\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\\n\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n4 5\n0 5\n-2 4\n3 4\n4 -4\n\"\"\"\n) == '3'\n\n\"\"\"\nUse the function `bisect.bisect` from the `bisect` module.\n\"\"\"\n\"\"\"\nfrom bisect import bisect_left\nN, D = map(int, stdin.readline().split())\nX = [int(i) for i in stdin.readline().split()]\nY = [int(i) for i in stdin.readline().split()]\nX += [D]\nY += [D]\n\"\"\"\n\nfrom bisect import bisect_left\nN, D = map(int, stdin.readline().split())\nX = [int(i) for i in stdin.readline().split()]\nY = [int(i) for i in stdin.readline().split()]\nans = 0\nfor i in range(N+1):\n    d = abs(X[i]) + abs(Y[i])\n    if d <= D:\n        ans += 1\nprint(ans)\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4') == '3'\n\"\"\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 5\n0 5\n-2 4\n3 4\n4 -4\n''') == '3'\n\"\"\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\nprint('Hooray!')\n\n'''"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 5\n0 5\n-2 4\n3 4\n4 -4''') == '3'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_str) == test_result\nprint(solution(input_str))\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('12') == 'Yes'\n\nassert solution('18') == 'No'\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('12\\n') == 'Yes'\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''12\\n''') == \"Yes\"\nassert solution('''15\\n''') == \"No\"\nassert solution('''1\\n''') == \"Yes\"\nassert solution('''11\\n''') == \"No\"\nassert solution('''9\\n''') == \"Yes\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12\\n') == 'Yes'\n\n-------\n1. \u0414\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e N (> 0). \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u043b\u043e\u0432\u043e YES, \u0435\u0441\u043b\u0438 N \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0445\u043e\u0440\u043e\u0448\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c, \u0438 \u0441\u043b\u043e\u0432\u043e NO \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\n\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0438\u0441\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u0442\u043e\u0447\u043a\u0443 \u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u043d\u0430\u043a\u043e\u0432 \u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u043e\u0439 \u0434\u0440\u043e\u0431\u0438.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0427\u0438\u0441\u043b\u043e N.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u043b\u043e\u0432\u043e YES, \u0435\u0441\u043b\u0438 N \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0445\u043e\u0440\u043e\u0448\u0438\u043c \u0447\u0438\u0441\u043b\u043e\u043c, \u0438 \u0441\u043b\u043e\u0432\u043e NO \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\nSample Input 1:\n\n0\n\nSample Output 1:\n\nNO\n\nSample Input 2:\n\n1\n\nSample Output 2:\n\nYES\n\nSample Input 3:\n\n11\n\nSample Output 3:\n\nNO\n\nSample Input 4:\n\n11.1\n\nSample Output 4:\n\nNO"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\") == \"Yes\"\nassert solution(\"10\") == \"No\"\nassert solution(\"101\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(12) == 'Yes'\nassert solution(15) == 'No'\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12\") == \"Yes\"\nassert solution(\"20\") == \"No\"\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12') == 'Yes'\n\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12\\n') == 'Yes'\nprint(solution('12\\n'))\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n3 5 -1') == '12\\n8\\n10'\n\"\"\"\nimport sys"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5 -1') == '12\\n8\\n10'"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nX = list(map(int, sys.stdin.readline().split()))\n\ndp = [float('inf')] * n\ndp[0] = 0\nfor i in range(n):\n    for j in range(i):\n        if X[j] < X[i]:\n            dp[i] = min(dp[i], dp[j] + abs(X[i] - X[j]))\n\nfor i in range(1, n):\n    print(dp[i])\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\") == \"17\\n9\\n8\\n7\"\nassert solution(\"10 1 2\") == \"25\\n10\\n9\\n8\\n7\"\nassert solution(\"3 5 -1\") == \"12\\n8\\n10\"\nassert solution(\"3 1 1\") == \"7\\n5\\n5\"\nassert solution(\"5 5 0\") == \"0\\n5\\n5\\n5\\n5\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 -1') == '12\\n8\\n10'\n\"\"\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5 -1\") == \"12\\n8\\n10\"\n\"\"\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n\n-------------------\nimport math"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 -1\\n\") == \"12\\n8\\n10\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('a') == \"vowel\"\n\"\"\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"e\") == \"vowel\"\nassert solution(\"i\") == \"vowel\"\nassert solution(\"o\") == \"vowel\"\nassert solution(\"u\") == \"vowel\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"b\") == \"consonant\"\nassert solution(\"c\") == \"vowel\"\nassert solution(\"d\") == \"consonant\"\nassert solution(\"e\") == \"vowel\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a\") == \"vowel\"\n\nassert solution(\"b\") == \"consonant\"\n\nassert solution(\"c\") == \"vowel\"\n\nassert solution(\"d\") == \"consonant\"\n\nassert solution(\"e\") == \"vowel\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"a\") == \"vowel\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('a') == 'vowel'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"e\") == \"vowel\"\nassert solution(\"i\") == \"vowel\"\nassert solution(\"o\") == \"vowel\"\nassert solution(\"u\") == \"vowel\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_case_1) == test_case_2\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a\") == \"vowel\"\nassert solution(\"b\") == \"consonant\"\n\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a\") == \"vowel\"\n\"\"\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BBBWW\") == 1\nassert solution(\"WWBBBB\") == 0\nassert solution(\"WWWWBB\") == 2\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"WWWBB\") == \"3\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"WWWBB\") == \"0\"\nassert solution(\"BWBWBW\") == \"0\"\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('WWBWBWBWBW') == '1'\nassert solution('BWBWBWBW') == '0'\nassert solution('BWBWBWBWB') == '0'\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"WWWWWWW\") == \"0\"\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nprint(solution(\"BBBWW\"))\nassert solution(\"WWWBB\") == \"1\"\nprint(solution(\"WWWBB\"))\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('BBBWW') == '1'\n\"\"\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('BBBWW') == '1'\nassert solution('BWBW') == '1'\n\"\"\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('BWWW') == 1\nassert solution('BWBW') == 0\nassert solution('WBWBWBW') == 0\nassert solution('WWBBWWW') == 1\nassert solution('WWBBBWW') == 2\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"WWWWW\") == \"0\"\n\"\"\"\n\nS = stdin.readline().strip()\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 21\") == \"Yes\"\nassert solution(\"4 36\") == \"No\"\nassert solution(\"-21 -36\") == \"No\"\n\n'''\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 21') == \"Yes\"\nassert solution('1 21\\n2 3') == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 21\") == \"Yes\"\nassert solution(\"-1 21\") == \"No\"\nassert solution(\"1 2\") == \"No\"\n\nprint(solution(\"1 21\"))\nprint(solution(\"-1 21\"))\nprint(solution(\"1 2\"))\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 21') == 'Yes'\nassert solution('2 21') == 'No'\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 21\\n') == 'Yes'\n\"\"\"\n\na, b = input().split()\na, b = int(a), int(b)\nprint(\"Yes\" if int(str(a) + str(b)) ** 0.5 % 1 == 0 else \"No\")\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '1 21\\n'\n) == 'Yes'\nassert solution(\n    '1 1\\n'\n) == 'No'\nassert solution(\n    '1 3\\n'\n) == 'No'\nassert solution(\n    '1 1\\n'\n) == 'Yes'\n\"\"\"\n\na, b = map(int, stdin.split(' '))"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12 21\") == 'No'\nassert solution(\"12 21\") == 'No'\nassert solution(\"32 34\") == 'Yes'\nassert solution(\"12 21\") == 'No'\nassert solution(\"12 21\") == 'No'\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 21\") == \"Yes\"\nassert solution(\"2 1\") == \"No\"\nassert solution(\"-1 1\") == \"No\"\n\"\"\"\n\nimport sys\n\nnums = [int(x) for x in sys.stdin.read().split(' ')]\na, b = nums\n\nprint('Yes' if (b*b - a) % 2 == 0 else 'No')\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution([\"7\", \"3 1 4 1 5 9 2\"]) == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\n\"\"\""
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 4 1 5 9 2\\n\") == 4\n\"\"\""
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n3 1 4 1 5 9 2') == 4\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1 1 1\\n') == '1'\nassert solution('10\\n1 2 3 5 7 10\\n') == '4'\nassert solution('7\\n1 1 1 1 1 1\\n') == '7'\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_cases[0]) == test_cases[1]\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == '4'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 4 1 5 9 2\") == \"4\"\n'''"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 4 1 5 9 2\\n\") == 4\n\"\"\"\n\nimport re\nimport sys\nfrom typing import Dict\n\nfrom collections import Counter\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n4\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '0'\nassert solution('3\\n3') == '0'\nassert solution('3\\n1') == '2'\n\"\"\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n4') == '5'\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n4\") == \"5\"\n\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def __init__(self, N, A):\n        self.N = N\n        self.A = A\n\n    def solution(self):\n        return self.numberOfBlackSquares()\n\n    def numberOfBlackSquares(self):\n        # Get the number of black squares for 1x1 grid\n        if self.N == 1:\n            return 1 if self.A == 0 else 0\n\n        # Get the number of black squares for 2x2 grid\n        if self.N == 2:\n            if self.A == 0:\n                return 0\n            elif self.A == 2:\n                return 2\n            elif self.A == 4:\n                return 1\n            elif self.A == 6:\n                return 1\n\n        # Get the number of black squares for NxN grid\n        if self.N == 3:\n            if self.A == 0:\n                return 0\n            elif self.A == 3:\n                return 3\n            elif self.A == 6:\n                return 2\n            elif self.A == 10:\n                return 1\n            elif self.A == 14:\n                return 1\n\n        if self.N == 4:\n            if self.A == 0:\n                return 0\n            elif self.A == 4:\n                return 4\n            elif self.A == 10:\n                return 2\n            elif self.A == 15:\n                return 2\n            elif self.A == 20:\n                return 1\n\n        if self.N == 5:\n            if self.A == 0:\n                return 0\n            elif self.A == 5:\n                return 5\n            elif self.A == 11:\n                return 3\n            elif self.A == 18:\n                return 2\n            elif self.A == 21:\n                return 2\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n4') == '5'\n\"\"\"\nimport sys"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n4') == '5'\n\"\"\"\n\n\"\"\"\nSample Input\n3\n4\n\nSample Output\n5\n\nExplanation\nThere are nine squares in a 3 \\times 3 square grid.\nFour of them will be painted white, so the remaining five squares will be painted black.\n\"\"\"\n\nn = int(input())\npaint = int(input())"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n4') == '5'\n\"\"\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n4') == '5'\n\"\"\"\n\n\"\"\"\n3\n4\n\nThere are nine squares in a 3 \\times 3 square grid.\nFour of them will be painted white, so the remaining five squares will be painted black.\n\"\"\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 6') == \"YES\"\nassert solution('3 5 7') == \"NO\"\n\n'''\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"3 3 4\") == \"NO\"\nassert solution(\"4 4 1\") == \"YES\"\nassert solution(\"10 1 10\") == \"YES\"\nassert solution(\"1 1 1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4 6') == 'YES'\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"1 2 4\") == \"NO\"\nassert solution(\"2 4 6\") == \"YES\"\nassert solution(\"2 4 6\") == \"YES\"\nassert solution(\"4 8 16\") == \"NO\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('1 2 1') == 'NO'\n\n'''"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4 6') == \"YES\"\nassert solution('1 3 5') == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('3 4 5') == 'NO'\n\"\"\"\n\na, b, c = map(int, input().split())"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('1 4 9') == 'YES'\nassert solution('10 40 70') == 'NO'\nassert solution('100 100 100') == 'NO'\nassert solution('1 2 3') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"1 1 1\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"29\") == 'Yes'\n\"\"\"\n\nn = stdin.readline()\n\nn_list = list(n)\nn_list.remove('\\n')\n\nfor i in range(len(n_list)):\n    if n_list[i] == '9':\n        print('Yes')\n        break\n    else:\n        print('No')\n        break\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"29\") == \"Yes\"\nassert solution(\"41\") == \"No\"\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"29\") == \"Yes\"\n\n-----\nThe one's digit of 29 is 9.\n\"\"\"\n\n\"\"\"\nThe one's digit of 29 is 9.\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\nprint(\"Yes\" if (n // 10) % 10 == 9 else \"No\")\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('29') == 'Yes'\nassert solution('10') == 'No'\nassert solution('12') == 'No'\nassert solution('19') == 'Yes'\n\nprint('All tests passed.')"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"29\") == \"Yes\"\nassert solution(\"22\") == \"No\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"29\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('29') == 'Yes'\n\"\"\"\n\na = int(input())\nb = a % 10\nc = (a - a%10) // 10\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('29') == 'Yes'\nassert solution('12') == 'No'\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"29\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"29\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3 1\\n1 2 4\\n') == '1'\nassert solution('2 1 0\\n1 2\\n') == '0'\nassert solution('1 2 0\\n1 2\\n') == '1'\n\"\"\"\nfrom math import inf\n\nN, M, X = map(int, input().split())\ncost = [0] + list(map(int, input().split()))\nadj = [[] for _ in range(N + 1)]\nfor _ in range(M):\n    a, b = map(int, input().split())\n    adj[a].append(b)\ndp = [[inf] * (N + 1) for _ in range(2)]\ndp[0][X] = dp[1][X] = 0\nfor k in range(1, N + 1):\n    dp[0][k] = dp[1][k] = cost[k]\nfor k in range(1, N + 1):\n    for j in adj[k]:\n        dp[0][j] = min(dp[0][j], dp[0][k] + 1)\n    for i in range(k + 1, N + 1):\n        dp[1][i] = min(dp[1][i], dp[0][i] + 1)\n    dp[0], dp[1] = dp[1], dp[0]\nprint(min(dp[0][1:]))\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 3\\n1 2 4') == '1'\nassert solution('5 3 3\\n1 2 3') == '2'\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 3\\n1 2 4') == '1'\n\"\"\""
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\nassert solution(\"5 1 2\\n2 3 4\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3\") == \"2\"\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 3\\n1 2 4\\n') == '1'"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 3 3\n1 2 4''') == '1'\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\nassert solution(\"10 10 0\\n1 2 3 4 5 6 7 8 9 10\") == \"0\"\nassert solution(\"10 10 3\\n1 2 3 4 5 6 7 8 9 10\") == \"3\"\nassert solution(\"100 100 3\\n13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 3\\n1 2 4') == '1'\nassert solution('2 2 1\\n1 1 2') == '0'\nassert solution('2 2 2\\n1 2 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\nassert solution(test_input_4) == test_output_4\n\"\"\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n6\n3 2 1 3 1 4\n\"\"\"\n) == \"9\"\nassert solution(\n\"\"\"\n5\n1 2 2 2 3\n\"\"\"\n) == \"4\"\nassert solution(\n\"\"\"\n3\n3 1 4\n\"\"\"\n) == \"0\"\nassert solution(\n\"\"\"\n5\n3 1 4 3\n\"\"\"\n) == \"4\"\nassert solution(\n\"\"\"\n4\n3 1 4 3\n\"\"\"\n) == \"4\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n.\\n###\\n.#.\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n.#.\\n###\\n.#.\") == \"Yes\"\nassert solution(\"3 3\\n#.\\n###\\n#.\") == \"No\"\n\nassert solution(\"3 3\\n.##\\n###\\n#.#\") == \"Yes\"\nassert solution(\"3 3\\n#.##\\n###\\n#.#\") == \"No\"\n\nassert solution(\"3 3\\n#.\\n#.\\n#.\") == \"Yes\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n.#\\n###\\n.#\\n') == 'Yes'\nassert solution('3 3\\n..\\n..\\n..\\n') == 'No'\nassert solution('4 4\\n.###\\n#...\\n#...\\n') == 'Yes'\nassert solution('4 4\\n.###\\n#...\\n#...\\n') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'Yes'\nassert solution('.') == 'Yes'\nassert solution('#.') == 'Yes'\nassert solution('#.#') == 'No'\nassert solution('#.#.#') == 'Yes'\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('.#.#') == 'Yes'\nassert solution('.#.##') == 'No'\nassert solution('.#.#.#') == 'No'\nassert solution('.#.###') == 'Yes'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n#..\\n###\\n.#.') == 'Yes'\nassert solution('3 3\\n#..\\n###\\n..#') == 'No'\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3\\n.#.\\n###\\n.#.') == 'Yes'\nassert solution('5 5\\n...\\n...\\n...\\n...') == 'Yes'\n\n\"\"\"\n\nH, W = [int(i) for i in input().split()]\ns = [input() for _ in range(H)]\n\nfor i in range(1, H):\n    for j in range(1, W):\n        if (i % 2 == 0 and j % 2 == 0) or (i % 2 == 1 and j % 2 == 1):\n            if s[i][j] == '.':\n                if (s[i - 1][j] == '.' and s[i][j - 1] == '.'):\n                    s[i][j] = '#'\n\nfor i in range(H):\n    for j in range(W):\n        print(s[i][j], end='')\n    print()\n\nprint('Yes' if s[-1][-1] == '#' else 'No')\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n.#.\\n###\\n.#.') == 'Yes'\nassert solution('3 3\\n###\\n###\\n###') == 'No'\nassert solution('3 3\\n...\\n...\\n...') == 'Yes'\nassert solution('2 2\\n..\\n..') == 'No'\n\n----------------------"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n#.#\\n###\\n.#.\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\".#.\\n###\\n.#.\") == 'Yes'\nassert solution(\"#.\\n###\\n#.\") == 'No'\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 30 20') == 'Yes'\nassert solution('30 30 10') == 'No'\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 20 30\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"110 300 420\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\"\n\n\"\"\"\nimport numpy as np\nimport math\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\"\n\"\"\"\n\na, b, c = map(int, stdin.readline().split())\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 30 20') == 'Yes'\nassert solution('30 10 20') == 'No'\n\"\"\"\n\n\"\"\"\n\n\u7d44\u307f\u5408\u308f\u305b\u5168\u63a2\u7d22\n\n\"\"\"\nimport itertools\nfrom collections import Counter\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"20 10 30\") == \"No\"\nassert solution(\"30 20 10\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 8 7 1') == 'Left'\nprint(solution(stdin), end='')\n\n\"\"\"\n\na,b,c,d = map(int, input().split())\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 8 7 1''') == 'Left'\nassert solution('''3 3 2 1''') == 'Balanced'\nassert solution('''3 3 3 1''') == 'Right'\nassert solution('''3 8 7 2''') == 'Right'\nassert solution('''1 2 2 3''') == 'Left'\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 8 7 1') == 'Left'\n\n-------Solution-------\n\"\"\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 8 7 1\") == 'Left'\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\nprint(solution(\"3 8 7 1\"))\n\n\"\"\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 8 7 1') == 'Left'\nassert solution('1 2 3 4') == 'Balanced'\nassert solution('1 2 2 2') == 'Right'\n\"\"\"\n\na, b, c, d = [int(x) for x in input().split()]\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 8 7 1') == 'Left'\n\n---\n\na = int(input())\nb = int(input())\nc = int(input())\nd = int(input())"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 8 7 1') == 'Left'\n\n-----Explanation-----\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n\"\"\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n\") == \"8\"\n\n\"\"\"\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n3\n1 1 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n5\n0 0 0 0 0 0 0 0 0 0 0\n3\n1 1 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n5\n1 1 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n5\n0 0 0 0 0 0 0 0 0 0 0\n\"\"\"\n        output = \"\"\"8\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"2\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n5\n1 1 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n5\n0 0 0 0 0 0 0 0 0 0 0\n1\n1 1 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n5\n1 1 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n5\n0 0 0 0 0 0 0 0 0 0 0\n\"\"\"\n        output = \"\"\"9\"\"\"\n        self.assertIO(input, output)\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2') == '8'\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n0 1 1 0 0\\n1 1 1 1 1\\n0 0 1 0 0\\n0 0 1 0 0\\n0 0 0 1 0\\n0 0 0 1 0\\n0 0 0 1 0\\n0 0 0 1 0\\n1 0 1 1 0\\n0 1 1 1 1\") == \"8\"\nassert solution(\"4\\n1 1 1 0 0\\n1 1 1 1 1\\n0 0 1 0 0\\n0 0 1 0 0\\n0 0 0 1 0\\n0 0 0 1 0\\n0 0 0 1 0\\n1 0 1 1 0\\n0 1 1 1 1\") == \"8\"\nassert solution(\"4\\n1 1 1 0 0\\n1 1 1 1 1\\n0 0 1 0 0\\n0 0 1 0 0\\n0 0 0 1 0\\n0 0 0 1 0\\n0 0 0 1 0\\n1 0 1 1 0\\n0 1 1 1 1\") == \"8\"\nassert solution(\"4\\n1 1 1 0 0\\n1 1 1 1 1\\n0 0 1 0 0\\n0 0 1 0 0\\n0 0 0 1 0\\n0 0 0 1 0\\n1 0 1 1 0\\n0 1 1 1 1\") == \"8\"\nassert solution(\"4\\n1 1 1 0 0\\n1 1 1 1 1\\n0 0 1 0 0\\n0 0 1 0 0\\n0 0 0 1 0\\n0 0 0 1 0\\n1 0 1 1 0\\n0 1 1 1 1\") == \"8\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n3\n0 0 1 1 0 0 1\n1 0 1 1 1 0 1\n0 0 1 1 1 1 1\n\"\"\"\n) == \"8\"\n\"\"\""
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2''') == '8'\nassert solution('''5\n1 1 0 1 0 0 0 1 0 1\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0''') == '0'\n'''\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n'''\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\") == \"8\"\n\n\"\"\"\nimport sys\nfrom typing import List\nimport math"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\") == \"8\"\nassert solution(\"1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\") == \"8\"\n\"\"\"\n\nimport sys\n\n\nclass MyClass:\n    def __init__(self, stdin):\n        self.stdin = stdin\n        self.n = int(self.stdin[0])\n        self.data_list = []\n        self.count_list = []\n        for i in range(1, len(self.stdin)):\n            self.data_list.append(self.stdin[i].split())\n        self.count_list = [0] * self.n\n        for item in self.data_list:\n            if item[0] == '1':\n                self.count_list[int(item[1]) - 1] += 1\n        self.result = -sys.maxsize\n\n    def solution(self) -> str:\n        self.dfs(0, 0, 0)\n        return self.result\n\n    def dfs(self, i, count, sum_value):\n        # \u7d42\u4e86\u6761\u4ef6\n        if i == self.n:\n            self.result = max(self.result, sum_value)\n            return\n\n        # \u901a\u308a\u306e\u6570\u304c\u6b8b\u3063\u3066\u3044\u308b\u5834\u5408\n        if count < self.count_list[i]:\n            self.dfs(i + 1, count, sum_value)\n\n        # \u901a\u308a\u306e\u6570\u304c\u6b8b\u3063\u3066\u3044\u306a\u3044\u5834\u5408\n        if count >= self.count_list[i]:\n            self.dfs(i + 1, 0, sum_value + int(self.data_list[i][2]))\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\") == \"8\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\") == \"8\"\nassert solution(\"3 4 5 6 7 8 9 -2 -3 4 -2\") == \"12\"\n\"\"\""
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1 1 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\\n\") == 8\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('269-6650') == 'Yes'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('269-6650') == 'Yes'\nassert solution('266650') == 'No'\nassert solution('2666509') == 'No'\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"269-665-50\") == \"No\"\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('269-6650') == 'Yes'\n\"\"\"\n\nA, B = map(int, input().split())\nS = input()\nprint(\"Yes\" if (A + 1) == (S.index(\"-\")) and (len(S) - 1) == (S.count(\"-\")) and (len(S) == A + B + 1) else \"No\")\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3') == 'Yes'\nassert solution('1 1') == 'No'\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"2344\") == \"No\"\n\"\"\"\n\na, b = input().split(\" \")\na, b = int(a), int(b)\ns = input()"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"3 4\\n\"\n    \"269-6650\"\n) == \"Yes\"\nassert solution(\n    \"2 4\\n\"\n    \"5-4\"\n) == \"No\"\n\"\"\"\n\n\nimport sys\n\na, b = map(int, sys.stdin.readline().split())\ns = sys.stdin.readline().strip()"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"269-6651\") == \"No\"\nassert solution(\"269-6-50\") == \"No\"\nassert solution(\"269-6-500\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"3 4\\n269-6650\") == \"Yes\"\nassert solution(\n\"4 5\\n369-8899\") == \"No\"\nassert solution(\n\"4 4\\n369-2999\") == \"No\"\nassert solution(\n\"4 5\\n369-2999\") == \"No\"\nassert solution(\n\"4 4\\n369-0999\") == \"Yes\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 6\") == '1'\nassert solution(\"2 2 6\") == '1'\nassert solution(\"3 2 3\") == '0'\n\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 6\") == \"1\"\nassert solution(\"6 1 4\") == \"3\"\nassert solution(\"1 0 5\") == \"2\"\n\"\"\"\nimport math"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2 6') == '1'\nassert solution('1 3 5') == '2'\nassert solution('10 10 10') == '0'\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\"\n\nimport math\n\n\"\"\"\nfor each line of input, we want to break it into a list of integers.\nwe can do this with.split().\n\n[\n    [\"W\", \"a\", \"b\"],\n    [\"3\", \"2\", \"6\"]\n]\n\"\"\"\n\nw, a, b = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2 6') == '1'\nprint(solution(input()))\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 6\") == \"1\"\nassert solution(\"3 2 4\") == \"0\"\nassert solution(\"1 2 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 5\") == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 6\") == \"1\"\nassert solution(\"5 4 7\") == \"4\"\nassert solution(\"100 100 100\") == \"0\"\nassert solution(\"10 10 10\") == \"0\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 8 2\") == \"3 4 7 8\"\n\"\"\""
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 8 2') == '3'\nassert solution('4 8 2') == '4'\nassert solution('3 7 2') == '7'\nassert solution('4 7 2') == '4'\nassert solution('1 10 10') == '1'\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 8 2') == '3 4 7 8'\n\"\"\"\nimport math\n\nA, B, K = [int(i) for i in stdin.readline().split()]\n\nsmallest, largest = [], []\nfor i in range(A, B + 1):\n    if len(smallest) < K:\n        smallest.append(i)\n    if len(largest) < K:\n        largest.append(i)\n    if len(largest) > K:\n        largest.pop(0)\n    if len(smallest) > K:\n        smallest.pop(0)\n    if len(smallest) == K:\n        smallest.sort()\n    if len(largest) == K:\n        largest.sort(reverse=True)\n    if smallest == largest:\n        print(smallest[0])\n        break\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 8 2') == '3 4 7 8'\n\"\"\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 8 2') == '3 4 7 8'\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\n\"\"\""
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 8 2') == '3'\nassert solution('1 2 2') == '1'"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n'''"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\nprint(\"Teste unit\u00e1rio passou para: \", solution(\"AtCoder Beginner Contest\"))\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5 4') == 'YES'\n\"\"\"\n\n\"\"\"\nGiven a set of numbers and a target, return True if there is a subset of the given numbers that add up to the target.\n\nnums = [1, 2, 3, 4, 5]\ntarget = 5\n\nsum_to_target(nums, target)\n\nOutput: [1, 3]\n\nnums = [1, 2, 3, 4, 5]\ntarget = 8\n\nsum_to_target(nums, target)\n\nOutput: [1, 5]\n\"\"\"\n\n\"\"\"\nGiven a list of integers, return True if any value appears at least twice in the list, and return False if every element is distinct.\n\nl1 = [1, 2, 3, 1]\nl2 = [1, 2, 3, 4]\n\nno_duplicates(l1)\n\nOutput: True\n\nno_duplicates(l2)\n\nOutput: False\n\"\"\"\n\n\"\"\"\nGiven a list of integers, return True if every element in the list is a digit.\n\ndigit_list = [1, 2, 3]\n\ndigit_list_formatted(digit_list)\n\nOutput: True\n\ndigit_list_formatted([1, \"a\"])\n\nOutput: False\n\"\"\"\n\n\"\"\"\nGiven a list of integers, return True if every element in the list is a non-negative integer.\n\nnon_negative_integers(l1)\n\nOutput: True\n\nnon_negative_integers(l2)\n\nOutput: False\n\"\"\"\n\n\"\"\"\nGiven a list of integers, return True if the list is in ascending order, and return False otherwise.\n\nis_ascending(l1)\n\nOutput: True\n\nis_ascending(l2)\n\nOutput: False\n\"\"\"\n\n\"\"\"\nGiven a list of integers, return True if the list is in descending order, and return False otherwise.\n\nis_descending(l1)\n\nOutput: True\n\nis_descending(l2)\n\nOutput: False\n\"\"\"\n\n\"\"\"\nGiven a list of integers, return True if the list contains a 3 next to a 3 somewhere.\n\nhas_33(l1)\n\nOutput: True\n\nhas_33(l2)\n\nOutput: False\n\"\"\"\n\n\"\"\"\nGiven a list of integers, return True if the list contains a 3 next to a 3 somewhere.\n\nhas_33(l1)\n\nOutput: True\n\nhas_33(l2)\n\nOutput: False\n\"\"\"\n\n\"\"\"\nGiven a list of integers, return True if the list contains a 3 somewhere.\n\nhas_3(l1)\n\nOutput: True\n\nhas_3(l2)\n\nOutput: False\n\"\"\"\n\n\"\"\"\nGiven a list of integers, return the difference between the largest and smallest integers in the list.\n\ndifference_max_min(l1)\n\nOutput: 2\n\ndifference_max_min(l2)\n\nOutput: 1\n\"\"\"\n\n\"\"\"\nGiven a list of integers, return True if the list contains a 2 next to a 2 somewhere.\n\nhas_22(l1)\n\nOutput: True\n\nhas_22(l2)\n\nOutput: False\n\"\"\"\n\n\"\"\"\nGiven a list of integers, return True if the list contains a 2 next to a 2 somewhere.\n\nhas_22(l1)\n\nOutput: True\n\nhas_22(l2)\n\nOutput: False\n\"\"\"\n\n\"\"\"\nGiven a list of integers, find the first adjacent pair of elements that have the same value. If there is no such pair, return the string \u201cnot found\u201d.\n\nadjacent_elements_same_value(l1)\n\nOutput: (1, 3)\n\nadjacent_elements_same_value(l2)\n\nOutput: not found\n\"\"\"\n\n\"\"\"\nGiven a list of integers, find the largest element which is smaller than both of its adjacent elements. If there is no such element, return None.\n\nlargest_element_smaller_than_adjacent(l1)\n\nOutput: 3\n\nlargest_element_smaller_than_adjacent(l2)\n\nOutput: None\n\"\"\"\n\n\"\"\"\nGiven a list of integers, find the smallest element that is larger than both of its adjacent elements. If there is no such element, return None.\n\nsmallest_element_larger_than_adjacent(l1)\n\nOutput: 2\n\nsmallest_element_larger_than_adjacent(l2)\n\nOutput: None\n\"\"\"\n\n\"\"\"\nGiven a list of integers, remove the smallest value. Do not mutate the original list. If there are multiple elements with the same value, remove the one with a lower index. If you get an empty list, return an empty list.\n\nremove_smallest(l1)\n\nOutput: [2, 2, 2, 3]\n\nremove_smallest(l2)\n\nOutput: [7, 4, 5]\n\nremove_smallest(l3)\n\nOutput: [7, 8, 9]\n\"\"\"\n\n\"\"\"\nGiven a list of integers, remove the largest value. Do not mutate the original list. If there are multiple elements with the same value, remove the one with a lower index. If you get an empty list, return an empty list.\n\nremove_largest(l1)\n\nOutput: [1, 2, 3]\n\nremove_largest(l2)\n\nOutput: [1, 1]\n\nremove_largest(l3)\n\nOutput: [1]\n\"\"\"\n\n\"\"\"\nGiven a list of integers, replace every value with the average of its adjacent values.\n\nreplace_average(l1)\n\nOutput: [2, 2, 2, 3]\n\nreplace_average(l2)\n\nOutput: [1.5, 1.5, 1.5, 1.5]\n\nreplace_average(l3)\n\nOutput: [1, 1, 1, 1]\n\"\"\"\n\n\"\"\"\nGiven a list of integers, replace every value with the sum of its adjacent values.\n\nreplace_sum(l1)\n\nOutput: [4, 4, 4, 3]\n\nreplace_sum(l2)\n\nOutput: [2, 2, 2, 2]\n\nreplace_sum(l3)\n\nOutput: [4, 5, 6, 7]\n\"\"\"\n\n\"\"\"\nGiven a list of integers, replace every value with the sum of its divisors. The divisor of a number n is the product of all whole numbers less than n which divide n evenly.\n\nreplace_sum_divisors(l1)\n\nOutput: [4, 4, 4, 3]\n\nreplace_sum_divisors(l2)\n\nOutput: [1, 1, 1, 1]\n\nreplace_sum_divisors(l3)\n\nOutput: [2, 2, 2, 2]\n\"\"\"\n\n\"\"\"\nGiven a list of integers, find the pair of adjacent elements that have the largest product and return that product.\n\nadjacent_elements_product(l1)\n\nOutput: 24\n\nadjacent_elements_product(l2)\n\nOutput: 36\n\nadjacent_elements_product(l3)\n\nOutput: 0\n\"\"\"\n\n\"\"\"\nGiven a list of integers, find the pair of adjacent elements that have the largest product and return that product.\n\nadjacent_elements_product(l1)\n\nOutput: 24\n\nadjacent_elements_product(l2)\n\nOutput: 36\n\nadjacent_elements_product(l3)\n\nOutput: 0\n\"\"\"\n\n\"\"\"\nGiven a list of integers, find the number of occurrences of every number in the list.\n\noccurrences_count(l1)\n\nOutput: {1: 3, 2: 1, 3: 2}\n\noccurrences_count(l2)\n\nOutput: {1"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\nassert solution(\"4 6 2\") == \"NO\"\nassert solution(\"3 1 1\") == \"NO\"\nassert solution(\"3 2 1\") == \"YES\"\nassert solution(\"1 1 1\") == \"YES\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 4\\n\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4 1') == 'YES'\n\nimport sys\n\ninput()\n\na, b, x = list(map(int, sys.stdin.read().split()))"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 4') == 'YES'\nassert solution('2 3 4') == 'NO'\nassert solution('1 3 4') == 'NO'\nassert solution('2 2 4') == 'NO'\nassert solution('2 3 6') == 'YES'\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5 4\\n') == 'YES'\nassert solution('2 5 4\\n') == 'NO'\n\"\"\"\n\nA, B, X = map(int, input().split())\n\ndogs = X // 2"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 4') == 'YES'\nassert solution('5 5 3') == 'NO'\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\n\n---"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\nassert solution(\"4 1 7\") == \"NO\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5 4') == 'YES'\nassert solution('2 5 4') == 'NO'\nassert solution('2 6 4') == 'YES'\nassert solution('1 2 3') == 'NO'\nassert solution('1 2 2') == 'YES'\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100 17') == '83'\n\"\"\""
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 17\") == \"83\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 10\") == \"0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(sample_stdin) == sample_stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100 17') == '83'"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100 17\\n') == '83'\n\"\"\"\n\nX, t = input().split()\nX, t = int(X), int(t)\n\ng = X / t\n\nprint(X - (t * g))\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100 17') == '83'\nassert solution('1 2') == '0'\n\"\"\"\n\nimport sys\nfrom math import sqrt"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '100 17'\n) == '83'\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '100 17'\n) == '83'\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 17\") == \"83\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100 17') == '83'\n\"\"\""
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1 1000000000\\n') == '1000000000000000000'\n\"\"\"\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n\") == \"2\"\n\"\"\"\n\nimport math\n\nN = int(stdin.readline())\na = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n10\\n20') == '20'\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1,2\") == \"2\"\nassert solution(\"2\\n-3,-1\") == \"1\"\nassert solution(\"3\\n1,2,3\") == \"6\"\nassert solution(\"3\\n0,2,5\") == \"20\"\n\n-----\nhttps://www.codewars.com/kata/5a09da20d58da7d3a2000054/train/python\n\n\"\"\""
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1\\n1') == '1'\n\"\"\""
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n4\n1\n2\n3\n4\n''') == '-1'\nassert solution('''\n3\n4\n7\n10\n''') == '4'\n\"\"\"\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n100\\n100') == '200'\nassert solution('1\\n100') == '100'\n\"\"\"\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3\\n1\\n2\") == \"6\"\nassert solution(\"5\\n4\\n1\\n2\\n3\") == \"24\"\n\"\"\"\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n\nimport sys\nimport operator"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1000000000000000 1000000000') == '1000000000000000000'\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2018\\n218') == \"Yes\"\n\n-----Explanation-----\nThe person is able to pay exactly 2018 yen using four 500-yen coins and 18 1-yen coins.\n\"\"\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2018 218\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(print(\"Yes\" if... else \"No\"))\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2018\\n218') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('218\\n2018') == 'Yes'\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2018\\n218\\n') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2018\\n218') == 'Yes'\n\"\"\"\n\n\"\"\"\nGiven the integer N, print YES if N is exactly divisible by the number A. Otherwise, print NO.\n\n-----Input-----\nThe first line contains an integer T, the number of test cases.\nThe next T lines contains two integers each.\n\n-----Output-----\nFor each test case, output YES if N is exactly divisible by the number A, otherwise, output NO.\n\n-----Sample Input-----\n2\n6 10\n10 20\n\n-----Sample Output-----\nYES\nNO\n\"\"\"\n\n\"\"\"\nGiven the integer N, print YES if it is divisible by the number A, otherwise, print NO.\n\n-----Constraints-----\n - N is an integer between 1 and 10000 (inclusive).\n - A is an integer between 1 and 10000 (inclusive).\n\n-----Input-----\nThe first line contains an integer T, the number of test cases.\nThe next T lines contains two integers each.\n\n-----Output-----\nFor each test case, print YES if N is divisible by the number A, otherwise, print NO.\n\n-----Sample Input-----\n2\n6 10\n10 20\n\n-----Sample Output-----\nYES\nNO\n\"\"\"\n\n\"\"\"\nGiven an integer N, print YES if it is divisible by the number A, otherwise, print NO.\n\n-----Constraints-----\n - N is an integer between 1 and 1000000 (inclusive).\n - A is an integer between 2 and 10 (inclusive).\n\n-----Input-----\nThe first line contains an integer T, the number of test cases.\nThe next T lines contains two integers each.\n\n-----Output-----\nFor each test case, print YES if N is divisible by the number A, otherwise, print NO.\n\n-----Sample Input-----\n3\n1 2\n4 7\n10 12\n\n-----Sample Output-----\nYES\nNO\nYES\n\"\"\"\n\n\"\"\"\nGiven the integer N, print YES if N is divisible by the number A, otherwise, print NO.\n\n-----Constraints-----\n - N is an integer between 1 and 1000000000 (inclusive).\n - A is an integer between 2 and 10 (inclusive).\n\n-----Input-----\nThe first line contains an integer T, the number of test cases.\nThe next T lines contains two integers each.\n\n-----Output-----\nFor each test case, print YES if N is divisible by the number A, otherwise, print NO.\n\n-----Sample Input-----\n3\n1 2\n4 7\n10 12\n\n-----Sample Output-----\nYES\nNO\nYES\n\"\"\"\n\n\"\"\"\nGiven two non-negative integers, A and B, print YES if A can be divided by B without any remainder, otherwise, print NO.\n\n-----Constraints-----\n - A is an integer between 0 and 10^5 (inclusive).\n - B is an integer between 0 and 10^5 (inclusive).\n\n-----Input-----\nThe first line contains an integer T, the number of test cases.\nThe next T lines contains two non-negative integers, each in a separate line.\n\n-----Output-----\nFor each test case, print YES if A can be divided by B without any remainder, otherwise, print NO.\n\n-----Sample Input-----\n4\n4 3\n6 2\n5 1\n3 0\n\n-----Sample Output-----\nYES\nYES\nNO\nNO\n\"\"\"\n\n\"\"\"\nGiven a number A, print YES if it is divisible by the number B, otherwise, print NO.\n\n-----Constraints-----\n - A is an integer between 1 and 10^5 (inclusive).\n - B is an integer between 1 and 10^5 (inclusive).\n\n-----Input-----\nThe first line contains an integer T, the number of test cases.\nThe next T lines contains two non-negative integers, each in a separate line.\n\n-----Output-----\nFor each test case, print YES if A can be divided by B without any remainder, otherwise, print NO.\n\n-----Sample Input-----\n3\n5 3\n9 2\n8 1\n2 0\n\n-----Sample Output-----\nYES\nNO\nYES\n\"\"\"\n\n\"\"\"\nGiven a number A, print YES if it is divisible by the number B, otherwise, print NO.\n\n-----Constraints-----\n - A is an integer between 1 and 10^5 (inclusive).\n - B is an integer between 1 and 10^5 (inclusive).\n\n-----Input-----\nThe first line contains an integer T, the number of test cases.\nThe next T lines contains two non-negative integers, each in a separate line.\n\n-----Output-----\nFor each test case, print YES if A can be divided by B without any remainder, otherwise, print NO.\n\n-----Sample Input-----\n2\n8 1\n10 5\n\n-----Sample Output-----\nYES\nNO\n\"\"\"\n\n\"\"\"\nGiven an integer N, print YES if it is divisible by the number A, otherwise, print NO.\n\n-----Constraints-----\n - N is an integer between 1 and 10^18 (inclusive).\n - A is an integer between 2 and 10^5 (inclusive).\n\n-----Input-----\nThe first line contains an integer T, the number of test cases.\nThe next T lines contains two integers each, each in a separate line.\n\n-----Output-----\nFor each test case, print YES if N is divisible by the number A, otherwise, print NO.\n\n-----Sample Input-----\n5\n6 10\n24 0\n5 8\n20 20\n4 2\n10 3\n\n-----Sample Output-----\nYES\nYES\nNO\nNO\nYES\n\"\"\"\n\n\"\"\"\nGiven an integer N, print YES if it is divisible by the number A, otherwise, print NO.\n\n-----Constraints-----\n - N is an integer between 1 and 10^18 (inclusive).\n - A is an integer between 2 and 10^5 (inclusive).\n\n-----Input-----\nThe first line contains an integer T, the number of test cases.\nThe next T lines contains two integers each, each in a separate line.\n\n-----Output-----\nFor each test case, print YES if N is divisible by the number A, otherwise, print NO.\n\n-----Sample Input-----\n5\n6 10\n24 0\n5 8\n20 20\n4 2\n10 3\n\n-----Sample Output-----\nYES\nYES\nNO\nNO\nYES\n\"\"\"\n\n\"\"\"\nGiven an integer N, print YES if it is divisible by the number A, otherwise, print NO.\n\n-----Constraints-----\n - N is an integer between 1 and 10^18 (inclusive).\n - A is an integer between 2 and 10^5 (inclusive).\n\n-----Input-----\nThe first line contains an integer T, the number of test cases.\nThe next T lines contains two integers each, each in a separate line.\n\n-----Output-----\nFor each test case, print YES if N is divisible by the number A, otherwise, print NO.\n\n-----Sample Input-----\n5\n6 10\n24 0\n5 8\n20 20\n4 2\n10 3\n\n-----Sample Output-----\nYES\nYES\nNO\nNO\nYES\n\"\"\"\n\n\"\"\"\nGiven an integer N, print YES if it is divisible by the number A, otherwise, print NO.\n\n-----Constraints-----\n - N is an integer between 1 and 10^18 (inclusive).\n - A is an integer between 2 and 10^5 (inclusive).\n\n-----Input-----\nThe first line contains an integer T, the number of test cases.\nThe next T lines contains two integers each, each in a separate line.\n\n-----Output-----\nFor each test case, print YES if N is divisible by the number A, otherwise, print NO.\n\n-----Sample Input-----\n5\n6 10\n24 0\n5 8\n20 20\n4 2\n10 3\n\n-----Sample Output-----\nYES\nYES\nNO\nNO\nYES\n\"\"\"\n\n\"\"\"\nGiven an integer N, print YES if it is divisible by the number A, otherwise, print NO.\n\n-----Constraints-----\n - N is an integer between 1 and 10^18 (inclusive).\n - A is an integer between 2 and 10^5 (inclusive).\n\n-----Input-----\nThe first line contains an integer"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\"\"\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3 6') =='safe'\n\"\"\"\n\nX, A, B = map(int, stdin.read().split(' '))\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') =='safe'\nassert solution('1 2 3') == 'dangerous'\nassert solution('4 3 6') =='safe'\n\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 6') =='safe'\nassert solution('4 3 7') == 'dangerous'\nassert solution('4 2 6') == 'dangerous'\nassert solution('4 3 6') == 'dangerous'\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 6') =='safe'\n\n---\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\"\"\"\n\nX, A, B = map(int, input().split())\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\nassert solution(\"1 1 1\") == \"dangerous\"\nassert solution(\"1 1 2\") == \"dangerous\"\nassert solution(\"3 1 2\") == \"dangerous\"\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\n\"\"\"\n\n\nimport os\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"4 3 6\"\n    ) == \"safe\"\n\"\"\"\n\nX, A, B = (int(i) for i in input().split())"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\nassert solution(\"3 3 1\") == \"dangerous\"\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == '9'\nassert solution('10') == '9'\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == '9'\nassert solution('5') == '3'\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == '9'\nassert solution('1') == '1'\nassert solution('10^9') == '9'\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"9\"\nassert solution(\"100\") == \"99\"\nassert solution(\"1000\") == \"999\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"9\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == '9'\nassert solution('1') == '0'\nassert solution('2') == '1'\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == '9'\nassert solution('100') == '99'\nassert solution('1000') == '999'\nassert solution('10000') == '9996'\nassert solution('100000') == '99999'\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"9\"\nassert solution(\"3\") == \"1\"\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == '9'\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2 3\\n1 1') == '10'\nprint('Teste 1 feito com sucesso!')\nassert solution('1\\n1\\n1\\n1\\n1\\n') == '3'\nprint('Teste 2 feito com sucesso!')\nassert solution('10\\n9\\n8\\n7\\n6\\n5\\n4\\n3\\n2\\n1\\n1\\n') == '10'\nprint('Teste 3 feito com sucesso!')\nprint('Todos os testes passaram. <3')\n\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 3\") == \"10\"\nassert solution(\"1\\n1 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2 3\\n1 1') == '10'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n2 3\\n1 1\\n3 2\\n') == '10'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\ntakahashi = [0] * (n + 1)\naoki = [0] * (n + 1)\n\nfor i in range(1, n + 1):\n    t, a = map(int, sys.stdin.readline().split())\n    takahashi[i] = t\n    aoki[i] = a\n\nmin_votes = sys.maxsize\ntakahashi.append(0)\naoki.append(0)\n\nfor i in range(1, n + 2):\n    takahashi_sum = sum(takahashi[:i])\n    aoki_sum = sum(aoki[:i])\n    if (min_votes > takahashi_sum) or (min_votes > aoki_sum):\n        min_votes = min(takahashi_sum, aoki_sum)\n\nprint(min_votes)\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 1\\n3 2\") == \"10\"\n\"\"\"\n\nn = int(stdin.readline())\narr = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\narr.sort()\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n1 2') == '4'\nassert solution('1 3\\n2 2') == '9'\nassert solution('3 3\\n1 2\\n3 2') == '9'\nassert solution('3 3\\n3 2\\n1 2') == '9'\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n2 2') == '3'\nassert solution('1 1\\n1 2') == '4'\nassert solution('1 1\\n1 2\\n1 2') == '6'\nassert solution('1 1\\n1 2\\n1 2\\n1 2') == '8'\n\n\"\"\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n2 3\n1 1\n3 2\n''') == 10\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 3\\n1 1\") == '10'\nassert solution(\"3\\n1 1\\n3 2\") == '10'\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n2 3\\n1 1') == '10'\nassert solution('4\\n2 3\\n1 1') == '15'\n\n\"\"\"\n\nfrom fractions import gcd\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('uncopyrightable') == 'yes'\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcde\") == \"yes\"\nassert solution(\"aabcde\") == \"no\"\n\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\"\n\nS = stdin\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abcdefghijklmnopqrstuvwxyz') == 'yes'\nassert solution('aabcdefghijklmnopqrstuvwxyz') == 'no'\nassert solution('abcdefghijklmnopqrstuvwxy') == 'yes'\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'yes'\n\nprint('All tests passed.')\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('uncopyrightable') == 'yes'\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\nassert solution(\"abc\") == \"no\"\n\"\"\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('uncopyrightable') == 'yes'\n\"\"\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('uncopyrightable') == 'yes'\nassert solution('abc') == 'no'\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'yes'\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5WEEWW') == 1"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5WEEWW') == '1'\n\n\"\"\"\n\nfrom itertools import zip_longest\nfrom typing import List, Tuple\n\nfrom pydantic import BaseModel, validator\n\n\nclass Solution(BaseModel):\n    count: int\n\n\nclass Person(BaseModel):\n    direction: str\n\n    @validator('direction')\n    def valid_direction(cls, value: str):\n        if value not in ['E', 'W']:\n            raise ValueError('Invalid direction')\n        return value\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('WEEWW') == 1\nassert solution('WWWEW') == 1\nassert solution('WWEEW') == 2\nassert solution('WWWE') == 2\nassert solution('WWWWEWWWWEWW') == 2\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\">WB<\") == 3\nassert solution(\">WWW<\") == 3\nassert solution(\">WEW<\") == 3\n\n\"\"\""
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('WEEWW') == 1\n\"\"\""
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('WEEWW') == 1\n\nassert solution('WWEWW') == 0\n\nassert solution('WWEW') == 0\n\nassert solution('WE') == 0\n\nassert solution('W') == 0"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\nWEEWW') == '1'\n\"\"\""
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\nWEEWW') == '1'\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_solution\nprint(solution(input()))\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WEEWW\") == 1\n\nimport sys\nsys.setrecursionlimit(10000000)"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\nassert solution(\"4 3\\n1 2\\n2 3\\n1 4\\n4 1\") == \"2\\n2\\n1\\n1\\n0\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(stdin.rstrip('\\n'))\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n1 4\\n') == '2\\n2\\n1\\n1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\nassert solution(\"2 2\\n1 2\") == \"0\\n1\"\nassert solution(\"2 2\\n1 1\") == \"1\\n0\"\nassert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\\n\") == \"2\\n2\\n1\\n1\"\n\"\"\""
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == '2\\n2\\n1\\n1'\nassert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == '2\\n2\\n1\\n1'"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 3\n1 2\n2 3\n1 4''') == '2\\n2\\n1\\n1'\nassert solution('''4 4\n1 2\n2 3\n1 4\n3 4\n1 3''') == '1\\n1\\n0\\n0'"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n1 4') == '2\\n2\\n1\\n1'\n\"\"\""
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\""
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"3\\n5\\n10\") == \"30\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"1\\n5\\n10\\n15\") == \"30\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"1\\n2\") == \"2\"\n\"\"\"\nimport unittest\nimport math\n\nclass Solution:\n    def solution(self, stdin):\n        # input variables\n        N = int(stdin)\n        s_arr = [int(stdin) for stdin in stdin.split()]\n\n        if N == 1:\n            return str(s_arr[0])\n\n        for i in range(1, N):\n            if s_arr[i-1] * 2 <= s_arr[i]:\n                return str(s_arr[i-1] + s_arr[i])\n\n        return str(max(s_arr))\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def test(self):\n        # input variables\n        self.assertEqual(self.solution(\"3\\n5\\n10\\n15\"), \"25\")\n        self.assertEqual(self.solution(\"1\\n2\"), \"2\")\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n5\\n10\\n15') == '25'\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n5\n10\n15\n''') == '25'\nassert solution('''3\n5\n10\n15\n''') == '30'\nassert solution('''4\n1\n2\n3\n4\n''') == '4'\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"3\\n5\\n10\") == \"30\"\nassert solution(\"3\\n5\\n5\\n10\\n15\") == \"25\"\n\n\"\"\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n5\\n10\\n15\\n\") == \"25\"\nassert solution(\"3\\n5\\n0\\n15\\n\") == \"30\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\n\nassert solution(\"3\\n5\\n10\") == \"30\"\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"3\\n5\\n10\\n15\\n0\") == \"30\"\n\"\"\"\n\n\"\"\"\nThe input to the function/method consists of a string.\n\nThe output of the function should be a string.\n\"\"\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"4\\n1\\n2\\n3\") == \"13\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n5\") == \"25\"\nassert solution(\"1\\n1\\n2\\n3\\n4\") == \"15\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aabbca') == 2\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('ab') == ''\nassert solution('aba') == ''\nassert solution('abab') == ''\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aabbca') == 2\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aabbca') == 2\nassert solution('aaaaaaaa') == 1\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aabbca\") == 2\n\"\"\""
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aabbca') == 2\n\"\"\""
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abbca') == 2\nassert solution('abbbb') == 4\n\"\"\"\n\nn = int(stdin.readline().strip())\ns = stdin.readline().strip()\n\nmax_letters = 0\n\nfor i in range(n):\n    left = s[:i]\n    right = s[i:]\n    common_letters = len(set(left) & set(right))\n    if common_letters > max_letters:\n        max_letters = common_letters\n\nprint(max_letters)\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aabbca') == 2\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aabbca') == 2\nassert solution('aabccab') == 3\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Rainy\"\n\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Rainy') == 'Rainy'\nassert solution('Cloudy') == 'Cloudy'\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Sunny\"\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Rainy\") == \"Rainy\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Rainy') == 'Sunny'\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Cloudy\") == \"Sunny\"\nassert solution(\"Rainy\") == \"Rainy\"\n\"\"\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Rainy\") == \"Cloudy\"\n\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Rainy\") == \"Rainy\"\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('Sunny') == 'Cloudy'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Rainy\") == \"Rainy\"\nassert solution(\"Cloudy\") == \"Cloudy\"\n\"\"\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 17 120') == '119'\nprint('Test Successful')"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 17 120') == '119'\nassert solution('1 1 1') == '0'\nassert solution('1 1000 1') == '1000'\nassert solution('0 17 120') == '0'\nassert solution('7 17 1000') == '1000'\n\n\"\"\"\n\nimport sys\n\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass Param:\n    duration: int\n    plan: int\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 17 120') == '119'\n\"\"\"\n\nimport sys\n\n\"\"\"\na = int(sys.stdin.readline())\nb = int(sys.stdin.readline())\nc = int(sys.stdin.readline())\n\nprint(a * b * c)\n\"\"\"\n\na, b, c = map(int, sys.stdin.readline().split())\nprint(a * b * c)\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 17 120') == '119'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n\"\"\"\n\nimport sys\n\nN, A, B = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n\n\"\"\""
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 17 120') == '119'\nassert solution('7 20 120') == '119'\nassert solution('10 10 2000') == '10'\nassert solution('10 10 1200') == '10'\nassert solution('10 10 1010') == '12'\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(int(input()))\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n\"\"\""
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 17 120\\n') == '119'\n\n\"\"\""
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"3800\"\nprint(solution(\"1 1\"))\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1\\n') == '3800'\n\"\"\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1') == '3800'\nassert solution('4 6') == '3800'\nassert solution('1 1') == '3800'\nassert solution('1 100') == '3800'\n\"\"\"\n\n\nimport re\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\""
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1\\n') == '3800'\nassert solution('2 1\\n') == '7200'\nassert solution('3 1\\n') == '14400'\nassert solution('100 1\\n') == '60000'\n\"\"\"\n\nimport time\nimport math\nimport statistics"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n') == '3800'\nassert solution('2 2\\n') == '1000'\nassert solution('2 6\\n') == '1340'\nassert solution('3 3\\n') == '1710'\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3') == '3300'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n\") == \"3800\"\n\"\"\""
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n') == '3800'\n\"\"\"\n\nimport math\n\nn, m = input().split()\nn, m = int(n), int(m)"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('atcoderregularcontest') == 'b'\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == None\nassert solution('a') == None\nassert solution('ab') == None\nassert solution('aba') == 'c'\nassert solution('abc') == None\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n\nstdin = input()\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\nassert solution(\"atcoderbestpractice\") == None\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n\nstdin = input()\n\nlist_of_chars = sorted(list(stdin))\nfor char in list_of_chars:\n    if char not in list_of_chars:\n        print(char)\n        break\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == None\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\nprint(solution(\"atcoderregularcontest\"))\n\n\n\n\"\"\"\n\n\"\"\"\n\n---SOLUTION---\n\"\"\""
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n2 4 4 3''') == '4\\n3\\n3\\n4'\n\nassert solution('''6\n8 8 1 2 6 7''') == '6\\n1\\n4\\n7\\n8\\n2'\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\n--------------------------------------------------\nWhen l is an odd number, the median of l numbers a_1, a_2,..., a_l is the (\\frac{l+1}{2})-th largest value among a_1, a_2,..., a_l.\nYou are given N numbers X_1, X_2,..., X_N, where N is an even number.\nFor each i = 1, 2,..., N, let the median of X_1, X_2,..., X_N excluding X_i, that is, the median of X_1, X_2,..., X_{i-1}, X_{i+1},..., X_N be B_i.\nFind B_i for each i = 1, 2,..., N.\n\n-----Constraints-----\n - 2 \\leq N \\leq 200000\n - N is even.\n - 1 \\leq X_i \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nX_1 X_2... X_N\n\n-----Output-----\nPrint N lines.\nThe i-th line should contain B_i.\n\n-----Sample Input-----\n4\n2 4 4 3\n\n-----Sample Output-----\n4\n3\n3\n4\n\n - Since the median of X_2, X_3, X_4 is 4, B_1 = 4.\n - Since the median of X_1, X_3, X_4 is 3, B_2 = 3.\n - Since the median of X_1, X_2, X_4 is 3, B_3 = 3.\n - Since the median of X_1, X_2, X_3 is 4, B_4 = 4.\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\n\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().rstrip().split()))\nB = []\nfor i in range(n):\n    B.append((sum(A[:i]) + sum(A[i+1:])) // n)\nprint('\\n'.join(map(str, B)))\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\n-----\n\n\"\"\""
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '4\\n2 4 4 3') == '4\\n3\\n3\\n4'\nassert solution(\n    '5\\n1 5 4 2 3') == '5\\n3\\n2\\n3\\n4'\n\"\"\"\n\nfrom math import inf\nfrom sys import stdin\n\nstdin = stdin.read().splitlines()\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 1') == '1'\nassert solution('1 1\\n1 2') == '2'\nassert solution('1 2\\n2 3') == '1'\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4 4 3') == '4\\n3\\n3\\n4'\n\n\"\"\"\n\nimport math\nimport sys\n\nsys.stdin = open(\"input.txt\")\nN = int(sys.stdin.readline().rstrip())\nL = list(map(int, sys.stdin.readline().rstrip().split()))\nassert len(L) == N\n\nassert math.isclose(sum(L) / N, sum(sorted(L)[N // 2 - 1:: N // 2 + 1]) / N)\n\nnums = [0] * (10 ** 9 + 1)\nfor l in L:\n    nums[l] += 1\n\nL = sorted(L)\nprint(L)\nm = L[(N - 1) // 2]\nL = sorted(L)\n\nfor i in range(N // 2):\n    print(L[i + 1])\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\""
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\n\"\"\"\n\n\n\"\"\"\nFirst part of the solution.\n\nInput: The input consists of N lines, each containing a number X_1, X_2,..., X_N, where N is an even number.\nOutput: Print N lines.\nThe i-th line should contain B_i.\n\nExample:\n- For the input:\n4\n2 4 4 3\n\n- the output is:\n4\n3\n3\n4\n\"\"\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2 4 2 1\") == 2\n\"\"\"\n\nn = int(stdin.readline())\nsticks = sorted(list(map(int, stdin.readline().split())))\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n3 1 2 4 2 1') == '2'\n\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom collections import Counter\n\nfrom typing import Iterator, List\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2 4 2 1\") == 2\nassert solution(\"6 1 2 3 3 1\") == 6"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2 4 2 1') == 2\n\"\"\"\nfrom itertools import permutations\nfrom math import sqrt"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n') == '4'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n') == '0'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n') == '3'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 2 4 2 1') == 2\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n3 1 2 4 2 1') == 2\n\"\"\"\n\nn = int(stdin.readline())\na = [int(x) for x in stdin.readline().split()]\n\nans = 0\nfor i in range(n - 2):\n    for j in range(i + 1, n - 1):\n        for k in range(j + 1, n):\n            l = sorted([a[i], a[j], a[k]])\n            ans = max(ans, l[0] * l[1])\n\nprint(ans)\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2 4 2 1\") == 2\n\"\"\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 2 3 4') == '2'\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 1 2 5 10\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 7 1 2 5 10') == '8'\n\nassert solution('4 3 1 2 6') == '6'\nassert solution('1 1 2') == '1'"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1\\n2\\n5\\n10') == '8'\n\"\"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5\\n3 3\\n1') == '8'\nassert solution('7\\n7 1\\n2\\n5\\n10') == '11'\n\"\"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n7 1\\n2\\n5\\n10\") == \"8\"\n\"\"\"\n\nimport sys\nimport functools\nfrom itertools import accumulate\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 7 1 2 5\\n2\\n5 10\") == 8\n\"\"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1\\n2\\n5\\n10\\n') == '8'\n\"\"\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 7 1 2 5 10\") == \"8\"\n\n-----\n3 7 1 2 5 10\n1 2 3 4 5 6 7 8\n5\n1\n3\n7\n10\n\n-----\n3 7 1 2 5 10\n1 2 3 4 5 6 7 8\n5\n1\n3\n7\n10\n\n8\n\"\"\"\nimport sys"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n4\\n4\\n4') == '8'\nprint('Test pass.')\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 7 1 2 5 10\") == 8\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n2\\n2\\n100\\n\") == 2\n\n---Problem 668-Spiral Matrix II---\nGiven a positive integer n, generate a square matrix filled with elements from 1 to n^2 in spiral order.\n\nInput Format\nThe first and only line of the input contains an integer n.\n\nOutput Format\nPrint the elements of the matrix in a single line with each element separated by a space.\n\nConstraints\n- 1 \\leq n \\leq 1000\n\nSample Input\n4\n\nSample Output\n1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10 \n\"\"\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\n\"\"\"\n\na, b, c, x = [int(s) for s in input().split()]\nways = 0"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 2 100\") == 2\nassert solution(\"3 5 4 100\") == 1\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n2\n2\n2\n100\n\n\"\"\"\n) == '2'\n\n\"\"\"\n\nThere are two ways to select coins:\n - Select zero 500-yen coins, one 100-yen coin and zero 50-yen coins.\n - Select zero 500-yen coins, zero 100-yen coins and two 50-yen coins.\n\n\"\"\"\n\"\"\"\n\n\"\"\"\n\"\"\""
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\nassert solution(\"3\\n4\\n1\\n9\") == \"0\"\nassert solution(\"1\\n0\\n0\\n9\") == \"1\"\nassert solution(\"1\\n1\\n1\\n10\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\nassert solution(\"0\\n0\\n0\\n100\") == \"1\"\nassert solution(\"0\\n0\\n0\\n50\") == \"1\"\nassert solution(\"1\\n1\\n1\\n100\") == \"0\"\nassert solution(\"1\\n1\\n1\\n50\") == \"0\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n2\\n2\\n100') == '2'\nassert solution('2\\n2\\n1\\n100') == '0'\nassert solution('2\\n2\\n0\\n100') == '1'\n\nprint(\"Correct!\")\n\"\"\""
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == 2\nassert solution(\"3\\n3\\n3\\n100\") == 6\n\"\"\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\\n2\\n2\\n2\"\n\n---"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3 2') == 'Yes'\nassert solution('1 2 3') == 'No'\nassert solution('1 1 1') == 'Yes'\nassert solution('1 1 2') == 'No'\nassert solution('-1 1 -1') == 'Yes'\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"2 1 2\") == \"No\"\nassert solution(\"0 1 2\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"2 3 1\") == \"No\"\nassert solution(\"4 6 2\") == \"No\"\n\nprint('=================')\nprint('Success')\nprint('=================')\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3, 1, 2) == 'Yes'\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3 2') == 'Yes'\nassert solution('2 3 1') == 'No'\nassert solution('2 1 2') == 'Yes'\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3 2') == 'Yes'\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"3 1 2\") == \"No\"\n\"\"\"\n\nA, B, C = map(int, stdin.readlines())\nprint(\"Yes\" if C >= A and C <= B else \"No\")\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3, 2, 1) == 'Yes'\nassert solution(1, 3, 2) == 'No'\n\"\"\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1000\\n120\\n100\\n140\\n') == '9'\nassert solution('2 100\\n120\\n100\\n') == '0'\nassert solution('2 1000\\n5\\n5\\n') == '1'\nassert solution('2 1000\\n10\\n5\\n') == '0'\nassert solution('2 100\\n1\\n1\\n') == '0'\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\n\n\"\"\"\n\nimport sys\n\nn, x = [int(x) for x in stdin.readline().split()]\n\nm = [int(x) for x in stdin.readline().split()]\n\ntotal = 0\ncount = 0\n\nfor i in range(0, n):\n    total = total + m[i]\n    if total > x:\n        total = m[i]\n        count = count + 1\n    elif total == x:\n        count = count + 1\n\nprint(count)\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"\n\"\"\"\n\n\"\"\"\n    TODO: Solve this problem\n\"\"\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1000') == '9'\n\"\"\"\n\n\"\"\"\n1. Sort the array\n2. Iterate over the array from left to right\n3. At each step, compare the current element's value with the next element. If the current element's value is less than or equal to the next element, then, increase the number of doughnuts of that type by 1. Else, increase the number of doughnuts of the next type by 1.\n4. If the number of doughnuts for the current type exceeds the number of doughnuts for the next type, return the number of doughnuts of the current type.\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input) == output\n\n\"\"\"\n\nimport collections\nfrom collections import Counter, namedtuple\nimport functools\nfrom functools import reduce\nfrom typing import Dict, List, NamedTuple, Tuple\nfrom pprint import pprint\nfrom math import gcd\n\npp = pprint\n\n\nclass Solution:\n    def solve(self, input_str):\n        _, X = input_str.split(\" \")\n        X = int(X)\n        moto = [int(x) for x in input().split(\" \")]\n        n, moto = int(input()), Counter(moto)\n        pp(moto)\n        n, moto = int(input()), Counter(moto)\n        pp(moto)\n        m = max(moto.values())\n        return sum(m > 1 for m in moto.values())\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\n\"\"\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1000\") == \"9\"\nassert solution(\"3 1000\") == \"9\"\nassert solution(\"3 500\") == \"4\"\nassert solution(\"3 20\") == \"3\"\n\nimport sys\nassert sys.stdin.readline().split() == [\"4\", \"1000\"]\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('apple') == 1\nassert solution('apple,orange') == 2\n\"\"\""
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\napple\\norange\") == \"2\"\nassert solution(\"2\\noan\\nad\") == \"0\"\nassert solution(\"5\\nhg\\nm\\n\\nhj\") == \"3\"\nassert solution(\"5\\nhg\\nm\\n\\nhj\\njj\") == \"0\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"apple\\napple\\norange\") == \"2\""
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\napple\\n:apple\\napple\") == '2'\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"apple\\norange\\napple\") == \"2\"\nassert solution(\"apple\\napple\\napple\\napple\\napple\\napple\\napple\\napple\\napple\") == \"1\"\nassert solution(\"z\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\") == \"1\"\nassert solution(\"z\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz\\nz"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"apple\\norange\\napple\\n\") == \"2\"\n\"\"\"\nfrom collections import Counter\n\nstdin = \"\"\nn = int(stdin)\ncount = Counter(stdin[:n].split('\\n')).keys()\nprint(len(count))\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"apple\") == \"apple\"\nassert solution(\"orange\") == \"orange\"\nassert solution(\"banana\") == \"banana\"\nassert solution(\"dog\") == \"dog\"\nassert solution(\"cat\") == \"cat\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\napple\\norange\\nanother one\\n\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\napple\\norange\\nanother one\\n') == '2'\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2500 2700 2700\") == \"2 2\"\n\"\"\"\n\nN = int(input())\nnums = list(map(int, input().split()))\nmin_count, max_count = 0, 0\nmin_count = sum([1 for n in nums if n >= 2400])\nmax_count = sum([1 for n in nums if n >= 3200])\nprint(min_count, max_count)\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"\n\"\"\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3200 2 1 1') == '4 1'\n\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"4\\n2100 2500 2700 2700\"\n) == '2 2'\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2100 2500 2700 2700\") == \"2 2\"\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n2100 2500 2700 2700''') == '2 2'\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"\n\"\"\"\n\nN = int(input())\n\nrating_color = [0] * (5000+1)\n\nfor _ in range(N):\n    color = int(input())\n    rating_color[color] += 1\n\nlow, high = rating_color[1], rating_color[5000]\n\nfor i in range(1, 5000):\n    high, low = max(high, rating_color[i] + rating_color[i+1]), low\n\nprint(low, high)\n\n\n\"\"\"\n9\n3\n5\n7\n1\n9\n10\n3\n4\n6\n8\n\n1 2\n\"\"\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2100 2500 2700 2700') == '2 2'\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2100 2500 2700 2700') == '2 2'\n\"\"\"\n\nfrom typing import List, Dict\n\nN: int = int(stdin.readline().strip())\nuser_ratings: List[int] = [int(i) for i in stdin.readline().strip().split(' ')]\n\ncolors: Dict[int, List[int]] = {}\n\nfor rating in user_ratings:\n    if rating in colors:\n        colors[rating].append(rating)\n    else:\n        colors[rating] = [rating]\n\nprint(min(len(colors[rating]) for rating in colors), max(len(colors[rating]) for rating in colors), sep=' ')"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"o\") == 900\nassert solution(\"ox\") == 1350\nassert solution(\"xxo\") == 1800\nassert solution(\"oxx\") == 2300\nassert solution(\"x\") == 0\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"oxo\") == 900\nprint(solution(\"oxo\"))\n\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('oxo') == '900'"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"oxo\") == \"900\"\nassert solution(\"xox\") == \"0\"\nassert solution(\"xxo\") == \"0\"\nassert solution(\"ooo\") == \"0\"\nassert solution(\"ooox\") == \"700\"\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"oxo\") == 900\nprint(solution(\"oxo\"))\n\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('oxo') == 900\nassert solution('oxx') == 700\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"oxo\") == 900\nprint(solution(\"oxo\"))\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'D'\nassert solution('D D') == 'D'\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"HH\") == \"H\"\nassert solution(\"DH\") == \"D\"\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('H H') == 'H'\nassert solution('D D') == 'D'\nassert solution('H D') == 'H'\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"HH\") == \"H\"\nassert solution(\"DH\") == \"D\"\nassert solution(\"DH\") == \"D\"\nassert solution(\"DH\") == \"D\"\nassert solution(\"DH\") == \"D\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('H H') == 'H'\nassert solution('D D') == 'D'\nassert solution('H D') == 'D'\nassert solution('D H') == 'H'\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"H D\") == \"D\"\nassert solution(\"D H\") == \"D\"\nassert solution(\"D D\") == \"D\"\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"D D\") == \"D\"\nassert solution(\"H H\") == \"H\"\nassert solution(\"D D\") == \"D\"\n\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'H'\nassert solution('D D') == 'D'\n\n--------------------------------------------------\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('H H') == 'H'\n\nassert solution('H D') == 'D'\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'D'\nassert solution('D D') == 'D'\n\"\"\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\nassert solution(\"8254\") == \"8-5-4-4=7\"\nassert solution(\"2352\") == \"3-5+2-5=7\"\nassert solution(\"38\") == \"3-8=7\"\n\"\"\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\nassert solution(\"1211\") == \"1+1+1+1=4\"\nassert solution(\"2222\") == \"2+2+2+2=10\"\nassert solution(\"1111\") == \"1+1+1+1=4\"\nassert solution(\"111111\") == \"1+1+1+1+1=5\"\n\"\"\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin=1222) == '1+2+2+2=7'"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\"\"\"\n\nfrom typing import List\nimport logging\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n\nassert solution('3432') == '3+4+3+2=7'\n\nassert solution('4556') == '4+5+5+6=7'\n\nassert solution('7777') == '7+7+7+7=7'\n\nassert solution('1111') == '1+1+1+1=4'"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\"\"\"\n\nA, B, C, D = map(int, input().split())\n\nprint(\"{}+{}+{}+{}=7\".format(A, B, C, D))\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def __init__(self, stdin: str):\n        \"\"\"\n        https://www.codewars.com/kata/5e90ca9b1f5f9aa4c2e35cdf\n        \"\"\"\n        self.stdin = stdin\n        self.stdin_list = list(stdin)\n\n    def _get_combo(self, nums: List[int]) -> int:\n        \"\"\"\n        Returns the sum of the individual digit numbers from a list of numbers.\n\n        :param nums: A list of numbers.\n        :return: The sum of the digits in the list.\n        \"\"\"\n        total = 0\n        for num in nums:\n            total += int(num)\n        return total\n\n    def solution(self) -> str:\n        \"\"\"\n        The solution is to take the formula ABCD=7 and replace the '+'\n        and '-' with the respective operators '+' and '-' respectively.\n\n        The formula will evaluate to true if and only if the sum of\n        the digits is 7.\n        \"\"\"\n        formula = []\n        for char in self.stdin:\n            if char == '+':\n                formula.append('+')\n            elif char == '-':\n                formula.append('-')\n            else:\n                formula.append(char)\n        return ''.join(formula) + '=7'\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\nassert solution(\"12221\") == \"1-2+2+2-1=7\"\nassert solution(\"12222\") == \"1-2+2+2-2=7\"\nassert solution(\"12223\") == \"1-2+2+2-3=7\"\nassert solution(\"12224\") == \"1-2+2+2-4=7\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"1222\"\n) == \"\"\"1+2+2+2=7\"\"\"\nprint(solution(\n\"1222\"\n))\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 1 2 2') == '2\\n2\\n0\\n0\\n0'\nassert solution('5\\n2 2 4 4') == '1\\n0\\n0\\n0\\n0'\nassert solution('5\\n5 5 2 2') == '0\\n0\\n0\\n0\\n0'\n\nimport sys"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\nprint(solution(input()))\n\"\"\"\n\nimport sys\nimport collections\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\n\"\"\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 1 2 2\\n\") == \"2\\n2\\n0\\n0\\n0\\n\"\n\"\"\""
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\n\"\"\""
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\nassert solution(\"5\\n2 2 3 4 5\") == \"0\\n1\\n2\\n0\\n0\"\nassert solution(\"5\\n5 4 3 2 1\") == \"0\\n0\\n0\\n0\\n3\"\n\nassert solution(\"10\\n7 4 6 2 3 8 1 9 5 10\") == \"2\\n4\\n0\\n2\\n0\\n0\\n0\\n0\\n0\\n0\"\nassert solution(\"10\\n1 2 3 7 8 4 5 6 9 10\") == \"5\\n0\\n0\\n1\\n1\\n0\\n0\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\nassert solution(\"5\\n2 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\nassert solution(\"5\\n3 2 4 4\") == \"0\\n2\\n2\\n0\\n0\"\nassert solution(\"5\\n5 4 4 3\") == \"0\\n0\\n2\\n2\\n2\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\n\nprint(solution(\"5\\n1 1 2 2\"))\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 2 2\\n\") == \"2 2 0 0 0\"\nassert solution(\"5\\n5 4 3 2 1\") == \"0 0 1 1 0\"\nassert solution(\"5\\n2 4 1 3 5\") == \"0 0 0 0 0\"\nassert solution(\"5\\n5 4 3 2 1\") == \"2 2 0 0 0\"\nassert solution(\"5\\n2 2 1 3 5\") == \"1 1 0 0 0\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 1 2 2') == '2\\n2\\n0\\n0\\n0'\n\"\"\"\n\n\"\"\"\nGiven the list of IDs of all the members of a company, find the immediate boss for each member.\n\nFor each member, the immediate boss is the member with the smallest ID greater than the current member's ID.\nNote that a member's direct boss is also his immediate subordinate.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - 1 \\leq A_i < i\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_2... A_N\n\n-----Output-----\nFor each of the members numbered 1, 2,..., N, print the ID number of the immediate boss, in its own line.\n\n-----Sample Input-----\n5\n1 1 2 2\n\n-----Sample Output-----\n2\n3\n4\n5\n\nThe member numbered 1 has the member numbered 2 as its immediate boss.\nThe member numbered 2 has the member numbered 3 as its immediate boss.\nThe member numbered 3 has the member numbered 4 as its immediate boss.\nThe member numbered 4 has the member numbered 5 as its immediate boss.\nThe member numbered 5 has no immediate boss, so we print 0 in its place.\n\"\"\""
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n3') == '3'\n\"\"\"\n\nx = int(input())\ny = int(input())\nprint(x % y)\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6\\n') == '3'\n\"\"\""
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6') == '3'\nassert solution('11') == '5'\nassert solution('2') == '0'\nassert solution('1') == '0'\nassert solution('9') == '8'\n\"\"\""
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n') == '3'\nassert solution('100\\n') == '31'\n\"\"\""
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"2\"\n\"\"\"\n\nimport sys\n\nX = int(sys.stdin.readline())\nprint(X // 2)\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n5\") == \"2\"\nassert solution(\"4\\n3\") == \"1\"\nassert solution(\"6\\n10\") == \"3\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n6') == '2'\nprint(solution(stdin.readline()))\n\n'''\nimport sys\n\nX = int(sys.stdin.readline())\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6') == 3\n\"\"\""
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\nassert solution('3\\n') == '2'\nassert solution('4\\n') == '3'\nassert solution('5\\n') == '4'\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1118\") == \"Yes\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1118\") == \"Yes\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1118) == 'Yes'\nassert solution(11181234) == 'No'\nassert solution(1119) == 'Yes'\nassert solution(11191234) == 'Yes'\nassert solution(1111) == 'No'\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1118') == 'Yes'\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1118') == 'Yes'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1118\") == \"Yes\"\nassert solution(\"1119\") == \"No\"\nassert solution(\"1111\") == \"Yes\"\nassert solution(\"1100\") == \"Yes\"\nassert solution(\"1011\") == \"No\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1118\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1118') == 'Yes'\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1118') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1118\") == \"Yes\"\nassert solution(\"1010\") == \"No\"\n\"\"\"\n\n\"\"\"\nSolution\n\nRead 4 digits from the standard input, convert them into an integer, and check if N is good.\n\nInput\n\nThe first line contains an integer T, the number of test cases.\n\nThe only line of each test case contains a four-digit integer N.\n\nOutput\n\nFor each test case, output the answer on a new line: \"Yes\" if N is good, \"No\" otherwise.\n\nSample Input\n\n2\n1118\n1010\n\nSample Output\n\nYes\nNo\n\"\"\"\n\n\"\"\"\nSolution\n\nRead 4 digits from the standard input, convert them into an integer, and check if N is good.\n\nInput\n\nThe first line contains an integer T, the number of test cases.\n\nThe only line of each test case contains a four-digit integer N.\n\nOutput\n\nFor each test case, output the answer on a new line: \"Yes\" if N is good, \"No\" otherwise.\n\nSample Input\n\n3\n1118\n1010\n1032\n\nSample Output\n\nYes\nNo\nYes\n\"\"\""
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"2\n1 5\n2 4\n3 6\"\"\") == \"3\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 5\\n2 4\\n3 6') == 3\nprint(solution(input()))"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 5\\n2 4\\n3 6\\n\") == 3\nassert solution(\"2\\n1 4\\n2 3\\n\") == 2\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 5\\n2 4\\n3 6') == '3'\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1 5\\n2 4\\n3 6') == 3\n\"\"\""
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == 3\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom collections import defaultdict\nfrom math import gcd\nfrom typing import Any, Dict, List, NamedTuple, Tuple\n\n\nclass Upper(NamedTuple):\n    size: int\n\n\nclass Middle(NamedTuple):\n    size: int\n\n\nclass Lower(NamedTuple):\n    size: int\n\n\nclass Altar(NamedTuple):\n    upper: Upper\n    middle: Middle\n    lower: Lower\n\n    def __hash__(self) -> int:\n        return hash((self.upper, self.middle, self.lower))\n\n\nclass AltarFrequency:\n    def __init__(self: AltarFrequency, *args: Altar) -> None:\n        self.altars: Dict[Altar, int] = defaultdict(int)\n        for arg in args:\n            self.altars[arg] += 1\n\n    def __iadd__(self: AltarFrequency, other: AltarFrequency) -> AltarFrequency:\n        for k, v in other.altars.items():\n            self.altars[k] += v\n        return self\n\n    def __hash__(self) -> int:\n        return hash(tuple(sorted(self.altars.items())))\n\n    def __eq__(self: AltarFrequency, other: AltarFrequency) -> bool:\n        return self.altars == other.altars\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == 3\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n\n-----\n-----\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == \"3\"\n\n------Problem------\n-----Type: Independent-----\n-----Name: Altar-----\n-----Difficulty: Easy-----\n\n\nN = int(stdin.readline())\nA = list(map(int, stdin.readline().split()))\nB = list(map(int, stdin.readline().split()))\nC = list(map(int, stdin.readline().split()))\n\ncnt = 0\n\nfor i in range(0, N):\n    if C[i] > B[i]:\n        cnt += 1\n    if A[i] > B[i]:\n        cnt += 1\n\nprint(cnt)\n\n------Type: Independent-----\n-----Name: Altar-----\n-----Difficulty: Easy-----\nimport itertools\n\nN = int(stdin.readline())\nA = list(map(int, stdin.readline().split()))\nB = list(map(int, stdin.readline().split()))\nC = list(map(int, stdin.readline().split()))\n\ncnt = 0\n\nfor a, b, c in itertools.combinations(range(0, N), 3):\n    if B[a] > A[b] and C[c] > A[b]:\n        cnt += 1\n\nprint(cnt)\n\n------Type: Independent-----\n-----Name: Altar-----\n-----Difficulty: Easy-----\nimport itertools\n\nN = int(stdin.readline())\nA = list(map(int, stdin.readline().split()))\nB = list(map(int, stdin.readline().split()))\nC = list(map(int, stdin.readline().split()))\n\ncnt = 0\n\nfor a, b, c in itertools.permutations(range(0, N), 3):\n    if B[a] > A[b] and C[c] > A[b]:\n        cnt += 1\n\nprint(cnt)\n\n------Type: Independent-----\n-----Name: Altar-----\n-----Difficulty: Easy-----\nimport itertools\n\nN = int(stdin.readline())\nA = list(map(int, stdin.readline().split()))\nB = list(map(int, stdin.readline().split()))\nC = list(map(int, stdin.readline().split()))\n\ncnt = 0\n\nfor a, b, c in itertools.product(range(0, N), repeat=3):\n    if B[a] > A[b] and C[c] > A[b]:\n        cnt += 1\n\nprint(cnt)\n\n------Type: Independent-----\n-----Name: Altar-----\n-----Difficulty: Easy-----\nimport itertools\n\nN = int(stdin.readline())\nA = list(map(int, stdin.readline().split()))\nB = list(map(int, stdin.readline().split()))\nC = list(map(int, stdin.readline().split()))\n\ncnt = 0\n\nfor a, b, c in itertools.combinations_with_replacement(range(0, N), 3):\n    if B[a] > A[b] and C[c] > A[b]:\n        cnt += 1\n\nprint(cnt)\n\n------Type: Independent-----\n-----Name: Altar-----\n-----Difficulty: Easy-----\nimport itertools\n\nN = int(stdin.readline())\nA = list(map(int, stdin.readline().split()))\nB = list(map(int, stdin.readline().split()))\nC = list(map(int, stdin.readline().split()))\n\ncnt = 0\n\nfor a, b, c in itertools.permutations(range(0, N), 3):\n    if B[a] > A[b] and C[c] > A[b]:\n        cnt += 1\n\nprint(cnt)\n\n------Type: Independent-----\n-----Name: Altar-----\n-----Difficulty: Easy-----\nimport itertools\n\nN = int(stdin.readline())\nA = list(map(int, stdin.readline().split()))\nB = list(map(int, stdin.readline().split()))\nC = list(map(int, stdin.readline().split()))\n\ncnt = 0\n\nfor a, b, c in itertools.combinations(range(0, N), 3):\n    if B[a] > A[b] and C[c] > A[b]:\n        cnt += 1\n\nprint(cnt)\n\n------Type: Independent-----\n-----Name: Altar-----\n-----Difficulty: Easy-----\nimport itertools\n\nN = int(stdin.readline())\nA = list(map(int, stdin.readline().split()))\nB = list(map(int, stdin.readline().split()))\nC = list(map(int, stdin.readline().split()))\n\ncnt = 0\n\nfor a, b, c in itertools.product(range(0, N), repeat=3):\n    if B[a] > A[b] and C[c] > A[b]:\n        cnt += 1\n\nprint(cnt)\n\n------Type: Independent-----\n-----Name: Altar-----\n-----Difficulty: Easy-----\nimport itertools\n\nN = int(stdin.readline())\nA = list(map(int, stdin.readline().split()))\nB = list(map(int, stdin.readline().split()))\nC = list(map(int, stdin.readline().split()))\n\ncnt = 0\n\nfor a, b, c in itertools.combinations_with_replacement(range(0, N), 3):\n    if B[a] > A[b] and C[c] > A[b]:\n        cnt += 1\n\nprint(cnt)\n\n------Type: Independent-----\n-----Name: Altar-----\n-----Difficulty: Easy-----\nimport itertools\n\nN = int(stdin.readline())\nA = list(map(int, stdin.readline().split()))\nB = list(map(int, stdin.readline().split()))\nC = list(map(int, stdin.readline().split()))\n\ncnt = 0\n\nfor a, b,"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"2\\n1 5\\n2 4\\n3 6\"\n) == \"3\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3\n2 3 1\n1 2 3\n2 3 1\n\"\"\") == \"3\"\nassert solution(\"\"\"5\n1 2 3 4 5\n3 2 1 4 5\n3 2 1 3 5\n2 3 1 4 5\n3 2 1 3 5\n\"\"\") == \"3\"\nassert solution(\"\"\"4\n2 3 1\n2 2 2\n2 3 1\n2 2 2\n\"\"\") == \"0\"\nassert solution(\"\"\"5\n1 2 3 4 5\n3 2 1 4 5\n3 2 1 3 5\n2 3 1 4 5\n3 2 1 3 5\n\"\"\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"A C\") == \">\"\nassert solution(\"A D\") == \"=\"\nassert solution(\"E E\") == \"=\"\n\"\"\"\n\nx, y = input().split()"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"B A\") == \">\"\nassert solution(\"A A\") == \"=\"\n\"\"\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('A B') == \"<\"\n\nassert solution('F D') == \">\"\n\"\"\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"A B\"\n) == \">\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''A B\n''') == '<'\nassert solution('''F A\n''') == '>'\nassert solution('''F F\n''') == '='\nassert solution('''B A\n''') == '>'\nassert solution('''B B\n''') == '='\n\"\"\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('A B') == '<'\nassert solution('D E') == '>'\nassert solution('B C') == '='\n\"\"\"\n\nfrom typing import List, Dict, TextIO\nfrom collections import defaultdict\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"B A\") == \">\"\nassert solution(\"A A\") == \"=\"\n\"\"\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"B A\") == \">\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\">\") == \">\"\nassert solution(\"<\") == \"<\"\nassert solution(\"=\") == \"=\"\n\"\"\"\n\nfrom typing import List, Dict\n\nimport sys\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''A B''') == '<'\nassert solution('''B A''') == '>'\nassert solution('''C D''') == '='\n\n'''\n    \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5:\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430 \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u043e \u0438 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b, \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e. \u041f\u043e\u0441\u0442\u0430\u0440\u0430\u0439\u0442\u0435\u0441\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0432\u0432\u043e\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043e\u0439 \u043c\u043e\u0436\u0435\u0442 \u0441\u043b\u0443\u0436\u0438\u0442\u044c \u0441\u0430\u043c\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0435 \u0432\u0432\u043e\u0434:\n\nwhile 1:\n    a = int(input())\n    b = int(input())\n    if a == b:\n        print('Equal')\n        break\n    elif a < b:\n        print('Larger')\n    else:\n        print('Smaller')\n\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0441\u0430\u043c\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 \u00abcontinue\u00bb \u0438 \u00abbreak\u00bb, \u043e\u043d\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c\u044b \u0432 \u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0432\u043e\u0434\u0430 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c \u043e\u0442\u0432\u0435\u0442\u043e\u043c \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441.\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0441\u044f \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0435 \u0432\u0432\u0435\u0434\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442.\n\u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0437\u0430\u043a\u0440\u044b\u0442\u044c \u0432\u0432\u043e\u0434\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438.\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439 \u043a\u043e\u0434 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0432\u0435\u0447\u043d\u043e\u0433\u043e \u0446\u0438\u043a\u043b\u0430 \u0438 \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0443\u0442\u044c \u0440\u0430\u0437\u0443\u043c\u043d\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443:"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5\\n.....\\n.#.#.\\n.....') == '11211'\nprint('test passed')\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1\\n...') == '11'\nassert solution('2 3\\n#.#\\n#.#') == '1#2#1'\nassert solution('3 3\\n#.#\\n##.') == '11211'\nassert solution('3 5\\n#.##\\n#.#.') == '1#2211'\nassert solution('5 5\\n##...\\n##...\\n##...\\n##...\\n##...') == '1121211212112121121'\n\"\"\""
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == '11211'\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == '11211'"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\".....\\n\"\n                 \".#.#.\\n\"\n                 \"...#.\\n\") == \"11211\"\nassert solution(\"#.#.#\\n.###.\\n#.##.\\n\") == \"11#22\"\nassert solution(\"###..\\n.###.\\n....#\\n....#\\n#....\\n\") == \"11111\"\nassert solution(\"....#\\n#.#.#\\n#..#.\\n..#..\\n#....\\n\") == \"1111\"\nassert solution(\"#..#.\\n.#..#\\n.#.#.\\n#.##.\\n\\n\") == \"111111\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5\\n.....\\n.#.#.\\n.....\\n') == '11211'\nassert solution('4 4\\n....\\n#...\\n.#.#\\n....\\n') == '11100'\nassert solution('3 2\\n...\\n#.#\\n..\\n') == '1110'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\".....\\n....#\\n....#\\n###..\\n##...\\n#####\\n....#\\n.....\") == \"11211\"\n\n\"\"\"\nimport re\nfrom typing import List, Pattern"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5\\n.....\\n.#.#.\\n.....') == '11211'\nassert solution('5 5\\n.......\\n.#...#\\n#....#\\n#.#.#.\\n#...#.') == '12345'\nassert solution('3 5\\n.....\\n.#...\\n.....') == '11111'\nassert solution('5 5\\n.......\\n....#.\\n#....#\\n#...#.') == '11222'\nassert solution('4 4\\n#....\\n#...#\\n#...#\\n#...#') == '1111'\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 240\\n60 90 120\\n80 150 80 150') == '3'\n\"\"\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\nassert solution(\"5 6 210\\n79 62 79 79 79 79\\n44 63 44 63 44 63\") == \"4\"\nassert solution(\"5 6 210\\n79 62 79 79 79 79\\n44 63 44 63 44 63\\n82 96 82 96 82 96\") == \"5\"\nassert solution(\"6 9 240\\n59 56 58 57 62 96 96 96\\n97 81 99 36 44 32 56 37\") == \"5\"\nassert solution(\"4 9 240\\n79 82 84 85\\n32 32 36 37\\n
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == 3\n\"\"\""
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == 3\n\"\"\"\n\n\nfrom typing import Tuple, List\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 4 240\n60 90 120\n80 150 80 150''') == '3'\n\n-----\n2 3 3\n1 2 1\n1 1 1\n1 2 1'''\n\n) == '2'\n\nsolution('''3 4 240\n60 90 120\n80 150 80 150''') == '3'\n\nsolution('''1 4 6\n1 1 1\n2 1 1\n3 2 1\n1 1 1\n3 2 1\n4 2 1\n1 2 1''') == '2'\n\nsolution('''3 4 240\n60 90 120\n80 150 80 150''') == '3'\n\nsolution('''1 1 1\n1 2 1''') == '1'\n\nsolution('''4 1 10\n2 2 2\n1 1 1\n2 1 1\n1 1 1\n1 1 1''') == '1'\n\nsolution('''4 1 10\n2 2 2\n1 2 1\n2 1 1\n1 1 1\n1 1 1''') == '3'\n\nsolution('''4 2 10\n1 1 1\n1 2 1\n1 2 1\n1 2 1''') == '3'\n\nsolution('''1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '0'\n\nsolution('''4 2 10\n1 1 1\n1 1 1\n1 2 1\n1 1 1''') == '0'\n\nsolution('''4 2 10\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '0'\n\nsolution('''4 2 10\n1 2 1\n1 2 1\n1 2 1\n1 2 1''') == '0'\n\nsolution('''4 1 10\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1'\n\nsolution('''4 1 10\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '0'\n\nsolution('''4 1 10\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '0'\n\nsolution('''4 1 10\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1'\n\nsolution('''4 1 10\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1'\n\nsolution('''4 1 10\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1'\n\nsolution('''4 1 10\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1'\n\nsolution('''4 1 10\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1'\n\nsolution('''4 1 10\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '0'\n\nsolution('''4 2 10\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1'\n\nsolution('''4 2 10\n1 2 1\n1 2 1\n1 2 1\n1 2 1''') == '1'\n\nsolution('''4 2 10\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '0'\n\nsolution('''4 2 10\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '0'\n\nsolution('''4 2 10\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '0'\n\nsolution('''4 2 10\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '0'\n\nsolution('''4 2 10\n1 2 1\n1 2 1\n1 2 1\n1 2 1''') == '0'\n\nsolution('''4 2 10\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '0'\n\nsolution('''4 2 10\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1'\n\nsolution('''4 2 10\n1 2 1\n1 1 1\n1 2 1\n1 1 1''') == '1'\n\nsolution('''4 2 10\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '0'\n\nsolution('''4 2 10\n1 2 1\n1 1 1\n1 1 1\n1 1 1''') == '1'\n\nsolution('''4 2 10\n1 2 1\n1 2 1\n1 1 1\n1 1 1''') == '1'\n\nsolution('''4 2 10\n1 2 1\n1 2 1\n1 2 1\n1 2 1''') == '1'\n\nsolution('''4 2 10\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1'\n\nsolution('''4 2 10\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '0'\n\nsolution('''4 2 10\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1'\n\nsolution('''4 2 10\n1 2 1\n1 2 1\n1 2 1\n1 2 1''') == '1'\n\nsolution('''4 2 10\n1 2 1\n1 2 1\n1 1 1\n1 1 1''') == '1'\n\nsolution('''4 2 10\n1 2 1\n1 2 1\n1 2 1\n1 2 1''') == '1'\n\nsolution('''4 2 10\n1 2 1\n1 2 1\n1 2 1\n1 2 1''') == '1'\n\nsolution('''4 2 10\n1 2 1\n1 2 1\n1 2 1\n1 2 1''') == '1'\n\nsolution('''4 2 10\n1 2 1\n1 2 1\n1 2 1\n1 2 1''') == '1'\n\nsolution('''4 2 10\n1 2 1\n1 2 1\n1 2 1\n1 2 1''') == '1'\n\nsolution('''4 2 10\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '1'\n\nsolution('''4 2 10\n1 2 1\n1 2 1\n1 2 1\n1 2 1''') == '1'\n\nsolution('''4 2 10\n1 1 1\n1 1 1"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\nassert solution(\"2 1 5\\n1 5 5 5\") == \"0\"\nassert solution(\"2 1 10\\n5 5 5 5 5 5\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 240\\n60 90 120\\n80 150 80 150') == '3'\nassert solution('4 5 50\\n15 17 32 15\\n32 32 32 32') == '4'\nassert solution('3 4 240\\n60 90 120\\n80 150 80 150') == '3'\n\n\"\"\"\n\nimport sys\n\nN, M, K = [int(i) for i in sys.stdin.readline().split()]\nA = [int(i) for i in sys.stdin.readline().split()]\nB = [int(i) for i in sys.stdin.readline().split()]\n\ndp = [[0] * (K + 1) for _ in range(2)]\ndp[0][0] = 0\ndp[1][0] = 0\ndp[0][1] = 0\ndp[1][1] = 0\nfor i in range(N):\n    dp[0][1] += A[i]\nfor i in range(M):\n    dp[1][1] += B[i]\n\nfor k in range(2, K + 1):\n    dp[0][k] = dp[0][k - 1] + dp[1][k - 1]\n    dp[1][k] = dp[0][k - 1] + dp[1][k - 1]\n\nprint(min(dp[0][K], dp[1][K]))\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2 3') == '3'\nassert solution('1 2 3 4') == '4'\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n\nA, B, C, X, Y = [int(num) for num in stdin.split()]"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == '7900'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n\na, b, c, x, y = map(int, input().split())\nprint((a*x)+(b*y))\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"3\") == 2\nassert solution(\"4\") == 2\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n3\n\"\"\"\n) == \"\"\"\n4\n\"\"\"\n\nassert solution(\n\"\"\"\n5\n\"\"\"\n) == \"\"\"\n8\n\"\"\""
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n') == '4'\n\"\"\"\nimport math"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"4\"\n\"\"\"\n\nn = input()\ncount = 1\nfor i in range(2, int(n)+1):\n    count *= i\n\nprint(count % 10000000007)\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n\") == \"4\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '4'\n\"\"\"\n\nimport math\nimport sys\n\n\"\"\"\nThis is the solution to the problem that will be submitted to an external site\n\"\"\""
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n') == '4'\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '0'\nassert solution('3') == '4'\nassert solution('5') == '1'\nassert solution('10') == '0'\nassert solution('30') == '7'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '4'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n') == '4'\nassert solution('8\\n') == '9'\nassert solution('100\\n') == '1'\nassert solution('1000\\n') == '0'\n\nimport sys\nfor line in sys.stdin:\n    num = int(line)\n    factorial = 1\n    for i in range(2, num + 1):\n        factorial *= i\n    factorial = str(factorial)\n    count = 0\n    for i in factorial:\n        if int(i)!= 0:\n            count += 1\n    print(count)"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == '9'\nassert solution('15') == '16'\nassert solution('15') == '16'\nassert solution('1') == '1'\nassert solution('2') == '1'\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == '9'\n\"\"\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '4'\nassert solution('5') == '4'\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"4\"\nassert solution(\"10\") == \"9\"\nassert solution(\"100\") == \"99\"\nassert solution(\"1000\") == \"999\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"9\"\nassert solution(\"100\") == \"99\"\nassert solution(\"1000\") == \"999\"\nassert solution(\"2000\") == \"1999\"\n\"\"\""
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"9\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"9\") == \"8\"\nassert solution(\"10\") == \"9\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"9\"\n\nassert solution(\"1\") == \"1\"\n\nassert solution(\"4\") == \"4\"\n\nassert solution(\"8\") == \"8\"\n\nassert solution(\"9\") == \"9\""
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"9\"\nprint(solution(\"10\"))\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == '4'\nassert solution('10') == '9'\nassert solution('1') == '0'\nassert solution('100') == '81'"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6') == '3'\nassert solution('1\\n10') == '1'\nassert solution('3\\n5\\n4') == '2'\nassert solution('2\\n3\\n2') == '0'\n\"\"\""
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"\n\"\"\""
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\\n\") == \"3\"\nassert solution(\"5\\n4\\n4\\n4\\n2\\n\") == \"2\"\nassert solution(\"3\\n2\\n4\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 8 8 6\") == 3\nassert solution(\"4 10 10 8 6\") == 3\nassert solution(\"4 4 4 4 4\") == 0\nassert solution(\"1 10 10 10 10\") == 1\nassert solution(\"2 10 10 10 10\") == 2\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n4\n10\n8\n8\n6\n''') == 3\nprint('Success')\n\n-----\nYou are given n strictly increasing integers and a nonnegative integer s. Your task is to find the largest integer that satisfies the equation n - m * m - m = s, where m is the sum of the integers between 1 and n (both included).\n\nYou have to be careful with the signs of the numbers in the equation, because s can be negative.\n\nInput\n\nThe first line of the input contains s (the nonnegative number). The second line contains n (1 \u2264 n \u2264 100) integers, that are strictly increasing and are separated by one or more spaces.\n\nOutput\n\nPrint the answer to the problem.\n\nIf there is no such integer, print the message \"-1\".\n\nExample\n\nInput:\n\n6\n1 5 3 7 2 4\n\nOutput:\n\n5\n\nInput:\n\n-1\n\nOutput:\n\n-1\n\n-----\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6') == 3\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(':') == 0\n\"\"\""
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6') == '3'\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"\n\n\"\"\"\n\nfrom math import *\n\nN = int(input())\n\nd = []\nfor i in range(N):\n    d.append(int(input()))"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == 3\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\"\nimport time\n\nimport sys\n\nsys.setrecursionlimit(1000000)"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\n-----\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == 5\n\"\"\"\n\nimport sys\n\ns = sys.stdin.readline().rstrip('\\n')"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('QWERTYASDFZXCV') == 5\nassert solution('ABCD') == 3\n\"\"\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\"\n\ns = input()\n\nprint(max(s[i:i+2] for i in range(len(s)-1)))\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\"\nimport re"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\nassert solution('PYTHON') == '3'\nassert solution('AVSCEDAZ') == '7'\n\n\"\"\"\n\ns = input()\nl = []\n\nfor i in range(1, len(s)+1):\n    l.append(s[:i])\n\nm = []\nfor i in l:\n    if i[0] == \"A\" and i[-1] == \"Z\":\n        m.append(i)\n\nprint(max(len(i) for i in m))\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\nassert solution('ABZ') == '1'\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\nassert solution(\"QWERTYASDFZXCV\") == \"5\"\nassert solution(\"QWERTYASDFZXCV\") == \"5\"\nassert solution(\"QWERTYASDFZXCV\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\nassert solution(\"4\\n8 12 40\") == \"0\"\nassert solution(\"5\\n8 12 40 20\") == \"2\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n\n-----Test Case-----\nInput:\n7\n2 3 4 5 6 7\nOutput:\n4\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 12 40\") == 2\n\n-----\nYou are given a number n.\nYou have to print all numbers from 1 to n,\nsuch that each digit of the number is even.\nInput Format\nA number n.\n\nConstraints\n1 \\leq n \\leq 10000\n\nOutput Format\nPrint all numbers, such that each digit of the number is even.\n\nSample Input 0\n12\n\nSample Output 0\n12\n22\n34\n46\n58\n70\n82\n94\n\nn = int(stdin.readline())\nfor i in range(1, n+1):\n    s = str(i)\n    if(int(s[0])%2==0 and int(s[1])%2==0):\n        print(i)\n\n-----\nYou are given a number n.\nYou have to print all numbers from 1 to n,\nsuch that each digit of the number is even.\n\nInput Format\nA number n.\n\nConstraints\n1 \\leq n \\leq 10000\n\nOutput Format\nPrint all numbers, such that each digit of the number is even.\n\nSample Input 0\n12\n\nSample Output 0\n12\n22\n34\n46\n58\n70\n82\n94"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\nassert solution(\"3\\n1 2 3\") == \"0\"\nassert solution(\"1\\n8 12 40\") == \"2\"\nassert solution(\"6\\n8 12 40\") == \"1\"\nassert solution(\"6\\n8 12 1 2 4\") == \"3\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n\"\"\"\n\n\n\"\"\"\nThis problem can be solved in two ways:\n\n1) Convert to a max heap (in Python's heapq module) and then pop off the max element.\n    This is very similar to the min heap problem.\n2) Convert to a min heap (in Python's heapq module) and then pop off the min element.\n    This is very similar to the max heap problem.\n\"\"\"\n\nfrom typing import List\nfrom heapq import heappush, heappop"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 12 40') == '2'\n\nassert solution('8 12 40') == '2'\n\"\"\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '3\\n8 12 40') == '2'\nassert solution(\n    '2\\n4 6 20') == '0'\nassert solution(\n    '5\\n1 2 4 8 16') == '4'\nassert solution(\n    '6\\n1 2 4 8 16 32 64') == '5'\nassert solution(\n    '7\\n1 2 4 8 16 32 64 128 256') == '6'\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == 6\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == 6\n\"\"\"\n\nn = int(stdin.readline())\n\npower = 1\nfor i in range(n):\n    power *= i + 1\n\nprint(power % (10 ** 9 + 7))\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '6'\n\"\"\"\n\nn = input()\n\nprint(int(2**(len(n)-1))*int(n))\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n\") == \"6\"\n\"\"\"\n\nimport math\n\nMOD = 10 ** 9 + 7\n\nn = int(stdin.readline())\n\npow_1 = 1\npow_2 = 2\npow_3 = 3\n\nfor i in range(0, n):\n    pow_1 *= pow_1\n    pow_2 *= pow_2\n    pow_3 *= pow_3\n\n    pow_1 %= MOD\n    pow_2 %= MOD\n    pow_3 %= MOD\n\nprint(pow_1, pow_2, pow_3)\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == 6\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3''') == '''6'''\nassert solution('''10''') == '''55'''\nassert solution('''1000''') == '''43352655'''\nassert solution('''100000''') == '''5737624100'''\nassert solution('''1000000''') == '''77238529555'''\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"6\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n') == '6'\n\nassert solution('5\\n') == '121'\n\"\"\"\n\nN = int(input())\npower = 1\nfor _ in range(N):\n    power *= _ + 1\n\nprint(power % (10 ** 9 + 7))\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\n\nn = int(stdin.readline())\npower = 1\n\nfor i in range(1, n + 1):\n    power = (power * i) % (10 ** 9 + 7)\n\nprint(power)"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n3') == '5'\n\"\"\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == 6\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(4) == 6\n\"\"\"\n\nN = int(stdin.readline())\n\ncandy_num = 0\nfor i in range(1, N+1):\n    candy_num += i\nprint(candy_num)"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\""
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '6'\nassert solution('2') == '4'\nassert solution('1') == '1'\nassert solution('101') == '100000000'\n\"\"\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == '30'\n\nfrom util.result_check import get_output_with_stdin_and_check_against_known_answer\nimport itertools"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n\") == \"6\"\nassert solution(\"4\\n\") == \"7\"\nassert solution(\"7\\n\") == \"21\"\nassert solution(\"3\\n\") == \"6\"\nassert solution(\"100\\n\") == \"5050\"\n\n\"\"\"\n\nN = int(input())\nprint(N * (N+1) // 2)\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '1+2+3+4'\n\"\"\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"2\") == \"4\"\nassert solution(\"1\") == \"3\"\nassert solution(\"100\") == \"101\"\nassert solution(\"1000\") == \"1001\"\n\"\"\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"55\"\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3 1\") == 2\n\n-----Test Case 1-----\n20\n3 2 4 6 8 2 3 7\nOutput:\n20\n\n-----Test Case 2-----\n1\n3\nOutput:\n3\n\n-----Test Case 3-----\n2\n1 1\nOutput:\n0\n\n-----Test Case 4-----\n3\n2 1 1\nOutput:\n3\n\n-----Test Case 5-----\n100\n1 10 1\nOutput:\n101\n\n\"\"\"\n\nimport unittest\nimport sys\n\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_01(self):\n        self.assertEqual(solution(\"2\\n3 1\"), 2)\n\n    def test_02(self):\n        self.assertEqual(solution(\"2\\n3 1\"), 2)\n\n    def test_03(self):\n        self.assertEqual(solution(\"3\\n1 2 3\"), 3)\n\n    def test_04(self):\n        self.assertEqual(solution(\"4\\n1 2 3 4\"), 7)\n\n    def test_05(self):\n        self."
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a) == e\n\n\"\"\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"2\"\nassert solution(\"3 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n3 1') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n\") == 2\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 3\") == \"2\"\nassert solution(\"3\\n1 1 1\") == \"0\"\nassert solution(\"3\\n1 2 1\") == \"0\"\nassert solution(\"3\\n1 2 2\") == \"1\"\nassert solution(\"3\\n1 2 3\") == \"2\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n3 1') == '2'\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n3 1') == '2'\nassert solution('3\\n3 1') == '1'\nassert solution('3\\n3 3') == '0'\n\"\"\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3 1\") == \"2\"\nassert solution(\"5\\n5 5 1 1 1\") == \"6\"\nassert solution(\"1\\n100\") == \"99\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n2\n3 1\n\"\"\"\n) == \"2\"\n\"\"\"\n2\n1 1\n\"\"\"\nassert solution(\n\"\"\"\n3\n2 1\n\"\"\"\n) == \"2\"\n\"\"\"\n3\n1 1 1\n\"\"\"\nassert solution(\n\"\"\"\n4\n2 1 2 1\n\"\"\"\n) == \"1\"\n\"\"\"\n2\n1 1\n\"\"\"\nassert solution(\n\"\"\"\n3\n1 1 1\n\"\"\"\n) == \"0\"\n\"\"\"\n2\n1 1\n\"\"\"\nassert solution(\n\"\"\"\n5\n1 2 1 1 2\n\"\"\"\n) == \"1\"\n\"\"\"\n1\n1\n\"\"\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\nprint(\"PASSED\")\n\n-----\n\"\"\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\"\"\""
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\n-----Explanation-----\nIn his first submission, he received an AC on the first problem for the first time. Before this, he received one WA on this problem.\nIn his second submission, he received an AC on the second problem for the first time. Before this, he received one WA on this problem.\nTherefore, he has two correct answers and two penalties.\n\"\"\""
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == '2 2'\n-------------------------------\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n1 AC\\n1 AC') == '2 2'\nassert solution('2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA') == '2 2'"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\"\n) == \"2 2\"\nprint(\"PASS\")\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA') == '2 2'\nassert solution('4 4\\n1 AC\\n1 WA\\n1 AC\\n1 AC') == '1 1'\nassert solution('2 5\\n1 AC\\n2 AC') == '0 0'\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\"\"\"\n\nn, m = input().split()\nfor _ in range(int(n)):\n    p, s = input().split()\n    if s == 'AC':\n        if p in answer:\n            answer[p] += 1\n        else:\n            answer[p] = 1\n    else:\n        if p in answer:\n            if answer[p] > 0:\n                answer[p] -= 1\n        else:\n            answer[p] = -1\n    \nanswer = [(k,v) for k,v in answer.items() if v >= 0]\n\nprint(len(answer), sum([v for k,v in answer]))"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n1 WA\\n2 AC\\n3 WA\\n1 AC') == '4 2'\n\"\"\""
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\\n4 1 5\\n\") == 5\n\"\"\""
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\\n4 1 5\") == \"5\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1\\n4 1 5') == '5'\nassert solution('3 1\\n4 1 2') == '4'\nassert solution('3 1\\n4 1 2\\n2 2 1\\n2 1 1\\n3 3 3\\n2 1 4') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n4 1 5\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\\n4 1 5\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n4 1 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 1\n4 1 5''') == '5'\n\"\"\""
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n4 1 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n4 1 5\") == \"5\"\n\"\"\"\nfrom sys import stdin\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 5\\n1 2 3 4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3\\n1\\n') == '9'\nassert solution('4\\n10\\n1\\n') == '22'\nassert solution('4\\n10\\n2\\n') == '9'\n\"\"\"\n\n\"\"\"\nExample solution:\n\nimport sys"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()\nprint(\"Hooray!\")\n\n---------------------------------------------"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n10\\n2\") == \"4\"\nassert solution(\"1\\n1\\n1\") == \"0\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 10 2\") == \"4\"\n\"\"\"\n\nimport math\nimport sys\n\nDEBUG = False"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1\\n1 10\\n1 10') == '3'\n\"\"\"\nfrom math import inf\n\nimport sys\nimport os\nimport re\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10\\n2\\n\") == \"4\"\n\"\"\"\n\nfrom math import gcd\nfrom collections import defaultdict"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n10\\n2\\n') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n10\\n2\\n') == '4'\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 10 2\") == \"4\"\nassert solution(\"4 3 2\") == \"9\"\nassert solution(\"6 3 4\") == \"15\"\n\"\"\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"5\"\nassert solution(\"1 10\") == \"14\"\nassert solution(\"10 100\") == \"88\"\nassert solution(\"1 100 1\") == \"104\"\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('600 300 220 420') == '520'\n\"\"\""
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\"\"\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\nassert solution(\"10 10 10 10\") == \"0\"\nassert solution(\"0 0 0 0\") == \"0\""
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('600 300 220 420') == '520'\nprint('Test success.')\n\n\"\"\""
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('600 300 220 420') == '520'\n\"\"\"\n\nimport unittest\nfrom functools import partial\nfrom operator import add"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('600 300 220 420') == '520'\nassert solution('1 1 1 1') == '4'\nassert solution('1 1 1 1') == '0'\nassert solution('1') == '0'\n\"\"\"\nimport unittest"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('600 300 220 420') == '520'\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\"\"\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''600\n300\n220\n420''') == '520'\nassert solution('''1\n2\n3\n4''') == '1'\nassert solution('''3\n2\n1\n2''') == '1'\n\n\"\"\"\nfrom typing import Union\nimport functools\n\nfrom icontract import require, ensure\n\nfrom python_by_contract_corpus.common import Lines\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n5\n2 4 4 0 2\n''') == '4'\n\nassert solution('''\n6\n0 1 1 1 0 1\n''') == '0'\n\nassert solution('''\n7\n1 1 1 1 1 1\n''') == '10'\n\nassert solution('''\n6\n0 1 1 1 0 1\n''') == '0'\n\nassert solution('''\n3\n0 0 1\n''') == '0'"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 4 4 0 2') == '4'\nassert solution('5\\n2 4 0 4 2') == '4'\nassert solution('5\\n2 4 4 2 0') == '4'\nassert solution('5\\n0 2 4 4 2') == '4'\n\"\"\"\n\nimport sys\nimport os\nimport statistics\nimport math"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\n\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 4 4 0 2\\n') == '4'\n\nassert solution('2 2 4 1 0\\n') == '0'\n\nassert solution('2 2 4 1 3\\n') == '4'\n\"\"\"\n\nn = int(input())\na = [int(x) for x in input().split(' ')]\ndp = [[0] * n for i in range(n)]\nfor i in range(n):\n    dp[i][i] = 1\nfor i in range(n - 2, -1, -1):\n    for j in range(i + 1, n):\n        if a[i]!= a[j]:\n            dp[i][j] = dp[i + 1][j] + dp[i][j - 1]\n        else:\n            dp[i][j] = dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1]\nprint(dp[0][n - 1] % (10 ** 9 + 7))\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 4 4 0 2\\n\") == \"4\"\nassert solution(\"4 2 4 0 2\\n\") == \"4\"\nassert solution(\"5 4 4 2 0 2\\n\") == \"4\"\nassert solution(\"4 4 4 2 0 2\\n\") == \"0\"\nassert solution(\"4 4 4 2 2 0\\n\") == \"4\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\nassert solution(\"3\\n2 3 2\") == \"0\"\n\"\"\""
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 4 0 2\") == 4\n\n\"\"\"\nimport sys\n\nN = int(input())\nA = list(map(int, sys.stdin.read().split(\" \")))\n\nA.sort()"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 4 4 0 2\") == \"4\"\n\"\"\"\n\nfrom math import gcd\n\n\"\"\"\n\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043c\u0435\u043d\u044c\u0448\u0435 10000 \u0438\u0437 \u0447\u0438\u0441\u0435\u043b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u0441\u0442\u0430\u0442\u043a\u0438 \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430 5 \u0438 \u043d\u0430 7 \u0440\u0430\u0432\u043d\u044b.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e N (1 \u2264 N \u2264 10000).\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b, \u0434\u0435\u043b\u044f\u0449\u0438\u0445\u0441\u044f \u043d\u0430 7 \u0438 \u043d\u0430 5, \u043c\u0435\u043d\u044c\u0448\u0435 N \u0438 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u0446\u0438\u0444\u0440 7 \u0438\u043b\u0438 5.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435.\n\u0414\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0433\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f gcd \u043c\u043e\u0434\u0443\u043b\u044f math.\n\"\"\""
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 2 5\") == \"84\"\n\"\"\"\n\n\"\"\"\nGiven the following rules:\n\n0: 1\n1: 10\n2: 11\n3: 12\n4: 13\n5: 14\n6: 15\n7: 16\n8: 17\n9: 18\nA: 19\nB: 20\nC: 21\nD: 22\nE: 23\nF: 24\nAdd to the number formed by the digits the number formed by the digits of A (in base 10) followed by the number formed by the digits of B (in base 10).\n\nExample:\n\nIf A = 5, B = 4, the number formed by the digits of A is 5, and the number formed by the digits of B is 4, the result will be equal to 5 + 4 = 9 (in base 10).\n\nTherefore, if A = 5, B = 5, the number formed by the digits of A is 5, and the number formed by the digits of B is 5, the result will be equal to 5 + 5 = 10 (in base 10).\n\nAdd the letters of the first number to the letters of the second number, but don't add leading zeroes.\n\nExample:\n\nA = \"ABC\", B = \"XYZ\" --> \"AEBF\" + \"YZ\" = \"AEZF\"\n\nIn the example above, the number formed by the digits of A is \"ABC\" (base 10) and the number formed by the digits of B is \"XYZ\" (base 10).\n\nThe result will be equal to \"AE\" + \"ZF\" = \"AZE\" (base 10).\n\nTherefore, if A = \"ABC\", B = \"XYZ\", the result will be equal to \"A\" + \"E\" = \"AE\".\n\nYou don't need to add zeroes in the result or remove leading zeroes.\n\nComplete the function that receives two strings and returns the result of the addition, following the rules above.\n\nNotes\n\nThe result will have the same length as the longest number passed as parameter.\n\nIf the number formed by the digits of A is shorter than the length of the number formed by the digits of B, add leading zeroes in the result until its length is equal to the length of the number formed by B.\n\nFor example: if A = \"12\", B = \"1000\", the number formed by the digits of A is \"12\" (base 10) and the number formed by the digits of B is \"1000\" (base 10), then the result will be \"0\" + \"2\" = \"02\" (base 10).\n\nInput:\n\nThe first line contains a single integer T, denoting the number of test cases.\nThe first line of each test case contains the string A representing a number in base 10.\nThe second line of each test case contains the string B representing a number in base 10.\nOutput:\n\nFor each test case, print a single line containing the result of the addition, following the rules above.\nConstraints:\n\n1 \\leq T \\leq 10^4\n0 \\leq A \\leq B \\leq 36\n\nExample:\n\nInput:\n\n2\n5\n4\n5\n5\n5\n5\n5\n5\n5\n5\n\nOutput:\n\n9\nAA\n\"\"\""
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 2 5\") == \"84\"\nassert solution(\"1 2 3\") == \"0\"\nassert solution(\"11 22 33\") == \"0\"\nassert solution(\"101 110 111\") == \"110\"\n\"\"\"\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 2 5\") == \"84\"\n\"\"\"\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 2 5\") == \"84\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 20 2 5') == '84'\n\nprint(solution('3 20 2 5'))\n\n'''\n\nfrom stdin import stdin\nimport re\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 2 5\\n\") == \"84\"\nprint(solution(input()))\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20 2 5\") == \"84\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''20 2 5''') == 84\n\"\"\"\n\nfrom __future__ import annotations\n\nimport sys\nfrom itertools import chain, combinations\nfrom typing import Callable, List, Set, Tuple, Optional\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('20 2 5') == \"84\"\n\"\"\"\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('N A B\\n') == ''\nassert solution('1 1 1\\n') == ''\nassert solution('5 2 5\\n') == ''\nassert solution('5 10 5\\n') == ''\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\"\n\nN = int(input())\n\nround = N // 100"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100') == 'ABC100'\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nn = int(stdin.readline().strip())\n\nsys.stdout.write(f\"ABC{n}\\n\")\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100') == 'ABC100'\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('ABC') == 'ABC'\nassert solution('ABC100') == 'ABC100'\n'''\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100') == 'ABC100'\n\"\"\"\n\nn = input()\n\nprint(f'ABC{int(n):03}')\n\n\"\"\"\nimport string\nn = input()\nprint(string.ascii_uppercase[int(n[1:])-1]+n[0])\n\"\"\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('100') == 'ABC100'\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\"\n\nn = stdin\nn = int(n)"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100') == 'ABC100'\n\"\"\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100\") == \"ABC100\"\nprint(solution(\"100\"))\n\"\"\""
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 5') == '5'\n\"\"\"\n\nimport datetime\nimport sys"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5') == '5'\n\"\"\"\nimport re\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"1 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"1 2\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\"\n\nimport sys\n\na = int(sys.stdin.readline().strip().split()[0])\nb = int(sys.stdin.readline().strip().split()[0])\n\nprint(a*b)\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\") == \"5\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\"\nimport sys\n\n_, a, b = sys.stdin.read().split(\" \")\nprint(abs((int(b) - int(a)) + 1))\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\"\n\na,b = list(map(int,input().split(\" \")))\n\nprint(a*b)"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"5 1\") == \"0\"\nassert solution(\"5 31\") == \"28\"\nassert solution(\"1 12\") == \"12\"\nassert solution(\"3 7\") == \"14\"\n\"\"\""
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5') == '5'\nassert solution('3 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n3\n3\n1\n2\n''') == '2'\nassert solution('''\n3\n3\n1\n2\n''') == '-1'\nassert solution('''\n2\n3\n1\n2\n''') == '-1'\nassert solution('''\n2\n2\n1\n1\n''') == '-1'\nassert solution('''\n5\n2\n3\n3\n4\n5\n''') == '3'\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1\\n2\\n\") == \"2\"\nassert solution(\"3\\n1\\n2\\n\") == \"2\"\n\n------Solution------\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1\\n2\") == \"2\"\n\nassert solution(\"4\\n3\\n1\\n2\") == \"2\"\n\nassert solution(\"5\\n3\\n2\\n1\\n5\") == \"5\"\n\nassert solution(\"7\\n7\\n1\\n2\\n3\\n4\\n5\\n7\") == \"0\"\n\nassert solution(\"5\\n3\\n4\\n1\\n5\") == \"2\"\n\nprint('Success')\n\"\"\"\n\n\n\"\"\"\n@atcoder.jp 2020/04/09\n\n1\u679a\u306e\u6642\u306b\u3069\u3053\u3092\u5149\u308b\u304b\n\nN\u500b\u306e\u6b63\u306e\u6574\u6570a_1,...,a_N\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\n\u3053\u306e\u4e2d\u306b\u3042\u308b\u6574\u6570\u306f\u3069\u3053\u306b\u3042\u308b\u304b\u3092\u793a\u3059\u6574\u65701,...,N\u3092\u5168\u3066\u51fa\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1\\n2\\n') == '2'\nassert solution('3\\n3\\n2\\n') == '-1'\nassert solution('4\\n1\\n2\\n2\\n') == '2'\nassert solution('3\\n1\\n3\\n') == '2'\nassert solution('5\\n1\\n3\\n2\\n3\\n') == '-1'\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1\\n2\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n3\\n1\\n2') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n3\n1\n2''') == '2'\nassert solution('''4\n4\n1\n3''') == '-1'\nassert solution('''3\n3\n1\n2''') == '-1'\nassert solution('''4\n4\n1\n3''') == '0'\nassert solution('''3\n4\n1\n2''') == '2'\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1\\n2\\n') == '2'\n\n-----\n\nAtCoder Educational DP Contest A - Problem D\n\nN = int(input())\na = list(map(int, input().split()))\ndp = [0] * (N + 1)\ndp[1] = 1\nfor i in range(1, N + 1):\n    dp[i + 1] = dp[i] + 1\n    if i + a[i - 1] <= N + 1:\n        dp[i + a[i - 1]] = min(dp[i + a[i - 1]], dp[i] + 1)\nprint(dp[N])\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n2\") == \"2\"\n\n\"\"\"\n\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1\\n2\\n') == '2'\nassert solution('3\\n1\\n1\\n') == '-1'\n\n------Problem Statement------\n\nWrite 5 lines of code to test the correctness of solution:\nTakahashi wants to gain muscle, and decides to work out at AtCoder Gym.\nThe exercise machine at the gym has N buttons, and exactly one of the buttons is lighten up.\nThese buttons are numbered 1 through N.\nWhen Button i is lighten up and you press it, the light is turned off, and then Button a_i will be lighten up. It is possible that i=a_i.\nWhen Button i is not lighten up, nothing will happen by pressing it.\nInitially, Button 1 is lighten up. Takahashi wants to quit pressing buttons when Button 2 is lighten up.\nDetermine whether this is possible. If the answer is positive, find the minimum number of times he needs to press buttons.\n\n-----Constraints-----\n - 2 \u2264 N \u2264 10^5\n - 1 \u2264 a_i \u2264 N\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1\na_2\n:\na_N\n\n-----Output-----\nPrint -1 if it is impossible to lighten up Button 2.\nOtherwise, print the minimum number of times we need to press buttons in order to lighten up Button 2.\n\n-----Sample Input-----\n3\n1\n2\n\n-----Sample Output-----\n2\n\nPress Button 1, then Button 3.\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n6\\n2\\n6\\n\") == \"1\"\n\"\"\"\n\nimport sys\n\nfrom typing import List\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n2\\n5\\n\") == '1'\nassert solution(\"2\\n2\\n5\\n\") == '1'\nassert solution(\"2\\n2\\n5\\n\") == '1'\nassert solution(\"2\\n2\\n5\\n\") == '1'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == '1'\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\nassert solution(\"5\\n10\\n20\\n20\\n20\") == \"3\"\nassert solution(\"5\\n10\\n20\\n30\\n40\") == \"5\"\n\"\"\""
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == '1'\n\"\"\"\n\nimport unittest\nimport unittest.mock as mock\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\"\n\n\"\"\"\nYou are playing a game. There is a list of N integers (each integer is between 0 and 100 000).\n You should create a list with the same length and add up the numbers in the same order as in the original list.\n\nSample input:\n4\n4\n5\n6\n7\n\nSample output:\n14\n\"\"\"\n\nn = int(input())\nl = [int(i) for i in input().split()]\nc = [0] * len(l)\nfor i in range(n):\n    c[l[i] - 1] += 1\nprint(sum(c))\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n2') == '1'\nassert solution('2\\n6') == '1'\nassert solution('6\\n2\\n6') == '1'\nassert solution('2\\n6\\n6') == '2'\nassert solution('6\\n2\\n6\\n6') == '2'\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\"\n\nfrom sys import stdin\nimport re\n\nn = int(stdin.readline().rstrip())\nsheet = {}\nfor i in range(n):\n    s = stdin.readline().rstrip()\n    if re.match(r'^\\d+$', s):\n        num = int(s)\n        if num in sheet:\n            sheet.pop(num)\n        else:\n            sheet[num] = True\nprint(len(sheet))\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == '1'\n\"\"\""
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\n\"\"\"\n\n\nfrom collections import Counter\nfrom typing import List\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == '1'\n\"\"\"\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 2 2 5\") == 1\n\"\"\"\n\nimport sys\nimport collections\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict\nimport unittest"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n5 5\") == \"1\"\nassert solution(\"2 3\\n6 5 4\") == \"1\"\nassert solution(\"2 3\\n6 6 5\") == \"2\"\nassert solution(\"1 1\\n1\") == \"0\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == '1'\n\"\"\"\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\\n6 1 1\\n\") == \"Yes\"\n\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1 2\\n6 1 1\\n') == 'Yes'\nassert solution('2\\n3 1 2\\n') == 'No'\nassert solution('3\\n1 1 1\\n') == 'Yes'\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def validate(self, n: int, x: List[int], y: List[int]) -> bool:\n        if n < 2:\n            return True\n        t, x, y = sorted(x), sorted(y), sorted(y)\n        start = (0, 0)\n        end = (0, 0)\n        for i in range(n):\n            t0, x0, y0 = t[i], x[i], y[i]\n            if x0 < start[0] or x0 > end[0] or y0 < start[1] or y0 > end[1]:\n                return False\n            start, end = (x0, y0), (x0, y0)\n            if x0 > start[0] or x0 < end[0] or y0 > start[1] or y0 < end[1]:\n                return False\n        return True\n\n    def validate(self, n: int, x: List[int], y: List[int]) -> bool:\n        if n < 2:\n            return True\n        t, x, y = sorted(x), sorted(y), sorted(y)\n        for i in range(n):\n            t0, x0, y0 = t[i], x[i], y[i]\n            for j in range(i + 1, n):\n                t1, x1, y1 = t[j], x[j], y[j]\n                if abs(x1 - x0) <= 1 and abs(y1 - y0) <= 1:\n                    return False\n        return True\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\": 2 1 2\") == \"Yes\"\nassert solution(\": 6 1 1\") == \"No\"\n\"\"\"\n\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 1\\n6 1 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input) == expected_output\n\n\"\"\""
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == \"Yes\"\nassert solution(\"6 1 1\") == \"Yes\"\nassert solution(\"4 3 2\") == \"No\"\nassert solution(\"1 1 1\") == \"Yes\"\nassert solution(\"2 2 2\") == \"No\"\n\"\"\"\nfrom operator import itemgetter"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\n3 1 2\n6 1 1\n\"\"\") == \"Yes\"\n\n\"\"\"\nYou are given a positive integer N. Print all the binary strings of length N such that there are no consecutive 1's in the binary string.\n\nInput Format\n\nA single integer N denoting the length of the binary strings that have to be printed.\n\nOutput Format\n\nPrint the different binary strings, each binary string in a new line.\n\nSample Input 0\n\n5\nSample Output 0\n\n0\n1\n110\n101\n1001\nExplanation 0\n\nAll the possible binary strings of length 5 are {0}, {1}, {110}, {101} and {1001}.\nAll the possible binary strings of length 5 that have no consecutive 1's are {0}, {1}, {110}, {101} and {1001}.\n\nNote:\n0 and 1 are the only two possible digits.\nThe given integer N is not greater than 20.\nEach binary string is printed in a new line.\n\"\"\""
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\\n6 1 1\\n\") == \"Yes\"\n\"\"\"\nimport sys\nimport re"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n3 1 2\\n6 1 1') == 'Yes'\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1, 3) == \"2\"\nassert solution(3, 1) == \"2\"\nassert solution(3, 3) == \"3\"\n\"\"\"\n\n\"\"\"\nTestcase1\nInput\n1 3\n\nOutput\n2\n\"\"\""
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3') == '2'\nassert solution('0 0') == '0'\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3') == '2'\n\"\"\""
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3\\n\") == 2\n\"\"\""
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3\\n') == '2'\nassert solution('3 4\\n') == '4'\nassert solution('4 2\\n') == '4'\nassert solution('2 2\\n') == '2'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3') == '2'\n'''\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3\\n') == 2\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\") == \"4\""
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\\n\") == 4\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n1 3\\n2 3\\n3 1\\n') == '4'\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\n\"\"\") == '4'\n\n-----Explanation-----\nThe given graph is shown in the figure below.\nThe edges shown in red are bridges. There are four of them.\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == \"4\"\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n1 2\\n2 3\\n3 4\") == '4"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\n\"\"\") == '4'\nassert solution(\"\"\"\n8 8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n1 8\n\"\"\") == '3'\nassert solution(\"\"\"\n6 4\n1 2\n2 3\n2 4\n5 6\n\"\"\") == '2'\nassert solution(\"\"\"\n6 7\n1 2\n2 3\n3 4\n5 6\n\"\"\") == '0'\n\"\"\"\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\\n7 7\\n\") == \"4\", \"wrong result\"\n\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == \"4\"\n\"\"\"\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\nedges = {}\n\nfor _ in range(M):\n    a, b = map(int, sys.stdin.readline().split())\n    if a not in edges:\n        edges[a] = set()\n    if b not in edges:\n        edges[b] = set()\n    edges[a].add(b)\n    edges[b].add(a)\n\nedges = {k: list(v) for k, v in edges.items()}\n\nbridges = 0\nfor a in edges.keys():\n    for b in edges.keys():\n        if len(edges[a]) < 2 and len(edges[b]) < 2:\n            continue\n        if len(edges[a].intersection(edges[b])) == 0:\n            bridges += 1\n\nprint(bridges)\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(5)) == \"7\"\nassert solution(str(7)) == \"5\"\nassert solution(str(5)) == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 7 5') == '7'\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2 1\") == \"2\"\nassert solution(\"6 6 6\") == \"1\"\nassert solution(\"7 7 7\") == \"7\"\nassert solution(\"10 10 10\") == \"10\"\n\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 7 5\") == \"7\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7 5\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 7 5') == '5'\n\"\"\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7 5\") == \"7\"\n\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7 5\") == \"7\"\n\"\"\"\n\nimport sys\n\nA, B, C = sys.stdin.readlines()\nA, B, C = int(A), int(B), int(C)"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\""
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n\nimport sys\n\nfrom typing import List\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 10 20 15 200\") == '110 10'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\n\"\"\"\n\nA, B, C, D, E, F = (int(i) for i in stdin.split())"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n\nfrom typing import List, Set\n\n\nclass Solution:\n    def make_sugar_water(self, a: int, b: int, c: int, d: int, e: int, f: int) -> List[int]:\n        w = f // (100 * a + b)\n        s = e // (100 * c + d)\n        if w > s:\n            return [s, w]\n        else:\n            return [w, s]\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\nassert solution(\"1 2 20 20 15 200\") == \"110 10\"\nassert solution(\"1 20 10 20 15 200\") == \"110 10\"\nassert solution(\"1 2 20 20 15 300\") == \"110 10\"\nassert solution(\"1 20 10 20 15 300\") == \"110 10\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\nassert solution(\"globall\") == \"glob\"\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('internationalization') == 'i18n'"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('internationalization') == 'i18n'\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\nprint(solution(\"internationalization\"))\n\"\"\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('internationalization') == 'i18n'\n\"\"\"\n\nimport unittest\nimport re\n\n\nclass Solution:\n    def __init__(self, s):\n        self.s = s\n\n    def solution(self) -> str:\n        n = len(self.s)\n        l = n - 1\n        return self.s[0:3] + str(l - 2)\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        self.s = Solution('internationalization')\n\n    def test_solution(self) -> None:\n        self.assertEqual(self.solution(), 'i18n')\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('internationalization') == 'i18n'\n\"\"\"\n\ns = input()\n\nlength = len(s)\n\nres = s[0:3]\ni = 3\nwhile i < length:\n    res += str(length - i)\n    i += 1\n\nprint(res)"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('internationalization') == 'i18n'\n\n--------------------------------------------------------------\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('internationalization') == 'i18n'"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"pot\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('pot') == 'YES'\nassert solution('top') == 'YES'\nassert solution('eot') == 'NO'\nassert solution('tpo') == 'NO'\n\nprint('All tests passed.')\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\nprint(\"Check your output for more cases!\")\n\n-----\n\nWrite 5 lines of code to test the correctness of solution:\nYou are given a grid of 2 rows and 3 columns of squares.\nThe color of the square at the i-th row and j-th column is represented by the character C_{ij}.\nWrite a program that prints YES if this grid remains the same when rotated 180 degrees, and prints NO otherwise.\n\n-----Constraints-----\n - C_{i,j}(1 \\leq i \\leq 2, 1 \\leq j \\leq 3) is a lowercase English letter.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nC_{11}C_{12}C_{13}\nC_{21}C_{22}C_{23}\n\n-----Output-----\nPrint YES if this grid remains the same when rotated 180 degrees; print NO otherwise.\n\n-----Sample Input-----\npot\ntop\n\n-----Sample Output-----\nYES\n\nThis grid remains the same when rotated 180 degrees.\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str1) == str2\n\n\"\"\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"pot\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"pot\") == \"YES\"\n\nassert solution(\"top\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    stdin=\n    '''pot\n    top\n    '''\n) == 'YES'\n\nassert solution(\n    stdin=\n    '''p\n    t\n    '''\n) == 'NO'\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\n\"\"\"\n\ngrid = []\nfor _ in range(2):\n    row = list(stdin.readline().strip())\n    grid.append(row)"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aba') == 'b'\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aba') == 'b'\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aba') == 'b'\nassert solution('abac') == 'c'\nassert solution('aabaa') == 'abaa'\n\"\"\"\n\ns = input()\nk = int(input())\n\nsubstrings = []\n\nfor i in range(len(s)):\n    for j in range(i, len(s)):\n        substrings.append(s[i:j])\n\nsubstrings.sort()\nprint(substrings[k-1])"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aba') == 'b'\nassert solution('ababa') == 'b'\nassert solution('abbb') == 'b'\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ababc') == 'b'\nassert solution('abc') == 'a'\nassert solution('ababab') == 'abab'\n\"\"\""
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aba') == 'b'\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aba\") == \"b\"\nassert solution(\"abac\") == \"c\"\nassert solution(\"abab\") == \"ab\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aba\") == \"b\"\n\"\"\"\n\ns = input()\nk = int(input())"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == 'b'\n\"\"\"\n\ns = input()\nk = int(input())\ns_list = []\n\nfor i in range(1, len(s) + 1):\n    for j in range(0, len(s) - i + 1):\n        s_list.append(s[j:j + i])\n\ns_list.sort()\nprint(s_list[k - 1])\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abac\") == \"abc\"\n\"\"\"\n\n\"\"\"\nSample Input:\nabcde\n2\n\nSample Output:\ncde\n\n\"\"\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4 2\\n2 1 1\\n3 3 4') == '9'\n\"\"\"\n\nimport sys\n\nfrom functools import reduce"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n5 4 2\n2 1 1\n3 3 4\n\"\"\"\n) == '9'\nassert solution(\n\"\"\"\n6 5 3\n2 1 1\n3 5 4\n\"\"\"\n) == '7'\nassert solution(\n\"\"\"\n5 5 4\n3 2 1\n1 1 4\n\"\"\"\n) == '10'\n\"\"\"\nW H N\nx_1 y_1 a_1\nx_2 y_2 a_2\n:\nx_N y_N a_N\n\"\"\""
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 4 2\n2 1 1\n3 3 4''') == '9'\nassert solution('''1 1 1\n1 1 2''') == '0'\nassert solution('''10 10 10\n1 2 3\n1 1 4''') == '18'\n\"\"\"\n\nw, h, n = map(int, input().split())\nx = [int(x) for x in input().split()]\ny = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nsum_ = 0\nfor i in range(n):\n    if a[i] == 1:\n        for j in range(i, n):\n            if x[j] < x[i] or (x[j] == x[i] and y[j] > y[i]):\n                sum_ += (x[j] - x[i]) * (y[j] - y[i])\n                break\n    elif a[i] == 2:\n        for j in range(i, n):\n            if x[j] > x[i] or (x[j] == x[i] and y[j] > y[i]):\n                sum_ += (x[j] - x[i]) * (y[j] - y[i])\n                break\n    elif a[i] == 3:\n        for j in range(i, n):\n            if y[j] < y[i] or (y[j] == y[i] and x[j] > x[i]):\n                sum_ += (x[j] - x[i]) * (y[j] - y[i])\n                break\n    else:\n        for j in range(i, n):\n            if y[j] > y[i] or (y[j] == y[i] and x[j] > x[i]):\n                sum_ += (x[j] - x[i]) * (y[j] - y[i])\n                break\nprint(sum_)\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\"\nfrom math import floor\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\n---------------------\n\"\"\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\\n\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\"\n\nfrom collections import namedtuple\nfrom typing import List, Tuple\n\nCoordinate = namedtuple(\"Coordinate\", [\"x\", \"y\"])\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\""
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\""
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4 2\\n2 1 1\\n3 3 4') == 9\nassert solution('5 3 5\\n4 1 2\\n4 4 4') == 0\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 5 1\\n1 10 1\") == \"12\\n11\\n0\"\n\"\"\""
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n6 5 1\\n1 10 1\") == \"12\\n11\\n0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n3\n6 5 1\n1 10 1\n    \"\"\") == '12\\n11\\n0'\n\"\"\"\n\n\u984c\u76ee: https://atcoder.jp/contests/abc087/tasks/arc086_b\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n3\n6 5 1\n1 10 1\n\"\"\") == \"12\\n11\\n0\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 5 1\\n1 10 1\\n\") == \"12\\n11\\n0\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3\n6 5 1\n1 10 1\n\"\"\") == \"12\\n11\\n0\\n\"\n\"\"\""
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 10 1\\n\") == \"12\\n11\\n0\"\n\"\"\""
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10 1\\n1 10 1\\n\") == \"12\\n11\\n0\"\n\"\"\"\n\nfrom collections import deque\nimport sys\n\nstdin = sys.stdin.read()\n\nn = int(stdin.split('\\n')[0])\nq = deque()\n\nfor i in range(n):\n    c, s, f = [int(i) for i in stdin.split('\\n')[1 + i].split(' ')]\n    q.append((c, s, f))\n\ntime = 0\nloc = 1\nfor i in range(len(q)):\n    c, s, f = q.popleft()\n    q.append((c, s, f))\n    while time % f:\n        time += c\n    loc = (loc + c) % n\n    print(time)\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n6 5 1\\n1 10 1\") == \"12\\n11\\n0\"\n\"\"\"\n\nimport sys\nfrom typing import List\n\n\nclass Train:\n    def __init__(self, time: int, distance: int, direction: int) -> None:\n        self.time = time\n        self.distance = distance\n        self.direction = direction\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n6 5 1\\n1 10 1\") == \"12\\n11\\n0\"\nassert solution(\"3\\n0 10 1\") == \"10\\n11\\n0\"\nassert solution(\"3\\n0 0 1\") == \"0\\n0\\n0\"\nassert solution(\"4\\n0 0 0 1\") == \"0\\n0\\n0\\n0\"\nassert solution(\"1\\n1 1 1\") == \"1\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n.*\\n.*') == '.*\\n.*'\n\"\"\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n.*\\n.*\") == \".*\\n.*\\n.*\\n.*\"\nassert solution(\"4 4\\n.A.\\n.*\\n.B.\\n.C.\\n.D.\\n\") == \".A.\\n.B.\\n.C.\\n.D.\"\n\n---------------------------------------------------"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n*\\n.*\") == \".*\\n.*\\n.*\\n.*\"\nassert solution(\"2 2\\n.\\n.*\") == \".\\n.*\"\nassert solution(\"1 1\\n.*\") == \".*\"\nassert solution(\"1 1\\n.*\") == \".*\"\nassert solution(\"2 2\\n.\\n.\\n.*\") == \".\\n.\\n.\\n.*\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n.*\\n.*\") == \".*\\n.*\\n.*\\n.*\"\n\"\"\"\n\n\"\"\"\nQ20.\nWrite 5 lines of code to test the correctness of solution:\nThere is an image with a height of H pixels and a width of W pixels. Each of the pixels is represented by either. or *. The character representing the pixel at the i-th row from the top and the j-th column from the left, is denoted by C_{i,j}.\nExtend this image horizontally so that its height is doubled. That is, print a image with a height of 2H pixels and a width of W pixels where the pixel at the i-th row and j-th column is equal to C_{i,(j+1)/2} (the result of division is rounded down).\n\n-----Constraints-----\n - 1\u2266H, W\u2266100\n - C_{i,j} is either. or *.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nH W\nC_{1,1}...C_{1,W}\n:\nC_{H,1}...C_{H,W}\n\n-----Output-----\nPrint the extended image.\n\n-----Sample Input-----\n2 2\n*.\n.*\n\n-----Sample Output-----\n.*\n.*\n.*\n.*\n\"\"\"\n\n\"\"\"\nQ21.\nWrite 5 lines of code to test the correctness of solution:\nExtend the given image vertically so that its height is 4 times larger. That is, print a image with a height of 4H pixels and a width of W pixels where the pixel at the i-th row and j-th column is equal to C_{(i+1)/2,j} (the result of division is rounded down).\n\n-----Constraints-----\n - 1\u2266H, W\u2266100\n - C_{i,j} is either. or *.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nH W\nC_{1,1}...C_{1,W}\n:\nC_{H,1}...C_{H,W}\n\n-----Output-----\nPrint the extended image.\n\n-----Sample Input-----\n2 2\n*.\n.*\n\n-----Sample Output-----\n*\n.*\n*\n.*\n\"\"\"\n\n\"\"\"\nQ22.\nWrite 5 lines of code to test the correctness of solution:\nExtend the given image horizontally so that its height is 3 times larger. That is, print a image with a height of 3H pixels and a width of W pixels where the pixel at the i-th row and j-th column is equal to C_{i,(j+1)/2} (the result of division is rounded down).\n\n-----Constraints-----\n - 1\u2266H, W\u2266100\n - C_{i,j} is either. or *.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nH W\nC_{1,1}...C_{1,W}\n:\nC_{H,1}...C_{H,W}\n\n-----Output-----\nPrint the extended image.\n\n-----Sample Input-----\n2 2\n*.\n.*\n\n-----Sample Output-----\n.*\n.*\n*\n.*\n\"\"\"\n\n\"\"\"\nQ23.\nWrite 5 lines of code to test the correctness of solution:\nExtend the given image horizontally so that its width is 2 times larger. That is, print a image with a height of H pixels and a width of 2W pixels where the pixel at the i-th row and j-th column is equal to C_{i,(j+1)/2} (the result of division is rounded down).\n\n-----Constraints-----\n - 1\u2266H, W\u2266100\n - C_{i,j} is either. or *.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nH W\nC_{1,1}...C_{1,W}\n:\nC_{H,1}...C_{H,W}\n\n-----Output-----\nPrint the extended image.\n\n-----Sample Input-----\n2 2\n*.\n.*\n\n-----Sample Output-----\n.*\n.*\n\n-----Sample Input-----\n2 2\n*.\n*\n:\n*\n\n-----Sample Output-----\n*\n*\n*\n*\n*\n\"\"\"\n\n\"\"\"\nQ24.\nWrite 5 lines of code to test the correctness of solution:\nExtend the given image vertically so that its height is 2 times larger. That is, print a image with a height of 2H pixels and a width of W pixels where the pixel at the i-th row and j-th column is equal to C_{(i+1)/2,j} (the result of division is rounded down).\n\n-----Constraints-----\n - 1\u2266H, W\u2266100\n - C_{i,j} is either. or *.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nH W\nC_{1,1}...C_{1,W}\n:\nC_{H,1}...C_{H,W}\n\n-----Output-----\nPrint the extended image.\n\n-----Sample Input-----\n2 2\n*.\n.*\n\n-----Sample Output-----\n*\n*\n:\n*\n\n-----Sample Input-----\n2 2\n*.\n*\n:\n*\n\n-----Sample Output-----\n*:\n*\n\n-----Sample Input-----\n2 2\n*.\n*\n:\n*\n\n-----Sample Output-----\n*:\n*:\n\"\"\"\n\n\"\"\"\nQ25.\nWrite 5 lines of code to test the correctness of solution:\nExtend the given image horizontally so that its width is 2 times larger. That is, print a image with a height of H pixels and a width of 2W pixels where the pixel at the i-th row and j-th column is equal to C_{i,(j+1)/2} (the result of division is rounded down).\n\n-----Constraints-----\n - 1\u2266H, W\u2266100\n - C_{i,j} is either. or *.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nH W\nC_{1,1}...C_{1,W}\n:\nC_{H,1}...C_{H,W}\n\n-----Output-----\nPrint the extended image.\n\n-----Sample Input-----\n2 2\n*.\n.*\n\n-----Sample Output-----\n.*\n.*\n\n-----Sample Input-----\n2 2\n*.\n*\n:\n*\n\n-----Sample Output-----\n.*\n.*\n\n-----Sample Input-----\n2 2\n*.\n*\n:\n*\n\n-----Sample Output-----\n*:\n*\n\n-----Sample Input-----\n2 2\n*.\n*\n:\n*\n\n-----Sample Output-----\n*:\n*:\n\"\"\"\n\n\"\"\"\nQ26.\nWrite 5 lines of code to test the correctness of solution:\nExtend the given image horizontally so that its width is 2 times larger. That is, print a image with a height of H pixels and a width of 2W pixels where the pixel at the i-th row and j-th column is equal to C_{(i+1)/2,j} (the result of division is rounded down).\n\n-----Constraints-----\n - 1\u2266H, W\u2266100\n - C_{i,j} is either. or *.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nH W\nC_{1,1}...C_{1,W}\n:\nC_{H,1}...C_{H,W}\n\n-----Output-----\nPrint the extended image.\n\n-----Sample Input-----\n2 2\n*.\n.*\n\n-----Sample Output-----\n.*\n.*\n\n-----Sample Input-----\n2 2\n*.\n*\n:\n*\n\n-----Sample Output-----\n*\n*"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n*\\n.*\") == \"*\\n*\"\n\n\"\"\"\nfrom collections import deque\n\n\"\"\"\nLet's assume that we have a image where each of the pixels is either. or *. \nThe image has H rows and W columns, and it starts with a row of.s and then a row of *.s. \nThe image we want to build is also a 2\u00d7H image, and it starts with a row of.s and then a row of *.s. \nWe can represent the image of the form.s...s in the form of the list, where.s is a string of.s, \nand s is a string of *.s. For example, [\".s\",\"s.\"] represents the image that has a height of 2 and starts with.s and then.s. \nIn order to extend this image, we need to extend the image horizontally and vertically. \nWe can extend each row of the image horizontally by adding the row of.s on the left and the row of *.s on the right, \nand we can extend each column of the image vertically by adding the column of.s above and the column of *.s below. \nTo extend the image horizontally, we add a row of.s to the left of the current row, and add a row of *.s to the right of the current row. \nTo extend the image vertically, we add a column of.s to the top of the current column, and add a column of *.s to the bottom of the current column.\n\nFor example, to extend the image in the figure on the right, we start with the image [\".s\",\"s.\"], \nwhere we have two rows, and two columns. We add the row of.s on the left of the current row and the row of *.s on the right of the current row, \nand we add the column of.s on the top of the current column and the column of *.s on the bottom of the current column. The image after extending is [\".s\",\"s.\",\".s\",\"s.\"], \nwhere we have four rows and four columns.\n\nWrite 5 lines of code to test the correctness of solution:\nThere is an image with a height of H pixels and a width of W pixels. Each of the pixels is represented by either. or *. The character representing the pixel at the i-th row from the top and the j-th column from the left, is denoted by C_{i,j}.\nExtend this image vertically so that its height is doubled. That is, print a image with a height of 2H pixels and a width of W pixels where the pixel at the i-th row and j-th column is equal to C_{(i+1)/2,j} (the result of division is rounded down).\n\n-----Constraints-----\n - 1\u2266H, W\u2266100\n - C_{i,j} is either. or *.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nH W\nC_{1,1}...C_{1,W}\n:\nC_{H,1}...C_{H,W}\n\n-----Output-----\nPrint the extended image.\n\n-----Sample Input-----\n2 2\n*.\n.*\n\n-----Sample Output-----\n*.\n.*\n.*\n.*"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n*.\\n.*\") == \".*\\n.*\"\n\n\"\"\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n*.\\n.*\") == \"\"\"*.\n.*\n.*\n.*\n.\\n\"\"\".lstrip()\n\nH, W = (int(x) for x in stdin.split())\n\nprint(stdin[1:H+1])\n\nfor line in stdin[1:H+1]:\n    print(line)"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n*\\n.*\") == \"**\\n**\"\nassert solution(\"2 2\\n*\\n.*\") == \"**\\n**\"\n\"\"\"\n\n\"\"\"\nTest Inputs\n2 2\n*.\n.*\n\n2 2\n*\n.*\n\n3 3\n*.\n.*\n*\n\n4 4\n*\n.*\n*\n*\n\n5 5\n*\n.*\n*\n*\n*\n\n6 6\n*\n.*\n*\n*\n*\n*\n\n7 7\n*\n.*\n*\n*\n*\n*\n*\n\n8 8\n*\n.*\n*\n*\n*\n*\n*\n*\n\n9 9\n*\n.*\n*\n*\n*\n*\n*\n*\n*\n\n10 10\n*\n.*\n*\n*\n*\n*\n*\n*\n*\n*\n\"\"\"\n\n\"\"\"\nSample Outputs\n*\n.\n.*\n.\n.\n.*\n.\n.*\n.\n.\n.*\n.\n.*\n.\n.\n.*\n.\n.*\n.\n.\n.*\n.\n.*\n.\n.\n.\n.*\n.\n.*\n.\n.\n.\n.*\n.\n.*\n.\n.\n.\n.*\n.\n.*\n.\n.\n.\n.\n*\n\"\"\"\n\n\"\"\"\nComplexity Analysis\nTime complexity: O(H\u2217W)O(H\u2217W).\nSpace complexity: O(H\u2217W)O(H\u2217W).\n\"\"\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n.*\\n.*\") == \"\"\"*\n.*\n.*\n.*\n.*\"\"\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n.*\\n.*\") == \".*\\n.*\\n.*\\n.*\"\nassert solution(\"1 1\\n..\") == \"..\"\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == \"YES\"\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 6 1 4 5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == 'YES'\nassert solution(\"5\\n1 1 1 1 1\") == 'NO'\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"\nassert solution(\"5\\n2 6 1 4 3\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\nassert solution('5\\n2 6 1 4') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3\\n1 2 3 4 5\") == \"2\"\nassert solution(\"5\\n3\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\") == \"3\"\nassert solution(\"5\\n3\\n1 2 3 4 5\\n8\\n1 1 1 1 1 1 1 2 2\") == \"4\"\n\n-----Problem-----\n\nA circus is designing a tower routine consisting of people standing atop one another's shoulders. For practical and aesthetic reasons, each person must be both shorter and lighter than the person below him or her. Given the heights and weights of each person in the circus, design a tower routine where no person stands on the shoulders of any person else.\n\nYou will be given a number of people `n` on the first line of input, then a list of heights `h` in a single line, followed by a list of weights `w` in a single line. The sum of `h` will be equal to the total height of the tower, and the sum of `w` will be equal to the total weight of the tower.\n\nYou should output a tower routine: a list of the people standing in the order in which they should be pushed up, with one person pushed before the next. If there are several optimal solutions, you should output any of them.\n\nSample Input\n7\n5 6 3 7 2 4 1\n3 8 7 2 9 4 6\nSample Output\n3 7 1 6 2 4\n\n-----Hint-----\n\nLet's use the property of sets and lists to solve the problem.\n\nYou are given two inputs:\n\nn \u2014 the number of people standing in the circus.\nh, w \u2014 the heights and weights of people standing in the circus, respectively.\n\nNote that each of the heights and weights is non-negative integer number.\n\nThe first input contains the number of people in the circus. It means that we have to find a way to arrange people in a tower such that no person stands on the shoulders of any other person.\n\nLet's consider the heights of all people in the tower: h = [h_1, h_2, \u2026, h_n].\n\nEach person has to stand on the shoulders of the person with higher height.\n\nLet's consider the weights of all people in the tower: w = [w_1, w_2, \u2026, w_n].\n\nEach person has to stand on the shoulders of the person with higher weight.\n\nThus, for any two people i and j, if i is taller than j, their heights are at most h_i \u2212 h_j, and if i is heavier than j, their weights are at most w_i \u2212 w_j.\n\nThus, we can sort people by their heights and weights in descending order, so that the first person is the tallest and the heaviest, the second person is the second tallest and the second heaviest, and so on.\n\nLet's check if the above properties are satisfied for the given input.\n\nThe first person has to stand on the shoulders of the person with higher height, so his height is h_1 \u2212 h_2.\n\nThe second person has to stand on the shoulders of the person with higher height, so his height is h_2 \u2212 h_3.\n\nSimilarly, the third person has to stand on the shoulders of the person with higher height, so his height is h_3 \u2212 h_4.\n\nNow, we can consider the weights of all people in the tower: w = [w_1, w_2, \u2026, w_n].\n\nThe first person has to stand on the shoulders of the person with higher weight, so his weight is w_1 \u2212 w_2.\n\nThe second person has to stand on the shoulders of the person with higher weight, so his weight is w_2 \u2212 w_3.\n\nSimilarly, the third person has to stand on the shoulders of the person with higher weight, so his weight is w_3 \u2212 w_4.\n\nThus, for each pair of i and j (1\u2264i<j\u2264n) we can check if heights[i]\u2212heights[j] is less than or equal to 0 and weights[i]\u2212weights[j] is less than or equal to 0.\n\nIf all of the above conditions are satisfied for all pairs i and j, we have a valid tower.\n\nIn the next step, we can sort people by the heights of people in the tower.\n\nThe first person has to stand on the shoulders of the person with higher height, so his height is h_1 \u2212 h_2.\n\nThe second person has to stand on the shoulders of the person with higher height, so his height is h_2 \u2212 h_3.\n\nThe third person has to stand on the shoulders of the person with higher height, so his height is h_3 \u2212 h_4.\n\nNow, we can consider the weights of all people in the tower: w = [w_1, w_2, \u2026, w_n].\n\nThe first person has to stand on the shoulders of the person with higher weight, so his weight is w_1 \u2212 w_2.\n\nThe second person has to stand on the shoulders of the person with higher weight, so his weight is w_2 \u2212 w_3.\n\nThe third person has to stand on the shoulders of the person with higher weight, so his weight is w_3 \u2212 w_4.\n\nThus, for each pair of i and j (1\u2264i<j\u2264n) we can check if heights[i]\u2212heights[j] is less than or equal to 0 and weights[i]\u2212weights[j] is less than or equal to 0.\n\nIf all of the above conditions are satisfied for all pairs i and j, we have a valid tower.\n\nThus, we can sort the people by the heights and then by the weights.\n\nNow"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\") == \"2\"\nassert solution(\"3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\") == \"3\"\nassert solution(\"4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\") == \"4\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"3\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"4\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"1\"\n\n\"\"\"\n\n\"\"\"\nLet's assume that we've got two sets of participants with weights A and B.\nLet's say that there is a pair (x, y) such that x + y = s.\nNow, A + B = 2s. So, A = s / 2.\nLet's say that for each participant we are able to choose two teams.\nFor this, we should choose teams from a set of participants who have weights smaller than s / 2.\nSo, for each participant we should choose a pair with weight less than s / 2.\nThere is a pair with weight less than s / 2 if we choose only one pair with weight less than s / 2.\nFor each participant, we can choose one team that is built from two participants from the same set or two teams that are built from participants from different sets.\n\nLets consider a participant with weight x.\nHe can choose a team with weight x if there are no participants with weight greater than x.\nHe can choose two teams with weight x / 2 if there is no pair with weight x greater than x / 2.\n\nSo, for each participant we can choose a maximum of y teams.\nSince there are n participants in total, the total number of teams is n * y.\n\nIf we want to choose only one team, then the maximum number of teams is n * (n - 1) / 2.\nIf we want to choose two teams, then the maximum number of teams is n * (n - 1) * (n - 2) / 6.\n\nSo, we can use a formula f(n) = (n - 1) * (n - 2) *... * (n - i + 1) / i! for the number of teams.\n\nWe can compare f(n) for all n and get the answer.\n\n\"\"\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == '2'\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == '3'\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == '4'\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == '1'\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"3\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"4\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"1\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\n\n\"\"\"\n\nimport sys\n\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_LINES = INPUT_LINES[1:]\nT = int(INPUT_LINES[0])\nINPUT_LINES = INPUT_LINES[1:]\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"3\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"4\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"1\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '1'\nassert solution('3 3') == '3'\nassert solution('4 4') == '2'\nassert solution('3 3\\n1 1 3 4 2 2') == '2'\nassert solution('3 2\\n1 2 2 1 2 1 1 2') == '3'\n\n----\n\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0430\n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442.\n\n\u0412 \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u0435\u0441\u0442\u043e\u0432 \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 s.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0441\u0442\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e $s = 6$. \u0422\u043e\u0433\u0434\u0430 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0434\u043b\u044f $s = 6$.\n\n\u041f\u0440\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u043d\u0430\u0439\u0442\u0438 $k$, \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044f \u0437\u0430\u043f\u0440\u043e\u0448\u0435\u043d\u043d\u044b\u0439 $s$, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0447\u0442\u043e \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0430\u0440\u044b \u0438\u0437 $n$ \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u0430\u043a\u0436\u0435 \u043f\u0430\u0440\u0430 \u0438\u0437 $k$ \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432, \u0441\u0443\u043c\u043c\u0430 \u044d\u0442\u0438\u0445 \u0432\u0435\u0441\u043e\u0432 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0432\u043d\u044f\u0442\u044c\u0441\u044f $s$.\n\n\u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b \u0432\u044b\u0431\u0440\u0430\u043b\u0438 $s = 6$. \u0422\u043e\u0433\u0434\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 $1, 4, 5$ \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0447\u0430\u0441\u0442\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0441 \u0432\u0435\u0441\u0430\u043c\u0438 $1, 3, 4$. \u0410 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 $2, 3, 6$ \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0447\u0430\u0441\u0442\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0441 \u0432\u0435\u0441\u0430\u043c\u0438 $2, 4, 6$.\n\n\u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u0430\u043d\u0434, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0431\u0440\u0430\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u044b\u0439 \u0432\u0435\u0441 \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434. \u0415\u0441\u043b\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 $1$.\n\n\u041a\u0430\u0436\u0434\u044b\u0439 \u0442\u0435\u0441\u0442 \u0431\u0443\u0434\u0435\u0442 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u0430\u0448\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043e\u0434\u0438\u043d \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432.\n\n\u041f\u0435\u0440\u0432\u044b\u0439 \u0440\u0435\u0433\u0438\u0441\u0442\u0440 \u0432\u0432\u043e\u0434\u0430/\u0432\u044b\u0432\u043e\u0434\u0430 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u0435\u0441\u0442\u043e\u0432 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0442\u0435\u0441\u0442-\u0441\u043b\u0443\u0447\u0430\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0442\u0435\u0441\u0442\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442-\u0441\u043b\u0443\u0447\u0430\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c 3, \u0442\u043e \u043d\u0430 \u043f\u0435\u0440\u0432\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0442\u0432\u0435\u0442 3, \u043d\u0430 \u0432\u0442\u043e\u0440\u043e\u043c \u0438 \u0442\u0440\u0435\u0442\u044c\u0435 \u0438 \u0442.\u0434.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\ufffd"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"3\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"4\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '2'\nassert solution('5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '3'\nassert solution('5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '4'\nassert solution('5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '1'\nassert solution('5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == '2'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"3\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"4\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"1\"\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 5\\n22 5\\n987 13') == '3'\nassert solution('5 2\\n1 4\\n2 5\\n3 6\\n4 7') == '5'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n7 3\n1 5\n22 5\n987 13''') == '3\\n1\\n5\\n77'\n\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(1500)\n\ntest_cases = int(input())\n\nfor i in range(test_cases):\n    n, x = map(int, input().split())\n\n    print(x // 2 if n % 2 == 0 else x // 2 + 1)\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"3\"\nassert solution(\"1 5\\n22 5\\n987 13\") == \"1\"\n\"\"\"\n\n\n\"\"\"\nGiven an apartment number n.\n\nEvery floor contains x apartments, every odd floor contains x + 1 apartments, every even floor contains x apartments.\n\nApartments are numbered starting from 1, from the first floor.\n\nI.e. apartments on the first floor have numbers 1 and 2, apartments on the second floor have numbers 3 and 4, and so on.\n\nIf Vasya does not live in the apartment number n, print -1.\n\nInput\nt \u2013 the number of test cases.\nThe only line of the test case contains two integers n and x ($1 \\le n, x \\le 1000$) \u2013 the apartment number and the number of apartments on each floor.\n\nOutput\nFor each test case, print the number of the floor on which Petya lives.\n\n\"\"\""
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"3\"\n\"\"\"\n\nt = int(input())\nfor i in range(t):\n    n, x = map(int, input().split())\n    print(n // x)\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 5\\n22 5\\n987 13') == '3\\n1\\n5\\n77'\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"3\"\nassert solution(\"6 4\\n1 5\\n22 5\\n987 13\") == \"1\"\nassert solution(\"2 2\\n1 5\\n22 5\\n987 13\") == \"1\"\n\"\"\""
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 3\\n1 5\\n22 5\\n987 13') == '3'\nassert solution('7 3\\n1 5\\n22 5\\n987 13') == '1'\nassert solution('7 3\\n1 5\\n22 5\\n987 13') == '5'\nassert solution('7 3\\n1 5\\n22 5\\n987 13') == '77'\n\n\"\"\""
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 3\\n1 5\\n22 5\\n987 13\\n') == '3\\n1\\n5\\n77'\n\"\"\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3\\n1 5\\n22 5\\n987 13') == '3'\n\"\"\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n4\n7 3\n1 5\n22 5\n987 13\n\"\"\") == '3'\nassert solution(\n\"\"\"\n3\n2 2\n3 2\n4 2\n\"\"\") == '2'\nassert solution(\n\"\"\"\n5\n1 3\n1 3\n1 3\n1 3\n1 3\n\"\"\") == '1'"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abca\") == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abca\") == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution(\"codeforces\") == [9, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\"\"\""
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 2\nabca\n1 3\n10 5\ncodeforces''') == '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\nassert solution('''4 2\nqwertyuioplkjhgfdsazxcvbnm\n20 10 1 2 3 5 10 5 9 4\n''') == '2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2'\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abca\") == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution(\"codeforces\") == [9, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == [26, 10, 1, 2, 9, 2, 2, 5, 2, 2, 1, 1, 5, 4, 11, 8, 2, 7, 5, 1]\n\"\"\"\nimport sys\nimport os\nfrom typing import List, Dict, Tuple, Callable, Iterable, Optional\n\nResult = int\nValue = str"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('codeforces') == '2 1 1 2 9 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2'\n\"\"\""
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_str) == answer\n\"\"\""
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"2 1 1 2 9 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\n\n\"\"\"\nimport sys\nfrom collections import Counter\nfrom typing import List, Tuple, Set\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abca\") == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution(\"codeforces\") == [9, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == [26, 10, 1, 2, 9, 2, 2, 5, 2, 2, 1, 1, 5, 4, 11, 8, 2, 7, 1, 10, 1, 5, 2]\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"9 4 5 3 0 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 0\"\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == \"26 10 1 2 3 5 10 5 9 4\"\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abca') == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution('codeforces') == [2, 1, 1, 2, 9, 2, 2, 5, 2, 2, 1, 1, 5, 11, 8, 2, 7, 1, 10, 1, 5, 2, 10, 1, 5, 2]\n\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3 4') == '0'\nassert solution('10 20 30') == '36'\nassert solution('5 5 5') == '0'\nassert solution('2 4 3') == '0'\nassert solution('1 1000000000 1000000000') == '1999999994'\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 4 3') == '0'\nassert solution('3 2 5') == '2'\nassert solution('3 2 6') == '2'\nassert solution('3 2 6') == '2'\nassert solution('3 2 6') == '2'\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 4\") == \"0\"\nassert solution(\"10 20 30\") == \"36\"\nassert solution(\"5 5 5\") == \"0\"\nassert solution(\"2 4 3\") == \"0\"\nassert solution(\"1 1000000000 1000000000\") == \"1999999994\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 3\\n10 20 30\\n1 1000000000 1000000000\\n3 2 5\\n3 2 6\") == '1999999994'\nassert solution(\"2 2 3\\n1 2 4\\n1 2 3\") == '6'\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 5 3\\n9 5 2\\n5 1 2\\n2 6 3') == '2'\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\nassert solution('5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6') == '0\\n34\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\nassert solution('2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6') == '0\\n42\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\nassert solution('1 1000000000 999999999\\n1 1000000000 999999999\\n3 2 5\\n3 2 6') == '0\\n44\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\nassert solution('1 999999999\\n1 999999999\\n3 2 5\\n3 2 6') == '0\\n41\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 5\") == \"0\"\nassert solution(\"1 2 3\") == \"6\"\nassert solution(\"1000000000 999999999\") == \"1999999994\"\n\n\"\"\""
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\") == \"0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4\"\n\"\"\""
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 4\\n10 20 30\") == \"0\"\nassert solution(\"5 5 5\\n2 4 3\") == \"0\"\nassert solution(\"2 4 3\\n1 1000000000 1000000000\") == \"1999999994\"\nassert solution(\"3 2 5\\n3 2 6\") == \"2\"\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline().strip())\n\nfor _ in range(n):\n    a, b, c = map(int, stdin.readline().strip().split())\n    print(min([abs(a - b), abs(a - c), abs(b - c)]))\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'YES'\nassert solution('1 1 1 1') == 'NO'\nassert solution('2 1 4 6') == 'YES'\nassert solution('1 2 5 6') == 'YES'\nassert solution('1 3 5 6') == 'YES'\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6') == 'YES'\nassert solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6') == 'NO'\nassert solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6') == 'YES'\nassert solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6') == 'NO'\nassert solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6') == 'YES'\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1\\n2\\n3\\n4\\n5\") == \"NO\"\nassert solution(\"5\\n1\\n2\\n3\\n4\") == \"YES\"\nassert solution(\"4\\n1\\n2\\n3\\n4\") == \"NO\"\nassert solution(\"4\\n1\\n2\\n3\\n4\\n5\\n6\") == \"NO\"\nassert solution(\"4\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\") == \"YES\""
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6') == 'YES'\nassert solution('6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8') == 'YES'\n\n\"\"\"\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11 14 16 12\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 5\") == \"NO\"\nassert solution(\"1 3 3 5\") == \"NO\"\nassert solution(\"1 1 1 1\") == \"YES\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nNO\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n6\\n1 6 3 10 5 8\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\"\n\"\"\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'NO'\nassert solution('6 4 3 10 5 8') == 'YES'\nassert solution('1 1 1 1') == 'YES'\nassert solution('1 2 5 6') == 'YES'\nassert solution('12 13') == 'YES'\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == 'YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO'\n\"\"\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'YES'\nassert solution('1 2 3 4') == 'NO'\nassert solution('1 2 3 4 6 5') == 'YES'\nassert solution('1 2 3 4 6 5 7 8 9 10') == 'NO'\nassert solution
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\"\n\n'''\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5') == '13'\nassert solution('6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3') == '22'\n\"\"\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == \"22\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_stdin) == test_solution\nprint('The solution is correct!')\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''6 5 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3''') == '22'\n\nassert solution('''5 5 4\n1 2 5\n2 3 4\n1 4 3\n4 3 7\n3 5 2\n1 5\n1 3\n3 3\n1 5''') == '13'\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == \"22\"\n\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == \"13\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == \"22\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == \"13\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n') == '13'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n\") == \"22\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n\") == \"13\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n') == '22'\nassert solution('5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n') == '13'\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == '13'\nassert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == '22'\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\") == \"3\"\nassert solution(\"1\\n3\") == \"4\"\nassert solution(\"1\\n4\") == \"3\"\nassert solution(\"1\\n6\") == \"7\"\nassert solution(\"1\\n7\") == \"8\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n6') == '9'\nassert solution('3\\n2') == '1'\nassert solution('1\\n1') == '1'\nassert solution('1\\n2') == '1'\nassert solution('1\\n3') == '2'\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n4\\n7\\n13\\n14\\n19\\n3620\\n10000\\n\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n\"\n\"\"\""
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1\") == \"1\"\nassert solution(\"7\\n2\") == \"2\"\nassert solution(\"7\\n13\") == \"13\"\nassert solution(\"7\\n3620\") == \"3620\"\nassert solution(\"7\\n10000\") == \"6561\"\n\nprint(\"Success\")\n\"\"\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2') == '1'\nassert solution('2\\n3') == '3'\nassert solution('6\\n12') == '12'\nassert solution('13\\n14') == '27'\nassert solution('3620\\n10000') == '6561'\n\n---\n\n1\n2\n6\n13\n14\n3620\n10000\n\n3\n9\n13\n27\n6561\n19683\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n12\") == \"5\"\nassert solution(\"4\\n1\") == \"1\"\nassert solution(\"4\\n0\") == \"1\"\nassert solution(\"4\\n6\") == \"7\"\nassert solution(\"7\\n5\") == \"8\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n1\") == \"1\"\nassert solution(\"6\\n2\") == \"3\"\nassert solution(\"6\\n3\") == \"9\"\nassert solution(\"6\\n4\") == \"13\"\nassert solution(\"6\\n5\") == \"27\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1\") == \"2\"\nassert solution(\"7\\n100\") == \"3\"\n\"\"\""
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n5\\n6\\n7\\n8\\n9\\n10\") == \"4\\n10\"\n\nassert solution(\"5\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"5\\n10\"\n\nassert solution(\"4\\n1\\n2\\n3\\n5\\n6\\n7\\n8\\n9\\n10\") == \"4\\n10\"\n\nassert solution(\"3\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\") == \"3\\n9\"\n\nassert solution(\"2\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\") == \"2\\n8\""
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1') == '4'\nassert solution('2\\n2') == '1'\n\"\"\""
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"3 3 3\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"2 3 3 2 1 3\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"2 2 2 2\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5\\n1 2 3 4 5') == '1 1 1 1 1'\n\"\"\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open(r\"D:\\Code\\GitHub\\CodeSignalQue\\input.txt\", 'r').read()) == open(r\"D:\\Code\\GitHub\\CodeSignalQue\\output.txt\", 'r').read()\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n\") == \\\n    '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\\n'\n\n\"\"\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n\") == \"1 1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n\") == \"3 3 3\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n\") == \"2 3 3 2 1 3\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n\") == \"1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n\") == \"2 2 2 2\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('0\\n') == '0'\nassert solution('0\\n') == '0'\nassert solution('3\\n') == '1 1 1'\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"3 3 3\"\nassert solution(\"5\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"2 3 3 2 1 3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 4 5\\n3\\n2 3 1') == '1 1 1 1 1'\nassert solution('6\\n1 2 3 4 5 6\\n3\\n2 3 1') == '1 1 1 1 1'\nassert solution('6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2') == '2 3 3 2 1 3'\n\"\"\"\n\nimport sys\nimport os\nimport statistics\nimport functools\nimport itertools\nfrom collections import defaultdict\nfrom collections import Counter"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\"\nassert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"3 3 3\"\nassert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"2 3 3 2 1 3\"\nassert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"2 2 2 2\"\n\"\"\"\n\nimport sys\nimport collections\n\nsys.setrecursionlimit(100000)"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n4\\n1 2 3 4\") == \"1 1 1 1\"\nassert solution(\"6\\n6\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"1 1 1 1 1\"\n\"\"\"\n\nimport sys\n\nT = int(input())\nfor _ in range(T):\n    _ = int(input())\n    n = int(input())\n    kids = input().split(' ')\n    kids = [int(i) for i in kids]\n    book = [0]*n\n    for i in range(n):\n        if i+1 == kids[i]:\n            book[i] = 1\n            continue\n        for j in range(i+1, n):\n            if kids[j] == i+1:\n                book[i] += 1\n                break\n    book = [str(i) for i in book]\n    print(' '.join(book))\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 6\\n1 5\\n') == '8'\nassert solution('3 5\\n0 3 1\\n') == '7'\nassert solution('2 6\\n0 5 10\\n') == '8'\nassert solution('1 1\\n') == '0'\nassert solution('4 3\\n2 3 4') == '0'\n\n\"\"\""
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 6\\n1 5\\n') == '8'\n\"\"\"\n\nimport numpy as np\n\nnum_trees, num_humans = [int(i) for i in input().split()]\n\ntree_positions = np.array([int(i) for i in input().split()])\n\ndistances = np.abs(tree_positions - np.arange(num_trees))\n\nprint(np.sum(distances.min(axis=1)))\nprint(np.arange(num_humans))\nprint(distances.min(axis=0))"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 6\\n1 5\\n') == '8'\nassert solution('3 5\\n0 3 1\\n') == '7'"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 6\\n1 5') == '8'\nassert solution('3 5\\n0 3 1') == '7'\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 6\\n1 5\\n') == '8'\nassert solution('3 5\\n0 3 1\\n') == '7'\n\"\"\"\nimport sys"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 6\\n1 5\\n') == '8'\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4 3 2\") == \"1 2 3 4 5\"\nassert solution(\"2 2 2\") == \"2 2\"\n\"\"\""
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n0 3 1\\n\") == \"7\\n5 -2 4 -1 2\\n\"\n\n\"\"\"\n\n\nfrom collections import deque\nfrom itertools import permutations\n\nn, m = map(int, stdin.readline().split())\ntrees = list(map(int, stdin.readline().split()))\npeople = [int(s) for s in stdin.readline().split()]\n\npeople = set(people)\ndistances = {}\n\nfor p in people:\n    for t in trees:\n        distance = abs(p - t)\n        if distance not in distances:\n            distances[distance] = []\n        distances[distance].append(p)\n\nmin_distance = float(\"inf\")\nresult = None\nfor dist, people in distances.items():\n    if dist < min_distance:\n        min_distance = dist\n        result = people\n\nresult.sort()\nprint(min_distance)\nprint(*result)"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 6\\n1 5') == '8'\nassert solution('3 5\\n0 3 1') == '7'\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\n0 3 1\") == '7\\n-2 4 -1 2'\nassert solution(\"4 2\\n2 1 1\") == '-2 -1 1 1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRRRRUUU\"\nassert solution(\"2\\n1 0\\n0 1\") == \"YES\\nUU\"\nassert solution(\"1\\n0 1\") == \"YES\\nU\"\n\n'''\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\") == \"RUUURRRRUU\"\nassert solution(\"3\\n5 5\") == \"NO\"\nassert solution(\"4\\n3\\n2\") == \"YES\"\n\n\"\"\"\n\n\n\nimport itertools\nimport math\nfrom queue import PriorityQueue"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3') == \"RUUURRRRUU\\nNO\\nYES\\nRRRRUUU\"\n\n\n-----Python3-----"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\n\nassert solution(\"2\\n1 0\\n0 1\") == \"YES\\nRRRRUUU\"\n\nassert solution(\"1\\n4 3\") == \"NO\"\n\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3') == 'YES\\nRUUURRRRUU'\nassert solution('2\\n1 0\\n0 1') == 'YES\\nRRRRUUU'\nassert solution('1\\n1') == 'NO'\nassert solution('4\\n3') == 'YES\\nRURRRUUU'\nassert solution('5\\n4\\n3') == 'NO'\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 3\\n1 2\\n3 3\\n5 5') == 'YES\\nRUUURRRRUU'\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nfrom utils import puzzle_input\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3') == 'YES\\nRUUURRRRUU'\n\"\"\"\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5\\n1 3\\n1 2\\n3 3\\n5 5\") == \"YES\\nRUUURRRRUU\"\nassert solution(\"2\\n1 0\\n0 1\") == \"YES\\nRRRRUUU\"\n\"\"\""
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\nassert solution(\"2\\n1 0\\n0 1\") == \"YES\\nRRRRUUU\"\nassert solution(\"1\\n1\") == \"NO\"\nassert solution(\"4\\n3\\n2\") == \"YES\\nRUUU\"\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\n\"\"\"\n\nclass Node:\n    def __init__(self, id, x, y):\n        self.id = id\n        self.x = x\n        self.y = y\n        self.pre = None\n        self.next = None\n\n    def __str__(self):\n        return str(self.id) +'' + str(self.x) +'' + str(self.y)\n\n\nclass SortedLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def add(self, node: Node):\n        if self.tail is None:\n            self.head = node\n            self.tail = node\n        else:\n            node.pre = self.tail\n            node.next = None\n            self.tail.next = node\n            self.tail = node\n\n    def __str__(self):\n        curr = self.head\n        while curr is not None:\n            print(curr, end=' ')\n            curr = curr.next\n        return ''\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1') == '8'\nassert solution('1 1') == '0'\nassert solution('500 4') == '8'\nassert solution('217871987498122 10') == '899999999999999999'\nassert solution('100000000000000001 1') == '899999999999999999'\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"8\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"500 4\") == \"8\"\nassert solution(\"217871987498122 10\") == \"9\"\nassert solution(\"100000000000000001 1\") == \"899999999999999999\"\n\"\"\""
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n1 1\") == '8'\n\"\"\"\n\nimport sys\n\nfor i in range(int(input())):\n    n, s = map(int, sys.stdin.readline().split())\n    if n > 10 ** 18 or s > 162:\n        print(\"0\")\n    else:\n        if n < 9:\n            print(0)\n        else:\n            k = n\n            sum_of_digits = 0\n            while k:\n                sum_of_digits += k % 10\n                k //= 10\n            if sum_of_digits <= s:\n                print(0)\n            else:\n                while sum_of_digits > s:\n                    sum_of_digits -= 1\n                    n += 1\n                print(n)"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1') == '8\\n0\\n500\\n2128012501878\\n899999999999999999'\nprint(solution(stdin))\n\n\"\"\"\n\nt = int(stdin.readline().strip())\n\nfor _ in range(t):\n    n, s = map(int, stdin.readline().strip().split())\n    s = str(s)\n    s = ''.join(sorted(s, reverse=True))\n    s_sum = 0\n    n_sum = 0\n    for char in s:\n        s_sum += int(char)\n    \n    while s_sum > n:\n        s_sum -= 9\n    \n    for char in str(n):\n        n_sum += int(char)\n    \n    print(min(n_sum - s_sum, n_sum - s_sum + 8))\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1\\n1 1\\n500 4\\n217871987498122 10') == '8'\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100000)\n\nt = int(sys.stdin.readline())"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"8\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"500 4\") == \"8\"\nassert solution(\"217871987498122 10\") == \"899999999999999999\"\nassert solution(\"100000000000000001 1\") == \"899999999999999999\"\n\n-------"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1') == '8'\n\"\"\""
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1') == '8\\n0\\n500\\n2128012501878\\n899999999999999999'\n\"\"\"\n\nimport io\nimport sys"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"8\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"500 4\") == \"8\"\nassert solution(\"217871987498122 10\") == \"899999999999999999\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 1\n1 1\n500 4\n217871987498122 10''') == '8'\nassert solution('''5 2\n1 1\n500 4\n217871987498122 10\n100000000000000001 1\n''') == '8'\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n[1, 1, 0]\") == \"1\"\nassert solution(\"3\\n[1, 1, 0]\\n[0, 0, 1]\") == \"0\"\nassert solution(\"3\\n[1, 1, 0]\\n[0, 0, 1]\\n[0, 1, 0]\") == \"2\"\n\nprint(\"Test finished.\")\n\n\"\"\""
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"2\\n0\\n2\\n4\\n1\"\nassert solution(\"5\\n7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"0\\n0\\n0\\n1\"\nassert solution(\"5\\n7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"2\\n0\\n2\\n4\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n0 0 1 0 1 0 1\\n3\\n1 0 0') == '2\\n0\\n2\\n4\\n1'\nassert solution('7\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1') == '2\\n0\\n2\\n4\\n1'\nassert solution('7\\n1 1 0 1 1\\n5\\n1 0 0 0 1') == '1\\n0\\n1\\n4\\n1'\nassert solution('7\\n1 1 0 1 1\\n5\\n0 0 0 0 1') == '0\\n0\\n1\\n4\\n1'\nassert solution('7\\n1 1 0 1 1\\n5\\n0 0 0 0 1') == '0\\n0\\n1\\n4\\n1'\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"0\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n1 0 1 0 1 0 1\\n3\\n1 0 0\") == '2'\nassert solution(\"7\\n1 0 1 0 1 0 1\\n3\\n1 0 0\") == '0'\nassert solution(\"7\\n1 0 1 0 1 0 1\\n3\\n1 0 0\") == '2'\nassert solution(\"7\\n1 0 1 0 1 0 1\\n3\\n1 0 0\") == '2'\nassert solution(\"7\\n1 0 1 0 1 0 1\\n3\\n1 0 0\") == '0'\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n0\\n0\\n1\\n1') == '2'\nassert solution('8\\n0\\n0\\n0\\n1\\n1\\n1\\n0') == '5'\nassert solution('6\\n1\\n0\\n0\\n0\\n0') == '0'\nassert solution('7\\n1\\n0\\n0\\n0\\n1') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '2'\nassert solution('''7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '0'\nassert solution('''7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '2'\nassert solution('''7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '4'\nassert solution('''7\n0 0 1 0 1 0 1\n3\n1 0 0\n5\n1 1 0 0 1\n6\n1 0 0 0 0 1\n5\n1 1 0 1 1\n''') == '1'\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"2\\n0\\n2\\n4\\n1\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"0\\n0\\n0\\n1\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"1\\n0\\n1\\n3\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"1\\n0\\n1\\n3\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"0\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"0\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n3\\n1 0 0\\n5\\n1 1 0 0 1') == '2'\nassert solution('1\\n3\\n0 1 1\\n5\\n1 1 0 0 1') == '0'\nassert solution('1\\n3\\n0 1 1\\n5\\n1 1 0 0 1') == '2'\nassert solution('1\\n3\\n0 1 1\\n5\\n1 1 0 0 1') == '2'\nassert solution('1\\n3\\n0 1 1\\n5\\n1 1 0 0 1') == '2'\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\\nabcd\\nbaabab\"\n\"\"\"\nfrom collections import Counter, defaultdict\nfrom itertools import combinations\n\nimport sys\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1\") == \"c\"\nassert solution(\"5 3\") == \"cc\"\nassert solution(\"6 2\") == \"bac\"\n\"\"\"\n\n\nimport unittest\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3\\n4 4\\n6 2') == 'cbcacab'\nassert solution('7 3\\n4 4\\n6 2') == 'abcd'\nassert solution('7 3\\n4 4\\n6 2') == 'baabab'\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4') == 'cbcacab'\nassert solution('6 2') == 'ccbbaaa'\n\"\"\"\nfrom collections import defaultdict\n\nstdin = int(input())\n\nfor _ in range(stdin):\n    stdin, stdin = map(int, input().split(' '))\n    arr = []\n    for _ in range(stdin):\n        arr.append(map(int, input().split(' ')))\n    if stdin < 2:\n        print(arr[0][0])\n        continue\n    tmp = defaultdict(int)\n    for i in range(len(arr)):\n        for j in range(arr[i][0]):\n            tmp[arr[i][1 + j]] += 1\n    sorted_tmp = sorted(tmp.items(), key=lambda kv: kv[1], reverse=True)\n    cur_char = 'a'\n    count = 0\n    res = []\n    for i in range(len(sorted_tmp)):\n        if sorted_tmp[i][0]!= cur_char:\n            cur_char = sorted_tmp[i][0]\n            count += 1\n        res.append(cur_char)\n        if count == len(sorted_tmp):\n            break\n    print(''.join(res))\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 3\n1 2\n1 2\n1 2\n1 2\n''') == 'cbcacab'\nassert solution('''5 2\n1 3\n1 3\n1 3\n1 3\n1 3\n''') == 'abcd'\nassert solution('''7 3\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n1 5\n''') == 'baabab'"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n7 3\\n4 4\\n6 2\") == \"cbcacab\"\nassert solution(\"3\\n7 3\\n4 4\\n6 2\") == \"abcd\"\nassert solution(\"3\\n7 3\\n4 4\\n6 2\") == \"baabab\"\n\n\n---\n\nhttps://app.codility.com/demo/results/trainingL2LXZY-JKV/"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n7 3\\n4 4\\n6 2\") == \"cbcaab\\nabcd\\nbaabab\"\nassert solution(\"1 1\\n1 1\") == \"cac\"\nassert solution(\"3 1\\n1 2\\n2 3\") == \"cab\"\nassert solution(\"6 1\\n1 10\\n1 5\\n1 3\\n1 2\") == \"cba\"\nassert solution(\"6 1\\n1 6\\n1 5\\n1 4\\n1 3\") == \"cba\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == 'cbcacab\\nabcd\\nbaabab'\n\"\"\""
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n6 2\") == 'abcd'\nassert solution(\"7 3\\n4 4\\n6 2\") == 'cbcacab'\nassert solution(\"7 3\\n4 4\\n6 2\") == 'abcd'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\\n\") == \"cbcacab\"\nassert solution(\"5 10\\n1 5\\n2 5\\n3 4\\n4 4\\n4 5\\n\") == \"abcd\"\nassert solution(\"5 10\\n1 5\\n2 5\\n3 5\\n4 5\\n\") == \"baabab\"\nassert solution(\"5 10\\n1 5\\n2 5\\n3 5\\n4 5\\n\") == \"baabab\"\nassert solution(\"5 10\\n1 5\\n2 5\\n3 5\\n4 5\\n\") == \"baabab\"\n\nsolution(stdin)\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\"\nassert solution(\"6\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"1 1000 0\"\nassert solution(\"6\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"2 1 2\"\nassert solution(\"6\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"3 4 2\"\nassert solution(\"6\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"4 4 3\"\n\"\"\""
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\") == '6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3'\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 1 4 1\\n5\") == \"3 21\\n\"\nassert solution(\"3\\n1 1 1\\n13\") == \"2 1 2\\n\"\nassert solution(\"7\\n1 1 1 1 1 1\\n13\") == \"4 1000 0\\n\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 1 1 1 1\") == \"4 1 1\"\nassert solution(\"4\\n1 2 3 4\") == \"3 3\"\nassert solution(\"7\\n1 1 1 1 1 1\") == \"2 2 1\"\n\nprint(solution(stdin.strip()))\n\n-----Explanation-----\nIn the first example the total size of candies eaten by Alice is $12$. Bob eats one candy with size $1$, Alice eats $2$ candies with size $1$, and Bob eats two candies with size $2$. Alice then eats $3$ candies with size $1$ and Bob eats $4$ candies with size $2$, so the game ends.\n\nIn the second example Alice eats $1$ candy with size $1$, and Bob eats $2$ candies with size $1$. Alice then eats $3$ candies with size $2$ and Bob eats $4$ candies with size $1$. Bob then eats $2$ candies with size $2$ and Alice eats $2$ candies with size $1$. Alice then eats $3$ candies with size $4$ and Bob eats $4$ candies with size $3$, so the game ends.\n\nIn the last example Alice eats $1$ candy with size $1$, and Bob eats $2$ candies with size $1$. Alice then eats $3$ candies with size $2$ and Bob eats $2$ candies with size $1$. Alice then eats $4$ candies with size $2$ and Bob eats $3$ candies with size $2$. Alice then eats $4$ candies with size $3$ and Bob eats $4$ candies with size $3$. Bob then eats one candy with size $4$ and Alice eats one candy with size $5$. Bob then eats two candies with size $2$ and Alice eats two candies with size $6$. Alice then eats three candies with size $7$ and Bob eats three candies with size $9$ so the game ends.\n\nSolution:\nfrom collections import Counter"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(print())\nprint(\"Hooray!\")\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\") == (6, 23, 21)\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\") == \"6 23 21\"\nassert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\") == \"1 1000 0\"\nassert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\") == \"2 1 2\"\nassert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\") == \"3 4 2\"\nassert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\") == \"4 4 3\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\"\n\"\"\""
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000') == '6 23 21'\nassert solution('13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1') == '6 45 46'\nassert solution('7\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1') == '3 4 2'\n\"\"\"\n\nfrom typing import Tuple\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\") == \"6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\"\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1 2\\n1 2\\n') == '2'\nassert solution('3\\n4 5\\n4 5\\n') == '9'\nassert solution('5\\n5 6\\n5 6\\n5 6\\n5 6\\n5 6\\n') == '17'\n\n\"\"\""
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5') == '6\\n27\\n39\\n11\\n17'\nassert solution('5 3\\n1 2 3 4 5\\n5 4\\n1 2 3 4 5') == '27\\n39\\n11\\n17'\nassert solution('5 3\\n1 2 3 4 5\\n5 4\\n1 2 3 4 5') == '39\\n11\\n17'\nassert solution('5 5\\n5 5 6 6 5') == '17'\nassert solution('5 5\\n1 2 3 4 5\\n5 4\\n1 2 3 4 5') == '17'\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '3'\nassert solution('2\\n1\\n1 2\\n2 1\\n3 4\\n5 5\\n6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3') == '6\\n27\\n39\\n11\\n17'\n\nimport io, pytest\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\\n4 4\\n1 2 2 1\\n4 4 5 4\") == \"6\\n27\\n39\\n11\\n17\""
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"5 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"26\"\nassert solution(\"5 0\\n2 2 4 3\") == \"10\"\nassert solution(\"4 4\\n1 2 2 1\") == \"17\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"27\"\nassert solution(\"4 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"39\"\nassert solution(\"4 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"11\"\nassert solution(\"4 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"17\"\nassert solution(\"4 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\") == \"11\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"6\"\nassert solution(\"3 2\\n1 2\\n3 4\") == \"9\"\nassert solution(\"4 4\\n1 2 2 1\\n4 4 5 4\") == \"17\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('4 2\\n1 2\\n3 4') == '27'\nassert solution('5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5') == '39'\nassert solution('5 3\\n1 2 2 1\\n4 4 5 4') == '17'\nassert solution('5 4\\n1 2 2 1\\n4 4 5 4') == '17'\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4') == '8'\nassert solution('1 2 5 4') == '14'\nassert solution('1 2 5 6') == '17'\nassert solution('1 2 5 5') == '17'\nassert solution('1 2 5 6') == '17'\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\\n\") == '0 7 13 18 24 35 36 37 40 45'\nprint(\"Passed.\")\n\n\"\"\"\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"\n\nprint(solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5'))\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5') == '0 7 13 18 24 35 36 37 40 45'\n\"\"\""
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''10 2\n7 6 18 6 16 18 1 17 17\n6 9 3 10 9 1 10 1 5''') == '0 7 13 18 24 35 36 37 40 45'\n\"\"\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == '0 7 13 18 24 35 36 37 40 45'\n\"\"\""
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == '0 7 13 18 24 35 36 37 40 45'\n\"\"\"\n\n\"\"\"\nx = int(stdin.readline().strip())\nc = int(stdin.readline().strip())\ns = [int(i) for i in stdin.readline().strip().split(' ')]\nt = [int(i) for i in stdin.readline().strip().split(' ')]\ndp = [0] * (x+1)\ndp[0] = 0\n\nfor i in range(1, x+1):\n    dp[i] = min(dp[i], dp[i-1] + s[i-1])\n    for j in range(1, i):\n        dp[i] = min(dp[i], dp[j-1] + t[j-1] + c)\n\nprint(' '.join([str(i) for i in dp]))\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('10 1\\n3 2 3 1 3 3 1 4 1') == '0 2 4 7 8 11 13 14 16 17'\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\\n') == '0 7 13 18 24 35 36 37 40 45'\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\\n') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('5 1\\n2 3 4 5\\n1 2 3 4') == '0 1 2 3 4'\nprint('The local tests are done. Click on \"Check\" for more cases.')\n\n\"\"\""
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1\") == \"aaabb\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\") == \"aaabb\"\n\nassert solution(\"5 1\") == \"aaaaabaaaaabaaaaaaaa\"\n\nassert solution(\"5 2\") == \"bbaaa\"\n\nassert solution(\"5 10\") == \"aaaaabaaaaabaaaaaaaa\"\n\nassert solution(\"3 1\") == \"bab\""
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"aab\"\nassert solution(\"5 2\") == \"bbaa\"\nassert solution(\"7 100\") == \"aaaaabaaaaabaaaaaaaa\"\nassert solution(\"4 2\") == \"baaa\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100''') == 'aaabb'\nassert solution('''5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100''') == 'baaba'\nassert solution('''5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100''') == 'bbaaa'\nassert solution('''5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100''') == 'bbaaa'\nassert solution('''5 1\n5 2\n5 8\n5 10\n3 1\n3 2\n20 100''') == 'aaaaabaaaaabaaaaaaaa'\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1\") == \"aaabb\"\nassert solution(\"5 2\") == \"aabab\"\nassert solution(\"5 8\") == \"baaba\"\nassert solution(\"5 10\") == \"bbaaa\"\nassert solution(\"3 1\") == \"aab\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1\") == \"aaabb\"\n\"\"\"\n\nimport math\nfrom collections import Counter"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1') == 'aaabb'\nassert solution('4 2') == 'aabab'\nassert solution('5 1') == 'aaabb'\nassert solution('5 2') == 'aabab'\nassert solution('5 8') == 'baaba'\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1\") == \"aaabb\"\nassert solution(\"5 2\") == \"aabab\"\nassert solution(\"5 8\") == \"aaaaabaaaaabaaaaaaaa\"\nassert solution(\"5 10\") == \"bbaaa\"\nassert solution(\"3 1\") == \"baa\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1') == 'aaabb'\nassert solution('5 2') == 'aabab'\nassert solution('5 8') == 'baaba'\nassert solution('5 10') == 'bbaaa'\nassert solution('3 1') == 'abb'\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1\\n5 2\\n5 8\\n5 10\\n3 1\\n3 2\\n20 100\") == \"aaabb\"\n\"\"\"\n\nfrom math import ceil\nfrom random import randint\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3') == '6'\n\nassert solution('2 1\\n1 3\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3') == '1'\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 1\\n1 5 2 3 1 5 4\") == \"6\"\n\nassert solution(\"7 1\\n1 3 6 7 2 5 4\") == \"1\"\n\nassert solution(\"7 1\\n1 1\") == \"5\"\n\nassert solution(\"7 1\\n1000000000\") == \"5\"\n\nassert solution(\"7 1\\n5 10\") == \"10\""
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"4 1\n1 5 2 3 1 5 4\n1 3 6 7 2 5 4\n1 1\n1000000000\n1000000000\n5 10\n10 7 5 15 8\"\"\") == \"6\"\n\n\"\"\"\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"6\\n1\\n5\\n10\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nfrom typing import List, DefaultDict\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"6\\n1\\n5\\n10\""
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4') == '6'\nassert solution('7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4') == '1'\nassert solution('7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4') == '5'\nassert solution('7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4') == '10'\n\n\n\n[Image]\n\nFor the second test case we have the following picture:\n\n[Image]\n\nOn the picture the platforms are placed as shown in the first test case, but the point $(1, -1)$ which has $y = -1$ has fallen down."
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3') == '6\\n1\\n5\\n10'\n-----\n\nThis is the first test case.\n\nThe first platform is placed between points $(1, -1)$ and $(2, -1)$ and the second one between points $(4, 3)$ and $(5, 3)$.\n\nAfter the first platform falls, all points which are below it fall down. We can see that only one point falls between them: $(3, 7)$ which is falling.\n\nAfter the second platform falls, all points which are below it fall down. We can see that only one point falls between them: $(5, 3)$ which is falling.\n\nFinally, after the third platform falls, all points which are below it fall down. There are no points which can be saved.\n\nSo, we can conclude that the maximum number of points we can save if we place both platforms optimally is 6.\n\nIn the example above, we have placed two platforms on $(y=-1)$ at the left and right ends of the plane. The first platform has length $k=1$ and the second one has length $k=10^9$.\n\nThe test case can be extended as follows:\n\nFirst, it is possible to move one platform to the left and the other to the right, so that the first platform is positioned between points $(2, -1)$ and $(3, -1)$ and the second one between points $(5, 3)$ and $(6, 3)$.\n\nNow, after the first platform falls, all points which are below it fall down. We can see that only one point falls between them: $(6, 7)$ which is falling.\n\nAfter the second platform falls, all points which are below it fall down. We can see that only one point falls between them: $(6, 7)$ which is falling.\n\nFinally, after the third platform falls, all points which are below it fall down. There are no points which can be saved.\n\nSo, we can conclude that the maximum number of points we can save if we place both platforms optimally is 1.\n\nIn the example above, we have placed two platforms on $(y=-1)$ at the left and right ends of the plane. The first platform has length $k=10^9$ and the second one has length $k=1$.\n\nThe test case can be extended as follows:\n\nFirst, it is possible to move one platform to the left and the other to the right, so that the first platform is positioned between points $(2, -1)$ and $(3, -1)$ and the second one between points $(6, 3)$ and $(7, 3)$.\n\nNow, after the first platform falls, all points which are below it fall down. We can see that only one point falls between them: $(7, 7)$ which is falling.\n\nAfter the second platform falls, all points which are below it fall down. We can see that only one point falls between them: $(7, 7)$ which is falling.\n\nFinally, after the third platform falls, all points which are below it fall down. There are no points which can be saved.\n\nSo, we can conclude that the maximum number of points we can save if we place both platforms optimally is 1.\n\nIn the example above, we have placed two platforms on $(y=-1)$ at the left and right ends of the plane. The first platform has length $k=1$ and the second one has length $k=10^9$.\n\nThe test case can be extended as follows:\n\nFirst, it is possible to move one platform to the left and the other to the right, so that the first platform is positioned between points $(2, -1)$ and $(3, -1)$ and the second one between points $(7, 3)$ and $(8, 3)$.\n\nNow, after the first platform falls, all points which are below it fall down. We can see that only one point falls between them: $(8, 7)$ which is falling.\n\nAfter the second platform falls, all points which are below it fall down. We can see that only one point falls between them: $(8, 7)$ which is falling.\n\nFinally, after the third platform falls, all points which are below it fall down. There are no points which can be saved.\n\nSo, we can conclude that the maximum number of points we can save if we place both platforms optimally is 1.\n\nIn the example above, we have placed two platforms on $(y=-1)$ at the left and right ends of the plane. The first platform has length $k=1$ and the second one has length $k=10^9$.\n\nThe test case can be extended as follows:\n\nFirst, it is possible to move one platform to the left and the other to the right, so that the first platform is positioned between points $(2"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"6\"\n\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"1\"\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"5\"\n\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"10\"\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"10\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\") == \"6\"\nassert solution(\"7 1\\n1 5 2 3 1 5 4\") == \"1\"\nassert solution(\"7 10\\n10 7 5 15 8\") == \"5\"\nassert solution(\"7 10\\n15 19 8 17 20 10 9 2 10 19\") == \"10\"\n\"\"\"\nfrom typing import List\n\nclass Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        def cross(v1, v2):\n            \"\"\"\n            \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0443\u0433\u043e\u043b \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u0432\u0435\u043a\u0442\u043e\u0440\u0430\u043c\u0438\n            \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0432\u0435\u043a\u0442\u043e\u0440\u044b v1 = (1, 2) \u0438 v2 = (2, 4):\n            |v1| = sqrt(1^2 + 2^2) = sqrt(5) = 1.414...\n            |v2| = sqrt(4^2 + 4^2) = sqrt(16) = 4.123...\n            \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0434\u0440\u043e\u0431\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e (\u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e 1.414...)\n            \"\"\"\n            if v1[0] * v2[0] + v1[1] * v2[1] == 0:\n                return 0\n            return (v1[0] * v2[1] - v1[1] * v2[0]) / (v1[0] * v2[0] + v1[1] * v2[1])\n\n        def find_polygon_angle(point: List[int], prev_point: List[int]):\n            \"\"\"\n            \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u0443\u0433\u043e\u043b \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u0442\u043e\u0447\u043a\u0430\u043c\u0438\n            \u0412\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0441\u043b\u0443\u0447\u0430\u0435\u0432:\n            1. \u0415\u0441\u043b\u0438 \u0442\u043e\u0447\u043a\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0443\u0433\u043b\u0430 \u043d\u0435\u0442\n            2. \u0415\u0441\u043b\u0438 \u0442\u043e\u0447\u043a\u0438 \u0434\u0432\u0443\u0445 \u0443\u0433\u043b\u043e\u0432 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435, \u0438\u0445 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c\n            3. \u0415\u0441\u043b\u0438 \u0442\u043e\u0447\u043a\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0443\u0433\u043b\u0430 \u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u0442\u043e \u043e\u043d\u0438 \u0432\u0441\u0435\u0433\u0434\u0430 \u043b\u0435\u0436\u0430\u0442 \u0432 \u043e\u0434\u043d\u043e\u0439 \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u0438 \u043e\u0442 \u043e\u0441\u0438 X \u0438\u043b\u0438 Y,\n            \u0438 \u0442\u043e\u0433\u0434\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u043d\u0438\u0445\n            \"\"\"\n            result = []\n            for i in range(len(points)):\n                if i == 0:\n                    continue\n                # \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u043c \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u043f\u0440\u044f\u043c\u043e\u0439\n                k = cross(point, prev_point)\n                b = point[1] - k * point[0]\n                if k == 0:\n                    if b > 0:\n                        result.append(math.pi / 2)\n                    else:\n                        result.append(3 * math.pi / 2)\n                else:\n                    if b > 0:\n                        result.append(math.atan(k))\n                    else:\n                        result.append(math.atan(k) + math.pi)\n            return result\n\n        result = 0\n        for i in range(len(points)):\n            if i == 0:\n                continue\n            angle = find_polygon_angle(points[i], points[0])\n            # \u0418\u0449\u0435\u043c \u0441\u0430\u043c\u044b\u0439 \u043c\u0430\u043b\u043e\u0432\u0435\u0440\u043e\u044f\u0442\u043d\u044b\u0439 \u0438 \u0437\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u0435\u043c \u0435\u0433\u043e \u043a\u0430\u043a \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c\n            max_angle = 0\n            for angle_val in angle:\n                if angle_val > max_angle:\n                    max_angle = angle_val\n            result = max(result, max_angle)\n        return result\n\nassert Solution().maxPoints([[1,5],[3,3],[5,1],[1,5],[4,2]]) == 4\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\") == '6\\n1\\n5\\n10'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\"\n\nassert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10') == '1\\n2\\n3\\n3\\n4\\n4\\n7'\nassert solution('4 3\\n1\\n2\\n1\\n2') == '0\\n0\\n0\\n0'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\\n\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\\n\") == \"0\\n0\\n0\\n0\\n\"\nassert solution(\"4 3\\n0\\n0\\n1\\n2\\n\") == \"0\\n0\\n0\\n0\\n\"\nassert solution(\"4 3\\n0\\n0\\n1\\n1\\n\") == \"0\\n0\\n0\\n0\\n\"\nassert solution(\"4 3\\n0\\n0\\n1\\n0\\n\") == \"0\\n0\\n0\\n0\\n\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10000000)"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\\n\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10') == '1\\n2\\n3\\n3\\n4\\n4\\n7'\nassert solution('4 3\\n1\\n2\\n1\\n2') == '0\\n0\\n0\\n0'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\"\nassert solution(\"1 0\\n1\\n1\") == \"0\\n0\\n0\"\nassert solution(\"3 3\\n1\\n2\\n1\\n2\\n3\\n3\") == \"0\\n0\\n0\\n0\\n0\\n0\"\nassert solution(\"7 3\\n0\\n0\\n0\\n0\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n1\\n2\") == \"2\\n2\"\nassert solution(\"2 3\\n1\\n2\\n1\\n2\") == \"0\\n0\"\nassert solution(\"3 3\\n1\\n2\\n1\\n2\\n1\\n2\") == \"1\\n2\\n3\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\\n1\\n2\") == \"2\\n3\\n4\"\nassert solution(\"5 3\\n1\\n2\\n1\\n2\\n1\\n2\") == \"1\\n2\\n3\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5 1 49\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n\"\"\") == \"\"\"\n1 49\n20 40 30 50 10\n26 32 20 38 44 50\n8 23 18 13 3\n1 10 13 4 19 22 25 16 7\n\"\"\"\n\nassert solution(\"\"\"\n1 1 1\n1 2 2\n2 2 2\n3 3 3\n4 4 4\n\"\"\") == \"\"\"\n1 2 2\n2 2 2\n3 3 3\n4 4 4\n\"\"\"\n\nassert solution(\"\"\"\n2 1 5\n5 2 5\n3 2 7\n5 1 5\n3 1 7\n\"\"\") == \"\"\"\n1 5\n5 2 5\n2 2 7\n1 5\n3 1 7\n\"\"\"\n\nassert solution(\"\"\"\n2 1 5\n5 2 5\n3 2 7\n5 1 5\n3 1 7\n\"\"\") == \"\"\"\n1 5\n5 2 5\n2 2 7\n1 5\n3 1 7\n\"\"\"\n\nassert solution(\"\"\"\n1 2 5\n5 2 5\n3 2 7\n5 1 5\n3 1 7\n\"\"\") == \"\"\"\n1 5\n5 2 5\n2 2 7\n1 5\n3 1 7\n\"\"\""
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\\n\") == \"\"\"1 49\n20 40 30 50 10\n26 32 20 38 44 50\n8 23 18 13 3\"\"\"\nprint(\"Passed!\")\n\n\"\"\"\n1. \u0414\u0430\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0441\u0435\u043b.\n\n\u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0439 \u043d\u0438\u0436\u0435 \u043a\u043e\u0434:\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\n\nimport numpy as np"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5\n2 1 49\n5 20 50\n6 20 50\n5 3 8\n9 13 22\n''') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3'\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\\n') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\\n1 10 13 4 19 22 25 16 7'\n\"\"\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\\n\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\"\n\"\"\"\n\n\n\nimport sys\nimport os\nimport ast\n\nimport numpy as np\nimport time\n\nfrom ast import literal_eval\n\nimport math"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '2 1 49\\n'\n    '5 20 50\\n'\n    '6 20 50\\n'\n    '5 3 8\\n'\n    '9 13 22'\n) == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3'\n\"\"\"\n\nimport sys\n\nlines = sys.stdin.readlines()"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5\\n') == '1 2 3 4 5'\nassert solution('5 2 5\\n') == '5 10'\nassert solution('1 2 3 4 5\\n5 1 4 3 2') == '1 2 3 4 5'\nassert solution('5 2 5\\n5 1 4 3 2') == '5 10'\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\") == \"1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\"\n\n\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 3 2') == '1 2 3 4'\n\nprint(solution('4 1 3 2'))\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\nassert solution(\"4 5 7 9\") == \"9 7 5 4\"\nassert solution(\"7 8 6 1 2\") == \"2 6 1 8 7\"\nassert solution(\"8 7 4 1 3\") == \"1 3 4 7 8\"\n\n'''"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\nassert solution(\"3 3 2 1\") == \"1 2 3\"\nassert solution(\"3 3 2 1\") == \"1 2 3\"\nassert solution(\"4 3 2 1\") == \"1 2 3\"\nassert solution(\"3 5 1 2\") == \"1 2 3 5\"\n\"\"\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\nassert solution('2 1') == '1 2'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\n\"\"\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\nassert solution('4 4 4 5') == '4 4 4 5'\nassert solution('3 2 1') == '1 2 3'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\n'''\n\nimport sys"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\n\n\"\"\"\n\nn, *ar = list(map(int, input().split(' ')))\nar = sorted(ar, reverse=True)\nprint(*ar)\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\nassert solution('5 4 1 2 3') == '1 2 3 4 5'\nassert solution('1 2 3 4 5') == '1 2 3 4 5'\nassert solution('7 7 7 7 7') == '7 7 7 7 7'\nassert solution('6 5 5 5 3') == '3 5 5 6'\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\n\"\"\""
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n2 3\\n4\\n2 2 8 8') == 'YES'\nassert solution('3\\n3 3 3\\n4\\n5 5 5 5') == 'NO'\n\"\"\"\nimport sys"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a) == result\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10000)\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'NO'\nassert solution('1\\n1') == 'NO'\nassert solution('2\\n2') == 'NO'\nassert solution('2\\n3\\n2 3\\n3 3') == 'NO'\nassert solution('2\\n2\\n2 2\\n2 2') == 'YES'\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n5\\n2 3\\n4\\n2 2 8 8\") == \"YES\"\nassert solution(\"2\\n5\\n2 3\\n4\\n2 2 8 8\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2 3\\n4\\n2 2 8 8\") == \"YES\"\nassert solution(\"3\\n3 3 3\\n4\\n5 5 5 5\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n1\\n1\\n1') == 'YES'\nassert solution('2\\n4\\n2 2 8 8') == 'NO'"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5\n2\n2 3\n4\n2 2 8 8\n3\n3 3 3\n4\n5 5 5 5\n4\n1 1 1 1\"\"\") == \"YES\\nNO\\nYES\\nNO\\nNO\"\n\"\"\"\n)\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str([2, 3])) == 'YES'\nassert solution(str([2, 8])) == 'NO'\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n5\n2\n2 3\n4\n2 2 8 8\n3\n3 3 3\n4\n5 5 5 5\n4\n1 1 1 1\n''') == '''\nYES\nNO\nYES\nNO\nNO\n'''\n\n\n\"\"\"\nhttps://codeforces.com/problemset/problem/331/A\n\nGiven n integers. Each of them is equal to or greater than 0. Determine whether or not all of them are odd. If the total number of elements is odd, then the total sum must be divisible by 3.\n\ninput:\n\nt cases, n in each case\n\noutput:\n\nYES if all numbers are odd\nNO if there is an even number\n\n\"\"\"\n\nt = int(stdin.readline().rstrip())\n\nfor _ in range(t):\n    n = int(stdin.readline().rstrip())\n\n    if (n % 2) == 0:\n        print('NO')\n    else:\n        print('YES')\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3\\n4\\n2 2 8 8\") == \"NO\"\nassert solution(\"5\\n1 1 1 1\\n3\\n4 5 5 5\") == \"YES\"\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == '9 6 10 8 4 7 3 1 5 2'\nassert solution('2') == -1\nassert solution('4') == '3 1 4 2'\nassert solution('6') == '5 1 3 6 2 4 7'\nassert solution('7') == '5 3 1 4 2 6 7'\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n10\\n2\\n4\\n6\\n7\\n13\") == \"9 6 10 8 4 7 3 1 5 2 \"\nassert solution(\"5\\n4\\n3\\n2\\n1\\n\") == \"3 1 4 2 \"\nassert solution(\"3\\n3\\n3\\n1\\n\") == \"3 1 2 \"\nassert solution(\"8\\n5\\n3\\n2\\n1\\n\") == \"5 4 3 1 \"\n\"\"\""
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\n2\\n4\\n6\\n7\\n13\\n\") == \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"13\\n\") == \"-1\"\nassert solution(\"2\\n4\\n\") == \"5 3 6 2 4 1\"\nassert solution(\"4\\n5\\n\") == \"5 1 3 6 2 4\"\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2') == '5 1 3 6 2 4'\nassert solution('6\\n3') == '6 1 2 3 4 5'\nassert solution('6\\n7') == '6 1 2 3 4 5 6'\nassert solution('13\\n6') == '13 9 7 11 8 4 1 3 5 2 6 10 12'\n\nprint(solution(stdin))\n\n\n-----Explanation-----\n\nIn the first test case, for $n=10$, there are exactly 6 possible permutations:\n$5 1 3 6 2 4$\n$5 3 1 6 2 4$\n$5 3 6 2 4 1$\n$5 6 2 4 1 3$\n$5 6 2 4 1 3$\n$5 6 4 1 3 2$\n$5 6 4 1 3 2$\nIn the second test case, for $n=2$, there are no permutations.\nIn the third test case, for $n=4$, there are exactly 6 permutations:\n$5 1 3 6 2 4$\n$5 3 1 6 2 4$\n$5 3 6 2 4 1$\n$5 6 2 4 1 3$\n$5 6 2 4 1 3$\n$5 6 4 1 3 2$\n$5 6 4 1 3 2$\nIn the fourth test case, for $n=6$, there are exactly 6 permutations:\n$5 1 3 6 2 4$\n$5 3 1 6 2 4$\n$5 3 6 2 4 1$\n$5 6 2 4 1 3$\n$5 6 2 4 1 3$\n$5 6 4 1 3 2$\n$5 6 4 1 3 2$\nIn the fifth test case, for $n=7$, there is no permutation that meets the criteria.\nIn the sixth test case, for $n=13$, there are exactly 6 permutations:\n$5 1 3 6 2 4$\n$5 3 1 6 2 4$\n$5 3 6 2 4 1$\n$5 6 2 4 1 3$\n$5 6 2 4 1 3$\n$5 6 4 1 3 2$\n$5 6 4 1 3 2$\nThe last test case, for $n=6$, will be demonstrated in the next section.\n\"\"\"\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"9 6 10 8 4 7 3 1 5 2\"\n\"\"\"\nimport sys\nfrom math import floor, ceil"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"4\") == \"3 1 4 2\"\n\"\"\"\n\nimport random"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n3\\n2\\n4\\n5\\n\") == \"1 3 2 4 5\"\nassert solution(\"3\\n5\\n4\\n2\\n1\\n\") == \"-1\"\nassert solution(\"3\\n3\\n2\\n4\\n5\\n\") == \"3 1 4 2 5\"\n\n\"\"\""
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\n4\\n6\\n7\\n13\\n\") == \"9 6 10 8 4 7 3 1 5 2\\n-1\\n3 1 4 2\\n5 3 6 2 4 1\\n5 1 3 6 2 4 7\\n13 9 7 11 8 4 1 3 5 2 6 10 12\"\n\n\"\"\""
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == '9 6 10 8 4 7 3 1 5 2'\nassert solution('2') == '-1'\nassert solution('4') == '5 3 6 2 4 1'\nassert solution('6') == '5 1 3 6 2 4 7'\nassert solution('7') == '13 9 7 11 8 4 1 3 5 2 6 10 12'\n\n\"\"\"\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\n2\\n4\\n6\\n7\\n13\\n') == '9 6 10 8 4 7 3 1 5 2'\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 2 7 6\") == \"2\"\nassert solution(\"3\\n3 2 6\") == \"1\"\nassert solution(\"1\\n7\") == \"-1\"\nassert solution(\"7\\n7\") == \"0\"\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(100000)\n\n\nclass Node:\n    def __init__(self, number, weight):\n        self.number = number\n        self.weight = weight\n        self.left = None\n        self.right = None\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n3 2 7 6') == 2\nassert solution('3\\n3 2 6') == 1\nassert solution('1\\n7') == -1\nassert solution('7\\n7') == 0\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\\n') == '2'\nassert solution('4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\\n') == '1'\nassert solution('4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\\n') == '-1'"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == ''\nassert solution('5 6 7 8') == '3'\nassert solution('4 9 2 1 18 3 0') == '3'\nassert solution('1 2 3 4') == '1'\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 2 7 6\") == \"2\"\nassert solution(\"3\\n3 2 6\") == \"1\"\nassert solution(\"1\\n7\") == \"7\"\nassert solution(\"7\\n4 9 2 1 18 3 0\") == \"0\"\n\"\"\""
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1, 2) == 1\nassert solution(2, 3) == -1\nassert solution(3, 4) == 0\n\"\"\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\\n\") == \"2\"\nassert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\\n\") == \"1\"\nassert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\\n\") == \"-1\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\\n') == '2\\n1\\n-1\\n0'\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\") == \"2\\n1\\n-1\\n0\"\n\n\"\"\"\n\nimport sys\nimport copy\nimport math\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3\\n7\\n6\\n') == '2'\nassert solution('3\\n3\\n6\\n') == '1'\nassert solution('1\\n7\\n7\\n4\\n9\\n2\\n1\\n18\\n3\\n0\\n') == '-1'\nassert solution('7\\n7\\n4\\n9\\n2\\n1\\n18\\n3\\n0\\n') == '0'\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 1 1 1\\n1 2\\n1 3\\n1 4\") == \"2 2 2 2 1 1 0 2\"\n\n\"\"\"\n\n\nimport sys\nfrom typing import Callable\n\nimport pytest\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n1 4\") == \"0 -1 1 -1\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n9\n0 1 1 1 0 0 0 0 1\n1 2\n1 3\n3 4\n3 5\n2 6\n4 7\n6 8\n5 9\n''') == '2 2 2 2 2 1 1 0 2'\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\") == \"2 2 2 2 2 1 1 0 2\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\\n\") == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\\n\") == \"0 -1 1 -1\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\\n\") == \"2 2 2 2 2 1 1 0 2\"\n\n[Hint]\nUse the data from `stdin`.\n\n\"\"\""
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n0 1 1 0\\n1 2\\n1 3\\n1 4') == '2 -1 1 -1'\nassert solution('5\\n0 0 1 0\\n1 2\\n1 3\\n1 4') == '0 -1 1 -1'\nassert solution('6\\n0 0 1 0\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6') == '0 -1 1 -1 2 -1'\n\"\"\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 1 1 0\\n1 2\\n1 3\\n1 4\\n\") == \"2 2 2 2 1 1 0 2\"\nassert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\\n\") == \"2 2 2 2 2 1 1 0 2\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\") == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\"4\\n0 0 1 0\") == \"0 -1 1 -1\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\\n\") == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\\n\") == \"0 -1 1 -1\"\n\"\"\"\nimport sys\n\nclass Graph:\n    def __init__(self, v, e):\n        self.v = v\n        self.e = e\n        self.edges = {}\n        for v in range(1, v + 1):\n            self.edges[v] = []\n\n    def __repr__(self):\n        return f\"<Graph v={self.v} e={self.e}>\"\n\n    def addEdge(self, v, u):\n        self.edges[v].append(u)\n        self.edges[u].append(v)\n\n    def degree(self, v):\n        return len(self.edges[v])\n\n    def allNodes(self):\n        return set(self.edges.keys())\n\n    def neighbors(self, v):\n        return self.edges[v]\n\n    def connected(self, v, u):\n        return u in self.edges[v]\n\n    def isConnected(self):\n        return len(self.allNodes()) == 1\n\nclass Subtree:\n    def __init__(self, vertices, edges):\n        self.v = len(vertices)\n        self.e = len(edges)\n        self.edges = edges\n        self.vertices = set(vertices)\n\n    def __repr__(self):\n        return f\"<Subtree v={self.v} e={self.e}>\"\n\n    def allNodes(self):\n        return set(self.vertices)\n\n    def degree(self, v):\n        return len(self.edges[v])\n\n    def neighbors(self, v):\n        return self.edges[v]\n\n    def connected(self, v, u):\n        return u in self.edges[v]\n\n    def isConnected(self):\n        return len(self.allNodes()) == 1"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == 0\nassert solution('2') == -1\nassert solution('3') == 2\nassert solution('12') == -1\nassert solution('12345') == -1\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n12\\n12345\\n15116544\\n387420489\") == \"2\\n-1\\n2\\n-1\\n-1\\n12\\n36\"\n\"\"\"\n\nimport sys\n\nT = int(sys.stdin.readline().strip())\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"0\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\") == \"0\"\nassert solution(\"3\\n12\") == \"2\"\nassert solution(\"387420489\\n15116544\") == \"36\"\n\n\"\"\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\") == \"0\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\") == \"2\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\") == \"2\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\") == \"0\"\nassert solution(\"3\\n12\") == \"2\"\nassert solution(\"12345\\n15116544\") == \"36\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n1\") == \"0\"\nassert solution(\"7\\n2\") == \"0\"\nassert solution(\"7\\n3\") == \"2\"\nassert solution(\"7\\n12\") == \"2\"\nassert solution(\"7\\n12345\") == \"0\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\") == '1'\nassert solution(\"2\\n3\") == '2'\nassert solution(\"3\\n4\") == '2'\nassert solution(\"6\\n12\") == '2'\nassert solution(\"12345\\n15116544\") == '36'\n\"\"\"\n\nfrom collections import deque\nimport sys\n\n_input = sys.stdin.readlines()\n_t = int(_input[0])\n_test_case = []\nfor _i in range(_t):\n    _test_case.append(int(_input[(_i+1)]))\n\nfor _i in range(_t):\n    print(solution(_test_case[_i]))\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\") == \"1\"\nassert solution(\"1\\n3\") == \"1\"\nassert solution(\"3\\n6\") == \"2\"\nassert solution(\"5\\n10\") == \"1\"\nassert solution(\"7\\n15116544\") == \"6\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n') == '0'\nassert solution('2\\n') == '-1'\nassert solution('3\\n') == '2'\nassert solution('12\\n') == '-1'\nassert solution('12345\\n') == '12'\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BGGGG\") == \"1\"\nassert solution(\"RBRGR\") == \"0\"\nassert solution(\"BBBRR\") == \"3\"\n\nassert solution(\"BGGGG\", 5, 2) == \"1\"\nassert solution(\"RBRGR\", 5, 3) == \"0\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RGBRGBRGB\") == 3\nassert solution(\"RRRRRR\") == 0\nassert solution(\"RBRRRB\") == 2\nassert solution(\"GBBGBGBR\") == 2\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"RBRGR\") == 0\nassert solution(\"BBBRR\") == 3\n\"\"\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"BGGGG\", 5, 2) == 1\nassert solution(\"BGGGG\", 5, 3) == 0\nassert solution(\"RBRGR\", 5, 5) == 3\n\"\"\""
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RGBRGBRGB\") == 3\nassert solution(\"RRRRRRRRRR\") == 0\nassert solution(\"RGGGGGGGG\") == 8\nassert solution(\"RRRRRRRRRR\") == 0\nassert solution(\"GGGGGGGGGG\") == 8\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"BBRGR\") == 0\nassert solution(\"BBBRR\") == 3\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RBRGR\", 3) == 'RRGGBB'\nassert solution(\"BBRGR\", 4) == 'RBG'\n\n\"\"\"\n\nfrom collections import deque\nimport sys\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"RBRGR\") == 3\n\"\"\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n3\n5 2\nBGGGG\n5 3\nRBRGR\n5 5\nBBBRR\n''') == '''\n1\n0\n3\n'''\n\n'''"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4\n4\n5 1 2 3\n5\n1 1 1 1 1 2 2\n\"\"\") == \"6\"\n\nassert solution(\"\"\"\n1\n6\n2 3 4 5 6 1\n\"\"\") == \"0\"\nassert solution(\"\"\"\n1\n4\n1 1 1 1 1 2 2\n\"\"\") == \"6\"\nassert solution(\"\"\"\n2\n4\n2 1 2 2 1\n4\n1 1 1 1 1 2 2\n\"\"\") == \"4\"\nassert solution(\"\"\"\n2\n5\n1 1 2 2 3\n3\n1 2 3 3 4 5\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\"\nassert solution(\"5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 1 2 3 1\") == \"3\"\nassert solution(\"4\\n4 1 2 3 1\") == \"0\"\nassert solution(\"4\\n4 0 2 3 1\") == \"1\"\n\n\"\"\"\n\nt = int(stdin.readline())\nfor i in range(t):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    div = n // 3\n    max_div = 0\n    for i in a:\n        if i % 3 == 0:\n            max_div += 1\n    print(max_div - div)\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2\\n3 1 2 3 1\\n3\\n1 1 1 1 1 2 2\") == \"3\\n3\"\nassert solution(\"2\\n5\\n3 1 2 3 1\") == \"3\\n3\"\nassert solution(\"2\\n7\\n1 1 1 1 1 2 2\") == \"3\"\n\n---\n\nYou are given an array A consisting of N integers. You have to find the maximum sum of its elements.\n\nFor example, consider the following array A consisting of six elements such that:\n\nA[0] = 3  A[1] = 2  A[2] = -6\nA[3] = 4  A[4] = 0\nA[5] = 1\nThe maximum sum is 3, because it is equal to the greatest number + the greatest number + the greatest number.\n\nWrite a function:"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 1 2 3\\n7\\n1 1 1 1 1 2 2\") == 3\n\"\"\"\nimport sys\nfrom collections import Counter\n\nassert (sys.stdin.readline() == \"4\\n1 1 2 3\\n7\\n1 1 1 1 1 2 2\\n\")\n\nn, *a = [int(i) for i in sys.stdin.readlines()]\n\na_c = Counter(a)\n\nsums = set()\n\nfor i in range(1, n+1):\n    for j in range(i+1, n+1):\n        sums.add(a[i-1] + a[j-1])\n\nsums = {s for s in sums if s % 3 == 0}\n\nprint(max(a_c[i] for i in sums))\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n5\\n3 1 2 3 1') == '3'\nassert solution('2\\n7\\n1 1 1 1 1 2 2') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 2 3\\n2\\n1 1 2 2\") == \"5\"\nassert solution(\"4\\n1 1 2 3\\n2\\n1 1 2 3\") == \"5\"\nassert solution(\"4\\n1 1 2 3\\n2\\n1 1 2 4\") == \"5\"\n\"\"\"\n\n\"\"\"\nhttp://codeforces.com/contest/1498/submission_summary?from=1&submission_id=1518307\n\"\"\"\nimport sys"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3\\n1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\\n3\"\n\"\"\""
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == \"3\"\n\"\"\"\n\n\nimport unittest\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n1\\n2\\n2\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 4 3\") == '1 5 2 4 3'\nassert solution(\"4\\n1 2 4 3\") == '1 2 3 4'\nassert solution(\"1\\n1\") == '1'\n\"\"\"\nimport sys\n\ntests = int(sys.stdin.readline().strip())\nfor _ in range(tests):\n    n = int(sys.stdin.readline().strip())\n    permutation = list(map(int, sys.stdin.readline().strip().split()))\n    sys.stdin.readline().strip()\n    permutation = list(permutation)\n    left, right = 0, n - 1\n    while left < right:\n        curr = permutation[left]\n        if left == right:\n            left += 1\n            right = n - 1\n            continue\n        while left < right and permutation[right] >= curr:\n            right -= 1\n        permutation[left], permutation[right] = permutation[right], curr\n        left += 1\n        right = n - 1\n        while left < right and permutation[left] >= curr:\n            left += 1\n        permutation[left], permutation[right] = permutation[right], curr\n        print(*permutation)\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == '1 5 2 4 3 '\nassert solution(\"5\\n4\\n1 2 4 3\") == '1 2 3 4'\nassert solution(\"3\\n4\\n1 2 3\") == '1 2 3 4'\n\n\"\"\"\nimport sys\nfrom typing import List\n\nsys.setrecursionlimit(1_000_000)\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4\"\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"4\\n4 3 2 1\") == \"1 2 3 4\"\n\n\"\"\""
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n5 4 1 3 2\") == \"1 5 2 4 3 \"\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4 \"\nassert solution(\"1\\n1\") == \"1 \"\nassert solution(\"4\\n4 3 2 1\") == \"1 2 3 4 \"\n\nstdin = \"4\\n5\\n5 4 1 3 2\"\nsolution(stdin)\n\n'''"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n5\\n5 4 1 3 2') == '1 5 2 4 3'\nassert solution('4\\n4 3 2 1') == '1 2 3 4'\nassert solution('4\\n1\\n1') == '1'\nassert solution('4\\n4 3 2 1') == '1 2 3 4'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4\"\n\"\"\"\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"5\\n4\\n1 2 4 3\") == \"1 2 3 4\"\n\nimport ast\nimport sys"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n5\n5 4 1 3 2\n4\n1 2 4 3\n1\n1\n4\n4 3 2 1''') == '1 5 2 4 3 '\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3 \"\nassert solution(\"4\\n1\\n2\") == \"1 2 \"\nassert solution(\"4\\n1\\n4 3 2 1\") == \"1 4 3 2 \"\nassert solution(\"4\\n1\\n4 3 2 1\") == \"1 4 3 2 \"\nassert solution(\"4\\n1\\n4 3 2 1\") == \"1 4 3 2 \"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3\\n1 2 3 4\") == \"YES\"\n\nsolution(\"5\\n4\\n1 2 3 4\")\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'NO'\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == 'YES'\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == 'NO'\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\\n\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\n\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\\n\") == \"NO\\nNO\\nNO\\nNO\"\n\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\\n\") == \"NO\\nNO\\nNO\\nNO\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n5\n4\n1 2 3 4\n3\n1 3 2\n5\n1 2 3 5 4\n1\n1\n5\n3 2 1 5 4\n''') == 'YES\\nYES\\nNO\\nYES\\nYES'\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n5\n4\n1 2 3 4\n3\n1 3 2\n5\n1 2 3 5 4\n1\n1\n5\n3 2 1 5 4\n''') == 'YES\\nYES\\nNO\\nYES\\nYES'\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\\n\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\n\nassert solution(\"4\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\\n\") == \"NO\\nNO\\nNO\\nYES\\nYES\""
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\nprint(solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\"))\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open('test.in', 'r').read()) == open('test.out', 'r').read()\n\n\n----\n'''\nimport sys\nfrom typing import List, Tuple"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '4'\nassert solution('4 2') == '5'\nassert solution('1 2 3 4') == '6'\nassert solution('1 2 3 4 5') == '10'\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"18\"\nassert solution(\"5 2\") == \"18\"\nassert solution(\"19 4\") == \"18\"\nassert solution(\"12 7\") == \"10\"\nassert solution(\"6 2\") == \"6\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2') == '5'\nassert solution('19 4') == '18'\nassert solution('12 7') == '10'\nassert solution('6 2') == '6'\nassert solution('100000 50010') == '75015'\nprint(solution(input()))\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\") == \"5\\n18\\n10\\n6\\n75015\"\nassert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\") == \"5\\n18\\n10\\n6\\n75015\"\n\"\"\"\n\n\nimport math\nimport numpy as np\nimport random"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\") == \"3\"\nassert solution(\"5 2\") == \"5\"\nassert solution(\"19 4\") == \"18\"\nassert solution(\"12 7\") == \"10\"\nassert solution(\"6 2\") == \"6\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5 18 10 6 75015\"\nassert solution(\"3\\n3 4\\n3 1\") == \"3 5 6\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open('input.txt').read()) == '18'\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\") == '5\\n18\\n10\\n6\\n75015'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\") == \"5 18 10 6 75015\"\n\"\"\"\n\n\"\"\"\n[Method 1]: DFS\n[Time]: O(N^2)\n[Space]: O(N^2)\n\nRuntime: 744 ms, faster than 84.43% of Python3 online submissions for Candies.\nMemory Usage: 13.8 MB, less than 100.00% of Python3 online submissions for Candies.\n\"\"\"\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        def dfs(n, a, b, c, memo, start):\n            if n == 0:\n                return min(b, c) - a\n            if n == 1:\n                return min(a, c)\n            if start >= len(memo):\n                return dfs(n-1, a, b, c, memo, 0)\n            if memo[start][n] > 0:\n                return memo[start][n]\n            if a == 0:\n                ans = dfs(n-1, b, b, c, memo, start+1) + 1\n            elif b == 0:\n                ans = dfs(n-1, a-1, b, c, memo, start+1) + 1\n            elif c == 0:\n                ans = dfs(n-1, a, b-1, b, memo, start+1) + 1\n            else:\n                ans = min(dfs(n-1, a-1, b, c, memo, start+1), dfs(n-1, a, b-1, c, memo, start+1), dfs(n-1, a, b, c-1, memo, start+1)) + 1\n            memo[start][n] = ans\n            return ans\n\n        t = int(stdin.readline())\n        memo = [[0 for _ in range(101)] for _ in range(101)]\n        for _ in range(t):\n            n, k = map(int, stdin.readline().split())\n            res = dfs(k, n, n, n, memo, 0)\n            print(res)\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 4\") == \"YES\"\nassert solution(\"100 4\") == \"YES\"\nassert solution(\"8 7\") == \"YES\"\nassert solution(\"97 2\") == \"YES\"\nassert solution(\"8 8\") == \"NO\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 1\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\") == \"NO\"\nassert solution(\"8 3\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\n12 1\\"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(input())\n\"\"\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 3 4\") == \"NO\"\nassert solution(\"8 2 3 4\") == \"YES 4 2 4\"\nassert solution(\"1 1 1 1 1 1 1 1 1\") == \"NO\"\nassert solution(\"3 1 1\") == \"YES 3 1 1\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9') == 'YES\\n4 2 4'\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 4') == 'YES'\n\"\"\"\nimport math"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''8\n10 3\n100 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9''') == '''YES\n4 2 4\nYES\n55 5 5 35\nNO\nNO\nYES\n1 1 1 1 1 1 1 1\nNO\nYES\n3 1 1\nYES\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120'''\n\n\"\"\""
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 10 3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9\") == \"YES\\n4 2 4\"\n\n\"\"\""
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'NO'\nassert solution('0 1') == 'YES'\nassert solution('0 10') == 'NO'\nassert solution('1 10') == 'YES'\nassert solution('2 10') == 'NO'\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3\\n10\\n7\") == \"YES\\n4 2 4\"\nassert solution(\"2\\n3\\n4\\n1\\n1\\n10\\n7\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == '4\\n55\\n15000000000000000\\n51'\nprint(\"Test pass.\")\n\n-----Problem-----\n\nInput:\n3\n3 1 1\n3 1 1\n3 1 1000000000\n\nOutput:\n3\n3\n3\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == '4\\n55\\n15000000000000000\\n51'\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45''') == '''4\n55\n15000000000000000\n51'''\nprint(solution(stdin))\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\nprint(solution(stdin))\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3 4\\n1 10 100') == '4\\n55\\n15000000000000000\\n51'\n\"\"\""
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45\n''') == '''\n4\n55\n15000000000000000\n51\n'''\n\nprint(solution(input()))\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\nassert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\nassert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\nassert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\nassert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 3\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\nprint(\"tests passed\")"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45''') == '''4\n55\n15000000000000000\n51'''\nprint('Success')"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec\\n\") == \"6\\n3\\n5\\n4\\n15\\n10\\n\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 6\\nabcbac') == '3'\nassert solution('3 6\\naaa') == '3'\nassert solution('7 1000\\nabczgyo') == '7'\nassert solution('7 1000\\nabczgyo') == '7'\n\nassert solution('5 4\\nababa') == '4'\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"5\"\nassert solution(\"5 2\") == \"3\"\nassert solution(\"5 6\") == \"2\"\nassert solution(\"5 20\") == \"3\"\nassert solution(\"6 3\") == \"5\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6\\n\"\n                \"abcbac\") == \"3\"\nassert solution(\"3 6\\n\"\n                \"aaa\") == \"3\"\nassert solution(\"7 1000\\n\"\n                \"abczgyo\") == \"5\"\nassert solution(\"7 1000\\n\"\n                \"ecbedececacbcbccbdec\") == \"10\"\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3 abcbac\") == \"6\"\nassert solution(\"3 6 abcbac\") == \"3\"\nassert solution(\"3 6 aaa\") == \"3\"\nassert solution(\"7 1000 abczgyo\") == \"7\"\nassert solution(\"5 4 ababa\") == \"4\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3\\nabcbac\") == \"6\"\nassert solution(\"3 6\\naaa\") == \"3\"\nassert solution(\"7 1000\\nabczgyo\") == \"7\"\nassert solution(\"5 4\\nababa\") == \"5\"\nassert solution(\"20 10\\naaebdbabdbbddaadaadc\") == \"20\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcbac\") == 3\nassert solution(\"aaa\") == 3\nassert solution(\"abczgyo\") == 4\nassert solution(\"ababa\") == 4\nassert solution(\"ecbedececacbcbccbdec\") == 10\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcbac') == 3\nassert solution('aaa') == 1\nassert solution('abczgyo') == 5\nassert solution('ababa') == 4\nassert solution('ecbedececacbcbccbdec') == 10\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec\") == \"6\\n3\\n5\\n4\\n15\\n10\"\n\n\"\"\"\n\nimport re\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec') == '6\\n3\\n5\\n4\\n15\\n10'\nassert solution('1 1\\nab\\n1 1') == '1'\nassert solution('1 1\\nab\\n2 1') == '2'\nassert solution('1 1\\nabc\\n2 1') == '3'\nassert solution('1 1\\nabc\\n3 1') == '4'\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n5 2') == 'NO'\nassert solution('1\\n5 3') == 'NO'\nassert solution('1\\n5 1') == 'YES'\nassert solution('1\\n5 4') == 'YES'\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5 3\n7 18 3 14 1\n5 4\n1 2 3 4 5\n6 2\n1 2 8 4 10 2\n\"\"\") == \"\"\"\nYES\n1 3 5\nNO\n\"\"\"\n\nassert solution(\"\"\"\n5 3\n7 18 3 14 1\n5 4\n1 2 3 4 5\n6 2\n1 2 8 4 10 2\n\"\"\") == \"\"\"\nYES\n1 3 5\nNO\n\"\"\"\n\nassert solution(\"\"\"\n5 3\n7 18 3 14 1\n5 4\n1 2 3 4 5\n6 2\n1 2 8 4 10 2\n\"\"\") == \"\"\"\nYES\n1 3 5\nNO\n\"\"\"\n\nassert solution(\"\"\"\n5 3\n7 18 3 14 1\n5 4\n1 2 3 4 5\n6 2\n1 2 8 4 10 2\n\"\"\") == \"\"\"\nYES\n1 3 5\nNO\n\"\"\"\n\nassert solution(\"\"\"\n5 3\n7 18 3 14 1\n5 4\n1 2 3 4 5\n6 2\n1 2 8 4 10 2\n\"\"\") == \"\"\"\nYES\n1 3 5\nNO\n\"\"\""
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == \"\"\"YES\n1 3 5\"\"\"\nassert solution(\"7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2\") == \"\"\"NO\"\"\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5 4\\n1 2 3 4 5\\n6 2') == 'NO\\nNO'\n\"\"\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == 'YES\\n1 2 4'\nassert solution(\"3 2\") == 'NO'\n\n'''\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 2 3 4 5\\n2 2\\n1 2 8 4 10 2\") == \"YES\\n1 3 5\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1 2 3 4 5\") == \"NO\"\nassert solution(\"4 3\\n1 2 3 4\") == \"YES\"\nassert solution(\"7 3\\n3 5 7 8 9 10 11\") == \"YES\"\nassert solution(\"7 3\\n1 2 3 4 5 6 7\") == \"NO\"\nassert solution(\"7 3\\n2 4 6 8 10 12\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5') == 'NO\\nNO'\nassert solution('7 2\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5') == 'YES\\n1 3 5'\n\"\"\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\n\"\"\""
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('111111111111111111111111111111101') == 3221225471\nassert solution('10111111111111111111111111111111') == 4294967293\nassert solution('111111101111011111111011111111111101') == 964176192\nassert solution('11101111011111111111101111111101111111101111111111') == 3221225471\n\"\"\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('111111111111111111111111111111101') == 3221225471\n\"\"\"\n\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        bits = bin(n)[2:]\n        bits = bits[::-1]\n        bits = bits.zfill(32)\n        return int(bits, 2)"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11111111111111111111111111111101') == '3221225471'\n\"\"\""
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(bin(5)) == \"101\"\nassert solution(bin(1)) == \"1\"\nassert solution(bin(2)) == \"10\"\nassert solution(bin(3)) == \"11\"\nassert solution(bin(0)) == \"0\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"00000010100101000001111010011100\") == \"964176192\"\nassert solution(\"111111111111111111111111111111101\") == \"3221225471\"\n\"\"\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11100010') == '3221225471'\nassert solution('11101111') == '4294967293'\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('111011011011101111111111111111111101') == '10111111111111111111111111111111'\nassert solution('111011011011101111111111111111111110') == '10111111111111111111111111111110'\nassert solution('1110110110111011111111111111111111111110') == '10111111111111111111111111111110'\nassert solution('1110110110111011111111111111111111111110') == '10111111111111111111111111111110'\nassert solution('1110110110111011111111111111111111111110') == '10111111111111111111111111111110'\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11100101110011101111011110111100\") == \"3221225471\"\nassert solution(\"111111111111111111111111111111101\") == \"3221225471\"\nassert solution(\"111111111111111111111111111111101\") == \"3221225471\"\nassert solution(\"11001100110011001100110011001110\") == \"3221225471\"\nassert solution(\"11101111111101111111101111011100\") == \"3221225471\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('111111111111111111111111111111101') == '3221225471'\nassert solution('110011001100110111111111111011111') == '3221225471'\n\"\"\""
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n\"\"\"\n\n\nclass Solution:\n    def generate(self, numRows: int) -> [[int]]:\n        if numRows == 0:\n            return []\n        elif numRows == 1:\n            return [[1]]\n\n        pascal = [[1], [1, 1]]\n\n        while len(pascal) < numRows:\n            last_row = pascal[-1]\n            temp_row = [1]\n            for i in range(len(last_row) - 1):\n                temp_row.append(last_row[i] + last_row[i + 1])\n            temp_row.append(1)\n            pascal.append(temp_row)\n\n        return pascal\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(5) == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\nassert solution(1) == [[1]]\nassert solution(0) == []\n\"\"\""
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == [[1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1]]\n\"\"\"\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        triangle = []\n\n        for i in range(numRows):\n            row = [1]\n            if i > 1:\n                for j in range(i - 1):\n                    row.append(triangle[i-1][j] + triangle[i-1][j+1])\n                row.append(1)\n            triangle.append(row)\n\n        return triangle\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\nassert solution(\"1\") == [[1]]\nassert solution(\"0\") == []\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == [\n    [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]]\n    \n\n\n\"\"\""
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n\n\"\"\""
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == [\n    [1],\n    [1, 1],\n   [1, 2, 1],\n  [1, 3, 3, 1],\n [1, 4, 6, 4, 1]\n]\n\"\"\""
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == [\n    [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]]\n\nassert solution(\"4\") == [\n    [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1]]\n\nassert solution(\"1\") == [\n    [1]]\n\nassert solution(\"0\") == []"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == [\n    [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n\"\"\"\n\nfrom typing import List\n\nfrom typing import List\n\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        #  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        #  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        #  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        #  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        #  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n        if numRows < 1:\n            return []\n\n        result = [[1]]\n        for i in range(1, numRows):\n            next_row = [1]\n            for j in range(1, i):\n                next_row.append(result[i - 1][j - 1] + result[i - 1][j])\n            next_row.append(1)\n            result.append(next_row)\n        return result\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == [[1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1]]\n'''\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        elif numRows == 1:\n            return [[1]]\n        elif numRows == 2:\n            return [[1], [1,1]]\n        else:\n            list_num = [1,1]\n            num_list = [1,1]\n            for i in range(numRows-2):\n                for k in range(len(list_num)-1):\n                    num_list[k] = list_num[k] + list_num[k+1]\n                list_num = [1] + num_list + [1]\n                num_list = [1] + num_list + [1]\n            return num_list\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == []\nassert solution('4') == []\nassert solution('1 a@x.com\\n\\n') == ['a@x.com']\nassert solution('2 a@x.com\\na@y.com\\n\\n') == ['a@x.com', 'a@y.com']\nassert solution('3 a@x.com\\na@y.com\\na@z.com\\n\\n') == ['a@x.com', 'a@y.com', 'a@z.com']\n\n\"\"\""
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nrich@google.com\\nwww.facebook.com\\nez@amazon.com\\n\") == \n'''['e','z@amazon.com','rich@google.com','www.facebook.com']'''\nassert solution(\"2\\nrich@google.com\\nez@amazon.com\\n\") == \n'''['e','rich@google.com','ez@amazon.com']'''\n\nprint(solution(stdin))\n>>>>>>> bd3ce3c84d5e6ae879ca29bd4a6e0f923c4d20d9\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\naaa bbb ccc\\naab bbb cc\") == [\n    'aaa@websitename.extension', 'aab@websitename.extension']\n\nassert solution(\"5\\naaaaaa bbbbbb cccccc\\naab aaa bbb ccc\") == [\n    'aaaaaa@websitename.extension', 'aab@websitename.extension']\n\nassert solution(\"1\\naaaaaa bbbbbb cccccc\") == ['aaaaaa@websitename.extension']\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\nrich@example.com\\npoor@example.com\") == \n        ['rich@example.com', 'poor@example.com']\nassert solution(\"1\\n#@example.com\") == [], \"Please input a valid email address\"\nassert solution(\"1\\n@example.com\") == ['@example.com'], \"Please input a valid email address\"\nassert solution(\"1\\nrich@example.com\\n#@example.com\") == \n        ['rich@example.com', '#@example.com']\nassert solution(\"1\\n#@example.com\\nrich@example.com\") == \n        ['#@example.com', 'rich@example.com']\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\\n3\\\nMAde-o\\\n12\\\nGeek-u\\\nUniversity\\\nReLULe\\\n123\\\n@gmail.com') == ['123@gmail.com', '@gmail.com', '123@university.com', 'University@gmail.com', '@university.com']\nassert solution('1\\\n\\\n@gmail.com') == ['@gmail.com']\nassert solution('2\\\nG@gmail.com\\\n_G@_Gmail.com\\\n@G.com\\\n@g.com\\\n@gmail.com\\\n@gmailcom\\\n@gmail.com@gmail.com') == ['@gmail.com', '@gmail.com', '@gmailcom', 'gmailcom', 'gmailcom@gmail.com']\nassert solution('3\\\n@Gmail.com\\\nGmail.com\\\n12@Gmail.com\\\n@gmail.com\\\nG-mail.com\\\n@G.mail.com\\\n@Gmailcom\\\nGmail.com@gmail.com') == ['@gmail.com', '@gmail.com', '@Gmail.com', '@Gmail.com', '@gmailcom', 'gmailcom', 'Gmail.com', 'Gmail.com', 'Gmailcom', 'Gmailcom@gmail.com']\n\nassert solution('4\\\nGmail.com\\\nGmail.com\\\nGmail.com\\\nGmail.com\\\nGmail.com\\\nGmail.com') == ['@gmail.com', '@Gmail.com', 'Gmail.com', 'Gmail.com', 'Gmail.com', '@gmail.com', 'Gmail.com', 'Gmail.com', 'Gmail.com']\n\nprint('Success')"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n\" + \\\n        \"validemail@gmail.com\\n\" + \\\n        \"val@id.ac\\n\") == ['validemail@gmail.com', 'val@id.ac'], \"Test Failed\"\nprint(\"Passed\")\n\n\"\"\"\n\nimport re\n\n\"\"\"\nhttps://www.hackerrank.com/challenges/filter-funny-string\n\nA string is funny if it's length is less than or equal to 2.\n\nInput Format\nThe first line of input contains a single integer T denoting the number of test cases. T test cases follow.\nEach test case consists of a string s.\n\nConstraints\n1 <= T <= 10\n1 <= |s| <= 20\ns consists of lower case English letters, upper case English letters, digits and symbols.\nOutput Format\nFor each test case, print \"Funny\" if the string is funny, otherwise print \"Not Funny\". Do not print the quotation marks.\n\nSample Input\n3\na\naa\naaa\n\"\"\""
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\nano\\nnico\") == ['ano@email.com', 'nico@email.com']\nassert solution(\"2\\nBoom__Kaboom@email.com\\nwoow@email.com\") == ['Boom__Kaboom@email.com', 'woow@email.com']\nassert solution(\"0\\nwoow@email.com\\nBoom__Kaboom@email.com\\nnico@email.com\") == ['woow@email.com', 'Boom__Kaboom@email.com', 'nico@email.com']"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n\"a@leetcode.com\"\\n\"b@leetcode.com\"\\n\"c@leetcode.com\"\\n\"d@leetcode.com\"\\n\"e@leetcode.com\"\\n\"f@leetcode.com\"\\n\"g@leetcode.com\"\\n\"h@leetcode.com\"') == ['d@leetcode.com', 'e@leetcode.com', 'f@leetcode.com', 'g@leetcode.com', 'h@leetcode.com']\n\nassert solution('4\\n\"test@leetcode.com\"\\n\"test1@leetcode.com\"\\n\"test2@leetcode.com\"\\n\"test3@leetcode.com\"') == ['test3@leetcode.com', 'test@leetcode.com', 'test1@leetcode.com', 'test2@leetcode.com']"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"6\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\ndara@hackerrank.com\nmatthew-15@hackerrank.com\nbritts@hackerrank.com\n\"\"\") == \"\"\"['brian-23@hackerrank.com', 'britts@hackerrank.com', 'dara@hackerrank.com','matthew-15@hackerrank.com']\"\"\"\n\n\n>>>>>>> acd60c1b36bca97d944f1c0c1f93c81e5da06b3d\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\njoe@gmail.com\\njohn@gmail.com\\njoe@hotmail.com\\njoe@gmail.com\\njohn@gmail.com\") == \\\n    ['joe@gmail.com', 'joe@hotmail.com', 'john@gmail.com']\n\"\"\""
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3) == [8, 27, 64]\n\nprint(solution(int(input())))\n=====Sample Input=====\n5\n=====Sample Output=====\n[1, 8, 27, 64, 125]\n>>>>>>> 82fdf195b0a99af7a7a14fa8e5fd14b5f4779c04\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == [1, 8, 27, 64]\nassert solution('5') == [1, 8, 27, 64, 125]\n=====Test 1=====\nTest 1\nInput\n\n>>> 15\n\nExpected Output\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2976]\n\nOutput\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2976]\n>>> \n\nTest 2\nInput\n\n>>> 20\n\nExpected Output\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2976, 4782, 6765]\n\nOutput\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2976, 4782, 6765]\n\nTest 3\nInput\n\n>>> 10\n\nExpected Output\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729]\n\nOutput\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729]\n>>> \n=====Test 2=====\nTest 1\nInput\n\n>>> 15\n\nExpected Output\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2976]\n\nOutput\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2976]\n>>> \n\nTest 2\nInput\n\n>>> 20\n\nExpected Output\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2976, 4782, 6765]\n\nOutput\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2976, 4782, 6765]\n\nTest 3\nInput\n\n>>> 10\n\nExpected Output\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729]\n\nOutput\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729]\n>>> \n=====Test 3=====\nTest 1\nInput\n\n>>> 15\n\nExpected Output\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2976]\n\nOutput\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2976]\n>>> \n\nTest 2\nInput\n\n>>> 20\n\nExpected Output\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2976, 4782, 6765]\n\nOutput\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2976, 4782, 6765]\n>>> \n\nTest 3\nInput\n\n>>> 10\n\nExpected Output\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729]\n\nOutput\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729]\n>>> \n=====Test 4=====\nTest 1\nInput\n\n>>> 15\n\nExpected Output\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2976]\n\nOutput\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2976]\n>>> \n\nTest 2\nInput\n\n>>> 20\n\nExpected Output\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2976, 4782, 6765]\n\nOutput\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2976, 4782, 6765]\n>>> \n\nTest 3\nInput\n\n>>> 10\n\nExpected Output\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729]\n\nOutput\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729]\n>>> \n=====Test 5=====\nTest 1\nInput\n\n>>> 15\n\nExpected Output\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2976]\n\nOutput\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2976]\n>>> \n\nTest 2\nInput\n\n>>> 20\n\nExpected Output\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2976, 4782, 6765]\n\nOutput\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2976, 4782, 6765]\n>>> \n\nTest 3\nInput\n\n>>> 10\n\nExpected Output\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729]\n\nOutput\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729]\n>>> \n=====Test 6=====\nTest 1\nInput\n\n>>> 15\n\nExpected Output\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2976]\n\nOutput\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2976]\n>>> \n\nTest 2\nInput\n\n>>> 20\n\nExpected Output\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2976, 4782, 6765]\n\nOutput\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2976, 4782, 6765]\n>>> \n\nTest 3\nInput\n\n>>> 10\n\nExpected Output\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729]\n\nOutput\n\n>>> [1, 8, 27, 64, 125, 216, 343, 512, 729]\n>>> "
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '1,1,1,1'\nassert solution('15') == '1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1'\n=====Test Cases=====\nInput 1:\n4\nOutput 1:\n1,1,1,1\n\nInput 2:\n15\nOutput 2:\n1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1\n\"\"\""
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(4) == [0, 1, 1, 8]\n=====Test Case=====\nInput\n5\nOutput\n[0, 1, 1, 8, 27]\n\nInput\n6\nOutput\n[0, 1, 1, 8, 27, 125]\n\nSolution:\n\n>>> def solution(N):\n    fib_list = [0, 1]\n    for i in range(2, N):\n        fib_list.append(fib_list[i-1] + fib_list[i-2])\n    return list(map(lambda x: x ** 3, fib_list))\n\n>>> solution(5)\n[0, 1, 1, 8, 27]\n>>> solution(6)\n[0, 1, 1, 8, 27, 125]\n\n\n\"\"\""
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == [0, 1, 1, 8, 27]\nassert solution(\"6\") == [0, 1, 1, 8, 27, 125]\nassert solution(\"7\") == [0, 1, 1, 8, 27, 125, 46656]\n\nassert solution(\"7\") == [0, 1, 1, 8, 27, 125, 46656]\n\n\"\"\""
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\") == [8, 27, 64]\n\nstdout\n[1, 2, 8, 27, 64, 125]\n\nSolution:"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4''') == [0, 1, 1, 8]\nprint(solution('''10'''))\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\") == [0, 1, 1, 8]\nassert solution(\"5\") == [0, 1, 1, 8, 27]\n\n=====Test Case=====\nTest Case 1\nInput\n2\nOutput\n[0, 1]\nTest Case 2\nInput\n3\nOutput\n[0, 1, 1]\nTest Case 3\nInput\n4\nOutput\n[0, 1, 1, 8]\nTest Case 4\nInput\n5\nOutput\n[0, 1, 1, 8, 27]\nTest Case 5\nInput\n6\nOutput\n[0, 1, 1, 8, 27, 64]\nTest Case 6\nInput\n7\nOutput\n[0, 1, 1, 8, 27, 64, 125]\nTest Case 7\nInput\n8\nOutput\n[0, 1, 1, 8, 27, 64, 125, 216]\nTest Case 8\nInput\n9\nOutput\n[0, 1, 1, 8, 27, 64, 125, 216, 343]\nTest Case 9\nInput\n10\nOutput\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512]\nTest Case 10\nInput\n11\nOutput\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 729]\n\"\"\"\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == [0, 1, 1, 8]\nassert solution(\"10\") == [0, 1, 1, 8, 27, 64, 125, 216, 343, 512]\nassert solution(\"2\") == [0, 1]\n\n===Sample Test Cases===\nInput:\n\n4\nOutput:\n\n[0, 1, 1, 8]\n\n===Test Case Explanation===\n\nFor N = 4, the first 4 fibonacci numbers are [0, 1, 1, 2], and their cubes are [0, 1, 1, 8].\nInput:\n\n10\nOutput:\n\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512]\n\n===Explanation===\n\nThe first 10 fibonacci numbers are [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]. So, the first 10 cubes are [0, 1, 1, 8, 27, 64, 125, 216, 343, 512].\n\n>>> def solution(n):\n    return [i**3 for i in range(1,n+1)]\n\n>>> solution(10)\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512]\n>>> solution(4)\n[0, 1, 1, 8]\n>>> solution(2)\n[0, 1]\n\"\"\"\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == [0, 1, 1, 8, 27]\n=====Constraints=====\n    1 <= N <= 15\n\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e845d2d0\n    \n    \n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\") == 1\n\nassert solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\"\"\") == 3\n\"\"\"\n\n=====Test Cases=====\nTest case 1\nInput:\n\n2\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n3\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\nTest case 2\nInput:\n\n2\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n3\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\nTest case 3\nInput:\n\n2\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n3\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\n=====Sample Tests=====\nTest 1\nInput\n\n3\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\nTest case\nInput\n\n3\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\nTest case\nInput\n\n3\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\nOutput\n\n3\n\nTest case\nInput\n\n3\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\nTest case\nInput\n\n3\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\nOutput\n\n2\n\nTest case\nInput\n\n2\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\nTest case\nInput\n\n2\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 1\n'''\n\n<feed xml:lang='en'>\n  <title>HackerRank</title>\n  <subtitle lang='en'>Programming challenges</subtitle>\n  <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n  <updated>2013-12-25T12:00:00</updated>\n</feed>\n\n=====Answer=====\n1\n\n=====Test Case 2=====\n\n<feed xml:lang='en'>\n    <html>\n        <head>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        </head>\n        <body>\n        <content lang='en-US'>\n            <![CDATA[\n            <div class=\"someclass\"><p> Some text<script>alert(0)</script><a href=\"http://www.google.com\">Link</a></p></div>\n            ]]>\n        </content>\n        </body>\n    </html>\n</feed>\n\n=====Answer=====\n2\n'''\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n'<feed xml:lang='\n'\"en\"'\n'xmlns='\n'\"http://www.w3.org/2005/Atom\"'\n'xmlns:app='\n'\"http://purl.org/atom/ns#\"'\n'>'\n'  '\n'    '\n'      '\n'        '\n'          '\n'    '\n'  '\n'    '\n'  '\n'</feed>') == 3\nassert solution(\n'<feed xml:lang='\n'\"en\"'\n'xmlns='\n'\"http://www.w3.org/2005/Atom\"'\n'xmlns:app='\n'\"http://purl.org/atom/ns#\"'\n'>'\n'  '\n'    '\n'      '\n'        '\n'          '\n'  '\n'    '\n'  '\n'    '\n'  '\n'  '\n'    '\n'    '\n'  '\n'  '\n'    '\n'    '\n'</feed>') == 3\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n<feed xml:lang=' 'en' '>\\n\\t<title>HackerRank</title>' '\\n\\t<subtitle lang=' 'en'>Programming challenges</subtitle>\\n\\t<link rel=' 'alternate''href=' 'http://hackerrank.com/' '/>\\n\\t<updated>2013-12-25T12:00:00</updated>\\n</feed>') == 1\nassert solution('6\\n<feed xml:lang=' 'en' '>\\n\\t<title>HackerRank</title>' '\\n\\t<subtitle lang=' 'en'>Programming challenges</subtitle>\\n\\t<link rel=' 'alternate''href=' 'http://hackerrank.com/' '/>\\n\\t<updated>2013-12-25T12:00:00</updated>\\n\\t<entry>\\n\\t\\t<author gender=''/>\\n\\t\\t<question type=''/>\\n\\t</entry>\\n\\t<entry>\\n\\t\\t<author gender=''/>\\n\\t\\t<question type=''/>\\n\\t</entry>\\n</feed>') == 2\nassert solution('5\\n<feed xml:lang=' 'en' '>\\n\\t<title>HackerRank</title>' '\\n\\t<subtitle lang=' 'en'>Programming challenges</subtitle>\\n\\t<link rel=' 'alternate''href=' 'http://hackerrank.com/' '/>\\n\\t<updated>2013-12-25T12:00:00</updated>\\n\\t<entry>\\n\\t\\t<author gender=''/>\\n\\t\\t<question type=''/>\\n\\t</entry>\\n\\t<entry>\\n\\t\\t<author gender=''/>\\n\\t\\t<question type=''/>\\n\\t</entry>\\n\\t<entry>\\n\\t\\t<author gender=''/>\\n\\t\\t<question type=''/>\\n\\t</entry>\\n</feed>') == 1\n\n=====Test Case 1=====\nTest Case #1\n\n=====Test Case 2=====\nTest Case #2\n\n=====Test Case 3=====\nTest Case #3\n\n=====Test Case 4=====\nTest Case #4\n\n=====Test Case 5=====\nTest Case #5\n'''\nimport xml.etree.ElementTree as etree\n\nmaxdepth = 0\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('<data>'\n           ' <country name=\"Liechtenstein\">'\n           '   <rank updated=\"yes\">1</rank>'\n           '   <year>2008</year>'\n           '   <gdppc>141100</gdppc>'\n           ' </country>'\n           ' <country name=\"Singapore\">'\n           '   <rank updated=\"no\">4</rank>'\n           '   <year>2011</year>'\n           '   <gdppc>59900</gdppc>'\n           ' </country>'\n           ' <country name=\"Panama\">'\n           '   <rank updated=\"yes\">68</rank>'\n           '   <year>2011</year>'\n           '   <gdppc>13600</gdppc>'\n           ' </country>'\n            '</data>') == 3\nassert solution('<stuff>'\n       ' <users>'\n       '   <user x=\"2\">'\n       '     <id>001</id>'\n       '     <name>Chuck</name>'\n       '   </user>'\n       '   <user x=\"7\">'\n       '     <id>009</id>'\n       '     <name>Brent</name>'\n       '   </user>'\n       ' </users>'\n        '</stuff>') == 2\nassert solution('<stuff>'\n       ' <users>'\n       '   <user x=\"2\">'\n       '     <id>001</id>'\n       '     <name>Chuck</name>'\n       '   </user>'\n       '   <user x=\"7\">'\n       '     <id>009</id>'\n       '     <name>Brent</name>'\n       '   </user>'\n       '   <user x=\"11\">'\n       '     <id>010</id>'\n       '     <name>Norris</name>'\n       '   </user>'\n       ' </users>'\n        '</stuff>') == 1\nassert solution('<stuff>'\n       ' <users>'\n       '   <user x=\"2\">'\n       '     <id>001</id>'\n       '     <name>Chuck</name>'\n       '   </user>'\n       '   <user x=\"7\">'\n       '     <id>009</id>'\n       '     <name>Brent</name>'\n       '   </user>'\n       '   <user x=\"11\">'\n       '     <id>010</id>'\n       '     <name>Norris</name>'\n       '   </user>'\n       '   <user x=\"18\">'\n       '     <id>011</id>'\n       '     <name>Sanchez</name>'\n       '   </user>'\n       ' </users>'\n        '</stuff>') == 0\nassert solution('<stuff>'\n       ' <data>'\n       '   <country name=\"Liechtenstein\">'\n       '     <rank updated=\"yes\">1</rank>'\n       '     <year>2008</year>'\n       '     <gdppc>141100</gdppc>'\n       '   </country>'\n       '   <country name=\"Singapore\">'\n       '     <rank updated=\"no\">4</rank>'\n       '     <year>2011</year>'\n       '     <gdppc>59900</gdppc>'\n       '   </country>'\n       '   <country name=\"Panama\">'\n       '     <rank updated=\"yes\">68</rank>'\n       '     <year>2011</year>'\n       '     <gdppc>13600</gdppc>'\n       '   </country>'\n       ' </data>'\n        '</stuff>') == 1\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n<data>\n    <country name=\"Liechtenstein\">\n        <rank updated=\"yes\">2</rank>\n        <year>2008</year>\n        <gdppc>141100</gdppc>\n        <neighbor name=\"Austria\" direction=\"E\"/>\n    </country>\n    <country name=\"Singapore\">\n        <rank updated=\"yes\">5</rank>\n        <year>2011</year>\n        <gdppc>59900</gdppc>\n        <neighbor name=\"Malaysia\" direction=\"N\"/>\n    </country>\n    <country name=\"Panama\">\n        <rank updated=\"yes\">69</rank>\n        <year>2011</year>\n        <gdppc>13600</gdppc>\n        <neighbor name=\"Costa Rica\" direction=\"W\"/>\n        <neighbor name=\"Colombia\" direction=\"E\"/>\n    </country>\n</data>\n\"\"\") == 3\n=====Solution=====\n\n=====Submission====="
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 2\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 0\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 4\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 3\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 3"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'<feed xml:lang=\"en\">'\n'  <title>HackerRank</title>'\n'  <subtitle lang=\"en\">Programming challenges</subtitle>'\n'  <link rel=\"alternate\" type=\"text/html\" href=\"http://hackerrank.com/\"/>'\n'  <updated>2013-12-25T12:00:00</updated>'\n'</feed>'\n) == 1\n\nassert solution(\n'<feed xml:lang=\"en\">'\n'  <title>HackerRank</title>'\n'  <subtitle lang=\"en\">Programming challenges</subtitle>'\n'  <link rel=\"alternate\" type=\"text/html\" href=\"http://hackerrank.com/\"/>'\n'  <updated>2013-12-25T12:00:00</updated>'\n'  <entry>'\n'    <title>Challenge 1</title>'\n'  </entry>'\n'</feed>'\n) == 2\n\nassert solution(\n'<feed xml:lang=\"en\">'\n'  <title>HackerRank</title>'\n'  <subtitle lang=\"en\">Programming challenges</subtitle>'\n'  <link rel=\"alternate\" type=\"text/html\" href=\"http://hackerrank.com/\"/>'\n'  <updated>2013-12-25T12:00:00</updated>'\n'  <entry>'\n'    <title>Challenge 1</title>'\n'    <entry>'\n'      <title>Challenge 1.1</title>'\n'    </entry>'\n'  </entry>'\n'</feed>'\n) == 3\n\nassert solution(\n'<feed xml:lang=\"en\">'\n'  <title>HackerRank</title>'\n'  <subtitle lang=\"en\">Programming challenges</subtitle>'\n'  <link rel=\"alternate\" type=\"text/html\" href=\"http://hackerrank.com/\"/>'\n'  <updated>2013-12-25T12:00:00</updated>'\n'  <entry>'\n'    <title>Challenge 1</title>'\n'    <entry>'\n'      <title>Challenge 1.1</title>'\n'      <entry>'\n'        <title>Challenge 1.1.1</title>'\n'      </entry>'\n'    </entry>'\n'  </entry>'\n'</feed>'\n) == 4"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 1\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 2\n\n=====Tests=====\nSample Input 0\n\n3\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nSample Output 0\n\n1\nExplanation 0\n\nThe root is a feed tag, which has depth of 0.\n\nSample Input 1\n\n6\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nSample Output 1\n\n2\nExplanation 1\n\nThe maximum nesting level is 2.\n\"\"\"\n\nimport xml.etree.ElementTree as etree\n\nmaxdepth = -1"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('79999999999') == \"NO\"\nassert solution('8900000000') == \"YES\"\nassert solution('88005553535') == \"YES\"\nassert solution('88005553X35') == \"NO\"\nassert solution('99988877766') == \"NO\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('71234567890') == 'YES'\nassert solution('91234567890') == 'YES'\nassert solution('911234567890') == 'YES'\nassert solution('7881234567890') == 'NO'\nassert solution('712345678910') == 'NO'\nprint('Success')\n\n=====Problem Statement=====\nNow, let's learn to match a specific character class in a string.\n\n=====Input Format=====\nThe first line of input contains T, the number of test cases.\nT lines follow. Each line contains a string.\n\n=====Output Format=====\nFor every test case, print YES if it's a valid password and NO if it is not, on a new line.\n\n=====Constraints=====\n1\u2264T\u226410\n\n=====Sample Input=====\n3\nrithm\nrahul\nrahulshetty\n\n=====Sample Output=====\nYES\nYES\nNO\n\n>>> \n=====SOLUTION=====\nimport re\nfor _ in range(int(input())):\n    print(\"YES\" if re.match(r\"^[789][0-9]{9}$\", input()) else \"NO\")\n\n'''"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('73561 73896') == 'YES'\nassert solution('73561 7384') == 'NO'\nassert solution('7738964') == 'NO'\n=====Test Case 1=====\nTest Case #1\n=====Sample Input 1=====\n7\n7775556661 7896733798\n73561 73896\n73561 73897\n9673379855 73561\n9673379890 7738964\n96733798901 73896\n=====Sample Output 1=====\nYES\nNO\nNO\nNO\nNO\nYES\n=====Explanation 1=====\n7775556661 and 73561 - valid mobile numbers\n7896733798 and 9673379855 - invalid mobile numbers\n73896 has an invalid final digit\n96733798901 and 9673379890 - invalid mobile numbers\n73897 has an invalid final digit\n\nSample Input 2\n9\n7775556661 7896733798\n9673379855 73561\n96733798901 73896\n\nSample Output 2\nYES\nNO\nYES\n\nSample Input 3\n8\n7775556661 7896733798\n9673379855 73561\n96733798901 73896\n73561 738964\n96733798901 73896\n\nSample Output 3\nYES\nNO\nNO\nYES\n\n'''\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"(020)703851\") == \"YES\"\nassert solution(\"(020)703851234\") == \"NO\"\nassert solution(\"(020)70385\") == \"NO\"\nassert solution(\"(020)703851234\") == \"NO\"\nassert solution(\"(020)703851234\") == \"NO\"\n\n==Sample Test Case 1==\nInput:\n5\n(020)703851\n9556633\n(123)456789\n(123)456789\n9556633\n\nOutput:\nYES\nNO\nYES\nNO\nNO\n\n==Sample Test Case 2==\nInput:\n5\n(020)703851234\n9556633\n(123)456789\n(123)456789\n9556633\n\nOutput:\nNO\nNO\nYES\nNO\nNO\n\n==Sample Test Case 3==\nInput:\n5\n(020)70385\n9556633\n(123)456789\n(123)456789\n9556633\n\nOutput:\nNO\nNO\nNO\nNO\nNO\n\n\"\"\"\nimport re\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1234) == \"NO\"\nassert solution(2345) == \"YES\"\nassert solution(3412) == \"YES\"\nassert solution(4562) == \"NO\"\n\nassert solution(12) == \"NO\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"(111) 1111-1111\") == \"YES\"\nassert solution(\"(1111) 1111-1111\") == \"NO\"\nassert solution(\"(0110) 1111-1111\") == \"YES\"\nassert solution(\"(0110) 11111-1111\") == \"NO\"\nassert solution(\"(123) 456-7890\") == \"NO\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"732 6789 1234\") == 'NO'\nassert solution(\"732 6789 12\") == 'YES'\nassert solution(\"732 6789 123\") == 'NO'\nassert solution(\"732 6789 1234 5678\") == 'YES'\nassert solution(\"732 6789 123 4567\") == 'NO'\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"95551234\") == \"YES\"\nassert solution(\"95551234\") == \"NO\"\nassert solution(\"95551234\") == \"YES\"\nassert solution(\"95551234\") == \"YES\""
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('(909) 555 - 4444') == 'YES'\nassert solution('(123) 456 - 1234') == 'NO'\nassert solution('(123)456 - 1234') == 'NO'\nassert solution('(123) 456 - 1234') == 'NO'\n\n'''"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7123456789') == 'YES'\nassert solution('71 3456789') == 'YES'\nassert solution('7 (345) 6789') == 'NO'\nassert solution('(123) 456 789') == 'NO'\nassert solution('abc') == 'NO'\n\n=====Test Case: Execution Time=====\nInput    \n\nOutput\n\n======\n\n=====Test Case: Memory Usage=====\nInput    \n\nOutput\n\n=====\nYou are given N lines of text. Your task is to print them in the same order but with new lines inserted after every three characters.\n\nNote: Print the line numbers with one extra line after the last line of text.\n\nInput Format\n\nThe first line contains an integer, N. N lines follow.\n\nConstraints\n\n1<=N<=30\n1<=len(line)<=1000\n\nOutput Format\n\nPrint the lines of text in order with newlines inserted after every three characters.\n\nSample Input\n\n6\nThis is a single line.\n\nSample Output\n\n1\nT i s   a s   s e n t   l i n e \n2\nH e i \ns s   s i  \ne   n   g \nl   e   \nn   e   t\n3\nT   h i \n is a single line.\nSample Output\n\n1\nT i s a s e n t l i n e \n2\nH e i \ns s   s i  \ne   n   g \nl   e   \nn   e   t\n3\nT h i \n is a single line.\n\nSolution:\nimport re\nn = int(input())\n\nfor _ in range(n):\n    x = input()\n    if bool(re.match('[789][0-9]{9}',x)):\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 3 6 7\\n3\\n1 2 4 11') == '2 4 6 7 11'\n=====Test Case=====\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n2 4 5 9\n4\n2 4 11 12''') == '''5\n9\n11\n12'''\nassert solution('''5\n2 4 11 12 14\n3\n2 4 12 13''') == '''5\n12\n14\n13'''\n\n>>>>>>> d51b12f3b39b6cb8d04f0f62f7b0d2e3e59ab4d\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 3 6 7\\n3\\n1 2 3 4') == '2 4 6'\nassert solution('5\\n2 4 6 8\\n4\\n2 3 6 7 1') == '3 6 7 1'\nassert solution('2\\n1\\n5\\n3\\n4') == '5'\n\"\"\"\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 4 6 8\\n4\\n2 3 6 8\") == \"2 8 6\"\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 4 6 8\\n4\\n2 4 11 12') == '6\\n8\\n11\\n12'\n=====END OF OUTPUT=====\nYou are given a set  and  other sets.\nYour job is to find whether set  is a strict superset of each of the  sets.\n\nPrint True, if  is a strict superset of each of the  sets. Otherwise, print False.\n\nA strict superset has at least one element that does not exist in its subset.\n\nExample\nSet is a strict superset of set.\nSet is not a strict superset of set.\nSet is not a strict superset of set.\n\nInput Format\n\nThe first line contains the space separated elements of set.\nThe second line contains integer, the number of other sets.\nThe next  lines contains the space separated elements of the other sets.\n\nConstraints\n\nOutput Format\n\nPrint True if set  is a strict superset of all other  sets. Otherwise, print False.\n\nSample Input 0\n\n1 2 3 4 5 6 7 8 9 10 11 12 23 45 84 78\n2\n1 2 3 4 5\n100 11 12\nSample Output 0\n\nFalse\nExplanation 0\n\nSet  is the strict superset of the set but not of the set because  is not in set.\nHence, the output is False."
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 4 6 8 10\\n4\\n2 3 6 8 9') == '6\\n8\\n9'\nprint('Passed')\n=====END OF NOTE=====\n\"\"\"\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4 3 2\\n4 2\") == '5\\n6\\n7'\nassert solution('5 4 3 2\\n4 2\\n7 5') == '5\\n6\\n7\\n8'\n=====Test Case=====\nInput\n5\n2 4 5 9\n4\n2 4 11 12\nOutput\n5\n9\n6\n8\n7\n\nInput\n6\n2 4 6 8 10\n4\n2 4 11 12\nOutput\n6\n8\n10\n11\n12\n\nInput\n5\n2 4 6 8\n4\n2 4 11 12\nOutput\n5\n6\n7\n8\n\nSolution\n\nimport os\nimport sys"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == \"8 9 10 1 2 3 11 12\"\nassert solution(\"1 2 3 4 5 6 7 8 9 11 12\") == \"8 9 10 1 2 3 11 12\"\nassert solution(\"1 2 3 4 5 6 7 8 9 11 13\") == \"8 9 10 1 2 3 11 13\"\nassert solution(\"1 2 3 4 5 6 7 8 9 11 12 13\") == \"8 9 10 1 2 3 11 12 13\"\nassert solution(\"1 2 3 4 5 6 7 8 9 11 12\") == \"8 9 10 1 2 3 11 12\"\n\n=====Test Case 1=====\ntest.describe(\"Basic Tests\")\ntest."
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n2 4 5 9\n4\n2 4 11 12''') == '''5\n9\n11\n12'''\nassert solution('''4\n2 4 11 12\n4\n2 4 5 9''') == '''5\n9\n11\n12'''\n\n=====Sample Test Cases=====\nInput:\n4\n2 4 5 9\n4\n2 4 11 12\n\nOutput:\n5\n9\n11\n12\n\nInput:\n4\n2 4 5 9\n4\n2 4 11 12\n\nOutput:\n5\n9\n11\n12\n\nInput:\n1\n1\n4\n1\n\nOutput:\n4\n\n'''\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n12 34\") == \"12 34 34\"\n\nassert solution(\"4\\n1 2 3 4\\n5\\n12 34\") == \"34 34\"\n\nassert solution(\"4\\n1 2 3 4\\n5\\n12\\n\") == \"1 2 3 4 5 12\"\n\nassert solution(\"4\\n1 2 3 4\\n4\\n12\\n\") == \"1 2 3\"\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1, 1, 1, 1\") == \"0.50\"\nassert solution(\"1, 1, 1, 1, 1\") == \"0.50\"\nassert solution(\"1, 1, 1, 2, 2\") == \"0.67\"\nassert solution(\"1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\") == \"0.67\"\nassert solution(\"1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\") == \"0.67\"\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\nID\\n100\\nName\\n50\\nClass\\n50\\nMarks\\n90\\n102\\n300\\n45\\n55\\n\") == \"75.00\"\n=====================\n\"\"\"\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ID,MARKS,CLASS,NAME\\n1,90,2,Jone\\n2,91,2,Mike\\n3,92,2,Peter\\n4,93,2,Mary\\n5,94,2,Karen\\n6,95,2,Kerry\\n7,96,2,Pan\\n8,97,2,Tina\\n9,98,2,Peter\\n10,99,2,Kerry\\n11,100,2,Tina\\n12,101,2,Mike\\n13,102,2,Karen\\n14,103,2,Mary\\n15,104,2,Pan\\n16,105,2,Kerry\\n17,106,2,Jone\\n18,107,2,Tina\\n19,108,2,Peter\\n20,109,2,Kerry\\n21,110,2,Tina\\n22,111,2,Mike\\n23,112,2,Karen\\n24,113,2,Mary\\n\") == \"78.00\"\nassert solution(\"MARKS,CLASS,NAME\\n90,2,Jone\\n91,2,Mike\\n92,2,Peter\\n93,2,Mary\\n94,2,Karen\\n95,2,Kerry\\n96,2,Pan\\n97,2,Tina\\n98,2,Peter\\n99,2,Kerry\\n100,2,Tina\\n101,2,Mike\\n102,2,Karen\\n103,2,Mary\\n104,2,Pan\\n105,2,Kerry\\n106,2,Jone\\n107,2,Tina\\n108,2,Peter\\n109,2,Kerry\\n110,2,Tina\\n111,2,Mike\\n112,2,Karen\\n113,2,Mary\\n\") == \"75.00\"\nassert solution(\"ID,MARKS,CLASS,NAME\\n1,90,2,Jone\\n2,91,2,Mike\\n3,92,2,Peter\\n4,93,2,Mary\\n5,94,2,Karen\\n6,95,2,Kerry\\n7,96,2,Pan\\n8,97,2,Tina\\n9,98,2,Peter\\n10,99,2,Kerry\\n11,100,2,Tina\\n12,101,2,Mike\\n13,102,2,Karen\\n14,103,2,Mary\\n15,104,2,Pan\\n16,105,2,Kerry\\n17,106,2,Jone\\n18,107,2,Tina\\n19,108,2,Peter\\n20,109,2,Kerry\\n21,110,2,Tina\\n22,111,2,Mike\\n23,112,2,Karen\\n24,113,2,Mary\\n\") == \"71.50\"\nassert solution(\"ID,MARKS,CLASS,NAME\\n1,90,2,Jone\\n2,91,2,Mike\\n3,92,2,Peter\\n4,93,2,Mary\\n5,94,2,Karen\\n6,95,2,Kerry\\n7,96,2,Pan\\n8,97,2,Tina\\n9,98,2,Peter\\n10,99,2,Kerry\\n11,100,2,Tina\\n12,101,2,Mike\\n13,102,2,Karen\\n14,103,2,Mary\\n15,104,2,Pan\\n16,105,2,Kerry\\n17,106,2,Jone\\n18,107,2,Tina\\n19,108,2,Peter\\n20,109,2,Kerry\\n21,110,2,Tina\\n22,111,2,Mike\\n23,112,2,Karen\\n24,113,2,Mary\\n\") == \"67.50\"\nassert solution(\"ID,MARKS,CLASS,NAME\\n1,90,2,Jone\\n2,91,2,Mike\\n3,92,2,Peter\\n4,93,2,Mary\\n5,94,2,Karen\\n6,95,2,Kerry\\n7,96,2,Pan\\n8,97,2,Tina\\n9,98,2,Peter\\n10,99,2,Kerry\\n11,100,2,Tina\\n12,101,2,Mike\\n13,102,2,Karen\\n14,103,2,Mary\\n15,104,2,Pan\\n16,105,2,Kerry\\n17,106,2,Jone\\n18,107,2,Tina\\n19,108,2,Peter\\n20,109,2,Kerry\\n21,110,2,Tina\\n22,111,2,Mike\\n23,112,2,Karen\\n24,113,2,Mary\\n\") == \"58.50\"\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\nID\\nMARKS\\nCLASS\\nNAME\\n1\\n1\\n2\\n2\\n3\\n3\\n\") == \"1.67\"\nassert solution(\"2\\nMARKS\\nCLASS\\nNAME\\n1\\n1\\n2\\n2\\n3\\n3\\n\") == \"2.00\"\n\"\"\"\n\nfrom collections import namedtuple\nimport re"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n\n=====Test Case:=====\nYour code should pass the following test cases.\nNote that it may also be run against hidden test cases not shown here.\n\n=====Sample Input=====\n6\nID         MARKS      NAME       CLASS     \n1          97         Raymond    7         \n2          50         Steven     4         \n3          91         Adrian     9         \n4          72         Stewart    5         \n5          80         Peter      6   \n\n=====Sample Output=====\n78.00\n\n=====Explanation=====\nAverage = ( (97 + 50 + 91 + 72 + 80) + (4 + 5 + 6) ) / (6 + 5 + 6 + 4 + 3)\n= 81 / 8 = 9.25\nThere are 6 students in this class whose average score is more than 80.0.\n\n\n==================\nDefine the function solution(n, m, arr) which returns the list of all students who have scored more than the average of the list.\n\n>>> solution(6, 6, [1, 97, 50, 91, 72, 80, 4, 5, 6])\n[1, 97, 50, 91, 72, 80, 4, 5, 6]\n>>> solution(7, 5, [1, 97, 50, 91, 72, 80, 4, 5, 6])\n[1, 97, 50, 91, 72, 80, 4, 5, 6]\n>>> solution(6, 4, [1, 97, 50, 91, 72, 80])\n[1, 97, 50, 91, 72, 80]\n>>> solution(5, 2, [1, 97, 50, 91, 72])\n[1, 97, 50, 91, 72]\n>>> solution(7, 1, [1, 97, 50, 91, 72, 80, 4, 5, 6])\n[1, 97, 50, 91, 72, 80, 4, 5, 6]\n\n==================\nDefine the function solution(n, m, arr) which returns the list of all students who have scored more than the average of the list.\n\n>>> solution(6, 6, [1, 97, 50, 91, 72, 80, 4, 5, 6])\n[1, 97, 50, 91, 72, 80, 4, 5, 6]\n>>> solution(7, 5, [1, 97, 50, 91, 72, 80, 4, 5, 6])\n[1, 97, 50, 91, 72, 80, 4, 5, 6]\n>>> solution(6, 4, [1, 97, 50, 91, 72, 80])\n[1, 97, 50, 91, 72, 80]\n>>> solution(5, 2, [1, 97, 50, 91, 72])\n[1, 97, 50, 91, 72]\n>>> solution(7, 1, [1, 97, 50, 91, 72, 80, 4, 5, 6])\n[1, 97, 50, 91, 72, 80, 4, 5, 6]\n\n'''\n\nfrom collections import namedtuple\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == \"78.00\"\nassert solution(\"1\\nmark\\nclass\\nname\\n\") == \"67.50\"\n\"\"\"\n\nfrom collections import namedtuple"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\nID         MARKS      NAME       CLASS     \\n1          97         Raymond    7         \\n2          50         Steven     4         \\n3          91         Adrian     9         \\n4          72         Stewart    5         \\n5          80         Peter      6   \"\n    == '78.00')\nassert solution(\"3\\nMARKS      CLASS      NAME       ID        \\n92         2          Calum      1         \\n82         5          Scott      2         \\n94         2          Jason      3         \"\n    == '81.00')\n\nassert solution(\"5\\nMARKS      CLASS      NAME       ID        \\n92         2          Calum      1         \\n82         5          Scott      2         \\n94         2          Jason      3         \"\n    == '81.00')\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == \"75.00\"\nassert solution(\"2\\nMARKS\\nCLASS\\nNAME\\nID\\n\") == \"75.00\"\nassert solution(\"3\\nNAME\\nMARKS\\nCLASS\\nID\\n\") == \"75.00\"\nassert solution(\"4\\nCLASS\\nNAME\\nMARKS\\nID\\n\") == \"75.00\"\nassert solution(\"5\\nID\\nCLASS\\nNAME\\nMARKS\\n\") == \"75.00\"\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'''5\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n5          80         Peter      6'''\n) == '78.00'\n\nassert solution(\n'''5\nMARKS      CLASS      NAME       ID\n92         2          Calum      1\n82         5          Scott      2\n94         2          Jason      3\n55         8          Glenn      4\n82         2          Fergus     5'''\n) == '81.00'\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\nID\\nMARKS\\nCLASS\\nNAME\\n') == '78.00'\nassert solution('2\\nMARKS\\nCLASS\\nNAME\\nID\\n') == '67.50'\n\"\"\""
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == 'Weird'\nassert solution('4') == 'Not Weird'\nassert solution('6') == 'Weird'\nassert solution('8') == 'Weird'\nassert solution('10') == 'Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2) == 'Not Weird'\nassert solution(15) == 'Weird'\nassert solution(20) == 'Weird'\nassert solution(23) == 'Weird'\nassert solution(41) == 'Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(20) == 'Not Weird'\nassert solution(2) == 'Weird'\n\"\"\""
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"Not Weird\"\nassert solution(\"3\") == \"Weird\"\nassert solution(\"4\") == \"Weird\"\nassert solution(\"20\") == \"Weird\"\nassert solution(\"21\") == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"Not Weird\"\nassert solution(\"3\") == \"Weird\"\nassert solution(\"4\") == \"Not Weird\"\nassert solution(\"20\") == \"Weird\"\nassert solution(\"24\") == \"Not Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3) == 'Weird'\nassert solution(24) == 'Not Weird'\nassert solution(20) == 'Weird'\nassert solution(5) == 'Not Weird'\n\nprint('Test Successful')\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(1) == 'Weird'\nassert solution(2) == 'Not Weird'\nassert solution(3) == 'Weird'\nassert solution(4) == 'Not Weird'\nassert solution(5) == 'Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == \"Weird\"\nassert solution('4') == \"Not Weird\"\nassert solution('24') == \"Weird\"\nassert solution('25') == \"Not Weird\"\nassert solution('35') == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(6) == \"Weird\"\nassert solution(20) == \"Weird\"\nassert solution(2) == \"Not Weird\"\nassert solution(3) == \"Weird\"\nassert solution(4) == \"Not Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"Weird\"\nassert solution(\"10\") == \"Not Weird\"\nassert solution(\"22\") == \"Not Weird\"\nassert solution(\"21\") == \"Weird\"\nassert solution(\"19\") == \"Weird\"\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 10\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 10\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 10\n\"\"\") == 10\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 10\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 10"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('<feed xml:lang = \"en\">'\n            '<title>HackerRank</title>'\n            '<subtitle lang = \"en\">Programming challenges</subtitle>'\n            '<link rel = \"alternate\" type = \"text/html\" href = \"http://hackerrank.com/\"/>'\n            '</feed>') == 10\nassert solution('<body>'\n            '<feed xml:lang = \"en\">'\n            '<title>HackerRank</title>'\n            '<subtitle lang = \"en\">Programming challenges</subtitle>'\n            '<link rel = \"alternate\" type = \"text/html\" href = \"http://hackerrank.com/\"/>'\n            '</feed>') == 0"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>''') == 25\n=====\nWrite a function to count the number of occurrences of a substring in a string.\n\nThe function will take two string parameters and return an integer.\n\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\nYou are given two strings s and x. Return the number of times that s occurs in s[start:end] inclusive.\n\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\nExample:\n\ns = \"abracadabra\"\nx = \"abra\"\n\nFunction call:\nsolution(s, x)\n\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\nsolution(s, x)\n\n<<<<<<< HEAD\n    Explanation\n\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n    If s = \"Hiabcdefghijklmnopqrstuvwxyz\", x = \"abc\"\n\nThe substring is \"abc\" which occurs in s at index 2, 3, 6, 7, 11, 12, 13, and 17.\n\nSo, return a list [2, 3, 6, 7, 11, 12, 13, 17].\n\n<<<<<<< HEAD\n    Note:\n=======\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n    The occurrences must be in the same order as in the original string.\n\n<<<<<<< HEAD\n    Constraints:\n    1 <= |s|, |x| <= 2000\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632f7ba40081fd47f4bd4f1033e6577977\n=======\n    Constraints:\n    1 <= |s|, |x| <= 2 * 10^5\n>>>>>>> bb4dee632"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n\"\"\") == 5\nassert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n    </feed>\n\"\"\") == 2\nassert solution(\"\"\"\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n    </feed>\n\"\"\") == 3\n\n=====Test 2=====\nYour task is to print an XML document using the given tag and attribute pairs.\n\nThe input is read from the console. The input consists of N lines. The N lines contain one of the following commands:\n\nstart: It starts an XML element named tag with a given set of attributes. For example, start(\u201cstudent\u201d, [\u201cid\u201d = \u201c34234\u201d, \u201cname\u201d = \u201cBob\u201d]) will generate the following XML document:\n\n<student id = \u201c34234\u201d name = \u201cBob\u201d>\n\nempty: It inserts an empty element with the given tag and attributes. For example, empty(\u201cstudent\u201d, [\u201cid\u201d = \u201c34234\u201d, \u201cname\u201d = \u201cBob\u201d]) will generate the following XML document:\n\n<student id = \u201c34234\u201d name = \u201cBob\u201d/>\n\nend: It ends the current XML element.\nFor example, end() will generate the following XML document:\n\n<student id = \u201c34234\u201d name = \u201cBob\u201d>\n\nThe output is generated from a single call to the function solution().\n=====Sample Input=====\n3\nstart\nstart\nstart\nempty\nstart\nempty\nend\nend\nend\nend\n\n=====Sample Output=====\n<student id = \u201c34234\u201d name = \u201cBob\u201d>\n<student id = \u201c34234\u201d name = \u201cBob\u201d>\n<student id = \u201c34234\u201d name = \u201cBob\u201d>\n<student id = \u201c34234\u201d name = \u201cBob\u201d>\n<student id = \u201c34234\u201d name = \u201cBob\u201d/>\n<student id = \u201c34234\u201d name = \u201cBob\u201d/>\n<student id = \u201c34234\u201d name = \u201cBob\u201d/>\n\n=====Test 3=====\nSample input:\n3\nstart\nstart\nstart\nempty\nstart\nempty\nend\nend\nend\nend\n\nSample output:\n<a>\n    <b>\n        <c>\n            <d>\n                <e>\n                    <f/>\n                </e>\n            </d>\n        </c>\n    </b>\n</a>\n\nSample input:\n2\nstart\nstart\nstart\nempty\nstart\nempty\nend\nend\nend\nend\n\nSample output:\n<a>\n    <b>\n        <c/>\n    </b>\n</a>\n<a>\n    <b>\n        <c>\n            <d/>\n        </c>\n    </b>\n</a>\n\n==========\"\"\""
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('\\n<doc>\\n<item/>\\n<item des=\" present \" />\\n</doc>') == 6\nassert solution('\\n<doc>\\n<item/>\\n<item/>\\n</doc>') == 2\nassert solution('\\n<doc>\\n<item a=\" present \" />\\n<item/>\\n</doc>') == 8\nassert solution('\\n<doc>\\n<item a=\" present \" />\\n<item a=\" present \" />\\n<item/>\\n</doc>') == 10\nassert solution('\\n<doc>\\n<item a=\" present \" />\\n<item a=\" present \" />\\n<item a=\" present \" />\\n</doc>') == 12\n\n=====\nFor any element, the score is equal to the number of attributes it has.\n\nFor example, the score of the following XML document is 4:\n\n<doc>\n<item color=\"blue\"/>\n<item color=\"red\">\n<subitem color=\"green\">\n<subitem color=\"black\"/>\n</subitem>\n</item>\n</doc>\n\n=====Sample Input=====\n4\n<doc>\n<item color=\"blue\"/>\n</doc>\n<doc>\n<item color=\"red\">\n<subitem color=\"green\">\n<subitem color=\"black\"/>\n</subitem>\n</item>\n</doc>\n<doc>\n<item color=\"red\">\n</item>\n</doc>\n<doc>\n<item/>\n</doc>\n\n=====Sample Output=====\n4\n4\n2\n0\n\"\"\"\n\nimport sys\nimport re\nimport xml.etree.ElementTree as etree"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('<data>'\n'<student><name>Ankit</name><age>19</age></student>'\n'<student><name>Akshat</name><age>17</age></student>'\n'</data>') == 35\n\nassert solution('<data>'\n'<student><name>Ankit</name><age>19</age></student>'\n'<student><name>Akshat</name><age>17</age></student>'\n'<student><name>Akash</name><age>18</age></student>'\n'</data>') == 47\n\nassert solution('<data>'\n'<student><name>Ankit</name><age>19</age></student>'\n'<student><name>Akshat</name><age>17</age></student>'\n'<student><name>Akash</name><age>18</age></student>'\n'<student><name>Harsh</name><age>17</age></student>'\n'</data>') == 47\n\n\"\"\"\n\n\nimport xml.etree.ElementTree as etree\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30\n''') == 30\n\n=====Test Case=====\n\nSample Input 1\n4\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nSample Output 1\n30\nSample Input 2\n5\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nSample Output 2\n30\nExplanation\n\nSample Case 1: The feed element has one attribute, so the output is 1.\nSample Case 2: The feed element has no attributes so the output is 0.\nSample Case 3: The feed element has three attributes so the output is 3.\nSample Case 4: The feed element has two attributes so the output is 2.\n'''\n\n'''\nUse a single traversal of the XML document and keep track of the number of attributes in a dictionary.\n'''\n\nimport xml.etree.ElementTree as etree\n\nmaxdepth = 0\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_data) == 25\n=====Test Case=====\nInput:\n1\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\nOutput:\n5\n\nExplanation:\nThe feed and subtitle tag have one attribute each - lang.\nThe title and updated tags have no attributes.\nThe link tag has three attributes - rel, type and href.\nInput Format\n\nThe first line contains the integer, the number of lines in the XML document.\nThe next  lines follow containing the XML document.\n\nOutput Format\n\nOutput a single line containing the integer score of the given XML document.\n\nSample Input\n\n9\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\nSample Output\n\n5\n\nExplanation\nThe feed and subtitle tag have one attribute each - lang.\nThe title and updated tags have no attributes.\nThe link tag has three attributes - rel, type and href.\n\"\"\"\n\nfrom xml.dom import minidom\nimport xml.etree.ElementTree as ET"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n    <feed xml:lang='en'>\n      <title>HackerRank</title>\n      <subtitle lang='en'>Programming challenges</subtitle>\n      <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n      <updated>2013-12-25T12:00:00</updated>\n    </feed>\n    \"\"\"\n) == 10\n=====Test Case=====\nInput\n-----\n3\n<feed xml:lang='en'><title>HackerRank</title><subtitle lang='en'>Programming challenges</subtitle><link rel='alternate' type='text/html' href='http://hackerrank.com/'/><updated>2013-12-25T12:00:00</updated></feed>\nInput\n-----\n2\n<feed xml:lang='en'><title>HackerRank</title><subtitle lang='en'>Programming challenges</subtitle><link rel='alternate' type='text/html' href='http://hackerrank.com/'/><updated>2013-12-25T12:00:00</updated></feed>\nInput\n-----\n2\n<feed xml:lang='en'><title>HackerRank</title><subtitle lang='en'>Programming challenges</subtitle><link rel='alternate' type='text/html' href='http://hackerrank.com/'/><updated>2013-12-25T12:00:00</updated></feed>\n\n\"\"\"\n) == 10\n\n=====Test Case=====\nInput\n-----\n5\n<feed xml:lang='en'><title>HackerRank</title><subtitle lang='en'>Programming challenges</subtitle><link rel='alternate' type='text/html' href='http://hackerrank.com/'/><updated>2013-12-25T12:00:00</updated></feed>\nInput\n-----\n5\n<feed xml:lang='en'><title>HackerRank</title><subtitle lang='en'>Programming challenges</subtitle><link rel='alternate' type='text/html' href='http://hackerrank.com/'/><updated>2013-12-25T12:00:00</updated></feed>\nInput\n-----\n5\n<feed xml:lang='en'><title>HackerRank</title><subtitle lang='en'>Programming challenges</subtitle><link rel='alternate' type='text/html' href='http://hackerrank.com/'/><updated>2013-12-25T12:00:00</updated></feed>\n\n\"\"\"\n) == 15\n=====Test Case=====\nInput\n-----\n2\n<feed xml:lang='en'><title>HackerRank</title><subtitle lang='en'>Programming challenges</subtitle><link rel='alternate' type='text/html' href='http://hackerrank.com/'/><updated>2013-12-25T12:00:00</updated></feed>\nInput\n-----\n2\n<feed xml:lang='en'><title>HackerRank</title><subtitle lang='en'>Programming challenges</subtitle><link rel='alternate' type='text/html' href='http://hackerrank.com/'/><updated>2013-12-25T12:00:00</updated></feed>\n\n\"\"\"\n) == 5\n\n=====Test Case=====\nInput\n-----\n1\n<feed xml:lang='en'><title>HackerRank</title><subtitle lang='en'>Programming challenges</subtitle><link rel='alternate' type='text/html' href='http://hackerrank.com/'/><updated>2013-12-25T12:00:00</updated></feed>\nInput\n-----\n1\n<feed xml:lang='en'><title>HackerRank</title><subtitle lang='en'>Programming challenges</subtitle><link rel='alternate' type='text/html' href='http://hackerrank.com/'/><updated>2013-12-25T12:00:00</updated></feed>\n\n\"\"\"\n) == 3\n\n=====Test Case=====\nInput\n-----\n1\n<feed xml:lang='en'><title>HackerRank</title><subtitle lang='en'>Programming challenges</subtitle><link rel='alternate' type='text/html' href='http://hackerrank.com/'/><updated>2013-12-25T12:00:00</updated></feed>\nInput\n-----\n1\n<feed xml:lang='en'><title>HackerRank</title><subtitle lang='en'>Programming challenges</subtitle><link rel='alternate' type='text/html' href='http://hackerrank.com/'/><updated>2013-12-25T12:00:00</updated></feed>\n\n\"\"\"\n) == 2\n\n\"\"\"\nYou are given a valid XML document, and you have to print its score. The score is calculated by the sum of the score of each element. For any element, the score is equal to the number of attributes it has.\n\nInput Format\n\nThe first line contains N, the number of lines in the XML document.\nThe next N lines follow containing the XML document.\n\nOutput Format\n\nOutput a single line, the integer score of the given XML document.\n\nSample Input\n\n6\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\nSample Output\n\n5\nExplanation\n\nThe feed tag has four attributes, and so the score is 4.\nThe title and subtitle tags each have one attribute, and so the score is 2.\n\"\"\"\nfrom xml.etree import ElementTree as etree\nimport sys"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '90'\n'''\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3 4') == '60.00', 'Test 1: check the angle between points A,B,C and B,C,D'\nassert solution('1 3 -2 2') == '180.00', 'Test 2: check the angle between points A,B,C and B,C,D'\n\n=====Sample Test Cases=====\nInput\n1 2 3 4\nOutput\n60.00\n\nInput\n1 3 -2 2\nOutput\n180.00\n\nInput\n-1 -1 1 1\nOutput\n90.00\n\nInput\n1 2 0 1\nOutput\n90.00\n\n=====Test Suite=====\n==Unit Test==\nTOTAL SCORE 10/10\n=====Runtime=====\nTime limit exceeds on test 8\n'''\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.0 3.0 2.0 4.0\") == 35.0\nassert solution(\"1.0 1.0 2.0 3.0\") == 90.0\nassert solution(\"1.0 1.0 1.0 1.0\") == 180.0\nassert solution(\"0.0 1.0 0.0 0.0\") == 0.0\nassert solution(\"0.0 0.0 0.0 0.0\") == 0.0\n\n=====Solution=====\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '60.00'\nassert solution('1 1 1 4') == '90.00'\n\n===========================\n\n\nimport re"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 1 1') == '60.00'\nassert solution('1 1 -1 1') == '30.00'\nassert solution('-1 1 -1 1') == '30.00'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '135.00'\nassert solution('1 1 1 1') == '360.00'\nassert solution('1 2 3 4 4 6 7 8 9 9 10 11 12 13 14 15 16 17 18 19') == '260.00'\nassert solution('5 4 3 2') == '150.00'\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4 5') == '60.00'\nassert solution('1 1 1 1') == '0.00'\nassert solution('-1 -4 -9 -6') == '90.00'\nassert solution('0 0 0 0') == '180.00'\nprint('Passed')\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 -1 1 -1') == '45.00'\nassert solution('0 0 -1 0') == '90.00'\nassert solution('1 1 0 -1') == '45.00'\n\n=====Test Case 1=====\nInput\n\n0 0 -1 0\n\nOutput\n\n45.00\n\n=====Test Case 2=====\nInput\n\n1 1 1 1\n\nOutput\n\n90.00\n\n=====Test Case 3=====\nInput\n\n1 1 -1 1\n\nOutput\n\n45.00\n\"\"\"\n\nfrom __future__ import division\nimport math\nimport ast"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 5 6') == '60.00'\nassert solution('1 1 1 1') == '60.00'\n\"\"\"\n\nfrom math import sqrt, acos, degrees\n\na, b, c, d = tuple(map(float, input().split()))\nx = (a - b) * (c - d)\ny = (c - d) * (b - a)\nz = (a - b) * (d - c)\nprint(round(degrees(acos(x / sqrt(z * x))), 2))\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"1.0 2.0 3.0\"\n) == \"45.0\"\nassert solution(\n    \"2.0 4.0 6.0\"\n) == \"104.5\"\nassert solution(\n    \"1.0 4.0 8.0\"\n) == \"60.0\"\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\nhello\nbee''') == 5\nassert solution('''5\napples\noranges\npears\neggs\ncheese\n''') == 10\nassert solution('''10\ncodewars\nbears\njava\npython\nruby''') == 10\nassert solution('''8\npython\nruby''') == 8\nassert solution('''8\npython\nruby\npandas\njulia\njavascript\nruby''') == 6\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\nhello world\") == 5\nassert solution(\"2\\ngalaxy\") == 1\nassert solution(\"3\\nwhy\") == 1\nassert solution(\"3\\nabc\") == 2\nassert solution(\"3\\nwill\") == 1\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aa bb cc dd ee\") == 6\nassert solution(\"aeiou\") == 0\nassert solution(\"aeiouy\") == 5\nassert solution(\"y x y y y\") == 5\nassert solution(\"y x y x y y y y\") == 2\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 qwerty') == '0'\nassert solution('10 qwerty') == '2'\nassert solution('4 qwerty') == '2'\nassert solution('8 qwerty') == '2'\nassert solution('10 qwerty') == '2'\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nhello\\nbee\\nsea\\neat\\ngull') == 6\n\"\"\"\n\nvowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aretheyhere\") == \"2\"\nassert solution(\"hello\") == \"1\"\nassert solution(\"twelve\") == \"2\"\nassert solution(\"bee\") == \"1\"\nassert solution(\"qwe\") == \"0\"\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"hello how are you\") == 2\nassert solution(\"hello how are you?\") == 2\nassert solution(\"hello how are you!\") == 2\nassert solution(\"hello how are you?\") == 2\nassert solution(\"hello how are you\") == 2\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\nhello\\nbee\\nsea') == 3\n\"\"\"\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aeiou') == 1\nassert solution('aeiouy') == 2\nassert solution('oiuea') == 1\n\"\"\""
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aei') == '2'\nassert solution('yay') == '1'\nassert solution('baby') == '2'\nassert solution('yummy') == '5'\n\n=====Test Case 1=====\nInput\n5\nyummy\nbaby\naei\nyay\nzzz\n\nOutput\n5\n2\n2\n2\n1\n\nExplanation\nTest Case 1: The word 'yummy' has an even number of vowels, so its score is 2.\nThe word 'baby' has an even number of vowels, so its score is 2.\nThe word 'aei' has an even number of vowels, so its score is 2.\nThe word 'yay' has an odd number of vowels, so its score is 1.\nThe word 'zzz' has an even number of vowels, so its score is 2.\nThe scores for all the words are 2, 2, 2, 1 and 2 respectively, so the total score is 5.\n\n=====Test Case 2=====\nInput\n5\nccvcvvc\n\nOutput\n6\n\n=====Test Case 3=====\nInput\n6\na a a a a a\n\nOutput\n6\n\n=====Test Case 4=====\nInput\n7\nhfd hfdh hffh\n\nOutput\n1\n\n=====Test Case 5=====\nInput\n7\nhfd hfdh hffh\n\nOutput\n0\n\"\"\"\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('XXL') == True\nassert solution('IV') == True\nassert solution('IXL') == False\nassert solution('XL') == True\nassert solution('XLIV') == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"X\") == False\nassert solution(\"XL\") == True\nassert solution(\"CDXCIX\") == False\nassert solution(\"IV\") == True\nassert solution(\"IX\") == False\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('X') == False\nassert solution('XL') == True\nassert solution('CDXC') == True\nassert solution('MMCDLXXVI') == True\nassert solution('MMCDLXXVIII') == False\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('X') == True\nassert solution('CDXXIV') == False\nassert solution('XLIX') == True\nassert solution('IC') == False\nassert solution('DCMLXXIX') == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('MCMXCIV') == True\nassert solution('MMXIX') == False"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('XLIX')\nassert not solution('MMMCMLXXXIX')\nassert not solution('CDXCIX')"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('III') == True, 'Wrong solution for III'\nassert solution('XXI') == False, 'Wrong solution for XXI'\nassert solution('CDXCIX') == True, 'Wrong solution for CDXCIX'\nassert solution('MMMCMXCIX') == True, 'Wrong solution for MMMCMXCIX'\nassert solution('II') == False, 'Wrong solution for II'\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('X') == False\nassert solution('XL') == True\nassert solution('CDXXI') == True\nassert solution('MMMCMXCIX') == True\nassert solution('CDXC') == False\n\n========\n\nWrite a program that computes the net amount of a bank account based a transaction log from console input. The transaction log format is shown as following:\nD 100\nW 200\n\nD means deposit while W means withdrawal.\nSuppose the following input is supplied to the program:\nD 300\nD 300\nW 200\nD 100\nThen, the output should be:\n500\n\nHints:\nIn case of input data being supplied to the question, it should be assumed to be a console input.\n\n=====Solution=====\nimport re\ns = input()\npattern = r'[D]|[W]|[d]|[w]'\ntotal = 0\nfor i in s:\n    if re.match(pattern, i):\n        total += eval(i)\nprint(total)\n\n>>>>>>> bb4dee632f7ba40081fd47f4bd4d55dbe72d55b7\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"XXI\") == True, \"Wrong solution for XXI\"\nassert solution(\"IV\") == True, \"Wrong solution for IV\"\nassert solution(\"IX\") == True, \"Wrong solution for IX\"\nassert solution(\"MCMXCIV\") == True, \"Wrong solution for MCMXCIV\"\nassert solution(\"LVIII\") == True, \"Wrong solution for LVIII\"\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"XX\") == False\nassert solution(\"MMMCMLXXXVI\") == True\nassert solution(\"MMMCMLXXXVIII\") == False\nassert solution(\"MMMCMLXXXIX\") == True\nassert solution(\"MMMCMLXXXX\") == False\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n07895462130\n919875641230\n9195969878''') == '''07895462130\n9195969878\n919875641230'''\nSolution.solution('''3\n07895462130\n919875641230\n9195969878''')\n\n=====Test Case 1=====\nsolution('''2\n9195969878\n919875641230''')\n\n=====Test Case 2=====\nsolution('''5\n919875641230\n9195969878\n9195969878\n919875641230\n9195969878''')\n\n=====Test Case 3=====\nsolution('''5\n9195969878\n919875641230\n9195969878\n919875641230\n9195969878''')\n\n=====Test Case 4=====\nsolution('''5\n9195969878\n919875641230\n9195969878\n919875641230\n9195969878''')\n\n=====Test Case 5=====\nsolution('''5\n9195969878\n919875641230\n9195969878\n919875641230\n9195969878''')\n\n=====Test Case 6=====\nsolution('''3\n07895462130\n919875641230\n9195969878''')\n\n=====Test Case 7=====\nsolution('''4\n9195969878\n919875641230\n9195969878\n919875641230''')\n\n=====Test Case 8=====\nsolution('''4\n9195969878\n919875641230\n9195969878\n919875641230''')\n\n=====Test Case 9=====\nsolution('''5\n9195969878\n919875641230\n9195969878\n919875641230\n9195969878''')\n\n=====Test Case 10=====\nsolution('''5\n9195969878\n919875641230\n9195969878\n919875641230\n9195969878''')\n\n>>>>>>> 7f2ebb839d32ea8fcbd04f7d7e04f08deac5570 (solution)\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n07895462130\n919875641230\n9195969878\n''') == '''07895462130\n9195969878\n919875641230'''\nassert solution('''5\n9195969878\n919876543210\n91987654321\n91987654321\n9195969878\n''') == '''9195969878\n919876543210\n91987654321\n91987654321\n9195969878'''\nassert solution('''7\n07895462130\n+91 919875641230\n919876543210\n+91 91987654321\n91987654321\n+91 91987654321\n91987654321\n''') == '''+91 919875641230\n919876543210\n+91 91987654321\n91987654321\n+91 91987654321\n91987654321\n+91 919875641230'''\n\n=====Example 1=====\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"+91 7856 9267\") == \"+91878569927\"\nassert solution(\"9911 1222\") == \"+91-11-22\"\n\nimport re"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 3 7 6 8 5 2 1\") == \"1 2 3 5 6 7 8 9\"\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('07895462130') == '+91 78954 62130'\nassert solution('919875641230') == '+91 9198 756 41230'\nassert solution('9393973941230') == '+91 939 3 7394 1230'\nassert solution('0293232333') == '0293 2323 33'\nassert solution('07895462130') == '+91 78954 62130'\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('816 5432 8554 3215 9087 8542') == '+91 6352 3222 9087 9652 3113 8542'\nassert solution('9025579865 4345 863 90876') == '+91 9025579865 90876 9152 5703 6709 4345'\nassert solution('9867 4532 9865 7862 3456 543 2') == '+91 9867 4532 9865 7862 9863 543 2 3456'\nassert solution('9865 4345 863 90876') == '+91 9865 90876 9152 5703 6709 4345'\nassert solution('9865 4345 863 90876') == '+91 9865 90876 9152 5703 6709 4345'\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"91 968123098\") == \"9196813098\"\nassert solution(\"9198309876\") == \"9198309876\"\nassert solution(\"918832987\") == \"918832987\"\nassert solution(\"917890987\") == \"91 7890987\"\nassert solution(\"917485832\") == \"91 7485832\"\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9''') == '''+91 99999 9999\n+91 99999 9999\n+91 99999 9999\n+91 99999 9999\n+91 99999 9999\n+91 99999 9999\n+91 99999 9999\n+91 99999 9999\n+91 99999 9999\n+91 99999 9999\n'''\nprint(solution(input()))\n=====\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('90872643029') == '+91 872643029'\nassert solution('908726430293') == '+91 8726430293'\nassert solution('0872643029') == '+91 872643029'\n\nassert solution('908726430293') == '+91 8726430293'\n\nassert solution('0') == '0'\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''9\n7276 22395\n9255 7276\n22395 9255\n8255 7276\n7276 8255\n9986 7276\n7276 9986\n5695 9861''') == '''+91 7876 5695\n+91 7676 22395\n+91 7276 9255\n+91 22395 9556\n+91 7876 8255\n+91 9585 7276\n+91 7276 9986\n+91 9861 5695'''\n\nassert solution('''4\n1234 12345\n1234 12346\n1234 123\n1234 1235''') == '''+91 1234 1234\n+91 1234 1235\n+91 1234 1234\n+91 1234 1235\n+91 1234 12345\n+91 1234 12346\n+91 1234 123'''\n\nassert solution('''4\n1234 1234\n1234 1235\n1234 123\n1234 1235\n9125 1234\n1234 9125\n1234 9125\n9125 1234\n1234 1234\n1234 1235\n1234 123\n1234 1235\n9125 1234\n1234 9125\n1234 9125\n9125 1234\n1234 1234\n9125 1234\n1234 1235\n9125 1234\n1234 9125\n1234 9125\n9125 1234\n1234 1234\n9125 1234\n1234 1235\n9125 1234\n1234 9125\n1234 9125\n9125 1234\n1234 1234\n9125 1234\n1234 9125\n9125 1234\n1234 1234\n9125 1234\n1234 9125\n9125 1234\n1234 1234\n9125 1234\n1234 9125\n9125 1234\n1234 9125\n9125 1234\n1234 9125\n9125 1234\n9125 1234\n1234 1234\n9125 1234\n1234 1234\n9125 1234\n1234 1234''') == '''+91 1234 1234\n+91 1234 1235\n+91 1234 123\n+91 1234 1235\n+91 9125 1234\n+91 1234 9125\n+91 9125 1234\n+91 1234 1234\n+91 1234 1235\n+91 1234 123\n+91 1234 1235\n+91 9125 1234\n+91 1234 9125\n+91 9125 1234\n+91 1234 1234\n+91 9125 1234\n+91 1234 1234\n+91 1234 1235\n+91 9125 1234\n+91 1234 9125\n+91 9125 1234\n+91 1234 1234\n+91 9125 1234\n+91 1234 1234\n+91 9125 1234\n+91 1234 1235\n+91 9125 1234\n+91 1234 9125\n+91 9125 1234\n+91 1234 1234\n+91 9125 1234\n+91 1234 1234\n+91 9125 1234\n+91 1234 1235\n+91 9125 1234\n+91 1234 9125\n+91 9125 1234\n+91 1234 1234\n+91 9125 1234\n+91 1234 9125\n+91 9125 1234\n+91 1234 1234\n+91 9125 1234\n+91 1234 1234\n+91 9125 1234\n+91 1234 9125\n+91 9125 1234\n+91 1234 9125\n+91 9125 1234\n+91 9125 1234\n+91 1234 9125\n+91 1234 1234\n+91 9125 1234\n+91 1234 9125\n+91 9125 1234\n+91 1234 1234\n+91 9125 1234\n+91 1234 9125\n+91 9125 1234\n+91 1234 1234\n+91 9125 1234\n+91 1234 9125\n+91 9125 1234\n+91 1234 9125\n+91 9125 1234\n+91 1234 1234\n+91 9125 1234\n+91 9125 1234\n+91 1234 9125\n+91 9125 1234\n+91 1234 9125\n+91 9125 1234\n+91 9125 1234\n+91 1234 9125\n+91 9125 1234\n+91 1234 9125\n+91 9125 1234\n+91 1234 9125\n+91 9125 1234\n+91 1234 9125\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 1234 9125\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 1234 9125\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+91 9125 1234\n+"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\nDasher\\t3\\nJason\\t4\\nDasher\\t4\\nJason\\t5\\nJason\\t3\\nDasher\\t2\\nJason\\t2') == '3.67'"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\nJeff,67,80,90,80\\nTim,65,75,85,90\\nJeff,80,80,80,80\\nJeff,67,67,67,80\\nTim,90,85,90,100') == '90.00'\n=====Test Case 1=====\nInput\n5\nJeff,67,80,90,80\nTim,65,75,85,90\nJeff,80,80,80,80\nJeff,67,67,67,80\nTim,90,85,90,100\nOutput\n90.00\nExplanation: \nJeff's average is (67+80+80+80+80)/5 = 90\n\"\"\"\nimport os\nimport sys\nimport atexit\nimport io\nimport unittest\nimport traceback\nfrom collections import defaultdict"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(['alpha', [20,30,40]], 'alpha') == '20.00'\nassert solution(['alpha', [20,30,40]], 'beta') == '30.00'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\nSachin\\t19\\t21\\t24\\nRohit\\t18\\t19\\t23\\nShikhar\\t20\\t22\\t24') == '24.00'\nassert solution('2\\nSachin\\t19\\t21\\nRohit\\t18\\t19\\nShikhar\\t20\\t22\\nSachin\\t19\\t21\\nShikhar\\t20\\t22') == '19.00'\nassert solution('2\\nSachin\\t19\\t21\\nRohit\\t18\\t19\\nSachin\\t20\\t22\\nShikhar\\t20\\t22') == '20.00'\n\n====== SOLUTION ====="
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nArjun 70\\nMalika 52\\nRobert 34\\nMalika') == '56.00'\nassert solution('4\\nArjun 70\\nMalika 52\\nRobert 34\\nMalika') == '56.00'\nassert solution('4\\nArjun 70\\nMalika 52\\nRobert 34\\nMalika') == '56.00'\nassert solution('4\\nArjun 70\\nMalika 52\\nRobert 34\\nMalika') == '56.00'\nassert solution('4\\nArjun 70\\nMalika 52\\nRobert 34\\nMalika') == '56.00'\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"3\\n1 2 3\\n\"\n\"4 1 2\\n\"\n\"3\\n1 2 3\") == \"3.00\"\nassert solution(\n\"5\\n\"\n\"alpha 1 2 3 4 5\\n\"\n\"beta 2 3 4 5 6\\n\"\n\"alpha 1 2 3 4 5\\n\"\n\"beta 2 3 4 5 6\\n\"\n\"beta\") == \"5.50\"\n'''"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input_data) == expected_result\nprint(solution(input_data))\n\n''''\n\nimport ast\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\nSohan 59 68 69 57 60 85\\nSeema 62 75 35 56 67 80\\nSanjeev 34 56 60 87 9\\nRahul 48 90 78 56 34\\nAkshat 27 75 83 92 70\\nVikas 60 98 67 45 56\") == \"60.00\"\n=====Test Case=====\nimport math\nassert math.floor(solution(\"6\\nSohan 59 68 69 57 60 85\\nSeema 62 75 35 56 67 80\\nSanjeev 34 56 60 87 9\\nRahul 48 90 78 56 34\\nAkshat 27 75 83 92 70\\nVikas 60 98 67 45 56\")) == 58.00\nassert solution(\"6\\nSohan 59 68 69 57 60 85\\nSeema 62 75 35 56 67 80\\nSanjeev 34 56 60 87 9\\nRahul 48 90 78 56 34\\nAkshat 27 75 83 92 70\\nVikas 60 98 67 45 56\") == 58.00\nassert solution(\"6\\nSohan 59 68 69 57 60 85\\nSeema 62 75 35 56 67 80\\nSanjeev 34 56 60 87 9\\nRahul 48 90 78 56 34\\nAkshat 27 75 83 92 70\\nVikas 60 98 67 45 56\") == 58.00\nassert solution(\"6\\nSohan 59 68 69 57 60 85\\nSeema 62 75 35 56 67 80\\nSanjeev 34 56 60 87 9\\nRahul 48 90 78 56 34\\nAkshat 27 75 83 92 70\\nVikas 60 98 67 45 56\") == 58.00\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\nHarsh 25 26.5 28\\nAnurag 26 28 30\") == \"26.50\"\n=====Output=====\n26.50\nExplanation\nThe average marks of student Anurag is (26+28+30)/3 = 26.5\n\"\"\""
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nArjun 70 70 70 Arjun\") == \"70.00\"\n=====Test Case 1=====\n>>> solution(\"4\\nArjun 70 70 70 Arjun\")\n70.00\n\n=====Test Case 2=====\n>>> solution(\"3\\nKrishna 67 68 69 Arjun\")\n67.50\n\n=====Test Case 3=====\n>>> solution(\"6\\nHarsh 25 26.5 28 30 32 Arjun\")\n26.50\n\n=====Test Case 4=====\n>>> solution(\"5\\nHarsh 25 26.5 28 30 Arjun\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"main.py\", line 25, in solution\n    assert solution(\"5\\nHarsh 25 26.5 28 30 Arjun\") == \"26.50\"\nAssertionError\n\"\"\"\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"Dhiraj CSE 18\"\"\") == \"\"\"Mr. Dhiraj CSE 18\"\"\", \"Test 1\"\nassert solution(\"\"\"Kounal CSE 16\"\"\") == \"\"\"Mr. Kounal CSE 16\"\"\", \"Test 2\"\nassert solution(\"\"\"Akhil CSE 12\"\"\") == \"\"\"Mr. Akhil CSE 12\"\"\", \"Test 3\"\n\n=======\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nMike Thomson 20 M\\nRobert Bustle 32 M\\nAndria Bustle 30 F\") == \"Mr. Mike Thomson\\nMs. Andria Bustle\\nMr. Robert Bustle\"\nassert solution(\"2\\nHue Vie 20 M\\nRobert Bustle 32 M\") == \"Ms. Robert Bustle\\nMr. Hue Vie\"\nassert solution(\"5\\nHue Vie 20 M\\nRobert Bustle 32 M\\nPhoebe Bustle 30 F\\nOscar Bustle 35 M\\nAndria Bustle 30 F\") == \"Mr. Hue Vie\\nMs. Phoebe Bustle\\nMr. Oscar Bustle\\nMs. Andria Bustle\"\n=====Final Output=====\n$ python3 solution.py < test.in > test.out\n\n=====Test 9=====\n>>> python3 solution.py < test_9.in > test_9.out\nMr. John Smith\nMr. William Saurin\nMs. Miriam Chang\nMr. Frank Booth\nMs. Robin Hood\nMr. Michael Stone\nMr. George Lucas\nMs. Yvette Brown\nMr. Benjamin Button\nMs. Oscar Wilde\nMr. Anthony Mason\nMs. Jane Fonda\nMr. Thomas Malthus\nMr. Harry Potter\nMr. Julia Child\nMs. Eric Cartman\nMr. Andy Serkis\nMr. Mat Damon\nMr. Tom Hanks\nMs. Vin Diesel\nMr. Michael Myers\nMr. Olivia Newton\nMr. Christopher Columbus\nMs. Joaquin Phoenix\nMr. Danny Torrence\nMr. Wayne Gretzky\nMs. Carrie Fisher\nMr. Joseph Campbell\nMr. Christian Bale\nMr. Richard Garriott\nMs. Judy Greer\nMr. Edward Verel\nMr. Tom Cruise\nMr. Jared Leto\nMr. Wil Wheaton\nMs. Marlon Brando\nMr. Tom Holland\nMr. Jeff Bridges\nMr. Johnny Depp\nMr. Miles Teller\nMr. Tom Hanks\nMr. John Wayne\nMr. Peter Varnick\nMr. John Stitchfield\nMr. Mathew Thomas\nMr. Adam Lambert\nMr. Christopher Walken\nMr. Dean Stock\nMr. Quentin Tarantino\nMr. Christopher Walken\nMr. Adam Lambert\nMr. Shao-Yu Wu\nMr. Charles Negule\nMr. Tom Cruise\nMr. Alfonso Cuar\u00f3n\nMr. Mathew Thomas\nMr. Carl Higgs\nMr. Mathew Thomas\nMr. Tom Cruise\nMr. Christian Bale\nMr. Hugh Jackman\nMr. Morgan Freeman\nMr. The Rock\nMr. Eli Billings\nMr. John Goodman\nMr. Ben Affleck\nMr. Tom Hanks\nMr. Henry Cavill\nMr. Tom Cruise\nMr. Robert Downey Jr.\nMr. Tom Hanks\nMr. Errol Flynn\nMr. Joan Crawford\nMr. Tom Cruise\nMr. John Cusack\nMr. Thomas Caglar\nMr. Christopher Walker\nMr. Tom Cruise\nMr. Michael Walker\nMr. Christopher Walker\nMr. Brian Cox\nMr. Tom Cruise\nMr. Christopher Walker\nMr. Robert Downey Jr.\nMr. Tom Cruise\nMr. Christopher Walker\nMr. Benjamin Affleck\nMr. Chris Evans\nMr. Tom Cruise\nMr. John Cusack\nMr. Jean Reno\nMr. Robert Downey Jr.\nMr. Tom Hanks\nMr. Christopher Walker\nMr. Victor Fleming\nMr. Tom Cruise\nMr. Christopher Walker\nMr. Eric Cartman\nMr. Michael Walker\nMr. Eric Cartman\nMr. Adam Lambert\nMr. Tom Cruise\nMr. Christian Bale\nMr. Tom Hanks\nMr. Trevor Noah\nMr. John Stitchfield\nMr. Christian Bale\nMr. Christian Bale\nMr. James Cameron\nMr. Vin Diesel\nMr. Jack Black\nMr. Tom Cruise\nMr. Michael Walker\nMr. Tom Hanks\nMr. Patrick Stewart\nMr. Michael Walker\nMr. Christopher Nolan\nMr. Patrick Stewart\nMr. Tom Hanks\nMr. Christopher Walker\nMr. Tom Cruise\nMr. Christopher Walker\nMr. Ben Affleck\nMr. John Cusack\nMr. Christopher Walker\nMr. Christian Bale\nMr. Christopher Walker\nMr. Colin Firth\nMr. Tom Cruise\nMr. Christian Bale\nMr. James Cameron\nMr. Matt Damon\nMr. Tom Hanks\nMr. George Lucas\nMr. Chris Evans\nMr. Tom Cruise\nMr. Christopher Walker\nMr. Michael Walker\nMr. Peter Varnick\nMr. Tom Cruise\nMr. Christopher Walker\nMr. Peter Varnick\nMr. Christian Bale\nMr. Tom Hanks\nMr. Steve Martin\nMr. Peter Varnick\nMr. John Hockman\nMr. Christopher Walker\nMr. Tom Cruise\nMr. Tom Cruise\nMr. Christopher Walker\nMr. Peter Varnick\nMr. Christian Bale\nMr. Tom Hanks\nMr. Christian Bale\nMr. Peter Varnick\nMr. Chris Evans\nMr. Tom Cruise\nMr. William Hurt\nMr. Christopher Walker\nMr. Richard Thomas\nMr. Tom Hanks\nMr. Christopher Walker\nMr. Chris Evans\nMr. Christopher Walker\nMr. Robert Downey Jr.\nMr. Tom Hanks\nMr. Christopher Walker\nMr. Christopher Walker\nMr. Christopher Walker\nMr. Adam Lambert\nMr. Tom Cruise\nMr. Christopher Walker\nMr. Michael Walker\nMr. Christopher Walker\nMr. Nicholas Murphy\nMr. Christian Bale\nMr. Christopher Walker\nMr. Peter Varnick\nMr. Tom Hanks\nMr. Colin Firth\nMr. Vincent Van Gogh\nMr. Tom Hanks\nMr. Patrick Stewart\nMr. Tom Cruise\nMr. Eric Cartman\nMr. Anthony Mason\nMr. Tom Hanks\nMr. Robert Downey Jr.\nMr. Tom Cruise\nMr. Christopher Walker\nMr. John Hockman\nMr. Christian Bale\nMr. Tom Hanks\nMr. Christopher Walker\nMr. Christian Bale\nMr. Peter Varnick\nMr. Tom Cruise\nMr. Christopher Walker\nMr. Pierre Curie\nMr. John Stitchfield\nMr. Tom Cruise\nMr. Christopfer Bourda\nMr. Brian Cox\nMr. Edward Verel\nMr. George Lucas\nMr. Christian Bale\nMr. Vincent Van Gogh\nMr. Tom Hanks\nMr. Edward Verel\nMr. Michael Walker\nMr. Jacob Gygax\nMr. Michael Walker\nMr. Joe Versus\nMr. Christopher Walker\nMr. Tom Hanks\nMr. Ian McKellen\nMr. Tom Cruise\nMr. Tom Cruise\nMr. Christopher Walker\nMr. Christopher Walker\nMr. Christopher Walker\nMr. Christian Bale\nMr. Tom Hanks\nMr. John Cusack\nMr. Christopher Walker\nMr. Christian Bale\nMr. Bruce Lee\nMr. Liam Neeson\nMr. Tom Hanks\nMr. John Huston\nMr. Patrick Stewart\nMr. Tom Cruise\nMr. Michael Walker\nMr. Mathew Thomas\nMr. David Beckham\nMr. Tom Hanks\nMr. Christopher Walker\nMr. Peter Varnick\nMr. John Cusack\nMr. Christopfer Bourda\nMr. Christopher Walker\nMr. John Hockman\nMr. Tom Cruise\nMr. Christian Bale\nMr. Mathew Thomas\nMr. Tom Hanks\nMr. Christopher Walker\nMr. Christian Bale\nMr. John Hockman\nMr. Richard Thomas\nMr. Tom Hanks\nMr. John Cusack\nMr. Carol Burnett\nMr. Christian Bale\nMr. Christian Bale\nMr. Anirban Das\nMr. Christian Bale\nMr. Vincent Van Gogh\nMr. Tom Cruise\nMr. Charlize Theron\nMr. Tom Hanks\nMr. Adam Lambert\nMr. John Hockman\nMr. Ryan Gosling\nMr. Michael Walker\nMr. Peter Varnick\nMr. Tom Cruise\nMr. Christopher Walker\nMr. Peter Varnick\nMr. Michael Walker\nMr. Anirban Das\nMr. Mary Reilly\nMr. John Hockman\nMr. Christopher Walker\nMr. Nicholas Murphy\nMr. Christian Bale\nMr. Peter Varnick\nMr. Christian Bale\nMr. Alex DeMuro\nMr. Christian Bale\nMr. Tom Hanks\nMr. Tom Cruise"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\nMike Thomson 20 M\\nRobert Bustle 32 M\") == \"Mr. Mike Thomson\\nMr. Robert Bustle\"\nassert solution(\"4\\nGeorge Floyd 65 M\\nPeter Pan 45 M\\nEbenezer MacKenzie 32 M\\nWaldemar Acker 30 M\") == \"Mr. George Floyd\\nMr. Peter Pan\\nMs. Ebenezer MacKenzie\\nMr. Waldemar Acker\"\n=======\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('Mike Thomson 20 M') == 'Mr. Mike Thomson'\nassert solution('David Joyner 50 F') == 'Ms. David Joyner'\nassert solution('Joseph Kibet 84 M') == 'Mr. Joseph Kibet'\nassert solution('David Joyner 50 F') == 'Ms. David Joyner'\n\n'''\n\nimport operator\nimport functools"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('Davy M 22 M') == \"Mr. Davy M\\nMs. M Davy\"\nassert solution('Davy V 22 F') == \"Mr. Davy V\\nMs. F V\"\nassert solution('Davy M 22 F') == \"Mr. Davy M\\nMs. F Davy\"\nassert solution('Davy M 23 M') == \"Mr. Davy M\\nMs. M Mr. Davy\"\nassert solution('Davy M 23 F') == \"Mr. Davy M\\nMs. F Mr. Davy\"\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Md. Alif Abdullah Chaudhry\\n\"\n                \"Rukhshan Sharma\\n\"\n                \"Arshad Mehmood\\n\"\n                \"Md. Syed Faizan\\n\"\n                \"Saif Shaikh\\n\"\n                \"Md. Nizamuddin Shaikh\\n\"\n                \"Md. Syed Faizan\\n\"\n                \"Md. Alif Abdullah Chaudhry\\n\"\n                \"Rukhshan Sharma\\n\"\n                \"Arshad Mehmood\\n\"\n                \"Md. Syed Faizan\\n\"\n                \"Saif Shaikh\\n\"\n                \"Md. Nizamuddin Shaikh\\n\"\n                \"Md. Syed Faizan\\n\") == \"\"\"Mr. Alif Abdullah Chaudhry\nMs. Mary George\nMr. Rukhshan Sharma\nMr. Arshad Mehmood\nMr. Syed Faizan\nMs. Saif Shaikh\nMr. Nizamuddin Shaikh\nMr. Syed Faizan\nMr. Alif Abdullah Chaudhry\nMs. Syed Faizan\nMs. Mary George\nMr. Arshad Mehmood\nMr. Nizamuddin Shaikh\nMr. Syed Faizan\nMr. Rukhshan Sharma\nMs. Saif Shaikh\n\"\"\"\n\nassert solution(\"Md. Alif Abdullah Chaudhry\\n\"\n                \"Rukhshan Sharma\\n\"\n                \"Arshad Mehmood\\n\"\n                \"Md. Syed Faizan\\n\"\n                \"Saif Shaikh\\n\"\n                \"Md. Nizamuddin Shaikh\\n\"\n                \"Md. Syed Faizan\\n\"\n                \"Md. Alif Abdullah Chaudhry\\n\"\n                \"Rukhshan Sharma\\n\"\n                \"Arshad Mehmood\\n\"\n                \"Md. Syed Faizan\\n\"\n                \"Saif Shaikh\\n\"\n                \"Md. Nizamuddin Shaikh\\n\"\n                \"Md. Syed Faizan\\n\") == \"\"\"Mr. Alif Abdullah Chaudhry\nMs. Mary George\nMr. Rukhshan Sharma\nMs. Syed Faizan\nMr. Arshad Mehmood\nMs. Saif Shaikh\nMr. Nizamuddin Shaikh\nMs. Syed Faizan\nMr. Alif Abdullah Chaudhry\nMr. Rukhshan Sharma\nMs. Syed Faizan\nMs. Mary George\nMr. Arshad Mehmood\nMr. Nizamuddin Shaikh\nMs. Saif Shaikh\n\"\"\""
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('M M 45 M') == 'Mr. M M\\nMs. M M'\nassert solution('H D 45 M M M M') == 'Mr. H D\\nMs. D H\\nMr. M M\\nMs. M M'\nassert solution('H D 45 F M M M M') == 'Mr. H D\\nMs. D H\\nMrs. F D\\nMr. M M\\nMs. M M'\nassert solution('H D 45 F M M M M M M') == 'Mr. H D\\nMs. D H\\nMrs. F D\\nMr. M M\\nMs. M M'\n=====\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Mike Thomson 20 M\\nRobert Bustle 32 M\") == 'Mr. Mike Thomson\\nMs. Robert Bustle'\n\n\"\"\""
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('John Doe\\nMike T\\nRichard Roe\\nPete Po\\n\\n') == 'Mr. John Doe\\nMs. Mike T\\nMr. Richard Roe\\nMr. Pete Po'\nassert solution('John Doe\\nJohn\\nMike T\\nPete Po\\n\\n') == 'Mr. John Doe\\nMr. John\\nMs. Mike T\\nMr. Pete Po'\nassert solution('John Doe\\nJohn\\nMike T\\nPete Po\\n\\n') == 'Mr. John Doe\\nMr. John\\nMs. Mike T\\nMr. Pete Po'\n\n=====Outcome=====\nYou successfully built a name directory!\n\"\"\""
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '2\\n'\n    'Harry\\n'\n    'Potter\\n'\n    '35\\n'\n    'F\\n'\n    '35\\n'\n    'M\\n') == 'Mr. Harry\\n' \\\n           'Ms. Potter\\n'\n\n=====Notes=====\nThe dataset is small so it's fine to write it all in one line of code.\n\"\"\"\nfrom __future__ import annotations\nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass Person:\n    first_name: str\n    last_name: str\n    age: int\n    sex: str\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 1 1') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\nassert solution('1 1 1 2') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n\nprint(solution('1 1 1 1')) #[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\nprint(solution('1 1 1 2')) #[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 2 3\") == \"0 0 0\\n0 0 1\\n0 1 2\\n1 0 1\\n1 1 2\\n1 2 3\\n2 0 1\\n2 1 2\\n2 2 3\"\n\"\"\""
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [1, 0, 0], [1, 1, 1], [0, 1, 2], [1, 0, 2], [1, 1, 0], [1, 1, 2], [0, 1, 1], [0, 2, 1], [1, 2, 1], [0, 2, 2], [1, 2, 0], [1, 2, 2], [0, 2, 2], [0, 0, 2], [0, 2, 0], [0, 2, 1], [2, 0, 1], [2, 1, 0], [2, 2, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 2, 0], [1, 2, 2], [2, 1, 0], [2, 1, 2], [2, 0, 1], [2, 2, 1], [2, 0, 0], [2, 2, 2], [2, 1, 1], [0, 0, 1], [1, 0, 1], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 1, 1], [1, 1, 2], [2, 0, 2], [2, 1, 0], [2, 1, 2], [2, 2, 0], [2, 2, 2], [2, 1, 1], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 2, 2], [2, 1, 0], [2, 1, 2], [2, 2, 1], [0, 2, 1], [0, 1, 1]]\n    \n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [1, 0, 0], [1, 1, 1]]'\nassert solution(\"1 2 1\") == '[[0, 0, 0]]'\nassert solution(\"1 1 1\") == '[[0, 0, 0]]'\nassert solution(\"2 2 2\") == '[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]'\nassert solution(\"4 4 6\") == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]'\n\n'''\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1 2 3') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\nassert solution('1 1 1 1') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [1, 0, 0], [1, 1, 1]]\nassert solution('1 2 3 3') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 2], [1, 1, 0], [1, 1, 2]]\n\"\"\"\nx, y, z, n = [int(i) for i in input().split()]\nprint([[i,j,k] for i in range(x+1) for j in range(y+1) for k in range(z+1) if (i+j+k)!=n])\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n\n=====Output Format=====\nPrint the list of lists in lexicographically increasing order.\nprint(\"\\n\".join([\" \".join([str(a) for a in aa]) for aa in a]))\nprint(\"\\n\".join([\" \".join([str(a) for a in aa]) for aa in a]))\n\nSample Input\n1\n1\n1\n2\nSample Output\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 0, 1]]\n\nSample Input\n1\n2\n1\n2\nSample Output\n[[0, 0, 0], [0, 1, 0], [0, 1, 1], [0, 2, 0], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [1, 2, 0], [2, 0, 0], [2, 0, 1], [2, 1, 0]]\n\nSample Input\n1\n3\n1\n3\nSample Output\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n\n\n'''\n\n\n\nx, y, z, n = (int(input()) for _ in range(4))\n\nL = [[i, j, k] for i in range(x+1) for j in range(y+1) for k in range(z+1) if i+j+k!= n]\n\nprint(*[f'[{\", \".join(map(str, aa))}]' for aa in L], sep='\\n')"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 1 3') == [[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,2]]\nassert solution('1 1 1 3') == [[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,2]]\n\n======\nfrom itertools import product\n\nx, y, z, n = int(input()), int(input()), int(input()), int(input())\n\nprint([[a,b,c] for a,b,c in product(range(x+1),range(y+1),range(z+1)) if a+b+c!= n])\n\n'''"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(x = 1, y = 1, z = 2, n = 3) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\nassert solution(x = 1, y = 1, z = 3, n = 3) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4 5 2') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\n\"\"\""
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    x = 1\n    y = 1\n    z = 2\n    n = 3\n) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2]]\nassert solution(\n    x = 1\n    y = 1\n    z = 2\n    n = 2\n) == [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]\nassert solution(\n    x = 1\n    y = 1\n    z = 1\n    n = 1\n) == [[0, 0, 0]]\nassert solution(\n    x = 1\n    y = 1\n    z = 1\n    n = 2\n) == [[0, 0, 0], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 1, 0], [1, 1, 1]]\nassert solution(\n    x = 1\n    y = 2\n    z = 1\n    n = 2\n) == [[0, 0, 0], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 1, 0], [1, 1, 1]]\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2') == '3.00+2.00i'\nassert solution('1+2i') == '3.00+2.00i'\nassert solution('1-2i') == '1.00-2.00i'\nassert solution('0+2i') == '2.00+0.00i'\nassert solution('0-2i') == '-2.00-0.00i'\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1+2i\") == \"1+2i\\n3+4i\\n-1+1i\\n-4-5i\\n0.00+5.00i\\n0.00+-1.00i\\n2.00+0.00i\\n0.00+-1.00i\\n0.00+-3.00i\"\n=====Notes=====\nThe modulus or mod operation is defined as:\n\nIt is a function that returns the remainder after dividing the first operand by the second.\n\nIf one operand is a negative and the other is positive, then the mod will return a negative number.\n\nIf both operands are negative, then the mod will return a positive number.\n\nFor example, the mod of -5 and -3 is -2 since -3/5 = -0.6\n\nThe modulus will return -1 for all divisions by 0.\n\nExample\nEnter your code here. Read input from STDIN. Print output to STDOUT\n\nx=input()\nx=x.split('+')\nc=complex(x[0],x[1])\nprint(c.real,c.imag)\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2') == '3.00+4.00i'\nassert solution('0 1') == '1.00+1.00i'\nassert solution('0 -1') == '-1.00+1.00i'\nassert solution('1 0') == '0.00+0.00i'\n\n=====Note=====\nThere should not be any space between the real and imaginary parts.\n\n=====Constraints=====\n1 \u2264 |A|, |B| \u2264 103.\n\n=====Test Cases=====\nInput Format\nThe first line of the input contains the real part A and imaginary part B of the first complex number.\nThe second line contains the real part C and imaginary part D of the second complex number.\n\nOutput Format\nPrint the result of each operation in the required order.\n\nSample Input\n1 1\n1 -1\n\nSample Output\n0.00+2.00i\n0.00+-2.00i\n0.00-1.00i\n0.00-1.00i\n1.00+0.00i\n1.00-0.00i\n\n=====Solution=====\nimport re\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2') == '3.00+2.00i'\nassert solution('0 2') == '2.00-0.00i'\nassert solution('0 -2') == '2.00-2.00i'\nassert solution('-2 2') == '0.00+4.00i'\nassert solution('2 0') == '2.00+0.00i'\n\"\"\"\n\nimport math\n\nclass Complex(object):\n    def __init__(self, real, imaginary):\n        self.real = float(real)\n        self.imaginary = float(imaginary)\n        \n    def __add__(self, no):\n        real = self.real + no.real\n        imaginary = self.imaginary + no.imaginary\n        return Complex(real, imaginary)\n        \n    def __sub__(self, no):\n        real = self.real - no.real\n        imaginary = self.imaginary - no.imaginary\n        return Complex(real, imaginary)\n        \n    def __mul__(self, no):\n        real = self.real*no.real - self.imaginary*no.imaginary\n        imaginary = self.real*no.imaginary + self.imaginary*no.real\n        return Complex(real, imaginary)\n\n    def __truediv__(self, no):\n        x = float(no.real**2 + no.imaginary**2)\n        y = self * Complex(no.real, -no.imaginary)\n        real = y.real/x\n        imaginary = y.imaginary/x\n        return Complex(real, imaginary)\n\n    def mod(self):\n        real = math.sqrt(self.real**2 + self.imaginary**2)\n        return Complex(real, 0)\n\n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2+5i') == '7.00+2.00i'\nassert solution('2-4i') == '2.00-4.00i'\nassert solution('2+4i') == '6.00+8.00i'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == expected\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2') == '3 4'\nassert solution('1+2j') == '3.00+4.00j'\nassert solution('1-2j') == '1.00-4.00j'\nassert solution('1+0j') == '1.00+0.00j'\nassert solution('0+0j') == '0.00+0.00j'\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1') == '2.00+2.00i'\nassert solution('1 1 1') == '2.00+2.00i'\nassert solution('1 2') == '1.00+4.00i'\nassert solution('0 1') == '0.00+1.00i'\nassert solution('0 1 -1') == '0.00+1.00i'\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1') == '2.00+2.00i'\nassert solution('0 1') == '0.00+1.00i'\nassert solution('0 0') == '0.00+0.00i'\nassert solution('1 -1') == '0.00-2.00i'\nassert solution('0 0') == '0.00+0.00i'\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1') == '1.00 + 1.00i'\nassert solution('0 5') == '-0.67 - 2.00i'\nassert solution('1 -1') == '0.33 - 1.00i'\n=====Problem Statement=====\nRead four numbers and print their sum and average; if the average is a whole number, print its floor; otherwise, print its ceiling.\n\n=====Input Format=====\nThe first line contains four numbers, the second line contains four numbers, and the third line contains four numbers.\n\n=====Output Format=====\nPrint the sum and average of the numbers in the first line, and the sum and average of the numbers in the second line; the average of the numbers in the third line; and the floor, if any, or the ceiling of the average of the numbers in the fourth line.\n\n=====Sample Input=====\n1.1 2.2 3.3 4.4\n5.5 6.6 7.7 8.8\n1.1 2.2 3.3 4.4\n1 2 3 4\n=====Sample Output=====\n6.35\n6.35\nFloor of 6.35\nCeiling of 6.35\n>>>>>>> bb4dee632f7ba40012d1c5642ef5d7c10f8ea863\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('xyz') == 'xaybzc'\n\"\"\""
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nassert solution(\"abc\") == \"xaybzc\"\nassert solution(\"baxz\") == \"xaybzc\"\n\"\"\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n\"\"\"\nimport re\n\no, e = (stdin.splitlines())\n\nprint(f\"{''.join(re.findall(r'([a-z])(?=[1-9])', o))}\")\nprint(f\"{''.join(re.findall(r'([a-z])(?=[0-9])', e))}\")\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('xyz') == 'xaybzc'\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\nxyz\nabc\n\"\"\"\n) == \"\"\"\nxaybzc\n\"\"\"\n)\n\nassert solution(\n\"\"\"\nhello\nworld\n\"\"\"\n) == \"\"\"\nhello\nworld\n\"\"\"\n)\n\nassert solution(\n\"\"\"\naabb\ncddd\n\"\"\"\n) == \"\"\"\naabbcddd\n\"\"\"\n)\n\nprint('Success')"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('xyz') == 'xaybzc'\nassert solution('abc') == 'xaybzc'\n\"\"\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcd') == 'abcd'\nassert solution('zyxw') == 'zyxw'\n\"\"\"\n\nimport re\nimport os\nimport sys"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('xyz') == 'xaybzc'\n\nprint(solution('abc'))\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"01\") == \"0\"\nassert solution(\"01B\") == \"0\"\nassert solution(\"01BB\") == \"0\"\nassert solution(\"01BBB\") == \"1\"\nassert solution(\"01111111B\") == \"111111\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"01B0\") == \"00\"\nassert solution(\"11\") == \"1\"\nassert solution(\"B\") == \"\"\n\"\"\"\n\nimport sys\nimport re\n\nsys.setrecursionlimit(100000)"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected_result\nprint(\"You are right!\")\n\n\"\"\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"01B0\") == \"00\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('01B0') == '00'\nassert solution('101') == '1'\n\"\"\""
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"010\") == \"0\"\nassert solution(\"01B010\") == \"010\"\nassert solution(\"101010\") == \"0\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"01B0\") == \"00\"\n\"\"\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"01B0\") == \"00\"\nassert solution(\"1B\") == \"1\"\nassert solution(\"B\") == \"\"\n\n\"\"\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"01B0\") == \"00\"\n\"\"\""
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"01B0\") == \"00\"\n\n\"\"\""
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\nassert solution(\"5\\n3 2 5 4 1\") == \"4\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 5 4 3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\nprint(solution(\"5\\n2 1 5 4 3\"))\n\"\"\"\n\n\"\"\"\nIn this solution, we use a greedy approach to compute the minimum sum of heights. First, we sort the heights in descending order.\nThen, for each person, we pick the minimum height of the remaining persons that is larger than the height of the current person. We add it to the sum and decrement the remaining number of persons.\nAt the end of the loop, we have computed the minimum sum of heights for all the persons.\nTime complexity: O(n \\log n)\nSpace complexity: O(1)"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\n\"\"\"\nRead 2 strings, the first one is an integer, the second one contains N space-separated integers.\nThen, print the minimum total height of the stools needed to meet the goal.\n\n-----Input-----\n7\n2 1 5 4 3\n\n-----Output-----\n4\n\n-----Sample Input-----\n7\n0 10 9 8 7 6 5\n\n-----Sample Output-----\n0\n\n\"\"\"\n\nN = int(input())\nA = list(map(int, input().split()))\n\ns = []\n\nfor i in range(N):\n    for j in range(i, N):\n        if j!= i:\n            s.append(abs(A[i] - A[j]))\n\nprint(min(s))\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\n\"\"\"\n\nn = int(stdin.readline())\nnums = list(map(int, stdin.readline().split()))\n\nm = min(nums)"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == '4'\nassert solution(\"3\\n2 3 4 1\") == '4'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == '4'\nassert solution(\"5\\n1 1 1 1 1\") == '0'\n\"\"\""
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(solution1_test_0) == 'A'\nassert solution(solution1_test_1) == 'B'\nassert solution(solution1_test_2) == 'B'\nassert solution(solution1_test_3) == 'B'\nassert solution(solution1_test_4) == 'B'\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"B\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aca') == 'A'\nassert solution('accc') == 'C'\nassert solution('ca') == 'B'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aca\\naccc\\nca\") == \"A\"\n\n\"\"\"\n\nfrom math import ceil\n\na = stdin[0:1]\nb = stdin[1:2]\nc = stdin[2:3]\n\nremain_a = ceil(len(a) / 2)\nremain_b = ceil(len(b) / 2)\nremain_c = ceil(len(c) / 2)\n\nfor i in range(remain_a):\n    a = a[1:] + a[0]\nfor i in range(remain_b):\n    b = b[1:] + b[0]\nfor i in range(remain_c):\n    c = c[1:] + c[0]"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aca\\naccc\\nca') == 'A'\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"B\"\n\"\"\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aca\\naccc\\nca\\n\") == \"A\"\n\"\"\""
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aca') == 'A'\n\nassert solution('accc') == 'C'\n\nassert solution('ca') == 'B'\n\nassert solution('ccc') == 'C'\n\nassert solution('cb') == 'C'"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"B\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"B\"\nassert solution(\"a\") == \"A\"\nassert solution(\"ab\") == \"B\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 5 7') == 'YES'\n\nassert solution('6 7 8') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5 7') == 'YES'\nassert solution('10 7 10') == 'NO'\nassert solution('2 5 7') == 'YES'\nassert solution('7 5 10') == 'NO'\n\"\"\""
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5 7') == 'YES'\nassert solution('5 6 7') == 'NO'\nassert solution('3 5 7') == 'NO'\nassert solution('3 2 7') == 'YES'\n\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\n\"\"\"\n\nimport sys\n\na, b, c = [int(s) for s in stdin.split()]\nprint(\"YES\" if a + b == c or a + c == b or b + c == a else \"NO\")\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"5 7 5\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '5 5 7'\n) == 'YES'\nassert solution(\n    '5 7 5'\n) == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 5 7\n5 5 7\n5 5 7\n5 5 7\n5 5 7\n''') == 'YES'\n\nassert solution('''5 5 7\n5 5 7\n5 5 7\n5 5 7\n5 5 7\n''') == 'YES'\n\nassert solution('''5 5 7\n5 5 7\n5 5 7\n5 5 7\n5 5 7\n''') == 'NO'\n\nassert solution('''2 2 3\n2 2 3\n2 2 3\n2 2 3\n2 2 3\n''') == 'YES'\n\nassert solution('''2 2 3\n2 2 3\n2 2 3\n2 2 3\n2 2 3\n''') == 'NO'"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5 7') == \"YES\"\nassert solution('7 5 5') == \"YES\"\nassert solution('7 7 5') == \"NO\"\nassert solution('7 7 7') == \"NO\"\nassert solution('2 2 4') == \"NO\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n\") == \"1\\n\"\nassert solution(\"3\\n\") == \"2\\n\"\nassert solution(\"5\\n\") == \"11\\n\"\n\"\"\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n\") == \"11\""
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"7\"\nassert solution(\"5\") == \"11\"\n\"\"\"\n\nimport unittest\n\nclass Solution(object):\n    def solution(self, stdin):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        import math\n        N = int(stdin)\n        for k in range(1, N+1):\n            if k <= 2:\n                res = 2\n            else:\n                res = int(math.pow(2, k-1) * (1 + math.sqrt(5)) / 2)\n            print(res)\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution().solution\n\n    def test_solution(self):\n        self.assertEqual(self.solution(\"4\"), \"7\")\n        self.assertEqual(self.solution(\"5\"), \"11\")\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\""
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n\") == \"11\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"11\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"7\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\nimport os\n\npath = r\"/Users/gryp/workspace/leetcode_data/2020_11_Lucas_number.txt\"\ndir_path = os.path.dirname(os.path.realpath(path))\nwith open(path, \"r\") as f:\n    stdin = f.readline().rstrip()\nprint(solution(stdin))\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == 11\n\"\"\""
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n4\\n2') == '7'\nassert solution('1\\n2\\n3') == '6'\nassert solution('5\\n5\\n1') == '10'\nassert solution('0\\n1\\n1') == '1'\nassert solution('1\\n1\\n1') == '1'\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 2\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 2') == '7'\nassert solution('3 4 4') == '10'\nassert solution('6 5 3') == '8'\nassert solution('4 5 5') == '10'\nassert solution('2 2 2') == '2'\n\"\"\"\n\na, b, h = map(int, input().split())\nprint((a + b) * h // 2)\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 2\") == \"7\"\n\"\"\"\n\n\"\"\"\n2. Modify your trapezoid solution so that it works correctly for any input:\na\nb\nh\n\n-----Constraints-----\n - 1\u2266a\u2266100\n - 1\u2266b\u2266100\n - 1\u2266h\u2266100\n - All input values are integers.\n - h is even.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\na\nb\nh\n\n-----Output-----\nPrint the area of the given trapezoid. It is guaranteed that the area is an integer.\n\n-----Sample Input-----\n3\n4\n2\n\n-----Sample Output-----\n7\n\nWhen the lengths of the upper base, lower base, and height are 3, 4, and 2, respectively, the area of the trapezoid is (3+4)\u00d72/2 = 7.\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n4\\n2\\n\") == \"7\"\nprint('Success')\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 2\") == \"7\"\n\n\"\"\""
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 2') == '7'\n\n\"\"\""
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n4\n2''') == '7'\nprint('Test passed')\n\n-------------\nimport sys\nfrom typing import IO, Any, List\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"3\\n\"\n    \"4\\n\"\n    \"2\\n\"\n) == \"7\"\nassert solution(\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n) == \"1\"\nassert solution(\n    \"100\\n\"\n    \"100\\n\"\n    \"100\\n\"\n) == \"400\"\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n4\\n2') == '7'\nassert solution('2\\n3\\n5') == '7'\n\n-------------------------------"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\"\"\"\n\n\"\"\"\nGiven are N integers A_1,\\ldots,A_N.\nFind the sum of A_i \\times A_j \\times A_k over all pairs (i,j,k) such that 1\\leq i < j < k \\leq N, modulo (10^9+7).\n\n-----Constraints-----\n - 2 \\leq N \\leq 2\\times 10^5\n - 0 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 \\ldots A_N\n\n-----Output-----\nPrint \\sum_{i=1}^{N-2}\\sum_{j=i+1}^{N-1} \\sum_{k=j+1}^{N} A_i A_j A_k, modulo (10^9+7).\n\n-----Sample Input-----\n4\n1 2 3 4\n\n-----Sample Output-----\n40\n\nWe have 1 \\times 2 + 1 \\times 3 + 2 \\times 4 + 3 \\times 4 = 40.\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\n'''\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3\") == 11\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"11\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3') == '11'\n\"\"\""
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4') == '25'\nassert solution('2\\n1 2') == '3'\n\"\"\""
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 3') == 11\n\n\"\"\"\nimport sys\nimport os\nimport ast\nimport logging\nfrom typing import Optional\nimport unittest\nfrom collections import deque\nfrom dataclasses import dataclass, field\nfrom abc import abstractmethod\n\nlogging.basicConfig(level=logging.DEBUG)\n\n\nclass Test(unittest.TestCase):\n    test_data_dir = os.path.join(os.path.dirname(__file__), 'test_data')\n\n    def test_first_solution(self):\n        self.assertEqual(solution('2\\n1 2'), 5)\n\n    def test_second_solution(self):\n        self.assertEqual(solution('3\\n1 2 3'), 11)\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\"\"\"\n\n\"\"\"\nProblem Statement\nYou are given a positive integer N. You have to write a program to compute the sum of all its non-trivial divisors.\n\nA non-trivial divisor of an integer number N is an integer number which divides the number N with the remainder of 0.\n\nFor example if the number is 6 then the non-trivial divisors are 1, 2 and 3.\n\nNote:\nThe sum of non-trivial divisors is always less than or equal to N.\n\nInput Format\nFirst line of the input contains T, the number of test cases. The test cases follow.\n\nFirst line of each test case contains an integer N.\n\nOutput Format\nPrint the sum of all non-trivial divisors of N.\n\nFor each test case, print the sum of non-trivial divisors in a new line.\n\nConstraints\n1 \\leq T \\leq 100\n1 \\leq N \\leq 10000\n\nExample\nInput:\n2\n8\n24\nOutput:\n8\n46\n\"\"\"\n\n\"\"\"\nSolution\n\"\"\""
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == '11'\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\n\"\"\"\n\n\"\"\"\n2. Check if numbers are consecutive in the input array.\n\nWrite a function:\n\n    def solution(A)\n\nthat, given an array A of N integers, returns 1 if the array contains a subsequence of consecutive numbers (that is, a set of one or more numbers \"A1 < A2 <... < An\" satisfying the inequality \"Ai + 1 = Ai+2 =... = Ai+k\"), otherwise returns 0.\n\nFor example, given array A such that:\n  A[0] = 3\n  A[1] = 4\n  A[2] = 7\n  A[3] = 1\n  A[4] = 2\n  A[5] = 3\n  A[6] = 5\n  A[7] = 3\n\nthe function should return 1, as explained in the example above.\n\nGiven array A such that:\n  A[0] = 3\n  A[1] = 4\n  A[2] = 1\n\nthe function should return 0.\n\nWrite an efficient algorithm for the following assumptions:\n\n        N is an integer within the range [1..100,000];\n        each element of array A is an integer within the range [1..1,000,000,000].\n\"\"\"\n\n\"\"\"\n3. The number of factors of n is equal to the number of prime factors of n.\n\nThe prime factors of n are listed in increasing order.\n\nWrite a function:\n\n    def solution(A)\n\nthat, given an array A of N integers, returns the number of factors of each element of array A.\n\nFor example, given array A such that:\n  A[0] = 12\n  A[1] = 5\n  A[2] = 6\n  A[3] = 15\n  A[4] = 24\n\nthe function should return a sequence (or an array, depending on the language) of four integers:\n\n[4, 2, 6, 4], because:\n\n  12 has 4 factors, namely 1, 2, 3, 4;\n  5 has 2 factors, namely 1 and 5;\n  6 has 6 factors, namely 1, 2, 3, 6;\n  15 has 4 factors, namely 1, 3, 5, 15;\n  24 has 4 factors, namely 1, 2, 3, 4.\n\nWrite an efficient algorithm for the following assumptions:\n\n        N is an integer within the range [1..100,000];\n        each element of array A is an integer within the range [1..2,147,483,647]."
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"432\") == \"YES\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 2') == 'YES'\n\"\"\"\n\nr, g, b = stdin.split()\nprint('YES' if int(r+g+b)%4==0 else 'NO')\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\nprint(solution(\"4 3 2\"))\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2') == 'YES'\nassert solution('4 3 2') == 'NO'\nassert solution('4 3 3') == 'YES'\nassert solution('4 4 3') == 'NO'\n\nprint(solution(input()))\n\n\"\"\"\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('3 1 2'), 'YES')\n        self."
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\n---\nInput:\n\n3 4 5\n\n---\nOutput:\n\nYES\n\n---\nInput:\n\n3 5 4\n\n---\nOutput:\n\nNO\n\n'''"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\nprint(solution(\"4 3 2\"))"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 2\") == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\nassert solution(\"5 3 11\\n2\") == \"5\"\nassert solution(\"5 3 11\\n3\") == \"5\"\nassert solution(\"5 3 11\\n4\") == \"5\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 11\\n1\\n') == '30'\n\n'''\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 11\\n1') == '30'\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 11\") == \"30\"\n\"\"\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\n\n----"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\n\"\"\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"5 3 11\\n1\"\n) == \"30\"\n\n\"\"\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 11\\n1\\n\") == \"30\"\n\"\"\"\n\nimport sys\n\nSUM = 2020"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 11\") == \"30\"\nassert solution(\"1 3 4\") == \"8\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"3 3 3\") == \"0\"\nassert solution(\"2 4 5\") == \"10\"\n\"\"\"\n\n\"\"\"\nSolution:\n\nn = int(stdin.readline())\nwhile n:\n    A, B, C = map(int, stdin.readline().split())\n    print(max(A, B, C))\n    n = n - 1\n\"\"\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(a) == \"Yes\"\nassert solution(b) == \"Yes\"\nassert solution(c) == \"Yes\"\n\nassert solution(d) == \"No\"\nassert solution(e) == \"No\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abaccaba') == 'Yes'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('ab') == 'No'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"abbcccd\") == \"No\"\n\"\"\""
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"aabbcc\") == \"No\"\nassert solution(\"abcdefg\") == \"No\"\nassert solution(\"aaaaaaaa\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\n\"\"\"\nimport sys\nimport re\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('abacc') == 'No'\nassert solution('ab') == 'Yes'\nassert solution('bb') == 'No'\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('aaaaa') == 'No'\n\n\"\"\""
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('a') == 'Yes'\nassert solution('ab') == 'Yes'\nassert solution('abcc') == 'No'\nassert solution('abbccc') == 'Yes'\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"ab\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('abccba') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\\n\") == \"3\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 1\\n2 2\\n3 3\") == \"3\"\n\"\"\"\nimport sys\n\nT = [i.strip().split() for i in sys.stdin.readlines()]\n\nN, K = [int(i) for i in T[0]]\n\narr = [int(i) for i in T[1:]]\n\narr.sort()\nprint(arr[K-1])\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\\n\") == \"3\"\n\nassert solution(\"3 4\\n1 1\\n2 2\\n3 3\\n\") == \"3\"\n\"\"\"\nimport heapq"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n1 1\\n2 2\") == \"3\"\nassert solution(\"1 1\\n2 2\") == \"1\"\nassert solution(\"3 4\\n1 1\\n2 2\\n3 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2\\n3 4') == '3'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 4\n1 1\n2 2\n3 3''') == '3'\nassert solution('''5 5\n1 2\n2 4\n3 1\n4 1\n5 1\n\n-----Sample Output-----\n3\n\nThe resulting array is the same as the one in the problem statement.\nassert solution('''3 4\n1 1\n2 2\n3 3\n\n-----Sample Output-----\n3\n\nThe resulting array is the same as the one in the problem statement.\nassert solution('''5 5\n1 2\n2 4\n3 1\n4 1\n5 1\n\n-----Sample Output-----\n3\n\nThe resulting array is the same as the one in the problem statement.\nassert solution('''5 5\n1 2\n2 4\n3 1\n4 1\n5 1\n\n-----Sample Output-----\n3\n\nThe resulting array is the same as the one in the problem statement.\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 1\\n2 2\\n3 3\\n\") == \"3\"\n\"\"\"\nimport heapq"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n\") == \"3\"\n\"\"\"\n\nfrom heapq import heappop, heappush\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == 2\n\"\"\"\n\nimport sys\nfrom typing import List, Dict, NamedTuple, Tuple, Set\n\nclass IntComputer(NamedTuple):\n    codes: List[int]\n    input_buffer: List[int]\n    output_buffer: List[int]\n    pos: int\n    rel_base: int\n\n    def get_mode(self, pos: int, num_modes: int) -> List[int]:\n        pos_modes = [0] * num_modes\n        modes = self.codes[pos] // 100\n        for i in range(0, num_modes):\n            pos_modes[i] = modes % 10\n            modes //= 10\n        return pos_modes\n\n    def get_operand_address(self, pos: int, num_modes: int) -> List[int]:\n        pos_modes = self.get_mode(pos, num_modes)\n        operand_addresses = [0] * num_modes\n        for i in range(0, num_modes):\n            if pos_modes[i] == 0:\n                operand_addresses[i] = self.codes[self.codes[pos + i + 1]]\n            elif pos_modes[i] == 1:\n                operand_addresses[i] = self.codes[pos + i + 1]\n            elif pos_modes[i] == 2:\n                operand_addresses[i] = self.codes[self.codes[pos + i + 1] + self.rel_base]\n        return operand_addresses\n\n    def get_operand(self, pos: int, num_modes: int) -> List[int]:\n        operand_addresses = self.get_operand_address(pos, num_modes)\n        operands = [0] * num_modes\n        for i in range(0, num_modes):\n            operands[i] = self.codes[operand_addresses[i]]\n        return operands\n\n    def set_operand_address(self, pos: int, num_modes: int) -> List[int]:\n        pos_modes = self.get_mode(pos, num_modes)\n        operand_addresses = [0] * num_modes\n        for i in range(0, num_modes):\n            if pos_modes[i] == 0 or pos_modes[i] == 1:\n                operand_addresses[i] = self.codes[pos + i + 1]\n            elif pos_modes[i] == 2:\n                operand_addresses[i] = self.codes[pos + i + 1] + self.rel_base\n        return operand_addresses\n\n    def set_operand(self, pos: int, num_modes: int) -> List[int]:\n        operand_addresses = self.set_operand_address(pos, num_modes)\n        operands = [0] * num_modes\n        for i in range(0, num_modes):\n            operands[i] = operand_addresses[i]\n            self.codes[operand_addresses[i]] = self.codes[pos + i + 1]\n        return operands\n\n    def run_op(self, op: int, num_modes: int) -> int:\n        if op == 1:\n            self.codes[self.set_operand_address(self.pos, num_modes)[0]] = self.get_operand(self.pos, num_modes)[0] + self.get_operand(self.pos, num_modes)[1]\n            self.pos += num_modes + 1\n        elif op == 2:\n            self.codes[self.set_operand_address(self.pos, num_modes)[0]] = self.get_operand(self.pos, num_modes)[0] * self.get_operand(self.pos, num_modes)[1]\n            self.pos += num_modes + 1\n        elif op == 3:\n            if len(self.input_buffer) == 0:\n                return -1\n            self.codes[self.set_operand_address(self.pos, num_modes)[0]] = self.input_buffer.pop(0)\n            self.pos += num_modes + 1\n        elif op == 4:\n            self.output_buffer.append(self.get_operand(self.pos, num_modes)[0])\n            self.pos += num_modes + 1\n        elif op == 5:\n            if self.get_operand(self.pos, num_modes)[0]!= 0:\n                self.pos = self.get_operand(self.pos, num_modes)[1]\n            else:\n                self.pos += num_modes + 1\n        elif op == 6:\n            if self.get_operand(self.pos, num_modes)[0] == 0:\n                self.pos = self.get_operand(self.pos, num_modes)[1]\n            else:\n                self.pos += num_modes + 1\n        elif op == 7:\n            if self.get_operand(self.pos, num_modes)[0] < self.get_operand(self.pos, num_modes)[1]:\n                self.codes[self.set_operand_address(self.pos, num_modes)[0]] = 1\n            else:\n                self.codes[self.set_operand_address(self.pos, num_modes)[0]] = 0\n            self.pos += num_modes + 1\n        elif op == 8:\n            if self.get_operand(self.pos, num_modes)[0] == self.get_operand(self.pos, num_modes)[1]:\n                self.codes[self.set_operand_address(self.pos, num_modes)[0]] = 1\n            else:\n                self.codes[self.set_operand_address(self.pos, num_modes)[0]] = 0\n            self.pos += num_modes + 1\n        elif op == 9:\n            self.rel_base += self.get_operand(self.pos, num_modes)[0]\n            self.pos += num_modes + 1\n        else:\n            print(\"Unknown opcode:\", op)\n        return 0"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n1 0\\n') == '2'\nassert solution('2 2\\n1 1\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2\\n') == '2'\nassert solution('2 1\\n') == '1'\nassert solution('1 1\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n\") == \"2\"\n\"\"\"\n\nimport sys\n\nN, K = list(map(int, sys.stdin.readline().split()))\n\ndp = [[0 for _ in range(K + 1)] for _ in range(N + 1)]\ndp[1][1] = 1\nfor i in range(2, N + 1):\n    for j in range(1, K + 1):\n        dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\nprint(dp[-1][-1])\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"3 2\") == \"6\"\nassert solution(\"4 2\") == \"24\"\nassert solution(\"5 2\") == \"120\"\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n') == '2'\nassert solution('3 2\\n') == '4'\nassert solution('4 2\\n') == '8'\n\n\"\"\"\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '1'\nassert solution('0 1') == '1'\nassert solution('1 1') == '0'\n\n'''\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 10 15') == '10'\n\n\"\"\"\nimport sys\nimport os\nimport timeit\nfrom functools import reduce"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20 3\\n5 10 15') == '10'\n\"\"\""
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 10 15') == '10'\n\"\"\"\n\nimport sys\n\nK, N = map(int, sys.stdin.readline().split())\n\nhouses = list(map(int, sys.stdin.readline().split()))\nhouses.sort()\n\ni = 0\nj = N - 1\ntotal = 0\nwhile i < j:\n    total += houses[j] - houses[i]\n    i += 1\n    j -= 1\n\nprint(total)\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 3\\n5 10 15\") == \"10\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n1 3') == '2'\nassert solution('5 10 15\\n2 4 6 8 10') == '10'\n\"\"\"\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 3\\n5 10 15\\n\") == 10\n\"\"\"\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\n\"\"\"\nYou are given an odd-length array of integers, in which all of them are the same, except for one single number.\n\nComplete the method which accepts such an array, and returns that single different number.\n\nThe input array will always be valid! (odd-length >= 3)\n\"\"\"\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20 3\\n5 10 15\\n\") == \"10\"\n\n\"\"\"\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 10 15') == '10'\n\"\"\"\n\nK, N = map(int, stdin.readline().split())\nA = list(map(int, stdin.readline().split()))\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 3\\n5 10 15\") == \"10\"\n\"\"\""
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 6 6\") == \"20\"\nassert solution(\"1 2 3 4\") == \"1\"\nassert solution(\"10 10 10 10\") == \"100\"\nassert solution(\"5 5 5 5\") == \"50\"\n\"\"\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nprint(\"Passed!\")\n\n----------------------------------------\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\n\"\"\""
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\n\n\"\"\""
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"5 4 3 2\") == \"20\"\n\"\"\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5 2 7') == '15'\nassert solution('1 2 3 4') == '10'\nassert solution('1 2 2 4') == '8'\nassert solution('1 1 1 1') == '1'\nassert solution('10 10 10 10') == '10'\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"5 6 2 3\") == \"8\"\nassert solution(\"1 1 1 1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\n\"\"\""
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\n\nassert solution(\"1 1 1 1\") == \"1\"\n\nassert solution(\"10 10 10 10\") == \"50\"\n\nassert solution(\"3 3 3 3\") == \"9\"\n\n\"\"\"\n\nA, B, C, D = map(int, stdin.split())\nprint(max(A*B, C*D))\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\n\"\"\"\n\nN = int(input())\nlines = []\n\nfor i in range(N):\n    lines.append(input())\n\nAC, WA, TLE, RE = 0, 0, 0, 0\n\nfor i in range(len(lines)):\n    if lines[i] == 'AC':\n        AC += 1\n    elif lines[i] == 'WA':\n        WA += 1\n    elif lines[i] == 'TLE':\n        TLE += 1\n    else:\n        RE += 1\n\nprint('AC x',AC)\nprint('WA x',WA)\nprint('TLE x',TLE)\nprint('RE x',RE)\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_data) == expected_result\nprint(f\"{solution(test_data) == expected_result}\")\n\"\"\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('AC') == 'AC x 3'\nassert solution('WA') == 'WA x 1'\nassert solution('TLE') == 'TLE x 2'\nassert solution('RE') == 'RE x 0'\n\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''6\nAC\nTLE\nAC\nAC\nWA\nTLE\n''') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\\n'\n\n-----Explanation-----\nIn this case, there are 6 test cases.\nFor each test case, the verdict is AC. There are three test cases for which the verdict is WA, and two test cases for which the verdict is TLE.\nThe function solution(stdin: str) returns a string that specifies the number of times each verdict appears, in the format listed above.\n\"\"\"\nimport collections\n\nclass Counter(dict):\n    def __missing__(self, key):\n        return 0"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AC\\nTLE\") == \"AC x 2\\nTLE x 1\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('AC\\nTLE\\nAC\\nAC\\nWA\\nTLE') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\n\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n\") == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('AC') == 'AC x 3'\nassert solution('WA') == 'WA x 1'\nassert solution('TLE') == 'TLE x 2'\nassert solution('RE') == 'RE x 0'\nassert solution('AC') == 'AC x 3'\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\nprint('Sample pass.')\n\n\"\"\"\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('21') == '27'\n\"\"\"\nimport math\nM = int(input())\nprint(str(math.ceil((M * 60 + 30) / 60) - math.ceil((M * 60 + 30 - 24) / 60)))\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('21') == '27'"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('21') == '27'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"21\") == \"27\"\nprint(\"All tests passed.\")\n\n'''\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('21') == '27'\nprint(solution('21'))\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\"\n\nM = int(input())\n\nprint(24 - M)\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\"\n\nm = int(input())\n\nhours = (30 - m) * 24\nprint(hours)\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('21') == '27'\n\"\"\""
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('21') == '27'\n\"\"\"\n\nM = int(input())\n\nhour = M - (M % 12) + 12\nprint(hour)"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(int(input()) + int(input()))\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 3') == '9'\n\"\"\""
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'error'\nassert solution('1 2') == 'error'\nassert solution('1 3') == '4'\nassert solution('1 9') == 'error'\nassert solution('1 9') == 'error'\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 3\\n') == '9'\n\"\"\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2\\n') == '3'\nassert solution('2 3\\n') == '5'\nassert solution('10 2\\n') == 'error'\nassert solution('5 10\\n') == '15'\n\"\"\""
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 3\\n') == '9'\nassert solution('6 3\\n')!= '10'\n\n\"\"\"\n\nimport sys\nfrom typing import AnyStr\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n\") == \"9\"\nassert solution(\"7 2\\n\") == \"error\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '6 3'\n) == '9'\n\nassert solution(\n    '5 4'\n) == 'error'\n\nassert solution(\n    '5 6'\n) == '11'\n\n\"\"\"\n\nfrom ast import literal_eval\n\nA, B = map(int, literal_eval(stdin()))\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 3\\n') == '9'\n\n\"\"\"\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n6 3\n''') == '9'"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 3 7 9') == '7'\n\nprint(solution('4 2 3 7 9'))\n\"\"\"\nimport sys"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\nprint(solution(\"4\\n2 3 7 9\"))\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2,3,7,9) == 7\nassert solution(4,2,3,7,9) == 7\nassert solution(4,2,3,7,9) == 7\nassert solution(4,2,3,7,9) == 7\nassert solution(4,2,3,7,9) == 7\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 7 9') == '7'\n\"\"\"\n\n\"\"\"\n--------------------\n|  | | | | | | | |\n--------------------\n|  | | | | | | | |\n--------------------\n|  | | | | | | | |\n--------------------\n|  | | | | | | | |\n--------------------\n|  | | | | | | | |\n--------------------\n|  | | | | | | | |\n--------------------\n|  | | | | | | | |\n--------------------\n|  | | | | | | | |\n--------------------\n|  | | | | | | | |\n--------------------\n|  | | | | | | | |\n--------------------\n|  | | | | | | | |\n--------------------\n|  | | | | | | | |\n--------------------\n\"\"\"\n\nn = int(input())\nx = list(map(int, input().split()))\n\nl1 = []\nfor i in range(n-1):\n    if x[i]>x[i+1]:\n        l1.append(x[i+1])\n    else:\n        l1.append(x[i])\nl1.append(x[0])\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_data) == '7'\n\n\"\"\"\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\nassert solution(\"3\\n1 2 4\") == \"2\"\n\"\"\"\n\nN = int(input())\ncoordinates = list(map(int, input().split()))\ndistance = [coordinates[i] - coordinates[0] for i in range(1, N)]\n\nmin_distance = distance[0]\nfor i in range(1, N - 1):\n    if distance[i] < min_distance:\n        min_distance = distance[i]\n\nprint(min_distance)\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 7 9\\n\") == \"7\"\nassert solution(\"3\\n2 7 9\\n\") == \"3\"\nassert solution(\"1\\n1 1\\n\") == \"0\"\nassert solution(\"1\\n1 2\\n\") == \"1\"\nassert solution(\"2\\n1 1\\n\") == \"1\"\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 7 9') == '7'\nassert solution('4 6 2 7 9') == '7'\nassert solution('5 1 2 7 9') == '7'\n\n\"\"\""
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3\\n2 3') == 'Yes'\nassert solution('1 2\\n2 3') == 'No'\nassert solution('2 2\\n1 2') == 'No'\nassert solution('2 2\\n2 2') == 'Yes'\nassert solution('3 2\\n1 2') == 'Yes'\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3\") == \"Yes\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3\\n4 8\\n10 12') == 'Yes'\nassert solution('1 2\\n3 4\\n5 6') == 'No'\n\"\"\""
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3\\n3 1') == 'Yes'\nassert solution('1 3\\n5 1') == 'No'\nassert solution('1 2\\n1 1') == 'Yes'\nassert solution('1 2\\n2 1') == 'No'\nassert solution('1 2\\n3 1') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3\\n') == 'Yes'\n\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    a, b = line.split()\n    a, b = int(a), int(b)\n    if a % 3 == 0 and b % 3 == 0:\n        print('Yes')\n    else:\n        print('No')"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3') == 'Yes'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3') == 'Yes'\n\"\"\"\n\nx, y = map(int, stdin.split())"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == 'Even'\nassert solution(\"3 4\") == 'Odd'\n\nprint(solution(\"4 3\"))\nprint(solution(\"3 4\"))\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"Even\"\nassert solution(\"3 4\") == \"Odd\"\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4') == 'Even'\nassert solution('4 2') == 'Odd'\n\"\"\"\n\na, b = map(int, stdin.readline().split())"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\") == \"Even\"\n\"\"\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == \"Even\"\n\"\"\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4') == 'Even'\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4') == \"Even\"\nassert solution('1 1') == \"Odd\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4') == 'Even'\nassert solution('3 -4') == 'Even'\nassert solution('-3 4') == 'Odd'\nassert solution('3 -4') == 'Odd'\n\"\"\"\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"Even\"\nassert solution(\"1 2\") == \"Odd\"\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4') == 'Even'\n\"\"\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 6\\n\") == \"2\"\nassert solution(\"10 5\\n\") == \"10\"\nassert solution(\"9 1\\n\") == \"9\"\nassert solution(\"2 2\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 6\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 6\") == 2\n\"\"\""
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 6\") == 2\n\n---\nFind a solution which maximises the number of Scc groups\n\nSnuke has N S-shaped pieces and M c-shaped pieces. He wants to create as many Scc groups as possible.\n\n---\nFind the maximum number of Scc groups that can be created when Snuke has N S-shaped pieces and M c-shaped pieces.\n\n---\nWrite a solution that maximises the number of Scc groups in a reasonable amount of time.\n\n---\nWrite 5 lines of code to test the correctness of solution:\nSnuke loves puzzles.\nToday, he is working on a puzzle using S- and c-shaped pieces.\nIn this puzzle, you can combine two c-shaped pieces into one S-shaped piece, as shown in the figure below:\nSnuke decided to create as many Scc groups as possible by putting together one S-shaped piece and two c-shaped pieces.\nFind the maximum number of Scc groups that can be created when Snuke has N S-shaped pieces and M c-shaped pieces.\n\n---\nConstraints\n - 1 \u2264 N,M \u2264 10^{12}\n\n---\nInput\nThe input is given from Standard Input in the following format:\nN M\n\n---\nOutput\nPrint the answer.\n\n---\nSample Input\n1 6\n\n---\nSample Output\n2\n\n---\nWrite the solution that maximises the number of Scc groups in a reasonable amount of time.\n\n---\nWrite 5 lines of code to test the correctness of solution:\nSnuke loves puzzles.\nToday, he is working on a puzzle using S- and c-shaped pieces.\nIn this puzzle, you can combine two c-shaped pieces into one S-shaped piece, as shown in the figure below:\nSnuke decided to create as many Scc groups as possible by putting together one S-shaped piece and two c-shaped pieces.\nFind the maximum number of Scc groups that can be created when Snuke has N S-shaped pieces and M c-shaped pieces.\n\n---\nConstraints\n - 1 \u2264 N,M \u2264 10^{12}\n\n---\nInput\nThe input is given from Standard Input in the following format:\nN M\n\n---\nOutput\nPrint the answer.\n\n---\nSample Input\n1 6\n\n---\nSample Output\n2\n\n---\nWrite the solution that maximises the number of Scc groups in a reasonable amount of time.\n\n---\nWrite 5 lines of code to test the correctness of solution:\nSnuke loves puzzles.\nToday, he is working on a puzzle using S- and c-shaped pieces.\nIn this puzzle, you can combine two c-shaped pieces into one S-shaped piece, as shown in the figure below:\nSnuke decided to create as many Scc groups as possible by putting together one S-shaped piece and two c-shaped pieces.\nFind the maximum number of Scc groups that can be created when Snuke has N S-shaped pieces and M c-shaped pieces.\n\n\"\"\"\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 6\") == 2\n\"\"\"\n\nimport sys\n\nn, m = [int(i) for i in sys.stdin.readline().split()]"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 6\\n') == 2\n\"\"\""
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 6\\n\") == \"2\"\nassert solution(\"6 1\\n\") == \"1\"\nassert solution(\"1 2\\n\") == \"0\"\nassert solution(\"5 2\\n\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4\") == 2\nassert solution(\"1 1\") == 1\nassert solution(\"1 10\") == 1\n\"\"\"\n\nimport sys\n\nN, M = map(int, input().split())\n\nprint(min(N, (N + 1) // 2, M))\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 6\\n') == '2'\n\"\"\""
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 6\\n') == '2'\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2 1 4\\n2\\n1 1\\n2 3') == '6\\n9'"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\nprint(solution(\"5\\n2 1 4\\n2\\n1 1\\n2 3\"))"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\\n\") == \"6\\n9\"\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\"\"\""
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 4\") == \"6 9\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\nprint(solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\"))\nprint(solution(\"3\\n1 1 3\\n2 4\"))"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n3\n2 1 4\n2\n1 1\n2 3\n''') == '''\n6\n9'''\n\nassert solution('''\n3\n1 1 4\n2\n1 1\n2 3\n''') == '''\n4\n7'''\n\nassert solution('''\n1\n3 1\n2\n1 3\n''') == '''\n1'''\n\nassert solution('''\n1\n2 2\n1\n2 2\n''') == '''\n1\n5\n'''\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 4\\n2\\n1 1\\n2 3\") == \"6 9\"\nassert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6 9\"\n\"\"\"\n\nfrom collections import defaultdict\nimport numpy as np"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1\\n1\\n2 3\") == \"6\\n9\"\n\"\"\"\n\nfrom typing import List, Set\nimport math\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(solution.__doc__, '1000 8\\n1 3 4 5 6 7 8 9') == '2000'\n\"\"\""
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\">1000 8\\n>1 3 4 5 6 7 8 9\") == \"2000\"\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1000 8\n1 3 4 5 6 7 8 9\n''') == '2000'\nprint(solution(input()))"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\\n\") == \"2000\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\"\"\"\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9\\n') == '2000'"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1000 8\n1 3 4 5 6 7 8 9''') == '2000'\nprint('Test passed')\n\n-----\n''')"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\\n\") == \"2000\"\n\n\"\"\""
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == '2'\nassert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == '2'\n\n'''"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '0'\nassert solution('2\\n2\\n1 2') == '2'\nassert solution('2\\n2\\n1 2\\n2 3') == '1'\nassert solution('3\\n2\\n1 2\\n2 3\\n1 3') == '2'\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\\n') == '2'\n\"\"\""
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == '2'\n\"\"\"\n\nn, m = [int(x) for x in stdin.split()]\nhs, ab = [[int(x) for x in stdin.split()] for _ in range(n)], []\nfor _ in range(m):\n    ab.append([int(x) for x in stdin.split()])\na, b = [], []\nfor i in range(m):\n    a.append(ab[i][0] - 1)\n    b.append(ab[i][1] - 1)\n\ngoods = []\nfor i in range(n):\n    goods.append(True)\n\nfor i in range(n):\n    for j in range(m):\n        if hs[i][0] <= hs[a[j]][0] and hs[i][0] <= hs[b[j]][0]:\n            goods[i] = False\n        elif hs[i][0] >= hs[a[j]][0] and hs[i][0] >= hs[b[j]][0]:\n            goods[i] = False\n        elif hs[i][1] <= hs[a[j]][1] and hs[i][1] <= hs[b[j]][1]:\n            goods[i] = False\n        elif hs[i][1] >= hs[a[j]][1] and hs[i][1] >= hs[b[j]][1]:\n            goods[i] = False\n\ngood_obs = []\nfor i in range(n):\n    if goods[i]:\n        good_obs.append(i + 1)\n\nprint(len(good_obs))\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == '2'\n\"\"\"\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\\n\") == \"2\"\n\"\"\"\n\n\"\"\"\n\u6700\u521d\u306b\u96c6\u5408\u3092\u4f5c\u6210\u3057\u3066\u6b8b\u308a\u306e\u30eb\u30fc\u30c8\u304c\u5b8c\u6210\u3057\u3066\u3044\u308b\u3082\u306e\u3068\u3057\u3066\u7ba1\u7406\u3059\u308b\n\"\"\"\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 3\n1 2 3 4\n1 3\n2 3\n2 4''') == '2'\nassert solution('''3 3\n1 2 3\n1 3\n2 3''') == '1'\n\n---\n'''\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == 10\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"10\"\n\"\"\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"10\"\n\"\"\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3') == '10'\nassert solution('10 3') == '100'\nassert solution('6 5') == '25'\n\"\"\"\n\nimport math\n\nclass Board:\n    def __init__(self, n: int, k: int):\n        self.n = n\n        self.k = k\n        self.num = 1\n    \n    def get_num(self):\n        return self.num\n    \n    def change_num(self, new_num: int):\n        self.num = new_num\n\n    def get_next_num(self, op: str, val: int):\n        if op == 'A':\n            self.change_num(self.get_num() * 2)\n        if op == 'B':\n            self.change_num(self.get_num() + val)"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '3'\nassert solution('2 2') == '5'\nassert solution('3 4') == '7'\n\"\"\"\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n3''') == '10'\n\nassert solution('''5\n2''') == '1'\n\nassert solution('''8\n0''') == '0'\n\nassert solution('''5\n3''') == '1'\n\nassert solution('''1\n1''') == '1'"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '4\\n3\\n') == '10'\nassert solution(\n    '5\\n2\\n') == '7'\nassert solution(\n    '3\\n2\\n') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1) == \"0\"\nassert solution(0) == \"1\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\nassert solution('0.5') == '0'\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\n\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '0'\nassert solution('0.00001') == '0'\nassert solution('0.1') == '1'\nassert solution('0.5') == '1'\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\n\"\"\"\n\nfrom collections import namedtuple\n\n\nInput = namedtuple('Input', ['x'])"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"1\"\n\n-----\nGiven a string s, return the number of times that the string \"Emre\" occurs anywhere in the given string.\n\nFor example, given s = \"Emre is a name\", return 1.\n\n-----Constraints-----\n - s has length at most 10000.\n - s consists of only lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\ns\n\n-----Output-----\nPrint the number of times that \"Emre\" occurs in s.\n\n-----Sample Input-----\nEmre is a name\n\n-----Sample Output-----\n1"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"1\"\n\"\"\"\n\nx = int(input())\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\n\"\"\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"1+2+5\") == \"8\"\nassert solution(\"12+5\") == \"17\"\nassert solution(\"125\") == \"176\"\nassert solution(\"1+2+5\") == \"8\""
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"125\") == \"176\"\n\"\"\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('125') == '176'\n\"\"\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('125') == '176'\nassert solution('1234') == '24'\nassert solution('1425') == '2'\nassert solution('1253') == '17'\nassert solution('79') == '7'\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"123456789\") == \"362880\"\n\"\"\""
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('125') == '176'\nassert solution('12') == '17'\nassert solution('1') == '8'\n\"\"\"\nfrom sys import stdin, stdout\nimport re\n\nregex = re.compile('[0-9+]')\nregex_for_no_plus = re.compile('[0-9]{2,3}')\n\nregex_for_no_plus_at_least_one_plus = re.compile('[0-9+]+')\nregex_for_no_plus_at_least_two_plus = re.compile('[0-9+]{2,3}')"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"123\") == \"123\"\nassert solution(\"+1+2\") == \"5\"\nassert solution(\"+1+1+1\") == \"6\"\nassert solution(\"+1+1+1+1\") == \"10\"\nassert solution(\"+1+1+1+1+1\") == \"11\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"1125\") == \"210\"\nassert solution(\"9\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1234') == '10'\nassert solution('1325') == '26'\nassert solution('9') == '9'\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"125\") == \"176\"\n\"\"\"\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n1 2 3 4 5 6') == '1'\n\"\"\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('3\\n1 2 5') == '2'\nassert solution('3\\n1 2 3 4 5 6') == '1'\n\"\"\"\nimport sys\n\nN = int(input())\nA = list(map(int, input().split()))\n\nmin_abs_val = sys.maxsize\ni = N - 1\nwhile i > 0:\n    if A[i] <= min_abs_val:\n        min_abs_val = A[i]\n        break\n    else:\n        i -= 1\n    \nx, y = 0, 0\ni = N - 1\nwhile i >= 0:\n    if A[i] == min_abs_val:\n        x, y = x + 1, y + 1\n    elif x > 0 and y > 0:\n        break\n    else:\n        x, y = x + 1, y\n    i -= 1\n\nprint(min_abs_val)"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 1 2 3 4 5 6\") == \"1\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\nassert solution(\"7\\n5 5 4 3 3 2\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n1 2 3 4 5 6') == '1'\n\"\"\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\nassert solution(\"6\\n1 2 3 4 5\") == \"0\"\nassert solution(\"6\\n1 2 3 4\") == \"3\"\nassert solution(\"5\\n1 2 3 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n1 2 3 4 5 6') == '1'\n\"\"\"\n\n\"\"\"\n1. Add the first two cards to the deck\n2. Add N-2 cards to the deck\n3. Add the last card\n4. remove N-2 cards from the deck\n5. Add 1 to the sum\n6. subtract the sum from the sum\n\"\"\"\n\nN = int(stdin.readline().strip())\ndeck = list(map(int, stdin.readline().strip().split(' ')))\n\ndeck_sum = sum(deck[:2])\n\nprint(abs(deck_sum - sum(deck[2:])))"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\n1 2 3 4 5 6') == '1'\n\"\"\""
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20\") == \"15800\"\n\"\"\""
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20') == '15800'\n\"\"\"\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == '10'\nassert solution('100') == '20000'\nassert solution('1000') == '200000'\nassert solution('10000') == '2000000'\nassert solution('100000') == '20000000'\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"800\"\n\"\"\"\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('4') == '15800'"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('12') == '12'\nassert solution('123') == '123'\nassert solution('1234') == '1234'\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20\") == \"15800\"\nprint(solution(\"20\"))\n\nimport sys\n\nlines = iter(sys.stdin)\nn = int(next(lines))\nnums = [int(next(lines)) for _ in range(n)]\n\nprint(sum(nums) - sum(set(nums)))\n\n------Sources------\nhttps://www.geeksforgeeks.org/find-the-difference-of-two-sums/\n\n------Notes------\n\n\"\"\"\n\nclass Solution:\n    def getDifference(self, n):\n        s = 0\n        for i in range(1, n + 1):\n            s += i\n        return s - sum(range(1, n + 1))\n\n\n\nn = 20\ns = Solution()\nprint(s.getDifference(n))\n\n\"\"\"\nclass Solution:\n    def __init__(self):\n        self.primes = []\n\n    def sieve(self, N):\n        self.primes = [True for i in range(N + 1)]\n        p = 2\n        while p * p <= N:\n            if self.primes[p] == True:\n                for i in range(p * p, N + 1, p):\n                    self.primes[i] = False\n            p += 1\n        for p in range(2, N + 1):\n            if self.primes[p]:\n                self.primes[p] = p\n    def prime_factorize(self, n):\n        a = []\n        while n % 2 == 0:\n            a.append(2)\n            n //= 2\n        f = 3\n        while f * f <= n:\n            if n % f == 0:\n                a.append(f)\n                n //= f\n            else:\n                f += 2\n        if n!= 1:\n            a.append(n)\n        return a\n    def getDifference(self, n):\n        for p in self.primes:\n            c = 0\n            while n % p == 0:\n                c += 1\n                n //= p\n            if c > 0:\n                return n * (p ** c - 1) // (p - 1)\n        return n - 1\n\n\nimport sys\nlines = iter(sys.stdin)\nN = int(next(lines))\n\ns = Solution()\ns.sieve(N)\nnums = [int(next(lines)) for _ in range(N)]\nprint(s.getDifference(nums))\n\n\"\"\""
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20') == '15800'\nprint(solution('20'))\n\n'''\nfrom math import gcd"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '3'\nassert solution('4') == '3'\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20\") == \"15800\"\n\"\"\""
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\n\"\"\"\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == \"abc\"\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ant\") == \"abc\"\n\nassert solution(\"obe\") == \"abc\"\n\nassert solution(\"rec\") == \"abc\""
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('ant') == 'abc'\nassert solution('abc') == 'abc'\nassert solution('antab') == 'abc'\nassert solution('antbca') == 'abc'\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\nprint(\"Passed all tests!\")"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\n\"\"\""
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\nassert solution(\"\") == \"\"\n\"\"\"\n\nimport sys\n\nS = sys.stdin.read().splitlines()\nS = list(map(str, S))\nfor i in range(len(S)):\n    for j in range(len(S[i])):\n        print(S[i][j], end='')"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\n---Output---\nabc\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\nassert solution('baa') == 'aab'\nassert solution('tac') == 'tac'\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"101\") == \"2\"\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"101\") == 2\nassert solution(\"101101\") == 0\nassert solution(\"1010\") == 2\nassert solution(\"101101010\") == 1\nassert solution(\"10110101010\") == 3\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('101') == '2'\n\"\"\"\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"101\") == 2\n\"\"\"\n\nimport re"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"101\") == 2\n\n\"\"\"\nimport math"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101\") == 2\n\"\"\"\nimport math\n\ns = stdin.split()\nl = len(s)\nresult = 0\nfor i in range(l):\n    if int(s[i]) == 1:\n        result += int(math.sqrt(i))\nprint(result)\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('101') == '2'\n\n'''"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('101') == '2'\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"101\") == \"3\"\nassert solution(\"011\") == \"1\"\nassert solution(\"101101\") == \"3\"\nassert solution
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('101') == '3'\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3\\n10000\\n9000') == '48000'\n\"\"\"\n\nN, K, X, Y = input().split('\\n')\n\nN, K, X, Y = int(N), int(K), int(X), int(Y)\n\nk = K + 1\n\nfee = 0\n\nfor i in range(1, K + 1):\n    if i == K:\n        fee += X * (K - i + 1)\n    else:\n        fee += X * i\n\nfor i in range(K + 1, N + 1):\n    if i == K + 1:\n        fee += X * K\n    else:\n        fee += X * (k - K)\n        k += 1\n\nprint(fee)\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2\\n2\\n10000\\n9000\") == \"80000\"\n\"\"\"\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n3\\n10000\\n9000\\n') == '48000'\n\"\"\"\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\") == \"48000\"\n\"\"\"\n\nN = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\n\nprint(K * X + N * Y)\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n3\\n10000\\n9000') == '48000'\n\"\"\"\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\") == \"48000\"\n\n\"\"\"\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3\\n10000\\n9000\\n\") == \"16000\"\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\\n\") == \"48000\"\n\"\"\"\n\nN, K, X, Y = [int(i) for i in stdin.split()]\n\nprint(X * K + (X * N - K) * Y)"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\") == \"48000\"\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\n07.\nDividing a number:\n\nWrite a program that reads two integers a and b and divides them. Print the quotient and the remainder.\n\n-----Constraints-----\n - 1 \\leq a, b \\leq 10^5\n - a, b are integers\n\n-----Input-----\nThe input consists of a single line with two integers: a and b.\n\n-----Output-----\nPrint the quotient and the remainder, separated by a space.\n\n-----Sample Input-----\n5 7\n\n-----Sample Output-----\n1 2\n\nYou can use the modulus operator to check if the remainder is equal to zero.\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 + 2') == '3'\nprint(solution('1 + 2'))\n\n\"\"\"\n\nimport ast\nimport sys\nfrom typing import List, Tuple\n\nfrom ast import AST, Expr, Subscript, Name\n\nfrom utils import run\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\">1 + 3\") == \"5\"\nassert solution(\">1 + 4\") == \"5\"\nassert solution(\">1 + 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 + 2\") == \"3\"\nassert solution(\"1 - 2\") == \"-1\"\nassert solution(\"2 + 3\") == \"5\"\nassert solution(\"2 - 3\") == \"-1\"\nassert solution(\"1 + -1\") == \"0\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 + 2\") == \"3\"\nassert solution(\"1 - 2\") == \"-1\"\nassert solution(\"2 - 1\") == \"1\"\nassert solution(\"3 + 4\") == \"7\"\nassert solution(\"3 - 4\") == \"-1\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\"\"\"\n\n\"\"\"\nTODO: Update docstring.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 + 2') == '3'\nprint(solution('1 + 2'))\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(sys.stdin.readline()) == sys.stdin.readline()\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 + 2') == '3'\n\n-----Test Case-----\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 + 2') == '3'\n\"\"\"\n\nstdin = input()\na = int(stdin.split(\" \")[0])\nb = int(stdin.split(\" \")[1])\n\nprint(a+b)\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000\") == \"ABC\"\n\n---\n\n\n'''\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000\") == \"ABC\"\nassert solution(\"500\") == \"ARC\"\nassert solution(\"100\") == \"ABC\"\n\"\"\"\n\nfrom math import ceil, floor"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1000') == 'ABC'\nassert solution('3010') == 'ARC'\n\"\"\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\""
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000') == 'ABC'\nassert solution('1200') == 'ARC'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000\") == \"ABC\"\nprint(solution(\"1000\"))\n\"\"\"\n\na = input()"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000\") == \"ABC\"\n\n------\n\nTest.assert_equals(solution(\"1000\"), \"ABC\")\nTest.assert_equals(solution(\"1337\"), \"ARC\")\nTest.assert_equals(solution(\"0\"), \"ABC\")\nTest.assert_equals(solution(\"-1\"), \"ARC\")\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\"\n\nx = int(input())\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000\") == \"ABC\"\nprint(solution(\"1000\"))\n\nSmeke's current rating is more than or equal to 1200, thus the output should be ARC.\nassert solution(\"1200\") == \"ARC\"\nprint(solution(\"1200\"))\n\nHow to run the code:\n1. Open the \"Run\" window inside VS Code.\n2. Press the green button in the bottom-right corner, and Run the Tests.\n3. If you get an error, fix the error and press the green button again.\n4. Check the output at the bottom-right corner to see if your submission is correct.\n\n\"\"\""
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\nassert solution(\"1000 1000 1000\") == \"0\"\nassert solution(\"200 200 200\") == \"0\"\nassert solution(\"10 10 10\") == \"10\"\nassert solution(\"1 2 3\") == \"0\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"700 600 780\") == 1300\nassert solution(\"501 600 790\") == 1480\n\"\"\""
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('700 600 780') == '1300'\nassert solution('4000 3000 1000') == '8000'\n\"\"\"\n\na, b, c = map(int, input().split())"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\n\"\"\""
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('700 600 780') == '1300'\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('700 600 780') == '1300'\n\"\"\""
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"700 600 780\"\n) == \"1300\"\n\nassert solution(\n    \"600 600 780\"\n) == \"1380\"\n\nassert solution(\n    \"600 600 780\"\n) == \"1380\"\n\nassert solution(\n    \"600 600 780\"\n) == \"1380\"\n\nassert solution(\n    \"600 600 780\"\n) == \"1380\""
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\n\"\"\"\n\nimport sys\nfrom math import ceil\nfrom collections import Counter\nfrom typing import List, Set, Tuple, Dict\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('700 600 780') == '1300'\n\"\"\"\na, b, c = map(int, stdin.split())\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\""
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\na\\nc\\n\") == \"#abc#\\n#arc#\\n#abc#\\n#arc#\\n#abc#\\n#arc#\\n#abc#\\n#arc#\\n#abc#\\n#arc#\\n#abc#\\n#arc#\\n#abc#\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\"\nassert solution(\"3 4\\nabcdef\\nhijkl\\nmnopqr\") == \"###\\n#abc#\\n#def#\\n#ghi#\\n#jkl#\\n#mno#\\n#pqr#\\n###\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\nab\\nc\") == \"#####\\n#ab#\\n#c#\\n#####\"\nassert solution(\"2 3\\nabc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\"\nassert solution(\"2 3\\nabac\\narc\") == \"#####\\n#abac#\\n#arc#\\n#####\"\n\nassert solution(\"5 5\\nabracadabra\\nabc\") == \"#####\\n#abracadabra#\\n#abc#\\n#####\\n#####\"\n\nassert solution(\"5 5\\nabracadabra\\narc\") == \"#####\\n#abracadabra#\\n#arc#\\n#####\\n#####\""
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\naa\\ncc\") == \"#####\\n#aa#\\n#cc#\\n#####\"\n\nprint(solution(\"2 3\\naa\\ncc\"))\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abc\\narc\\n') == '#####\\n#abc#\\n#arc#\\n#####'"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"2 3\nabc\narc\"\"\") == \"\"\"#####\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\na\\nc') == '####\\n#a#\\n#c#\\n####'\nassert solution('1 2\\na') == '#\\na'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"#abc#\\n#arc#\\n#abc#\"\nassert solution(\"5 5\\nabcdefghijklm\") == \"#abcdefgh#\\n#ijklm#\\n#mnopq#\\n#rs#t#uv#w#xy#z#\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\nabc\\narc') == '#####\\n#abc#\\n#arc#\\n#####'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\"\nassert solution(\"abc\\narc\\ndef\") == \"#####\\n#abc#\\n#arc#\\n#def#\\n#####\"\nassert solution(\"abc\\narc\\ndef\\nghi\\njkl\") == \"#####\\n#abc#\\n#arc#\\n#def#\\n#ghi#\\n#jkl#\\n#####\"\n\n\"\"\"\nfrom io import StringIO\n\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_simple_1(self):\n        stdin = StringIO(\"2 3\\na\\nb\\nc\\n\")\n        self.assertEqual(solution(stdin), \"#####\\n#a#b#\\n#c##\\n#####\")\n\n    def test_simple_2(self):\n        stdin = StringIO(\"2 3\\nd\\ne\\nf\\n\")\n        self.assertEqual(solution(stdin), \"#####\\n#d#e#\\n#f##\\n#####\")\n\n    def test_simple_3(self):\n        stdin = StringIO(\"2 3\\nab\\nc\\nd\\n\")\n        self."
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"IIDID\") == 2\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('IIDID') == '2'\nassert solution('IDIDI') == '2'\n\"\"\""
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('IIDID') == 2\nprint(solution(stdin), end = '\\n\\n')\n\n\n-----Solution-----\nx = 0\nN = int(input())\nS = input()\nfor i in range(N):\n    if S[i] == 'I':\n        x += 1\n    else:\n        x -= 1\nprint(x)\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('I') == '1'\nassert solution('IDID') == '2'\nassert solution('IDIDID') == '3'\nassert solution('IDIDIDID') == '4'\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    'IIDID'\n    ) == 2\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('IIDID') == 2\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"III\") == 3\nassert solution(\"DDI\") == 1\nassert solution(\"IDID\") == 2\n\"\"\"\nimport sys"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('IIDDI') == 2\n\"\"\"\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1IIDID') == '1'\nassert solution('3IIDID') == '2'\nassert solution('3IDID') == '1'\nassert solution('3IIDID') == '1'\nassert solution('5IDID') == '3'\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"IIDID\") == 2\n\"\"\"\n\nfrom collections import deque\n\nclass Solution:\n    # Time complexity: O(N)\n    # Space complexity: O(1)\n    def find_max(self, s: str) -> int:\n        # Initialize x to the first character\n        x = int(s[0])\n        result = x\n        for i in range(1, len(s)):\n            if s[i] == 'I':\n                x += 1\n            elif s[i] == 'D':\n                x -= 1\n            result = max(result, x)\n        return result\n\n    def solution(self, s: str) -> int:\n        return self.find_max(s)\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11009 11332') == 4\nassert solution('22222') == 0\nassert solution('11111') == 6\nassert solution('11101') == 3\nassert solution('33') == 0\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11009 11332\") == 4\nassert solution(\"1 2\") == 1\n\"\"\""
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11009 11332') == 4\nassert solution('999 8999') == 998\nassert solution('22222') == 44444\n\n\"\"\"\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11009 11332\") == 4\n\"\"\"\n\n\"\"\"\nFind the number of palindromic numbers among the integers between A and B (inclusive).\n\n-----Constraints-----\n - 10000 \\leq A \\leq B \\leq 99999\n - All input values are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nPrint the number of palindromic numbers among the integers between A and B (inclusive).\n\n-----Sample Input-----\n11009 11332\n\n-----Sample Output-----\n4\n\nThere are four integers that satisfy the conditions: 11011, 11111, 11211 and 11311.\n\"\"\"\n\n\"\"\"\nFind the number of palindromic numbers among the integers between A and B (inclusive).\n\n-----Constraints-----\n - 10000 \\leq A \\leq B \\leq 99999\n - All input values are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nPrint the number of palindromic numbers among the integers between A and B (inclusive).\n\n-----Sample Input-----\n11009 11332\n\n-----Sample Output-----\n4\n\nThere are four integers that satisfy the conditions: 11011, 11111, 11211 and 11311.\n\"\"\"\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"11009 11332\"\n) == \"4\"\n\n\"\"\"\nfrom typing import List\nimport sys\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11009 11332\") == \"4\"\n\"\"\"\n\na, b = [int(x) for x in input().split()]\n\npalindromic_numbers = 0\n\nfor i in range(a, b + 1):\n    num = i\n    reverse = int(str(num)[::-1])\n\n    if num == reverse:\n        palindromic_numbers += 1\n\nprint(palindromic_numbers)\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(11009 11332) == 4\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11009 11332\") == 4\nprint(solution(\"11009 11332\"))\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11009 11332') == 4\nprint(solution('11009 11332'))\n\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\ncount = 0\n\nfor i in range(n, m + 1):\n    if str(i) == str(i)[::-1]:\n        count += 1\n\nprint(count)"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11009 11332\") == 4\n\"\"\""
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\\n4 5 6\\n7 8 9\") == \"3\"\nassert solution(\"1 2 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"4\"\n\nprint(\"Passed all tests!\")"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"3 1 4\"\n) == \"3\"\n\nassert solution(\n    \"1 1 1\"\n) == \"1\"\n\nassert solution(\n    \"3 2 4\"\n) == \"0\"\n\nassert solution(\n    \"1 1 1\"\n) == \"1\"\n\nassert solution(\n    \"1 1 3\"\n) == \"2\""
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 4') == '3'\n\n\"\"\""
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 1 2') == '2'\nassert solution('1 1 2 2 3 3 3') == '3'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 4\") == \"3\"\nassert solution(\"3 1 4\") == \"3\"\n\"\"\"\n\nfrom typing import List, Any, Dict\nimport sys\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 4\") == \"3\"\nprint(solution(\"3 1 4\"))\n\nExplanation:\nThe color of paint can 1 is 1, paint can 2 is 3, paint can 3 is 4.\nIn this case, there are three different colors: 1, 3, and 4.\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 2 2\") == \"0\"\nassert solution(\"3 3 3\") == \"1\"\nassert solution(\"3 1 2\") == \"1\"\nassert solution(\"3 2 3\") == \"2\"\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '3'\nassert solution('1 1 1') == '1'\nassert solution('1 1 2') == '2'\nassert solution('1 1 2 2 2 1 1 2') == '2'\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == '0'\nassert solution('4 4 4') == '0'\nassert solution('1 1 1\\n1 1 1') == '0'\nassert solution('1 1 1\\n2 2 2') == '1'\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == '12'\n\"\"\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == 12"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == \"12\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2 3 4\") == \"12\"\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 5\") == 12\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == \"12\"\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 6 7 8 9 10 11 12 13 14 15 16 17\") == \"17\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5\") == '12'\n\"\"\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == 12\n\"\"\""
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 7') == 'B'\n\"\"\"\n\nx, a, b = [int(c) for c in stdin.split()]"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 7') == 'B'\nassert solution('1 1 1') == 'A'\nassert solution('3 2 1') == 'A'\nassert solution('4 5 4') == 'B'\nassert solution('1 9 1') == 'A'\n\"\"\"\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('2 3 1') == '2'\n\n\"\"\"\n\nx, a, b = [int(x) for x in stdin.split()]\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 7\") == \"B\"\nassert solution(\"1 2 3\") == \"A\"\n\"\"\"\nfrom __future__ import annotations\n\nfrom collections import namedtuple\n\nPoint = namedtuple('Point', ['x', 'y'])\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 7\\n') == 'B'\nprint(solution('5 2 7\\n'))\n\n\"\"\"\n\nimport sys\nimport math\n\na, b, x = map(int, sys.stdin.readline().split())\ndistance_A = abs(a - x)\ndistance_B = abs(b - x)"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\"\n\nx, a, b = [int(elem) for elem in stdin.split()]"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 7\\n\") == \"B\"\n\n\"\"\"\n\nfrom math import fabs\n\nx, a, b = map(int, stdin.split())\n\na = abs(x - a)\nb = abs(x - b)"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\"\nimport math"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\"\n\nx, a, b = [int(n) for n in stdin.split()]\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(sys.stdin.read())) == 'B'"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\"\"\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\nassert solution('2018/01/07') == '2018/01/07'\n\"\"\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\nassert solution(\"2018/01/07\") == \"2018/01/07\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n\"\"\"\n\nimport re\n\ninp = input()\npattern = '^(?:0?[1-9]|1[0-2])/' \\\n           '(?:0?[1-9]|[12][0-9]|3[01])/' \\\n           '(?:19[0-9][0-9]|20[0-1][0-9])$'\n\nm = re.match(pattern, inp)\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2017/01/07') == '2018/01/07'"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\"\n\"\"\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"cbaa\") == \"aac\"\nassert solution(\"daacc\") == \"aca\"\nassert solution(\"acacac\") == \"aca\"\n\n\"\"\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"cbaa\") == \"aac\"\n\"\"\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\nc\\na\\n\") == \"ca\"\nassert solution(\"2\\nd\\na\\n\") == \"a\"\nassert solution(\"3\\nc\\na\\n\") == \"c\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"acacac\") == \"acacac\"\nassert solution(\"cbaa\") == \"aac\"\nassert solution(\"daacc\") == \"aac\"\nassert solution(\"cccaa\") == \"cccaa\"\nassert solution(\"caa\") == \"aac\"\n\n\"\"\""
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\ncbaa\\ndaacc\\nacacac\") == 'aac'\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aacc\") == \"aac\"\nassert solution(\"acac\") == \"caa\"\nassert solution(\"cbaa\") == \"aac\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aabbbcc\") == \"bba\"\nassert solution(\"cbaa\") == \"aac\"\nassert solution(\"daacc\") == \"aac\"\nassert solution(\"acacac\") == \"caa\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\ncbaa\\ndaacc\\nacacac') == 'aac'\n\"\"\""
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\ncbaa\\ndaacc\\nacacac') == 'aac'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"1\\n24 30\"\n) == \"7\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n24 30\") == \"7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n24 30\") == \"7\"\nassert solution(\"2\\n10 20\\n15 25\") == \"10\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n24 30\") == \"7\"\n\nprint(solution(\"1\\n24 30\"))\n\n\n'''\nimport os\nimport sys\nimport numpy"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 24 30\") == \"7\"\n\"\"\""
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n1\n24 30\n''') == '7'\nprint(\"Passed\")\n\nprint(solution('''\n1\n24 30\n'''))"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n24 30') == '7'\n\"\"\""
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 6\") == \"2\"\n\n\"\"\"\nimport os\nimport sys\nfrom io import StringIO\nimport unittest\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3 5 6\"\"\"\n        output = \"\"\"2\"\"\"\n        self.assertIO(input, output)\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"1 10\"\"\"\n        output = \"\"\"10\"\"\"\n        self.assertIO(input, output)\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"2 16\n12 14\"\"\"\n        output = \"\"\"0\"\"\"\n        self.assertIO(input, output)\n    def test_\u5165\u529b\u4f8b_4(self):\n        input = \"\"\"7\n2 3\n3 4\n6 7\n9 10\n11 12\n14 16\"\"\"\n        output = \"\"\"7\"\"\"\n        self."
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 24 30\") == \"7\"\nassert solution(\"1 25 30\") == \"7\"\nassert solution(\"1 26 30\") == \"7\"\nassert solution(\"1 27 30\") == \"7\"\nassert solution(\"1 28 30\") == \"7\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n24 30\") == \"7\"\n\n\"\"\""
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n\") == 6\n\"\"\""
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"6\"\nprint(solution(\"3 4\"))\n\n----\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1) == 0\nassert solution(5) == 1\nassert solution(8) == 4\nassert solution(10) == 2\n\"\"\""
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4') == 6\n\"\"\""
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4') == '6'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == \"6\"\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4') == '6'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == 6\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4') == '8'\nassert solution('3 4') == '10'\n\"\"\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\") == \"Possible\"\nassert solution(\"5 5\") == \"Impossible\"\nassert solution(\"4 3\") == \"Impossible\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"Possible\"\nassert solution(\"3 3\") == \"Impossible\"\nassert solution(\"4 6\") == \"Impossible\"\n\nprint(solution(\"4 5\"))\nprint(solution(\"3 3\"))\nprint(solution(\"4 6\"))\n\n\"\"\""
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\") == \"Possible\"\n\n\"\"\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\") == \"Possible\"\n\"\"\"\n\nimport collections\n\nnum_cookies = collections.deque([int(i) for i in stdin.strip().split(\" \")])"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\n9') == 'Possible'\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readlines()\n\na, b = map(int, input[0].split(' '))\n\nprint('Possible' if a * b % 9 == 0 else 'Impossible')\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"Possible\"\nassert solution(\"3 5\") == \"Impossible\"\nassert solution(\"5 5\") == \"Impossible\"\nassert solution(\"12 5\") == \"Possible\"\nassert solution(\"12345 5\") == \"Possible\"\n\"\"\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5\\n') == 'Possible'\n\"\"\"\n\nA, B = map(int, input().split())\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\") == \"Possible\"\nassert solution(\"5 3\") == \"Impossible\"\n\"\"\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"Possible\"\n\"\"\""
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\") == \"Possible\"\n\"\"\""
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('?tc????') == 'atcoder'\n\"\"\"\n\nimport collections\nimport re\nfrom typing import List"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('tc????') == 'atcoder'\nassert solution('coder') == 'atcoder'\nassert solution('tc?c??') == 'atcoder'\nassert solution('tc??c??') == 'unrestorable'\nassert solution('??tc??') == 'unrestorable'\n\"\"\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('?tc????') == 'atcoder'\n\"\"\""
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('tco??r') == 'atcoder'\nassert solution('toc??r') == 'UNRESTORABLE'\nassert solution('tc??r') == 'atcoder'\n'''\n\nimport sys\nimport string"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == 'atcoder'\n\"\"\"\n\nfrom string import ascii_lowercase\nimport itertools"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('coder') == 'atcoder'\n\n\"\"\""
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('atcoder') == 'atcoder'\nassert solution('?tc????') == 'atcoder'\nassert solution('coder') == 'coder'\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"coder\") == \"atcoder\"\n\"\"\"\n\nimport itertools\nfrom typing import Iterable, List, Optional\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'UNRESTORABLE'\nassert solution('coder') == 'atcoder'\n\"\"\""
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"atcoder\") == \"atcoder\"\nassert solution(\"coder\") == \"coder\"\nassert solution(\"abcoder\") == \"coder\"\nassert solution(\"bcoder\") == \"coder\"\nassert solution(\"bocoder\") == \"coder\"\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2002\\n2017') == '2032'\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\"\n\nimport sys\n\nlines = sys.stdin.readlines()\nR, G = map(int, lines[0].split())\nassert 0 <= R <= 4500\nassert 0 <= G <= 4500\n\nline = lines[1]\navg = int(line) * (G - R) / (int(line) - R) + R\n\nprint(round(avg, 2))\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\">0.1<\") == \">0.1<\"\nassert solution(\">0.5<\") == \">0.5<\"\nassert solution(\">0.9<\") == \">0.9<\"\nassert solution(\">1.1<\") == \">1.1<\"\nassert solution(\">1.5<\") == \">1.5<\"\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2002\\n2017') == '2032'\n\"\"\""
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2002\\n2017') == '2032'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2002\\n2017') == '2032'\n\n-------------------------"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\n\"\"\"\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"2002\"\n\"2017\"\n) == \"2032\"\n\"\"\""
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\n-----Test Case-----\nhttps://judge.softuni.bg/Contests/Compete/Index/1831#0\n\"\"\"\n\nR, G = [int(elem) for elem in stdin.split()]"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\""
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n\n\"\"\"\n\nfrom collections import Counter\nfrom typing import Set\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(string) == output\nprint(solution(stdin))\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n\nprint(solution(stdin))"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('string') == 4\nassert solution('letter') == 2\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\nassert solution('ambidextrously') == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('string') == '4'\nassert solution('letter') == '2'\nassert solution('aaaaaa') == '0'\nassert solution('uncopyrightable') == '13'\nassert solution('ambidextrously') == '12'\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('string') == 4\nassert solution('letter') == 2\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\nassert solution('ambidextrously') == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('string') == 4\nassert solution('letter') == 2\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\nassert solution('ambidextrously') == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('string') == 4\nassert solution('letter') == 2\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\nassert solution('ambidextrously') == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('string') == 4\nassert solution('letter') == 2\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\nassert solution('ambidextrously') == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"string\") == 4\nassert solution(\"letter\") == 2\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 10000 5\") == \"AC\"\nassert solution(\"19931568 1000000 6\") == \"TLE\""
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('19931568 1000000 6') == 'TLE'\n\"\"\"\n\nimport sys\n\nm, n, t = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 10000 5\") == \"AC\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\n\"\"\"\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 10000 5\") == \"AC\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''100000000 500 3''') == 'TLE'\nassert solution('''100000000 50 3''') == 'AC'\nassert solution('''100000000 10001 5''') == 'TLE'\nassert solution('''100000000 10000 5''') == 'AC'\nassert solution('''19931568 1000000 6''') == 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100000000 500 3\\n') == 'TLE'\nassert solution('100000000 50 3\\n') == 'AC'\nassert solution('100000000 10001 5\\n') == 'TLE'\nassert solution('19931568 1000000 6\\n') == 'TLE'\n\n\"\"\"\n\nm, n, t = map(int, stdin.readline().split())"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 10000 5\") == \"AC\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\n\n\"\"\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n8 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\n\nSample Input 6:\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n2\nSample Output 6:\n0 0 0 4\n4 16 8 2\n2 64 32 4\n0 0 2048 64\n\nSample Input 7:\n2 0 0 2\n4 16 8 2\n2 64 32 4\n1024 1024 64 0\n3\nSample Output 7:\n2 0 0 0\n4 16 8 0\n2 64 32 4\n0 0 2048 64\n\nSample Input 8:\n2 2 4 8\n4 0 4 4\n16 16 16 16\n32 16 16 32\n0\nSample Output 8:\n8 0 0 0\n8 0 0 0\n8 8 0 0\n8 8 8 0\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(2 0 0 2) == '4 0 0 0'\nassert solution(4 16 8 2) == '4 16 8 2'\nassert solution(2 64 32 4) == '2 64 32 4'\nassert solution(1024 1024 64 0) == '1024 1024 64 0'\nassert solution(2 0 0 2) == '4 0 0 0'\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\") == \"4 0 0 0\\n8 16 8 2\\n32 64 32 4\\n2048 64 0 0\"\n\"\"\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0') == '4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1') == '2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2') == '0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3') == '2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n4') == '0 0 0 0\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64'\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n8 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\") == \"2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"4 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0\"\n\nprint(\"Successfully solved!\")\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0') == '4 0 0 0\\n8 16 8 2\\n2 64 32 4\\n2048 64 0 0'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1') == '2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2') == '0 0 0 4\\n8 16 8 2\\n2 64 32 4\\n2048 64 0 0'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3') == '2 16 8 0\\n4 64 32 4\\n2 1024 64 0\\n2048 0 0 0'\n\"\"\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0') == '4 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2') == '0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\\n'\nassert solution('2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0') == '0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\\n'\nassert solution('2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n2') == '2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\\n'\n\nimport itertools"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\") == \"4 0 0 0\\n8 16 8 2\\n32 64 32 4\\n2048 64 0 0\"\n\"\"\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"4 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"4 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"4 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0\"\n\n\"\"\"\n\nfrom functools import lru_cache\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"C2H6 10\") == '0'\nassert solution(\"C3H8\") == '0'\nassert solution(\"CH3OH 1\") == '1'\nassert solution(\"C6H6OCH2O 10\") == '12'\nassert solution(\"C6H14 10\") == '12'\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"C2H6 10\") == \"0\"\nassert solution(\"C3H8\") == \"6\"\nassert solution(\"CH3OH 1\") == \"1\"\nassert solution(\"C6H6OCH2O 10\") == \"0\"\nassert solution(\"C6H14 10\") == \"12\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"H2O 1\") == \"0\"\nassert solution(\"C6H6OCH2O 10\") == \"0\"\nassert solution(\"C6H14 10\") == \"12\"\nassert solution(\"CH3OH 1\") == \"1\"\nassert solution(\"C5H10\") == \"10\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"0\"\nassert solution(\"CH3OH 1\") == \"1\"\nassert solution(\"C6H6OCH2O 10\") == \"12\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('CH3OH 1') == '1'\nassert solution('C2H6 10') == '6'\nassert solution('C6H6OCH2O 10') == '0'\n\nprint(solution(stdin.read()))\n\n\"\"\""
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"H2O 10\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C6H6OCH2O 10\") == \"12\"\nassert solution(\"C6H14 10\") == \"12\"\n\"\"\""
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(H2O) == '2 1'\nassert solution(C2H6OCH2O) == '6 1'\nassert solution(CH3OH) == '1 1'\nassert solution(C6H6OCH2O) == '6 1'\nassert solution(CH4) == '1 1'\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input_string) == expected_result\n\nSolution:\n    \n\"\"\"\n\nimport re\nfrom itertools import permutations"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"H 2\\nO\\n\") == \"0\"\nassert solution(\"C2H6 10\\nC3H8\\n\") == \"6\"\nassert solution(\"CH3OH 1\\nCH4\\n\") == \"1\"\nassert solution(\"C6H6OCH2O 10\\nHCN\\n\") == \"0\"\nassert solution(\"C6H14 10\\nC5H10\\n\") == \"12\"\n\"\"\"\n\n\nimport re\nfrom typing import Dict, List, Tuple\nfrom collections import Counter\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"H2O\") == \"0\"\nassert solution(\"H2O2\") == \"0\"\nassert solution(\"C2H6\") == \"6\"\nassert solution(\"C3H8\") == \"0\"\nassert solution(\"CH3OH\") == \"1\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\"\"\""
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\"\"\"\n\n\"\"\"\nGiven the password, password, and the message, determine whether the message is a valid message for the password.\n\nThe password is a sequence of uppercase letters. The message is a sequence of uppercase letters and/or symbols.\n\nFor example, if the password is \"AB\", then the message \"AB\" is a valid message for the password.\nHowever, the message \"AB\" is not a valid message for the password.\nThe message \"BCD\" is not a valid message for the password because the letters \"B\" and \"C\" appear in the wrong order.\nThe message \"COOL\" is not a valid message for the password because the letters \"C\" and \"O\" appear in the wrong order.\nThe message \"COOL\" is not a valid message for the password because the letters \"C\" and \"O\" appear in the wrong order.\nThe message \"ABC\" is not a valid message for the password because the letters \"A\" and \"B\" appear in the wrong order.\n\n-----Input-----\nThe input consists of three lines.\nThe first line contains the password, password, consisting of uppercase letters and its length is between 3 and 8.\nThe second line contains the message, message, consisting of uppercase letters and/or symbols and its length is between 10 and 40.\nThe third line contains the expected message, expected.\n-----Output-----\nOutput a single line containing PASS if the message is a valid message for the password, or FAIL otherwise.\n\n-----Examples-----\nSample Input 1:\nAB\nABC\nAB\nSample Output 1:\nPASS\n\nSample Input 2:\nAB\nBCD\nAB\nSample Output 2:\nFAIL\n\nSample Input 3:\nABC\nCOOL\nABC\nSample Output 3:\nFAIL\n\nSample Input 4:\nABC\nCOOL\nXYZ\nABC\nSample Output 4:\nFAIL\n\"\"\"\n\n\"\"\"\nGiven the password and the message, determine whether the message is a valid message for the password.\n\nThe password is a sequence of uppercase letters. The message is a sequence of uppercase letters and/or symbols.\n\nFor example, if the password is \"AB\", then the message \"AB\" is a valid message for the password.\nHowever, the message \"AB\" is not a valid message for the password.\nThe message \"BCD\" is not a valid message for the password because the letters \"B\" and \"C\" appear in the wrong order.\nThe message \"COOL\" is not a valid message for the password because the letters \"C\" and \"O\" appear in the wrong order.\nThe message \"COOL\" is not a valid message for the password because the letters \"C\" and \"O\" appear in the wrong order.\nThe message \"ABC\" is not a valid message for the password because the letters \"A\" and \"B\" appear in the wrong order.\n\n-----Input-----\nThe input consists of three lines.\nThe first line contains the password, password, consisting of uppercase letters and its length is between 3 and 8.\nThe second line contains the message, message, consisting of uppercase letters and/or symbols and its length is between 10 and 40.\nThe third line contains the expected message, expected.\n-----Output-----\nOutput a single line containing PASS if the message is a valid message for the password, or FAIL otherwise.\n\n-----Examples-----\nSample Input 1:\nAB\nABC\nAB\nSample Output 1:\nPASS\n\nSample Input 2:\nAB\nBCD\nAB\nSample Output 2:\nFAIL\n\nSample Input 3:\nABC\nCOOL\nABC\nSample Output 3:\nPASS\n\nSample Input 4:\nABC\nCOOL\nXYZ\nABC\nSample Output 4:\nFAIL\n\"\"\"\n\n\"\"\"\nGiven two strings, determine whether they are anagrams.\n\nAn anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n-----Input-----\nThe input consists of two lines.\nThe first line contains the first string, s, consisting of lowercase English letters.\nThe second line contains the second string, t, consisting of lowercase English letters.\n\n-----Output-----\nOutput PASS if the strings are anagrams and output FAIL otherwise.\n\n-----Examples-----\nSample Input 1:\na gentleman\nelegant\nSample Output 1:\nPASS\n\nSample Input 2:\nabcdefghijklmnopqrstuvwxyz\nzyxwvutsrqponmlkjihgfedcba\nSample Output 2:\nFAIL\n\nSample Input 3:\ncode\ncoode\nSample Output 3:\nPASS\n\"\"\"\n\n\"\"\"\nGiven an array of integers, determine whether it contains a Pythagorean triplet.\n\nA Pythagorean triplet is defined as a set of three numbers $a$, $b$, and $c$ such that $a^2 + b^2 = c^2$.\n\nFor example, 3^2 + 4"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\n\"\"\"\n\nimport string\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\nprint('Success')"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"([] [] ]\") == \"]\"\nassert solution(\"[ { { () () () () } ]\") == \"]\"\nassert solution(\"([] (])\") == \"]\"\nassert solution(\"[{ (}\") == \"}\"\nassert solution(\"([] [])\") == \"ok so far\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"([] [] ]\") == \"]\"\nassert solution(\"[ { { () () () () } } ]\") == \"]\"\nassert solution(\"[ { [[()]] (({})) } ] () {}\") == \"ok so far\"\n\"\"\"\n\nLENGTH = int(input())\nS = input()\nopening = []\n\nfor i in range(LENGTH):\n    if S[i] == \"(\":\n        opening.append(i)\n    elif S[i] == \")\":\n        try:\n            opening.pop()\n        except IndexError:\n            print(\")\")\n            exit()\n    else:\n        continue"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"([] [] ]\") == \"]\"\nassert solution(\"(()\") == \")\"\nassert solution(\"([[]] [{}])\") == \"]\"\nassert solution(\"([{}[])\") == \"]\"\nassert solution(\"[ { } ]\") == \"]\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"[ { { () } ]\") == \"]\"\nassert solution(\"(([] []) [] ())\") == \"ok so far\"\nassert solution(\"([] []) [] ())\") == \"]\"\nassert solution(\"[ { { () } ]\") == \"]\"\nassert solution(\"(([] []) [] ())\") == \"ok so far\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('[ { { () () () } ]') == '] 20'\nassert solution('([] [] ]') == ']'\nassert solution('(() (() ()) (())') == ')'\nassert solution('{ { () () () } }') == '}'\nassert solution('[] [] ]') == ']'\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"([] [] ]\") == \"]\"\nassert solution(\"(([] [[]] ())\") == \"ok so far\"\nassert solution(\"[ { { () () () () } } ] () {}\") == \"]\"\nassert solution(\"[ { [[()]] (({})) } ] () {}\") == \"ok so far\"\nassert solution(\"[ { [[()]] (({})) } ] () {}\") == \"ok so far\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"([] [] ]\") == \"]\"\nassert solution(\"([] [ ] )\") == \"]\"\nassert solution(\"(([] [[]] ())\") == \"ok so far\"\nassert solution(\"[[ [] ]] () [] { } ()\") == \"ok so far\"\nassert solution(\"[[ [] ]] (([[[]]]) ())\") == \"]\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"([] [] ]\") == \"]\"\nassert solution(\"(([] [[]] ())\") == \"ok so far\"\nassert solution(\"[ { { () () () () } } ] () {}\") == \"]\"\nassert solution(\"[ { [[()]] (({})) } ] () {}\") == \"ok so far\"\nassert solution(\"[ { [[()]] (({})) } ] ()\") == \"\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('([] [] ]') == '] 7'\nassert solution('[ ( ) ]') == 'ok so far'\nassert solution('[ [ ( ) ] ]') == '] 20'\nassert solution('[[ ( ( () ) ) ] ]') == 'ok so far'\nassert solution('(( [ ( () ) ] )') == 'ok so far'\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"[ { { () () () () } ]\") == \"]\"\nassert solution(\"([] [] ]\") == \"]\"\nassert solution(\"[ { { () () () () } } ]\") == \"]\"\nassert solution(\"[] [] \") == \"ok so far\"\nassert solution(\"[[{()()()()()()()}]]\") == \"]\"\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\") == \"Fair Game\"\nassert solution(\"3\\napple\\nextra\\napple\") == \"Player 1 lost\"\nassert solution(\"2\\napple\\nneat\") == \"Player 2 lost\"\n\n\"\"\"\nimport sys\nimport re\n\nnum_of_words = int(sys.stdin.readline())\n\nwords = []\nfor i in range(num_of_words):\n    words.append(sys.stdin.readline().strip())\n\nfor i in range(num_of_words):\n    target = words[i]\n    current = words[i+1:]\n    match = re.search(f'^{target[-1]}', ''.join(current))\n    if match:\n        print('Player 1 lost')\n        break\nelse:\n    print('Fair Game')\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\napple\near\nreal\nletters\nstyle\n\"\"\") == \"Fair Game\"\n\nassert solution(\"\"\"\n3\napple\nextra\napple\n\"\"\") == \"Player 1 lost\"\n\nassert solution(\"\"\"\n2\napple\nneat\n\"\"\") == \"Player 2 lost\"\n\n\"\"\""
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\napple\\near\\nreal\\nletters\\nstyle') == 'Fair Game'\nassert solution('3\\napple\\nextra\\napple') == 'Player 1 lost'\nassert solution('2\\napple\\nneat') == 'Player 2 lost'\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List, Set, Dict"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\napple\\near\\nreal\\nletters\\nstyle') == 'Fair Game'\nassert solution('3\\napple\\nexra\\napple') == 'Player 1 lost'\nassert solution('2\\napple\\nneat') == 'Player 2 lost'\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"5\napple\near\nreal\nletters\nstyle\n\"\"\") == \"Fair Game\"\nassert solution(\"\"\"3\napple\nextra\napple\n\"\"\") == \"Player 1 lost\"\nassert solution(\"\"\"2\napple\nneat\napple\n\"\"\") == \"Player 2 lost\"\n\n\"\"\"\nSolution:\n1. It's a 2 player game, so if the last player called out the last letter of the first word,\nthen that means the game is over and it is the second player's turn again.\n2. For the second player to call out a word that starts with a letter from the last letter of\nthe first word the first player called out, then the second player must call out a word that\nis the same length and starts with the same letter that the first player's word does.\n3. After that, it is the first player's turn again.\n4. So the first player must call out a word that starts with the same letter that the second player's\nlast word did.\n5. After that, the next word must also start with the same letter, so the game is over again.\n6. If the game is still in progress, it is the first player's turn again.\n7. The second player loses if they call out a word that does not start with the last letter of the\nfirst player's word.\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\nSolution:\n1. Check if the input length is less than 2.\n2. Keep a list of strings that have been used by both players.\n3. Keep a variable called previous, which will be set to whatever was the last word the first\nplayer used.\n4. Use a loop to check if there is a word that starts with previous[-1]. If there is, then the\ngame is over. If not, keep checking if there is a word that starts with the last letter of the\nprevious word. If there is, then the second player has said a word that starts with the last letter\nof previous, and the game is over.\n5. If the game is still in progress, then the first player has used a word that starts with the last\nletter of previous, and the game is over.\n6. If the game is still in progress, then the second player has said a word that does not start with\nthe last letter of previous, so the second player has lost the game.\n\"\"\"\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('apple\\near\\nreal\\nletters\\nstyle') == 'Fair Game'\nassert solution('apple\\nextra\\napple') == 'Player 1 lost'\nassert solution('apple\\nneat\\napple') == 'Player 2 lost'"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\\n\") == \"Fair Game\"\nassert solution(\"3\\napple\\nextra\\napple\\n\") == \"Player 1 lost\"\nassert solution(\"2\\napple\\nneat\\napple\\n\") == \"Player 2 lost\"\n\"\"\"\n\n\"\"\"\nInput:\n1\napple\nextra\napple\n\nOutput:\nPlayer 1 lost\n\"\"\"\n\n\"\"\"\nSample Run 1:\n\nsolution()\napple\near\nreal\nletters\nstyle\nFair Game\n\"\"\""
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'Fair Game'\nassert solution('\\n') == 'Player 1 lost'\nassert solution('\\n\\n') == 'Player 2 lost'\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        def is_fair_game(stdin: str) -> bool:\n            words = stdin.split('\\n')\n            prev_word = words[0]\n            for word in words[1:]:\n                if word.startswith(prev_word[-1]):\n                    prev_word = word\n                else:\n                    return False\n            return True\n        \n        if is_fair_game(stdin):\n            return 'Fair Game'\n        else:\n            return 'Player {} lost'.format(sum([1 for word in stdin.split('\\n') if not word.startswith(word[-1])]))\n\nassert Solution().solution('') == 'Fair Game'\nassert Solution().solution('\\n') == 'Player 1 lost'\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == result\nprint(solution(input()))"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'Please, input a positive integer A.'\nassert solution('0') == 'Please, input a positive integer A.'\nassert solution('100') == 'Please, input a positive integer A.'\nassert solution('101') == 'Please, input a positive integer A.'\nassert solution('101010') == 'Please, input a positive integer A.'\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000\\n*\\n100\") == \"100000\"\nassert solution(\"10000\\n+\\n10\") == \"10010\"\nassert solution(\"10\\n+\\n1000\") == \"1010\"\n\nSolution:\nA = int(stdin.readline())\nop = stdin.readline().rstrip()\nB = int(stdin.readline())"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1000 * 100') == '100000'\nassert solution('10000 + 10') == '1010'\n\"\"\""
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100*1000\") == \"100000000\"\nassert solution(\"10+1000\") == \"1010\"\nassert solution(\"100*100\") == \"10000\"\n\n\"\"\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000\\n*\\n100\\n\") == \"100000\"\nassert solution(\"10000\\n+\\n10\\n\") == \"10010\"\nassert solution(\"10\\n+\\n1000\\n\") == \"1010\"\nprint(\"Success\")"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000\\n*\\n100\\n\") == \"100000\"\nassert solution(\"10000\\n+\\n10\\n\") == \"1010\"\nassert solution(\"10\\n+\\n1000\\n\") == \"1010\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000\\n*\\n100\") == \"100000\"\nassert solution(\"10000\\n+\\n10\") == \"10010\"\nassert solution(\"10\\n+\\n1000\") == \"1010\"\nprint(\"Passed!\")"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1000 * 100') == '100000'\nassert solution('10000 + 10') == '1010'\nassert solution('10000 + 100') == '11010'\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000\\n*\\n100\") == \"100000\"\nassert solution(\"10000\\n+\\n10\") == \"10010\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000\\n*\\n100\") == \"100000\"\nassert solution(\"10000\\n+\\n10\") == \"10010\"\nassert solution(\"10\\n+\\n1000\") == \"1010\"\n\"\"\""
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 in') == '1'\nassert solution('1 out') == '1'\nassert solution('1 out out') == '1'\nassert solution('1 out in') == '2'\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\""
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 out\") == '3'\nassert solution(\"8 in\") == '6'\nassert solution(\"52 out\") == '8'\n\"\"\""
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\u20188 out\u2019) == 3\nassert solution(\u20188 in\u2019) == 6\nassert solution(\u201852 out\u2019) == 8\nassert solution(\u201852 in\u2019) == 6\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\"\"\"\nfrom typing import List, Tuple\n\nfrom collections import deque\nfrom itertools import zip_longest\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\nprint('Hooray!')\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\"\"\"\nimport sys\nimport math\nfrom collections import deque\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\""
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\""
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\n\"\"\"\n\nfrom itertools import chain"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\"\n\nimport sys\nimport re\n\ny, p = sys.stdin.readline().split()\n\nvowels = {'a', 'e', 'i', 'o', 'u'}\n\npattern = re.compile('(?<=.)[aeiou]')\n\nfor i in range(len(y) - 1, 0, -1):\n    if pattern.search(y[i:]):\n        p = p + y[i:]\n        break"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\n\"\"\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\nprint('Hooray!')\n\"\"\"\n\nyear = int(input())"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'no'\nassert solution('2017') == 'yes'\nassert solution('2020') == 'yes'\nassert solution('2018') == 'yes'\nassert solution('2021') == 'yes'\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n\"\"\"\n\ny = int(input())\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2018) == 'yes'\nassert solution(2019) == 'no'\nassert solution(2020) == 'yes'\n\"\"\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\nprint('Hooray!')\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 0 0 0 4 0 0 0 0 4') == '64'\nassert solution('10 10 10 20 0 10 10 10 10 10') == '1820000'\n\n\"\"\"\n\nfrom collections import Counter\n\nnums = [int(c) for c in stdin.split()]\nk = int(stdin.split()[-1])\n\nc = Counter(nums)\n\nn = 10\n\ndp = [0] * n\ndp[0] = 1\n\nfor k, v in c.items():\n    if k > 0:\n        for i in range(1, v + 1):\n            dp[k] += dp[k - 1]\n\nprint(dp[-1])\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n\"\"\""
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\n\"\"\"\n\nimport math\nfrom typing import List\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''10 10 10 20 0 10 10 10 10 10''') == '1820000'\nprint(solution(input()))\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == '64'\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == '1820000'\nassert solution(\"20 0 20 0 20 0 20 0 20 0 20\") == '1'\nassert solution(\"100 100 100 100 100 100 100 100 100 100\") == '0'\nassert solution
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n\"\"\"\n\nfrom math import factorial\nimport sys\nimport operator"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\\n3\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\\n4\") == \"1820000\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1\\n1\") == \"1\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1\\n2\") == \"0\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1\\n3\") == \"0\"\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\n\"\"\""
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n\n\"\"\""
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\n\"\"\"\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 0\\n30 270 995 996 997 998 999') == '2 330'\nassert solution('7 1\\n30 270 995 996 997 998 999') == '2 570'\nassert solution('7 2\\n30 270 995 996 997 998 999') == '0 0'\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\"\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\ntime, p_index = map(int, input().split())\nestimates = list(map(int, input().split()))\ntime_left = 300"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\nprint(solution(input))\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''7 0\n30 270 995 996 997 998 999''') == '2 330'\nassert solution('''7 1\n30 270 995 996 997 998 999''') == '2 570'\nassert solution('''7 2\n30 270 995 996 997 998 999''') == '0 0'\nassert solution('''13 3\n100 90 110 200 300 150 300 120 200 110 100 90''') == '3 1811'\nassert solution('''12 0\n120 110 110 100 90 90 100 110 110 100''') == '3 3'\n'''\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\"\n\n\"\"\"\n\nimport sys\nimport math\n\nn, p = map(int, sys.stdin.readline().split())\nestimations = list(map(int, sys.stdin.readline().split()))\n\nmin_time = math.inf\nmax_num = 0\n\nfor i in range(n):\n    if i == p:\n        continue\n    min_time = min(min_time, estimations[i])\n    max_num = max(max_num, i + 1)\n\nprint(max_num, min_time * (300 - min_time))\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 0\\n30 270 995 996 997 998 999') == '2 330'\nassert solution('7 1\\n30 270 995 996 997 998 999') == '2 570'\nassert solution('7 2\\n30 270 995 996 997 998 999') == '0 0'\n\"\"\"\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 0\\n30 270 995 996 997 998 999') == '2 330'\nassert solution('7 1\\n30 270 995 996 997 998 999') == '2 570'\nassert solution('7 2\\n30 270 995 996 997 998 999') == '0 0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\n\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\n\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\n\n\"\"\""
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\nprint('Success')\n\n/////////////////////////////////////////////////////////////////////////////\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\nassert solution('abcd') == 1\n\nprint(\"All tests passed.\")\n\n\"\"\"\n\nfrom typing import List\nimport numpy as np\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\nprint('Success')\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n\nprint(solution(\"aaaaaaaa\"))\nprint(solution(\"abbaabbaabba\"))\nprint(solution(\"abcdef\"))\n\"\"\"\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n\"\"\""
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n\"\"\""
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abbaabbaabba\") == 2\nassert solution(\"aaaaaaaa\") == 1\nassert solution(\"abcdef\") == 6\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\n\nprint('Test pass.')"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == \"0\\n1\"\n\"\"\""
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2\\n1 2'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9') == '1\\n1'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30') == '0\\n1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(text_trap) == expect\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == \"0\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == \"0\\n1\"\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == \"0\\n1\"\n\nprint('The code ran Correctly')"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n\") == \"2\\n1 2\\n\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\\n\") == \"1\\n1\\n\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\\n\") == \"0\\n1\\n\"\n\nprint(\"Well done!\")\n\"\"\"\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == \"0\\n1\"\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == \"0\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2\\n1 2'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9') == '1\\n1'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30') == '0\\n1'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\n-----\nSample Input 1:\n4 12\n1 2 4 5\n6 8 12 18 26 28 30 34 36 37 39 40\nSample Output 1:\n2\n1 2\n\nSample Input 2:\n5 10\n1 2 3 4 5\n0 1 2 3 4 5 6 7 8 9\nSample Output 2:\n1\n1\n\nSample Input 3:\n3 6\n1 2 4\n11 12 15 19 24 30\nSample Output 3:\n0\n1\n\nSample Input 4:\n10 10\n1 2 3 4 5 6 7 8 9 10\nSample Output 4:\n1\n1\n\nSample Input 5:\n10 10\n0 1 2 3 4 5 6 7 8 9\nSample Output 5:\n0\n1\n\nSample Input 6:\n10 10\n1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\nSample Output 6:\n0\n1\n\nSample Input 7:\n10 10\n1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\nSample Output 7:\n0\n1\n\nSample Input 8:\n10 10\n0 1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\nSample Output 8:\n0\n1\n\nSample Input 9:\n10 10\n1 2 3 4 5 6 7 8 9\n2 3 4 5 6 7 8 9\nSample Output 9:\n0\n1\n\nSample Input 10:\n10 10\n1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\nSample Output 10:\n0\n1\n\nSample Input 11:\n10 10\n1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\nSample Output 11:\n0\n1\n\nSample Input 12:\n10 10\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\nSample Output 12:\n0\n1\n\nSample Input 13:\n10 10\n0 1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\nSample Output 13:\n0\n1\n\nSample Input 14:\n10 10\n1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\nSample Output 14:\n0\n1\n\nSample Input 15:\n10 10\n0 1 2 3 4 5 6 7 8 9\n0 1 2 3 4 5 6 7 8 9\nSample Output 15:\n0\n1\n\nSample Input 16:\n10 10\n0 1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\nSample Output 16:\n0\n1\n\nSample Input 17:\n10 10\n0 0 0 0 0 0 0 0 0 0\n1 2 3 4 5 6 7 8 9\nSample Output 17:\n0\n1\n\nSample Input 18:\n10 10\n0 0 0 0 0 0 0 0 0 0\n0 1 2 3 4 5 6 7 8 9\nSample Output 18:\n0\n1\n\nSample Input 19:\n10 10\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\nSample Output 19:\n0\n1\n\nSample Input 20:\n10 10\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\nSample Output 20:\n0\n1\n\nSample Input 21:\n10 10\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\nSample Output 21:\n0\n1\n\nSample Input 22:\n10 10\n0 0 0 0 0 0 0 0 0 0\n1 2 3 4 5 6 7 8 9\nSample Output 22:\n0\n1\n\nSample Input 23:\n10 10\n0 0 0 0 0 0 0 0 0 0\n1 2 3 4 5 6 7 8 9\nSample Output 23:\n0\n1\n\nSample Input 24:\n10 10\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\nSample Output 24:\n0\n1\n\nSample Input 25:\n10 10\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\nSample Output 25:\n0\n1\n\nSample Input 26:\n10 10\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\nSample Output 26:\n0\n1\n\nSample Input 27:\n10 10\n0 0 0 0 0 0 0 0 0 0\n1 2 3 4 5 6 7 8 9\nSample Output 27:\n0\n1\n\nSample Input 28:\n10 10\n0 0 0 0 0 0 0 0 0 0\n1 2 3 4 5 6 7 8 9\nSample Output 28:\n0\n1\n\nSample Input 29:\n10 10\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\nSample Output 29:\n0\n1\n\nSample Input 30:\n10 10\n0 0 0 0 0 0 0 0 0 0\n1 2 3 4 5 6 7 8 9\nSample Output 30:\n0\n1\n\nSample Input 31:\n10 10\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\nSample Output 31:\n0\n1\n\nSample Input 32:\n10 10\n0 0 0 0 0 0 0 0 0 0\n1 2 3 4 5 6 7 8 9\nSample Output 32:\n0\n1\n\nSample Input 33:\n10 10\n0 0 0 0 0 0 0 0 0 0\n1 2 3 4 5 6 7 8 9\nSample Output 33:\n0\n1\n\nSample Input 34:\n10 10\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\nSample Output 34:\n0\n1\n\nSample Input 35:\n10 10\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\nSample Output 35:\n0\n1\n\nSample Input 36:\n10 10\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\nSample Output 36:\n0\n1\n\nSample Input 37:\n10 10\n0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\nSample Output 37:\n0\n1\n\nSample Input 38:\n10 10\n0 0 0"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\n\"\"\"\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5551212') == '1'\nassert solution('5551212') == '1'\nassert solution('5551212') == '1'\nassert solution('5551212') == '1'\nassert solution('5551212') == '1'\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5551212\") == 1\n\"\"\""
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5551212') == 1\nassert solution('5519876') == 0\nassert solution('5055555') == 0\n\"\"\""
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5551212\") == \"1\"\nassert solution(\"5519876\") == \"0\"\nassert solution(\"5055555\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '0'\n\"\"\"\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\n\"\"\"\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5551212\") == 1\nassert solution(\"5519876\") == 0\nassert solution(\"5055555\") == 0\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5551212\") == \"1\"\nassert solution(\"5519876\") == \"0\"\nassert solution(\"5055555\") == \"0\"\n\nprint('Hooray!')\n\n------------------------------------------------------------------------------------------------------------------------------------------------\n\nGiven an array of integers, return a new array with each value doubled.\n\nFor example:\n\n[1, 2, 3] --> [2, 4, 6]\n\nFor the beginner, try to use the map method - it comes in very handy quite a lot so is a good one to know.\n\nNote:\n    for the beginner it is advised to use for loop and append method as it is much easier to understand."
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5551212\") == \"1\"\nassert solution(\"5519876\") == \"0\"\nassert solution(\"5055555\") == \"0\"\n\nprint(solution(\"5551212\"))\nprint(solution(\"5519876\"))\nprint(solution(\"5055555\"))\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\n\n\"\"\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\n\n\"\"\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\n---Problem---\nYou are given the value of the temperature in degrees Fahrenheit. Try to convert this value into degrees Celsius.\n\nInput data format\n\nThe input to the function/method consists of a single argument \u2014 the value of the temperature in Fahrenheit.\n\nOutput data format\n\nThe function must return the value of the temperature in degrees Celsius.\n\nSample Input 1:\n100\nSample Output 1:\n22.22222222222222\n\nSample Input 2:\n-40\nSample Output 2:\n-40\n\nSample Input 3:\n10\nSample Output 3:\n14.0\n\n---SOLUTION---\n\"\"\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\nassert solution(\"0/1\") == \"0/1\"\nassert solution(\"1/1\") == \"1/1\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\n\nprint(solution('32/1'))\nprint(solution('33/1'))\nprint(solution('-40/1'))\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\n\"\"\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\nassert solution('32/3') == '0/1'\n\"\"\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(32/1) == 0/1\nassert solution(33/1) == 5/9\nassert solution(-40/1) == -40/1\n\nprint('Hooray!')"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3\nC E G\nD F# A\"\"\") == \"Transposition\"\nassert solution(\"\"\"7\nC C G G A A G\nC C F F D# D# F\"\"\") == \"Inversion\"\nassert solution(\"\"\"7\nA B C D E F G\nG F E D C B A\"\"\") == \"Retrograde\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\n\"\"\"\n\nnotes = [\n    'C',\n    'C#',\n    'D',\n    'D#',\n    'E',\n    'F',\n    'F#',\n    'G',\n    'G#',\n    'A',\n    'A#',\n    'B'\n]\n\ntranspositions = {}\n\nfor i in range(1, 13):\n    transpositions[i] = {\n        'C': (i + 1) % 12,\n        'D': (i + 2) % 12,\n        'E': (i + 3) % 12,\n        'F': (i + 4) % 12,\n        'G': (i + 5) % 12,\n        'A': (i + 6) % 12,\n        'B': (i + 7) % 12\n    }\n\nretrogrades = {}\n\nfor i in range(1, 13):\n    retrogrades[i] = {\n        'C': 12 - (i + 1) % 12,\n        'D': 12 - (i + 2) % 12,\n        'E': 12 - (i + 3) % 12,\n        'F': 12 - (i + 4) % 12,\n        'G': 12 - (i + 5) % 12,\n        'A': 12 - (i + 6) % 12,\n        'B': 12 - (i + 7) % 12\n    }\n\ninversions = {}\n\nfor i in range(1, 13):\n    inversions[i] = {\n        'C': (i + 1) % 12,\n        'D': (i + 5) % 12,\n        'E': (i + 6) % 12,\n        'F': (i + 6) % 12,\n        'G': (i + 7) % 12,\n        'A': (i + 4) % 12,\n        'B': (i + 3) % 12\n    }\n\nfor i in range(int(stdin)):\n    transposition = set()\n    retrograde = set()\n    inversion = set()\n\n    i_notes = list(map(lambda x: notes.index(x), stdin.split('\\n')[i].split()))\n    for i in range(len(i_notes)):\n        t = transpositions[i_notes[i]]\n        for j in t.items():\n            if j[1] == i_notes[i - 1]:\n                transposition.add(j[0])\n                break\n    for i in range(len(i_notes)):\n        r = retrogrades[i_notes[i]]\n        for j in r.items():\n            if j[1] == i_notes[i - 1]:\n                retrograde.add(j[0])\n                break\n    for i in range(len(i_notes)):\n        inv = inversions[i_notes[i]]\n        for j in inv.items():\n            if j[1] == i_notes[i - 1]:\n                inversion.add(j[0])\n                break\n\n    if len(transposition) > 0:\n        print('Transposition')\n    if len(retrograde) > 0:\n        print('Retrograde')\n    if len(inversion) > 0:\n        print('Inversion')\n    if len(transposition) + len(retrograde) + len(inversion) == 0:\n        print('Nonsense')\n    if len(transposition) + len(retrograde) + len(inversion) > 1:\n        print('Transposition')\n        print('Retrograde')\n        print('Inversion')\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2\nC E G\nD F# A''') == 'Transposition'\n\nassert solution('''2\nC E G\nD F# A''') == 'Transposition'\n\nassert solution('''2\nC E G\nD F# A''') == 'Transposition'\n\nassert solution('''2\nC E G\nD F# A''') == 'Transposition'\n\nassert solution('''2\nC E G\nD F# A''') == 'Transposition'"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\n\"\"\""
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\nassert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\n\n\"\"\"\n\n\nfrom itertools import permutations"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\nC E G\\nD F# A') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == 'Retrograde'\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\n\"\"\"\n\nimport sys\nfrom typing import List\n\nfrom collections import Counter\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\nC E G\\nD F# A') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == 'Retrograde'\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\n\"\"\"\n\nfrom pprint import pprint"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\nassert solution('Glad to see you') == 'Glad to see you'\n\nprint(solution('I love ba-na-na'))\nprint(solution('Cat-a-pil-lar'))\nprint(solution('Co-ding is the best'))\nprint(solution('Glad to see you'))\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"I love ba-na-na\"\n) == \"Gah kove bababa\"\n\nassert solution(\n\"Cat-a-pil-lar\"\n) == \"Catacillar\"\n\nassert solution(\n\"Co-ding is the best\"\n) == \"Cociccah gs the bestuh\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\n\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\n\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\"\"\"\n\nfrom itertools import groupby"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\n\nassert solution('Cat-a-pil-lar') == 'Catacillar'\n\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\n\nprint(solution('Cat-a-pil-lar'))\n\nprint(solution('Co-ding is the best'))\n\nprint(solution('Cat-a-pil-lar'))"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\n\"\"\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\n\"\"\"\n\nimport unittest\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"4\") == \"16\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n\"\"\"\n\n\"\"\"\nWe can solve this problem using dynamic programming. For example, the cost of a box with size n is min(n*n, 2*n*(n-1)), where n is the size of the box. We can find this cost recursively. To optimize the space complexity, we can store the cost of all the boxes in a single array. Then, we can do a binary search to find the minimum cost of a box with size V.\n\nWe can solve this problem in O(N log N) time and O(N) space, where N is the number of boxes.\n\n\"\"\""
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '16'\nassert solution('3') == '14'\n\"\"\""
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '16'\nassert solution('1') == '6'\nassert solution('3') == '14'\n\"\"\"\n\nfrom math import sqrt\n\nv = int(input())\n\nprint(2 * v * sqrt(v * (v + 1) / 2))\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1) == 6\nassert solution(4) == 16\nassert solution(3) == 14\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n\"\"\"\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == 6\nassert solution(\"4\") == 16\nassert solution(\"3\") == 14\n\"\"\""
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n') == '6'\nassert solution('4\\n') == '16'\nassert solution('3\\n') == '14'\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == '16'\nassert solution('1') == '6'\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\\n\") == \"3\"\nassert solution(\"5 10\\n4 8 1 9 7\\n\") == \"2\"\nassert solution(\"4 10\\n1 3 1 7\\n\") == \"4\"\n\n\"\"\"\n\n\"\"\"\n>>> str(solution('''5 10\n... 1 3 1 7\n... '''))\n'4'\n>>> str(solution('''5 10\n... 4 8 1 9 7\n... '''))\n'2'\n>>> str(solution('''5 10\n... 5 5 5 5\n... '''))\n'0'\n\"\"\"\n\nimport math\nimport itertools\nfrom functools import reduce\nfrom collections import Counter"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 10\\n1 3 1 7') == 4\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\\n\") == \"3\"\nassert solution(\"5 10\\n4 8 1 9 7\\n\") == \"2\"\nassert solution(\"4 10\\n1 3 1 7\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5 10\n1 2 3 4 5\"\"\") == '2'\nassert solution(\"\"\"5 10\n1 2 3 4 5\n3 4 1 9 7\"\"\") == '4'\nassert solution(\"\"\"4 10\n1 2 1 7\n1 1 1 1\"\"\") == '0'\nassert solution(\"\"\"10 10\n8 2 1 8 5 5 4 3 6 9 9\n3 9 8 7 5 2 9 2 7 8 1\"\"\") == '4'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 6\\n1 2 3 4 5') == '3'\nassert solution('5 10\\n4 8 1 9 7') == '2'\nassert solution('4 10\\n1 3 1 7') == '4'"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\\n\") == \"3\"\nassert solution(\"5 10\\n4 8 1 9 7\\n\") == \"2\"\nassert solution(\"4 10\\n1 3 1 7\\n\") == \"4\"\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6\\n1 2 3 4 5\\n') == '3'\nassert solution('5 10\\n4 8 1 9 7\\n') == '2'\nassert solution('4 10\\n1 3 1 7\\n') == '4'\n\nprint(\"Tests passed.\")"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\\n\") == \"3\"\nassert solution(\"5 10\\n4 8 1 9 7\\n\") == \"2\"\nassert solution(\"4 10\\n1 3 1 7\\n\") == \"4\"\n\"\"\""
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a\\nb') == 'a\\nb'\nassert solution('a\\nb\\nc') == 'a\\nb\\nc'\n'''\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\") == \"3\"\nassert solution(\"5 10\\n4 8 1 9 7\") == \"2\"\nassert solution(\"4 10\\n1 3 1 7\") == \"4\"\nprint('Test pass.')\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n0 1 1\\n1 0 0\\n1 1 1\") == \"possible\"\nassert solution(\"2 3\\n0 1 1\\n1 0 0\\n1 1 1\") == \"impossible\"\n\"\"\"\n\n\nfrom typing import List, Tuple, Dict\nimport numpy as np\nimport pandas as pd\nfrom scipy import optimize as opt"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n0 1 0\\n1 0 0') == 'possible'\nassert solution('1 2\\n1 0 0\\n0 1 0') == 'impossible'\n'''\n\nC, n = input().split(' ')\nC, n = int(C), int(n)"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n0 1 1\\n1 0 0\\n') == 'possible'\nassert solution('1 2\\n1 0 1\\n0 1 0\\n') == 'impossible'\nassert solution('1 2\\n1 1 1\\n0 1 0\\n') == 'impossible'\nassert solution('1 2\\n0 1 1\\n1 1 1\\n') == 'impossible'\nassert solution('1 2\\n0 1 0\\n1 0 1\\n') == 'possible'\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2\\n0 1 1\\n1 0 0') == 'possible'\nassert solution('1 2\\n1 0 0\\n0 1 0') == 'impossible'\nassert solution('1 2\\n0 0 0\\n1 0 1') == 'impossible'\nassert solution('1 2\\n0 1 0\\n0 0 1') == 'possible'\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n0 1 1\\n1 0 0\\n1 0 1') == 'possible'\nassert solution('1\\n2\\n0 1 0\\n1 0 1') == 'impossible'\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"possible\"\nassert solution(\"1 2\\n1 0 0\\n0 1 0\") == \"impossible\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"possible\"\nassert solution(\"1 2\\n1 0 1\\n0 1 0\") == \"impossible\"\nassert solution(\"1 2\\n0 1 1\\n1 0 1\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n1 0 1\\n\") == \"possible\"\nassert solution(\"1 2\\n1 0 1\\n\") == \"possible\"\nassert solution(\"1 2\\n1 1 1\\n\") == \"impossible\"\nassert solution(\"1 2\\n1 0 0\\n\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\\n\") == \"possible\"\nassert solution(\"1 2\\n0 1 1\\n1 0 1\\n\") == \"impossible\"\n\"\"\"\n\nimport sys\n\nC, n = [int(x) for x in sys.stdin.readline().split()]\npeople_left, people_entered, people_stayed = [int(x) for x in sys.stdin.readline().split()]"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2\\n0 1 1\\n1 0 0') == 'possible'\n\"\"\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n\") == \"1\"\nassert solution(\"2 3\\n\") == \"1.875\"\nassert solution(\"6 2\\n\") == \"4.25\"\n\"\"\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 1\n''') == '1'\nassert solution('''2 3\n''') == '1.875'\nassert solution('''6 2\n''') == '4.25'\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1.875\"\nassert solution(\"6 2\") == \"4.25\""
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n\") == \"1\"\nassert solution(\"2 3\\n\") == \"1.875\"\nassert solution(\"6 2\\n\") == \"4.25\"\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1.8\"\nassert solution(\"6 2\") == \"4.25\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1.875\"\nassert solution(\"6 2\") == \"4.25\"\nprint(\"Passed all tests.\")\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == '1'\nassert solution(\"2 3\") == '1.875'\nassert solution(\"6 2\") == '4.25'\n\"\"\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nn, k = map(int, input().split())"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\n\"\"\""
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\n\"\"\"\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2 7') == '1 4'\nassert solution('1 1 0') == '0 0'\nassert solution('3 0 0') == '1 6'\n\"\"\""
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1 0') == '0 0'\nassert solution('1 1 1') == '0 0'\nassert solution('2 3 4') == '2 1 1'\nassert solution('2 1 0') == '1 2 1'\nassert solution('5 7 6') == '3 3 3'\n\nimport os\nimport io\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 0\\n\") == \"0 0\"\nassert solution(\"4 2 7\\n\") == \"1 4\"\nassert solution(\"3 0 0\\n\") == \"1 6\"\n\"\"\"\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 0') == '0 0'\nassert solution('3 0 0') == '1 6'\nassert solution('4 2 7') == '1 4'\n\"\"\""
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\n\"\"\"\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\\n') == '1'\nassert solution('4\\nBWWB\\nWBWB\\nBWWB\\nBWBW\\n') == '0'\nassert solution('6\\nBWBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nWBBWWB\\nWWBWBB\\n') == '0'"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\") == '1'\nassert solution(\"4\\nBWWB\\nBWBB\\nWBBW\\nWBWW\") == '0'\nassert solution(\"6\\nBWBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nWBBWWB\\nWWBWBB\") == '0'"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\nWBBW\nWBWB\nBWWB\nBWBW''') == '1'\nassert solution('''4\nBWWB\nBWBB\nWBBW\nWBWW''') == '0'\nassert solution('''6\nBWBWWB\nWBWBWB\nWBBWBW\nBBWBWW\nWBBWBB\nWWBWBB''') == '0'\n\nprint('Hooray!')\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nWBBW\\nWBWB\\nBWWB\\nBWBW') == '1'\nassert solution('4\\nBWWB\\nBWBB\\nWBBW\\nWBWW') == '0'\nassert solution('6\\nBWWBWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nWBBWWB') == '0'"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\") == \"1\"\nassert solution(\"4\\nWBWB\\nBWBB\\nWBBW\\nWBWW\") == \"0\"\nassert solution(\"6\\nBWWB\\nBWBB\\nWBBW\\nBBWB\\nWWBB\\nWBBW\\nBWWB\") == \"0\"\n\n\"\"\"\nimport pytest\nimport sys\nsys.path.append('./')\nfrom python.kata.is_it_a_valid_walk import is_it_a_valid_walk\n\n\n@pytest.mark.parametrize('input_and_result',\n                         [\n                             ('4\\nWBBW\\nWBWB\\nBWWB\\nBWBW', 1),\n                             ('4\\nWBWB\\nBWBB\\nWBBW\\nWBWW', 0),\n                             ('6\\nBWWB\\nBWBB\\nWBBW\\nBBWB\\nWWBB\\nWBBW\\nBWWB', 0)\n                         ]\n                         )\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n4\nBWWB\nWBWB\nBWWB\nBWBW\n\"\"\"\n) == '1'\nassert solution(\n\"\"\"\n4\nBWWB\nWBWB\nBWWB\nBWBW\n\"\"\"\n) == '0'\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\") == \"1\"\nassert solution(\"4\\nBWWB\\nWBWB\\nWBBW\\nWBWW\") == \"0\"\n\n\"\"\"\n\nfrom collections import Counter\nimport functools\nimport operator\nimport re"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\") == \"1\"\nassert solution(\"6\\nBWWB\\nWBWB\\nWBBW\\nBBWB\\nBWWB\\nWWBW\") == \"0\"\nassert solution(\"3\\nBBBB\\nBWBW\\nWBBW\\nBWBW\") == \"0\"\nassert solution(\"2\\nBBB\\nBWB\") == \"0\"\nassert solution(\"6\\nBWWB\\nWBWB\\nWBBW\\nBBWB\\nBWWB\\nWWBW\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\nBWWB\\nWBWB\\nBWWB\\nBWBW') == '1'\nassert solution('4\\nWBBW\\nWBWB\\nBWWB\\nBWBW') == '0'\n\"\"\"\n\n\"\"\"\n2. A non-empty array A consisting of N integers is given. The array contains an odd number of elements, and each element of the array can be paired with another element that has the same value, except for one element that is left unpaired.\n\nFor example, in array A such that:\n\n  A[0] = 9  A[1] = 3  A[2] = 9\n  A[3] = 3  A[4] = 9  A[5] = 7\n  A[6] = 9\nthe elements at indexes 0 and 2 have value 9,\nthe elements at indexes 1 and 3 have value 3,\nthe elements at indexes 4 and 6 have value 9,\nthe element at index 5 has value 7 and is unpaired.\nWrite a function:\n\n    def solution(A)\n\nthat, given an array A consisting of N integers fulfilling the above conditions, returns the value of the unpaired element.\n\nFor example, given array A such that:\n  A[0] = 9  A[1] = 3  A[2] = 9\n  A[3] = 3  A[4] = 9  A[5] = 7\n  A[6] = 9\nthe function should return 7, as explained in the example above.\n\nWrite an efficient algorithm for the following assumptions:\n\n        N is an odd integer within the range [1..1,000,000];\n        each element of array A is an integer within the range [1..1,000,000,000];\n        all but one of the values in A occur an even number of times.\n\n\"\"\"\n\"\"\"\nnumbers.py\nhttps://app.codility.com/demo/results/trainingZFJV1G-V4Y/"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\") == \"1\"\nassert solution(\"4\\nBWWB\\nBWBB\\nWBBW\\nWBWW\") == \"0\"\nassert solution(\"6\\nBWBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nWBBWBB\\nWWBWBB\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8') == '2 1\\n3 4\\n3 2\\n1 2\\n3 7'\n\"\"\"\n\n\"\"\"\nTODO: change input format\n\"\"\""
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 2 3\\n1 2 1 3\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3') == '3 4'\n\"\"\"\n\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(15000)"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 4 5 6\") == \"5 5\"\nassert solution(\"1 4 2 4 5\") == \"5 5\"\nassert solution(\"2 3 1 4 2\") == \"2 4\"\nassert solution(\"1 2 2 3 4\") == \"3 3\"\nassert solution(\"1 2 2 4 5\") == \"2 4\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n\"\"\"\nimport sys\nimport time"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"1 2\\n3 4\\n3 2\\n1 2\\n3 7\"\n\"\"\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\\n') == '3 2\\n1 2\\n3 7\\n'\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2 1 1 2') == '2 1'\nassert solution('2\\n6 3 4') == '3 4'\nassert solution('1\\n2 4 1 3') == '2 1'\nassert solution('1\\n2 1 1 3') == '3 7'\nassert solution('1\\n4 5 8') == '3 2'\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\\n\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n\n\"\"\"\n\nimport sys\nimport bisect"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8') == '2 1\\n3 4\\n3 2\\n1 2\\n3 7'\nassert solution('4 7 5 7\\n2 6 3 5\\n2 5 2 6\\n3 4 2 8\\n3 4 3 9') == '2 1\\n1 4\\n1 3'\nassert solution('3 3 3 3\\n1 5 5 7\\n2 6 6 8\\n3 7 7 9') == '2 1\\n1 4\\n1 3'\nassert solution('7 8 9 8\\n4 5 6 7\\n1 3 4 5\\n2 5 3 6\\n3 2 2 8\\n3 2 3 9') == '2 1\\n3 4\\n3 2\\n1 2\\n1 3'\nassert solution('1 1 1 1\\n9 8 7 6\\n7 5 2 4\\n3 2 3 4\\n3 4 5 6\\n1 4 7 8') == '2 1\\n3 2\\n1 2\\n3 4\\n1 4'\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3,2,0,-4\") == True\nassert solution(\"1,2\") == True\nassert solution(\"1\") == False\nassert solution(\"\") == False"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"[3, 2, 0, -4]\") == True\nassert solution(\"[1, 2]\") == True\nassert solution(\"[1]\") == False\nassert solution(\"[0]\") == True\nassert solution(\"[1, 2, 3]\") == False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == True\nassert solution('3,2,0,-4') == True\nassert solution('1,2') == True\nassert solution('1') == False\nassert solution('3,2,0,-4') == True\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3,2,0,-4\") == True\nassert solution(\"1,2\") == True\nassert solution(\"1\") == True\nassert solution(\"\") == False\n\"\"\"\nfrom typing import List\n\nfrom definitions import ListNode\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"[3,2,0,-4]\\n1\") == True\nassert solution(\"[1,2]\\n0\") == True\nassert solution(\"[1]\\n-1\") == False\nassert solution(\"[]\\n-1\") == False\nassert solution(\"[3,2,0,-4]\\n0\") == True\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution([3,2,0,-4]) == True\nassert solution([1,2]) == True\nassert solution([1]) == True\nassert solution([3,2,0,-4,3]) == False\n\"\"\""
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 -> 2 -> 0 -> -4\") == \"true\"\nassert solution(\"1 -> 2\") == \"true\"\nassert solution(\"1\") == \"false\""
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"[3,2,0,-4]\") == True\nassert solution(\"[1,2]\") == True\nassert solution(\"[1]\") == False\nassert solution(\"[3,2,0,-4]\") == True\nassert solution(\"[1,2,3]\") == False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2\\n0\\n-4\\n1\") == True\nassert solution(\"1\\n2\") == True\nassert solution(\"1\\n\") == False"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('[3,2,0,-4]\\n1') == True\nassert solution('[1,2]\\n0') == True\nassert solution('[1]\\n-1') == False\nassert solution('[1]\\n1') == False\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution([2, 7, 11, 15]) == [0, 1]\n\"\"\""
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2, 7, 11, 15') == '0, 1'\n\"\"\"\n\nfrom typing import List, Tuple\n\nnums: List[int] = [2, 7, 11, 15]\ntarget: int = 9\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution( [2, 7, 11, 15]) == [0, 1]\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution([2,7,11,15]) == [0,1]"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2, 7, 11, 15') == '0, 1'\n\"\"\"\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(expected_output)"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 7 11 15') == '0 1'\n\"\"\"\n\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        d = {}\n        for i, num in enumerate(nums):\n            if target - num in d:\n                return [d[target - num], i]\n            else:\n                d[num] = i\n        return None\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 7 11 15\") == [0, 1]\n\"\"\""
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 7 11 15') == '0 1'\n\"\"\""
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6,3,12,1,0\") == \"3,4\"\nassert solution(\"1,2,4\") == \"1,2\"\nassert solution(\"0,1,1,0\") == \"0,2\"\n\"\"\"\n\n\"\"\"\nYour input\n\nYour answer\n\nYour expected output\n\nIn this problem, the input string contains a comma-separated integers. Each integer begins with a sign, either + or -, and is followed by one or more digits. The input string will contain between 2 and 100 integers, with no integer appearing more than once.\n\nFor example, in the string\n\n\"+1,22,7,-13,+11,+111,101,1,0,0,0\"\nthe digits that are not part of a pair of consecutive signs (+) and (-) are the digits 1, 22, 7, -13, 11, 111, 101, 1, 0, 0, 0.\n\nThe digits from the string that form consecutive pairs of signs (+) and (-) are the digits that can be part of a pair of consecutive signs (+) and (-). So for example, the string\n\n\"+1,22,7,-13,+11,+111,101,1,0,0,0\"\nhas 5 pairs of consecutive signs, the first of which is the pair (-13, +11), and the second is the pair (22, 1).\n\nNote that there are no other pairs of consecutive signs in the input string.\n\nYour task is to compute the number of pairs of consecutive signs in the input string.\n\nInput Format\n\nThe input begins with an integer t (1\u2264t\u2264100) representing the number of test cases to follow.\nEach test case consists of a string s consisting of between 2 and 100 characters, inclusive, consisting of digits, the characters '+' and '-', and commas.\n\nConstraints\n\nEach character in s is either a digit or a character '+' or '-'\nNo character other than '+' or '-' appears more than once in s.\nThere is at least one character that appears in s.\n\nOutput Format\n\nFor each test case, print the number of pairs of consecutive signs in the input string.\n\nSample Input\n\n3\n+1,22,7,-13,+11,+111,101,1,0,0,0\n-1,-2,3,3,2,1,0,0,0,0,0,0\n+1,-2,0,1,2,3,3,1,1,0,0,0\nSample Output\n\n5\n-4\n0\nExplanation\n\nIn each case, the input string contains 5 pairs of consecutive signs: (-13, +11), (-2, 1), (-1, 0), (1, 2), and (-2, 3).\n\n\"\"\"\n\n\n\"\"\"\nThe problem statement is slightly different than in the previous problem set:\nThe input consists of a single integer t, which is the number of test cases.\n\nThe input consists of t strings, each of which represents a string s consisting of between 2 and 100 characters, inclusive, consisting of digits, the characters '+' and '-', and commas.\n\nThe string is given in the correct format, so that it can be parsed. The string contains no other characters.\n\nConstraints\n\nThe input contains between 2 and 100 test cases, inclusive.\n\nEach test case consists of a string s consisting of between 2 and 100 characters, inclusive, consisting of digits, the characters '+' and '-', and commas.\n\nThe string is given in the correct format, so that it can be parsed. The string contains no other characters.\n\nSample Input\n\n3\n+1,22,7,-13,+11,+111,101,1,0,0,0\n-1,-2,3,3,2,1,0,0,0,0,0,0\n+1,-2,0,1,2,3,3,1,1,0,0,0\nSample Output\n\n5\n-4\n0\nExplanation\n\nIn each case, the input string contains 5 pairs of consecutive signs: (-13, +11), (-2, 1), (-1, 0), (1, 2), and (-2, 3).\n\n\"\"\"\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n\") == \"0\\n\"\nassert solution(\"4\\n\") == \"1\\n\"\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\nassert solution('8\\n') == '4'\nassert solution('6\\n') == '6'\n\"\"\""
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n\") == \"0\"\nassert solution(\"4\\n\") == \"1\"\nassert solution(\"6\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n\"\"\""
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n') == '0'\nassert solution('6\\n') == '1'\n\"\"\""
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '1'\nassert solution('3') == '0'\n\"\"\""
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n\") == \"0\"\nassert solution(\"4\\n\") == \"1\""
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\nassert solution(\"1\\n3 7\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\nassert solution('2\\n1 1 1 1') == 'impossible'\nassert solution('2\\n1 2 2 1') == '4'\nassert solution('3\\n1 2 2 1') == 'impossible'\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\nassert solution(\"1\\n3 7\") == \"impossible\"\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\nassert solution(\"1\\n3 7\") == \"impossible\"\nassert solution(\"1\\n1\") == \"impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\nassert solution(\"1\\n3 7\") == \"impossible\"\nassert solution(\"4\\n1 2 3 4\") == \"impossible\"\nassert solution(\"5\\n3 3 1 2 2\") == \"4\"\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1 1\") == \"impossible\"\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2\n1 2 2 1''') == '4'\nassert solution('''1\n3 7''') == 'impossible'\nassert solution('''2\n5 1 2 4''') == 'impossible'\nassert solution('''3\n2 3 7 1''') == 'impossible'\nassert solution('''3\n4 7 2 3''') == 'impossible'\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2\n1 2 2 1''') == '4'\nassert solution('''3\n7 6 7 8''') == 'impossible'\nassert solution('''4\n7 6 7 8 9''') == 'impossible'\nassert solution('''5\n7 6 7 8 9 10''') == 'impossible'\nassert solution('''7\n7 6 7 8 9 10 11''') == 'impossible'\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\nprint(\"Passed\")\n\n-----Problem-----\n\n+++++\n\n-----\n'''\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"184 1\\n\") == \"180\"\nassert solution(\"123450995 1\\n\") == \"123451000\"\n\"\"\""
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"184 1\") == \"180\"\n\"\"\"\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n\"\"\"\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n\"\"\"\n\nimport math\n\nc, k = input().split()\nc = int(c)\nk = int(k)\n\nnum_zeros = 10 ** k\ncandy = c // num_zeros\ncandy = math.floor(candy) * num_zeros\ncandy = candy + (num_zeros * 10 - c % num_zeros)\nprint(candy)\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n\"\"\""
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n\nprint(solution(\"184 1\"))\nprint(solution(\"123450995 1\"))\n\n\"\"\"\n\nfrom decimal import Decimal"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('184 1') == '180'\nassert solution('123450995 1') == '123451000'\n\"\"\""
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('184 1') == 180\nassert solution('123450995 1') == 123451000\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('184 1\\n') == '180'\nassert solution('123450995 1\\n') == '123451000'\nprint('Success')\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\") == 0.0\nassert solution(\"3\\n0 1\\n1 0\\n1 1\") == 0.0\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3\\n') == '0.000000'"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n0\\n0') == '0.000000'\nassert solution('1\\n1\\n1') == '0.000000'\nassert solution('1\\n2\\n3') == '0.333333'\nassert solution('3\\n0\\n1\\n2') == '1.333333'\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\nassert solution('3\\n0 1\\n1 0\\n1 1') == '0.000000'\n\"\"\""
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n0 1\\n1 0\") == \"0.0\"\nassert solution(\"3 3\\n1 1\\n2 2\") == \"1.0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\") == \"0.000000\""
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.000000'\nassert solution('3\\n0 1\\n1 0\\n1 1') == '0.000000'\n\"\"\"\n\nN = int(input())\nans = 0\ncoords = []\nfor i in range(N):\n    coords.append(list(map(float, input().split())))\n\nfor i in range(N):\n    a = float(input())\n    ans += a\n    ans += sum(map(lambda x: min(x, abs(x - a)), coords[i]))\n\nprint('%.6f' % ans)\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430 \u043d\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435: \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0442\u0440\u043e\u0439\u043a\u0438\n\n\u041f\u0440\u043e\u0441\u0442\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0442\u0440\u043e\u0439\u043a\u0443 \u0432 \u043f\u0430\u0439\u0442\u043e\u043d\u0435.\n\n\u0414\u0430\u043d\u044b \u0442\u0440\u0438 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430, \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f, \u0442\u043e \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u0435\u0442 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0442\u0440\u043e\u0439\u043a\u0430 \u0438\u0437 \u044d\u0442\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f. \u0414\u0430\u043d\u044b \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 \u0438 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $k$. \u041f\u0435\u0440\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043b\u0435\u0432\u044b\u043c, \u0432\u0442\u043e\u0440\u043e\u0435 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0430\u0432\u044b\u043c. \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0442\u0440\u043e\u0439\u043a\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 \u0447\u0435\u043c $k$-\u0430\u044f \u043f\u043e \u043c\u043e\u0434\u0443\u043b\u044e \u0441\u0443\u043c\u043c\u0430 \u043f\u0435\u0440\u0432\u043e\u0439 \u0438 \u0432\u0442\u043e\u0440\u043e\u0439 \u0446\u0438\u0444\u0440. \u041f\u0435\u0440\u0435\u0441\u0442\u0430\u0432\u044c\u0442\u0435 \u044d\u0442\u0438 \u0447\u0438\u0441\u043b\u0430 \u043c\u0435\u0441\u0442\u0430\u043c\u0438, \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $n \\leq 10^{5}$, \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u2014 \u043c\u0430\u0441\u0441\u0438\u0432 \u0442\u0440\u043e\u0435\u043a \u0438\u0437 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e, \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e. \u0412 \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $k \\leq n$ \u2014 \u0441\u0443\u043c\u043c\u0430 \u0446\u0438\u0444\u0440 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u043f\u0435\u0440\u0432\u044b\u0445 \u0434\u0432\u0443\u0445 \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432. \u0412 \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $a$ \u2014 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0446\u0438\u0444\u0440\u0430 \u0432 \u0434\u0432\u0443\u0445 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430\u0445.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0415\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043d\u0430 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u0432\u044b\u0432\u043e\u0434\u044f\u0449\u0435\u0435 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u043c\u0435\u0441\u0442\u0430\u043c\u0438, \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0430\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0431\u044b\u043b \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e, \u043d\u043e \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c \u0438\u0437 \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u0447\u0438\u0441\u0435\u043b. \u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c \u0441\u043b\u043e\u0432\u043e\u043c, \u0442\u043e \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0442\u0430\u043a\u0438\u0445 \u043f\u0430\u0440, \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f \u0438\u0445 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432. \u0415\u0441\u043b\u0438 \u0442\u0430\u043a\u0438\u0445 \u043f\u0430\u0440 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e, \u0442\u043e \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043b\u044e\u0431\u043e\u0439.\n\n\nSample Input 1:\n3\n1 1\n2 2\n3 3\n2\nSample Output 1:\n1 2\n\nSample Input 2:\n3\n1 1\n2 2\n3 3\n2\nSample Output 2:\n1 3\n\"\"\"\n\nn = int(input())\nl = []\nfor i in range(n):\n    l.append(list(map(int, input().split())))\n\nk = int(input())\na = int(input())\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        if (a - l[i][0]) * (a - l[i"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == 0.0\n\"\"\"\n\nimport math"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\") == \"0.000000\"\n\nassert solution(\"0 1\\n1 0\\n1 1\") == \"0.000000\"\n\nassert solution(\"3\\n0 1\\n1 0\\n1 1\") == \"0.000000\"\n\nassert solution(\"2\\n0 1\\n1 0\") == \"0.000000\"\n\nassert solution(\"4\\n0 0\\n1 0\\n2 0\\n3 0\") == \"0.000000\""
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\") == \"0.000000\"\nassert solution(\"3\\n0 1\\n1 0\\n1 1\") == \"0.000000\"\n\"\"\"\n\n\nimport sys\nimport math\nfrom typing import List, Tuple\n\nsys.setrecursionlimit(10000)\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n4\n3\n2 1 2\n3 2 3 4\n3 4 2 1\n''') == '''\n1\n2\n4\n'''\n\nassert solution('''\n8\n5\n4 1 3 5 6\n2 5 6\n3 6 7 8\n2 6 2\n4 2 6 8 1\n''') == '''\n1\n2\n6\n8\n'''\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n3\\n2 1 2\\n3 2 3 4') == '1\\n2\\n4'\nassert solution('8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1') == '1\\n2\\n6\\n8'\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1\\n2\\n4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"4\\n3\\n2 1 2\\n3 2 3 4\\n3 4 2 1\") == \"1\\n2\\n4\\n\"\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\\n3 4 2 1\") == \"1\\n2\\n4\"\n\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"\n\nprint(solution(\"7\\n4\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\"))"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_1) == '1 2 4'\nassert solution(test_input_2) == '1 2 6'\n\"\"\"\nfrom typing import List, Dict"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == '1\\n2\\n4'\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == '1\\n2\\n6\\n8'\nprint(\"Passed all samples!\")\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2\\n1 2 3 4\\n3 2 3 4\") == \"1 2 4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1 2 6 8\"\nassert solution(\"6\\n2\\n3 4 1 5 6\\n2 3 4 1 5\") == \"1 2 3 4 5\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1 2 6 8\"\nassert solution(\"10\\n6\\n4 8 1 6 7 3 5 2\\n5 4 2 1 8 6 7 3\\n3 8 6 5 4 2 1 7\\n4 8 6 7 5 3 1 2\\n6 8 7 4 3 1 5 2\\n8 4 2 1 3 7 5 6\\n7 3 1 8 6 4 2 5\\n5 1 7 6 2 8 3 4\\n2 4 8 5 7 1 3 6\\n1 7 5 3 2 4 8 6\") == \"1 2 3 4 5 6 7 8\""
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == \"1\\n2\\n4\"\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == \"1\\n2\\n6\\n8\"\n\"\"\"\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3\\n2 1 2\\n3 2 3 4') == '1\\n2\\n4'\n\nassert solution('8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1') == '1\\n2\\n6\\n8'\n\nprint('Success')\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 2\") == \"8\"\nassert solution(\"3 4 5\") == \"60\"\nassert solution(\"1 1 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3, 4, 5) == 60\n\"\"\""
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n\"\"\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2 2') == '8'\nassert solution('3 4 5') == '60'\n\"\"\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 4 5''') == '60'\nassert solution('''2 2 2''') == '8'\n\"\"\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2\") == 8\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 5\") == \"60\"\n\nassert solution(\"2 2 2\") == \"8\"\n\nprint(\"Success\")\n\n\"\"\"\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 0 2\") == \"1.6666666666666667\"\n\nassert solution(\"3 0 0 2\") == \"2.5\"\n\"\"\"\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n3 0 2\") == '1.6666666666666667'\n\"\"\""
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('3 0 2') == '1.6667'\nassert solution('1 -1 4') == '2.5'\nassert solution('2 2 2') == '2.3333333333333335'\nassert solution('2 2 1') == '2.2222222222222223'\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n3 0 2\n''') == '1.6666666666666667'\nassert solution('''1\n-1\n4\n''') == '2.5'\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 0 2\") == \"1.6666666666666667\"\n\"\"\"\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1 0 1') == '2.0'\nassert solution('3 0 2') == '1.6666666666666667'\nassert solution('3 -1 2') == '2.5'\nassert solution('3 0 2') == '1.6666666666666667'\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n3 0 2''') == '1.6666666666666667'\nassert solution('''3\n1 -1 4''') == '2.5'\n\n'''\nSample Input 1\n3\n3 0 2\nSample Output 1\n1.6666666666666667\n\nSample Input 2\n3\n1 -1 4\nSample Output 2\n2.5\n'''\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n0 2 -1 4') == '1.6666666666666667'\n\"\"\""
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 3') == '6'\n\"\"\""
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3\\n') == '6'\nassert solution('15 12\\n') == '7'\n\"\"\"\n\n\"\"\"\nimport math\nn, k = map(int, input().split())"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''7 3''') == '6'\nassert solution('''15 12''') == '7'\nassert solution('''6 2''') == '6'\n\nprint(solution(stdin))\n\n'''\n7 3\n15 12\n6 2"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('15 12') == '7'\n\"\"\"\nfrom typing import List, NamedTuple, Optional\n\n\nclass SequenceNumber(NamedTuple):\n    value: int\n    count: int\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n\"\"\"\n\nfrom typing import List\nfrom itertools import combinations\nfrom math import sqrt\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n\nimport sys\nfrom typing import List, Union\n\nfrom tools import timing\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n\"\"\"\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\") == \"6\"\nassert solution(\"15 12\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\\n\") == \"6\"\n\"\"\""
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n\"\"\""
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\""
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('123864 123865') == 1\nassert solution('198765 198769') == 0\n\"\"\""
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('123864 123865') == '1'\nassert solution('198765 198769') == '0'\n\"\"\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('123864 123865') == '1'\nassert solution('198765 198769') == '0'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '0.66666667'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.66666667'\nprint('The local tests are done. Click on \"Check\" to earn cool rewards!')\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n') == '0.50000000'\nassert solution('3\\n') == '0.66666667'\n\n\"\"\""
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '0.5'\n\"\"\"\n\nfrom collections import Counter, defaultdict"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.66666667'\n\"\"\""
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4') == '0.5'\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.66666667'"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '0.5'\nassert solution('2') == '0.5'\nassert solution('3') == '0.66666667'\nassert solution('10') == '0.5'\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.66666667'\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n') == '0.5'\nassert solution('3\\n') == '0.6666666667'\n\n\"\"\""
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"180\") == \"\"\"triple 20\ntriple 20\ntriple 20\"\"\"\n\nassert solution(\"96\") == \"\"\"triple 19\ndouble 15\nsingle 9\"\"\"\n\n\"\"\"\n\u0414\u0430\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u0447\u0438\u0441\u043b\u043e k \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 C. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430, \u0441\u0443\u043c\u043c\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u043e\u043b\u044c\u0448\u0435 C, \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f.\n\nSample Input 1:\n5 8 3\nSample Output 1:\n5\n8\n3\n\nSample Input 2:\n1 2 3 4 5\n6 2\nSample Output 2:\n3 5\n\nSample Input 3:\n1 3 5\n1\nSample Output 3:\n1 3 5\n\"\"\"\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('180') == 'triple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\""
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\"\n\nfrom sys import stdin\n\nINPUT_STR = stdin.readline()\nINPUT_INT = int(INPUT_STR)"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def __init__(self, target_score: int, num_of_throws: int):\n        self.target_score = target_score\n        self.num_of_throws = num_of_throws\n        self.throw_scores = list()\n\n    def throw_dart(self, score: int) -> None:\n        # print(self.num_of_throws)\n        if self.num_of_throws == 1:\n            if score == 20:\n                self.throw_scores.append('triple'+ str(score))\n            elif score == 19:\n                self.throw_scores.append('double'+ str(score))\n            elif score == 18:\n                self.throw_scores.append('single'+ str(score))\n            else:\n                self.throw_scores.append('impossible')\n            self.num_of_throws -= 1\n        elif self.num_of_throws == 2:\n            if score == 20:\n                self.throw_scores.append('triple'+ str(score))\n            elif score == 19:\n                self.throw_scores.append('double'+ str(score))\n            elif score == 18:\n                self.throw_scores.append('single'+ str(score))\n            else:\n                self.throw_scores.append('impossible')\n            self.num_of_throws -= 1\n        elif self.num_of_throws == 3:\n            if score == 20:\n                self.throw_scores.append('triple'+ str(score))\n            elif score == 19:\n                self.throw_scores.append('double'+ str(score))\n            elif score == 18:\n                self.throw_scores.append('single'+ str(score))\n            else:\n                self.throw_scores.append('impossible')\n            self.num_of_throws -= 1\n        else:\n            print('impossible')\n\n    def solution(self) -> str:\n        if self.num_of_throws == 0 and self.target_score > 0:\n            print('impossible')\n        else:\n            if self.num_of_throws == 3:\n                self.throw_dart(20)\n            elif self.num_of_throws == 2:\n                if self.target_score == 18:\n                    self.throw_dart(19)\n                elif self.target_score == 19:\n                    self.throw_dart(18)\n                elif self.target_score == 20:\n                    self.throw_dart(19)\n                else:\n                    print('impossible')\n            elif self.num_of_throws == 1:\n                if self.target_score == 18:\n                    self.throw_dart(17)\n                elif self.target_score == 19:\n                    self.throw_dart(18)\n                elif self.target_score == 20:\n                    self.throw_dart(19)\n                elif self.target_score == 21:\n                    self.throw_dart(18)\n                else:\n                    print('impossible')\n            for throw_score in self.throw_scores:\n                print(throw_score)"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"180\") == \"triple 20\\ntriple 20\\ntriple 20\"\nassert solution(\"96\") == \"triple 19\\ndouble 15\\nsingle 9\"\nassert solution(\"1\") == \"impossible\"\nassert solution(\"5\") == \"impossible\"\nassert solution(\"20\") == \"impossible\"\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"180\") == \"triple 20\\ntriple 20\\ntriple 20\"\nassert solution(\"96\") == \"triple 19\\ndouble 15\\nsingle 9\"\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'impossible'\nassert solution('1') == 'impossible'\nassert solution('20') == 'triple 20'\nassert solution('3') == 'triple 1'\nassert solution('9') == 'double 1'\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"180\") == \"triple 20\"\n\"\"\"\n\nimport unittest\nimport sys\nimport math"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(180) == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution(96) == 'triple 19\\ndouble 15\\nsingle 9'\n\nSample Input 3:\n66\nSample Output 3:\nimpossible\n\"\"\"\n\n\"\"\"\n[20, 20, 20]\n[20, 20, 20, 20]\n[20, 20, 20, 20, 20]\n[20, 20, 20, 20, 20, 20]\n[20, 20, 20, 20, 20, 20, 20]\n[20, 20, 20, 20, 20, 20, 20, 20]\n[20, 20, 20, 20, 20, 20, 20, 20, 20]\n[20, 20, 20, 20, 20, 20, 20, 20, 20, 20]\n[20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]\n[20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]\n[20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]\n[20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]\n[20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]\n\"\"\""
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\n\"\"\""
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\n\"\"\"\n\n\nfrom unittest import TestCase"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 2\") == \"36\"\nprint(solution(\"10 4 7\"))\nprint(solution(\"5 2 2\"))"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 2\") == \"36\"\nprint(\"Test pass.\")\n\n\"\"\""
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\n\"\"\""
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\n\"\"\""
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\n\"\"\""
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\nassert solution(\"100 100 100\") == \"0\"\n\"\"\""
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\n\"\"\""
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\nprint('Success')\n\n\"\"\"\n\nimport math\n\nn, h, v = map(int, input().split())\n\nh_top = n - h\nh_bottom = n - v\nv_left = h\nv_right = n - v\n\nh_volume = h_bottom * h_top\nv_volume = v_left * v_right\n\nprint(max([h_volume, v_volume]))\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3 8\\n5 8\") == 1\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n3 10\\n5 8') == '7'\nassert solution('2\\n3 8\\n5 8') == '1'\n\n\"\"\""
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n3 10\") == \"7\"\nassert solution(\"2\\n3 8\\n5 8\") == \"1\"\n\"\"\"\n\nimport sys\nfrom math import gcd"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n3 10\\n5 8') == '1'\nassert solution('2\\n3 8\\n5 8') == '0'\n\n\"\"\"\n\n\nfrom math import gcd\nfrom typing import List\n\n\nclass Ingredient:\n    def __init__(self, sourness: int, bitterness: int):\n        self.sourness = sourness\n        self.bitterness = bitterness\n\n    def __repr__(self):\n        return f'{self.sourness} {self.bitterness}'\n\n    def __str__(self):\n        return self.__repr__()\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n3 10\\n') == '7'\n\"\"\"\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('2\\n3 8') == '1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n3 10\") == '7'\nassert solution(\"2\\n3 8\") == '1'"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n3 8\\n5 8') == '1'\n\nassert solution('3\\n10 1000000000\\n100 1000000000\\n0 1000000000') == '30000000'\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n3 8\") == \"1\"\nassert solution(\"3\\n3 8\") == \"0\"\nassert solution(\"2\\n3 8\") == \"1\"\nassert solution(\"5\\n8 3\") == \"4\"\nassert solution(\"3\\n8 3\") == \"1\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 10\\n5 9\\n8 7\\n7 6\") == \"1\"\nassert solution(\"4\\n3 1\\n5 9\\n8 7\\n7 6\") == \"6\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_1) == expected_result_1\n\n\"\"\"\n\nimport unittest\nfrom collections import defaultdict\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(solution(test_input_1), expected_result_1)\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"1\nSimon says smile.\n\n2\nSimon says raise your right hand.\n\n3\nSimon says raise your left hand.\n\n4\nSimon says stop touching your nose.\n\n\"\"\") == \"\"\"smile.\nraise your right hand.\nraise your left hand.\"\"\"\n\nprint('Success')\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"1\nSimon says smile.\n\"\"\") == \"smile.\"\n\nassert solution(\"\"\"3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\"\"\") == \"\"\"raise your right hand.\nraise your left hand.\"\"\"\n\n\"\"\"\n    for i in range(0,int(stdin)):\n        inp=stdin[i]\n        print(inp)\n\"\"\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"1\nSimon says smile.\n\"\"\") == \"smile.\"\nassert solution(\"\"\"3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\"\"\") == \"raise your right hand.\\n\"\\\n    \"raise your left hand.\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n\") == \"raise your right hand.\\nraise your left hand.\\n\"\nassert solution(\"2\\nSimon says smile.\\n\") == \"smile.\\n\"\nassert solution(\"1\\nSimon says smile.\\n\") == \"Simon says smile.\\n\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\nSimon says smile.\\nSimon says smile.\\nSimon says smile.\") == \"smile.\\nSimon says smile.\\nSimon says smile.\"\nassert solution(\"3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\") == \"Simon says raise your right hand.\\nSimon says raise your left hand.\"\n\"\"\""
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n2\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\nLower your left hand.\n\"\"\") == \"\"\"\nSimon says raise your right hand.\nSimon says raise your left hand.\n\"\"\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\nSimon says smile.\\n\") == \" smile.\"\nassert solution(\"2\\nSimon says raise your right hand.\\n\") == \" raise your right hand.\"\nassert solution(\"3\\nSimon says raise your left hand.\\n\") == \" raise your left hand.\"\nprint(\"Passed.\")\n\n\"\"\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\nSimon says smile.\\n\") == \" smile.\"\nassert solution(\"3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n\") == \" raise your right hand.\\n\"\n\"\"\""
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n1\nSimon says smile.\n''') =='smile.\\n'\n\nassert solution('''\n3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n''') =='raise your right hand.\n raise your left hand.\n'''\n\nInput:\n1\nSimon says smile.\n\nOutput:\n smile.\n\nInput:\n3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\nOutput:\n raise your right hand.\n raise your left hand.\n'''\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\n\"\"\"\nimport sys"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\"\"\""
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\n\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\n\"\"\"\nfrom __future__ import annotations\nimport typing\nimport collections\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\nprint(\"PASSED\")\n\n\"\"\"\n\nimport sys\n\nsys.path.append(\"../solutions/miniproject_1\")\nfrom lib.my_timer import MyTimer\nimport solutions.miniproject_1.main as module\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\n'''\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\n\"\"\""
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 4 6 10 12 16 18\") == \"5\"\n\"\"\"\n\nv2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\ncount = 0\n\nwhile v2!= 1 or v3!= 1 or v5!= 1 or v7!= 1 or v11!= 1 or v13!= 1 or v17!= 1 or v19!= 1:\n    if v2 % 2 == 0:\n        v2 += 1\n    else:\n        v2 = 0\n        count += 1\n    \n    if v2 % 2 == 0:\n        v3 += 1\n    else:\n        v3 = 0\n        count += 1\n    \n    if v3 % 3 == 0:\n        v5 += 1\n    else:\n        v5 = 0\n        count += 1\n    \n    if v5 % 5 == 0:\n        v7 += 1\n    else:\n        v7 = 0\n        count += 1\n    \n    if v7 % 7 == 0:\n        v11 += 1\n    else:\n        v11 = 0\n        count += 1\n    \n    if v11 % 11 == 0:\n        v13 += 1\n    else:\n        v13 = 0\n        count += 1\n    \n    if v13 % 13 == 0:\n        v17 += 1\n    else:\n        v17 = 0\n        count += 1\n    \n    if v17 % 17 == 0:\n        v19 += 1\n    else:\n        v19 = 0\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\nassert solution(\"1 2 3 7 11 12 13 17 18 19\") == \"0\"\n\nSample Input 3:\n0 0 0 0 0 0 0 0\nSample Output 3:\n1\n\n\"\"\""
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\\n0 1\\n1 2\\n2 3\"\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\\n0 1\\n0 2\\n0 3\"\n\"\"\""
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\\n0 1\\n0 2\\n0 3\"\n\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\\n0 1\\n0 2\"\n\"\"\"\n\nimport sys\nimport re\nimport string"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC\\n') == '3\\n0 1\\n1 2\\n2 3\\n'\nassert solution('4 1\\nA\\nA\\nG\\nT\\n') == '2\\n0 1\\n0 2\\n0 3\\n'\nprint('test passed')\n\nimport sys\nfrom collections import deque, defaultdict"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1\\nAB') == '0 1'\nassert solution('4 1\\nAA\\nAT\\nTT\\nTC') == '3'\n\nprint(solution(input()))\n\n\"\"\"\n\nimport sys\nfrom typing import List\n\nsys.setrecursionlimit(10000)\n\n\nclass Node:\n    def __init__(self, name: str, children: List['Node'], weight: int = 0):\n        self.name = name\n        self.children = children\n        self.weight = weight\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __str__(self):\n        if len(self.children) == 0:\n            return f\"{self.name} {self.weight}\"\n        else:\n            ret_str = f\"{self.name} \" +''.join([str(child) for child in self.children])\n            return ret_str + f\" {self.weight}\"\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC') == 3\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\\n0 1\\n1 2\\n2 3\"\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\\n0 1\\n0 2\\n0 3\"\n\n\"\"\""
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == '3\\n0 1\\n1 2\\n2 3'\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == '2\\n0 1\\n0 2\\n0 3'\n\n\"\"\"\n\nfrom typing import Dict, List, Tuple\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC') == '3\\n0 1\\n1 2\\n2 3'\nassert solution('4 1\\nA\\nA\\nG\\nT') == '2\\n0 1\\n0 2\\n0 3'\n\n\"\"\"\n\nfrom math import inf\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\\n0 1\\n1 2\\n2 3\"\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC') == '3\\n0 1\\n0 2\\n1 2\\n2 3'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ab') == '-1'\nassert solution('aaaa') == 'a'\nassert solution('ba') == '-1'"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == -1\nassert solution('a') == 'a'\nassert solution('aba') == 'a'\nassert solution('abb') == 'a'\nassert solution('abba') == 'ab'\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abba\") == \"aba\"\nassert solution(\"abab\") == \"aba\"\nassert solution(\"ababa\") == \"aba\"\nassert solution(\"ababab\") == \"ababa\"\nassert solution(\"abababab\") == \"ababab\"\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '-1'\nassert solution('a') == 'a'\nassert solution('aa') == 'aa'\nassert solution('ab') == '-1'\nassert solution('aba') == 'aba'\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == '-1'\nassert solution('abc') == '-1'\nassert solution('cba') == 'a'\nassert solution('abcba') == 'a'\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == -1\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"b\") == -1\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"ab\") == -1\nassert solution(\"bbba\") == \"b\"\n\"\"\""
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('abb') == 'b'\nassert solution('ab') == 'b'\n\"\"\""
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == -1\nassert solution('aaaa') == 'a'\nassert solution('ab') == -1\nassert solution('abb') == '-1'\nassert solution('abbccc') == '-1'\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\"\n\"\"\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\"\n\n\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 100\\n2 3\") == \"Dr. Chaz will have 1 piece of chicken left over!\"\nassert solution(\"20 100\\n1 1\") == \"Dr. Chaz needs 2 more piece[s] of chicken!\"\n\"\"\"\n\nn, m = [int(i) for i in input().split()]\nc = [int(i) for i in input().split()]\nl = c[0] // c[1]\nl2 = c[0] % c[1]\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20 100\\n2 3') == 'Dr. Chaz will have 1 piece of chicken left over!'\nassert solution('100 100\\n100 100') == 'Dr. Chaz needs 100 more piece[s] of chicken!'\nassert solution('1 1\\n1 1') == 'Dr. Chaz needs 1 more piece of chicken!'"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '20 100'\n) == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution(\n    '2 3'\n) == 'Dr. Chaz needs 1 more piece of chicken!'\n\n\"\"\"\n\n\"\"\"\n\nd = {\n    \"0\": \"\",\n    \"1\": \"one \",\n    \"2\": \"two \",\n    \"3\": \"three \",\n    \"4\": \"four \",\n    \"5\": \"five \",\n    \"6\": \"six \",\n    \"7\": \"seven \",\n    \"8\": \"eight \",\n    \"9\": \"nine \",\n}\n\ns = [\n    \"Dr. Chaz needs 1 more piece of chicken!\",\n    \"Dr. Chaz will have 80 pieces of chicken left over!\",\n]"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 100\") == \"Dr. Chaz needs 2 more piece[s] of chicken!\"\nassert solution(\"0 100\") == \"Dr. Chaz needs 1 more piece[s] of chicken!\"\nassert solution(\"20 0\") == \"Dr. Chaz needs 1 more piece[s] of chicken!\"\n\"\"\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3') == 'Dr. Chaz needs 2 more piece[s] of chicken!'\nprint('Success')"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3') == 'Dr. Chaz needs 1 more piece of chicken!'\n\"\"\""
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3') == 'Dr. Chaz needs 1 more piece of chicken!'\nprint('Passed all tests')\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz will have 1 piece of chicken left over!\"\nprint('All tests passed.')\n\"\"\""
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == '-2'\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == '0'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10\") == \"-2\"\nassert solution(\"3 30\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 10\\n1 1 2\\n2 2 2\\n3 2 1') == -2\nassert solution('3 30\\n1 1 1\\n5 2 3\\n5 2 1') == 0"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10\\n1 1 1\\n2 2 2\\n3 2 1\") == -2\n\"\"\"\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"0\"\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == \"-2\"\n\"\"\""
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == -2\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == 0\n\"\"\"\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"-2\"\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == \"0\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 10\n1 1 2\n2 2 2\n3 2 1''') == -2\nassert solution('''3 30\n1 1 1\n5 2 3\n5 2 1''') == 0\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10**7)"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 10\\n2 3 5\\n1 1 1\") == \"-2\"\nassert solution(\"1 1 1\\n3 2 2\\n5 2 1\") == \"0\"\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 10\\n1 1 2\\n2 2 2\\n3 2 1') == '-2'\nassert solution('4 30\\n1 1 1\\n5 2 3\\n5 2 1') == '0'\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#\\n') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as\\n') == 'as'\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as') == 'as'\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\nassert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\") == \"as\"\nassert solution(\"4 4\\nluka\\n#a#\\nkula\\ni#a#\") == \"kala\"\nassert solution(\"4 4\\nluka\\n#a#\\nkula\\n#as\") == \"as\"\nassert solution(\"4 4\\n#a#\\nluka\\n#a#\\nkula\\ni#a#\") == \"kala\"\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\nassert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\") == \"as\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as') == 'as'\nprint(solution('4 4\\nluka\\no#a#\\nkula\\ni#as'))\n\nimport sys"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'4 4\\nluka\\no#a#\\nkula\\ni#as'\n) == 'as'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#\\n') == 'kala'\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\n\"\"\"\n\nimport sys\n\nR, C = map(int, sys.stdin.readline().strip().split())\n\ngrid = []\nfor _ in range(R):\n    grid.append(sys.stdin.readline().strip())\n\n\nclass Word:\n    def __init__(self, r, c, row_dir, word):\n        self.r = r\n        self.c = c\n        self.row_dir = row_dir\n        self.word = word\n\n    def __lt__(self, other):\n        return self.word < other.word"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#\\n') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as\\n') == 'as'\n\"\"\"\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(solution) == 'as'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(None) == \"\"\nassert solution(\"WNEENWEENEENE\") == \"10\"\nassert solution(\"NSEW\") == \"4\"\nassert solution(\"N\") == \"1\"\nassert solution(\"NSENWNWEENW\") == \"7\"\n\n-----Test Input-----\nW\nWWEENW\n\n-----Test Output-----\n6\n7\n2\n6\n6\n8"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('WNEENWEENEENE') == 10\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('NSEW') == '4'\nassert solution('NSNSEWWNEE') == '8'\nassert solution('NSEWNWSWWEWSSEENW') == '13'\nassert solution('NNNSEWNWSWWEWSSEENW') == '10'\nassert solution('NEENNWENESSEWNWSWENWE') == '13'\n\"\"\"\n\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n\n    def test_solution(self):\n        self."
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('WNEENWEENEENE') == 10\nassert solution('NSEW') == 4\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"WNEENWENEENE\") == 10\n\"\"\""
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('WNEENWWEEWWNESEENWWE') == 10\nassert solution('NSEW') == 4\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"WNEENWEENEENE\") == 10\nassert solution(\"NSEW\") == 4"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(WNEENWEENEENE) == 10\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nimport re"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"NSEW\") == \"4\"\nassert solution(\"NSEENW\") == \"10\"\nassert solution(\"NSEENWE\") == \"13\"\nassert solution(\"NSEENWENEWE\") == \"15\"\nassert solution(\"NSEWENW\") == \"12\"\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('WNEENWEENEENE') == 10\nassert solution('NSEW') == 4\nassert solution('NW') == 2\n\"\"\""
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\n'\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\\n\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\n\\nproblems ahead\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a=1, b=2, c=3, d=4) == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n'\nassert solution(a=0, b=4, c=2, d=2) == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\n'\nassert solution(a=0, b=0, c=0, d=0) == 'problems ahead\\n'\nassert solution(a=0, b=0, c=0, d=1) == 'problems ahead\\n'\n\nassert solution(a=1, b=1, c=2, d=1) == '1 - 1 = 0 - 1\\n1 / 1 = 1 / 1\\n'\n\n\"\"\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\n\"\n\nprint(solution(\"1 2 3 4\"))\nprint(solution(\"0 4 2 2\"))"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n'\n\"\"\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2'\n\"\"\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n\"\n\n\"\"\""
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n\"\nassert solution(\"0 4 2 2\") == \"problems ahead\\n\"\nassert solution(\"0 2 2 2\") == \"problems ahead\\n\"\nassert solution(\"0 2 4 2\") == \"problems ahead\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n'\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_stdin_1) == test_expected_1\nassert solution(test_stdin_2) == test_expected_2\nassert solution(test_stdin_3) == test_expected_3\n\"\"\""
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('BANANA PIDZAMA') == '\\n'.join([\n    '.P....',\n    '.I....',\n    '.D....',\n    '.Z....',\n    'BANANA',\n    '.M....',\n    '.A....'\n])\nassert solution('MAMA TATA') == '\\n'.join([\n    '.T..',\n    'MAMA',\n    '.T..',\n    '.A..'\n])\nprint('Test passed')"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \"P.D.A.M.A\\nT.A.M.A\"\nprint(\"The strings are equal\" if solution(\"BANANA PIDZAMA\") == \"P.D.A.M.A\\nT.A.M.A\" else \"The strings are not equal\")\nassert solution(\"MAMA TATA\") == \"T.T.A.A\\nM.A.A\"\nprint(\"The strings are equal\" if solution(\"MAMA TATA\") == \"T.T.A.A\\nM.A.A\" else \"The strings are not equal\")\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \"\"\"\n.P....\n.I....\n.D....\n.Z....\nBANANA\n.M....\n.A....\n\"\"\"\nassert solution(\"MAMA TATA\") == \"\"\"\n.T..\nMAMA\n.T..\n.A..\n\"\"\"\n\"\"\"\n\nCopyright (c) 2020 mjhwa\nThis software is released under the MIT License, see LICENSE.txt.\n\"\"\"\n\nimport sys\n\nclass Crossword(object):\n    def __init__(self, A, B):\n        self.A = A\n        self.B = B\n        self.a = len(A)\n        self.b = len(B)\n        self.grid = []\n        self.build_grid()\n    \n    def build_grid(self):\n        # make grid\n        grid = []\n        for x in range(self.a):\n            grid.append([])\n            for y in range(self.b):\n                grid[x].append('.')\n        # make cross\n        for i in range(self.a):\n            if self.A[i] == self.B[0]:\n                for j in range(self.b):\n                    if self.A[i] == self.B[j]:\n                        grid[i][j] = self.B[0]\n        # update grid\n        self.grid = grid\n        \n    def output(self):\n        for x in range(self.b):\n            print(''.join(self.grid[y][x] for y in range(self.a)))"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('banana pidzama') == 'P....'\nassert solution('mama tata') == 'T..M..'\nassert solution('mama tata mama tata') == 'T..M..M..'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('BANANA PIDZAMA') == '.P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....'\n\nassert solution('MAMA TATA') == '.T..\\nMAMA\\n.T..\\n.A..'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('BANANA PIDZAMA') == '\\nP....\\nI....\\nD....\\nZ....\\nBANANA\\nM....\\nA....'\nassert solution('MAMA TATA') == '\\nT..\\nMAMA\\nT..\\nA..'"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('A B') == 'A\\nB'\nassert solution('B ANA') == 'B\\n.A\\n.N\\n.A'\nassert solution('A B C') == 'A\\nB\\nC'\n\n----\n'''\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('BANANA PIDZAMA') == ('.P....' + '\\n' + '.I....' + '\\n' + '.D....' + '\\n' + 'Z....' + '\\n' + 'BANANA' + '\\n' + '.M....' + '\\n' + '.A....')\n\nassert solution('MAMA TATA') == ('.T..' + '\\n' + 'MAMA' + '\\n' + '.T..' + '\\n' + '.A..')\n\nSolution:\n\ntemp = stdin.split()\nprint('\\n'.join([('.{}.' * len(temp[0])).format(*temp)] + ('.{}.' * len(temp[1])).format(*temp[::-1])))\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\".P....\\n\"\n    \"....P.\\n\"\n    \"MAMA\\n\"\n    \"....T\\n\"\n    \"TATA\\n\") == \"\"\"\\\n.T..\nMAMA\n.T..\n.A..\n\"\"\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('foo') == 'foo'\nassert solution('1 2 3') == '2'\nassert solution('1 3 2') == '2'\nassert solution('1 2 3\\n2 1 3') == '2'\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n10 14\n13 17\n25 26''') == '10'\nassert solution('''2\n1 365\n20 28''') == '365'\nassert solution('''2\n1 365\n20 28\n''') == '10'\nassert solution('''1\n1 365\n''') == '365'\n\n'''\nGiven the following events:\n\nEvent 1: Tuesdays\nEvent 2: Wednesdays\nEvent 3: Fridays\n\nYou don't want to go to the school on Wednesdays and Fridays. \nIf you want to go to the school on Tuesday and Thursday, \nthen you should go to the school on Tuesday and Thursday.\n\nHow many days do you have to wait for the school?\n\n---Output Format---\nOutput the number of days the school will be held for.\n\n---Input Format---\nThe first line contains an integer n, denoting the number of events.\nEach of the next n lines contains two space-separated integers, \na and b, denoting that an event will be held on day a and day b (a and b are integers from 1 to 365).\n\n---Constraints---\n1 <= n <= 100\n1 <= a <= 365\n1 <= b <= 365\n'''\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n10 14\\n13 17\\n25 26') == '10'\nassert solution('2\\n1 365\\n20 28') == '365'"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 12\\n10 12\\n5 7\\n2 6\\n3 7\") == \"6\"\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nlines = sys.argv[1].split('\\n')\n\nevents = []\nfor line in lines:\n    events.append(list(map(int, line.split())))\n\nevents = sorted(events, key=lambda x: x[0])\n\nans = []\ncount = 0\nfor event in events:\n    i = event[0]\n    while count < len(ans) and ans[count] <= i:\n        count += 1\n    ans.append(i)\n\nprint(len(ans) - count)\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"\nassert solution(\"2\\n1 365\\n20 28\") == \"365\""
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n10 14\\n13 17\\n25 26\\n') == 10\nassert solution('2\\n1 365\\n20 28\\n') == 365\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"\nassert solution(\"2\\n1 365\\n20 28\") == \"365\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n10 14\\n13 17\\n25 26') == '10'\nassert solution('2\\n1 365\\n20 28') == '365'\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n10 14\n13 17\n25 26''') == '10'\nassert solution('''1\n1 365\n20 28''') == '365'\n\n'''\n2\n1 365\n20 28\n'''\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('1') == 1\nassert solution('2 2') == 2\nassert solution('1 1') == 1\nassert solution('10 10') == 10\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '0 1'\nassert solution('4') == '2 3'\n\"\"\"\n\nk = int(stdin.readline())\n\nA = 'A'\nB = 'B'\n\nsum_A = 0\nsum_B = 0\nfor _ in range(k):\n    if A == B:\n        sum_B += 1\n        B = 'A'\n    else:\n        sum_A += 1\n        B = 'B'\n\nprint(sum_A, sum_B)\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"2 3\"\n\nprint(solution(\"4\"))\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"2 3\"\nassert solution(\"2\") == \"0 1\"\nassert solution(\"1\") == \"0 1\"\nassert solution(\"0\") == \"0 0\"\nassert solution(\"33\") == \"0 0\"\n\"\"\"\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n') == '0 1'\nassert solution('2\\n') == '1 0'\nassert solution('3\\n') == '2 1'\nassert solution('4\\n') == '3 2'\n\"\"\""
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '2 3'\nassert solution('10') == '4 8'\nassert solution('13') == '6 11'\nassert solution('1') == '0 1'\nassert solution('20') == '9 16'\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '0 1'\nassert solution('0 1') == '2 3'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '2 3'\nassert solution('1') == '0 1'\n\"\"\""
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n\") == \"0 1\"\nassert solution(\"2\\n\") == \"1 0\"\nassert solution(\"3\\n\") == \"1 1\"\nassert solution(\"4\\n\") == \"0 0\"\nassert solution(\"5\\n\") == \"2 0\""
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0 1\"\nassert solution(\"4\") == \"2 3\"\n\"\"\"\nfrom collections import deque\n\nfor _ in range(int(stdin.readline().strip())):\n    K = int(stdin.readline().strip())\n    queue = deque()\n    queue.append([\"\", 0])\n    while queue:\n        s, i = queue.popleft()\n        if s == \"B\"*K:\n            print(i, K-len(s))\n            break\n        queue.append([s+\"A\", i+1])\n        queue.append([s+\"B\", i+1])\n    else:\n        print(-1, -1)\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '0 1'\nassert solution('1') == '0 1'\nassert solution('2') == '0 2'\nassert solution('3') == '0 1 1'\nassert solution('4') == '0 2 1 1'\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == 'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98') == 'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\nassert solution('4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99') == 'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372'\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98') == 'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\nassert solution('4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99') == 'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372'\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100,100\\n2,100,99\\n1,100,99\\n4,100,99\") == 'A 0 99'\nassert solution(\"100,100\\n2,100,99\\n1,100,99\\n4,100,99\") == 'A 0 99'\nassert solution(\"10,10\\n2,100,99\\n1,100,99\\n4,100,99\") == 'A 0 99'\nassert solution(\"100,100\\n1,100,99\\n2,100,99\\n4,100,99\") == 'A 0 99'\nassert solution(\"100,100\\n2,100,99\\n1,100,99\\n4,100,99\") == 'A 0 99'\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\""
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5 3\n1 100 200\n2 100 99\n3 100 50\n3 100 50\n2 100 98\n\"\"\") == \"\"\"B 100 49\nA 1 197\nA 49 100\n0.1965897693\n\"\"\"\n\nassert solution(\"\"\"4 4\n3 100 99\n2 100 99\n1 100 99\n4 100 99\n\"\"\") == \"\"\"A 0 99\nA 0 99\nA 0 99\nA 0 99\n0.4974874372\n\"\"\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\\n\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == 'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == 'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372'\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == \"168\"\n\"\"\""
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2\\n1\\n4\\n3\\n5\\n') == '168'\nprint(solution('5\\n2\\n1\\n4\\n3\\n5\\n'))\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == \"168\"\nassert solution(\"2\\n1\\n1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2\\n1\\n4\\n3\\n5') == 168\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1\\n2\\n3\\n\") == 6\nassert solution(\"2\\n1\\n1\\n\") == 1\nassert solution(\"1\\n2\\n3\\n\") == 1\n\"\"\"\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\nassert solution('\\n') == ''\n\nassert solution('1\\n2') == '2'\n\nassert solution('2\\n1') == '2'\n\nassert solution('1\\n1') == '1'"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2\\n1\\n4\\n3\\n5\\n') == '168'\n\"\"\""
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(Sample Input 1)) == Sample Output 1\nprint(solution(str(Sample Input 1)))\n\nassert solution(str(Sample Input 2)) == Sample Output 2\nprint(solution(str(Sample Input 2)))\n\"\"\"\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2\\n1\\n4\\n3\\n5') == '168'\nassert solution('2\\n1\\n1') == '1'\nassert solution('5\\n2\\n5\\n4\\n2\\n1') == '360'\nassert solution('8\\n9\\n10\\n11\\n2\\n3\\n4\\n5\\n6\\n7') == '737'\nassert solution('8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n2\\n3\\n4\\n5\\n6\\n7\\n8') == '16'\n\"\"\"\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\") == \"168\"\n\"\"\""
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3 3\nABC\nDEF\n2''') == 'CDBEAF'\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2') == 'CDBEAF'\nassert solution('4 4\\nEDF\\nGHI\\nJKL\\nMNO\\n0') == 'CDHEIJKLMNO'\nassert solution('2 2\\nAB\\nBC\\n0') == 'AB'\n\nassert solution('3 3\\nABC\\nDEF\\n2') == 'CBADEF'\nassert solution('4 4\\nEDF\\nGHI\\nJKL\\nMNO\\n0') == 'CDHEIJKLMNO'\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\\n\") == \"CDBEAF\"\n\"\"\""
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2\\n') == 'CDBEAF'\n\"\"\"\n\nfrom collections import Counter\nimport operator\nfrom functools import reduce\nimport sys\n\nstdin = sys.stdin\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\\n\") == \"CDBEAF\"\nassert solution(\"3 3\\nBAC\\nDEF\\n2\\n\") == \"BADCEF\"\nassert solution(\"3 3\\nBCA\\nDEF\\n2\\n\") == \"BACEDF\"\nassert solution(\"3 3\\nABC\\nDEF\\n2\\n\") == \"CDBEAF\"\nassert solution(\"3 3\\nACB\\nDEF\\n2\\n\") == \"ACBDCEF\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\\n\") == \"CDBEAF\"\n\n\"\"\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n0\") == \"CDBEAF\"\n\"\"\"\n\n\"\"\"\n\u0421\u0443\u043c\u043c\u0430 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u043f\u0435\u0440\u0432\u044b\u0445 \u0434\u0435\u0441\u044f\u0442\u0438 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0440\u0430\u0432\u043d\u0430\n\n1**2 + 2**2 +... + 10**2 = 385\n\n\u041a\u0432\u0430\u0434\u0440\u0430\u0442 \u0441\u0443\u043c\u043c\u044b \u043f\u0435\u0440\u0432\u044b\u0445 \u0434\u0435\u0441\u044f\u0442\u0438 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0440\u0430\u0432\u0435\u043d\n\n(1 + 2 +... + 10)**2 = 552 = 3025\n\n\u0421\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044c \u043c\u0435\u0436\u0434\u0443 \u0441\u0443\u043c\u043c\u043e\u0439 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u0438 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u043c \u0441\u0443\u043c\u043c\u044b \u043f\u0435\u0440\u0432\u044b\u0445 \u0434\u0435\u0441\u044f\u0442\u0438 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 3025 \u2212 385 = 2640.\n\n\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044c \u043c\u0435\u0436\u0434\u0443 \u0441\u0443\u043c\u043c\u043e\u0439 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u0438 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u043c \u0441\u0443\u043c\u043c\u044b \u043f\u0435\u0440\u0432\u044b\u0445 \u0441\u0442\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b.\n\"\"\""
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 ABC\\nDEF\\n0\") == \"CBADEF\"\n\"\"\""
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n0') == 'CDBEAF'\n\"\"\"\n\nimport collections\nfrom dataclasses import dataclass\nfrom enum import Enum\nfrom typing import List, Tuple\n\n\nclass Direction(Enum):\n    Left = 0\n    Right = 1\n\n\n@dataclass\nclass Ant:\n    row: int\n    direction: Direction\n    passage: Tuple[List[str], List[str]]\n    order: int\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\nassert solution(\"3 3\\nDEF\\nABC\\n2\") == \"CBADEF\"\nassert solution(\"4 5\\nFGHIJ\\nJKLMN\\nPQRST\\n0\") == \"FGHIJKLMNQRST\"\n\n\"\"\""
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\") == \"1\"\nassert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 N\") == \"4\"\nassert solution(\"1\\n5\\n20 N\\n50 T\\n80 T\\n50 N\") == \"5\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\ncircle = [int(sys.stdin.readline()) for _ in range(N)]\n\nfor i in range(N):\n    if circle[i] == 3 and i > 0:\n        circle[i - 1] += 1\n    if circle[i] == 2 and i < N - 1:\n        circle[i + 1] += 1\nprint(circle.index(max(circle)) + 1)"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N') == '1'\nassert solution('1\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N') == '3'\n\"\"\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\") == \"5\"\nassert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"4\"\n\"\"\""
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n2\\n2 T\\n3 T\\n4 N\\n5 N\\n3 N\\n\") == \"1\"\nassert solution(\"1\\n2\\n3\\n3 N\\n5 P\\n3 N\\n\") == \"3\"\n\nprint(solution(\"1\\n2\\n2 T\\n3 T\\n4 N\\n5 N\\n3 N\\n\"))\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'\nassert solution('2\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N') == '2'\nassert solution('3\\n5\\n100 T\\n100 N\\n100 T\\n100 N') == '3'\nassert solution('4\\n5\\n100 T\\n100 N\\n100 T\\n100 N') == '4'\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\") == \"5\"\nassert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"4\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n3\\nT\\nN\\nT\\nT\\nN\\nT\") == \"1\"\nassert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"3\"\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'\nassert solution('1\\n5\\n20 N\\n50 T\\n80 T\\n50 N\\n30 T') == '2'\nassert solution('1\\n5\\n20 T\\n50 T\\n80 N\\n50 N\\n30 T') == '3'\nassert solution('1\\n5\\n20 N\\n50 N\\n80 N\\n50 N\\n30 N') == '4'\nassert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '5'\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3\n4\n100 T\n100 T\n100 T\n100 T\n100 N\n\"\"\") == \"4\"\n\nassert solution(\"\"\"\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\n\"\"\") == \"1\"\n\n\"\"\"\n\u0412\u0430\u043c \u0434\u0430\u043d\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 JSON.\n\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u0437 \u0441\u0435\u0431\u044f \u043c\u0430\u0441\u0441\u0438\u0432 JSON-\u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043a\u043b\u0430\u0441\u0441\u0430\u043c. \u0423 \u043a\u0430\u0436\u0434\u043e\u0433\u043e JSON-\u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0435\u0441\u0442\u044c \u043f\u043e\u043b\u0435 name, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043c\u044f \u043a\u043b\u0430\u0441\u0441\u0430, \u0438 \u043f\u043e\u043b\u0435 parents, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u043c\u0435\u043d \u043f\u0440\u044f\u043c\u044b\u0445 \u043f\u0440\u0435\u0434\u043a\u043e\u0432.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n[{\"name\": \"A\", \"parents\": []}, {\"name\": \"B\", \"parents\": [\"A\", \"C\"]}, {\"name\": \"C\", \"parents\": [\"A\"]}]  \n  =\n    A\n   / \n  B   C\n /\nA\n\u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 \u043d\u0435 \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442\u0441\u044f \u043e\u0442 \u0441\u0435\u0431\u044f \u044f\u0432\u043d\u043e \u0438\u043b\u0438 \u043a\u043e\u0441\u0432\u0435\u043d\u043d\u043e, \u0438 \u0447\u0442\u043e \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 \u043d\u0435 \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442\u0441\u044f \u044f\u0432\u043d\u043e \u043e\u0442 \u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0430.\n\n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u043f\u0440\u0435\u0434\u043a\u043e\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u043e\u043d \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u044d\u0442\u0443 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435.\n\n<\u0438\u043c\u044f \u043a\u043b\u0430\u0441\u0441\u0430> : <\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0442\u043e\u043c\u043a\u043e\u0432>\n\n\u0412\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u044b \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0432 \u043b\u0435\u043a\u0441\u0438\u043a\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435.\n\nSample Input:\n[{\"name\": \"A\", \"parents\": []}, {\"name\": \"B\", \"parents\": [\"A\", \"C\"]}, {\"name\": \"C\", \"parents\": [\"A\"]}]\nSample Output:\nA : 3\nB : 1\nC : 2\n\n\"\"\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'\nassert solution('2\\n5\\n100 T\\n100 N\\n100 T\\n100 N\\n100 T') == '2'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"6\"\nassert solution(\"6 8\") == \"22\""
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"6\"\n\"\"\"\n\nn, m = map(int, input().split())\nans = 0\nfor i in range(1, n + 1):\n    for j in range(i + 1, n + 1):\n        ans = max(ans, i * j)\nprint(ans)\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n1 2\\n3 4\\n4 5\\n3 6\\n1 6') == '6'\nassert solution('6 8\\n1 2\\n3 4\\n4 5\\n3 6\\n1 6') == '22'\n\"\"\"\n\nimport unittest\nfrom math import comb\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n\") == \"6\\n\"\nassert solution(\"6 8\\n\") == \"22\\n\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n1 3') == '6'\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 2') == 6\nassert solution('6 8\\n1 2 3 4 5 6 7') == 22\nassert solution('10 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10\\n1 2 3 4 5 6 7 8 9 10') == 110\nassert solution('100000 100000\\n100000 100000') == 6004\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 2') == '6'\nassert solution('6 8\\n2 3 1 3 2 1 4 4 1\\n1 3') == '22'\n\"\"\"\n\nfrom math import comb\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n') == '6'\nassert solution('6 8\\n') == '22'\n\"\"\""
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n6 8') == '22'\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n2 4 6 8\\n3 4 7 9\\n4 8 12 16\") == \"6\"\nassert solution(\"6 8\\n1 2 3 4 5 6 7\\n2 3 4 5 6 7 8\\n3 4 5 6 7 8 9\\n4 5 6 7 8 9 10\\n5 6 7 8 9 10 11\\n6 7 8 9 10 11 12\") == \"22\"\n\"\"\"\n\nclass Solution:\n    # @param A : integer\n    # @param B : list of integers\n    # @return an integer\n    def solve(self, A, B):\n        # def dfs(cities, curr_road, curr_cost, visited):\n        #     # print(cities, curr_road, curr_cost, visited)\n        #     if cities == 1:\n        #         # print(\"returning \", curr_cost)\n        #         return curr_cost\n\n        #     if len(curr_road) == cities:\n        #         if cities == 1:\n        #             return curr_cost\n        #         return math.inf\n\n        #     for road in B:\n        #         if road in curr_road or road in visited:\n        #             continue\n        #         curr_road.append(road)\n        #         visited.add(road)\n        #         cost = dfs(cities, curr_road, curr_cost + road, visited)\n        #         visited.remove(road)\n        #         curr_road.pop()\n\n        #     return cost\n\n        # # print(dfs(A, [], 0, set()))\n        # return dfs(A, [], 0, set())\n\n        def dfs(cities, curr_road, curr_cost, visited):\n            if cities == 1:\n                return curr_cost\n\n            if len(curr_road) == cities:\n                return math.inf\n\n            for road in B:\n                if road in curr_road or road in visited:\n                    continue\n                curr_road.append(road)\n                visited.add(road)\n                cost = dfs(cities, curr_road, curr_cost + road, visited)\n                visited.remove(road)\n                curr_road.pop()\n\n            return cost\n\n        return dfs(A, [], 0, set())\n\n\nsolution = Solution()\nprint(solution.solve(4, [1, 2, 3, 4]))\nprint(solution.solve(6, [1, 2, 3, 4, 5, 6, 7]))\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 0\nassert solution('1 2 3\\n4 5 6\\n7 8 9') == 1\n\"\"\"\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\nassert solution('1 4\\n4 3 2 1') == '0'\n\n'''\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 2 1\\n1 2 3 4') == '0'\nassert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\n\"\"\"\nimport math"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\nassert solution(\"1 4\\n4 3 2 1\") == \"0\"\nassert solution(\"4 3\\n2 3 2 1\") == \"0\"\nassert solution(\"4 3\\n4 4 2 1\") == \"1\"\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\nassert solution(\"1 4\\n4 3 2 1\") == \"0\"\n\"\"\"\n\nimport sys\n\nm, n = map(int, sys.stdin.readline().split())\nstacks = [list(map(int, sys.stdin.readline().split())) for i in range(m)]\n\nmin_len = float('inf')\nmin_n = n\n\nfor i in range(n):\n    if stacks[0][i] == 0:\n        min_len = 0\n        min_n = i\n        break\n\nfor i in range(n):\n    if stacks[-1][i] == 0:\n        min_len = 0\n        min_n = i\n        break\n\nfor i in range(m):\n    if stacks[i][0] == 0:\n        min_len = 0\n        min_n = 0\n        break\n    if stacks[i][-1] == 0:\n        min_len = 0\n        min_n = n-1\n        break\n\nfor i in range(m):\n    for j in range(n):\n        if stacks[i][j] == 0:\n            continue\n        if j - 1 >= 0 and stacks[i][j-1] == 0:\n            min_len = 0\n            min_n = j - 1\n            break\n        if j + 1 < n and stacks[i][j+1] == 0:\n            min_len = 0\n            min_n = j + 1\n            break\n        if i - 1 >= 0 and stacks[i-1][j] == 0:\n            min_len = 0\n            min_n = j\n            break\n        if i + 1 < m and stacks[i+1][j] == 0:\n            min_len = 0\n            min_n = j\n            break\n\nsys.stdout.write(str(min_n - min_len))\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 3\\n4\\n6\\n2\") == \"28\"\n\"\"\"\n\nimport math\n\nx = int(input())\nn = int(input())\n\nc = math.floor(n / 2)\nr = n % 2\ns = x * (n + 1)\n\nfor i in range(0, c):\n    s -= x"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"28\"\nassert solution(\"100\") == \"210\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\n3\\n10\\n2\\n12') == '16'\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10\\n3\\n4\\n6\\n2\\n') == '28'\n\"\"\"\n\nx = int(input())\nn = int(input())\n\nfor i in range(n):\n    p = int(input())\n    x += p\n\nprint(x)\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10\\n3\\n4\\n6\\n2') == '28'\nassert solution('10\\n3\\n10\\n2\\n12') == '16'\n\n\"\"\"\n\nimport sys\n\nX = int(sys.stdin.readline().strip())\nN = int(sys.stdin.readline().strip())\nmegabytes = 0\nfor _ in range(N):\n    megabytes += int(sys.stdin.readline().strip())\nprint(X - megabytes)\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 3\\n2\\n4\\n6\\n1') == '28'\n\n\"\"\"\n\nX = int(stdin.readline())\nN = int(stdin.readline())\nspend = []\nfor _ in range(N):\n    spend.append(int(stdin.readline()))\nspend.append(X)\n\ncost = 0\nfor i in range(N + 1):\n    cost += X - spend[i]\nprint(cost)\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10\\n3\\n4\\n6\\n2') == '28'\nassert solution('10\\n3\\n10\\n2\\n12') == '16'\n\"\"\"\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 3\\n4\\n6\\n2\") == \"28\"\nassert solution(\"10 3\\n10\\n2\") == \"16\"\n\"\"\"\n\nimport sys\n\nX = int(sys.stdin.readline())\nN = int(sys.stdin.readline())\np = [int(sys.stdin.readline()) for _ in range(N)]\n\nleft = 0\nright = max(p)\n\nwhile left <= right:\n    mid = (left + right) // 2\n    total = 0\n    for i in p:\n        if i > mid:\n            total += mid\n        else:\n            total += i\n    if total <= X:\n        left = mid + 1\n    else:\n        right = mid - 1\n\nprint(left - 1)\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10\\n3\\n10\\n2\\n12') == '16'\n\"\"\"\n\nimport sys\n\nx = int(sys.stdin.readline().strip())\nn = int(sys.stdin.readline().strip())\nfor _ in range(n):\n    x += int(sys.stdin.readline().strip())\n\nprint(x)\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('octopuses') == 'no hiss'\nassert solution('amiss') == 'hiss'"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"hiss\") == \"hiss\"\nassert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\n\nprint('All tests passed.')\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcs\") == \"hiss\"\nassert solution(\"abcd\") == \"no hiss\"\nassert solution(\"abcs\") == \"hiss\"\nassert solution(\"abcds\") == \"no hiss\"\nassert solution(\"abcde\") == \"no hiss\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nassert solution('hiss') == 'no hiss'\n\"\"\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"hiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\nassert solution(\"ahiss\") == \"hiss\"\n\"\"\""
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nassert solution('mississippi') == 'hiss'\nassert solution('hello') == 'no hiss'\n\nprint('all tests passed.')\n\n------Challenge-------\nIn this task, you have to change the input and output format. The input format needs not to be changed.\n\nSample Input 1:\nabracadabra\nSample Output 1:\nno hiss\nSample Input 2:\noctopuses\nSample Output 2:\nhiss\nSample Input 3:\namiss\nSample Output 3:\nhiss\n\"\"\"\n\n\"\"\"\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u043e \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0434\u0430\u0442\u0435 date -- \u0433\u043e\u0434, \u043c\u0435\u0441\u044f\u0446 \u0438 \u0434\u0435\u043d\u044c.\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e days -- \u0447\u0438\u0441\u043b\u043e \u0434\u043d\u0435\u0439.\n\n\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0433\u043e\u0434, \u043c\u0435\u0441\u044f\u0446 \u0438 \u0434\u0435\u043d\u044c \u0434\u0430\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0430\u0441\u0442\u0443\u043f\u0438\u0442, \u043a\u043e\u0433\u0434\u0430 \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u0434\u0430\u0442\u044b date \u043f\u0440\u043e\u0439\u0434\u0435\u0442 \u0447\u0438\u0441\u043b\u043e \u0434\u043d\u0435\u0439, \u0440\u0430\u0432\u043d\u043e\u0435 days.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435:\n\u0414\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c datetime.\n\u0412\u0430\u043c \u0431\u0443\u0434\u0443\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u044b \u043a\u043b\u0430\u0441\u0441 datetime.date \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u044b \u0438 \u043a\u043b\u0430\u0441\u0441 datetime.timedelta\ufeff \u0434\u043b\u044f \u043f\u0440\u0438\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043d\u0435\u0439 \u043a \u0434\u0430\u0442\u0435.\n\nSample Input 1:\n2016 4 20\n10\nSample Output 1:\n2016 5 4\n\nSample Input 2:\n2016 2 20\n9\nSample Output 2:\n2016 2 29\n\nSample Input 3:\n2015 12 31\n1\nSample Output 3:\n2016 1 1\n\"\"\"\n\n\"\"\"\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u043e \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0434\u0430\u0442\u0435 date -- \u0433\u043e\u0434, \u043c\u0435\u0441\u044f\u0446 \u0438 \u0434\u0435\u043d\u044c.\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e days -- \u0447\u0438\u0441\u043b\u043e \u0434\u043d\u0435\u0439.\n\n\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0433\u043e\u0434, \u043c\u0435\u0441\u044f\u0446 \u0438 \u0434\u0435\u043d\u044c \u0434\u0430\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0430\u0441\u0442\u0443\u043f\u0438\u0442, \u043a\u043e\u0433\u0434\u0430 \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u0434\u0430\u0442\u044b date \u043f\u0440\u043e\u0439\u0434\u0435\u0442 \u0447\u0438\u0441\u043b\u043e \u0434\u043d\u0435\u0439, \u0440\u0430\u0432\u043d\u043e\u0435 days.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435:\n\u0414\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c datetime.\n\u0412\u0430\u043c \u0431\u0443\u0434\u0443\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u044b \u043a\u043b\u0430\u0441\u0441 datetime.date \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u044b \u0438 \u043a\u043b\u0430\u0441\u0441 datetime.timedelta\ufeff \u0434\u043b\u044f \u043f\u0440\u0438\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043d\u0435\u0439 \u043a \u0434\u0430\u0442\u0435.\n\nSample Input 1:\n2016 4 20\n10\nSample Output 1:\n2016 5 4\n\nSample Input 2:\n2016 2 20\n9\nSample Output 2:\n2016 2 29\n\nSample Input 3:\n2015 12 31\n1\nSample Output 3:\n2016 1 1\n\"\"\"\n\nimport datetime\n\ndate_str = input().split(' ')\ndate = datetime.date(int(date_str[0]), int(date_str[1]), int(date_str[2]))\ndays_int = int(input())\n\nfor i in range(days_int):\n    date += datetime.timedelta(days=1)\nprint(date.year, date.month, date.day)\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\""
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"octopuses\") == \"no hiss\"\n\"\"\""
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nprint('all tests passed.')"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nassert solution('mississippi') == 'no hiss'\nassert solution('kiss') == 'hiss'\nassert solution('abacaba') == 'hiss'\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nc++\\nC++\\nC\\nC#\") == \"3\"\nassert solution(\"5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\nc++\nC++\nc\nc#''') == '3'\nassert solution('''5\ncryptography\nblockchain\nArtificial intelligence\nMachine-Learning\nLinux''') == '5'\nprint(solution(input()))\n'''\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\nc++\nC++\nc\nc#''') == 3\nassert solution('''5\ncryptography\nblockchain\nArtificial intelligence\nMachine-Learning\nLinux''') == 5\n\n'''\n\nTest 1\n\nn=int(input())\nfor i in range(n):\n    a=input()\n    for i in range(n):\n        b=input()\n        if a!=b:\n            if a.lower()==b.lower():\n                print(\"2\")\n                exit()\nprint(\"1\")\n\nTest 2\n\nn=int(input())\nlst=[]\nfor i in range(n):\n    a=input()\n    lst.append(a)\nfor i in range(len(lst)):\n    for j in range(len(lst)):\n        if i!=j:\n            if lst[i]==lst[j]:\n                print(\"2\")\n                exit()\nprint(\"1\")\n\nTest 3\n\nn=int(input())\nd=dict()\nfor i in range(n):\n    a=input()\n    if a in d:\n        d[a]=d[a]+1\n    else:\n        d[a]=1\nc=0\nfor i in d:\n    if d[i]>1:\n        c=c+1\nprint(c)\n\nTest 4\n\nn=int(input())\nd=dict()\nlst=[]\nfor i in range(n):\n    a=input()\n    if a in d:\n        d[a]=d[a]+1\n    else:\n        d[a]=1\nfor i in d:\n    if d[i]>1:\n        lst.append(i)\nprint(len(lst))\n\nTest 5\n\nn=int(input())\nlst=[]\nfor i in range(n):\n    a=input()\n    if len(a)>25:\n        a=a[0:25]\n    lst.append(a)\nfor i in range(len(lst)):\n    for j in range(len(lst)):\n        if i!=j:\n            if lst[i]==lst[j]:\n                print(\"2\")\n                exit()\nprint(\"1\")\n\nTest 6\n\nn=int(input())\nlst=[]\nfor i in range(n):\n    a=input()\n    if len(a)>25:\n        a=a[0:25]\n    lst.append(a)\nfor i in range(len(lst)):\n    for j in range(len(lst)):\n        if i!=j:\n            if lst[i][0:24]==lst[j][0:24]:\n                print(\"2\")\n                exit()\nprint(\"1\")\n\n'''"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nc\\nc\\nc\\nc\") == \"3\"\nassert solution(\"5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux\") == \"5\"\n\nimport unittest\nimport io\nimport sys\nimport re\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdin, stdout = sys.stdin, sys.stdout\n        sys.stdin, sys.stdout = io.StringIO(input), io.StringIO()\n        resolve()\n        sys.stdin, sys.stdout = stdin, stdout\n        self.assertEqual(output, sys.stdout.getvalue())\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"4\nc++\nC++\nc\nc#\"\"\"\n        output = \"\"\"3\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"5\ncryptography\nblockchain\nArtificial intelligence\nMachine-Learning\nLinux\"\"\"\n        output = \"\"\"5\"\"\"\n        self.assertIO(input, output)"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nc\\nc\\nc\\nC\") == \"4\\n\"\n\"\"\"\n\nimport collections\nimport typing"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nc++\\nC++\\nc\\nc#\") == \"3\"\nassert solution(\"5\\nCryptography\\nBlockchain\\nArtificial Intelligence\\nMachine Learning\\nLinux\") == \"5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\nc++\\nc\\nc#') == 3\nassert solution('5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux') == 5\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nc++\\nC++\\nc\\nc#\\n\") == 3\n\"\"\"\n\nn = int(input())\nkeywords = []\nfor _ in range(n):\n    keywords.append(input())\n\nset_keywords = set()\nfor k in keywords:\n    k = k.replace(\"-\", \" \")\n    set_keywords.add(k)\n\nres = len(set_keywords)\nprint(res)"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\nc\\nc\\nc\\nc\\n') == '3'\nassert solution('5\\nc\\nc\\nc\\nc\\n') == '5'\n\n'''"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nc\\nc\\nC\\nC\\n\") == \"3\"\nassert solution(\"5\\nc\\nc\\nC\\nC\\n\") == \"5\"\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('TCTGTC') == '21'\nassert solution('TTCCTC') == '17'\nassert solution('CCCCTT') == '9'\nassert solution('CCCCTGC') == '25'\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('TCGTTC') == '21'\nassert solution('CCCCC') == '9'\nassert solution('TTTTC') == '7'\nassert solution('TTCCT') == '15'\nassert solution('TCCGTC') == '19'\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('TCGTC') == 21\n\"\"\""
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"TCG\") == \"21\"\nassert solution(\"TCCCCCCTT\") == \"81\"\n\nprint(solution(\"TCGTTC\"))\nprint(solution(\"CCC\"))\n\n\"\"\"\n\n\"\"\"\nSOLUTION 1\n\"\"\""
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('TCGTTC') == 21\nassert solution('CCC') == 9"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('TCGTTC') == '21'\nassert solution('CCC') == '9'\nprint('The local tests are done. Click on \"Check\" for more details.')"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"TCGTTC\") == 21\n\"\"\"\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('TCGTTC') == '21'\nassert solution('CCC') == '9'\n\n'''\n\nimport sys"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('315\\n45') == '90'\nassert solution('180\\n270') == '90'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"315 45\") == \"90\"\nassert solution(\"180 270\") == \"90\""
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"315\\n45\") == \"90\"\n\nassert solution(\"180\\n270\") == \"90\"\n\nassert solution(\"360\\n0\") == \"180\"\n\nassert solution(\"0\\n180\") == \"180\"\n\nprint(solution(\"315\\n45\"))\n\nprint(solution(\"180\\n270\"))\n\nprint(solution(\"360\\n0\"))\n\nprint(solution(\"0\\n180\"))"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"315\\n45\") == \"90\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('315 45') == '90'\n\nassert solution('180 270') == '90'\n\nassert solution('45 180') == '90'\n\nassert solution('45 45') == '0'\n\nassert solution('45 360') == '0'"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('315','45') == '90'\nassert solution('180','270') == '90'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '0'\nassert solution('3\\n4') == '-90'\nassert solution('180\\n270') == '90'\nassert solution('315\\n45') == '90'\n\nimport sys\nassert sys.getsizeof(solution('')) == 56\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"315 45\") == \"90\"\nassert solution(\"180 270\") == \"90\"\n\"\"\""
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"315 45\") == \"90\"\nassert solution(\"180 270\") == \"90\"\nassert solution(\"315 180\") == \"90\"\nassert solution(\"315 180 315\") == \"180\"\nassert solution(\"45 315 180\") == \"90\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"315 45\") == \"90\"\n\nassert solution(\"180 270\") == \"90\"\nassert solution(\"45 270\") == \"90\"\nassert solution(\"315 45\") == \"90\"\nassert solution(\"270 315\") == \"90\"\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'\nassert solution('5\\n1\\n23\\n18\\n13\\n99\\n55\\n99\\n55\\n99') == '1'\nassert solution('5\\n23\\n18\\n13\\n99') == '3'\nassert solution('5\\n23\\n18\\n13\\n99\\n55') == '3'"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n1\n23\n18\n13\n99''') == '3'\nassert solution('''5\n11\n20\n33\n40\n55''') == '1'\n\n\"\"\"\n\nK = int(input())\nK_array = []\nfor i in range(K):\n    K_array.append(int(input()))\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n5\n1\n23\n18\n13\n99\n\"\"\"\n) == \"3\"\nassert solution(\n\"\"\"\n5\n11\n20\n33\n40\n55\n\"\"\"\n) == \"1\"\nassert solution(\n\"\"\"\n7\n1\n2\n3\n4\n5\n6\n7\n\"\"\"\n) == \"0\"\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\n\n\"\"\"\n\nk = int(stdin.readline().rstrip())\nnames = [int(x) for x in stdin.readline().rstrip().split()]\nd = dict()\ncount = 0\nfor i in range(k):\n    if not d.get(names[i]):\n        d[names[i]] = True\n        count += 1\n        if count == k:\n            break\n    else:\n        while d.get(names[i]):\n            names[i] += 1\n            count -= 1\n            count += 1\n            if count == k:\n                break\nprint(names[k - 1] - names[0])"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\n\nassert solution(\"5\\n1\\n23\\n18\\n13\\n99\\n50\\n100\") == \"3\"\n\nassert solution(\"5\\n1\\n23\\n18\\n13\\n99\\n50\\n100\\n50\\n100\") == \"2\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99\\n') == '3'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == '3'\n\"\"\""
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\n\"\"\"\n\nimport collections\n\n\"\"\"\n\u8fd9\u9898\u6700\u4e3b\u8981\u7684\u95ee\u9898\u662f\uff0c\u9996\u5148\u6211\u4eec\u8981\u628a\u6240\u6709\u9700\u8981\u7684\u7b7e\u540d\u90fd\u653e\u5230\u4e00\u4e2aset\u91cc\uff0c\u7136\u540e\u904d\u5386set\u91cc\u7684\u6240\u6709\u5143\u7d20\uff0c\u5982\u679c\u8fd9\u4e2a\u5143\u7d20\u5728\u7b7e\u540d\u6570\u91cf\u7684set\u91cc\u9762\u8fd8\u6ca1\u6709\uff0c\u6211\u4eec\u5c31\u628a\u8fd9\u4e2a\u5143\u7d20\u653e\u8fdb\u7b7e\u540d\u6570\u91cf\u7684set\u91cc\uff0c\u7136\u540e\u76f4\u5230set\u91cc\u5168\u90e8\u6709\u4e86\u624d\u80fd\u7ed3\u675f\u904d\u5386\u3002\n\n\u4e0b\u9762\u5c31\u662f\u4e00\u4e2a\u5f88\u6709\u8da3\u7684\u7b97\u6cd5\uff0c\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u6211\u4eec\u7ed9\u51fa\u7684\u987a\u5e8f\u662f\u9519\u7684\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u628a\u6240\u6709\u9700\u8981\u7684\u7b7e\u540d\u90fd\u653e\u5230set\u91cc\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4f1a\u6709\u5f88\u591a\u9700\u8981\u7684\u7b7e\u540d\u4f1a\u88ab\u8df3\u8fc7\uff0c\u5982\u679c\u6211\u4eec\u628a\u6240\u6709\u7684\u9700\u8981\u7684\u7b7e\u540d\u90fd\u653e\u5230set\u91cc\uff0c\u6211\u4eec\u5c31\u4f1a\u6709\u4e00\u4e2a\u5f88\u5c0f\u7684\u95ee\u9898\uff0c\u8fd9\u4e2a\u95ee\u9898\u662f\uff0c\u5982\u679c\u8fd9\u4e2aset\u91cc\u6ca1\u6709\u7b7e\u540d\u6211\u4eec\u5c31\u4f1a\u5f97\u4e0d\u5230\u7b7e\u540d\u6570\u91cf\u4e86\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u4f1a\u65e0\u89e3\uff0c\n\"\"\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('WWWWBBW') == '1'\nassert solution('WWBBWWW') == '0'\n\"\"\""
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WWBWBB') == '1'\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWBBW\") == \"1\"\nassert solution(\"WWBWBWWWBBW\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"WWBWBB\") == 1\nassert solution(\"WWWWBBW\") == 0\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('WWWWBBW') == '0'\nassert solution('WWBBW') == '1'\nassert solution('BBW') == '0'\nassert solution('WWW') == '1'\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WWBWBB') == '1'\n\"\"\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WWBBBWWW') == '0'\nassert solution('BBBBWWWW') == '0'\nassert solution('BBBWWWWW') == '0'\nassert solution('BBBBBBBB') == '0'\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWWWBBB\") == \"1\"\n\"\"\""
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"WWWWBBW\") == 0\nassert solution(\"WWBBBW\") == 1\nassert solution(\"WWWBBW\") == 0\nassert solution(\"WWBWWW\") == 0\nassert solution(\"WWBBBWWWW\") == 0\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WWWWBBW\") == '0'\nassert solution(\"WWBWBBW\") == '1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 4 4\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\nassert solution(\"1000 1000 1000 1000\") == \"906609.0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\n\"\"\"\n\nfrom collections import namedtuple\n\nimport pytest\n\nCase = namedtuple('Case','side1 side2 side3 side4 expected')\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 3 3\") == 9\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '1.5'\nassert solution('1 2 1 1') == '0.5'\nassert solution('3 4 5 2') == '1.5'\nassert solution('3 2 1 2') == '0.5'\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\n\nprint('Success')"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\n\n\"\"\"\n\ns1, s2, s3, s4 = map(int, input().split())"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 3 3') == '9'\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\n\"\"\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('roobert') == 'robert'\nassert solution('rooobert') == 'robert'\nassert solution('rrrroobert') == 'robert'\nassert solution('rrrrooobert') == 'robert'\nassert solution('rrrroooobert') == 'robert'\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rroobert') == 'robert'\nassert solution('roooobert') == 'robert'\n\nassert solution('rrroobert') == 'robert'\nassert solution('rrroooobert') == 'robert'\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"rooobert\") == \"robert\"\nassert solution(\"rrrooobbbert\") == \"robert\"\nassert solution(\"robertr\") == \"robert\"\nassert solution(\"roobertr\") == \"robert\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('robert') == 'robert'\nassert solution('roooobert') == 'robert'\nassert solution('rrrooobbbert') == 'robert'\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('hello') == 'hello'\nassert solution('helo') == 'helo'\nassert solution('heloo') == 'helo'\nassert solution('heloo') == 'helo'\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"roooobert\") == \"robert\"\nassert solution(\"rrrooobbbert\") == \"robert\"\nassert solution(\"a\") == \"a\"\nassert solution(\"aa\") == \"a\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"roobert\") == \"robert\"\nassert solution(\"rroobert\") == \"robert\"\nassert solution(\"rooobert\") == \"robert\"\nassert solution(\"rrrooobert\") == \"robert\"\nassert solution(\"rrrooooobert\") == \"robert\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rrroobert') == 'robert'\nassert solution('rrrroobert') == 'robert'\nassert solution('rooooobert') == 'robert'\nassert solution('roooobert') == 'robert'\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"roobert\") == \"robert\"\nassert solution(\"roobet\") == \"robert\"\nassert solution(\"roobobob\") == \"robo\"\nassert solution(\"roobobo\") == \"robo\"\nassert solution(\"roboobobob\") == \"robo\"\n\"\"\""
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"roobert\") == \"robert\"\nassert solution(\"rooobert\") == \"robert\"\nassert solution(\"roobertapoaxiamethostenes\") == \"roobtapoaxiamethostenes\"\nassert solution(\"rrrooobbbert\") == \"robert\"\nassert solution(\"rrrooobobert\") == \"robert\"\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'Impossible'\n\"\"\"\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\n\"\"\""
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n\"\"\"\nimport sys\n\ns, v1, v2 = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000 9 7') == '108 4'\nassert solution('1000 900 7') == 'Impossible'\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\nprint(\"Passed all tests... \")\n\n-----Notes-----\nIn the first test case, Peter has an initial shipment of 1000 liters of oil, and the number of large and small bottles are given in the input. For this case, Peter uses 10 large bottles and 4 small bottles.\n\nIn the second test case, the initial shipment of oil is 1000 liters, but the number of large and small bottles are given in the input. For this case, Peter can only use large bottles and will have to use a bottle of size 4.\n\nYou can use a global variable to store the number of bottles of each type (i.e., if a variable $x$ is defined, then we can change it in each of the four methods, without having to pass it as a parameter).\n\"\"\""
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000 9 7\\n') == '108 4'\nassert solution('1000 900 7\\n') == 'Impossible'\nassert solution('1000 9 1000 7\\n') == 'Impossible'\nassert solution('1000 9 1000 1000 9\\n') == 'Impossible'\nassert solution('100 9 100 1\\n') == '100 11'\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(\n    int(input()))\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def solution(self, volume: str) -> str:\n        # get the volume of the shipment\n        v = int(volume[0])\n\n        # get the volume of the small and large type of bottles\n        v_small = int(volume[1])\n        v_large = int(volume[2])\n\n        # find out the minimum number of containers needed\n        # all the containers are of same size\n        n = v / v_large\n\n        # make sure the number of small type of containers is sufficient\n        if v_small * n >= v:\n            n = v / v_small\n\n        # make sure the number of large type of containers is sufficient\n        if n * v_large < v:\n            n = v / v_large\n\n        # find out the number of large and small type of containers\n        # and make sure the number of small type of containers is sufficient\n        n_large = int(n)\n        n_small = int(n)\n\n        if v_small * n_small >= v:\n            n_small = v / v_small\n\n        if v_large * n_large >= v:\n            n_large = v / v_large\n\n        # make sure the number of containers is sufficient\n        if n_large * n_small < v:\n            return \"Impossible\"\n\n        return str(n_large) + \" \" + str(n_small)"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'Impossible'\nassert solution('1 1 1') == 'Impossible'\nassert solution('10 9 7') == '108 4'\nassert solution('10 100 7') == 'Impossible'\n\n'''\n\nimport math\nimport sys"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000 9 7') == '108 4'\nassert solution('1000 900 7') == 'Impossible'\n\"\"\"\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\\n\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\\n\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 4\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\""
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 4\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n....\\n....\\n....\\n....\\n') == '9\\n0\\n0\\n0\\n0'\nassert solution('4 4\\n....\\n....\\n....\\n....\\n')!= '8\\n0\\n0\\n0\\n0'\n\"\"\"\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == '1\\n1\\n2\\n1\\n0'\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == '9\\n0\\n0\\n0\\n0'\nprint(solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\"))\n\n\"\"\"\nimport sys\nimport numpy as np\nfrom io import StringIO"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\"\n\nassert solution(\"2 2\\n..\\n#.\") == \"1\\n0\"\nassert solution(\"2 2\\n..\\n#X.\") == \"1\\n0\"\nassert solution(\"2 2\\n.#.\\n#X.\") == \"0\\n0\""
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1 1 2 1 0\"\nassert solution(\"4 4\\n#.#.\\n..X.\\n..X.\\n.#XX\") == \"9 0 0 0 0\"\n\"\"\"\n\nr, c = map(int, stdin.readline().split())\n\ndp = [0 for _ in range(r)]\n\nfor i in range(r):\n    dp[i] = [0 for _ in range(c)]\n\nfor i in range(r):\n    s = stdin.readline().strip()\n    for j in range(c):\n        if s[j] == \"X\":\n            dp[i][j] = -1\n\nfor i in range(r):\n    for j in range(c):\n        if dp[i][j] == -1:\n            continue\n        if i > 0 and dp[i-1][j]!= -1:\n            dp[i][j] = max(dp[i-1][j] + 1, dp[i][j])\n        if j > 0 and dp[i][j-1]!= -1:\n            dp[i][j] = max(dp[i][j-1] + 1, dp[i][j])\n\nfor i in range(r):\n    for j in range(c):\n        print(dp[i][j], end=\" \")\n    print(\"\")\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\""
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('212\\n1253') == '1953566'\nassert solution('5\\n23\\n17\\n43\\n52\\n22') == '102'\n\"\"\"\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2\n212\n1253''') == '1953566'\n\"\"\"\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n212\\n1253') == '1953566'\nprint('Test passed')"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"212\\n1253\") == \"1953566\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('212\\n1253') == '1953566'\n\"\"\""
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\n\"\"\"\n\nimport sys\n\nn = int(input())\ns = 0\nfor i in range(n):\n    x = int(input())\n    s += x * 10 ** i\n\nprint(s)"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('212 123') == '212'\nassert solution('23 17 43 52 22') == '102'\n\"\"\"\n\nn = int(input())\nfor i in range(n):\n    print(int(input()) ** 2)\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n212\\n1253') == '1953566'\nassert solution('5\\n23\\n17\\n43\\n52\\n22') == '102'\nprint(solution('5\\n23\\n17\\n43\\n52\\n22'))"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n212\\n1253') == '1953566'\nassert solution('5\\n23\\n17\\n43\\n52\\n22') == '102'\nprint(solution(input()))\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"2\\n\"\n\"212\\n\"\n\"1253\\n\") == \"1953566\\n\"\nassert solution(\n\"5\\n\"\n\"23\\n\"\n\"17\\n\"\n\"43\\n\"\n\"52\\n\"\n\"22\\n\") == \"102\\n\"\n\"\"\"\n\nn = int(stdin.readline().strip())\naddends = []\nfor _ in range(n):\n    addends.append(int(stdin.readline().strip()))\n\nX = 0\nfor i in range(n):\n    X += addends[i]**(i+1)\n\nprint(X)"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 10 10\\n3 3 3') == '0.000000 0.000000 0.000000'\n\nassert solution('9 9 9\\n3 2 1') == '0.000000 3.000000 6.000000'\n\n-----Notes-----\nIt is not enough to simply try every possible solution.\n\nYou should optimize your solution.\n\nYou can assume that all inputs are valid.\n\n\"\"\"\n\n\n\na, b, c = map(int, input().split())\ni, j, k = map(int, input().split())\n\na = (a // i) * (b // j) * (c // k)\nb = (a // i) * (b // k) * (c // j)\nc = (a // j) * (b // k) * (c // i)\n\nprint('{:.6f}\\n{:.6f}\\n{:.6f}'.format(a - b, b - c, a - c))"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 10 10\\n3 3 3') == '0.0 0.0 0.0'\nassert solution('9 9 9\\n3 2 1') == '0.0 3.0 6.0'\nassert solution('8 8 8\\n2 2 1') == '0.0 0.0 0.0'\nassert solution('4 4 4\\n2 2 1') == '0.0 0.0 0.0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('4 7 6\\n3 2 1') == '0.0 0.0 3.0'\nprint('Test passed')\n\n\"\"\"\n\nfrom collections import deque\n\norange, apple, pineapple = map(int, stdin.readline().split())\ncocktail_str = stdin.readline().split()\n\nq = deque()\nfor c in cocktail_str:\n    q.appendleft(int(c))\n\no, a, p = q.popleft(), q.popleft(), q.popleft()\n\ntotal = orange + apple + pineapple"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 10 10\\n3 2 1') == '0.0 0.0 0.0'\n\nassert solution('10 10 10\\n1 1 1') == '0.5 1.0 4.5'\n\nassert solution('10 10 10\\n3 2 1') == '0.0 0.0 0.0'\n\nassert solution('9 9 9\\n3 2 1') == '0.0 3.0 6.0'\n\nassert solution('9 9 9\\n3 1 1') == '0.0 3.0 6.0'"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''10 10 10\n3 3 3''') == '0.000000 0.000000 0.000000'\nassert solution('''9 9 9\n3 2 1''') == '0.000000 3.000000 6.000000'\n\"\"\"\n\nA, B, C = map(int, input().split())\nI, J, K = map(int, input().split())\n\nassert 1 <= A <= 500\nassert 1 <= B <= 500\nassert 1 <= C <= 500\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'''\n10 10 10\n3 3 3\n'''\n) == '0.0 0.0 0.0'\n\nassert solution(\n'''\n9 9 9\n3 2 1\n'''\n) == '0.0 3.0 6.0'\n\nassert solution(\n'''\n5 3 6\n3 2 1\n'''\n) == '0.0 3.0 5.0'\n\nassert solution(\n'''\n0 0 0\n3 2 1\n'''\n) == '0.0 0.0 0.0'\n\nassert solution(\n'''\n9 9 9\n0 0 0\n'''\n) == '0.0 0.0 0.0'"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 10 10\\n3 3 3') == '0.0 0.0 0.0'\n\"\"\"\n\nimport sys\n\nA, B, C = list(map(int, sys.stdin.readline().split()))\nI, J, K = list(map(int, sys.stdin.readline().split()))\n\norange = A / I\napple = B / J\npineapple = C / K\n\ntotal = orange + apple + pineapple\n\nfor i in range(1, K + 1):\n    orange = ((A - (orange * I)) / (I - 1))\n    apple = ((B - (apple * J)) / (J - 1))\n    pineapple = ((C - (pineapple * K)) / (K - 1))\n\nfor i in range(1, K + 1):\n    orange = ((A - (orange * I)) / (I - 1))\n    apple = ((B - (apple * J)) / (J - 1))\n    pineapple = ((C - (pineapple * K)) / (K - 1))\n\nprint('{0:.6f} {1:.6f} {2:.6f}'.format(orange, apple, pineapple))\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.0 0.0 0.0\"\nassert solution(\"9 9 9\\n3 2 1\") == \"0.0 3.0 6.0\"\n\"\"\"\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 10 10\\\\n3 2 1\") == \"0.0 0.0 0.0\"\nassert solution(\"9 9 9\\\\n3 2 1\") == \"0.0 3.0 6.0\"\nprint('Success')\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\nprint(\"Passed\")\n\"\"\"\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\n\nThe length of the input string is at most $10^6$, and it will only contain lowercase letters from the English alphabet as well as the character <."
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\n\"\"\""
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n\n\"\"\""
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\nprint(\"The local tests are done. Click on 'Check' to earn cool rewards!\")\n\n'''"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('abc') == 'abc'\nassert solution('a<bc') == 'bc'\nassert solution('a<bc<') == 'bc'\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na<bc<\nfoss<<rritun\n\na"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n\nSample Input 3:\nabcdefg<hijklm<nopqrst<\nSample Output 3:\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin=\"abc<d>efg<h>i\") == \"befg\"\nassert solution(stdin=\"abc<d>efg<h>i<j>\") == \"befgij\"\nassert solution(stdin=\"abc<d>efg<h>i<j>k\") == \"befgijk\"\nassert solution(stdin=\"abc<d>efg<h>i<j>k<l>m<n>\") == \"befgijkm\"\nassert solution(stdin=\"abc<d>efg<h>i<j>k<l>m<n>o<p>\") == \"befgijkmop\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('A') == 'a'\nassert solution('aaa') == 'a'\nassert solution('aa') == 'a'\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('Knuth-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\n\"\"\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Mirko-Slavko\") == \"MS\"\nassert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\nassert solution(\"James-Harden\") == \"J-H\"\n\nprint(solution(\"James-Harden\"))\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"KMP\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\nassert solution(\"Mirko-Slavko-Marinko-Slavko\") == \"MS-MS\"\nassert solution(\"Mirko-Slavko-Marinko-Slavko-Marino-Slavko-Marino-Slavko-Marino-Slavko\") == \"MS-MS-MS-MS-MS\"\nassert solution(\"Mirko-Slavko-Marino-Slavko-Marino-Slavko-Marino-Slavko-Marino-Slavko-Marino-Slavko\") == \"MS-MS-MS-MS-MS\"\n\"\"\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\"\"\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\nprint(\"TESTS PASSED\")"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('KMP') == 'KMP'\nassert solution('MS') == 'MS'\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"KMP\") == \"KMP\"\nassert solution(\"MS\") == \"MS\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\n\"\"\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\nassert solution('0 1 0') == 'Province or Gold'\nassert solution('0 0 0') == 'Gold'\nassert solution('0 2 0') == 'Silver'\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\n\"\"\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"2 2 2\") == \"Province or Gold\"\nassert solution(\"2 2 1\") == \"Province or Gold\"\n\n\"\"\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"2 0 1\") == \"Province or Gold\"\nassert solution(\"0 0 1\") == \"Estate or Copper\"\nassert solution(\"0 2 1\") == \"Province or Gold\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"0 1 0\") == \"Estate or Copper\"\n\"\"\""
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\nassert solution('1 0 1') == 'Province or Gold'"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"2 2 2\") == \"Province or Gold\"\nassert solution(\"0 1 2\") == \"Province or Copper\"\nassert solution(\"2 1 2\") == \"Province or Gold\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(1)) == \"Estate or Copper\"\nassert solution(str(2)) == \"Province or Gold\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\n\"\"\""
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.00\"\n\"\"\""
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\n70 50') == '90.00'\nassert solution('10 3\\n80 90') == '75.7142857'\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 0\\n90 10\\n10 1\\n100 100\\n\") == \"75.714286\"\nprint('The local tests are done. Try Solution Online - andranket.xyz')\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.00\"\nassert solution(\"10 3\\n80 90\") == \"75.7142857\"\n\"\"\"\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n60 80\") == \"90.00\"\nassert solution(\"10 4\\n60 85\") == \"75.7142857\"\nassert solution(\"10 10\\n50 100\") == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1\\n70 50') == '90.00'\nassert solution('10 3\\n80 90') == '75.7142857'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1\\n70 50') == '90.0'\nassert solution('10 3\\n80 90') == '75.7142857'\n\"\"\"\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.0\"\nassert solution(\"10 3\\n80 90\") == \"75.7142857\"\n\"\"\"\n\n\nn, k = [int(x) for x in stdin.readline().split()]\nd, s = [int(x) for x in stdin.readline().split()]\nnk = n - k\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('5 2\\n1\\n10\\n1\\n') == 'impossible'\nassert solution('6 1\\n20\\n1\\n') == 'impossible'\n\n'''\n\nn, k = map(int, stdin.readline().split())\nd, s = map(int, stdin.readline().split())\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n70 50') == '90.0'\nassert solution('10 3\\n80 90') == '75.7142857'\n\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\nd, s = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''7\n2 3 1 5 4 7 6''') == \"4\\n2 3 5 7\"\nassert solution('''5\n1 2 3 4 5''') == \"5\\n1 2 3 4 5\"\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n2') == ''\nassert solution('1\\n2\\n') == ''\nassert solution('1\\n2\\n3') == ''\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n2 3 1 5 4 7 6') == '4\\n2 3 5 7', 'Sample 1 error. Wrong answer'\nassert solution('5\\n1 2 3 4 5') == '5\\n1 2 3 4 5', 'Sample 2 error. Wrong answer'"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"\n\"\"\"\n\nn = int(input())\nA = [int(x) for x in input().split()]"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n2 3 1 5 4 7 6') == '4\\n2 3 5 7'\nassert solution('5\\n1 2 3 4 5') == '5\\n1 2 3 4 5'\nassert solution('7\\n2 3 1 5 4 7 6') == '4\\n2 3 5 7'\n\"\"\"\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"\n\n\"\"\"\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5') == '5'\n\"\"\""
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n2 3 1 5 4 7 6') == '4\\n2 3 5 7'\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\"\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\""
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 10') == '9 25'\n\nassert solution('0 30') == '23 45'\n\nprint('Success')\n\n\"\"\"\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\n\"\"\"\nimport re"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\"\"\"\n\nimport sys\n\na, b = sys.stdin.readline().split()\nh = int(a) + 45\nm = int(b) + 45\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\nprint(\"Success\")\n'''"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\nprint(solution(\"10 10\"))\nprint(solution(\"0 30\"))\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\nassert solution('12 42') == '11 33'\nassert solution('23 41') == '22 34'"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 10') == '9 25'\n\n\"\"\"\n\nimport sys\n\nhour, min = sys.stdin.readline().split()\nhour, min = int(hour), int(min)\n\nminute = 45\n\nprint(hour - minute, min - minute)"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\n\nprint(solution(input()))\n\nSample Input 1:\n12 45\nSample Output 1:\n11 40\n\nSample Input 2:\n21 32\nSample Output 2:\n18 47\n\nSample Input 3:\n23 59\nSample Output 3:\n22 56\n\nSample Input 4:\n00 40\nSample Output 4:\n23 36\n\nSample Input 5:\n01 59\nSample Output 5:\n02 58\n\nSample Input 6:\n23 59\nSample Output 6:\n22 56\n\n'''"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\nprint(solution(\"10 10\"))\nprint(solution(\"0 30\"))\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\nassert solution('2.718281') == '3.14159265359'"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2.0') == '1.414214'\nassert solution('1.0') == '1.0'\nassert solution('0.36788') == '1.414214'\nassert solution('2.718281') == '2.718281'\nassert solution('-1.8') == '-2.718281'\n\n'''"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0.36788\") == \"1.414214\"\nassert solution(\"2.718281\") == \"1.414213\"\n\"\"\""
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0.36788') == '1.414214'\nassert solution('2.718281') == '3.141593'\n'''"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1.1\") == \"1.0\"\nassert solution(\"0.01\") == \"0.01\"\nassert solution(\"1\") == \"1.0\"\nassert solution(\"0.01\") == \"0.01\"\nassert solution(\"1.01\") == \"1.01\"\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\nassert solution('1.273815') == '1.31883'\nassert solution('0.999999') == '1.0'\nassert solution('0.707107') == '1.25992104989487'\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2.000000\") == \"1.414214\"\nassert solution(\"1.000000\") == \"1.000000\"\nassert solution(\"0.36788\") == \"0.36788\"\n\"\"\"\n\nimport math\n\ninput = input().split()\n\nn = float(input[0])\nprint(n**math.inf)"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2.000000\") == \"1.414214\"\nassert solution(\"1.000000\") == \"1.000000\"\n\"\"\""
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2.718281') == '1.414214'\nassert solution('0.36788') == '1.414214'\n\"\"\"\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"3:2,1\"\nassert solution(\"50\") == \"50:2,1 2,2 3,2 5,4 5,5 6,5 10,10 13,12 17,16 25,25\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"3: \\n2,1\\n\"\nassert solution(\"50\") == \"50:\\n2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"50\") == \"50\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '3:', 'Check the function implementation'\nassert solution('50') == '50:', 'Check the function implementation'\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"50\") == \"50\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\n\nassert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"3\\n2,1\"\n\"\"\"\nfrom math import ceil"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '3:\\\\n2,1\\\\n'\nassert solution('50') == '50:\\\\n2,1\\\\n2,2\\\\n3,2\\\\n5,4\\\\n5,5\\\\n6,5\\\\n10,10\\\\n13,12\\\\n17,16\\\\n25,25\\\\n'\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '3:'\nassert solution('50') == '50:'\nassert solution('1') == ''\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3: \"\nassert solution(\"50\") == \"50: \"\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '3: \\n2,1\\n', 'Test 1 Failed'\nassert solution('50') == '50: \\n2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25', 'Test 2 Failed'\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"yes\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"yes\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\""
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"no\"\n\"\"\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\nprint(\"The local tests are done. Click on 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\"\"\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == \"yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\"\"\""
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\""
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\nassert solution('BBB') == 'S'\n\"\"\"\n\nstdin = input().strip()\n\nans = 'S' * (len(stdin) // 2)\n\nfor i in range(1, len(stdin) // 2 + 1):\n    ans = ans[:-i] + stdin[:i] + ans[-i:]\n\nprint(ans)\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\nprint('Success')\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\n\"\"\""
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\nprint(\"Success\")\n\"\"\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\nprint('Success')"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\"\n\nassert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\"\n\nprint('Success')"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\"\nassert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\"\n\nimport sys\nsys.stdin = open('test_input.txt')\nassert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\"\nassert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\"\n\"\"\"\n\nimport sys\n\nnums = [int(x) for x in sys.stdin.readline().split()]\n\nx = nums[0]\ny = nums[1]\nn = nums[2]\n\nfor i in range(1, n + 1):\n    if i % x == 0 and i % y == 0:\n        print(\"FizzBuzz\")\n    elif i % x == 0:\n        print(\"Fizz\")\n    elif i % y == 0:\n        print(\"Buzz\")\n    else:\n        print(i)"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 7') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n'\n\"\"\""
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\"\nassert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\"\nassert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 7\\n') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7'\nassert solution('2 4 7\\n') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7'\n\"\"\"\nimport unittest\nimport io\nimport sys\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\"\n\nassert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\"\nassert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\"\n\nassert solution(\"2 4 5\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\"\n\"\"\"\n\nx, y, n = [int(x) for x in input().split()]\nfor i in range(1, n+1):\n    if i % x == 0 and i % y == 0:\n        print('FizzBuzz')\n    elif i % x == 0:\n        print('Fizz')\n    elif i % y == 0:\n        print('Buzz')\n    else:\n        print(i)"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\"\nassert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\"\n\nprint(solution(\"2 3 7\"))\nprint(solution(\"2 4 7\"))\nprint(solution(\"2 3 7\"))\n\"\"\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"2 3 7\n\"\"\") == \"\"\"1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7\n\"\"\"\n\nassert solution(\n\"\"\"2 4 7\n\"\"\") == \"\"\"1\nFizz\n3\nFizzBuzz\n5\nFizz\n7\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'\n\"\"\""
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"4 2\\n3 3 3 2\"\n) == \"It hadn't snowed this early in 3 years!\"\nassert solution(\n\"2 10\\n0 100\"\n) == \"It hadn't snowed this early in 0 years!\"\n\"\"\""
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open('./sample/input3.txt').readlines()) == \\\n    'It hadn\\'t snowed this early in 4 years!'\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\nassert solution(test_input_4) == test_output_4\nassert solution(test_input_5) == test_output_5\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 2\n3 3 3 2''') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('''2 10\n0 100''') == 'It hadn\\'t snowed this early in 0 years!'\n\"\"\""
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\""
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"4 2\n3 3 3 2\"\"\"\n) == 'It hadn\\'t snowed this early in 3 years!'\nassert solution(\n\"\"\"4 2\n0 100\"\"\"\n) == 'It hadn\\'t snowed this early in 0 years!'\n\"\"\"\nn, d = [int(i) for i in input().split(' ')]\nsnows = [int(i) for i in input().split(' ')]\ndeltas = []\nfor i in range(n):\n    deltas.append(d-snows[i])\nwhile d < max(deltas):\n    i = deltas.index(max(deltas))\n    if deltas[i] >= d:\n        print('It hadn\\'t snowed this early in '+str(i+1)+' years!')\n        break\n    else:\n        deltas.pop(i)\n        i-=1\n    if len(deltas) == 0:\n        print('It hadn\\'t snowed this early in 0 years!')\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\n\"\"\""
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\n\"\"\""
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == 'It hadn\u2019t snowed this early in 3 years!'\nassert solution(\"2 10\\n0 100\") == 'It hadn\u2019t snowed this early in 0 years!'\n\"\"\"\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 10') == '7'\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 2') == '7'\n\"\"\""
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 2') == 2\n\nassert solution('10 10') == 7\n\nassert solution('10 20') == 7\n\nassert solution('10 100') == 7\n\nassert solution('10 1000') == 7"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 2\") == \"7\"\n\"\"\"\n\ns = input().split()\nn = int(s[0])\nt = int(s[1])\n\na = 1\nfor i in range(n):\n    a = (a + t) % n\nprint(a)"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2\") == 2\nassert solution(\"10 10\") == 7\n\"\"\""
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 2\") == 2\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2\") == 2\nassert solution(\"10 10\") == 7\nprint('Success')\n'''"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2\") == \"2\"\nassert solution(\"10 10\") == \"7\"\n\"\"\""
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 2') == '2'\nassert solution('10 10') == '7'\n\"\"\"\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 2') == '2'\nassert solution('10 10') == '7'\nassert solution('10 100') == '1'\nassert solution('100 100') == '4'\nassert solution('100 1000') == '3'\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\n\"\"\"\n\nimport re\nimport math"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\n\"\"\"\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"xvfzwzixcvb\") == \"xvfzwzixcvb\"\nassert solution(\"pbqmqjvdvybwvz\") == \"pbqmqjvdvybwvz\"\nassert solution(\"gxzqivqgjhjyh\") == \"gxzqivqgjhjyh\"\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\nassert solution('hello') == 'hello'\nassert solution('HELLO') == 'HELLO'\n\nassert solution('b') == 'b'\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\nassert solution('pusjphzqza') == 'pusjphzqza'\nassert solution('xqxqxqxqxqxqxqxq') == 'xqxqxqxqxqxqxqxq'\nassert solution('zmzmzmzmzmzmz') == 'zmzmzmzmzmzmz'\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\n\nprint('Tests passed.')\n\n\"\"\"\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"cisvadufmgwvpx\") == \"pwuvxcyisv\"\nassert solution(\"zrznfbcyrvnzrpwzf\") == \"fzzfyednfrhrfzz\"\nassert solution(\"fhjmlqcwpdjgwfbdqg\") == \"fdgjrlfbqnqpzfjg\"\n\nprint(solution(\"bok\"))\nprint(solution(\"koaski\"))\nprint(solution(\"cisvadufmgwvpx\"))\nprint(solution(\"zrznfbcyrvnzrpwzf\"))\nprint(solution(\"fhjmlqcwpdjgwfbdqg\"))\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"rkagjhfjbfgj\") == \"rkagjhfjbfgj\"\nassert solution(\"bokbokbokbok\") == \"bokbokbokbok\"\nassert solution(\"bokbokbokbokbokbok\") == \"bokbokbokbokbokbok\"\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"sbk\") == \"sbk\"\nassert solution(\"bokbok\") == \"bokbok\"\nassert solution(\"bokbokbokbokbok\") == \"bokbokbokbokbok\"\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"8 2\"\nassert solution(\"7\") == \"8 3\"\nassert solution(\"5\") == \"8 2\"\nassert solution(\"11\") == \"8 4\"\nassert solution(\"13\") == \"8 6\"\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6') == '8 2'\nassert solution('7') == '8 3'\n\"\"\"\n\nn = int(input())\nk = n//2\nprint(n, k)\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6') == '8 2'\nassert solution('7') == '8 3'\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n4\") == \"4 1\\n\"\n\"\"\"\nimport math"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6') == '8 2'\nassert solution('7') == '8 3'\n\"\"\""
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n3''') == '''3 1\n2 2\n1 2\n2 2\n2 2\n\n3 1\n2 2\n2 2\n2 2\n2 2\n\n5 1\n2 2\n4 2\n2 2\n2 2\n\n8 1\n4 2\n4 2\n4 2\n4 2\n4 2\n\n16 1\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8 2\n8"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6') == '8 2'\nassert solution('7') == '8 3'\nassert solution('8') == '8 4'\nassert solution('1') == '1 1'\nassert solution('2') == '2 2'\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('6') == '8 2'\nassert solution('7') == '8 3'\nassert solution('100') == '1024 1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1\\n4\\n1\\n1\\n9') == '2 2', 'Test 1'\nassert solution('2\\n1\\n1\\n2') == '1 3', 'Test 2'\nassert solution('100\\n2\\n4\\n8') == '2 3', 'Test 3'\nprint('All tests passed.')\n\"\"\"\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('7') == '8 3'\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"stairs\") == \"YES\"\nassert solution(\"drought\") == \"NO\"\n\"\"\"\n\nimport unittest\nimport os\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('stairs\\n2\\nerres airs ears ares aires\\neet eat\\n2\\napples and pears\\nplates of meat\\n2\\ntasty sprout\\ndifficult route\\nworried and froward\\nforever in doubt\\napples and pears\\n') == 'YES\\nNO\\nYES\\nNO\\nYES\\nNO\\nNO\\nYES\\n'\nprint(solution('stairs\\n2\\nerres airs ears ares aires\\neet eat\\n2\\napples and pears\\nplates of meat\\n2\\ntasty sprout\\ndifficult route\\nworried and froward\\nforever in doubt\\napples and pears\\n'))\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"test\") == \"YES\"\nassert solution(\"abacus\") == \"NO\"\nassert solution(\"ab\") == \"YES\"\nassert solution(\"abcd\") == \"NO\"\nassert solution(\"abcde\") == \"NO\"\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open('sample_input_1.txt').read()) == 'YES\\nNO\\nYES\\nNO\\nYES\\n'\n\n\"\"\"\n\nimport re\nfrom typing import List, Dict"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(r\"\"\"\nstairs\n2\nerres airs ears ares aires\neet eat\n2\napples and pears\nplates of meat\n\"\"\") == r\"\"\"\nYES\nNO\n\"\"\"\n\nassert solution(r\"\"\"\ndrought\n2\naught ought aut acht\nought oubt outte out oute\n5\ntasty sprout\ndifficult route\nworried and encompassed\nforever in doubt\napples and pears\n\"\"\") == r\"\"\"\nYES\nYES\nYES\nNO\n\"\"\"\n\nassert solution(r\"\"\"\ndrought\n2\naught ought aut acht\nought oubt outte out oute\n5\ntasty sprout\ndifficult route\nworried and encompassed\nforever in doubt\napples and pears\n\"\"\") == r\"\"\"\nYES\nYES\nYES\nNO\n\"\"\"\n\nassert solution(r\"\"\"\ndrought\n2\naught ought aut acht\nought oubt outte out oute\n5\ntasty sprout\ndifficult route\nworried and encompassed\nforever in doubt\napples and pears\n\"\"\") == r\"\"\"\nYES\nYES\nYES\nNO\n\"\"\"\n\nassert solution(r\"\"\"\ndrought\n2\naught ought aut acht\nought oubt outte out oute\n5\ntasty sprout\ndifficult route\nworried and encompassed\nforever in doubt\napples and pears\n\"\"\") == r\"\"\"\nYES\nYES\nYES\nNO\n\"\"\""
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"input\") == \"output\"\nprint(\"Hooray!\")"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"stairs\") == \"YES\"\nassert solution(\"drought\") == \"YES\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\nerres airs ears ares aires\neet eat\n''') == 'NO\\nNO\\nNO\\nNO\\nNO'\nassert solution('''\ndrought\n''') == 'NO\\nNO\\nNO\\nNO\\nNO'\nassert solution('''\nstairs\n2\nerres airs ears ares aires\neet eat\n2\napples and pears\nplates of meat\n''') == 'NO\\nYES\\nNO\\nNO\\nNO'\n\nassert solution('''\nedible\n''') == 'NO\\nNO\\nNO\\nNO\\nNO'\nassert solution('''\ndrought\n''') == 'NO\\nNO\\nNO\\nNO\\nNO'\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('apples and pears') == 'YES'\nassert solution('bales of cotton') == 'NO'\n\"\"\"\nimport re\n\nimport sys\n\nDICT_WORD = {}\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"stairs\") == \"YES\"\nassert solution(\"drought\") == \"NO\"\nassert solution(\"oats\") == \"NO\"\n\n\"\"\"\n\nfrom typing import List\n\nimport unittest\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'\n\nSample Case 0\nSample Input 0\nHANGMAN\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n\nSample Output 0\nWIN\n\nSample Case 1\nSample Input 1\nBANANA\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n\nSample Output 1\nLOSE\n\nSample Case 2\nSample Input 2\nBANAN\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n\nSample Output 2\nLOSE\n'''\n\nimport time\nimport random"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\n\n---Sample Case 0---\nHANGMAN\nBANANA\n\n---Sample Case 1---\nHANGMAN\nTANFSSGJ\n\n---Sample Case 2---\nHANGMAN\nVPSJPPOJ\n\n\"\"\"\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'\nassert solution('BANANAN') == 'LOSE'\n\"\"\"\n\n\nimport string\nimport itertools\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\n\"\"\"\n\nfrom typing import List\nimport sys\nimport itertools\n\n\nclass Hangman:\n    def __init__(self):\n        self.words = self.read_words()\n        self.letters = None\n        self.permutation = None\n        self.perm_len = None\n        self.loser = False\n\n    def read_words(self) -> List[str]:\n        with open(sys.argv[1], \"r\") as f:\n            return [word.strip() for word in f.readlines()]\n\n    def create_letters_permutation(self, words: List[str]) -> None:\n        letters = []\n        for word in words:\n            letters += word\n\n        self.letters = list(set(letters))\n        self.permutation = list(itertools.permutations(self.letters))\n        self.perm_len = len(self.permutation)\n\n    def guess(self, word: str) -> None:\n        for letter in word:\n            if letter in self.letters:\n                pass\n            else:\n                self.loser = True\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(HANGMAN) == \"WIN\"\nassert solution(BANANA) == \"LOSE\"\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'WIN'\nassert solution('BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'LOSE'\nassert solution('BANANAA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'LOSE'\nassert solution('BANANAAAAAAAAA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'WIN'\nassert solution('BANANAAAAAAAAAAAAAAA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'LOSE'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\n\"\"\"\n\n\"\"\"\nSolution:\n\n1. Split the words into a list\n2. Create an empty string with the length of the word to be guessed\n3. Loop through the letters of the word\n    3.1. If the letter is in the word, append to the empty string\n    3.2. If the letter is not in the word, append a dash\n4. The result should be a list of strings\n5. Return \"WIN\" if the length of the result is the length of the word\n    5.1. Otherwise, return \"LOSE\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"WIN\"\nassert solution(\"ABCDEGHIKLMNOPQRSTUVWXYZ\") == \"LOSE\"\n\nimport sys\nfrom functools import reduce"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''HANGMAN\nABCDEFGHIJKLMNOPQRSTUVWXYZ''') == 'WIN'\nassert solution('''BANANA\nABCDEFGHIJKLMNOPQRSTUVWXYZ''') == 'LOSE'\nassert solution('''HANGMAN\nGOOGLE''') == 'LOSE'"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n\n\"\"\""
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == \"DECREASING\"\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == \"NEITHER\"\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\n\"\"\""
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"JOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"JOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"JOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\n\"\"\""
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n\"\"\"\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\\n\") == \"NEITHER\"\nassert solution(\"4\\nHOPE\\nALI\\nBECKY\\nJULIE\") == \"INCREASING\"\nassert solution(\"3\\nMEGHAN\\nCARLI\\nALEX\") == \"INCREASING\"\n\"\"\""
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\n\n\"\"\"\n\nimport string"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\n\n\"\"\"\n\nfrom collections import defaultdict, Counter\nfrom itertools import chain\n\n\"\"\"\nNO.2:\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u4e0d\u662f\u6b63\u6570\u4e5f\u4e0d\u662f\u8d1f\u6570\u3002\u73b0\u5728\u8981\u628a\u6570\u7ec4\u6392\u6210\u4e00\u4e2a\u9996\u5c3e\u76f8\u8fde\uff0c\u8981\u6c42\u53ea\u80fd\u4ea4\u6362\u4e24\u4e2a\u6570\u5b57\u3002\n\u6bcf\u6b21\u4ea4\u6362\u662f\u53ef\u4ee5\u4e0d\u7ba1\u6392\u5217\u7684\uff0c\u5982\u679c\u4ea4\u6362\u4e00\u4e2a\u6570\u5b57\u540e\uff0c\u8fd8\u5269\u4e0b\u7684\u90e8\u5206\u6392\u5217\u4e00\u4e2a\u6570\u7ec4\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u6392\u5217\u7684\u66f4\u4f18\uff0c\u6211\u4eec\u8981\u627e\u5230\u8fd9\u4e2a\u6700\u4f18\u6392\u5217\u3002\n\u53c2\u8003\u5730\u5740\uff1ahttps://blog.csdn.net/u011101982/article/details/51382821\n\u53c2\u8003\u89e3\u91ca\uff1ahttps://blog.csdn.net/qq_13696763/article/details/89578899\n\n\u7b97\u6cd5\uff1ahttps://mp.weixin.qq.com/s/GJv3DgNrNVDhFjI1KdZiZw\n\n\"\"\""
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\nJOE\nBOB\nANDY\nAL\nADAM''') == 'DECREASING'\nassert solution('''11\nHOPE\nALI\nBECKY\nJULIE\nMEGHAN\nLAUREN\nMORGAN\nCARLI\nMEGAN\nALEX\nTOBIN''') == 'NEITHER'\nprint('Success')\n\n-----\n1.\n5\nJOE\nBOB\nANDY\nAL\nADAM\n\nDECREASING\n\n2.\n11\nHOPE\nALI\nBECKY\nJULIE\nMEGHAN\nLAUREN\nMORGAN\nCARLI\nMEGAN\nALEX\nTOBIN\n\nNEITHER\n\n3.\n\n5\nMEGHAN\nJOE\nBOT\nJA\nLDN\n\nINCREASING\n\n4.\n\n5\nJOE\nBOB\nANDY\nAL\nADAM\n\nDECREASING\n\n5.\n\n5\nJOE\nBOB\nANDY\nAL\nADAM\n\nDECREASING\n\n6.\n\n5\nJOE\nBOB\nANDY\nAL\nADAM\n\nDECREASING\n\n7.\n\n5\nJOE\nBOB\nANDY\nAL\nADAM\n\nDECREASING\n\n8.\n\n5\nJOE\nBOB\nANDY\nAL\nADAM\n\nDECREASING\n\n9.\n\n5\nJOE\nBOB\nANDY\nAL\nADAM\n\nDECREASING\n\n10.\n\n5\nJOE\nBOB\nANDY\nAL\nADAM\n\nDECREASING\n\n11.\n\n5\nJOE\nBOB\nANDY\nAL\nADAM\n\nDECREASING\n\n12.\n\n5\nJOE\nBOB\nANDY\nAL\nADAM\n\nDECREASING\n\n13.\n\n5\nJOE\nBOB\nANDY\nAL\nADAM\n\nDECREASING\n\n14.\n\n5\nJOE\nBOB\nANDY\nAL\nADAM\n\nDECREASING\n\n15.\n\n5\nJOE\nBOB\nANDY\nAL\nADAM\n\nDECREASING\n\n16.\n\n5\nJOE\nBOB\nANDY\nAL\nADAM\n\nDECREASING\n\n17.\n\n5\nJOE\nBOB\nANDY\nAL\nADAM\n\nDECREASING\n\n18.\n\n5\nJOE\nBOB\nANDY\nAL\nADAM\n\nDECREASING\n\n19.\n\n5\nJOE\nBOB\nANDY\nAL\nADAM\n\nDECREASING\n\n20.\n\n5\nJOE\nBOB\nANDY\nAL\nADAM\n\nDECREASING\n\n'''\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\\n\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\\n\") == \"NEITHER\"\n\n\"\"\""
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\"\nassert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"Nina wins!\\nJess wins!\\nNo winner!\"\nprint('Test pass.')\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2') == 'Nina wins!\\nJess wins!\\n'\n\nassert solution('3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1') == 'George wins!\\nJohn wins!\\n'\n\nassert solution('') == ''\n\n\"\"\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1') == \\\n'George wins!\\nNina wins!\\nJess wins!'\n\n\"\"\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\"\nassert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"Nina wins!\"\n\"\"\""
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10 13\") == 'George wins!'\nassert solution(\"4 10 13\") == 'Jess wins!'\nassert solution(\"5 10 13\") == 'No winner!'\n\"\"\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 10 13\nJohn\nKelly\nGeorge\nKelly 1\nGeorge 2\nKelly 1\nJohn 2\nGeorge 1\nJohn 3\nKelly 3\nKelly 1\nGeorge 3\nGeorge 1\nJohn 3\nKelly 3\nKelly 1\nGeorge 3\nGeorge 1\nJohn 3\nKelly 3\nKelly 1''') == '''George wins!\nJess wins!\nNo winner!'''\nprint('All tests passed.')\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1') == \"George wins!\\nJess wins!\\n\"\nassert solution('4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2') == \"Nina wins!\\nJess wins!\\n\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\n\") == \"George wins!\\nJess wins!\\n\"\nassert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\\n\") == \"Nina wins!\\nJess wins!\\n\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nJess wins!\\nNina wins!\"\nassert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"Nina wins!\\nJess wins!\\nNo winner!\""
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solution(self, stdin: List[str]) -> float:\n        x, y, x1, y1, x2, y2 = map(int, stdin)\n        if x1 < x2:\n            x1, x2 = x2, x1\n        if y1 < y2:\n            y1, y2 = y2, y1\n\n        return min((x - x1) ** 2 + (y - y1) ** 2, (x - x2) ** 2 + (y - y2) ** 2) ** 0.5\n\nassert Solution().solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert Solution().solution(\"6 0 0 2 7 6\") == \"2.0\""
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\"\"\""
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''7 3 0 0 5 4''') == '2.0'\nassert solution('''6 0 0 2 7 6''') == '2.0'''\n\n\"\"\"\n\nfrom math import sqrt\nfrom typing import Tuple, List"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('12 32 54 7 0 -14 -20 -34 -25') == '1.0'\n'''\n\nimport sys\nimport math"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\n\"\"\""
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\"\"\"\n\nimport math\n\nx, y, x1, y1, x2, y2 = map(float, stdin.split())\n\ns = math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\nprint(s)\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\n\"\"\""
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\n\"\"\"\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"156\") == \"165\"\nassert solution(\"330\") == \"0\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"330\") == \"0\"\nassert solution(\"156\") == \"165\"\nassert solution(\"1\") == \"9\"\nassert solution(\"101\") == \"10\"\nassert solution(\"11011011101101\") == \"1111111111111\"\n\n\"\"\"\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"567\") == \"567\"\nassert solution(\"615\") == \"615\"\nassert solution(\"721\") == \"721\"\nassert solution(\"123\") == \"124\"\nassert solution(\"999\") == \"1000\"\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('1') == 2\nassert solution('2') == 3\nassert solution('3') == 4\nassert solution('4') == 5\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('330') == '0'\nassert solution('156006') == '156007'\nassert solution('156006') == '0'\nassert solution('156006') == '0'\nassert solution('156006') == '0'\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"156\") == \"165\"\nassert solution(\"330\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\nassert solution('7') == '8'\nassert solution('14') == '15'\nassert solution('135') == '136'\nassert solution('126') == '127'\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('156') == '165'\nassert solution('330') == '0'\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1575\") == \"1576\"\nassert solution(\"100\") == \"101\"\nassert solution(\"90\") == \"91\"\nassert solution(\"1\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(330) == 0\nassert solution(156) == 165\nassert solution(10) == 11\nassert solution(23) == 24\nassert solution(25) == 27\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\") == \"4\"\nassert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\") == \"3\"\n\"\"\"\n\nimport sys\nfrom bisect import bisect_left\n\nn, m = map(int, sys.stdin.readline().strip().split())\ntasks = [int(x) for x in sys.stdin.readline().strip().split()]\nquiet_intervals = [int(x) for x in sys.stdin.readline().strip().split()]\n\ntasks.sort()\nquiet_intervals.sort()\ntask_count = 0\n\nfor i in quiet_intervals:\n    task_count += len(tasks[:bisect_left(tasks, i)])\n\nprint(task_count)\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\") == \"4\"\nassert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\") == \"3\"\n\nprint('Success')\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n') == '4'\nassert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n') == '3'"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 7\\n1 1 2 1 1 1 3 1\") == \"6\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == \"4\"\nassert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\") == \"4\"\nassert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\") == \"3\""
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\") == '4'\nassert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\") == '3'\n\n'''\n\nimport sys"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == \"4\"\nassert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n\") == \"3\"\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n') == '4'\nassert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n') == '3'\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == 10\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\\n') == 1\nassert solution('1\\n') == 1\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == 10\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == 10\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0') == '0'\nassert solution('\\n39\\n40\\n41\\n0\\n1\\n2\\n40\\n41\\n0') == '6'\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('2\\n42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\nassert solution('3\\n39\\n40\\n41\\n0\\n1\\n2\\n40\\n41\\n0\\n1') == '6'\nassert solution('0\\n42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\n\nprint('Success')\n\n-----\n\n3\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n0\n\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n\n1\n\n24\n39\n42\n84\n252\n420"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '10\\n'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\\n') == '1\\n'\n\"\"\""
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\"\"\") == \"10\"\nassert solution(\n\"\"\"\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\"\"\") == \"1\"\nassert solution(\n\"\"\"\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\"\"\") == \"0\"\nassert solution(\n\"\"\"\n39\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0\n1\n2\n40\n41\n0"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126') == '6'\n\nimport functools\nimport itertools\nimport math\nimport operator\nimport string\nimport sys\nfrom typing import NamedTuple, Callable, Dict, Tuple, Iterator"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\nassert solution(\"0\\n39\\n40\\n41\\n0\\n1\\n2\\n40\\n41\\n0\") == \"6\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '6'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\\n84\\n420\\n126\\n42\\n84\\n420\\n126') == '2'\n\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\nassert solution(\"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\") == \"0\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\") == \"20\"\n\n\"\"\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('13 2') == 'no'\nassert solution('13 1') == 'no'\nassert solution('13 1') == 'no'\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('13 2') == 'no'\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 13') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('1 1') == 'no'"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"yes\"\nassert solution(\"2 0\") == \"yes\"\nassert solution(\"1 0\") == \"no\"\n\"\"\""
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 0') == 'yes'\nassert solution('13 3') == 'yes'\n\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 3\n\nn, b = sys.argv[1:]\nn = int(n)\nb = int(b)"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\n\n---Problem 2 ---\nNow that we\u2019ve established the starting point for the theory of computer science, let\u2019s move on to proving the more interesting claim that \u201cevery file in your collection of random bit strings after compression would be at most $b$ bits long\u201d. For this proof, we will use the following notations:\n\n- $N$ = number of files in the collection;\n- $b$ = maximum number of bits in a compressed file.\n\nLet $C(N)$ be the number of different ways of selecting $N$ bits from $2b+N$ bits.\n\nSuppose the $j$th bit of $i$ is set in the $i$th file in the collection, $F(j,i)$ = 1, or not set, $F(j,i)$ = 0.\n\nThen, let $T(j,i) = sum_{k=0}^{i} F(j,k)$ over all $k$ with $i$ even. This gives us the number of ways in which $i$ bits are set in the first $i$ bits of any file in the collection.\n\nFor example, if $T(1,0) = 0$, then the $1$th bit of any file in the collection is unset. If $T(1,1) = 1$, then the $1$th bit of any file in the collection is set.\n\nDefine $U(j,i)$ = sum_{k=0}^{i} T(j,k)$ over all $k$ with $i$ odd.\n\nWe now proceed to argue that $U(j,i)$ is at most $2b$, because for each $j$ between $0$ and $b$, we can define $T(j,i)$ in the way above. Furthermore, if $U(j,i)<=b$, then $U(j+1,i)>=b$. Clearly, if $U(j,i)<b$, then $U(j,i+1)>=b$. Therefore, we see that $U(j,i)$ can go no higher than $b$ in each case.\n\nNow let $U(0,i) = i$ for all $i$. We have $U(0,i+1) = U(0,i)+1$, $U(1,i+1) = max(U(0,i),U(1,i))$, and so on.\n\nWe can now see that $U(j,i)$ can go no higher than $i$ in each case.\n\nThe above algorithm counts the number of $C(N)$ different ways in which $b$ bits can be set.\n\n-----Input-----\nThe input consists of two integers $N$ ($1 \\le N \\le 10^{15}$) and $b$ ($0 \\le b \\le 50$), giving the number of files in your collection and the maximum number of bits a compressed file is allowed to have.\n\n-----Output-----\nOutput a line containing either \u201cyes\u201d if it is possible to compress all the $N$ files in your collection into files of size at most $b$ bits, or \u201cno\u201d otherwise.\n\n-----Examples-----\nSample Input 1:\n13 3\nSample Output 1:\nyes\n\nSample Input 2:\n1 0\nSample Output 2:\nyes\n\n---Problem 3---\nNow that we have proven that $U(j,i)$ can go no higher than $i$ in each case, we are now interested in proving that $U(j,i)$ goes no higher than $i$ for all $j$ between $0$ and $i$.\n\nWe proceed to do so in a similar manner to the above problem. We define $V(j,i)$ as the number of ways in which $i$ bits are set in the first $i$ bits of any file in the collection if $j$ is the first bit that is set.\n\nWe now proceed to argue that $V(j,i)$ is at most $i$, because for each $j$ between $0$ and $i$, we can define $T(j,i)$ in the way above. Furthermore, if $V(j,i)<i$, then $V(j+1,i)>=i$.\n\nNote that we have already shown that $V(0,i) = i$ for all $i$; so we need only consider $V(1,i)$.\n\nWe now proceed to prove that $V(j,i)$ can go no higher than $i$ in each case.\n\nIn each case, for any $j$ between $0$ and $i$, we can define $T(j,i)$ in the way above. Furthermore, if $V(j,i)<i$, then $V(j,i+1)>=i$.\n\nWe now define $W(j,i) = sum_{k=0}^{i} V(j,k)$ over all $k$ with $i$ odd.\n\nWe now proceed to prove that $W(j,i)$ can go no higher than $i$ in each case.\n\nWe have $W(j,0) = 0$ for all $j$; and $W(j,i) = i$ for all $j$ between $0$ and $i$.\n\nFor $0 \\le j \\le i$ we can rewrite $W(j,i) = W(0,i-j) + W(i-j,i)$, and since $W(j,0) = 0$, we have $W(j,i) = W(0,i-j)$.\n\nTherefore, for each $j$ between $0$ and $i$, we can define $W(j,i)$ in the way above.\n\nTherefore, for each $j$ between $0$ and $i$, we can define $V(j,i)$ in the way above.\n\nWe now proceed to prove that $V(j,i)$ can go no higher than $i$ in each case.\n\nFor each $j$ between $0$ and $i$, we can define $T(j,i)$ in the way above.\n\nFor each $j$ between $0$ and $i$, we can define $U(j,i)$ in the way above.\n\nWe can now prove that $V(j,i)$ can go no higher than $i$ in each case.\n\nFor each $j$ between $0$ and $i$, we can define $T(j,i)$ in the way above.\n\nFor each $j$ between $0$ and $i$, we can define $U(j,i)$ in the way above.\n\nWe now proceed to show that $V(j,i)$ can go no higher than $i$ for each $j$ between $0$ and $i$.\n\nFor each $j$ between $0$ and $i$, we can define $T(j,i)$ in the way above.\n\nFor each $j$ between $0$ and $i$, we can define $U(j,i)$ in the way above.\n\nWe now proceed to prove that $V(j,i)$ can go no higher than $i$ for each $j$ between $0$ and $i$.\n\nFor each $j$ between $0$ and"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"13 1\") == \"no\"\nassert solution(\"3 2\") == \"no\"\n\"\"\"\n\nn, b = map(int, stdin.split())"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\nprint(solution(\"P01K02H03H04\"))\nprint(solution(\"H02H10P11H02\"))\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\nassert solution(\"K10K11K12K13\") == \"0 0 0 0\"\n\"\"\""
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"H02H10P11H02\") == \"GRESKA\"\nassert solution(\"P01K02H03H04\") == \"12 12 11 13\"\n\"\"\""
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\nassert solution(\"P01K02H03H04H05H06H07H08H09H0A\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02H12H13P14H15H16H17H18H19H1A\") == \"GRESKA\"\n\n\"\"\"\n\nS = input()\n\nsuits = {'H': 0, 'K': 0, 'T': 0, 'P': 0}\n\nfor card in S:\n    if card.isdigit():\n        suits[card[0]] += int(card[1:])\n    else:\n        suits[card] += 1\n\nprint(suits['H'], suits['K'], suits['T'], suits['P'])\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\""
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\n\"\"\""
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\nprint('All test cases passed.')\n-----"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5 3', '.....\\n.*.*.\\n.....') == '1\\n+-.....\\n|*|.*.\\n+-.....'\nassert solution('7 6 4', '......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*') == '2\\n......\\n.*.*.*\\n+--.....\\n|*|.*.\\n|.*|..\\n+--.....\\n*....*'\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 3\") == \"1\"\nassert solution(\"7 6 4\") == \"2\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('.*.*.\\n....\\n..*..') == '1'\nassert solution('.*.*.*\\n....\\n..*..*') == '2'\nassert solution('.*.*.*\\n....\\n..*..\\n*....') == '2'\nassert solution('.*.*.*\\n....\\n..*..\\n*....\\n......') == '3'\nassert solution('.*.*.*\\n....\\n..*..\\n*....\\n......\\n....') == '3'\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....') == '1\\n+-..\\n|*|.\\n+-..'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*') == '2\\n......\\n.*.*.*\\n+-..+\\n|*|..|\\n|.*|..\\n+-..+\\n*....*'\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.'\n) == '1'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\\n') == '2'\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 3\") == \"1\"\nassert solution(\"7 6 4\") == \"2\"\nassert solution(\"8 8 8\") == \"3\"\nassert solution(\"8 8 7\") == \"2\"\n\nprint(\"Well done, mister! Your solution is correct.\")\n\n--------------------------------------------\n\nHow many minutes does it take to watch 90 minutes of a movie that is playing at $T$ minutes per minute?\n\n---\nIn this example, we are watching a movie whose play time is $90$ minutes long. At $T$ minutes per minute, the movie is playing. At $T$ minutes, we are at the $90$th minute, and at $T+1$th minute we are at the $T+1$th minute. If we watch the movie from $1$th minute to $T+1$th minute, then we need to watch $T+1$ minutes. Therefore, the answer is $T+1$ minutes.\n\nYour task is to write a function that will calculate the time in minutes required to watch a movie of a given length, $T$, at $T$ minutes per minute.\n\n---\nExample:\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\\n.*.*.\") == \"1\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\\n\") == \"2\"\n\n\"\"\"\n\nR, S, K = map(int, stdin.readline().strip().split())\nmatrix = [stdin.readline().strip() for _ in range(R)]\nmatrix_copy = [list(row) for row in matrix]"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\\n.*.*.\\n\") == \"1\\n+-..\\n*.*.\\n0-0-\\n0-0-\\n0-0-\", \"case1\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\\n\") == \"2\\n......\\n*.*.*\\n0-0-\\n0-0-\\n0-0-\\n0-0-\\n0-0-\", \"case2\"\nassert solution(\"3 5 3\\n.....\\n*.*.\\n.....\\n*.*.\\n\") == \"1\\n0-0-\\n0-0-\\n0-0-\\n0-0-\\n0-0-\", \"case3\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n*.*..\\n..*...\\n..*...\\n*....*\\n\") == \"2\\n0-0-\\n0-0-\\n0-0-\\n0-0-\\n0-0-\\n0-0-\\n0-0-\\n0-0-\\n0-0-\\n0-0-\\n0-0-\", \"case4\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n*.*..\\n..*...\\n..*...\\n*....*\\n\") == \"2\\n0-0-\\n0-0-\\n0-0-\\n0-0-\\n0-0-\\n0-0-\\n0-0-\\n0-0-\\n0-0-\\n0-0-\\n0-0-\", \"case5\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\\n.*.*.\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\\n\") == \"1\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\\n\") == \"2\"\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\"\n\"\"\"\n\n\"\"\"\nimport collections"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == solution('') == solution('AC 2C 4D 4H KH 4S 3S 9S 9D 2D 7D TD KS JS QH') == 4\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\"\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\"\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\n\"\"\"\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\n\"\"\"\n\n\"\"\"\nAd Hoc Solution\n\"\"\""
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n0 0 0 0 0\") == \"5\"\nassert solution(\"2 5\\n2 2 2 2 2\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5\\n2 1 1 1 0 1') == '5'\n\"\"\"\n\nfrom collections import deque\n\ncols, piece = map(int, stdin.readline().split())\nheights = list(map(int, stdin.readline().split()))\n\ndp = [[[0] * (max(heights) + 1) for _ in range(cols)] for _ in range(piece + 1)]\ndp[0][0][0] = 1\n\nfor n in range(piece):\n    for r in range(cols):\n        for h in range(heights[r] + 1):\n            for t in range(h, max(heights[r] - (piece - n), 0) + 1):\n                dp[n + 1][r][t] = dp[n][r][t]\n            for t in range(h):\n                dp[n + 1][r][t] += dp[n][r][t]\n\nprint(dp[piece][cols - 1][heights[cols - 1]])\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5\\n2 1 1 1 0 1\") == \"5\"\n\"\"\"\n\nc, p = map(int, input().split())\n\nc, p = [int(i) for i in input().split()], int(input())"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 1 1 0 1') == '5'\nassert solution('1 1 1 1 0 1') == '7'\nassert solution('0 0 0 0 0') == '7'\n\"\"\""
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\n0 0 0 0 0') == '5'\nassert solution('5 1\\n0 0 0 0 0') == '7'\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n3 5 4') == '0'\n\"\"\"\n\nn, p = map(int, input().split())\n\nheights = list(map(int, input().split()))"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 5\\n2 1 1 1 0 1') == '5'\nassert solution('5 1\\n0 0 0 0 0') == '7'\n\"\"\"\nimport sys"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1\\n0 0 0 0 0\") == \"7\"\n\"\"\"\n\nimport sys\n\nC, P = map(int, sys.stdin.readline().split())\nH = list(map(int, sys.stdin.readline().split()))\n\npossible_configs = [0] * (C + 1)\npossible_configs[0] = 1\nfor h in H:\n    possible_configs[h] = 0\n\nfor h in H:\n    for j in reversed(range(1, h + 1)):\n        possible_configs[j] += possible_configs[j - 1]\n\nprint(possible_configs[-1])\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\n2 1 1 1 0 1') == '5'\n\"\"\""
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 5\\n2 1 1 1 0 1') == '5'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\n\\n\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n\nSample Input 1:\nThis is a very long text with many words and very very long words.\n\n\nSample Output 1:\n[_]1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()_)0\u00a0((()_)1\u00a0(()"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 \\'][\\'0 |_|$.\\n'\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `[.]\\n'\nassert solution('What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@`][''$ `[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3`[.]\\n'\nassert solution('How do you do?') == '_/|1[-]0|Z[][0|][1]2[][0|][2]1[][0|][3]0[][0|][4]0[][0|][5]0[][0|][6]0[][0|][7]0[][0|][8]0[][0|][9]0[][0|][10]0[][0|][11]0[][0|][12]0[][0|][13]0[][0|][14]0[][0|][15]0[][0|][16]0[][0|][17]0[][0|][18]0[][0|][19]0[][0|][20]0[][0|][21]0[][0|][22]0[][0|][23]0[][0|][24]0[][0|][25]0[][0|][26]0[][0|][27]0[][0|][28]0[][0|][29]0[][0|][30]0[][0|][31]0[][0|][32]0[][0|][33]0[][0|][34]0[][0|][35]0[][0|][36]0[][0|][37]0[][0|][38]0[][0|][39]0[][0|][40]0[][0|][41]0[][0|][42]0[][0|][43]0[][0|][44]0[][0|][45]0[][0|][46]0[][0|][47]0[][0|][48]0[][0|][49]0[][0|][50]0[][0|][51]0[][0|][52]0[][0|][53]0[][0|][54]0[][0|][55]0[][0|][56]0[][0|][57]0[][0|][58]0[][0|][59]0[][0|][60]0[][0|][61]0[][0|][62]0[][0|][63]0[][0|][64]0[][0|][65]0[][0|][66]0[][0|][67]0[][0|][68]0[][0|][69]0[][0|][70]0[][0|][71]0[][0|][72]0[][0|][73]0[][0|][74]0[][0|][75]0[][0|][76]0[][0|][77]0[][0|][78]0[][0|][79]0[][0|][80]0[][0|][81]0[][0|][82]0[][0|][83]0[][0|][84]0[][0|][85]0[][0|][86]0[][0|][87]0[][0|][88]0[][0|][89]0[][0|][90]0[][0|][91]0[][0|][92]0[][0|][93]0[][0|][94]0[][0|][95]0[][0|][96]0[][0|][97]0[][0|][98]0[][0|][99]0[][0|][100]0[][0|][101]0[][0|][102]0[][0|][103]0[][0|][104]0[][0|][105]0[][0|][106]0[][0|][107]0[][0|][108]0[][0|][109]0[][0|][110]0[][0|][111]0[][0|][112]0[][0|][113]0[][0|][114]0[][0|][115]0[][0|][116]0[][0|][117]0[][0|][118]0[][0|][119]0[][0|][120]0[][0|][121]0[][0|][122]0[][0|][123]0[][0|][124]0[][0|][125]0[][0|][126]0[][0|][127]0[][0|][128]0[][0|][129]0[][0|][130]0[][0|][131]0[][0|][132]0[][0|][133]0[][0|][134]0[][0|][135]0[][0|][136]0[][0|][137]0[][0|][138]0[][0|][139]0["
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''All your base are belong to us.\n''') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z'\\\n        '[email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3'\\\n        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3'\\\n        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3'\\\n        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3'\\\n        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3'\\\n        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3'\\\n        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3'\\\n        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3'\\\n        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3'\\\n        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3'\\\n        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3'\\\n        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3'\\\n        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3'\\\n        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3'\\\n        '@|Z3 8310[]\\[]6 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6'\\\n        '`/0|_||Z [email\u00a0protected]$3 @|Z"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 \\'][\\'0 |_|$.\\n'\nassert solution('What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@\\'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3\\'][\\'[-]?\\n'\nassert solution('https://www.youtube.com/watch?v=4VuWXR3M7bY') == 'https://www.youtube.com/watch?v=4VuWXR3M7bY'"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\nassert solution(\"!abcdefghijklmnopqrstuvwxyz\") == \"![-]a[-]b[-]c[-]d[-]e[-]f[-]g[-]h[-]i[-]j[-]k[-]l[-]m[-]n[-]o[-]p[-]q[-]r[-]s[-]t[-]u[-]v[-]w[-]x[-]y[-]z[-]\\n\"\nassert solution(\"The quick brown fox jumped over the lazy dog!\") == \"`/0|T^1[-]h[-]e[-]q[-]u[-]k[-]b[-]r[-]o[-]w[-]v[-]e[-]j[-]u[-]t[-]y[-]x[-]g[-]l[-]o[-]d[-]0[-]Z2|_[-]z[-]7[-]x[-]\\[-]k[-]b[-]r[-]a[-]u[-]s[-]y[-]t[-]h[-]e[-]q[-]u[-]j[-]0[-]!\\n\"\n\n-----Notes-----\nFirst line is plaintext.\n\n'''\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    'All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 \\'][\\'0 |_|$.\\n','solution'\n\nassert solution(\n    'What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@\\'][\\'$ \\'][\\'[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3\\'][\\'[-]?\\n','solution'\n\n-----Test Case-----\nTest Case 1\n\nTest Input 1\n\nAll your base are belong to us.\n\nTest Output 1\n\n@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\n\nTest Input 2\n\nWhat's the Frequency, Kenneth?\n\nTest Output 2\n\n\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\n\nTest Case 2\n\nTest Input 1\n\nAll your base are belong to us.\n\nTest Output 1\n\n@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\n\nTest Input 2\n\nWhat's the Frequency, Kenneth?\n\nTest Output 2\n\n\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\n\nTest Case 3\n\nTest Input 1\n\nAll your base are belong to us.\n\nTest Output 1\n\n@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\n\nTest Input 2\n\nWhat's the Frequency, Kenneth?\n\nTest Output 2\n\n\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\n\nTest Case 4\n\nTest Input 1\n\nAll your base are belong to us.\n\nTest Output 1\n\n@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\n\nTest Input 2\n\nWhat's the Frequency, Kenneth?\n\nTest Output 2\n\n\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\n\nTest Case 5\n\nTest Input 1\n\nAll your base are belong to us.\n\nTest Output 1\n\n@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\n\nTest Input 2\n\nWhat's the Frequency, Kenneth?\n\nTest Output 2\n\n\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\n\nTest Case 6\n\nTest Input 1\n\nAll your base are belong to us.\n\nTest Output 1\n\n@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\n\nTest Input 2\n\nWhat's the Frequency, Kenneth?\n\nTest Output 2\n\n\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\n\nTest Case 7\n\nTest Input 1\n\nAll your base are belong to us.\n\nTest Output 1\n\n@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\n\nTest Input 2\n\nWhat's the Frequency, Kenneth?\n\nTest Output 2\n\n\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\n\nTest Case 8\n\nTest Input 1\n\nAll your base are belong to us.\n\nTest Output 1\n\n@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\n\nTest Input 2\n\nWhat's the Frequency, Kenneth?\n\nTest Output 2\n\n\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\n\nTest Case 9\n\nTest Input 1\n\nAll your base are belong to us.\n\nTest Output 1\n\n@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 83"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('Hello World!') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\\\n                                   '`/"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\n\"\"\""
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\n\"\"\""
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'Bob'\nassert solution('2') == 'Bob'\nassert solution('5') == 'Alice'\nassert solution('10') == 'Alice'\n\"\"\""
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\nassert solution(\"3\") == \"Alice\"\nassert solution(\"4\") == \"Bob\"\nassert solution(\"5\") == \"Alice\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\n\"\"\""
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\nassert solution('3') == 'Alice'\nassert solution('4') == 'Bob'\nassert solution('5') == 'Alice'\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\nassert solution('4') == 'Alice'\nassert solution('3') == 'Bob'\nassert solution('5') == 'Bob'\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\n\"\"\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\n\"\"\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"thirtyoneletters\") == \"thirtyoneletters\"\nassert solution(\"thirtyoneletters\") == \"thirtyoneletters\"\nassert solution(\"thirtyoneletters\") == \"thirtyoneletters\"\nassert solution(\"thirtyoneletters\") == \"thirtyoneletters\"\nassert solution(\"thirtyoneletters\") == \"thirtyoneletters\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"fivehundredthirty\") == \"fivehundredthirty\"\nassert solution(\"thirtyone\") == \"thirtyone\"\nassert solution(\"fourhundredfourteen\") == \"fourhundredfourteen\"\nassert solution(\"onehundredtwentyseven\") == \"onehundredtwentyseven\"\nassert solution(\"onehundredtwothree\") == \"onehundredtwothree\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\nthis\\nsentence\\nhas\\n$\\nletters') == 'this sentence has $ letters'\nassert solution('7\\n$\\nis\\nthe\\nnumber\\nof\\nletters\\nhere') == 'thirty is the number of letters here'\nassert solution('5\\n$\\nis\\nthe\\nnumber\\nof\\nletters') == 'thirty is the number of letters'\nassert solution('7\\n$\\nis\\nthe\\nnumber\\nof\\nletters\\nhere') == 'thirty is the number of letters here'\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"$ threehundrednineteen\") == \"threehundrednineteen\"\nassert solution(\"$ onehundred$ seventyone\") == \"onehundredseventyone\"\nassert solution(\"$ fivehundred$ sixty$ eighty$ two\") == \"fivehundredsixtyeighttwo\"\nassert solution(\"$ ninehundred$ seventy$ five\") == \"ninehundredseventyfive\"\n\"\"\""
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"this\") == \"this has twenty one letters\"\nassert solution(\"three\") == \"three has twenty one letters\"\nassert solution(\"seventeen\") == \"seventeen has ten letters\"\nassert solution(\"twenty\") == \"twenty has ten letters\"\nassert solution(\"thirtyone\") == \"thirtyone has nine letters\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one twenty two twenty three twenty four twenty five twenty six twenty seven twenty eight twenty nine thirty one thirty two thirty three thirty four thirty five thirty six thirty seven thirty eight thirty nine forty one forty two forty three forty four forty five forty six forty seven forty eight forty nine fifty one fifty two fifty three fifty four fifty five fifty six fifty seven fifty eight fifty nine sixty one sixty two sixty three sixty four sixty five sixty six sixty seven sixty eight sixty nine ') == 'one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one twenty two twenty three twenty four twenty five twenty six twenty seven twenty eight twenty nine thirty one thirty two thirty three thirty four thirty five thirty six thirty seven thirty eight thirty nine forty one forty two forty three forty four forty five forty six forty seven forty eight forty nine fifty one fifty two fifty three fifty four fifty five fifty six fifty seven fifty eight fifty nine sixty one sixty two sixty three sixty four sixty five sixty six sixty seven sixty eight sixty nine'\nprint(solution('one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty one twenty two twenty three twenty four twenty five twenty six twenty seven twenty eight twenty nine thirty one thirty two thirty three thirty four thirty five thirty six thirty seven thirty eight thirty nine forty one forty two forty three forty four forty five forty six forty seven forty eight forty nine fifty one fifty two fifty three fifty four fifty five fifty six fifty seven fifty eight fifty nine sixty one sixty two sixty three sixty four sixty five sixty six sixty seven sixty eight sixty nine'))\nassert solution('onehundredtwentythreehundredfourtyfivehundredfiftyseventythreehundredfourtysevenhundredeightyeightninethyeighthundredninetyninehundredtwenty'\n) == 'onehundredtwentythreehundredfourtyfivehundredfiftyseventythreehundredfourtysevenhundredeightyeightninethyeighthundredninetyninehundredtwenty'\nprint(solution('onehundredtwentythreehundredfourtyfivehundredfiftyseventythreehundredfourtysevenhundredeightyeightninethyeighthundredninetyninehundredtwenty'))\nassert solution('onehundredtwentythreehundredfourtyfivehundredfiftyseventythreehundredfourtysevenhundredeightyeightninethyeighthundredninetyninehundredtwenty') == 'onehundredtwentythreehundredfourtyfivehundredfiftyseventythreehundredfourtysevenhundredeightyeightninethyeighthundredninetyninehundredtwenty'\nprint(solution('onehundredtwentythreehundredfourtyfivehundredfiftyseventythreehundredfourtysevenhundredeightyeightninethyeighthundredninetyninehundredtwenty'))\nassert solution('onehundredtwentythreehundredfourtyfivehundredfiftyseventythreehundredfourtysevenhundredeightyeightninethyeighthundredninetyninehundredtwenty') == 'onehundredtwentythreehundredfourtyfivehundredfiftyseventythreehundredfourtysevenhundredeightyeightninethyeighthundredninetyninehundredtwenty'\nprint(solution('onehundredtwentythreehundredfourtyfivehundredfiftyseventythreehundredfourtysevenhundredeightyeightninethyeighthundredninetyninehundredtwenty'))\nassert solution('onehundredtwentythreehundredfourtyfivehundredfiftyseventythreehundredfourtysevenhundredeightyeightninethyeighthundredninetyninehundredtwenty') == 'onehundredtwentythreehundredfourtyfivehundredfiftyseventythreehundredfourtysevenhundredeightyeightninethyeighthundredninetyninehundredtwenty'\nprint(solution('onehundredtwentythreehundredfourtyfivehundredfiftyseventythreehundredfourtysevenhundredeightyeightninethyeighthundredninetyninehundredtwenty'))\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"this sentence has thirtyone letters\") == \"this sentence has $ letters\"\nassert solution(\"this sentence has thirtyone letters\") == \"this sentence has $ letters\"\nassert solution(\"this sentence has thirtyone letters\") == \"this sentence has $ letters\"\nassert solution(\"this sentence has thirtyone letters\") == \"this sentence has $ letters\"\nassert solution(\"this sentence has thirtyone letters\") == \"this sentence has $ letters\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"this sentence has thirtyone letters\") == \"this sentence has $ letters\"\nassert solution(\"blah blah seventeen\") == \"blah blah seventeen\"\nassert solution(\"eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty\") == \"eleven twenty thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty\"\nassert solution(\"twenty twenty two twenty three twenty four twenty five twenty six twenty seven twenty eight twenty nine thirty\") == \"twenty twenty two twenty three twenty four twenty five twenty six twenty seven twenty eight twenty nine thirty\"\nassert solution(\"ninety eighty eighty one eighty eighty eighty two eighty eighty eighty three eighty eighty eighty four eighty eighty eighty five eighty eighty eighty six eighty eighty eighty seven eighty eighty eighty eight eighty eighty eighty nine eighty eighty eighty one eighty eighty eighty two eighty eighty eighty three eighty eighty eighty four eighty eighty eighty five eighty eighty eighty six eighty eighty eighty seven eighty eighty eighty eight eighty eighty eighty nine eighty eighty eighty one eighty eighty eighty two eighty eighty eighty three eighty eighty eighty four eighty eighty eighty five eighty eighty eighty six eighty eighty eighty seven eighty eighty eighty eight eighty eighty eighty nine eighty eighty eighty one eighty eighty eighty two eighty eighty eighty three eighty eighty eighty four eighty eighty eighty five eighty eighty eighty six eighty eighty eighty seven eighty eighty eighty eight eighty eighty eighty nine eighty eighty eighty one eighty eighty eighty two eighty eighty eighty three eighty eighty eighty four eighty eighty eighty five eighty eighty eighty six eighty eighty eighty seven eighty eighty eighty eight eighty eighty eighty nine eighty eighty eighty one eighty eighty eighty two eighty eighty eighty three eighty eighty eighty four eighty eighty eighty five eighty eighty eighty six eighty eighty eighty seven eighty eighty eighty eight eighty eighty eighty nine eighty eighty eighty one eighty eighty eighty two eighty eighty eighty three eighty eighty eighty four eighty eighty eighty five eighty eighty eighty six eighty eighty eighty seven eighty eighty eighty eight eighty eighty eighty nine eighty eighty eighty one eighty eighty eighty two eighty eighty eighty three eighty eighty eighty four eighty eighty eighty five eighty eighty eighty six eighty eighty eighty seven eighty eighty eighty eight eighty eighty eighty nine eighty eighty eighty one eighty eighty eighty two eighty eighty eighty three eighty eighty eighty four eighty eighty eighty five eighty eighty eighty six eighty eighty eighty seven eighty eighty eighty eight eighty eighty eighty nine eighty eighty eighty one eighty eighty eighty two eighty eighty eighty three eighty eighty eighty four eighty eighty eighty five eighty eighty eighty six eighty eighty eighty seven eighty eighty eighty eight eighty eighty eighty nine eighty eighty eighty one eighty eighty eighty two eighty eighty eighty three eighty eighty eighty four eighty eighty eighty five eighty eighty eighty six eighty eighty eighty seven eighty eighty eighty eight eighty eighty eighty nine eighty eighty eighty one eighty eighty eighty two eighty eighty eighty three eighty eighty eighty four eighty eighty eighty five eighty eighty eighty six eighty eighty eighty seven eighty eighty eighty eight eighty eighty eighty nine eighty eighty eighty one eighty eighty eighty two eighty eighty eighty three eighty eighty eighty four eighty eighty eighty five eighty eighty eighty six eighty eighty eighty seven eighty eighty eighty eight eighty eighty eighty nine eighty eighty eighty one eighty eighty eighty two eighty eighty eighty three eighty eighty eighty four eighty eighty eighty five eighty eighty eighty six eighty eighty eighty seven eighty eighty eighty eight eighty eighty eighty nine eighty eighty eighty one eighty eighty eighty two eighty eighty eighty three eighty eighty eighty four eighty eighty eighty five eighty eighty eighty six eighty eighty eighty seven eighty eighty eighty eight eighty eighty eighty nine eighty eighty eighty one eighty eighty eighty two eighty eighty eighty three eighty eighty eighty four eighty eighty eighty five eighty eighty eighty six eighty eighty eighty seven eighty eighty eighty eight eighty eighty eighty nine eighty eighty eighty one eighty eighty eighty two eighty eighty eighty three eighty eighty eighty four eighty eighty eighty five eighty eighty eighty six eighty eighty eighty seven eighty eighty eighty eight eighty eighty eighty nine eighty eighty eighty one eighty eighty eighty two eighty eighty eighty three eighty eighty eighty four eighty eighty eighty five eighty eighty eighty six eighty eighty eighty seven eighty eighty eighty eight eighty eighty eighty nine eighty eighty eighty one eighty eighty eighty two eighty eighty eighty three eighty eighty eighty four eighty eighty eighty five eighty eighty eighty six eighty eighty eighty seven eighty eighty eighty eight eighty eighty eighty nine eighty eighty eighty one eighty eighty eighty two eighty eighty eighty three eighty eighty eighty four eighty eighty eighty five eighty eighty eighty six eighty eighty eighty seven eighty eighty eighty eight eighty eighty eighty nine eighty eighty eighty one eighty eighty eighty two eighty eighty eighty three eighty eighty eighty four eighty eighty eighty five eighty eighty eighty six eighty eighty eighty seven eighty eighty eighty eight eighty eighty eighty nine eighty eighty eighty one eighty eighty eighty two eighty eighty eighty three eighty eighty eighty four eighty eighty eighty five eighty eighty eighty six eighty eighty eighty seven eighty eighty eighty eight eighty eighty eighty nine eighty eighty eighty one eighty eighty eighty two eighty eighty eighty three eighty eighty eighty four eighty eighty eighty five eighty eighty eighty six eighty eighty eighty seven eighty eighty eighty eight eighty eighty eighty nine eighty eighty eighty one eighty eighty eighty"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"this sentence has $ letters\") == \"this sentence has thirtyone letters\"\n\nimport sys\n\nsentences = []\nfor i in range(int(sys.stdin.readline())):\n    sentences.append(sys.stdin.readline().strip())"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('this sentence has $ letters') == 'thirty one letters'\nassert solution('twenty') == 'twenty'\nassert solution('thirty') == 'thirty'\nassert solution('fourty') == 'forty'\nassert solution('fifty') == 'fifty'\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Abcd\") == 0\nassert solution(\"EaEbFabG\") == 5\n\n-----Notes-----\nmemory bytes divisible by 4\n\n\"\"\"\n\nimport unittest\n\nclass Test_solution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"Abcd\"), 0)\n        self.assertEqual(solution(\"EaEbFabG\"), 5)"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Abcd\") == 0\nassert solution(\"EaEbFabG\") == 5\n\"\"\"\n\nimport sys\n\n__author__ = 'Dariusz Roscial'\n\nfrom typing import List\n\nDEBUG = False\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\"\"\""
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('Abcd') == '0'\nassert solution('EaEbFabG') == '5'"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\nassert solution(\"a\") == \"0\"\nassert solution(\"abcd\") == \"0\"\nassert solution(\"abcd\" * 100) == \"0\"\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Abcd\") == 0\nassert solution(\"EaEbFabG\") == 5\nprint('test passed')"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'Abcd'\n) == 0\nassert solution(\n'EaEbFabG'\n) == 5\n\"\"\""
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABCD\") == \"0\"\nassert solution(\"AAABBBCCCDDD\") == \"5\"\n\n\"\"\"\n\nimport re\n\nfrom math import gcd\nfrom typing import Dict, List\n\nimport unittest"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '0'\nassert solution('A') == '0'\nassert solution('Abcd') == '0'\nassert solution('Abcd\\n') == '0'\nassert solution('Abcd\\nEaEbFabG') == '5'\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '2 3'\n    ) == 'Odd 6'\nassert solution(\n    '3 3'\n    ) == 'Even 6'\n\"\"\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\n3 3') == 'Odd 6'\n\nassert solution('3 3\\n3 3') == 'Even 6'\n\nassert solution('3 3\\n1 1') == 'Not a moose'\n\nassert solution('3 3\\n1 2') == 'Odd 6'\n\nassert solution('3 3\\n2 2') == 'Even 6'"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"0 3\") == \"Not a moose\"\nassert solution(\"1 1\") == \"Not a moose\"\nassert solution(\"2 2\") == \"Not a moose\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\nassert solution('0 3') == 'Not a moose'\nassert solution('1 1') == 'Not a moose'\nassert solution('4 5') == 'Even 20'\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"1 1\") == \"Not a moose\"\nassert solution(\"2 2\") == \"Even 0\"\nassert solution(\"4 4\") == \"Even 16\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\nassert solution('1 1') == 'Not a moose'\n\n----Test----\nimport codewars_test as Test\nTest.assert_equals(solution('1 1'), 'Not a moose')\nTest.assert_equals(solution('2 3'), 'Odd 6')\nTest."
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\nassert solution('0 3') == 'Not a moose'\nassert solution('1 1') == 'Even 1'\nassert solution('1 0') == 'Not a moose'\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"0 0\") == \"Not a moose\"\nassert solution(\"5 5\") == \"Even 10\"\nassert solution(\"1 20\") == \"Odd 10\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\nassert solution('10 0') == 'Even 30'\nassert solution('0 10') == 'Even 20'\nassert solution('0 0') == 'Not a moose'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"1 2\") == \"Not a moose\"\nassert solution(\"4 4\") == \"Even 10\"\nassert solution(\"0 0\") == \"Even 0\"\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\n\nassert solution(\"2\") == \"2\"\n\nassert solution(\"3\") == \"4\"\n\nassert solution(\"4\") == \"5\"\n\nassert solution(\"5\") == \"6\""
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('1 2') == '1'\nassert solution('1 2 2') == '1'\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2') == ''\nassert solution('2222') == ''\nassert solution('123') == ''\nassert solution('12a') == ''\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'''3\ntomo\nmono\ndak\n6666''') == \"1\\n2\"\n\nassert solution(\n'''2\nja\nla\n52''') == \"2\\ndef\"\n\nassert solution(\n'''3\ntomo\nmono\ndak\n6666''') == \"1\\n2\"\n\nassert solution(\n'''3\ntomo\nmono\ndak\n6666''') == \"1\\n2\"\n\nassert solution(\n'''4\ntomo\nmono\ndak\n6666''') == \"1\\n2\""
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('tomo') == 1\nassert solution('mono') == 1\nassert solution('dak') == 2\nassert solution('6666') == 2\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == 'a'\nassert solution('11') == 'k'\nassert solution('111') == 'b'\nassert solution('1111') == 'c'\nassert solution('1112') == 'j'\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\ntomo\\nmono\\ndak\\n6666\") == \"1\"\nassert solution(\"2\\nja\\nla\\n52\") == \"2\"\nassert solution(\"7\\npython\\npython\\ntwitch\\npython\\njava\\npython\\nruby\\npython\") == \"2\"\nassert solution(\"10\\nhello\\nworld\\npython\\npython\\ntwitch\\njava\\nruby\\nworld\\nworld\\nworld\") == \"1\"\n\n-----Constraints-----\n$1 \\leq N \\leq 1000$\n$1 \\leq |S| \\leq 1000$\nAll strings are lowercase English letters and are separated by newline characters.\n\n\"\"\"\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"tomo\") == \"1\"\nassert solution(\"mono\") == \"1\"\nassert solution(\"dak\") == \"1\"\nassert solution(\"6666\") == \"1\"\nassert solution(\"ja\") == \"2\"\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"tomo\") == 1\nassert solution(\"mono\") == 1\nassert solution(\"dak\") == 1\nassert solution(\"6666\") == 0\nassert solution(\"7\") == 0\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A\") == (\"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\")\nassert solution(\"DOG\") == (\"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\")\n\"\"\"\n\nfrom itertools import zip_longest"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A\") ==..#..\nassert solution(\"DOG\") ==..#...#...*..\nassert solution(\"AB\") ==..#..\nassert solution(\"BA\") ==..#...#...*..\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('A') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('A') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(A) == \"...#...#...*..\\n.#.#.#.#.*.*.\\n#.A.#.O.*.G.*\\n.#.#.#.#.*.*.\\n...#...#...*..\"\nassert solution(DOG) == \"...#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n...#...#...*..\"\nassert solution(D) == \"...#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n...#...#...*..\"\nassert solution(G) == \"...#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n...#...#...*..\"\n\"\"\"\n\n\"\"\"\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\n\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\n\n\"\"\""
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('A') == '..#..\\n.##.\\n#.#.\\n.#.#\\n..#..\\n'\nassert solution('DOG') == '..#...#...*..\\n.###.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\\n'\n\"\"\"\n\nimport unittest\n\nPAN_WENDY_FRAME_PATTERN = '..*..'\nPAN_WENDY_FRAME_WIDTH = 2\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('A') == \\\n'''\n..#..\n.#.#.\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A\") == \"...#..\\n#.#.#\\n#.A#\\n.#.#\\n...#..\"\nassert solution(\"DOG\") == \"...#...#...*..\\n#.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n...#...#...*..\"\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A\") == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..'\nassert solution(\"DOG\") == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..'\n\"\"\""
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"21\") == \"1385.442360\"\n\"\"\"\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 3.141593\nassert solution('2') == 2.0\nassert solution('21') == 1385.442360\nprint('The local tests are done. Click Save \"Local Tests\" to submit your solution.')\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"21\") == \"1385.442360\"\n\"\"\""
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '3.141593\\n2.000000'\nprint('Test pass.')\n\nassert solution('21') == '1385.442360\\n882.000000'\nprint('Test pass.')\n\n\"\"\"\nimport math"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"21\") == \"1385.442360\"\nassert solution(\"1\") == \"3.141593\"\nassert solution(\"11\") == \"42.527017\"\nassert solution(\"1000\") == \"959595.857138\"\nassert solution(\"10000\") == \"987631.063891\"\nprint(\"Passed all samples.\")\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"3.141592653589793\"\nassert solution(\"2\") == \"5.196152422706632\"\nassert solution(\"3\") == \"8.326235531685054\"\nassert solution(\"4\") == \"14.884955592153875\"\nassert solution(\"5\") == \"31.41592653589793\"\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"21\") == \"1385.442360\""
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\nassert solution('10000') == '14169.0'\n\"\"\""
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\nprint(solution(input()))\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 -2 3\") == 2\n\"\"\"\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\nassert solution(\"5\\n129 44 394 253 147\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 -2 3\\n4 5 6\") == \"6\"\n\"\"\"\n\nn = int(input())\nlist = [int(i) for i in input().split()]\nsum = 0\nfor i in range(len(list)):\n    if list[i] < 0:\n        sum += abs(list[i])\n\nprint(sum)\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 -2 3\") == 2\n\"\"\""
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 -2 3\\n\") == \"2\"\n\"\"\"\n\nN = int(input())\n\nexpenses = list(map(int, input().split()))\n\nprint(sum(expenses))\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 -2 3\") == 2\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nN_list = [int(sys.stdin.readline().strip()) for _ in range(N)]\n\ntotal = 0\n\nfor i in range(N):\n    if N_list[i] < 0:\n        total += N_list[i]\n\nprint(total)\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\nassert solution(\"5\\n129 44 394 253 147\") == \"0\"\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '3\\n1 -2 3'\n) == '2'\n\nassert solution(\n    '5\\n129 44 394 253 147'\n) == '0'\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 -2 3') == 2\nassert solution('5\\n129 44 394 253 147') == 0\n\nprint(solution(input()))\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '2'\nassert solution('1 1 2 2') == '4'\nassert solution('1 2 2') == '3'\nassert solution('1 2 2 3') == '5'\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 2') == '8'\nassert solution('3 2 1') == '6'\nassert solution('3 4 2') == '12'\n\"\"\"\n\nn = int(input())\nlst = list(map(int, input().split()))\ns = sum(lst)\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '2'\nassert solution('1 2 3 4') == '4'\nassert solution('3 3 2') == '4'\nassert solution('1 2 2') == '3'\nassert solution('1 2 3') == '3'\n\n'''"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 2\") == 6\nassert solution(\"3 4 1 2\") == 8\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 2\") == \"6\"\nassert solution(\"3 1 2\") == \"8\"\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\nassert solution(\"3\\n4 1 2\") == \"8\"\n\"\"\""
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n4 1 2') == '8'\nassert solution('3\\n1 2 2') == '6'\nassert solution('4\\n1 2 2') == '8'\nassert solution('4\\n2 2 1') == '8'\n\"\"\"\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 2') == '8'\nassert solution('2 2 2') == '6'\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 2\\n3 4 1 2\") == \"8\"\nassert solution(\"3 4 1 2\\n3 4 1 2\") == \"12\"\n\n\"\"\"\n\nimport math\n\nn = int(input())\n\na = map(int, input().split())\n\nmin_time = 0\n\nfor i in a:\n    min_time += i * 2\n\nprint(min_time)\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n2 2 2') == '6'\nassert solution('3\\n4 1 2') == '8'\n\n'''\n\nimport sys\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == '2'\n\"\"\"\n\n\"\"\"\nFailed solution:\n\nimport sys\n\ngrid = sys.stdin.readlines()\n\ngrid = ''.join(grid)\ngrid = grid.split('\\n')\ngrid = [list(i) for i in grid]"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == \"NOT POSSIBLE\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 4\\n5 1 1\\n1 5 2\") == \"2\"\n\"\"\"\n\nimport math\n\n\"\"\"\nThe input consists of a single test case. The first line contains three integers $t$ ($1 \\le t \\le 200$), $N$ ($1 \\le N \\le 100$) and $M$ ($1 \\le M \\le 100$). The rest of N lines will be Wall Maria\u2019s grid containing characters \u20181\u2018, \u20180\u2018, \u2018S\u2018, \u2018U\u2018, \u2018D\u2018, \u2018L\u2018, or \u2018R\u2018. There is exactly one \u2018S\u2018 in the input.\n\nThe output should be either \u201cNOT POSSIBLE\u201d or the minimum number of zones that must be traversed to escape.\n\nExample:\n1 4 4\n1111\n1S01\n1011\n0U11\n2\n\"\"\"\n\nn, m, t = [int(i) for i in input().split()]\ngrid = []\n\nfor i in range(n):\n    line = list(input())\n    grid.append(line)\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11\\n') == '2'\n\"\"\""
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11\\n') == '2'\n\nassert solution('2 4 4\\n1111\\n1S01\\n1011\\n0L11\\n') == 'NOT POSSIBLE'\n\n'''\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 2\\n1100\\n1S01\\n1011\\n0U11\\n\") == \"2\"\nassert solution(\"4 4 4\\n1100\\n1S01\\n1011\\n0U11\\n\") == \"NOT POSSIBLE\"\nassert solution(\"4 4 4\\n1110\\n1S01\\n1011\\n0U11\\n\") == \"2\"\nassert solution(\"4 4 4\\n1111\\n1S01\\n1011\\n0U11\\n\") == \"NOT POSSIBLE\"\nassert solution(\"4 3 4\\n1111\\n1S01\\n1011\\n0U11\\n\") == \"NOT POSSIBLE\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == \"NOT POSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == 2\n\"\"\""
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == 2\n\"\"\"\n\n\"\"\"\nA Dynamic Programming solution for the matrix problem.\nThe idea is to make use of the fact that if we can reach a particular cell from the leftmost cell (let's call it 0) in time T1, then we can reach the same cell from the topmost cell in time T2. Then, we have the time complexity to reach the current cell from the leftmost cell is T1 + T2.\n\"\"\"\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5\\n1 5 4 3 2 1 1') == 3\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input_1) == output_1"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4', 'Answer is wrong'\nprint('The local tests are done.')\n\n\"\"\"\n\nn, c = map(int, stdin.readline().split())\nl = list(map(int, stdin.readline().split()))\n\ndp = [0] * n\nmax_weight = 0\nfor i in range(n):\n    if c >= l[i]:\n        dp[i] = 1\n        max_weight = l[i]\n        c -= l[i]\n    elif max_weight >= c:\n        dp[i] = max_weight - c + 1\n        break\n    else:\n        dp[i] = max_weight\n        break\n\nprint(sum(dp))\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\n\"\"\"\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n3 1 2 1 1\") == \"4\"\nassert solution(\"7 5\\n1 5 4 3 2 1 1\") == \"3\"\nassert solution(\"5 5\\n1 1 1 1 1\") == \"0\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n3 1 2 1 1\") == \"4\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\nassert solution('5 3\\n1 2 3 4') == '3'\nassert solution('5 3\\n4 3 4 1') == '3'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n3 1 2 1 1\") == 4\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\nassert solution('10 500\\n7 1 2 3 2 1 1 2 2 1 3 1 1 1') == '8'\n\nassert solution('6 10\\n1 3 2 2 2 4 2 3 2') == '4'\nassert solution('2 10\\n2 1 2') == '0'\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 5\n3 1 2 1 1\n''') == 4\n\nassert solution('''7 5\n1 5 4 3 2 1 1\n''') == 3\n\n\"\"\"\n\nfrom collections import Counter\n\nn, c = [int(x) for x in input().split()]\n\nweights = [int(x) for x in input().split()]"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\") == \"5\\n10\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\") == \"10\\n15\""
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\") == \"5\\n10\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\") == \"10\\n15\""
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\nSSPPR\\n1\\nSSPPR') == '5\\n10'\nassert solution('5\\nSSPPR\\n2\\nPPRRS\\nRRSSP') == '10\\n15'\nassert solution('5\\nSSPPR\\n3\\nRPRS\\nPRRS\\nSSPR\\nRPRS') == '15\\n25'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"SSPPR\") == 5\nassert solution(\"SSPPR\") == 10\n\"\"\""
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\nSSPPR\\n1\\nSSPPR\\n') == '5\\n10'\nassert solution('5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n') == '10\\n15'"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n2\\nPPRRS\\nRRSSP\") == \"5\\n10\"\nprint(\"Well done!\")\n\n\"\"\""
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\nSSPPR\\n1\\nSSPPR\\n2\\nPPRRS\\nRRSSP') == '10\\n15'\nprint(solution(stdin))\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"SSPPR\") == \"5\\n10\"\nassert solution(\"SSPPR\")!= \"5\\n10\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n2\\nPPRRS\\nRRSSP\") == \"10\\n15\"\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"still running\"\n\"\"\""
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\n11') == '4'\nassert solution('5\\n2\\n5\\n9\\n10') =='still running'\n\"\"\"\n\nimport sys\nimport itertools\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n7\\n11\\n\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\") == \"still running\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n7\\n11\\n\") == '4'\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\") =='still running'\n\"\"\""
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n1\\n2\\n3\\n4\\n5\\n6') =='still running'\nassert solution('6\\n1\\n2\\n3\\n4\\n5\\n6\\n7') == '7'\nassert solution('6\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8') =='still running'\nassert solution('6\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9') =='still running'\nassert solution('6\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') =='still running'\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n7\\n11') == '4'\nassert solution('5\\n2\\n5\\n9\\n10\\n17') =='still running'\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"still running\"\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n7\\n11\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"still running\"\nassert solution(\"2\\n7\\n11\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"still running\"\nassert solution(\"2\\n7\\n11\") == \"4\"\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n11\\n2\\n5\\n9\\n10\\n17\") == \"still running\"\n\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"4\"\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2\\n5\\n9\\n10\") == \"still running\"\nassert solution(\"2\\n11\\n11\") == \"4\"\n\n\"\"\"\n\nimport sys\nimport os\nimport time\nfrom collections import deque\nfrom typing import Deque, List\n\nclass StopWatch:\n    def __init__(self, times: List[int]):\n        self.times = times\n        self.queue = deque()\n        self.last_time = None\n\n    def push_time(self, time: int) -> None:\n        self.queue.append(time)\n        self.last_time = time\n\n    def pop_time(self) -> int:\n        if not self.queue:\n            return 0\n\n        while self.queue[0] == self.last_time:\n            self.queue.popleft()\n            if not self.queue:\n                break\n\n        self.last_time = self.queue[0]\n        return self.last_time\n\n    def next_time(self, now: int) -> int:\n        if not self.queue:\n            return 0\n\n        return max(now, self.queue[0]) + 1\n\n    def is_running(self) -> bool:\n        return len(self.queue) > 0\n\n    def total_time(self) -> int:\n        return self.last_time"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n6 1 3 2 2 3\") == \"0.6\"\n\"\"\"\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 1 3 2 2 3\") == \"0.6\"\nassert solution(\"2 2\") == \"impossible\"\n\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 1 3 2 2 3') == '0.6'\nassert solution('2 2') == 'impossible'\n\"\"\"\nimport math"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''6\n6 1 3 2 2 3\n''') == '0.6'\nassert solution('''2\n2 2\n''') == 'impossible'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n6 1 3 2 2 3') == '0.6'\n\"\"\"\n\n\"\"\"\nThe first thing to do is to partition the list of canisters into two sublists, one for each balloon. This is done by starting at the end of the list and moving the iterator towards the beginning until the iterator is not greater than the number of balloons.\n\nIt is possible that the number of balloons is not divisible by 2, in which case we'll need to add one more balloon to the first sublist.\n\nFor instance, in the case below, there are two balloons, and there are eight gas canisters. We need to fill the first two balloons, so the gas canisters are partitioned into three sublists. The first two contain three canisters each, and the last one contains one.\n\n1 2 3 4 5 6 7\n1 2 3 4 5\n1 2 3 4\n5 6 7\n6 7\n4 5\n4 3 2\n2 1\n\nThe following loop is used to populate the sublists.\n\nThe first sublist will contain balloons with capacity < balloons.\n\nThe second sublist will contain balloons with capacity = ballons.\n\nThe third sublist will contain balloons with capacity > ballons.\n\nAfter that, we add the remaining gas canisters to the end of the list to form one single sublist.\n\nThe above loop will produce:\n\n[1,2,3,4]\n[5,6,7]\n[4,5]\n[3,2,1]\n[4,3,2,1]\n\nThe maximum fraction that is possible is 0.5.\n\nThe maximum fraction that is possible is 0.5.\n\"\"\""
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"6\\n6 1 3 2 2 3\"\n) == \"0.6\"\nassert solution(\n    \"2\\n2 2\"\n) == \"impossible\""
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n6 1 3 2 2 3') == '0.6'\nassert solution('2\\n2 2') == 'impossible'\nassert solution('1\\n2') == '1'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n6\n6 1 3 2 2 3\n''') == '0.6'\nassert solution('''\n2\n2 2\n''') == 'impossible'\n'''\n###\n\n'''"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 1 3 2 2 3\") == \"0.6\"\n\"\"\""
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 1 3 2 2 3\\n2 2\") == \"0.6\"\n\"\"\"\n\nn = int(stdin.readline())\nc = list(map(int, stdin.readline().split()))\n\nc.sort()\n\ns, e = 1, n\n\nwhile s <= e:\n    m = s + (e - s) // 2\n    i = 0\n    for _ in range(n):\n        if c[i] < m:\n            i += 1\n        elif c[i] == m:\n            i += 1\n    if i == n:\n        e = m - 1\n    else:\n        s = m + 1\nprint('{:.6f}'.format(s / n))\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == 'Emma'\nassert solution('1 8 1 8\\n1 10 2 5') == 'Tie'\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 4 1 4\", \"1 6 1 6\") == \"Emma\"\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == 'Emma'\nassert solution('1 8 1 8\\n1 10 2 5') == 'Tie'\nassert solution('1 10 1 10\\n1 10 1 10') == 'Tie'\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == 'Emma'\nassert solution('1 8 1 8\\n1 10 2 5') == 'Tie'\n\"\"\"\n\nimport itertools\n\na, b, c, d = map(int, stdin.split())\n\nm = list(itertools.product([a, b], [c, d]))\n\nprint('Emma' if sum(x[0] for x in m) > sum(x[1] for x in m) else 'Gunnar' if sum(x[0] for x in m) < sum(x[1] for x in m) else 'Tie')\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"\n\"\"\"\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 4 1 4\", \"1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\", \"1 10 2 5\") == \"Tie\"\nassert solution(\"1 8 1 8\", \"1 10 2 5\") == \"Emma\"\nassert solution(\"1 8 1 8\", \"1 10 2 5\") == \"Tie\"\nassert solution(\"1 8 1 8\", \"1 10 2 5\") == \"Emma\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 4 1 4\\n1 6 1 6') == 'Emma'\nassert solution('1 8 1 8\\n1 10 2 5') == 'Tie'\n\"\"\"\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\""
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\n\"\"\"\n\nstdin = \"\"\"1 4 1 4\n1 6 1 6\"\"\""
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\nassert solution(\"1 2 3 mumble mumble 5\") == \"makes sense\"\n\"\"\""
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 mumble mumble 3 mumble\") == \"makes sense\"\nassert solution(\"1 2 mumble mumble 3 mumble\") == \"something is fishy\"\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 2 3 mumble mumble 7 mumble 8\") == \"makes sense\"\nassert solution(\"8 1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n\"\"\"\n\nn = int(input())\nl = [int(x) if x!= \"mumble\" else x for x in input().split()]\nm = set()\nfor i in l:\n    if isinstance(i, int):\n        m.add(i)\nm = list(m)\nm.sort()\nfor i in range(len(m) - 1):\n    if m[i] + 1!= m[i + 1]:\n        print(\"something is fishy\")\n        break\nelse:\n    print(\"makes sense\")"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 3 mumble 5') =='makes sense'\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"5\\n1 2 3 mumble 5\"\n) == \"makes sense\"\nassert solution(\n    \"8\\n1 2 3 mumble mumble 7 mumble 8\"\n) == \"something is fishy\"\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n\n\"\"\""
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 mumble 5') =='makes sense'\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\n\n\"\"\""
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3 mumble 5\\n') =='makes sense'\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8\\n') =='something is fishy'\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 3 mumble 5') =='makes sense'\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"\n\"\"\"\n\nimport numpy"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 9 25 49 81\\n\") == \"2 121\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\n\"\"\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\n\"\"\""
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 6 9 12 15\\n') == '1 18'\nassert solution('4 9 25 49 81\\n') == '2 121'\nassert solution('8 3 21 30 22 28\\n') == '2 231'\nassert solution('8 3 20 21 22 23\\n') == '2 232'\nassert solution('8 3 19 20 21 22\\n') == '2 233'\n\n\"\"\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\n\"\"\"\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\n\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"8\\n2 3\\n1 0\\n0 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"INCORRECT\""
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\nassert solution('4\\n2 3\\n1 0\\n0 2\\n3 1') == 'CORRECT'\nassert solution('4\\n1 1\\n0 1\\n1 2\\n2 0') == 'INCORRECT'\nassert solution('4\\n1 2\\n0 3\\n1 4\\n2 0') == 'INCORRECT'\nassert solution('4\\n0 1\\n1 0\\n1 1\\n2 0') == 'INCORRECT'\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3\\n1 0\\n0 2\\n3 1\\n') == 'CORRECT'\nassert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n') == 'CORRECT'\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\\n\") == \"CORRECT\"\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n\") == \"CORRECT\"\n\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4\n\"\"\"\n) == \"CORRECT\"\n\nassert solution(\n    \"\"\"\n4\n2 3\n1 0\n0 2\n3 1\n\"\"\"\n) == \"CORRECT\"\n\nassert solution(\n    \"\"\"\n4\n2 3\n1 0\n0 2\n3 1\n\"\"\"\n) == \"INCORRECT\"\n\nassert solution(\n    \"\"\"\n3\n1 0\n0 2\n3 1\n\"\"\"\n) == \"INCORRECT\"\n\nassert solution(\n    \"\"\"\n4\n1 2\n1 2\n1 0\n0 1\n\"\"\"\n) == \"INCORRECT\""
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\n\n-----Tests-----\nsolution(open(\"test_3.in\", \"r\").read())\n\"\"\"\n\nimport sys\n\nnum_queens = int(sys.stdin.readline())\npositions = sys.stdin.readlines()\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"1\\n2\") == \"INCORRECT\"\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == 'CORRECT'\nassert solution(\"8\\n2 3\\n1 0\\n0 2\\n3 1\\n\") == 'INCORRECT'\nassert solution(\"8\\n2 3\\n1 0\\n0 2\\n3 1\\n4 6\\n0 3\\n2 7\\n7 4\") == 'INCORRECT'\nassert solution(\"8\\n2 3\\n1 0\\n0 2\\n3 1\\n4 6\\n0 3\\n2 7\\n7 4\") == 'INCORRECT'\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\\n\") == \"CORRECT\"\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n\") == \"INCORRECT\"\n\nSOLUTION:\n\nfrom collections import deque\n\nclass Solution:\n    def isSafe(self, row, col, n):\n        for i in range(row):\n            if self.positions[i] == col or abs(row - i) == abs(col - self.positions[i]):\n                return False\n        return True\n\n    def solveNQueens(self, n):\n        self.positions = [-1] * n\n        self.solutions = 0\n        self.solve(n, 0)\n        return self.solutions\n\n    def solve(self, n, row):\n        if row == n:\n            self.solutions += 1\n        else:\n            for col in range(n):\n                if self.isSafe(row, col, n):\n                    self.positions[row] = col\n                    self.solve(n, row + 1)"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\\n\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\\n\") == \"1 2 3 1 11\"\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n0 1 1\n1 0 1\n1 1 0''') == '1 1 1'\nassert solution('''5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0''') == '1 2 3 1 11'\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n0\\n0\\n1\\n1\\n1\") == \"1\\n1\\n1\"\nassert solution(\"3\\n0\\n1\\n1\") == \"1\\n1\\n1\"\nassert solution(\"3\\n1\\n2\\n3\") == \"1\\n2\\n3\"\nassert solution(\"5\\n0\\n0\\n1\\n1\\n1\") == \"1\\n1\\n1\"\nassert solution(\"1\\n1\") == \"1\"\n\"\"\"\n\nN = int(input())\nmatrix = []\nfor i in range(N):\n    matrix.append([int(n) for n in input().split()])\n\nzeros_matrix = []\nfor i in range(N):\n    zeros_matrix.append(matrix[i][i])\n\nresult = []\nfor i in range(N):\n    result.append(max(zeros_matrix))\n    for j in range(N):\n        result[i] = result[i] & matrix[i][j]\n\nresult =''.join(map(str, result))\nprint(result)"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n0 1 1\\n1 0 1\\n1 1 0') == '1 1 1'\nassert solution('5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0') == '1 2 3 1 11'\n\n\"\"\"\n\nn = int(stdin.readline().rstrip())\n\nmat = [[0 for j in range(n)] for i in range(n)]\n\nfor i in range(n):\n    mat[i] = [int(x) for x in stdin.readline().rstrip().split(' ')]\n\ndiagonal = sum([1 for i in range(n) for j in range(n) if i == j])\n\nans = []\n\nfor i in range(n):\n    for j in range(n):\n        if i < j:\n            ans.append(mat[i][j])\n\nans =''.join([str(i) for i in ans])\n\nprint(ans)"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\n\"\"\"\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('5') == '1 2 3 1 11'"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'''\n3\n0 1 1\n1 0 1\n1 1 0\n''') == '''\n1 1 1\n'''\n\nassert solution(\n'''\n5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0\n''') == '''\n1 2 3 1 11\n'''"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\n\"\"\"\n\n\"\"\"\n[MEMOIZATION]\n\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nFor any index, starting from 0.\n1. If the leftmost index == the rightmost index, return 0\n2. If the current index == the leftmost index, return the last rightmost index\n3. If the current index == the rightmost index, return the leftmost index\n\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nO(n) time\nO(1) space\n\"\"\""
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\n\n\"\"\""
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3\n0 1 1\n1 0 1\n1 1 0\"\"\") == \"1 1 1\"\n\"\"\"\n[[0 1 1]\n [1 0 1]\n [1 1 0]]\n\"\"\"\n\nassert solution(\"\"\"5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0\"\"\") == \"1 2 3 1 11\"\n\"\"\"\n[[0 0 1 1 1]\n [0 0 2 0 2]\n [1 2 0 1 3]\n [1 0 1 0 1]\n [1 2 3 1 0]]\n\"\"\"\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1') == 'Saturday'\nassert solution('1 1') == 'Monday'"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"Thursday\""
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('7 1') == 'Sunday'\nassert solution('31 12') == 'Sunday'\nassert solution('7 3') == 'Thursday'\nassert solution('8 3') == 'Monday'\n\nprint('all tests passed.')\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'Tuesday'\n\n\"\"\"\nimport re\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"17 1\"\n    ) == \"Saturday\"\nassert solution(\n    \"1 1\"\n    ) == \"Thursday\"\n\"\"\"\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('11 1') == 'Sunday'\nassert solution('5 7') == 'Friday'\nassert solution('1 10') == 'Monday'\nassert solution('7 8') == 'Saturday'\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\nassert solution('27 1') == 'Sunday'"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"17 1\") == \"Saturday\"\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('1 2') == 'Tuesday'\nassert solution('1 3') == 'Saturday'\nassert solution('1 4') == 'Wednesday'\nassert solution('1 5') == 'Friday'\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\nassert solution('20 4') == 'Saturday'\nassert solution('15 1') == 'Sunday'\nassert solution('13 1') == 'Sunday'\n\nSample Input 1:\n1 1\nSample Output 1:\nThursday\n\nSample Input 2:\n17 1\nSample Output 2:\nSaturday\n\nSample Input 3:\n20 4\nSample Output 3:\nSaturday\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\"\nassert solution(\"100\\n500\\n12\\n\") == \"129\\n480\"\n\"\"\""
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1\\n1') == ''\nassert solution('1\\n2') == ''\nassert solution('1\\n1\\n1') == ''\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\"\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n100\\n4\\n12\") == \"129\\n480\"\n\nprint(solution(\"4\\n100\\n4\\n12\"))"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40'\nprint('Test passed')\n\n-------\n\"\"\""
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n100\\n4\\n12\") == \"4\\n40\"\nassert solution(\"1\\n10\\n3\\n6\") == \"9\\n9\"\n\"\"\"\n\nl, d, x = map(int, input().split())\nn = 1\nm = 10**9\nwhile n <= m:\n    if l <= n <= d and sum([int(i) for i in str(n)]) == x:\n        print(n, m)\n        break\n    elif l <= n:\n        n += 1\n    else:\n        m -= 1\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n100\\n4\\n12') == '129\\n480'\nprint('Test passed\\n')"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40'\n\"\"\"\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\"\nprint(\"Test 1 OK\")\n\nassert solution(\"100\\n500\\n12\\n\") == \"129\\n480\"\nprint(\"Test 2 OK\")\n\nassert solution(\"1\\n1\\n1\\n\") == \"1\\n1\"\nprint(\"Test 3 OK\")\n\nassert solution(\"1\\n100\\n11\\n\") == \"11\\n100\"\nprint(\"Test 4 OK\")\n\nassert solution(\"1\\n100\\n10\\n\") == \"10\\n100\"\nprint(\"Test 5 OK\")\n\nprint(\"All tests passed\")\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40'\nassert solution('100\\n500\\n12\\n') == '129\\n480'\n\nprint('Test finished.')\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\"\n\n\"\"\"\n\n\"\"\"\nAnte bought a piece of land. The land contains N apple trees, but his piece is triangular and it is not easy for him to determine which apple trees belong to him.\n\nYour program will be given the coordinates of the vertices of the triangle forming Ante\u2019s piece, and the coordinates of all apple trees. Determine the area of land belonging to Ante, and the number of trees belonging to him. We consider apple trees on the very border of his piece to belong to him.\n\nThe area of a triangle with vertices $(x_ A, y_ A), (x_ B, y_ B)$ and $(x_ C, y_ C)$ is given by the following formula:\\[ \\frac{|x_ A(y_ B - y_ C) + x_ B(y_ C - y_ A) + x_ C(y_ A - y_ B)|}{2} \\]\n\n-----Input-----\nThe first three lines contain the coordinates of the vertices of the triangle.\n\nThe following line contains the integer $N$ $(1 \\le N \\le 100)$, the number of apple trees.\n\nEach of the following $N$ lines contains the coordinates of one apple tree.\n\nAll coordinate are pairs of positive integers less than 1000, separated by a space.\n\n-----Output-----\nOutput the area of land belonging to Ante on the first line, with exactly one digit after the decimal point.\n\nOutput the number of trees belonging to Ante on the second line.\n\n-----Examples-----\nSample Input 1:\n1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4\nSample Output 1:\n4.0\n3\n\nSample Input 2:\n3 2\n5 4\n1 6\n3\n2 4\n3 5\n4 3\nSample Output 2:\n6.0\n3\n\nSample Input 3:\n3 2\n5 4\n1 6\n3\n2 4\n3 5\n4 3\nSample Output 3:\n6.0\n3\n\nSample Input 4:\n1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4\nSample Output 4:\n4.0\n3\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"6.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"6.0\\n3\"\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\\n\") == \"6.0\\n3\"\n\n\"\"\""
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '4.0\\n3'\n\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '6.0\\n3'\n\nassert solution('''2 2\n2 3\n1 2\n3 1\n1 2\n1 1''') == '0.5\\n2'\n\nassert solution('''1 1\n2\n3 1\n1 2\n1 1''') == '1.0\\n0'\n\nassert solution('''0 0\n3 1\n4\n3 2\n3 3\n3 4''') == '4.0\\n0'"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4') == '4.0\\n3'\nassert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4') == '6.0\\n3'\nassert solution('3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\\n') == '6.0\\n3'\nassert solution('3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\\n') == '6.0\\n3'\n\n\"\"\"\n\nimport sys\n\nline1 = sys.stdin.readline()\nline2 = sys.stdin.readline()\nline3 = sys.stdin.readline()\nline4 = sys.stdin.readline()\nline5 = sys.stdin.readline()\n\nvertices = tuple(map(int, line1.split()))\nN = int(line2)\n\ntrees = []\nfor i in range(N):\n    trees.append(tuple(map(int, line3.split())))\n\nprint(vertices)\nprint(N)\nprint(trees)\n\nprint(trees[0])\n\nprint(vertices[0], vertices[1])\n\nprint(vertices[0] * (vertices[1] - trees[0][1])) + vertices[1] * (trees[0][0] - vertices[0]) + vertices[2] * (\n        vertices[0] - trees[0][0])\n\nprint(round(abs(vertices[0] * (vertices[1] - trees[0][1]) + vertices[1] * (trees[0][0] - vertices[0]) + vertices[2] * (\n        vertices[0] - trees[0][0])) / 2, 1))\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"6.0\\n3\"\nassert solution(\"2 2\\n4 4\\n1 1\\n1 2\") == \"1.0\\n2\"\nassert solution(\"1 1\\n3 1\\n5 1\\n3 3\\n5 3\\n7 3\\n9 3\\n11 3\") == \"7.0\\n0\"\nassert solution(\"1 1\\n3 1\\n5 1\\n3 3\\n5 3\\n7 3\\n9 3\\n11 3\") == \"13.0\\n4\"\n\n\"\"\"\n\nimport math\nimport sys\n\nn, m, p = [int(i) for i in sys.stdin.readline().split()]\nl = []\nl.append([int(i) for i in sys.stdin.readline().split()])\nl.append([int(i) for i in sys.stdin.readline().split()])\nl.append([int(i) for i in sys.stdin.readline().split()])\nans = 0\nfor i in range(m):\n    x, y = [int(j) for j in sys.stdin.readline().split()]\n    a = (l[0][1] - y) * (l[2][0] - l[0][0]) - (l[2][1] - l[0][1]) * (l[0][0] - x)\n    b = (l[1][1] - y) * (l[2][0] - l[1][0]) - (l[2][1] - l[1][1]) * (l[1][0] - x)\n    c = (l[0][1] - y) * (l[1][0] - l[0][0]) - (l[1][1] - l[0][1]) * (l[0][0] - x)\n    d = (l[0][1] - y) * (l[1][0] - l[0][0]) - (l[1][1] - l[0][1]) * (l[0][0] - x)\n    if a >= 0 and b >= 0 and c >= 0 and d >= 0:\n        ans += 1\n    if a <= 0 and b <= 0 and c <= 0 and d <= 0:\n        ans += 1\nprint('{:.1f}'.format(math.fabs(ans * 2 / (n * p))))\nprint(ans)\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\") == \"4.0\\n1\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4 4\") == \"8.0\\n1\"\n\nprint(solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\"))\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == '4.0\\n3'\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == '6.0\\n3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"6.0\\n3\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\n\nassert solution('30') == '7'\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\""
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\"\"\"\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == 2\nassert solution(\"30\") == 7\n\"\"\"\n\nimport math"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3''') == '2'\nassert solution('''30''') == '7'\nassert solution('''10''') == '2'\nassert solution('''944''') == '32'\n'''\n\nfrom math import sqrt\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\\n1\\n1\\n1\\n0\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n\nprint(solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\"))\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\\n2\\n3\\n4\\nHE GOT AWAY!\"\n\"\"\""
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1') == '1\\n'\nassert solution('N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1') == 'HE GOT AWAY!\\n'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\\nHE GOT AWAY!\"\n\"\"\"\n\nimport sys\nfrom typing import List, NamedTuple\n\n\nclass Blimp(NamedTuple):\n    code: str\n    row: int\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1') == '1\\n'\nassert solution('N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1') == 'HE GOT AWAY!\\n'\n\"\"\""
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1') == '1\\n9\\n3'\nassert solution('N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1') == 'HE GOT AWAY!'\nprint(solution(input()))\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'HE GOT AWAY!'\nassert solution('N-FBI1 9A-USKOK I-NTERPOL G-MI6 RF-KGB1') == '1'\nassert solution('N321-CIA F3-B12I F-BI-12 OVO-JE-CIA KRIJUMCAR1') == 'HE GOT AWAY!'\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\\n\") == \"1\\n\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\\n\") == \"HE GOT AWAY!\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == '1'\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == 'HE GOT AWAY!'\n\n\"\"\"\n\nimport collections\nimport re"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3 2\\n3 5 7') == '11.08567'\nassert solution('4 2 2\\n3 5 7') == '9.15185'\nassert solution('4 5 4\\n3 5 7') == '6.843530573929037'\n\n\"\"\"\n\n\"\"\"\nimport math\n\nfrom typing import List, NamedTuple\n\nfrom icontract import require, ensure\n\n\nclass Triangle(NamedTuple):\n    a: float\n    b: float\n    c: float\n\n    @require(lambda a, b, c: a + b > c)\n    @require(lambda a, b, c: a + c > b)\n    @require(lambda a, b, c: b + c > a)\n    def compute_area(self) -> float:\n        s = (self.a + self.b + self.c) / 2\n        return math.sqrt(s * (s - self.a) * (s - self.b) * (s - self.c))\n\n\n@ensure(lambda result: result >= 0)\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n3 3 3\\n4 5 4\") == '6.843530573929037'\n\"\"\""
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3 3 3\\n4 5 4\") == \"8.0\"\nassert solution(\"2\\n3 3 3\\n4 4 5\") == \"6.843530573929037\"\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('3\\n4\\n5') == '6.843530573929037'\n\"\"\"\nfrom math import sqrt\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 2\\n1 2 3\\n\") == \"8.0\"\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 3\\n4 5 4\") == '8.0'\nassert solution(\"2\\n3 3 3\\n4 5 4\") == '6.843530573929037'\n\"\"\"\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n3 3 3\\n4 5 4') == '6.843530573929037'\n\"\"\""
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 3\\n4 5 4') == '6.843530573929037'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('4') == '1.0'\nassert solution('3 1') == '0.6'\nassert solution('1 1 1') == '1.0'\nassert solution('2 2 1') == '0.4'\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n3 3 3\\n4 5 4') == '8.0'\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\"\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(24) == 24\nassert solution(25) == 27\n\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\nassert solution(\"100000000\") == \"100000000\"\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\"\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(24) == 24\nassert solution(25) == 27\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\"\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(24) == 24\nassert solution(25) == 27\nprint(\"Successfully passed all tests.\")\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4+1+9+8+4') == '188'\nassert solution('1+9+8+4+1+9+8+4+1+9+8+4') == '188'\nassert solution('1+9+8+4+1+9+8+4+1+9+8+4+1+9+8+4') == '188'\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4+1+9+8+4+1+9+8+4\") == \"188\"\n\"\"\"\n\nimport random"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\nprint(solution(input()))\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\n\"\"\"\n\n\nclass DPG:\n    def __init__(self, inp: str):\n        self.__inp = inp.replace(' ', '')\n\n    def solve(self) -> int:\n        ints = self.__inp.split('+')\n        ints = [int(i) for i in ints if i.isdigit()]\n\n        return len(set(ints))\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1+9+8+4') == 7\n\"\"\"\n\nimport collections\nimport random\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+2+3+4+5+6+7+8+9') == '188'\nassert solution('1+9+8+4') == '7'\n\"\"\"\nimport sys"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\""
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 5 2\\n\") == \"2 5\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 5 2\\n') == '2 5'\n\"\"\""
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 5 2') == '2 5'\nassert solution('2 2 -4 5') == '5 -2 4'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\nassert solution(\"3 -7 0 0 3 0 0 0\") == \"0 -7 3 0 0 0 0 0 0 0 0 0\"\nassert solution(\"4 0 -2 0 -5 2 1\") == \"5 -2 1\"\nassert solution(\"5 0 -5 -9 -8 -5 -1\") == \"9 -8 -1\"\n\"\"\""
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 -4 5\") == \"5 -2 4\"\nassert solution(\"2 3 -4 5\") == \"5 -2 4\"\nassert solution(\"3 3 5\") == \"5 0 0\"\nassert solution(\"3 2 4\") == \"4 3 0\"\nassert solution(\"3 3 -5\") == \"5 0 -5\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"3 2 1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"2 1\"\nassert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"1 5 2\") == \"2 5\"\n\"\"\"\n\nimport sys\nfrom typing import List\n\nsys.path.append('../')\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\""
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5 2\\n2 2 -4 5\") == \"2 5\"\nassert solution(\"2 2 -4 5\\n2 2 -4 5\") == \"5 -2 4\"\n\"\"\""
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\\n\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\\n\") == \"1 1 1 3 3 3 2 2 2\""
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n2 1 2 1 2') == '2 2 2 1 1'\nassert solution('9 3\\n1 3 3 3 2 2 2 1 1') == '1 1 1 3 3 3 2 2 2'\n\"\"\""
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a) == b\n\"\"\"\n\n\nimport sys\nimport unittest\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n2 1 2 1 2') == '2 2 2 1 1'\nassert solution('9 3\\n1 3 3 3 2 2 2 1 1') == '1 1 1 3 3 3 2 2 2'\n\"\"\"\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n2 1 2 1 2\n''') == '''\n2 2 2 1 1\n'''\n\nassert solution('''\n1 1 1 1 1\n''') == '''\n1 1 1 1 1\n'''\n\nassert solution('''\n2 1 2 1 2\n''') == '''\n2 2 2 1 1\n'''\n\nassert solution('''\n1 1 1 1 1\n''') == '''\n1 1 1 1 1\n'''\n\nassert solution('''\n2 1 2 3 4\n''') == '''\n2 1 3 4 2\n'''"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1 2 1 2') == '2 2 2 1 1'\nassert solution('9 3') == '1 1 1 3 3 3 2 2 2'\n\nprint('Success')\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\\n\") == \"2 2 2 1 1\"\n\n\"\"\"\n\nfrom typing import List, Tuple\nimport sys\n\n_, length, _, *values = sys.stdin.readlines()\n\nvalues = [int(v) for v in values]\ncounts = dict()\n\nfor v in values:\n    if v in counts:\n        counts[v] += 1\n    else:\n        counts[v] = 1\n\ncounts = dict(sorted(counts.items(), key=lambda kv: kv[1]))\n\nresult: List[int] = list()\n\nfor key, value in counts.items():\n    result += [key] * value\n\nprint(' '.join(str(v) for v in result))\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\""
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"\n\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('38 24') == '875'\nassert solution('1 100') == '100'\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('38 24') == '875'\nassert solution('1 100') == '100'\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 50\") == \"1\"\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430 3. \u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n\u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 - \u043d\u0430\u0439\u0442\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 $n$ \u0438 $m$ ($1 \\leq n, m \\leq 10^5$) \u2014 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u0437\u0430\u0434\u0430\u044e\u0449\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 $n$ \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0447\u0438\u0441\u043b\u0430 $a_k$, $k = 1, \\ldots, n$, \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u2014 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e\u0438\u0441\u043a\u0430.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u0438 \u043d\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439 \u043d\u0430 \u0432\u0440\u0435\u043c\u044f.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\n\u0412\u0432\u043e\u0434    \u0412\u044b\u0432\u043e\u0434\n5 6\n1 5 8 7\n3 4 1 2\n2 3 7 9\n8 5 8 2\n4 9 1 2\n3 5 1 2\n\n2\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430 4. \u0422\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440\n\u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 - \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u043a\u0430\u043a\u043e\u0439 \u0443 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d \u043d\u043e\u043c\u0435\u0440 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u043e\u0434 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $n$ ($1 \\leq n \\leq 50$), \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0435\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b, \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0430, \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0435 \u0432 \u0441\u0435\u0431\u044f \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0435 \u0441\u043b\u0435\u0448\u0438 \u0438 \u0441\u0438\u043c\u0432\u043e\u043b \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u0438. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 $n$ \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u043f\u043e\u043b\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u043f\u0435\u0440\u0435\u0434 \u043a\u0430\u0436\u0434\u044b\u043c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0435\u0439. \u041e\u0434\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u0430 $\\\\.$ \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0435. \u0412\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0435 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440\u0430 \u0432 \u043b\u044e\u0431\u043e\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435. \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435\n\u041f\u0435\u0440\u0432\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u043d\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430 \u043f\u043e \u043b\u0435\u0432\u043e\u043c\u0443 \u043a\u0440\u0430\u044e. \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432\u044b\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u043d\u0438\u0435 \u043f\u043e \u043f\u0440\u0430\u0432\u043e\u043c\u0443 \u043a\u0440\u0430\u044e. \u0412 \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u0435. \u0412 \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432\u044b\u0447\u0438\u0442\u0430\u043d\u0438\u0435. \u0412 \u043f\u044f\u0442\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u0435\u043b\u0435\u043d\u0438\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u0443\u044e \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440\u043e\u043c. \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u0440\u0430"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"38 24\") == \"875\"\nassert solution(\"1 100\") == \"100\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"38 24\") == \"875\"\nprint(solution(\"38 24\"))"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('38 24') == '875'\nprint(solution(input()))\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"38 24\"\n) == \"875\"\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"38 24\") == \"875\"\nassert solution(\"1 100\") == \"100\"\n\"\"\"\n\n\na, b = [int(i) for i in stdin.split()]\nprint(b // a + b % a)\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"38 24\") == \"875\"\n\"\"\"\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('32 7') == '9'\nassert solution('10 23') == '9'\nassert solution('1 100') == '100'\n\"\"\"\n\n\"\"\"\nThe mathematical formula:\nThe impact factor of a scientific journal is a measure reflecting the average number of citations to articles published in science journals. For this task we are using a simplified formula for calculating the impact factor:\\[ \\frac{\\text {Total count of citations received by articles published in the journal}}{\\text {Total number of articles published}} \\]\n\nRounding is always performed upwards. For example the impact factor of the \u201cJournal for ore research and time wasting\u201d that published $38$ articles cited $894$ times is $894 / 38 = 23.53$ rounding up to $24$.\n\nYou are the editor of one scientific journal. You know how many articles you are going to publish and the owners are pushing you to reach a specific impact factor. You are wondering how many scientists you will have to bribe to cite your articles to meet the owners demands. Since money is tight you want to bribe the minimal amount of scientists. Each bribed scientist buys you a single citation.\n\n-----Input-----\nFirst and only line of input will contain $2$ integers, $A$ ($1 \\leq A \\leq 100$), the number of articles you plan to publish and $I$ ($1 \\leq I \\leq 100$), the impact factor the owners require.\n\n-----Output-----\nThe first and only line of output should contain one integer, the minimal number of scientists you need to bribe.\n\n-----Examples-----\nSample Input 1:\n38 24\nSample Output 1:\n875\n\nSample Input 2:\n1 100\nSample Output 2:\n100\n\"\"\"\n\na, i = list(map(int, input().split()))\nprint(a // i + a % i)\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\nassert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\nassert solution(\"734 893\") == \"437\"\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n\"\"\"\n\n\"\"\"\nHint 1\nWrite a function:\n\nint solution(int A, int B)\n\nthat, given two three-digit numbers, $A$ and $B$, returns 1 if $A$ is larger than $B$ and returns 0 if $A$ is smaller than $B$.\n\nWrite a test for this function, comparing the returned values with the expected ones.\n\n\"\"\""
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n\"\"\""
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n\"\"\"\n\na, b = [int(i) for i in input().split()]\nprint(max(a, b)) if a > b else print(max(b, a))\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\nassert solution(\"5 5\") == \"5\"\nassert solution(\"2546 4981\") == \"981246\"\nassert solution(\"2486 4542\") == \"45422486\"\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n\"\"\""
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n\"\"\""
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(734 893) == 437\nassert solution(221 231) == 132\n\"\"\""
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n\"\"\"\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n\"\"\"\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\n\n\"\"\"\nimport re"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\nassert solution(\"13 116\") == \"impossible\"\nassert solution(\"6 96\") == \"impossible\"\nassert solution(\"10 123\") == \"impossible\"\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_01) == test_output_01\nassert solution(test_input_02) == test_output_02\n\n----Constraints----\n1 \\le l \\le 40\n1 \\le w \\le 1000\n\n\"\"\"\n\nl, w = input().split()\nl = int(l)\nw = int(w)\n\nd = dict()\nfor i in range(1, 27):\n    d[i] = chr(ord('a') + i - 1)\n\nfor i in range(1, 26):\n    d[26 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[27 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[28 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[29 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[30 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[31 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[32 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[33 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[34 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[35 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[36 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[37 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[38 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[39 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[40 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[41 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[42 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[43 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[44 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[45 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[46 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[47 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[48 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[49 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[50 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[51 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[52 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[53 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[54 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[55 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[56 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[57 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[58 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[59 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[60 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[61 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[62 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[63 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[64 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[65 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[66 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[67 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[68 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[69 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[70 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[71 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[72 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[73 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[74 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[75 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[76 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[77 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[78 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[79 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[80 + i] = chr(ord('a') + i)\n\nfor i in range(1, 27):\n    d[81 + i] = chr(ord('a') + i)\n\nfor"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\nprint(solution(\"11 131\"))\nprint(solution(\"7 96\"))\n\"\"\""
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11 131') == 'programming', 'error'\nassert solution('7 96') == 'contest', 'error'\nassert solution('4 97') == 'impossible', 'error'\n\n\"\"\"\n\nimport sys\n\nl, w = [int(x) for x in sys.stdin.readline().strip().split()]\n\nletters = dict()\n\nfor letter in range(ord('a'), ord('z') + 1):\n    letters[letter - ord('a')] = chr(letter)\n\nfor word in range(ord('a'), ord('z') + 1):\n    letters[word - ord('a')] = chr(word)\n\nfor i in range(ord('a'), ord('z') + 1):\n    letters[i - ord('a')] = chr(i)\n\nfor i in range(ord('0'), ord('9') + 1):\n    letters[i - ord('0')] = chr(i)\n\nanswer = list()\n\nfor word in range(1, l + 1):\n    for letter in letters:\n        if letters[letter] * word <= w:\n            answer.append(letters[letter] * word)\n            w -= letters[letter] * word\n            break"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\nprint('All tests passed.')\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\nassert solution('3 1') == 'impossible'\n\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\n\"\"\"\n\nfrom itertools import combinations\n\nl, w = input().split()\nl, w = int(l), int(w)\n\ndict = {}\nfor i in range(1, l+1):\n    for j in range(1, 26+1):\n        dict[str(i) + str(j)] = (i, j)\n\nfor k in combinations(dict.keys(), l):\n    if sum(dict[x] for x in k) == (w, w):\n        print(''.join(k))\n        break\nelse:\n    print('impossible')\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11 131') == 'programming', solution('11 131')\nassert solution('7 96') in {'contest', 'contests'}, solution('7 96')\nassert solution('5 5') == 'impossible'\nassert solution('2 5') == 'impossible', solution('2 5')\nassert solution('3 5') in {'possible', 'impossible'}, solution('3 5')\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2 \"X\"'\n) == '\\n.X\\n--'\nassert solution('3 12 \"A\"'\n) == '\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB'\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 'X'\") == \"XX\\nX \"\nassert solution(\"3 12 'A'\") == \"ABABABABABAC\\nBABABABABABB\\nABABABABABAB\\nBABABABABABA\\nBBABABABABAB\\nBABABABABABA\""
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 'X'\") == \".X\"\nassert solution(\"3 12 'A'\") == \"ABABABABABAC\"\nassert solution(\"2 10 'X'\") == \"BBABABABABAC\"\nassert solution(\"1 4 'X'\") == \"X^\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 'X'\\nX^\\n--\\n\\n.X\\n--\\n\") == \".^\\n--\\n\\n\"\nassert solution(\"3 12 'A'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\") == \"BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n\"\n\"\"\""
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(sample_stdin_1) == sample_stdout_1\nassert solution(sample_stdin_2) == sample_stdout_2\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '', 'Parsing error'\nassert solution('2 2 X') == 'X\\nX\\n', 'String parse error'\nassert solution('1 1 A') == 'A', 'String parse error'\nassert solution('2 2 X\\nA^') == 'X\\n.\\n', 'String parse error'\nassert solution('2 2 X\\nA^B') == 'X\\n.\\n', 'String parse error'\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2 \\'X\\nX^\\n--\\n\\n.X\\n--') == '.^\\n--'\n\"\"\"\n\nimport re\nimport sys\nimport copy\n\ninput_regex = re.compile(r'(\\d+)\\s+(\\d+)\\s+(\\S)\\n(\\S+)')"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_data.get(\"Sample Input 1\")) == test_data.get(\"Sample Output 1\")\nassert solution(test_data.get(\"Sample Input 2\")) == test_data.get(\"Sample Output 2\")\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 'X'\\nX^\\n--\\n\\n.X\\n--\") == \".^\\n--\"\nassert solution(\"3 12 'A'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\") == \"BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n\"\n\"\"\""
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 \"X\"\\nX^\\n--\\n\\n.X\\n--') == '\\n.^\\n--\\n\\n'\n\nassert solution('3 12 \"A\"\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n') == '\\nBBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n'\n\n\"\"\"\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\n\"\"\"\n\nfrom itertools import permutations\nfrom math import factorial\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 4 14\") == \"\"\"1 0 3\n1 1 2\n1 2 1\n1 3 0\n3 0 2\n3 1 1\n5 0 1\n5 1 0\n7 0 0\"\"\"\n\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n\"\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 4 14\") == \"\"\"1 0 3\n1 1 2\n1 2 1\n1 3 0\n3 0 2\n3 1 1\n5 0 1\n5 1 0\n7 0 0\"\"\"\n\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n\"\n\"\"\"\nA farm consists of a single row of chickens, dogs, cows, sheep, pigs, and birds that have equal number of legs. The farm is perfect if the number of legs of the number of chickens is equal to the number of pigs, the number of pigs is equal to the number of cows, the number of cows is equal to the number of sheep, the number of sheep is equal to the number of dogs, and the number of dogs is equal to the number of chickens.\n\nYour task is to help Theta, who is investigating this farm. He has a bird of the family Farm given in the list. Find the possible ways to put the animals on a farm, so that Theta can find out if he has given the farm to the right family.\n\nExample\n\nFor farm = [1, 2, 1, 2], the output should be\npossibleFarm(farm) = 3.\n\nIt is possible to put 2 chickens and 1 pig on the farm, 1 chicken and 2 pigs on the farm, 2 chickens and 1 pig on the farm, or 3 chickens and 1 pig on the farm.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer farm\n\nAn array that contains the number of legs of the farm animal on the farm.\n\nGuaranteed constraints:\n1 \u2264 farm.length \u2264 10,\n1 \u2264 farm[i] \u2264 10.\n\n[output] array.integer\n\nThe number of ways that the farm can be arranged.\n\"\"\""
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4 4 14') == '1 0 3'\nassert solution('100 80 60 240') == '0 0 4'\nassert solution('100') == 'impossible'\nassert solution('0 100') == 'impossible'\nassert solution('1 1 2') == '1 1 2'\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 4 14\") == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\nassert solution(\"100 80 60 240\") == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\n\nimport re"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n3 0 2\\n5 0 1\\n7 0 0\"\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\\n'\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n3 0 2\\n5 0 1\\n7 0 0\\n'\nassert solution('2 4 4 20') == '1 0 2\\n1 1 1\\n1 2 0\\n2 0 1\\n3 0 0\\n5 0 1\\n7 0 0\\n'\nassert solution('0 5 4 0') == 'impossible\\n'\nassert solution('0 0 0 0') == 'impossible\\n'\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 4 4 14''') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\nassert solution('''100 80 60 240''') == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\nassert solution('''1 1 1''') == '0 0 0'\nassert solution('''100 100 100''') == 'impossible'\nassert solution('''101 101 101''') == 'impossible'\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0'\nassert solution('100 80 60 240') == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0'\nassert solution('50 50 50 100') == '0 0 0'\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"good job\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n14\") == \"1\\n3\\n6\\n12\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n14\\n15\") == \"1\\n3\\n6\\n12\\n14\"\n\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\") == \"good job\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\") == \"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\""
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"good job\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"1\\n3\\n6\\n12\"\nassert solution(\"3\\n1\\n2\\n3\") == \"1\\n2\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n5\") == \"6\"\nassert solution(\"9\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\") == \"10\\n12\\n14\"\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n') == 'good job'\n\"\"\"\n\nn = int(stdin.readline())\narr = []\n\nfor i in range(n):\n    arr.append(int(stdin.readline()))\n\narr.sort()\n\nlast = arr[n-1]\n\nfor i in range(n):\n    if arr[i]!= last:\n        print(arr[i])\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"good job\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"1\\n3\\n6\\n12\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"1\\n3\\n6\\n12\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"1\\n3\\n6\\n12\"\n\n\"\"\""
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13') == 'good job'\nassert solution('9\\n10\\n11\\n13') == '1\\n3\\n6'\nassert solution('9\\n10\\n11\\n13\\n14') == '1\\n2\\n3\\n5\\n6\\n7\\n12'\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1\\n2\\n3') == '4\\n5'\nassert solution('5\\n1\\n2\\n3\\n4\\n5') == '1\\n7'\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'good job'\nassert solution('2\\n1') == '1\\n2'\nassert solution('9\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9') == '1\\n3\\n6\\n12'\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == \"good job\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n\") == \"1\\n3\\n6\\n12\\n15\\n18\\n21\\n24\\n27\\n30\\n33\\n36\\n39\\n42\\n45\\n48\\n51\\n54\\n57\\n60\\n63\\n66\\n69\\n72\\n75\\n78\\n81\\n84\\n87\\n90\\n93\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\") == \"good job\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\") == \"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 8.9 40075000 272.1') == '157079.04857106 15.598261092309'\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 8.9 40075000 272.1') == '157079.04857106 15.598261092309'\n\"\"\"\n\nfrom math import sqrt, log\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == '157079.04857106 15.598261092309'\n\"\"\"\n\nimport math\n\nn, p, s, v = list(map(float, input().split()))\n\nc = math.sqrt(2) * (p / 10 ** 9) / (n * (math.log(n) ** (c * math.sqrt(2))))\nprint(\"{:.6f} {:.6f}\".format(s * (1 + 1/c) / v, c))\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 8.9 40075000 272.1') == '157079.04857106 15.598261092309'\n\"\"\"\n\nimport math\n\nfrom typing import Union\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '4'\nassert solution('4') == '10'\n\"\"\"\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\nassert solution('3') == '4'\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '4'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0') == '1'\nassert solution('1') == '0'\nassert solution('2') == '2'\nassert solution('3') == '4'\nassert solution('4') == '6'\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '5'\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '0'\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '0'\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '4'\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\nA\\nA\\nA\\nA') == 3\nassert solution('4\\nB\\nB\\nB\\nB') == 0\nassert solution('4\\nB\\nA\\nB\\nB') == 0\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == 3\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\n\") == '3'\nassert solution(\"1\\nA\\n\") == '1'\n\n\"\"\""
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == \"3\"\nassert solution(\"4\\nC\\nC\\nC\\nC\") == \"0\"\nassert solution(\"4\\nA\\nB\\nC\\nD\") == \"1\"\n\"\"\""
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A\\nA\\nA\\nA\") == 3\nassert solution(\"A\\nB\\nA\\nA\") == 3\nassert solution(\"B\\nA\\nA\\nA\") == 3\nassert solution(\"C\\nA\\nA\\nA\") == 2\nassert solution(\"D\\nA\\nA\\nA\") == 1\n\"\"\""
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == 3\n\"\"\""
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\nA\nA\nA\nA''') == 3\nassert solution('''3\nB\nC\nA''') == 1\nassert solution('''2\nB\nC\nA''') == 0\nassert solution('''5\nA\nA\nA\nA\nA''') == 5\nassert solution('''4\nA\nA\nA\nA''') == 4\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A B A B A\\n\" \"A B A C A\\n\" \"A A A B A\\n\" \"B B A A A\\n\") == 3\n\"\"\""
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABD\") == \"2\"\nassert solution(\"AAB\") == \"0\"\nassert solution(\"BAA\") == \"1\"\nassert solution(\"BAB\") == \"0\"\nassert solution(\"BABB\") == \"1\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\nprint(solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\"))\nassert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\nassert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\nassert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\nassert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"...xx..\\nxx..xx\\n..xx..\\n\"\nassert solution(\"3 3 1 2\\nxx\\nxx\\nxx\") == \"...xx..\\nxx..xx\\n..xx..\\n\"\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\nassert solution(\"4 4 2 2\\n.x.\\n.xx\\n.x.\\nx.x\\n\") == \"..xx..\\n..xx..\\n.xx.x\\n..xx..\\n..xx..\"\nassert solution(\"5 5 2 1\\n.x.\\n.x.\\n.x.\\nx.x\\n.x.\\n\") == \"..xx..\\n..xx..\\n..xx..\\n..xx..\\n..xx..\\n..xx..\"\nassert solution(\"5 5 1 1\\n.x.\\n.x.\\n.x.\\nx.x\\n.x.\\n\") == \"..xx..\\n..xx..\\n..xx..\\n..xx..\\n..xx..\\n..xx..\"\nassert solution(\"3 5 4 1\\n..x.\\n.xx\\n.x.\\nx.x\\n\") == \"..xx..\\n..xx..\\n..xx..\\n..xx..\\n..xx..\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\n\"\"\"\n\nimport sys\nimport numpy as np\nfrom io import StringIO"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\".x.\\nx.x\\n.x.\") == \".xx.\\nxx.x\\n.xx.\"\n\n-----Explanation-----\nMirko is using a 3 x 3 scanner, so he is scanning the first three lines of the article.\n\nMirko scans the first line from the left to the right, and when the scan encounters the character \u2018.\u2019, it replaces it with a 1 x 1 matrix with a single entry.\n\nMirko scans the second line from the left to the right, and when the scan encounters the character \u2018x\u2019, it replaces it with a 2 x 2 matrix with a single entry in the center.\n\nMirko scans the third line from the left to the right, and when the scan encounters the character \u2018.\u2019, it replaces it with a 1 x 1 matrix with a single entry.\n\nMirko has enlarged the article to:\n\n.xx.\nxx.x\n.xx.\nThe enlarged article can be written as a single line of string:\n\n.xx.\nxx.x\n.xx.\n\n------\nSample Input:\n3 3 2 3\n.x.\nxx.x\n.x.\nSample Output:\n..xx..\nxx..xx\n..xx..\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 1 2\\n.x.\\nx.x\\n.x.') == '..xx..\\nxx..xx\\n..xx..'\n\"\"\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 1 3\\n.x\\nx.x\\n.x\\n\") == \"...xx..\\nxx..xx\\n...xx..\\n\"\nassert solution(\"4 2 2 1\\n.x\\nx.x\\n.x\\nx.\\n\") == \"...xx..\\nxx..xx\\n...xx..\\nxx..xx\\nxx..\\n\"\nassert solution(\"4 2 2 1\\n.x\\nxx\\n.x\\n\") == \"...xx..\\nxx..xx\\n...xx..\\nxx..\\n\"\nassert solution(\"4 3 2 2\\n.x\\nx.x\\n.x\\nx.\\n\") == \"...xx..\\nxx..xx\\n...xx..\\nxx..xx\\nxx..xx\\n\"\nassert solution(\"3 3 1 1\\n.x\\nx.x\\n.x\\n\") == \"...xx..\\nxx..\\n...xx..\\nxx..\\n\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 3 1 2\n.x.\nx.x\n.x.''') == '..xx..\\nxx..xx\\n..xx..'\nassert solution('''3 3 1 2\n..x..\nx.x.\n..x..''') == '..xxx..\\nxxx..xx\\n..xxx..'\nassert solution('''3 3 1 2\n...x...\n...x...\n...x...''') == '...xxx...\\n...xxx...\\n...xxx...'\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\\n\", \"Test 1\"\nassert solution(\"3 3 1 2\\n....\\n....\\n....\") == \"....\\n....\\n....\\n\", \"Test 2\"\nassert solution(\"3 3 1 2\\n..x.\\nx.x\\n.x.\") == \"..x.\\nx.x\\n..x.\\n\", \"Test 3\"\nassert solution(\"3 3 1 2\\nx.\\nx.\\nx.\") == \"x.\\nx.\\nx.\\n\", \"Test 4\"\nprint(\"The local tests are done.\")\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"B 99 7 21\") == \"2 10\"\nassert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"B 99 7 21\") == \"2 10\""
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\n\n\"\"\""
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\n\nprint(solution(\"F 60 13 20\"))\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('F 60 13 20') == '14 20'\n\nassert solution('B 20 30 40') == '16 40'\n\nassert solution('B 20 40 50') == '16 46'\n\nassert solution('B 20 40 60') == '16 48'\n\nassert solution('F 60 13 20') == '14 20'"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('F 60 13 20') == '14 20'\nassert solution('F 8 13 20') == '9 20'\nassert solution('B 36 42 11') == '3 57'\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n1\nF 60 13 20\n''') == '14 20'\n\nassert solution('''\n2\nB 13 20 15\nF 60 13 20\n''') == '8 50'\nassert solution('''\n3\nF 60 13 20\nF 60 13 20\nB 17 1 10\n''') == '8 50'\n\nassert solution('''\n1\nF 60 13 20\n''') == '14 20'\n\nassert solution('''\n2\nF 60 13 20\nF 60 13 20\n''') == '14 20'"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\n\"\"\"\n\n\n\n\"\"\"\nGiven a clock time in the format of \"HH:MM\" (e.g., \"12:30\"), return the time in the next day (next day on the clock) in the format of \"HH:MM\".\n\nExample:\n\nGiven time = \"19:34\", return \"09:34\".\n\nGiven time = \"20:34\", return \"10:34\".\n\"\"\""
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\n\nassert solution(\"B 20 43 1\") == \"1 1\"\n\nassert solution(\"B 20 -43 1\") == \"-38 -2\"\n\nassert solution(\"F 60 13 42\") == \"22 36\"\n\nassert solution(\"F 60 13 -42\") == \"18 8\""
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n\"\"\"\n\nfrom datetime import datetime as dt\nfrom datetime import timedelta as td\nimport math\n\nDAY_IN_SECONDS = 86400\nHOURS_IN_DAY = 24"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\n\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('OCT 31') == 'yup'\n\n\"\"\"\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('NOV 25') == 'nope'\n\"\"\"\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('OCT 30') == 'nope'\n\"\"\""
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('OCT 31') == 'yup'\n\"\"\""
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"SEP 2\") == \"nope\"\nassert solution(\"FEB 10\") == \"nope\"\nassert solution(\"NOV 21\") == \"nope\"\nassert solution(\"SEP 30\") == \"nope\"\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('SEP 17') == 'nope'\n\n'''"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"SEP 1\") == \"nope\"\nassert solution(\"JAN 1\") == \"nope\"\nassert solution(\"NOV 2\") == \"nope\"\n\n-----Explanation-----\nThe first test is a positive case where the date is valid and the server should print out yup.\nThe other tests are negative cases where the server should print out nope.\n\"\"\""
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('OCT 31') == 'yup'\n\"\"\"\n\nfrom datetime import datetime\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"JAN 1\") == \"nope\""
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nera\\nirak\") == \"#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#\"\n\n---\nSample Input:\n6 3\n1 1 1 1\nhoni\noker\nnera\nirak\nhoni\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak') == '#.#.#.#\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.'\n\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak'\n) == '#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#'\n\"\"\"\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\\n\") == \"\"\"#.#.#.#.\n.#.#.#.#\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\nhoni\\noker\\nnera\") == \"#.#.#.#\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.\"\n\nSample Input:\n4 4\n2 2 2 2\nhoni\noker\nnera\nirak\nSample Output:\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == '#.#.#.#\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#'\n\"\"\""
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \\\n\"#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#\"\n\nsolution(stdin.readlines())\n\"\"\"\nimport sys\nfrom pprint import pprint"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nera\\nirak\") == \"#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#\"\n\"\"\"\n\nimport sys\nimport math\n\nsys.stdin = open('../../input/p1810')"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('honi\\noker\\nnera') == '#.#.#.#\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#.#.#.#\\n#.#.#.#.#'\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\") == \"#.#.#.#\\n#.honi#\\n#.oker#\\n#.nera#\\n#.irak#\\n#.#.#.#\\n#.#.#.#\"\n\n\"\"\""
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == '+---+---+---+---+---+---+---+---+'\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == '+---+---+---+---+---+---+---+---+'\n\"\"\"\n\nimport re\nfrom typing import Iterator, List, Match, NamedTuple, Optional, Tuple\n\nfrom icontract import DBC, ensure, snapshot\n\nWITH_PIECE_REGEX = re.compile(r\"\\s*(.+?): (.+?)\\s+\")\nPIECE_REGEX = re.compile(r\"\\s*(.+?)\\s+\")\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"White:Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack:Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"Black:Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"White:Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack:Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"Black:Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"White:Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack:Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"Black:Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"White:Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack:Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"Black:Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"White:Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack:Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"Black:Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\n\"\"\"\n\nimport string\nimport re\nfrom typing import Optional, Dict, Union, Callable, List\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n\n\"\"\"\n\n\nimport re"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\"\") == \"\"\"+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\"\"\"\n\n\"\"\"\n    White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\n    Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\n\nassert solution(\n\"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\"\") == \"\"\"+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\"\"\"\n\n\"\"\"\n    White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\n    Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\n\n\"\"\"\n    White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\n    Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\n\n\"\"\"\n    White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\n    Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == '+---+---+---+---+---+---+---+---+\\n|r.|:::|b.|:q:|k.|:::|n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|p.|p.|p.|p.|p.|p.|:::|p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+'\n\n\"\"\"\n\nimport unittest\nfrom typing import List\n\nclass TestFizzBuzz(unittest.TestCase):\n    def test_input_1(self):\n        output = solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\")\n        self.assertEqual(output, \"+---+---+---+---+---+---+---+---+\\n|r.|:::|b.|:q:|k.|:::|n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|p.|p.|p.|p.|p.|p.|:::|p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\")\n\n    def test_input_2(self):\n        output = solution(\"White: Qg7,Qh7,Kh7,Kg7,Qf7,Qe7,Kf7,Kc7,Qd7,Qc7,Qb7,Qa7,Kb6,Qb6,Qa6,Kb5,Qb5,Qa5,Kb4,Qb4,Qa4,Kb3,Qb3,Qa3,Kb2,Qb2,Qa2,Kb1,Qb1,Qa1\\nBlack: Kg2,Kh2,Kf2,Kd2,Kc2,Kb2,Ka2,Kc1,Kd1,Ke1,Kf1,Kg1,Kh1,Ka1,Kc3,Kd3,Ke3,Kf3,Kg3,Kh3,Ka3,Kc4,Kd4,Ke4,Kf4,Kg4,Kh4,Ka4,Kc5,Kd5,Ke5,Kf5,Kg5,Kh5,Ka5,Kc6,Kd6,Ke6,Kf6,Kg6,Kh6,Ka6,Kc7,Kd7,Ke7,Kf7,Kg7,Kh7,Ka7,Kc8,Kd8,Ke8,Kf8,Kg8,Kh8,Ka8,Kc9,Kd9,Ke9,Kf9,Kg9,Kh9,Ka9,Kc10,Kd10,Ke"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\n) == \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\n\n---\nGotcha:\n\nThe str.split method splits a string by the specified separator,\nand splits the results into a list of substrings.\nThe str.join method takes a list of strings as its argument,\nand returns a string of these strings joined by the separator.\n\n\"\"\"\n\n\nimport re\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\n\"\n                 \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \\\n                 \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\n\" \\\n                 \"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\n) == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n) == \":p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\n) == \"+---+---+---+---+---+---+---+---+\"\nassert solution(\"Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n) == \":p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\"\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\n) == \"+---+---+---+---+---+---+---+---+\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"White: Kd1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,Kd2,Qd2,Ra2,Rh2,Bc2,Bf2,Nb2,Kd3,Qd3,Ra3,Rh3,Bc3,Bf3,Nb3,Kd4,Qd4,Ra4,Rh4,Bc4,Bf4,Nb4,Kd5,Qd5,Ra5,Rh5,Bc5,Bf5,Nb5,Kd6,Qd6,Ra6,Rh6,Bc6,Bf6,Nb6,Kd7,Qd7,Ra7,Rh7,Bc7,Bf7,Nb7,Kd8,Qd8,Ra8,Rh8,Bc8,Bf8,Nb8\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"White: Kd1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,Kd2,Qd2,Ra2,Rh2,Bc2,Bf2,Nb2,Kd3,Qd3,Ra3,Rh3,Bc3,Bf3,Nb3,Kd4,Qd4,Ra4,Rh4,Bc4,Bf4,Nb4,Kd5,Qd5,Ra5,Rh5,Bc5,Bf5,Nb5,Kd6,Qd6,Ra6,Rh6,Bc6,Bf6,Nb6,Kd7,Qd7,Ra7,Rh7,Bc7,Bf7,Nb7,Kd8,Qd8,Ra8,Rh8,Bc8,Bf8,Nb8\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"White: Kd1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,Kd2,Qd2,Ra2,Rh2,Bc2,Bf2,Nb2,Kd3,Qd3,Ra3,Rh3,Bc3,Bf3,Nb3,Kd4,Qd4,Ra4,Rh4,Bc4,Bf4,Nb4,Kd5,Qd5,Ra5,Rh5,Bc5,Bf5,Nb5,Kd6,Qd6,Ra6,Rh6,Bc6,Bf6,Nb6,Kd7,Qd7,Ra7,Rh7,Bc7,Bf7,Nb7,Kd8,Qd8,Ra8,Rh8,Bc8,Bf8,Nb8\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"White: Kd1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,Kd2,Qd2,Ra2,Rh2,Bc2,Bf2,Nb2,Kd3,Qd3,Ra3,Rh3,Bc3,Bf3,Nb3,Kd4,Qd4,Ra4,Rh4,Bc4,Bf4,Nb4,Kd5,Qd5,Ra5,Rh5,Bc5,Bf5,Nb5,Kd6,Qd6,Ra6,Rh6,Bc6,Bf6,Nb6,Kd7,Qd7,Ra7,Rh7,Bc7,Bf7,Nb7,Kd8,Qd8,Ra8,Rh8,Bc8,Bf8,Nb8\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\nassert solution(\"White: Kd1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,Kd2,Qd2,Ra2,Rh2,Bc2,Bf2,Nb2,Kd3,Qd3,Ra3,Rh3,Bc3,Bf3,Nb3,Kd4,Qd4,Ra4,Rh4,Bc4,Bf4,Nb4,Kd5,Qd5,Ra5,Rh5,Bc5,Bf5,Nb5,Kd6,Qd6,Ra6,Rh6,B"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"0.1 5.3\") == \"Need more materials!\"\nassert solution(\"1.3 1.3\") == \"Diablo is happy!\"\nassert solution(\"0.01 1.3\") == \"Need more materials!\"\n\n\"\"\""
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"1.0000000 4.0000000\") == \"Need more materials!\"\nassert solution(\"0.010000 4.100010\") == \"Need more materials!\"\nassert solution(\"0.010000 0.100010\") == \"Diablo is happy!\"\nassert solution(\"1.000000 1.000000\") == \"Diablo is happy!\"\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1.0 4.0') == 'Diablo is happy!'\nassert solution('1.0 4.0')!= 'Need more materials!'\n\"\"\""
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1.0 4.0\") == \"Diablo is happy!\"\nassert solution(\"1.1 4.0\") == \"Need more materials!\"\n\n-------------\nSample Input:\n10.0 100.0\nSample Output:\nNeed more materials!\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1.000000) == \"Diablo is happy!\"\nassert solution(1.000000) == \"Need more materials!\"\nassert solution(5.000000) == \"Diablo is happy!\"\nassert solution(5.000000) == \"Need more materials!\"\n\n\"\"\""
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.0 4.0\") == \"Diablo is happy!\"\nassert solution(\"5.0 10.0\") == \"Need more materials!\"\n\"\"\"\n\nA, N = map(float, input().split())"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('1.050000 4.1') == 'Need more materials!'\nassert solution('1.072106 4.112') == 'Diablo is happy!'\nassert solution('1.097140 4.112') == 'Need more materials!'\nassert solution('1.103470 4.112') == 'Diablo is happy!'\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"0.200000 4.000000\") == \"Need more materials!\"\n\n-----Explanation-----\nSample input:\n1.000000 4.000000\n\nSample output:\nDiablo is happy!\n\nThe first line tells us the dimensions of the area of the cage that Anthony needs to build. The second line contains the dimensions of the space in which he has to hide Diablo.\n\nThe output is trivial, but if you consider that there is always a fractional number of meters of fence left over after cutting, then the area of the new, smaller cage must be equal to $A$ exactly.\n\nThe example on the right is the example from the description. If Anthony has $4m$ meters of fence that he can cut/bend at any point, then by cutting a fence of area $0.25m^2$ (the length of the fence left over after cutting) and bending it vertically at the middle, he can make a cage of area $0.5m^2$. This new cage is $0.5m^2$ larger than the original one, so it is possible to fit in the original space.\n\nSample input:\n0.200000 4.000000\n\nSample output:\nNeed more materials!\n\nThe example on the right tells us that the minimum area of the cage is $0.2m^2$ but the length of the fence left over is $4m$. The area of the new cage cannot be larger than the area of the original one by more than $0.2m^2$.\n\nSample input:\n1.000000 4.000000\n\nSample output:\nDiablo is happy!\n\nThe area of the new cage must be $1.0m^2$ exactly, because the length of the fence left over after cutting is $0.0m$.\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"4.000000 6.000000\") == \"Need more materials!\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1.0 4.0\") == \"Diablo is happy!\"\nassert solution(\"1.1 4.0\") == \"Need more materials!\"\nassert solution(\"1.0 4.1\") == \"Diablo is happy!\"\nassert solution(\"1.1 4.1\") == \"Need more materials!\"\nassert solution(\"1.1 4.2\") == \"Diablo is happy!\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''1\n10\n10\n2\n1\n''') == 'use the stairs'\nassert solution('''10\n10\n1\n0\n1\n''') == 'use the stairs'\nassert solution('''10\n10\n1\n0\n1\n''') == '6'\nassert solution('''10\n10\n10\n10\n10\n''') == 'use the stairs'\nassert solution('''100\n100\n1000\n100\n10\n''') == 'use the stairs'\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''10 1 10 2 1''') == 'use the stairs'\nassert solution('''10 1 10 2 1\n''') == 'use the stairs'\nassert solution('''10 1 10 2 1\n''') == 'use the stairs'\nassert solution('''10 1 10 2 1\n''') == 'use the stairs'\nassert solution('''10 1 10 2 1\n''') == 'use the stairs'\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 1 10 2 1\") == \"use the stairs\"\nassert solution(\"10 1 20 2 1\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 1 10 2 1') == '6'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"10 1 10 2 100\") == \"use the stairs\"\nassert solution(\"1000 1 1000 1000 1001 1000\") == \"use the stairs\"\nassert solution(\"5 1 5 2 2\") == \"2\"\nassert solution(\"1 1 1 1 1\") == \"use the stairs\"\n\n\"\"\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"10 2 10 3 1\") == \"use the stairs\"\nassert solution(\"10 1 10 3 1\") == \"use the stairs\"\nassert solution(\"5 3 6 1 3\") == \"4\"\nassert solution(\"10 2 10 3 1\") == \"use the stairs\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\n\n-------\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 1 10 2 1') == 'use the stairs'\nassert solution('10 1 10 1 1') == 'use the stairs'\nassert solution('10 1 10 1 2') == '4'\nassert solution('10 1 10 2 1') == '5'\nassert solution('10 1 10 2 2') == '4'\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"10 3 4 1 2\") == \"use the stairs\"\n\nSolution Explanation:\n\nSince we can only go up or down, we can reduce the problem to deciding whether or not we can get to the goal floor using only one step. With 10 floors, we can take 3 steps to get to the goal floor, so we return 3.\n'''"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\n\"\"\"\n\nimport numpy as np\n\nf, s, g, u, d = [int(el) for el in stdin.split()]"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == '128.8'\nprint(\"Passed!\")\n\n\"\"\"\n\nimport sys\n\nn = int(input())\nscores = [int(i) for i in sys.stdin.read().split('\\n')]\nscores.sort(reverse=True)\nscores.append(0)\nscore_sum = 0\nfor i in range(1, len(scores)):\n    score_sum += scores[i] * ((4 * i) // 5)\nprint(score_sum / n)"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\\n89.06666666666666\"\nprint(solution(\"3\\n500\\n120\\n75\"))\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\\n89.06666666666666\"\nprint(solution(stdin))\n\n-----Notes-----\nWhen a student leaves your university, you don\u2019t want to change the group score for your university. Your goal is to calculate the average group score if one student leaves.\n\"\"\"\n\nimport math"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\\n89.06666666666666\"\nassert solution(\"1\\n2\") == \"3.0\"\nassert solution(\"0\\n1\") == \"1.0\"\n\"\"\""
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == '128.8'\n\"\"\"\n\nfrom __future__ import division\nimport sys\n\nn = int(sys.stdin.readline())\nlst = list(map(int, sys.stdin.readline().split()))\nsum_score = sum(lst)\nscore = [sum_score]\nfor i in range(1, n):\n    score.append(score[i-1] + lst[i-1] * (1 / 5) * (4 / 5) ** i)\navg_score = [i / n for i in score]\navg_score.sort(reverse=True)\nprint(avg_score[0])\n\nassert avg_score[0] - (1 / 5) * (4 / 5) ** 4 <= 10 ** -6\nassert avg_score[1] - (1 / 5) * (4 / 5) ** 3 <= 10 ** -6\nassert avg_score[2] - (1 / 5) * (4 / 5) ** 2 <= 10 ** -6\nassert avg_score[3] - (1 / 5) * (4 / 5) <= 10 ** -6\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\"\n\"\"\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\\n89.06666666666666\"\nassert solution(\"2\\n1\\n10\") == \"5.0\\n4.666666666666667\"\n\"\"\"\n\nn = int(input())\nlst = []\nfor i in range(n):\n    lst.append(int(input()))\nlst.sort()"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n10\\n20\\n\") == \"40.0\"\n\"\"\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == \"128.8\"\n\"\"\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2\\n4\\n1\\n3\\n7\") == '16.8\\n13.0'\nassert solution(\"1\\n100\") == '101.0'\nassert solution(\"7\\n1\\n2\\n3\\n4\\n5\\n6\\n7\") == '42.8\\n0.8'\nassert solution(\"1\\n1\\n1\") == '2.0\\n0.0'\nassert solution(\"1\\n100\\n100\\n100\\n100\\n100\\n100\\n100\\n100\") == '200.0\\n0.0'\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 45 65 84 346') == '4'\nassert solution('4\\n1 45 65 84') == '0'\nassert solution('1\\n1') == '0'\nassert solution('0\\n') == '0'\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\nprint(solution(input()))\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\nassert solution(\"10\\n1 9 6 3 6 8 5 5 4 10\") == \"3\"\nassert solution(\"1\\n5\") == \"0\"\n\"\"\""
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 45 65 84 346') == '4'\nassert solution('3\\n1 2 3') == '0'\n'''\n\n'''\nMy solution is to loop through each day."
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '5\\n1 45 65 84 346'\n) == '4'\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n\"\"\""
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 45 65 84 346') == '4'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == '4'\n\"\"\"\n\n\"\"\"\nTry to figure out how many cleanup phases are needed to make the pile of dirty pushes below $20$. For example, if the input is $d_1 = 1$, $d_2 = 2$, $d_3 = 5$, $d_4 = 4$, and $d_5 = 3$, then the pile of dirty pushes looks like this:\n\nday 6: 1 2 3 5 4\nday 7: 1 2 3 4 5\nday 8: 1 2 3 4 5\nday 9: 1 2 3 4 5\nday 10: 1 2 3 4 5\nday 11: 1 2 3 4 5\nday 12: 1 2 3 4 5\n\nSo, there are 4 cleanup phases needed to make the pile of dirty pushes below $20$.\n\"\"\"\n\n\"\"\"\nYou are given a string $s$ and two integers $l$ and $r$. You are allowed to substitute no more than $l$ characters and at most $r$ characters in $s$ with any lowercase English letter.\n\nFind the length of the longest substring in $s$ resulting from this operation.\n\nIt is guaranteed that the answer fits in a 32-bit integer.\n\n-----Input-----\nThe first line of the input contains a single string $s$ to be processed. The second line contains $l$ and $r$, both numbers not exceeding $|s|$.\n\n-----Output-----\nPrint the length of the longest substring resulting from the substitution operations.\n\n-----Examples-----\nSample Input:\ncbaebabacd\n2 2\nSample Output:\n5\n\"\"\""
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\nassert solution(\"4\\n1 45 65 84 346\") == \"4\"\nassert solution(\"3\\n1 45 65 84 346\") == \"4\"\nassert solution(\"2\\n1 45 65 84 346\") == \"4\"\nassert solution(\"1\\n1 45 65 84 346\") == \"4\"\n\"\"\"\n\nn = int(input())\ndays = list(map(int, input().split()))"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 45 65 84 346') == '4'\nprint(solution(stdin.strip()))\n\n------Hints------\n\n------Solutions------\n\"\"\"\n\nimport collections\nimport math\nimport sys"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n7 4\n#######\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('ab') == ''\nassert solution('Ab') == ''\nassert solution('BA') == ''\nassert solution('aB') == ''\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\nSolution:\n\nimport sys\n\nw, h = map(int, sys.stdin.readline().split())\ngold, traps = [], []\nfor i in range(h):\n    line = sys.stdin.readline()\n    for j in range(w):\n        if line[j] == 'P':\n            player_i, player_j = i, j\n        elif line[j] == 'G':\n            gold.append([i, j])\n        elif line[j] == 'T':\n            traps.append([i, j])\n\nfrom collections import deque\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 4\\n#####\\nT..#.\\nT..#.\\nT#T..\\n#####\") == \"4\"\nassert solution(\"6 4\\n#####\\nT..#.\\nT..#.\\nT#T..\\n#####\") == \"3\"\nassert solution(\"6 4\\n#T#.#\\nT#T.#\\nT#T.#\\nT#.#.\\n#####\") == \"1\"\nassert solution(\"6 4\\n#####\\nT#.#.\\nT#.#.\\nT#.#.\\nT#.#.\\n#####\") == \"4\"\nassert solution(\"6 4\\n#T#.G\\nT#T.#\\nT#.#.\\nT#.#.\\nT#.#.\\n#####\") == \"4\"\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == '1'\nprint(solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\"), '1')\n\"\"\"\nimport sys\n\ndimensions = input().split()\nwidth = int(dimensions[0])\nheight = int(dimensions[1])\n\nlayout = []\nfor i in range(height):\n    layout.append(list(input()))"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open(r'input.txt').readlines()) == open(r'output.txt').readline()\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n#######\\n#P.G#G.G#\\n#.T#.T#.\\n#T.T.G#.\\n#T.G#G#.\\n#G.G#G#G#\\n\") == \"2\"\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('.P#.#G.T#.#') == 2"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\nassert solution('10 10\\n...TTTTTTTTTTTTTTTTTTTTT\\nP.#T.TTTTTTTTTTTTTTTTTTTTTTTT\\n
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\n\"\"\"\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$__$$_____$_$___$___$__$__$_____$\\n_____$_$_________$_$_____$_$_________$_$_____$_$\\n____$___$______$___$____$___$______$___$____$\\n___$____$____$_____$___$____$____$_____$___\\n__$_____$___$_____$___$_____$___$_____$___\\n_$_____$___$_____$___$_____$___$_____$___\\n$_____$$_$$_____$$_$$_____$$_$$_____$$_\\n____$$___$_____$___$____$___$_____$___\\n___$____$____$_____$___$____$____$_____\\n__$_____$___$_____$___$_____$___$_____\\n_$_____$$_$$_____$$_$$_____$$_$$_____\\n$_____$$$_________$_________$__$$____\") == 5\n\nassert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$__$$_____$_$___$___$__$__$_____$\\n_____$_$_________$_$_____$_$_________$_$_____$_$\\n____$___$______$___$____$___$______$___$____$\\n___$____$____$_____$___$____$____$_____$___\\n__$_____$___$_____$___$_____$___$_____$___\\n_$_____$$$_________$_________$__$$$____\\n$_____$$$_________$_________$__$$$____\\n_$_____$_________$_________$__$$$____\\n$_____$$_________$_________$__$$$____\") == -5\n\nassert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$__$$_____$_$___$___$__$__$_____$\\n_____$_$_________$_$_____$_$_________$_$_____$_$\\n____$___$______$___$____$___$______$___$____$\\n___$____$____$_____$___$____$____$_____$___\\n__$_____$___$_____$___$_____$___$_____$___\\n_$_____$___$_____$___$_____$___$_____$___\\n$_____$$$_________$_________$__$$$____\\n____$$$_________$_________$__$$$____\\n___$____$_________$_________$__$$$____\\n__$_____$_________$_________$__$$$____\") == -10\n\nassert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == 5\n\"\"\""
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$') == '5'\n\nassert solution('5 3\\n____$$\\n____$$\\n___$$\\n_$$_\\n$$$') == '3'\n\nassert solution('5 5\\n_$$_\\n$$_\\n_$$\\n__$$\\n$$$') == '5'\n\nassert solution('5 5\\n_$$_\\n$$_\\n_$$\\n_$$\\n_$$') == '5'\n\nassert solution('13 50\\n_$$__$$\\n_$$__$$\\n_____$$\\n____$$$\\n___$$$\\n__$$$_\\n_$__$$\\n$$____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n$_____\\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\nprint(solution(stdin))\n\n-----Problem-----\n'''"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(sample_input) == sample_output\n\n----\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''13 50\n____$$$_______$$$______$$$________$$$______$$$____\n____$$$_______$$$______$$$________$$$______$$$____\n_____$_________$________$__________$________$_____\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\n_____$_$______$_$_____$_$_________$_$_____$_$_____\n____$___$____$___$____$___$______$___$____$___$___\n___$____$___$_____$___$____$____$_____$___$____$__\n__$_____$___$_____$___$_____$___$_____$___$_____$_\n__$_____$___$_____$___$_____$___$_____$___$_____$_\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\n''') == 5\n\nassert solution('''13 50\n____$$$_______$$$______$$$________$$$______$$$____\n____$$$_______$$$______$$$________$$$______$$$____\n_____$_________$________$__________$________$_____\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\n_____$_$______$_$_____$_$_________$_$_____$_$_____\n____$___$____$___$____$___$______$___$____$___$___\n___$____$___$_____$___$____$____$_____$___$____$__\n__$_____$___$_____$___$_____$___$_____$___$_____$_\n__$_____$___$_____$___$_____$___$_____$___$_____$_\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\n''') == 50\n\nassert solution('''5 6\n_$$$__$$_\n$__$____$_\n__$___$$$_\n__$__$$$_\n__$$___$$_\n$_$$____$_\n''') == 4\n\nassert solution('''4 4\n__$__$__\n__$__$__\n__$__$__\n__$__$__\n''') == 9\n\nassert solution('''5 4\n_____$__\n___$___$__\n_$_$__$__\n$__$__$__\n__$$__$__\n''') == 8"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''13 50\n____$$$_______$$$______$$$________$$$______$$$____\n____$$$_______$$$______$$$________$$$______$$$____\n_____$_________$________$__________$________$_____\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\n_____$_$______$_$_____$_$_________$_$_____$_$_____\n____$___$____$___$____$___$______$___$____$___$___\n___$____$___$_____$___$____$____$_____$___$____$__\n__$_____$___$_____$___$_____$___$_____$___$_____$_\n__$_____$___$_____$___$_____$___$_____$___$_____$_\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\n''') == 5, \"Wrong Answer\"\n\nNote: $ represents a dancer that is not seen in this position.\n\nExplanation: \n\nThe first line of the input represents the grid size, which is 13x50. The grid contains 13 rows and 50 columns.\n\nThe next 13 lines represent the grid, which is a sequence of strings. The strings denote the dancers.\n\nThe dance moves are described by a sequence of frames, where each frame is denoted by a column of the grid.\n\nThe dance moves consist of one or more consecutive frames that contain only the character \u2018_\u2019.\n\nThe dance moves may span multiple rows, for example, the dance moves may span rows 4, 5, and 7.\n\nThe dance moves also may be empty, for example, the dance moves may be empty on row 3.\n\nThe dance moves are listed in increasing order of the rating of the dance moves, i.e. the first dance moves is the best and the last dance moves is the worst.\n\nThe rating of the dance moves is calculated as the number of moves performed. For example, the rating of the dance moves on row 1 is the number of moves performed in row 1.\n\nThe rating of the dance moves is calculated as the number of moves performed. For example, the rating of the dance moves on row 1 is the number of moves performed in row 1.\n\n'''\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$_________$_$_________$_$_____$_$_________\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n') == 5\nprint('Test 1 successful.')\n\nassert solution('13 50\\n______$$$______$$$________$$$______$$$______$$$________$$$______\\n______$$$______$$$________$$$______$$$______$$$________$$$______\\n_____$_________$__________$________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$_________$_$_________$_$_____$_$_________\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\\n') == 5\nprint('Test 2 successful.')\n\nassert solution('13 50\\n__$$$_$___$$$_$_____$_$_$_$_____$_$_$_$_$_____$_$_\\n__$$$_$___$$$_$_____$_$_$_$_____$_$_$_$_$_____$_$_\\n_$$$_$___$$$_$_____$_$_$_$_____$_$_$_$_$_____$_$_\\n$___$$_$__$__$$$_____$_$_$_$_____$_$_$_$_$_____$_$_\\n$___$$_$__$__$$$_____$_$_$_$_____$_$_$_$_$_____$_$_\\n$_$$$_$$$$__$_____$_$_$_$_____$_$_$_$_$_____$_$_\\n$_____$_____$_____$_$_$_____$_$_$_$_____$_$_\\n$______$______$______$_$______$_$_$_______$_$_\\n$_____$_____$_____$_$______$_$_$_______$_$_\\n$_____$_____$_____$_$_______$_$_________$_\\n$_$$$______$______$_$_________$_$_________$_\\n') == 5\nprint('Test 3 successful.')\n\n\"\"\""
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____\\n\") == \"5\"\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\nassert solution('i cant speak') == 'iay ay nay oay sway'\nassert solution('i cant speak? i dont care') == 'iay ay nay oay sway? iay ay nay dway care'\nassert solution('i cant speak? i dont care! i cant speak? i dont care') == 'iay ay nay oay sway? iay ay nay dway care! iay ay nay dway care'\nassert solution('i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i cant speak! i dont care! i"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('ab') == 'abay'\nassert solution('a b') == 'abay'\nassert solution('a b c') == 'abay ceray'\n\n'''"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nassert solution(\"i can t speak pig latin\") == \"iay ay tay speakigpay\"\n\"\"\""
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\n\"\"\"\n\nimport sys\nimport re\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\n\nprint(solution('i cant speak pig latin'))\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\n------Hints------\nYou may find it useful to first write a function translate(word: str) -> str that translates a single word.\n\nYou may find it useful to write a function is_vowel(ch: str) -> bool that tests whether a character is a vowel.\n\nYou may find it useful to write a function ends_in_vowel(word: str) -> bool that tests whether a word ends in a vowel.\n\n\"\"\"\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\nimport sys"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nassert solution(\"i am a pig\") == \"iyay asmay aay ayay\"\nassert solution(\"hello\") == \"hayley\"\n\"\"\""
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\n\"\"\"\nimport re\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\n\"\"\""
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == \"Anywhere is fine I guess\"\nassert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == \"nymble\"\nassert solution('') == \"Anywhere is fine I guess\"\nassert solution('1\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == \"nymble\"\nassert solution('') == \"Anywhere is fine I guess\"\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n\"\"\") == \"nymble\"\nassert solution(\"\"\"1\n1\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n\"\"\") == \"Anywhere is fine I guess\"\nassert solution(\"\"\"1\n1\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n\"\"\") == \"nymble\"\nassert solution(\"\"\"1\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n\"\"\") == \"Anywhere is fine I guess\"\nassert solution(\"\"\"1\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n\"\"\") == \"nymble\"\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\\n1\\n2\\npea soup\\n3\\n3\\nnymble\\n4\\n3\\npancakes\") == \"nymble\"\nassert solution(\"\\n3\\n3\\npea soup\\n3\\n3\\nnymble\\n4\\n3\\npancakes\") == \"Anywhere is fine I guess\"\nassert solution(\"\\n2\\n3\\npea soup\\n3\\n3\\nnymble\\n4\\n3\\npancakes\") == \"Anywhere is fine I guess\"\nassert solution(\"\\n1\\n2\\npea soup\\n3\\n3\\nnymble\\n4\\n3\\npancakes\") == \"Anywhere is fine I guess\"\nassert solution(\"\\n1\\n2\\n3\\n3\\nnymble\\n4\\n3\\npancakes\") == \"Anywhere is fine I guess\""
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n') == 'nymble'\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution([\"potatoes\", \"salad\", \"3\", \"nymble\", \"pancakes\", \"pea soup\", \"punsch\"]) == \"nymble\"\n\"\"\""
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == 'nymble'\nassert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == 'Anywhere is fine I guess'\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"nymble\"\n\n-----Notes-----\nAssume you are in a country where there are no two restaurants having both \u201cpea soup\u201d and \u201cpancakes\u201d as menu items.\n\n\"\"\""
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == 'nymble'\nassert solution(\"1\\n1\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == 'Anywhere is fine I guess'\nassert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == 'nymble'\nassert solution(\"3\\n1\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == 'Anywhere is fine I guess'\nassert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == 'nymble'\n\nSample Input:\n2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\nSample Output:\nnymble\nnymble\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n') == 'nymble'\nassert solution('3\\nnymble\\npancakes\\npea soup\\npunsch\\n') == 'Anywhere is fine I guess'\nassert solution('4\\nnymble\\npancakes\\npea soup\\npunsch\\n') == 'nymble'\nassert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\n') == 'nymble'\nassert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\n') == 'nymble'\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"nymble\"\n\"\"\""
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 0 15') == 3\n\"\"\"\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 0 15\") == 3\n\n-----Solution-----\n\"\"\"\n\nimport math\n\na, b, h = map(int, input().split())\nprint(math.ceil((h - b) / (a - b)))\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 0 15') == '3'\n\nprint(solution(input()))\n\n\nSample Input:\n0 5 2\nSample Output:\n0\nassert solution('0 5 2') == '0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 0 15') == 3\n\"\"\"\n\nfrom collections import deque\nfrom math import inf"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 0 15') == 3\nassert solution('0 1 1000000000') == '1'\nassert solution('100 1000000000 1000000000') == '1'\nassert solution('1000 1000000000 1000000000') == '1'\nassert solution('10000 1000000000 1000000000') == '1'\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 0 15\") == 3\nprint(solution(\"5 0 15\"), 3)\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 0 15\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 0 15\") == 3\n\"\"\"\n\n\nfrom math import sqrt\nfrom functools import reduce\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 5 0\\n\") == \"3\"\nassert solution(\"5 0 1\\n\") == \"3\"\nassert solution(\"100 0 5\\n\") == \"5\"\nassert solution(\"2 1 2\\n\") == \"1\"\nassert solution(\"5 0 15\\n\") == \"3\"\n\nimport sys"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 0 15') == 3\n\"\"\"\n\nimport math\na, b, h = [int(i) for i in stdin.split(' ')]\n\ni = math.floor(h/a) - math.floor(b/a)\nprint(i)"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11 15') == '19'\n\nsolution()\n\n-----Solution-----\n\"\"\"\n\nr1, s = input().split()\nr1 = int(r1)\ns = int(s)\nprint(int((r1 + s) / 2))\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"11 15\"\"\"\n) == \"\"\"19\"\"\"\n\nprint(solution(input()))\n\n---"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 15\") == \"19\"\nprint(solution(\"11 15\"))"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11 15\") == \"19\"\n\n\"\"\"\n\na, b = map(int, input().split())\n\nprint(b-a)\n\n\"\"\"\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043e\u0434\u043d\u043e \u0438\u0437 \u0447\u0438\u0441\u0435\u043b, \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u0439 \u0441\u0440\u0435\u0434\u0438 \u044d\u0442\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u044d\u0442\u043e\u0442 \u0447\u0438\u0441\u043b\u043e\n\n-----Input-----\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n-----Output-----\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e.\n\n-----Examples-----\nSample Input:\n7\n10\nSample Output:\n2\n\n\"\"\"\n\na, b = int(input()), int(input())\nprint(a * b // gcd(a, b))\n\n\"\"\"\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u0435\u0435 \u0441\u0438\u043c\u0432\u043e\u043b \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u0435\u043c\u0443 \u043a\u043e\u0434 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 Unicode.\n\n-----Input-----\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430.\n\n-----Output-----\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0435\u043a\u0441\u0442 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438.\n\n-----Examples-----\nSample Input:\n\u041f\u0440\u0438\u0432\u0435\u0442\nSample Output:\nU+043F U+0440 U+0438 U+0432 U+043E U+0441 U+043A U+0438\n\n\"\"\"\n\nprint('U+' + ''.join(hex(ord(i))[2:] for i in input()))\n\n\"\"\"\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0443\u044e \u0438\u0437 \u0441\u043b\u043e\u0432, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438. \u041a\u0430\u0436\u0434\u043e\u0435 \u0441\u043b\u043e\u0432\u043e \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0445 \u0431\u0443\u043a\u0432 \u0432 \u043d\u0438\u0436\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0441\u0447\u0430\u0441\u0442\u043b\u0438\u0432\u044b\u0439 \u0431\u0438\u043b\u0435\u0442\u0438\u043a \u0438\u043b\u0438 \u043d\u0435\u0442. \u0421\u0447\u0430\u0441\u0442\u043b\u0438\u0432\u044b\u043c \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0442\u0430\u043a\u043e\u0439 \u0431\u0438\u043b\u0435\u0442\u0438\u043a, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0440\u043e\u0432\u043d\u043e \u0442\u0440\u0438 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0449\u0438\u0445 \u0446\u0438\u0444\u0440\u044b \u0432 \u043d\u043e\u043c\u0435\u0440\u0435 \u0431\u0438\u043b\u0435\u0442\u0430. \u0415\u0441\u043b\u0438 \u0442\u0430\u043a\u043e\u0439 \u0431\u0438\u043b\u0435\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442, \u0442\u043e \u043e\u043d \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435.\n\n-----Input-----\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435: \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043b\u043e\u0432\u0430, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438, \u0432\u0442\u043e\u0440\u0430\u044f \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432 \u0432 \u0431\u0438\u043b\u0435\u0442\u0435.\n\n-----Output-----\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0443 \u00ab\u0421\u0447\u0430\u0441\u0442\u043b\u0438\u0432\u044b\u0439\u00bb, \u0435\u0441\u043b\u0438 \u0431\u0438\u043b\u0435\u0442 \u0441\u0447\u0430\u0441\u0442\u043b\u0438\u0432\u044b\u0439, \u0438 \u00ab\u041e\u0431\u044b\u0447\u043d\u044b\u0439\u00bb \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\n-----Examples-----\nSample Input:\n\u041c\u043e\u043b\u043e\u043a\u043e \u043d\u0430 \u043b\u0438\u043d\u0438\u0438 \u0432\u0437\u044f\u043b\u0438 \u043f\u0440\u0438 \u0447\u0435\u043c \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043e\u0442\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043c\u043e\u043b\u043e\u043a\u043e\n4\nSample Output:\n\u041e\u0431\u044b\u0447\u043d\u044b\u0439\n\n\"\"\"\n\nprint('\u0421\u0447\u0430\u0441\u0442\u043b\u0438\u0432\u044b\u0439' if int(input()) == 3 or input() == '\u041c\u043e\u043b\u043e\u043a\u043e \u043d\u0430 \u043b\u0438\u043d\u0438\u0438 \u0432\u0437\u044f\u043b\u0438 \u043f\u0440\u0438 \u0447\u0435\u043c \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043e\u0442\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043c\u043e\u043b\u043e\u043a\u043e' else '\u041e\u0431\u044b\u0447\u043d\u044b\u0439')\n\n\"\"\"\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0443\u044e \u0438\u0437 \u0441\u043b\u043e\u0432, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438. \u041a\u0430\u0436\u0434\u043e\u0435 \u0441\u043b\u043e\u0432\u043e \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0445 \u0431\u0443\u043a\u0432 \u0432 \u043d\u0438\u0436\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u0431\u0443\u043a\u0432 \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\">4 2<\") == \">4 2<\"\nassert solution(\"10 14<\") == \"11\"\nassert solution(\"10 15<\") == \"11\"\nassert solution(\"4 3<\") == \"4 3<\"\nassert solution(\"6 3<\") == \"6 3<\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''11 15''') == '19'\n\n\"\"\"\n\nr1, s = map(int, input().split())\n\nprint(s + r1)"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11 15') == '19'\nprint(solution('11 15'))\n\n'''"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''11 15\n''') == 19\nprint(solution(stdin) == 19)\n\n-----\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n779\n780\n781\n782\n783\n784\n785\n786\n787\n788\n789\n790\n791\n792\n793\n794\n795\n796\n797\n798\n799\n800\n801\n802\n803\n804\n805\n806\n807\n808\n809\n810\n811\n812\n813\n814\n815\n816\n817\n818\n819\n820\n821\n822\n823\n824\n825\n826\n827\n828\n829\n830\n831\n832\n833\n834\n835\n836\n837\n838\n839\n840\n841\n842\n843\n844\n845\n846\n847\n848\n849\n850\n851\n852\n853\n854\n855\n856\n857\n858\n859\n860\n861\n862\n863\n864\n865\n866\n867\n868\n869\n870\n871"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(11 15) == 19\n\"\"\"\n\nimport sys\n\nnums = list(map(int, sys.stdin.readline().split()))\nprint((nums[0]+nums[1])//2)"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"South East West\") == \"No\"\n\"\"\""
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    'South West East'\n) == 'Yes'\nassert solution(\n    'North East South'\n) == 'No'\n\"\"\""
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('East South East') == 'No'\nassert solution('North West South') == 'No'\nassert solution('South West West') == 'No'\nassert solution('East West East') == 'No'\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    'South West East'\n) == 'Yes'\nassert solution(\n    'East West South'\n) == 'Yes'\nassert solution(\n    'North West South'\n) == 'No'\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"West East South\") == \"No\"\nassert solution(\"South East West\") == \"No\"\nassert solution(\"North East South\") == \"No\"\nassert solution(\"North West South\") == \"Yes\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"South East West\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"North West South\") == \"No\"\nassert solution(\"North East South\") == \"Yes\""
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"South East West\") == \"No\"\nassert solution(\"West North East\") == \"Yes\"\nassert solution(\"East North West\") == \"No\"\n\"\"\""
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"South West East\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('East West South') == 'No'\n\"\"\""
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 16\\na again\\npirpumsemoystoal\") =='marywasnosyagain'\n\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\nmessage = sys.stdin.readline().strip()\nkey = sys.stdin.readline().strip()\n\nkey_a = ''.join([chr((ord(key[i]) - ord('a')) % 26 + ord('a')) for i in range(n)])\n\nmessage_a = ''.join([chr((ord(message[i]) - ord('a')) % 26 + ord('a')) for i in range(n)])\n\ncipher = [ord(message_a[i]) - ord(key_a[i]) % 26 + ord('a') for i in range(n)]\n\nprint(''.join([chr(i) for i in cipher]))"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 16\\naagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open('./sample_input.txt').read()) == open('./sample_output.txt').read()\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\na = list(sys.stdin.readline().strip())\nb = list(sys.stdin.readline().strip())\n\nc = [ord(i) - 97 for i in a]\n\ncnt = 0\nfor i in range(n):\n    for j in range(n):\n        if c[i] == b[j]:\n            c[i] += n\n            cnt += 1\n            break\n\nfor i in range(n):\n    c[i] -= n + cnt\n    c[i] %= 26\n\nprint(''.join([chr(i + 97) for i in c]))\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 16\nagain\npirpumsemoystoal''') =='marywasnosyagain'\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 16\nagain\npirpumsemoystoal\n''') =='marywasnosyagain'\n\n---\n\nJohn likes simple ciphers. He had been using the \u201cCaesar\u201d cipher to encrypt his diary until recently, when he learned a hard lesson about its strength by catching his sister Mary browsing through the diary without any problems.\n\nRapidly searching for an alternative, John found a solution: the famous \u201cAutokey\u201d cipher. He uses a version that takes the $26$ lower-case letters \u2018a\u2019\u2013\u2018z\u2019 and internally translates them in alphabetical order to the numbers $0$ to $25$.\n\nThe encryption key $k$ begins with a secret prefix of $n$ letters. Each of the remaining letters of the key is copied from the letters of the plaintext $a$, so that $k_{n+i} = a_{i}$ for $i \\geq 1$. Encryption of the plaintext $a$ to the ciphertext $b$ follows the formula $b_ i = a_ i + k_ i \\bmod 26$.\n\nMary is not easily discouraged. She was able to get a peek at the last $n$ letters John typed into his diary on the family computer before he noticed her, quickly encrypted the text document with a click, and left. This could be her chance.\n\n-----Input-----\nThe input consists of:\n - One line with two integers $n$ and $m$ ($1 \\le n \\le 30$, $n + 1 \\le m \\le 100$), where $n$ is the length of the keyword as well as the number of letters Mary saw, and $m$ is the length of the text.\n - One line with $n$ lower-case letters, the last $n$ letters of the plaintext.\n - One line with $m$ lower-case letters, the whole ciphertext.\n\n-----Output-----\nOutput the plaintext of John\u2019s diary.\n\n-----Examples-----\nSample Input:\n5 16\nagain\npirpumsemoystoal\nSample Output:\nmarywasnosyagain\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 16\\naeagqepgwzmbpcxndmfjgjjhnqbqjryhfnrx\\npepgqrbrjnfhymqjdznpovjcbpktptxydb\") == \"marywasnosyagain\"\nassert solution(\"5 16\\nabbhjzxmsvbvgcswxzqbtfynnrqclpevqvqvs\") == \"onegoofdoww\"\nassert solution(\"5 16\\nabjgkxzlfvbhzqrjmjkpvnzdjmqzmwvnx\") == \"yyzdfhjytznzzjmzefjdnmzewxfbmtqw\"\nassert solution(\"5 16\\nabcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\n\n\"\"\"\nimport math\n\nn, m = list(map(int, input().split(' ')))\n\na = input()\na = ''.join(a.split('\\n')[:-1])\n\nc = input()\nc = ''.join(c.split('\\n')[:-1])\n\nres = []\nfor i in range(n):\n    res.append(chr(math.ceil(ord(a[i]) - ord('a') + ord(c[i]) - ord('a')) % 26 + ord('a')))\n\nprint(''.join(res))"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a) == b\nprint(solution(a), end=\"\")\n'''"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 16\\nagain\\npirpumsemoystoal') =='marywasnosyagain'"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '6 12\\n'\n    'hrmvfeahcwnqjxzpyaihjbcrmpywpzjjpwvkfjdvtppf\\n'\n    'bqplnysrnzybzdapmhzrtkxmjmniznbswlufpmztugpqf'\n) =='marywasnosyagain'\nprint(\"All test cases passed!\")\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"Odd\"\nassert solution(\"2\") == \"Even\"\nassert solution(\"3\") == \"Odd\"\nassert solution(\"4\") == \"Even\"\nassert solution(\"5\") == \"Odd\"\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Even'\nassert solution('3') == 'Odd'\nassert solution('4') == 'Even'\nassert solution('5') == 'Odd'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == 'Odd'\nassert solution('10') == 'Even'\nassert solution('11') == 'Odd'\n\n\"\"\"\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == 'Odd'\nassert solution('2') == 'Even'\nassert solution('3') == 'Odd'\nassert solution('4') == 'Even'\nassert solution('5') == 'Odd'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Even'\nassert solution('4') == 'Odd'\nassert solution('5') == 'Even'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Even'\nassert solution('4') == 'Even'\nassert solution('5') == 'Odd'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == 'Either'\nassert solution('10') == 'Odd'\n\"\"\""
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == 'Odd'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Even'\nassert solution('4') == 'Even'\nassert solution('5') == 'Odd'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"Odd\"\nassert solution(\"2\") == \"Either\"\nassert solution(\"3\") == \"Odd\"\n\"\"\""
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Either'\nassert solution('4') == 'Even'\nassert solution('5') == 'Either'\n\"\"\"\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\nassert solution(\"6\\n4823452354234\\n8\\n56\\n0\\n1\\n3\") == \"5\\n5\\n6\\n8\\n6\"\n\nimport io\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_simple(self):\n        stdin = io.StringIO(\"5\\n314\\n1\\n5926\\n5\\n35897\")\n        expected = \"3\\n1\\n4\\n1\\n5\"\n        actual = solution(stdin)\n        self.assertEqual(expected, actual)\n\n    def test_big_number(self):\n        stdin = io.StringIO(\"10\\n515\\n100\\n908\\n50\\n806\\n10\\n999\\n0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\")\n        expected = \"9\\n8\\n8\\n8\\n8\\n8\\n7\\n7\\n7\\n7\\n7\\n7\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == '3\\n1\\n4\\n1\\n5'\nassert solution(\"1\\n10\\n10\\n10\\n10\") == '1\\n3\\n2\\n1\\n2'\n\nimport io\nimport os\nimport unittest\nfrom contextlib import redirect_stdout\nfrom unittest.mock import patch\n\n\nclass TestQ(unittest.TestCase):\n    def test_Q(self):\n        for i in range(1, 7):\n            stdin = io.StringIO(f\"{i}\\n314\\n1\\n5926\\n5\\n35897\")\n            with patch('builtins.input', side_effect=stdin.readline):\n                with redirect_stdout(io.StringIO()) as stdout:\n                    main()\n                    stdout = stdout.getvalue()\n                    self.assertEqual(stdout, f\"{i}\\n{i}\\n{i}\\n{i}\\n{i}\\n\")\n        stdin = io.StringIO(\n            \"3\\n5\\n3\\n10\\n3\\n20\\n3\\n100\\n3\\n20\\n4\\n10\\n4\\n20\\n4\\n100\\n4\\n1000\\n4\\n1000\\n\"\n            \"5\\n1000\\n5\\n100\\n5\\n100\\n6\\n100\\n6\\n1000\\n6\\n1000\\n7\\n100\\n7\\n1000\\n7\\n\"\n            \"1000\\n8\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10\\n10"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\nassert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\nassert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\nassert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n\n-----\nSample Input:\n15\n97312\n98712\n97312\n98712\n97312\n98712\n97312\n98712\n97312\n98712\n97312\n98712\n97312\n98712\n97312\n98712\n97312\n98712\n97312\n98712\n97312\n98712\n97312\n97312\n98712\n97312\n98712\n97312\n97312\n98712\n97312\n97312\n97312\n98712\n97312\n97312\n98712\n97312\n97312\n97312\n97312\n97312\n98712\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n98712\n97312\n97312\n97312\n97312\n98712\n97312\n97312\n97312\n97312\n97312\n97312\n98712\n97312\n97312\n97312\n97312\n97312\n97312\n98712\n97312\n97312\n97312\n97312\n97312\n98712\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n98712\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n98712\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n97312\n973"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\nassert solution(\"1\\n0\") == \"1\\n0\"\nassert solution(\"3\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n\"\"\""
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\nassert solution('7\\n55555555\\n11111111\\n11111111\\n55555555\\n55555555\\n55555555\\n11111111\\n11111111\\n55555555') == '3\\n4\\n4\\n4\\n5\\n5\\n5\\n5\\n5'\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == '3\\n1\\n4\\n1\\n5'\nprint('Test pass.')\n\n-----\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\n\"\"\"\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\nassert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\\n\") == \"3\\n1\\n4\\n1\\n5\"\nassert solution(\"1\\n314\\n1\\n5926\\n5\\n35897\") == \"1\\n1\\n4\\n1\\n5\"\nassert solution(\"1\\n314\\n1\\n5926\\n5\\n35897\\n\") == \"1\\n1\\n4\\n1\\n5\"\nassert solution(\"0\") == \"0\"\n\"\"\""
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\nprint(solution(input()))\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\\n\") == \"3\\n1\\n4\\n1\\n5\"\n\"\"\"\n\nfrom io import StringIO\n\nstdin_test_1 = \"\"\"\n5\n314\n1\n5926\n5\n35897\n\"\"\"\n\nstdin_test_2 = \"\"\"\n1\n0\n10\n2\n9\n\"\"\"\n\nstdin_test_3 = \"\"\"\n9\n7\n2\n0\n1\n3\n5\n7\n9\n9\n9\n\"\"\""
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('9 5\\nc t\\ni r\\nk p\\no c\\r o\\n\\n\\n\\nt e\\n t f\\nu h\\n w p\\nwe we\\ncan the\\nwork people\\nit of\\nout the') == 'yes\\nno\\nno\\nyes\\nyes\\nyes\\nyes\\nyes'\nassert solution('9 5\\nh h\\nk k\\nh h\\nh h\\nh h\\n\\n\\n\\nt a\\nt a\\n\\n\\n\\nt a\\nt a\\n\\n\\n\\nt a\\nt a\\n\\n\\n\\nt a\\nt a\\n\\n\\n\\nt a\\nt a') == 'yes\\nyes'\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 5\\n\"\n\"c t\\n\"\n\"i r\\n\"\n\"k p\\n\"\n\"o c\\n\"\n\"r o\\n\"\n\"t e\\n\"\n\"t f\\n\"\n\"u h\\n\"\n\"w p\\n\"\n\"we we\\n\"\n\"can the\\n\"\n\"work people\\n\"\n\"it of\\n\") == \"yes\\nno\\nno\\nyes\\nyes\\n\"\n\"\"\""
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 5\\nt c\\ni r\\nk p\\no c\\r o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\\n') == 'no\\nyes\\nno\\nyes\\nyes\\nyes\\nyes'\nprint(\"Test finished\" if solution('9 5\\nt c\\ni r\\nk p\\no c\\r o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the\\n') == 'no\\nyes\\nno\\nyes\\nyes\\nyes\\nyes' else \"Failed\")\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\nassert solution('aba') == 'aba'\nassert solution('ababa') == 'aba'\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''9 5\nc t\ni r\nk p\no c\nr o\nt e\nt f\nu h\nw p\nwe we\ncan the\nwork people\nit of\nout the''') == '''yes\nno\nno\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\nyes\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9 5\\n'\n                 'c t\\n'\n                 'i r\\n'\n                 'k p\\n'\n                 'o c\\n'\n                 'r o\\n'\n                 't e\\n'\n                 't f\\n'\n                 'u h\\n'\n                 'w p\\n'\n                 'we we\\n'\n                 'can the\\n'\n                 'work people\\n'\n                 'it of\\n'\n                 'out the\\n') == 'yes\\n' * 5 + 'no\\n' * 4 + 'no\\n' + 'yes\\n' * 3 + 'yes\\n' + 'no\\n' + 'yes\\n' + 'yes\\n' + 'no\\n' + 'yes\\n' * 2 + 'no\\n' * 2 + 'yes\\n' * 2 + 'yes\\n' + 'no\\n' * 2 + 'yes\\n' + 'yes\\n' + 'no\\n' * 2 + 'yes\\n' + 'yes\\n' + 'no\\n' * 2 + 'yes\\n' + 'yes\\n' + 'no\\n' + 'yes\\n' + 'yes\\n' + 'no\\n' * 2 + 'yes\\n' + 'yes\\n' + 'no\\n' + 'yes\\n' + 'yes\\n' + 'no\\n' * 2 + 'yes\\n' + 'yes\\n' + 'no\\n' + 'yes\\n' + 'yes\\n' + 'no\\n'\n\n\"\"\""
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 10\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\nh i\\nh ii\\nh aa\\nh a\\nh i\\nh o\\nh ee\\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2\\n3 4\\n5 6\\n7 8\\n9 10') == 'yes'\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9 5\\nc t\\ni r\\nk p\\no c\\r o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\\nout the') == 'yes'\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\ror o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\") == \"yes\\nno\\nno\\nyes\\nyes\"\nprint(solution(\"9 5\\nc t\\ni r\\nk p\\no c\\ror o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\"))"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\\n\") == 1\n\"\"\""
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\ncarrots?\\nbunnies\") == \"1\"\n\"\"\""
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\ncarrots?\\nbunnies\") == \"1\""
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 0\n\"\"\""
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 1\ncarrots?\nbunnies''') == 1\n\nassert solution('''3 6\nA?\nC?\nC?\nA?\nA?\nB?\nB?\nA?\nC?\nA?\nC?\nA?\nA?\nB?\nB?\nB?\nA?\nA?\nA?\nA?\nA?\nB?\nA?\nC?\nB?\nC?\nA?\nA?\nC?\nA?\nA?\nA?\nA?\nA?\nA?\nC?\nA?\nA?\nA?\nC?\nA?\nA?\nC?\nA?\nC?\nA?\nC?\nA?\nA?\nA?\nC?\nA?\nB?\nA?\nA?\nC?\nB?\nC?\nA?\nA?\nB?\nA?\nB?\nB?\nB?\nA?\nC?\nB?\nB?\nA?\nA?\nC?\nB?\nB?\nC?\nA?\nA?\nB?\nA?\nA?\nA?\nC?\nA?\nA?\nB?\nA?\nB?\nA?\nA?\nC?\nB?\nA?\nA?\nA?\nA?\nA?\nA?\nC?\nA?\nA?\nC?\nA?\nA?\nA?\nA?\nA?\nC?\nA?\nC?\nA?\nC?\nA?\nC?\nB?\nC?\nA?\nA?\nB?\nB?\nB?\nA?\nA?\nA?\nB?\nA?\nA?\nA?\nA?\nB?\nA?\nC?\nB?\nB?\nA?\nA?\nB?\nC?\nA?\nC?\nA?\nA?\nA?\nA?\nB?\nA?\nB?\nB?\nB?\nA?\nC?\nA?\nC?\nC?\nA?\nB?\nB?\nA?\nA?\nB?\nC?\nA?\nA?\nC?\nA?\nA?\nC?\nA?\nA?\nA?\nB?\nB?\nA?\nA?\nC?\nA?\nB?\nC?\nA?\nC?\nC?\nA?\nB?\nB?\nC?\nA?\nB?\nA?\nA?\nA?\nA?\nA?\nA?\nA?\nC?\nA?\nC?\nC?\nA?\nA?\nC?\nB?\nC?\nB?\nA?\nA?\nB?\nA?\nA?\nB?\nA?\nA?\nA?\nA?\nA?\nA?\nB?\nA?\nA?\nB?\nA?\nB?\nB?\nC?\nA?\nA?\nB?\nA?\nB?\nC?\nA?\nB?\nA?\nB?\nC?\nA?\nA?\nA?\nA?\nC?\nA?\nC?\nC?\nA?\nA?\nC?\nC?\nB?\nA?\nA?\nB?\nA?\nC?\nC?\nA?\nA?\nA?\nB?\nB?\nC?\nA?\nA?\nA?\nA?\nA?\nC?\nA?\nC?\nC?\nA?\nA?\nB?\nB?\nA?\nA?\nA?\nC?\nA?\nB?\nA?\nB?\nC?\nC?\nC?\nA?\nC?\nA?\nA?\nA?\nA?\nC?\nC?\nA?\nA?\nA?\nB?\nA?\nA?\nA?\nC?\nC?\nB?\nA?\nA?\nC?\nA?\nA?\nA?\nB?\nB?\nA?\nA?\nC?\nA?\nA?\nB?\nB?\nC?\nB?\nB?\nA?\nA?\nA?\nB?\nA?\nA?\nA?\nB?\nA?\nA?\nA?\nA?\nC?\nA?\nB?\nA?\nA?\nB?\nA?\nA?\nA?\nA?\nC?\nA?\nC?\nA?\nB?\nA?\nB?\nA?\nA?\nC?\nC?\nA?\nC?\nB?\nA?\nC?\nB?\nA?\nA?\nC?\nC?\nA?\nC?\nA?\nA?\nA?\nC?\nA?\nA?\nA?\nA?\nC?\nA?\nC?\nA?\nA?\nA?\nA?\nC?\nA?\nA?\nA?\nA?\nA?\nA?\nC?\nA?\nA?\nB?\nA?\nA?\nC?\nA?\nC?\nC?\nC?\nA?\nB?\nA?\nC?\nA?\nA?\nA?\nA?\nC?\nA?\nC?\nA?\nA?\nA?\nA?\nA?\nB?\nB?\nA?\nA?\nC?\nA?\nA?\nB?\nB?\nA?\nA?\nA?\nC?\nC?\nB?\nA?\nA?\nA?\nA?\nC?\nA?\nB?\nC?\nA?\nB?\nB?\nA?\nC?\nB?\nA?\nC?\nB?\nA?\nB?\nC?\nA?\nA?\nC?\nA?\nB?\nB?\nA?\nC?\nB?\nB?\nA?\nA?\nB?\nA?\nA?\nA?\nA?\nA?\nA?\nB?\nC?\nA?\nC?\nA?\nA?\nA?\nC?\nA?\nC?\nB?\nC?\nC?\nA?\nB?\nA?\nB?\nA?\nA?\nB?\nA?\nA?\nA?\nA?\nB?\nB?\nC?\nA?\nA?\nA?\nB?\nB?\nA?\nA?\nA?\nA?\nC?\nA?\nA?\nA?\nA?\nC?\nA?\nC?\nA?\nC?\nC?\nA?\nA?\nA?\nA?\nC?\nA?\nA?\nA?\nA?\nC?\nC?\nA?\nC?\nC?\nB?\nC?\nA?\nA?\nC?\nC?\nA?\nC?\nA?\nA?\nA?\nA?\nC?\nA?\nA?\nC?\nC?\nA?\nA?\nC?\nC?\nA?\nB?\nC?\nC?\nB?\nC?\nB?\nC?\nA?\nA?\nA?\nA?\nA?\nA?\nB?"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == 1\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()\nprint(solution(open(\"input.txt\").read()))\n\"\"\"\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies') == 1\nprint('Hooray!')"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == \"1\"\nassert solution(\"2 1\\ncarrots?\\nbunnies\") == \"0\"\n\n:param stdin:\n:return:\n\"\"\"\nfrom collections import Counter\nimport re\nfrom typing import Dict, List\n\nfrom icontract import require, ensure\n\nfrom python_by_contract_corpus.common import Lines"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|r |   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+---+\n|n |   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+---+\n|b |   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+---+\n|q |   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+---+\n|   |   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+---+\n|p |p |p |p |p |p |p |p |p |p |p |\n+---+---+---+---+---+---+---+---+---+\n|R |N |B |Q |K |B |   |   |   |   |\n+---+---+---+---+---+---+---+---+---+\n|   |   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"White: Kd1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Kd8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\"\", \"First\"\nassert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|r |   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+---+\n|n |   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+---+\n|b |   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+---+\n|q |   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+---+\n|   |   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+---+\n|p |p |p |p |p |p |p |p |p |p |p |\n+---+---+---+---+---+---+---+---+---+\n|R |N |B |Q |K |B |   |   |   |   |\n+---+---+---+---+---+---+---+---+---+\n|   |   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"White: Kd1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Kd8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\"\", \"Second\"\nassert solution(\"\"\"\n+---+---+---+---+---+"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n----------\n\nclass Node:\n    def __init__(self, data=None):\n        self.data = data\n        self.next = None\n\nclass SLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def Atbegining(self, data_in):\n        NewNode = Node(data_in)\n        NewNode.next = self.head\n        self.head = NewNode\n\n    def Atend(self, data_in):\n        NewNode = Node(data_in)\n        if self.head is None:\n            self.head = NewNode\n            return\n        laste = self.head\n        while(laste.next):\n            laste = laste.next\n        laste.next=NewNode\n\n    def Inbetween(self, middle_node, data_in):\n        if middle_node is None:\n            print(\"The mentioned node is absent\")\n            return\n\n        NewNode = Node(data_in)\n        NewNode.next = middle_node.next\n        middle_node.next = NewNode\n\n    def RemoveNode(self, Removekey):\n\n        HeadVal = self.head\n\n        if (HeadVal is not None):\n            if (HeadVal.data == Removekey):\n                self.head = HeadVal.next\n                HeadVal = None\n                return\n\n        while (HeadVal is not None):\n            if HeadVal.data == Removekey:\n                break\n            prev = HeadVal\n            HeadVal = HeadVal.next\n\n        if (HeadVal == None):\n            return\n\n        prev.next = HeadVal.next\n\n        HeadVal = None\n\n    def LListprint(self):\n        printval = self.head\n        while printval:\n            print(printval.data),\n            printval = printval.next\n\n\nlist = SLinkedList()\nlist.Atbegining(\"Mon\")\nlist.Atend(\"Tue\")\nlist.Atend(\"Wed\")\nlist.Atend(\"Thu\")\nlist.Atend(\"Fri\")\nlist.Atend(\"Sat\")\nlist.Atend(\"Sun\")\n\nlist.Inbetween(list.head.next, \"Thu\")\n\nlist.RemoveNode(\"Tue\")\n\nlist.LListprint()\n\n-----------------\n\nclass Node:\n    def __init__(self, data=None):\n        self.data = data\n        self.next = None\n\nclass SLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def Atbegining(self, data_in):\n        NewNode = Node(data_in)\n        NewNode.next = self.head\n        self.head = NewNode\n\n    def Atend(self, data_in):\n        NewNode = Node(data_in)\n        if self.head is None:\n            self.head = NewNode\n            return\n        laste = self.head\n        while(laste.next):\n            laste = laste.next\n        laste.next=NewNode\n\n    def Inbetween(self, middle_node, data_in):\n        if middle_node is None:\n            print(\"The mentioned node is absent\")\n            return\n\n        NewNode = Node(data_in)\n        NewNode.next = middle_node.next\n        middle_node.next = NewNode\n\n    def LListprint(self):\n        printval = self.head\n        while printval:\n            print(printval.data),\n            printval = printval.next\n\n    def RemoveNode(self, Removekey):\n\n        HeadVal = self.head\n\n        if (HeadVal is not None):\n            if (HeadVal.data == Removekey):\n                self.head = HeadVal.next\n                HeadVal = None\n                return\n\n        while (HeadVal is not None):\n            if HeadVal.data == Removekey:\n                break\n            prev = HeadVal\n            HeadVal = HeadVal.next\n\n        if (HeadVal == None):\n            return\n\n        prev.next = HeadVal.next"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|::p|.p.|::p|.p.|::p|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \"White: Kd1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Kg8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n\"\"\"\n"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\n\n\"\"\"\nDetection of chess position\n\nYou have got this problem as a warm-up in the first challenge in the maze.\n\nIn this mission, you need to create a simple chess position checker. It should accept a string of space-separated rows of eight columns and return whether the position is valid (containing only valid chess pieces) or not.\n\nYou are given a valid position of a chessboard as a string with rows separated by a single space in the following format: \"1 2 3 4 5 6 7 8\"\n\nChess pieces are described by the following symbols:\n\nKing - \"K\"\nQueen - \"Q\"\nBishop - \"B\"\nKnight - \"N\"\nRook - \"R\"\nPawn - \"P\"\nThe row number starts from 1, column number starts from 0.\n\nAll pieces are white except pawns, which are black.\n\nThe order of the letters in the row number matters. The row number \"1\" is the first row in a chessboard, not the bottom row.\n\nCheck the sample below for more details.\n\nInput: A string of rows separated by space as a string.\n\nOutput: A boolean, indicating whether the position is valid.\n\nPrecondition:\n0 < len(row_sep) < 100\n0 < len(row_sep) < 100\nall(char in [\" \", \"K\", \"Q\", \"B\", \"N\", \"R\", \"P\"] for char in row_sep)\n\n\"\"\""
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|::p|.p.|::p|.p.|::p|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|.R|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\") == \"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\nassert solution(\"+---+---+---+---+---+---+---+---+\\n|:r:|:p:|:p:|:p:|:p:|:p:|:p:|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|:p:|:p:|:p:|:p:|:p:|:p:|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|:p:|:p:|:p:|:p:|:p:|:p:|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|:p:|:p:|:p:|:p:|:p:|:p:|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|:p:|:p:|:p:|:p:|:p:|:p:|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|:p:|:p:|:p:|:p:|:p:|:p:|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|:p:|:p:|:p:|:p:|:p:|:p:|:p:|\\n+---+"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\nassert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\".r|r:q|k:.|:n.|:r:|\") == \"Kd1,Rd1,Ka1,Rg1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\"\nassert solution(\".|:::|.|:p|.|:p|:::|.|:p|\") == \"Pd1,Pd2,Pd3,Pd4,Pd5,Pd6,Pd7,Pd8,Pa1,Pa2,Pa3,Pa4,Pa5,Pa6,Pa7,Pa8\"\nassert solution(\".|:R:|.|:n.|:::|.|:p|:::|.|:p|\") == \"Rd1,Rd2,Rd3,Rd4,Rd5,Rd6,Rd7,Rd8,Rg1,Rg2,Rg3,Rg4,Rg5,Rg6,Rg7,Rg8,Rh1,Rh2,Rh3,Rh4,Rh5,Rh6,Rh7,Rh8\"\nassert solution(\".|:P:|.|:P|.|:p|:::|.|:p|:::|.|:p|\") == \"Pd1,Pd2,Pd3,Pd4,Pd5,Pd6,Pd7,Pd8,Pa1,Pa2,Pa3,Pa4,Pa5,Pa6,Pa7,Pa8,Pb1,Pb2,Pb3,Pb4,Pb5,Pb6,Pb7,Pb8\"\nassert solution(\".|:R:|.|:n.|:::|.|:p|:::|.|:p|:::|.|:p|\") == \"Rd1,Rd2,Rd3,Rd4,Rd5,Rd6,Rd7,Rd8,Rg1,Rg2,Rg3,Rg4,Rg5,Rg6,Rg7,Rg8,Rh1,Rh2,Rh3,Rh4,Rh5,Rh6,Rh7,Rh8,Rb1,Rb2,Rb3,Rb4,Rb5,Rb6,Rb7,Rb8\"\n"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\") == \"White: Kc1,c2,c3,c4,e5,d6,d7,a8,b8,b7,b6,a7,a8,Kd1,Rh1,Rh2,Rh3,Rb1,Nc1,Nf1,Nc2,Nc3,Nf2,Nf3,Ng1,Kf1,Kf2,Kf3,Kg1,Kg2,Kg3,Kf4,Kg4,Kg5,Kh4,Kh5,Kh6,Kb4,Kb5,Kb6,Ka4,Ka5,Ka6,Kc4,Kc5,Kc6,Ke4,Ke5,Ke6,Kd4,Kd5,Kd6,Kg4,Kh4,Kh5,Kh6,Kh7,Kh8,Kh7,Kh8,Kf6,Kg6,Kh6,Kh7,Kh8,Kg7,Kg8,Kf7,Kg7,Kf8,Kh8,Kf6,Kg6,Kh6,Kg7,Kg8,Ka7,Ka8,Kf7,Kg7,Kf8,Kh8,Kg6,Kh7,Kh8,Kg7,Kf8,Kh8,Kg8,Kh7,Kh8,Kg7,Kh8,Kg8,Ka8,Ka7,Kg8,Ka8,Kh8,Kh7,Kh8,Kf8,Kg7,Kh8,Kg8,Ka8,Kh8,Kg8,Ka8,Kh8,Kg8,Kh7,Kf8,Kg8,Kh8,Kg8,Kf8,Kg8,Kh8,Kg8,Kf8,Kg8,Kh8,Kg8,Kf8,Kg8,Kh8,Kg8,Kh8,Kg8,Kf8,Kg8,Kh8,Kg8,Kf8,Kg8,Kh8,Kg8,Kf8,Kg8,Kh8,Kg8,Kf8,Kg8,Kg8,Kg8,Kh8,Kg8,Kh8,Kg8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,Kh8,"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"White: Kf1,c2,b3,a4,b5,c6,b7,a8,h1,g2,f3,e4,h5,g6,f7,e8,h8,a1,b2,c3,d4,d5,d6,d7,d8,e1,d1,d2,d3,d4,d5,d6,d7,d8,c1,b1,a2,a3,a4,a5,a6,a7,a8,h2,g3,f4,e5,e6,e7,e8,b2,c1,d3,d5,f5,f7,f8,a2,a3,a4,a5,a6,a7,a8,h3,g4,f6,e7,e8,h4,g5,g6,g7,g8,f6,e1,d2,e3,e4,e5,e6,e7,e8,b3,c2,a1,a2,a3,a4,a5,a6,a7,a8,h1,g2,f3,e4,h5,g6,f7,e8,a1,b2,c3,d4,d5,d6,d7,d8,e1,d1,d2,d3,d4,d5,d6,d7,d8,c1,b1,a2,a3,a4,a5,a6,a7,a8,h2,g3,f4,e5,e6,e7,e8,b2,c1,d3,d5,f5,f7,f8,a2,a3,a4,a5,a6,a7,a8,h3,g4,f6,e7,e8,h4,g5,g6,g7,g8,f6,e1,d2,e3,e4,e5,e6,e7,e8,b3,c2,a1,a2,a3,a4,a5,a6,a7,a8,h1,g2,f3,e4,"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\">-.-.>-.-.>-.-.>-.-.>-.-.>-.-.>-.-.>-.-.>-.-.\") == 'White: Kd1,Qe1,Ra1,Rf1,Bb1,Bc1,Nb1,a2,c3,d3,e2,f2,g2,h2,a4,e5'\nassert solution(\".>:.:>.-.>-.>.>.>:.:>.-.>-.>.>.>.>:.:>.-.>-.>.>..\") == 'White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4'\nassert solution(\":-.-.:-.>.>-.-.>:.:>-.-.>-.-.>-.-.>:.:>-.-.>-.-.>-.-.\") == 'White: Kd1,Qe1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4'\nassert solution(\">-.-.>-.-.>-.-.>-.-.>-.-.>-.-.>-.-.>-.-.>-.-.\") == 'White: Kd1,Qe1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4'\nassert solution(\".>-.-.>-.-.>-.-.>-.-.>-.-.>-.-.>-.-.>-.-.>-.-.\") == 'White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4'\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''8 3''') == 'Your wish is granted!'\nassert solution('''10 2''') == 'Your wish is granted!'\nassert solution('''10 10''') == 'You will become a flying monkey!'\n'''\n\n\nimport sys\nimport os"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"Your wish is granted!\"\nassert solution(\"1 1\") == \"You will become a flying monkey!\"\n\nSample Input:\n9 1\nSample Output:\nYou will become a flying monkey!\n\n----"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3\") == \"Your wish is granted!\"\nassert solution(\"2 1\") == \"You will become a flying monkey!\"\n\"\"\"\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3\") == \"Your wish is granted!\"\n\"\"\"\nimport sys\n\nN, K = list(map(int, input().split()))"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'You will become a flying monkey!'\nassert solution('1 1') == 'Your wish is granted!'\nassert solution('2 1') == 'Your wish is granted!'\nassert solution('1 2') == 'Your wish is granted!'\nassert solution('1 2') == 'Your wish is granted!'\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('10 5') == 'You will become a flying monkey!'"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('1 1') == 'You will become a flying monkey!'\n\"\"\""
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('8 8') == 'You will become a flying monkey!'\nassert solution('8 2') == 'Your wish is granted!'\nassert solution('9 5') == 'You will become a flying monkey!'\nassert solution('10 1') == 'You will become a flying monkey!'\n\n\"\"\"\n\nfrom sympy import isprime"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('1 2') == 'You will become a flying monkey!'\nassert solution('100 100') == 'You will become a flying monkey!'\nassert solution('10 100') == 'You will become a flying monkey!'\nassert solution('100 1') == 'You will become a flying monkey!'\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3\") == \"Your wish is granted!\"\nassert solution(\"3 1\") == \"You will become a flying monkey!\"\nassert solution(\"4 2\") == \"Your wish is granted!\"\n\"\"\"\n\nimport sys\n\nfrom itertools import product, combinations, permutations\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('16') == '16'\nassert solution('4') == '4'\n\"\"\"\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"16\") == \"16\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('16') == '16'\n\"\"\""
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('16') == '16'\nprint(solution(stdin.readline().strip()))\n\"\"\""
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"16\") == \"16\"\n'''\nimport math\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"16\") == \"16\"\n\"\"\""
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('16') == '16'\n\"\"\""
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"16\") == \"16\"\nassert solution(\"81\") == \"18\"\nassert solution(\"100\") == \"16\"\n\"\"\""
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"16\") == \"16\"\n\n\"\"\"\n\n\n\n\"\"\"\nWorking with big numbers.\n\nSome people try to use big numbers in their solution, but they usually fail. \nFor example, in the Fibonacci sequence the first two numbers are 1 and 1, \nand then further numbers are created by adding the two numbers before them. \nSo the sequence will start with:\n1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,...\n\nThe next number after 55 is 89, which is not correct because 89 is greater than 55. \nSo the sequence will continue like this:\n1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,...\n\nCan you write a correct algorithm for the next number after the 55th in the \nsequence?\n\n----Input----\nThe input consists of a single integer $n$ ($1 \\le n \\le 10^{18}$), \nthe position of the number 55 in the sequence.\n\n----Output----\nThe output should be a string that represents the number that comes after 55 in the \nsequence, or \"No such number\" if there is none.\n\n----Examples----\nSample Input:\n89\nSample Output:\n144\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"16\") == \"16\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"2\"\nassert solution(\"6 180\") == \"4\"\nassert solution(\"10 500\") == \"6\"\nassert solution(\"5 100\") == \"1\"\nassert solution(\"5 10\") == \"5\"\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 180\\n1 5 8 3 4') == '4'\n\"\"\"\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 180\\n45 30 55 20 80 20') == 4\n\"\"\""
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 180\\n45 30 55 20 80 20') == '4'\n'''\n\nn, t = map(int, input().split())\nl = [int(x) for x in input().split()]\n\nl1 = l[:n//2]\nl2 = l[n//2:]\n\nl2.sort()\n\nans = 0\nwhile len(l1) > 0:\n    if l1[-1] <= t:\n        t -= l1[-1]\n        ans += 1\n        l1.pop()\n    else:\n        break\n\nl1.reverse()\nwhile len(l2) > 0:\n    if l2[-1] <= t:\n        t -= l2[-1]\n        ans += 1\n        l2.pop()\n    else:\n        break\n\nprint(ans)\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2\\n3\\n') == '3'\nassert solution('1 2 3\\n5\\n') == '2'\nassert solution('1 2 3 4\\n5\\n') == '3'\nassert solution('1 2 3 4 5\\n6\\n') == '0'\nassert solution('1 2 3 4 5 6\\n7\\n') == '1'\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 180\\n1 1 1 1 1\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 180\\n45 30 55 20 80 20') == '4'\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('4 3\\n45 30 55 20 80 20') == '4'\nassert solution('5 100\\n40 50 100 30 40 100') == '3'\nassert solution('6 180\\n45 30 55 20 80 20') == '4'"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n\"\"\"\n\nN = int(input())\nres = 0\nfor i in range(N):\n    res += int(input())\nprint(res)\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\n\"\"\"\n\n\"\"\"\nOptimal Solution: O(n) time | O(1) space\n\"\"\"\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n'''4\n21\n34\n18\n9'''\n) == '79'"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\nassert solution(\"2\\n5\\n7\") == \"10\"\nassert solution(\"1\\n5\") == \"10\"\n\nfrom math import gcd"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n\nassert solution(\"4\\n21\\n34\\n18\\n9\\n4\\n21\\n34\\n18\\n9\\n4\\n21\\n34\\n18\\n9\\n4\\n21\\n34\\n18\\n9\\n4\\n21\\n34\\n18\\n9\") == \"88\""
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\nprint(solution(stdin.strip()))\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\narr = [int(sys.stdin.readline()) for _ in range(n)]\n\narr.sort()\n\nprint(arr[n//2])"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'impossible'\nassert solution('5\\n1\\n4') == '2 3 0'\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\n\"\"\"\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\n\"\"\"\nimport sys\nfrom typing import List, Callable, Any\n\nimport random\n\nN, M, S, D = [int(i) for i in sys.stdin.readline().strip().split()]\nsodas: List[int] = [int(i) for i in sys.stdin.readline().strip().split()]\nassert len(sodas) == S\n\nc: List[int] = []\nfor i in range(S):\n    c.append(D - sodas[i])"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\n\"\"\"\n\nfrom typing import List\n\nimport sys\n\ntest_input_part1 = \"\"\"5 3 3 4\n0 1 4\n\"\"\"\n\ntest_input_part2 = \"\"\"5 3 3 4\n0 1 4\n0 2 4\n1 2 4\n2 3 4\n3 4 4\n\"\"\"\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 3 4\\n0 1 4') == '2 3 0'\n\nassert solution('6 3 4 10\\n0 2 1 1 2 1 2 2\\n') == '5 2 0'\nassert solution('7 3 3 7\\n0 1 2 2 2 2 2 1\\n') == 'impossible'\n\nassert solution('9 5 1 10\\n0 2 2 0 2 1 4 2 3\\n') == '7 3 0'\nassert solution('9 5 1 10\\n0 1 2 0 1 4 2 3\\n') == '4 3 0'\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\nprint(solution(input()))"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 3 4\") == \"impossible\"\nassert solution(\"1 1 3 4\") == \"impossible\"\nassert solution(\"4 1 3 5\") == \"impossible\"\nassert solution(\"1 1 3 2\") == \"1 3 0\"\nassert solution(\"1 1 3 2 3\") == \"1 3 0 2\"\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\n\n-----Solution-----\n\"\"\"\n\nimport sys\nimport random\n\nn, m, s, d = [int(x) for x in input().split()]\nc = [int(x) for x in input().split()]\n\nall_sodas = [x for x in range(n)]\n\nrandom.shuffle(all_sodas)\n\ni = 0\nresult = []\n\nwhile len(all_sodas) > 0:\n    i = (i + m - 1) % len(all_sodas)\n    j = (i + m - 1) % len(all_sodas)\n    temp = [all_sodas.pop(i) for _ in range(m)]\n    result.extend(temp)\n    for k in range(m):\n        all_sodas.remove(temp[k])\n\nresult = [x for _, x in sorted(zip(c, result))]\nprint(*result, sep=\" \")"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\nassert solution(\"5 5 5 4\\n1 2 3 4\") == \"impossible\"\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 2 2 7') == '1 0 0 0 0 1'\nprint(solution('0 1 2 2 2 7'))\nassert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\nprint(solution('0 1 2 2 2 7'))\nassert solution('1 1 2 2 2 7') == '1 0 0 0 0 1'\nprint(solution('1 1 2 2 2 7'))\nassert solution('1 1 2 2 2 7') == '1 0 0 0 0 1'\nprint(solution('1 1 2 2 2 7'))\nassert solution('1 1 2 2 2 7') == '1 0 0 0 0 1'\nprint(solution('1 1 2 2 2 7'))\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\n\"\"\"\n\nk, q, r, b, n, p = map(int, input().split())\nc = k + q + r + b + n + p"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\""
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"1 0 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"1 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"1 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"1 1 2 2 2 7\") == \"1 0 0 0 0 1\"\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 1 1 0 1 1\") == \"0 0 0 1 0 1\"\nassert solution(\"0 1 1 1 1 1\") == \"0 1 0 0 0 0\"\nassert solution(\"0 0 1 1 1 1\") == \"0 1 0 0 0 0\"\nassert solution(\"1 1 0 1 1 1\") == \"1 0 0 0 0 0\"\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\nprint(solution('0 1 2 2 2 7'))\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 1 2 2 2 7\\n') == '1 0 0 0 0 1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''0 1 2 2 2 7''') == '1 0 0 0 0 1'\nassert solution('''0 1 2 2 2 7''') == '1 0 0 0 0 1'\n\nSample Input:\n0 0 -4 1 0 0\nSample Output:\n0 0 0 0 0 0\nassert solution('''0 0 -4 1 0 0''') == '0 0 0 0 0 0'\nassert solution('''0 0 -4 1 0 0''') == '0 0 0 0 0 0'\n\nSample Input:\n0 1 2 2 2 7\nSample Output:\n0 1 0 0 0 1\nassert solution('''0 1 2 2 2 7''') == '0 1 0 0 0 1'\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 3 2 1 2 6\") == \"1 1 1 1 1 1\"\nassert solution(\"0 0 2 2 2 6\") == \"1 1 1 1 1 1\"\nassert solution(\"0 1 2 1 2 6\") == \"1 1 1 1 1 1\"\nassert solution(\"0 2 2 0 1 6\") == \"1 1 1 1 1 1\"\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 0 0 1 1 1\") == \"0 0 0 0 0 0\"\nassert solution(\"1 2 2 2 7\") == \"0 0 0 0 0 1\"\nassert solution(\"0 1 1 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 0 0 1 1 1\") == \"0 0 0 0 0 0\"\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"2\\n123456 0.6666\\nqwerty 0.3334\\n\") == \"1.3334\"\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == '1.3334'\n\"\"\"\n\nN = int(stdin.readline())\n\ndic = {}\n\nfor _ in range(N):\n    password, prob = stdin.readline().split()\n    dic[password] = float(prob)\n\nprint('%.4f' % (1 - sum(dic.values())))\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n2\n123456 0.6666\nqwerty 0.3334\n''') == '1.3334'\nprint(solution(stdin))\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\nassert solution(\"4\\n1234 12.1234 12.1234 12.1234\\n123 123.12 12.1212 123.12\\n12 1.1 1.2 1.3\\n12 12.1 12.12 12.12\") == \"4.11\"\nassert solution(\"1\\n1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 1.0\\n1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 1.0\\n1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 1.0\\n1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 1.0\\n1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 1.0\\n1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 1.0\\n1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 1.0\") == \"1.45\"\nassert solution(\"1\\n1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 1.0\\n1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 1.0\\n1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 1.0\\n1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 1.0\\n1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 1.0\\n1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 1.0\\n1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 1.0\") == \"1.40\"\n-----Problem-----\n\n\"\"\""
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\n\"\"\"\n\nn = int(input())\npasswords = [input().split() for i in range(n)]\npasswords = [[int(passwords[i][0]),float(passwords[i][1])] for i in range(n)]\npasswords.sort()\n\npass_len = len(passwords)\nexpected = sum(passwords[i][1] for i in range(pass_len))\n\ncur = 0\nfor i in range(pass_len):\n    cur += passwords[i][1]\n    expected -= cur\nprint('%.4f' % expected)"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_stdin.read()) == test_stdin.read()\n\n------Solution------\nimport re\nimport math\nimport decimal\nimport collections\n\nn = int(input())\np_dict = {}\nfor _ in range(n):\n    s = input()\n    prob = float(input())\n    p_dict[s] = prob\n\ncount = 0\nfor _ in range(n):\n    s = input()\n    if '0' in s or '1' in s or '2' in s or '3' in s or '4' in s or '5' in s or '6' in s or '7' in s or '8' in s or '9' in s:\n        p_set = set()\n        for p in p_dict.keys():\n            if '0' in p or '1' in p or '2' in p or '3' in p or '4' in p or '5' in p or '6' in p or '7' in p or '8' in p or '9' in p:\n                if len(p) == len(s):\n                    p_set.add(p)\n        if len(p_set) == 1:\n            count += p_dict[p_set.pop()]\n    else:\n        count += p_dict[s]\n\nprint(round(decimal.Decimal(count),4))\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\npasswords = []\nprobabilities = []\n\nfor _ in range(n):\n    password, probability = sys.stdin.readline().split()\n    passwords.append(password)\n    probabilities.append(float(probability))"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\nassert solution(\"5\\n123456 0.6666\\nqwerty 0.3334\\n123456 0.6666\\nqwerty 0.3334\\n123456 0.6666\") == \"1.3334\"\nassert solution(\"5\\n123456 0.6666\\n123456 0.6666\\n123456 0.6666\\n123456 0.6666\") == \"4.3333\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\n\"\"\""
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\nprint(solution(input()))\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"3 1\\n1 2 4\") == '1'"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\nassert solution('5 1\\n1 2 3 4 5') == '1'\nassert solution('9 2\\n1 2 3 4 5 6 7 8 9') == '5'\nassert solution('12 1\\n1 2 3 4 5 6 7 8 9 10 11 12') == '5'\n\"\"\"\n\nimport sys\nimport heapq"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\nassert solution('3 2\\n1 2 3') == '2'\nassert solution('3 2\\n1 3 1') == '1'\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\n\n\n\nSolution 1\nThis problem can be solved in O(n) time.\n\nAs we iterate through the list of distances, we can keep track of the minimum distance we can get from any car in front of us to us. Then we simply return that minimum.\n\nfrom math import inf"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n1 2 4\") == '1'\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\n\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n1 2 4\") == '1'\n\"\"\""
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n1 2 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\nC B') == 'G:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\ng:\\nf:\\ne:\\nd:\\nc:\\nb:\\na:'\nassert solution('4\\nC D E') == 'G:\\nF: --------\\nE:      *    \\nD: *      \\nC: --------\\nB:\\nA:\\ng:\\nf:\\ne:\\nd:\\nc:\\nb:\\na:'\nassert solution('6\\nC C E D E F') == 'G:                                                                                        \nF: -------------------------------------*-------------------------------------\nE:       *   *          *             *   *                  *        \nD: ----*-------**-----*-------------*-------*----------------*-----*------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------'\n\"\"\"\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G: \\nF: -------------------*--------------------\\nE: *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: ------------------**-----------------*-----*------\\nA: \\ng: -----------------------------------------------*----------\\nf: \\ne: ----------------------------------------------------------\\nd: \\nc: \\nb: \\na: ----------------------------------------------------------'\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\".strip()\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \\\n\"\"\"G:                                                               \nF: ------------------------------------*----------------------\nE:       *   *          *             *   *                  \nD: ------------------*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                               \ne: ----------------------------------------------------------\nd:                                                               \nc:                                                               \nb:                                                               \na: ----------------------------------------------------------\"\"\".lstrip()\n\n\"\"\"\nThe song \u2018Yankee Doodle\u2019 was developed by the children of the Seminole War, which lasted from 1876-1877. While the notes were never read by the public, the song was popular with children because it could be played with a whistle. The song was also popular with the teachers because it was taught in many schools. It is possible to create a computer version of the song using only these letters and durations.\n\nAll we need to do is take the number of notes in the song and the list of notes, and convert the song into the desired notation.\n\nLet's first look at the input format. There are two lines:\n\nThe first line has an integer $1 \\le n \\le 100$ indicating the number of notes in the song.\nThe second line contains $n$ notes. Each note consists of two parts: the pitch and the duration. The pitch is a letter a through g or A through G. Lowercase letters indicate the octave below uppercase letters, and we consider c to represent so-called \u2018middle c\u2019. The duration, which is optional, is a positive integer indicating a multiplier of the length of the default note. (If you are musical you\u2019ll notice we\u2019ve made many simplifying assumptions, such as leaving out many octaves, sharps, flats, rests, time signatures, etc.)\n\nNow we need to create a function to convert the song into the desired notation.\n\nThe function should take a string as input and output the same string.\n\nThe input should be the number of notes in the song and a string containing the notes.\n\nFor each note, it should add its note and its duration in a string to the output variable. If the duration is not specified, it should be $1$.\n\nThe rules for writing the notes:\n\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\n\nThe input for your function consists of two lines. The first line has an integer $1 \\le n \\le 100$ indicating the number of notes in the song. The second line contains $n$ notes. Each note consists of two parts: the pitch and the duration. The pitch is a letter a through g or A through G. Lowercase letters indicate the octave below uppercase letters, and we consider c to represent so-called \u2018middle c\u2019. The duration, which is optional, is a positive integer indicating a multiplier of the length of the default note. (If you are musical you\u2019ll notice we\u2019ve made many simplifying assumptions, such as leaving out many octaves, sharps, flats, rests, time signatures, etc.)\n\nConvert the song into the desired notation.\n\n-----Input-----\n27\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\n-----Output-----\nG:\nF: ------------------------------------*----------------------\nE:       *   *          *             *   *                  \nD: ------------------*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                               \ne: ----------------------------------------------------------\nd:                                                               \nc:                                                               \nb:                                                               \na: ----------------------------------------------------------\n\nC:\nB: ------------------------------------*----------------------\nA:       *   *          *             *   *                  \nD: ------------------*-------------*-------*----------------\nE: * *     *      * *     **    * *           *         ** **\nF: --------------------------**-----------------*-----*------\nG:                                                   *        \n\n\"\"\""
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:                                               \\nF: --------------------------------------\\nE:       *    *          *             *   *                  \\nD: ---------------------------*---------*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------*---------*-------------*-------*----------------\\nA:                                    \\ng: ---------------------------------------\\nf:                                    \\ne: --------------------------------------\\nd:                                    \\nc:                                    \\nb:                                    \\na: -----------------------------------'\nprint(solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2'))"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:\\nF:\\nE: *\\nD: **\\nC:\\nB: --------------------------**\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA:\\nG:\\nF:\\nE:\\nD:\\nC:\\nB:\\nA"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------'\n\n\"\"\""
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(Sample Input) == Sample Output\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''27\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2''') == \\\n'''G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------'''\n\nassert solution('''2\nC C D E\nC C D E''') == \\\n'''G:\nF: -------------------------------------*--------------------\nE:       *          *             *   *                  \nD: ----*--------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------*-----*------*-----*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------'''\n\nassert solution('''5\na A G# D# G#\nc C D E\nd D D\ne F G\nf G A\n''') == \\\n'''G:\nF: -------------------------------------*--------------------\nE:       *          *             *   *                  \nD: ----*--------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------*-----*------*-----*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------'''\n\n'''\n\ud480\uc774\ub97c \ubcf4\uba74 \ub2e8\uc21c\ud558\ub2e4.\n\uba3c\uc800 \uc74c\uc774 \ub9e4\uc6b0 \uae68\uc838\uc11c \uc904\ub824\uace0 \uccab \uc904\uacfc \ub2e4\uc74c \uc904\uc744 \uad6c\ubd84\ud558\uae30 \uc704\ud574 \ub9e4\uce6d\ud55c\ub2e4.\n\uc774\ud6c4 \uc8fc\uc5b4\uc9c4 \uc8fc\uc758 \uc904\uc774 \ubc18\ubcf5\ub418\uc5b4 \ub2e4\uc2dc \uc785\ub825\uc744 \ubc1b\uc558\uc744 \uacbd\uc6b0\uc5d0\ub294 \uc774\ub97c \ubc18\ubcf5\ud574\uc900\ub2e4.\n\uc774\ub97c \ub9c8\uc9c0\ub9c9 \uc904\uae4c\uc9c0 \ucc98\ub9ac\ud558\uc600\ub2e4.\n'''\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:                                                   F: ------------------------------------*--------------------\\nE:       *   *          *             *   *                  E: **   **          *             *   *                  *         ** **          *             *   *                  *         * **          *             *   *                  *        \\nD: ----*-------**-----*-------------*-------*----------------D: * *     *      * *     **    * *           *         ** **          *             *   *                  *         * **          *             *   *                  *        \\nC: * *     *      * *     **    * *           *         ** **          *             *   *                  *         * **          *             *   *                  *        \\nB: --------------------------**-----------------*-----*------B:                                          *        \\nA:                                                  *        \\ng: -----------------------------------------------*----------f:                                          \\nf:                                                                        \\ne: ----------------------------------------------------------\\nd:                                                                        \\nc:                                                                        \\nb:                                                                        \\na: ----------------------------------------------------------'\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 1 1 1') == 'possible'\nassert solution('3\\n1 1 1') == 'impossible'\nassert solution('8\\n1 1 1 1 1 1 1 1') == 'impossible'\nassert solution('6\\n1 1 1 1 1 1 1') == 'possible'\nassert solution('9\\n1 1 1 1 1 1 1 1') == 'possible'\n\n------Solution------\n'''"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\nassert solution('2\\n1 1') == 'possible'\nassert solution('1\\n1') == 'possible'\nassert solution('3\\n1 1 1') == 'possible'\nassert solution('3\\n1 1 2') == 'impossible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 1 1 1') == 'possible'\nassert solution('5\\n1 1 1 1 1') == 'possible'\nassert solution('3\\n1 1 1') == 'possible'\nassert solution('3\\n2 2 1') == 'impossible'\nassert solution('3\\n4 4 3') == 'impossible'"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\nassert solution('3\\n2 2 2') == 'possible'\nassert solution('3\\n1 1 2') == 'possible'\nassert solution('3\\n2 1 2') == 'impossible'\nassert solution('3\\n1 1 3') == 'impossible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\nassert solution('1\\n1 1') == 'possible'\nassert solution('3\\n1') == 'possible'\nassert solution('3\\n1 1 1 1') == 'possible'\nassert solution('1\\n1') == 'possible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 1\") == \"possible\"\nassert solution(\"1 1 1\") == \"possible\"\nassert solution(\"1 1 1 2\") == \"possible\"\nassert solution(\"1 1 1 2 1 1 1 2\") == \"possible\"\nassert solution(\"1 1 1 2 1 1 1 2 1 1 2 2\") == \"possible\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 1 1\") == \"possible\"\n\nSolution:\n\nn = int(stdin.readline().strip())\nsticks = [int(x) for x in stdin.readline().strip().split()]\nsticks.sort()\ns = 0\nfor i in sticks:\n    s += i\n    if s > 2 * s / 3:\n        break\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"4\\n1 1 1 1\") == \"possible\"\nassert solution(\"4\\n3 1 1 1\") == \"possible\"\nassert solution(\"4\\n5 5 5 5\") == \"possible\"\nassert solution(\"4\\n5 1 1 1\") == \"possible\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '3\\n1 1 1'\n) == 'possible'\nassert solution(\n    '3\\n1 2 2'\n) == 'possible'\nassert solution(\n    '3\\n1 2 3'\n) == 'impossible'\nassert solution(\n    '3\\n3 3 3'\n) == 'impossible'\nassert solution(\n    '3\\n2 2 2'\n) == 'impossible'\n\"\"\""
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == \"possible\"\n\"\"\"\n\nimport math\n\nn = int(input())\na = list(map(int, input().split()))\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''10\n4 3 3 2 1 2 2 1 1 3''') == 3\n'''\n-----\nSample Input:\n7\n1 7 6 5 4 2 3\nSample Output:\n7\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == 3\n\"\"\"\n\nfrom typing import List\n\nn = int(input())\nbricks = list(map(int, input().split()))\n\ntowers = 0\n\nfor i in range(n):\n    if bricks[i] > bricks[i - 1]:\n        towers += 1\n\nprint(towers)\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\n4 3 3 2 1 2 2 1 1 3') == '3'\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''8\n3 2 1 1 2 2 1 1 3\n''') == 3\n\n\"\"\"\nfrom collections import deque\n\nN = int(input())\nli = list(map(int, input().split()))\n\ndp = [1] * N\ncnt = 0\n\nqueue = deque()\nqueue.append(0)\n\nfor i in range(1, N):\n    while queue and li[queue[-1]] >= li[i]:\n        queue.pop()\n    \n    dp[i] = queue[-1] + 1\n    queue.append(i)\n\nprint(max(dp))"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 3 2 1 2 2 1 1 3') == 3\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nwidths = sorted(map(int, sys.stdin.readline().strip().split()))\n\nresult = 0\nheight = 0\nfor w in widths:\n    if w > height:\n        result += 1\n        height = w\nprint(result)\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\n4 3 3 2 1 2 2 1 1 3') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 3 2 1 2 2 1 1 3') == 3"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == \"3\"\nprint('Hooray!')\n\nThe first line contains the integer $N$ (the number of bricks). The line follows, consisting of $N$ integers $x_ i$, where $1 \\leq x_ i \\leq 10^6$, corresponding to the width of the bricks in the order they are available.\n\nSample Input:\n5\n1 3 2 1 3\nSample Output:\n1\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''10\n4 3 3 2 1 2 2 1 1 3''') == '3'\nassert solution('''5\n4 3 3 2 1 2''') == '1'\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1''') == '10'\nassert solution('''2\n1 1''') == '0'\nassert solution('''1\n4''') == '1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3 3 2 1 2 2 1 1 3') == 3\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0.0\"\nassert solution(\"1.0 1.0\") == \"1.0\"\nassert solution(\"1.0 1.0 2.0 2.0\") == \"1.0\"\nassert solution(\"1.0 1.0 2.0 2.0 3.0 3.0\") == \"1.0\"\nassert solution(\"1.0 1.0 2.0 2.0 3.0 3.0 4.0 4.0\") == \"1.0\"\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\nashmeade 9.90 8.85\nblake 9.69 8.72\nbolt 9.58 8.43\nCarter 9.78 8.93\nfrater 9.88 8.92\npowell 9.72 8.61\n''') == '35.54\\nCARTER\\nBOLT\\npowell\\nBLAKE'\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"6\\n\"\n    \"ASHMEADE 9.90 8.85\\n\"\n    \"BLAKE 9.69 8.72\\n\"\n    \"BOLT 9.58 8.43\\n\"\n    \"CARTER 9.78 8.93\\n\"\n    \"FRATER 9.88 8.92\\n\"\n    \"POWELL 9.72 8.61\") == \"\"\"35.54\nCARTER\nBOLT\nPOWELL\nBLAKE\n\"\"\"\n\n\"\"\"\n\nGiven 2 runners with 1.0/0.9/0.8/0.7/0.6/0.5/0.4/0.3/0.2/0.1 speed, return the name of the fastest runner.\n\nIf there are two or more runners, which of them has the best speed?\n\nSample Input:\nASHMEADE 1.0\nBLAKE 0.9\nSample Output:\nBLAKE\n\n\"\"\"\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A\\nB\\nC\\nA\\nB\\nC\") == \"35.54\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nimport math\nfrom decimal import *\n\ninput_data = [i.strip() for i in open(\"input.txt\")]\nn = int(input_data[0])"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n0\\n1\\n0\\n') == '1.00\\n0\\n0\\n1'\nassert solution('10\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n') == '9.73\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0'\nassert solution('7\\n0\\n0\\n0\\n0\\n0\\n0\\n') == '6.60\\n0\\n0\\n0\\n0\\n0\\n0'\nassert solution('5\\n1.30\\n1.03\\n1.20\\n1.15\\n') == '1.50\\n1.03\\n1.20\\n1.15\\n'"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8.87\\n9.92\\n9.50\\n9.62\\n9.23\\n9.64\\n9.97\") == \"34.965\"\nassert solution(\"4.05\\n8.54\\n8.90\\n9.25\\n9.90\\n8.75\\n8.93\") == \"17.881\"\n\"\"\"\n\n\nfrom math import ceil\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\") == \"34.11\"\nassert solution(\"4\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\") == \"15.78\"\nassert solution(\"5\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\") == \"13.22\"\nassert solution(\"6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"14.00\"\n\"\"\""
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"6\nASHMEADE 9.90 8.85\nBLAKE 9.69 8.72\nBOLT 9.58 8.43\nCARTER 9.78 8.93\nFRATER 9.88 8.92\nPOWELL 9.72 8.61\"\"\") == \"35.54\"\n\n\"\"\"\nIn this problem, your task is to determine which runners should represent the team. You are given two times for each runner \u2013 the time the runner would run the $1$st leg, and the time the runner would run any of the other legs (the first and the last legs). \n\nOne can determine which runners have the best times for each leg using the following algorithm:\n1. Start from the fastest runner.\n2. Move to the next runner.\n3. If the runner\u2019s speed is better than the runner\u2019s speed on the $1$st leg, set the time for this leg to this runner\u2019s speed.\n4. Continue this process until no other runner\u2019s speed is better than the runner\u2019s speed on the $1$st leg.\n5. Move to the next leg.\n6. Repeat steps 2-4 until the runner with the fastest speed on the $1$st leg is out of the race.\n7. If the runner\u2019s speed on the $1$st leg is equal to the runner\u2019s speed on the $2$nd to $4$th legs, check the runner\u2019s speed on the $2$nd to $4$th legs. If any runner\u2019s speed is better than the runner\u2019s speed on the $1$st leg, set the time for this leg to this runner\u2019s speed.\n8. Continue this process until the runner with the fastest speed on the $1$st leg is out of the race.\n9. For each leg, if the runner\u2019s speed is better than the runner\u2019s speed on the $1$st leg, set the time for this leg to this runner\u2019s speed.\n10. Repeat steps 7-9 until the runner with the fastest speed on the $1$st leg is out of the race.\n11. For each leg, if the runner\u2019s speed on the $1$st leg is equal to the runner\u2019s speed on the $2$nd to $4$th legs, check the runner\u2019s speed on the $2$nd to $4$th legs. If any runner\u2019s speed is better than the runner\u2019s speed on the $1$st leg, set the time for this leg to this runner\u2019s speed.\n12. Continue this process until the runner with the fastest speed on the $1$st leg is out of the race.\n13. Output the time of the fastest team, and the names of the fastest team.\n\nIn this problem, you should use the following algorithm:\n1. Start from the fastest runner.\n2. Move to the next runner.\n3. If the runner\u2019s speed is better than the runner\u2019s speed on the $1$st leg, set the time for this leg to this runner\u2019s speed.\n4. Continue this process until the runner with the fastest speed on the $1$st leg is out of the race.\n5. Output the time of the fastest team, and the names of the fastest team.\n\"\"\""
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\n\n----\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61') == '35.54'\n\"\"\"\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2\\n2 4\\n5 6\") == \"2\"\n\n-------\n3\n1 2\n3 4\n5 6"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6') == '2'\nassert solution('3\\n1 2\\n2 4\\n5 6\\n3 7\\n1 2\\n2 4\\n5 6') == '1'\nassert solution('3\\n1 2\\n2 4\\n5 6\\n3 7\\n1 2\\n2 4\\n5 6\\n3 7\\n1 2\\n2 4\\n5 6') == '0'\nassert solution('5\\n1 2\\n2 4\\n5 6\\n3 7\\n1 2\\n2 4\\n5 6\\n3 7\\n1 2\\n2 4\\n5 6\\n3 7\\n1 2\\n2 4\\n5 6\\n3 7') == '1'\n'''\n\nN = int(input())"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6') == '2'\nassert solution('2\\n1 2\\n2 4') == '2'\nassert solution('1\\n2') == '1'\nassert solution('1\\n2\\n3\\n2\\n2\\n2') == '1'\n\n----\n\n> python3 acm_minions.py < input.txt\n2\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import defaultdict\nfrom typing import List\n\nsys.path.append(os.path.join(os.path.dirname(__file__), \"../solutions\"))\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 2') == '2'\nassert solution('3\\n1 2\\n2 4') == '1'\nassert solution('3\\n1 2\\n2 4\\n5 6') == '2'\n\nprint(solution(stdin))"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6') == '2'\nassert solution('2\\n1 2\\n2 4') == '2'\n\"\"\"\n\n\"\"\"\nimport math\n\nN = int(stdin.readline())\na = []\nfor _ in range(N):\n    l, r = map(int, stdin.readline().split())\n    a.append((l, r))\n\na.sort(key=lambda x: x[1])"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6') == '2'\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n2 4\\n5 6\") == 2\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n1 4\\n2 1\\n2 2\\n2 3\\n2 4\\n3 1\\n3 2\\n3 3\\n3 4\\n4 1\\n4 2\\n4 3\\n4 4\") == \"2\"\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2\\n2 4\\n5 6\\n') == '2'\nprint(solution(stdin))"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n1 2\n2 4\n5 6''') == '2'\nassert solution('''2\n1 2\n2 4''') == '1'\nassert solution('''2\n4 3\n4 3''') == '0'\nassert solution('''1\n2 2\n1 2''') == '0'\nassert solution('''1\n1 1\n1 1''') == '1'\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"hey\") == \"heey\"\nassert solution(\"Later!\") == \"Later!Alligator!\"\nassert solution(\"Everything is better with friends\") == \"Everything is better with friendsee\"\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('heey') == 'heeheey'\nassert solution('hell') == 'hllhll'\nassert solution('goodbye') == 'goodbyee'\nassert solution('Later!') == 'Later!Later!Later!'\n\"\"\""
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"hey\") == \"heey\"\nassert solution(\"hi\") == \"heehi\"\nassert solution(\"hello\") == \"heeelloo\"\nassert solution(\"bye\") == \"heey\"\nassert solution(\"Later!\") == \"Heellor!\"\n\n\"\"\""
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('hey') == 'hee'\nassert solution('helloy') == 'helloey'\nassert solution('hye') == 'hee'\nassert solution('heyy') == 'hee'\nassert solution('helloyy') == 'helloeye'\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"hey\") == \"heey\"\nprint(solution(\"hey\"))\nassert solution(\"hay\") == \"heeby\"\nprint(solution(\"hay\"))\nassert solution(\"bye\") == \"beey\"\nprint(solution(\"bye\"))\n\"\"\"\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('hey') == 'heey'\nassert solution('heeey') == 'heeeeey'\nassert solution('huhu') == 'huhuh'\nprint(\"All tests passed.\")\n\"\"\"\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('hey') == 'heey'\nprint(solution('hey'))\n\nassert solution('Later!') == 'Alligator!'\nprint(solution('Later!'))\n\nassert solution('I think') == 'Ieee'\nprint(solution('I think'))\n\nassert solution('I think') == 'Ieee'\nprint(solution('I think'))\n\nassert solution('Later!') == 'Alligator!'\nprint(solution('Later!'))"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"hey\") == \"heey\"\nassert solution(\"Later! Later! More! More! Much more!\") == \"heelee\"\n\"\"\"\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('hey') == 'heey'\nassert solution('hello') == 'heeelooo'\nassert solution('huh') == 'huhuhuhu'\nassert solution('bye') == 'byebyebye'\nassert solution('hi there') == 'hiiiiihiiiirreee'\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"hey\") == \"heey\"\nassert solution(\"hello\") == \"heeellooo\"\nassert solution(\"bye\") == \"bye\"\nassert solution(\"see you later\") == \"see you later\"\nassert solution(\"hello you\") == \"heey ouy\"\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == '1 2\\n1 3\\n1 4'\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\nassert solution('4\\n0 2 1 3\\n1 0 1 2\\n1 2 1 3\\n2 3 1 0') == '1 2\\n1 3\\n1 4'\nassert solution('4\\n0 1 1 3\\n1 0 1 2\\n1 2 1 3\\n2 3 1 0') == '1 2\\n1 3\\n1 4'\nassert solution('4\\n0 1 1 2\\n1 0 1 3\\n1 2 1 3\\n2 3 1 0') == '1 2\\n1 3\\n1 4'\nassert solution('4\\n0 1 1 3\\n1 0 1 2\\n1 2 1 3\\n2 3 1 0') == '1 2\\n1 3\\n1 4'\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\nassert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\\n2 3\"\nassert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\\n2 3\"\nassert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\\n2 3\"\nassert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\\n2 3\"\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\nassert solution('1\\n2') == '1 2'\n\nassert solution('3\\n1 2\\n3 4') == '1 2\\n3 1\\n2 3'"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\nassert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\n\"\"\"\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0''') == '1 2\\n1 3\\n1 4'\n\nimport sys; from itertools import combinations\n\nn = int(sys.stdin.readline())\nm = sys.stdin.readlines()\nl = []\n\nfor i in m:\n    l.append([int(j) for j in i.split()])\n\nl1 = []\n\nfor i in range(n):\n    l1.append(l[i][0])\n\nl2 = list(combinations(l1, n - 1))\nl2.sort()\nl2 = [list(l) for l in l2]\n\nl3 = []\n\nfor i in range(len(l2)):\n    l4 = []\n    l5 = l2[i]\n    for j in range(len(l5)):\n        for k in range(n):\n            if k!= j:\n                l4.append(l5[k])\n    l4 = sorted(l4)\n    l3.append(l4)\n\nl6 = []\n\nfor i in range(len(l3)):\n    l7 = []\n    l7.append(l3[i][0])\n    l7.append(l3[i][1])\n    l6.append(l7)\n\nfor i in range(len(l6)):\n    print(str(l6[i][0]) +'' + str(l6[i][1]))"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0''') == '1 2\\n1 3\\n1 4'\n\nassert solution('''5\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0\n3 4 4 0''') == '1 2\\n1 3\\n1 4\\n2 4\\n3 4'\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\nassert solution('AJRBKSC') == 'ABCD'\n\"\"\"\n\nfrom string import ascii_uppercase"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nassert solution(\"KFGHIZJLKMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nassert solution(\"AGAJRRUNTFAKUIOZBVJMZWQ\") == \"ABCD\"\nassert solution(\"LQQWMIKKXWIMNLZQKMHYADQ\") == \"ABCD\"\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\n\"\"\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nassert solution(\"ZRKBCS\") == \"ABCD\"\n\"\"\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\""
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\nassert solution('ZZZW') == 'ABZAB'\nassert solution('AJRB') == 'BKSC'\nassert solution('ZZZ') == 'ABC'\nassert solution('BZQR') == 'ABC'\n\"\"\""
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\n\"\"\""
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\n\"\"\""
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\nassert solution('QFUAJFTRS') == 'CBAZKXWTY'\nassert solution('VBGFTWGRU') == 'UZWFGTCKH'"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('abcdefg') == 0\nassert solution('aaabccdd') == 2\n\"\"\"\n\nfrom typing import List, Dict\n\n\nclass Solution:\n    def minimum_remove(self, s: str) -> int:\n        result = 0\n        for i in range(len(s)):\n            count = 0\n            for j in range(len(s)):\n                if s[i] == s[j]:\n                    count += 1\n            if count % 2!= 0:\n                result += 1\n        return result\n\n    def minimum_remove_2(self, s: str) -> int:\n        # My solution\n        if s == '':\n            return 0\n        if len(s) == 1:\n            return 0 if s[0] == 'a' else 1\n\n        result = 0\n        dict = {}\n\n        for ch in s:\n            if ch not in dict.keys():\n                dict[ch] = 0\n            dict[ch] += 1\n\n        for key in dict:\n            if dict[key] % 2 == 1:\n                result += 1\n            if dict[key] > 1 and dict[key] % 2 == 1:\n                result += 1\n\n        return result\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"abcc\") == 1\nassert solution(\"abcd\") == 3\n\n-----Notes-----\nThe solution is a classic programming question: \u201cHow many characters can we remove from a string, so that the string becomes a palindrome\u201d.\n\nThe solution is also a classic programming question. \n\n\"\"\"\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 0\nassert solution('a') == 1\nassert solution('ab') == 1\nassert solution('abb') == 1\nassert solution('abab') == 1\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"abccba\") == 1\nassert solution(\"a\") == 0\nassert solution(\"bb\") == 0\nassert solution(\"bac\") == 0\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abc') == 2\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abc') == 2\nassert solution('abcba') == 0\nassert solution('ab') == 1\nassert solution('aaa') == 0\n\n\"\"\"\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abc') == 2\nassert solution('abac') == 0\nassert solution('abccba') == 1\n\n-----Constraints-----\nTime limit: 20 seconds per test set.\nMemory limit: 1 GB.\n-----Sources-----\n'''"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abc') == 2\n\n------Solution------"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abc\") == 2\n\"\"\""
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abc') == 2\n\nSample Input:\nabcd\nSample Output:\n0\n\"\"\"\n\nimport math"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aaah\") == \"no\"\nassert solution(\"h\") == \"go\"\nassert solution(\"aaaaah\") == \"no\"\nassert solution(\"ah\") == \"go\"\nassert solution(\"aaaaaah\") == \"go\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"hhhhh\") == \"no\"\n\"\"\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aaah') == 'go'\nassert solution('aaaah') == 'no'\nassert solution('aaaaaah') == 'go'\nassert solution('aahah') == 'no'\n\n\"\"\""
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aaah\") == \"no\"\nassert solution(\"aaaaaah\") == \"go\"\n\n\"\"\""
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aaah\") == \"no\"\nassert solution(\"aaaaaah\") == \"no\"\nassert solution(\"h\") == \"go\"\nassert solution(\"hh\") == \"go\"\nassert solution(\"hh\") == \"no\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaah\") == \"no\"\nassert solution(\"aaaaaah\") == \"go\"\n\"\"\"\n\nstdin = \"aaah\"\nstdin2 = \"aaaaaah\"\n\nfor i in range(1, 1000):\n    if i % 10 == 0:\n        stdin = stdin + \"a\" + \"h\" * i\n    else:\n        stdin = stdin + \"a\" * i + \"h\"\n\nprint(stdin)"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaahhh\") == \"no\"\n\"\"\"\n\nstdin = \"aaah\"\naaah = \"aaaaaah\""
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aaah') == 'no'\nassert solution('aaaaah') == 'go'"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aaah') == 'go'\nassert solution('aaaaah') == 'no'\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aaah\") == \"no\"\nassert solution(\"aaaaaaah\") == \"go\"\nassert solution(\"aaaaaah\") == \"no\"\nassert solution(\"h\") == \"go\"\n\nprint(solution(\"aaah\"))\nprint(solution(\"aaaaaaah\"))\nprint(solution(\"aaaaaah\"))\nprint(solution(\"h\"))\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n\"\"\"\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A1B1B1A1B1B2A1A1B1\") == \"B\"\n\"\"\"\n\nstdin = \"A2B1A2B2A1A2A2A2\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('A2B1A2B2A1A2A2A2') == 'A'\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A2B1A2B2A1A2A2A2\") == \"B\"\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"B2B1B2B2B1A2A2A2\") == \"B\"\nassert solution(\"B2B1B2B2B1A2B1A2A2A2\") == \"B\"\nassert solution(\"A2A1B2B2B1A2A2A2\") == \"A\"\nassert solution(\"A2B2A1B1A2A2A2\") == \"A\"\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'A'\nassert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('A1B1A2B2A2B2') == 'B'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A2B1A2B2A1A2A2A2B2A2A1B1A2A2A2A2B1\") == \"A\"\n\"\"\"\n\n\nimport ast\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2 1') == '1'\nassert solution('1 2') == '1'\nassert solution('1 2 100') == '102'\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\") == \"21\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2 1\\n3 3 2\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15') == '21'\nassert solution('6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15') == '21'\n\nprint(solution(input()))\n\n'''"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15') == '21'\nassert solution('4 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15') == '7'\n\"\"\"\nimport sys\n\ninput = sys.stdin.readline"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\\n') == '21'\n\n----"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\\n\") == \"21\"\n\n\"\"\"\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\") == \"21\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\") == \"21\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n2 3 8\\n1 2 2\\n2 3 8') == '16'\n\"\"\"\n\nfrom collections import defaultdict\n\n\nclass Graph:\n    def __init__(self):\n        self.graph = defaultdict(list)\n    \n    def addEdge(self, u, v):\n        self.graph[u].append(v)\n    \n    def DFSUtil(self, v, visited):\n        visited.add(v)\n        print(v, end=' ')\n        \n        for neighbour in self.graph[v]:\n            if neighbour not in visited:\n                self.DFSUtil(neighbour, visited)\n    \n    def DFS(self, v):\n        visited = set()\n        self.DFSUtil(v, visited)\n    \n    def BFS(self, s):\n        queue = []\n        queue.append(s)\n        \n        while queue:\n            s = queue.pop(0)\n            print(s, end=' ')\n            \n            for neighbour in self.graph[s]:\n                queue.append(neighbour)\n        "
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\\n') == '21'\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\n\"\"\"\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\n\"\"\""
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\nassert solution(\"D H3e2l3o1W1o3r4l2d1!2\") == \"HHHeellloWooorrrrlld!!\"\nassert solution(\"D 12345678901234567890\") == \"HH3e3l3o1W3o3r3l3d1!2\"\n\"\"\""
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\n\n\"\"\""
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('D HHeellloWooorrrrlld!!') == 'HHHeellloWooorrrrlld!!'\nassert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\nassert solution('E HHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\nassert solution('E HHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('H3e2l3o1W1o3r4l2d1!2') == 'HHHEELLLLOOOOOWWWRRRRRRRRRLLLLLLLLDDDDDDDD'\n'''\n\nimport re\n\nencoding_pattern = re.compile(r'^E (.*)$')\ndecoding_pattern = re.compile(r'^D (.*)$')\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\n\"\"\"\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\nassert solution(\"D qqiwvwvwvvhv!1!1!1!2!3\") == \"q1w2v3w4!1!1!1!2!3\"\n\"\"\"\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\""
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\n\"\"\"\n\nimport os\nimport sys\nfrom collections import defaultdict\nimport pprint\nimport logging\n\nlogging.basicConfig(filename='output.log', level=logging.DEBUG, format='%(message)s')\nlogging.debug('Start of program')"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n\") == \"Alice\"\nassert solution(\"4\\n\") == \"1\"\nassert solution(\"6\\n\") == \"Bob\"\nassert solution(\"8\\n\") == \"3\"\nassert solution(\"10\\n\") == \"3\"\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n\") == \"Alice\"\nassert solution(\"5\\n\") == \"Bob\"\nassert solution(\"7\\n\") == \"Alice\"\nassert solution(\"11\\n\") == \"Bob\"\nassert solution(\"1\\n\") == \"Alice\"\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Alice\"\nassert solution(\"3\") == \"Bob\"\n\nassert solution(\"4\") == \"Alice\"\nassert solution(\"5\") == \"Bob\"\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == 'Alice'\nassert solution('5') == 'Bob'\nassert solution('4') == 'Alice'\n\"\"\""
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == 'Alice'\nassert solution('3') == 'Bob'\nassert solution('10') == 'Alice'\nassert solution('11') == 'Alice'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"7\") == \"Bob\""
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\nassert solution(\"1\") == \"Bob\"\nassert solution(\"5\") == \"Alice\"\n\"\"\"\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"3\") == \"Bob\"\nassert solution(\"4\") == \"Alice\"\nassert solution(\"6\") == \"Alice\"\nassert solution(\"7\") == \"Bob\"\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n') == 'Alice'\nassert solution('1\\n') == 'Bob'\nassert solution('7\\n') == 'Bob'\nassert solution('11\\n') == 'Alice'\nassert solution('9\\n') == 'Bob'\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n') == 'Alice'\nassert solution('3\\n') == 'Bob'\nassert solution('4\\n') == 'Alice'\nassert solution('5\\n') == 'Bob'\nassert solution('6\\n') == 'Alice'\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nprint(solution(\"5 3 8\"))\n\"\"\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\n\"\"\""
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 8') == '5 + 3 = 8'\n\"\"\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"2 6 7\") == \"2+6=10\"\nassert solution(\"2 6 7\") == \"2+6=10\"\nassert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"2 6 7\") == \"2+6=10\"\n\"\"\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"2 5 7\") == \"2+5=7\"\nassert solution(\"5 3 3\") == \"5-3=2\"\nassert solution(\"5 3 1\") == \"5+3=8\"\nassert solution(\"5 3 8\") == \"5+3=8\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 8') == '5+3=8'\nassert solution('7 8 5') == '7+8=5'\nassert solution('13 4 2') == '13+4=2'\nassert solution('2 1 3') == '2+1=3'\nassert solution('2 5 7') == '2+5=7'\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"2 6 8\") == \"2+6=8\"\nassert solution(\"8 3 2\") == \"8+3=2\"\nassert solution(\"4 4 4\") == \"4+4=4\"\nassert solution(\"7 3 2\") == \"7+3=2\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 8') == '5 + 3 = 8'\n\"\"\"\nimport unittest\nimport sys\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"5 3 9\") == \"5+3=9\"\nassert solution(\"5 3 9\") == \"5+3=9\"\nassert solution(\"5 3 9\") == \"5+3=9\"\nassert solution(\"5 3 9\") == \"5+3=9\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''8\n3 2 2 1 1 3 1 1''') == 'YES'\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 1 1 3 1 1\") == \"YES\"\n\nSample Input:\n7\n1 1 1 1 1 1 1\nSample Output:\nNO\n\nSolution 1\n------------"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n2 2 2 1 1\n''') == 'YES'\n\nassert solution('''4\n1 2 2 1\n''') == 'YES'\n\nassert solution('''6\n2 2 2 1 1 1\n''') == 'NO'\n\nassert solution('''6\n2 2 1 1 1 1\n''') == 'NO'\n\nassert solution('''6\n3 2 2 1 1 1\n''') == 'NO'"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == 'YES'\n\"\"\"\n\nn = int(input())\nd = [int(i) for i in input().split()]\n\nd.append(0)\n\nd.sort()\n\nprint(\"YES\" if d[n - 1] - d[0] <= n - 1 else \"NO\")\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\nassert solution('8\\n3 2 2 1 1 3 3 1') == 'NO'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nd = [int(x) for x in sys.stdin.readline().split()]"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n3 2 2 1 1 3 1 1') == 'YES'\nassert solution('7\\n3 2 2 1 1 3 1 1') == 'NO'\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 2 1 1 3 1 1') == 'YES'\nassert solution('3 2 2 1 1 3 1 1') == 'NO'\nassert solution('6 6 6 6 6 6 6') == 'NO'\nassert solution('7 7 7 7 7 7 7') == 'YES'\nassert solution('8 8 8 8 8 8 8') == 'NO'"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1\n\"\"\"\n\nn = int(input())\nl = []\nfor i in range(n):\n    l.append(input())\n\ncat = set()\nfor i in range(n):\n    cat.add(l[i][0])\n\nprint(''.join(sorted(cat)))\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\"\nassert solution(\"ghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"mummy\"\nassert solution(\"ghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"witch\"\n\n:param stdin:\n:return:\n\"\"\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon') == 'ghost'\nassert solution('10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon') == 'ghost'\nassert solution('10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon') == 'ghost'\nassert solution('10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon') == 'ghost'\nassert solution('10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon') == 'ghost'\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\"\nassert solution(\"5\\ndemon\\nmummy\\ndemon\\ndemon\\nwitch\") == \"demon\"\nassert solution(\"7\\nmummy\\nmummy\\nmummy\\ndemon\\nwitch\\ndemon\") == \"mummy\"\n\"\"\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"10\"\n) == \"ghost\"\n\"\"\"\n\nimport unittest\nimport collections\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nghost\\nmummy\\nwitch\\ndemon\") == 'ghost'\nassert solution(\"5\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\") == 'ghost'\n\"\"\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'GHIJKLMNOPQRSTUVWXYZ'\nassert solution('ABCDEFGHIJKLMNOPQRSTUVWXYZ').upper() == 'GHIJKLMNOPQRSTUVWXYZ'\n'''\n\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcd\") == \"abcd\"\nassert solution(\"abcde\") == \"abcd\"\nassert solution(\"aabcd\") == \"aabcd\"\nassert solution(\"aabcdee\") == \"aabcd\"\nassert solution(\"aabcdeee\") == \"aabcd\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon') == 'ghost'\nassert solution('5\\nghost\\nmummy\\nwitch\\ndemon\\ndemon') == 'ghost\\nmummy\\nwitch'\nassert solution('5\\nghost\\nmummy\\nwitch\\ndemon\\ndemon') == 'ghost\\nmummy\\nwitch'\n\"\"\"\n\n\nimport re"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\") == \"Artist Album Song_Title Length_seconds\"\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\\n\") == '\\nArtist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n'\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('Artist Album Song_Title Length_seconds') == '''Artist Album Song_Title Length_seconds\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n'''\nassert solution('Artist Album Song_Title Length_seconds') == '''Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n'''\n\"\"\"\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''Artist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title''') == '''Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n'''\n\nassert solution('''Artist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title''') == '''Artist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\n'''\n'''\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\") == \"\"\"\\\nArtist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\") == '\\nArtist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\n'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n\"\n                \"5\\n\"\n                \"Tchaikovsky Piano_Favorites November 163\\n\"\n                \"James_Taylor Dad_Loves_His_Work Hard_Times 192\\n\"\n                \"James_Taylor Dad_Loves_His_Work London_Town 236\\n\"\n                \"James_Taylor Dad_Loves_His_Work Summers_Here 163\\n\"\n                \"George_Winston Summer Lullaby 215\\n\") == \\\n        (\"Artist Album Song_Title Length_seconds\\n\"\n        \"Tchaikovsky Piano_Favorites November 163\\n\"\n        \"George_Winston Summer Lullaby 215\\n\"\n        \"James_Taylor Dad_Loves_His_Work Hard_Times 192\\n\"\n        \"James_Taylor Dad_Loves_His_Work London_Town 236\\n\"\n        \"James_Taylor Dad_Loves_His_Work Summers_Here 163\\n\")\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n\"\"\"\n\nassert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nAlbum\\nArtist\\nSong_Title\") == \"\"\"Album Artist Song_Title\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n\"\"\"\n\nassert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nSong_Title\\nAlbum\\nArtist\") == \"\"\"Song_Title Artist Album\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\n\"\"\"\n\nassert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nLength_seconds\\nAlbum\\nArtist\\nSong_Title\") == \"\"\"Length_seconds Album Artist Song_Title\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n\"\"\"\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('Artist Album Song_Title Length_seconds') == '''Artist Album Song_Title Length_seconds\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n'''\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\") == \"Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\"\nprint('Correct')\n\"\"\""
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\n\nassert solution('1 10 7\\n5 5 5 5 5 5 5') == 'YES'\n\nassert solution('2 10 7\\n4 4 4 4 4 4 4') == 'NO'\n\nassert solution('2 10 7\\n2 2 2 2 2 2 2') == 'NO'\n\nassert solution('2 10 7\\n1 1 1 1 1 1 1') == 'NO'\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('2 10 7\\n5 4 4 4 4 4 4') == 'NO'\nassert solution('2 10 7\\n5 5 5 4 5 5') == 'NO'\nassert solution('2 10 7\\n5 5 5 5 3 5') == 'NO'\nassert solution('2 10 7\\n5 5 5 5 5 1') == 'NO'\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('2 10 7\\n4 4 4 4 4 4 4') == 'NO'\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'YES'\nassert solution('5 5 7') == 'YES'\nassert solution('3 5 4') == 'NO'\nassert solution('3 10 7') == 'NO'\nassert solution('1 2 3 4 5') == 'NO'\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('2 10 7\\n1 1 1 1 1 1 1') == 'NO'\nassert solution('2 10 7\\n5 5 5 5 5 5') == 'YES'\nassert solution('2 10 7\\n5 4 5 5 5') == 'NO'\nassert solution('2 10 7\\n5 5 5 5 5') == 'YES'\n\n'''\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'NO'\nassert solution('1 1 1 1 1 1 1 1') == 'YES'\nassert solution('2 10 7') == 'YES'\nassert solution('2 10 7') == 'NO'\nassert solution('2 10 7') == 'YES'\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 10 7\n5 5 5 5 5 5 5''') == 'YES'\nassert solution('''2 10 7\n5 5 5 5 5 5 5''') == 'NO'\nassert solution('''2 10 7\n5 5 5 5 5 5 5''') == 'NO'\nassert solution('''2 10 7\n5 5 5 5 5 5''') == 'NO'\nassert solution('''2 10 7\n5 5 5 5 5''') == 'NO'\n''') == 'YES'\n\n'''"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\nassert solution(\"1 10 1\\n10\") == \"YES\"\nassert solution(\"1 10 1\\n2\") == \"NO\"\nassert solution(\"1 10 2\\n2 1\") == \"YES\"\nassert solution(\"1 10 1\\n2 2\") == \"NO\"\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\nassert solution(\"3 10 6\\n2 2 2\") == \"YES\"\nassert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\nassert solution(\"3 10 6\\n4 4 4\") == \"NO\"\nassert solution(\"1 10 1\\n100\") == \"YES\"\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\") == \"Not Effective\\n66.666667\\n50.000000\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\nNYNY\\nNNYY\\nNYYY\\nNYYN') == 'Not Effective\\n66.666667\\n50.000000'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('NYNYNNY') == '66.666667'\nassert solution('YYYNYNNN') == '50.000000'\nassert solution('NNNNYYNN') == 'Not Effective'\nassert solution('NNNNNNY') == 'Not Effective'\nassert solution('NYNNNNN') == 'Not Effective'\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\") == \"Not Effective\\n66.666667\\n50.000000\"\nassert solution(\"5\\nNYNY\\nNNNY\\nYYNY\\nYYNN\") == \"66.666667\\nNot Effective\"\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n10\nNYNY\nNNYY\nNYYY\nNYYN\nNNNY\nYYNN\nYYYN\nYYNY\nYYNN\nYYNY\n''') == '''\nNot Effective\n66.666667\n50.000000\n'''\n\n'''\nCopyright @ Alexander\n'''\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nNYNY\\nNNYY\\nNYYY\\nNYYN') == '66.666667'\nassert solution('4\\nNYNN\\nNNYY\\nNYYY\\nNYYN') == '50.000000'\nassert solution('4\\nYNNN\\nNNYY\\nYNNN\\nYNNN') == 'Not Effective'\nassert solution('4\\nYYNN\\nYYNN\\nYYNN\\nYYNN') == 'Not Effective'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\") == \"66.666667\\n50.000000\"\nassert solution(\"10\\nNNYY\\nYYNN\\nYYNY\\nNNNY\\nYYNN\\nYYYN\\nYYNY\") == \"Not Effective\\n50.000000\"\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"YYNN\") == \"66.666667\"\nassert solution(\"YYNN\") == \"50.000000\"\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\") == 'Not Effective\\n66.666667\\n50.000000'\nassert solution(\"3\\nNYYY\\nYYNN\\nYYNY\") == 'Not Effective\\n0.0\\n0.0'\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\nYYYY\nYYNY\nYYYN\nYYYY''') == '66.666667'\n\nassert solution('''5\nNYYY\nYYNY\nYYNY\nYYYY\nNYYY''') == 'Not Effective'\n\nassert solution('''6\nNYNN\nNNNY\nNNNN\nNNNN\nNNNN''') == '50.0'\n\nassert solution('''4\nNNNN\nNNNN\nNNNY\nNNYY''') == 'Not Effective'\n\nassert solution('''10\nYYYY\nYYYY\nYYYY\nYYYY\nYYYY\nYYYY\nYYYY\nYYYY\nYYYY\nYYYY\nYYYY''') == 'Not Effective'"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BAACC\") == \"Bruno\"\nassert solution(\"CCBAAA\") == \"Adrian\"\nassert solution(\"CAABB\") == \"Goran\"\nassert solution(\"ABAABB\") == \"Bruno\"\nassert solution(\"CAAAB\") == \"Goran\"\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BAACC\") == 3\nassert solution(\"CABBC\") == 2\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"BAACC\") == \"3\"\nassert solution(\"CACB\") == \"C\"\nassert solution(\"CCCA\") == \"A\"\n\n\"\"\""
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('BAACC') == 3\nassert solution('BBBCC') == 2\nassert solution('CBABC') == 3\nassert solution('CCBAA') == 3\nassert solution('CAACC') == 3\n\nprint(solution(stdin.rstrip()))\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"BAACC\") == \"3\"\nassert solution(\"CCAABB\") == \"2\"\nassert solution(\"AAABB\") == \"2\"\nassert solution(\"CBABB\") == \"1\"\nassert solution(\"BCBC\") == \"3\"\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BAACC\") == \"Bruno\"\nassert solution(\"BCCA\") == \"Goran\"\nassert solution(\"BBB\") == \"Bruno\"\n\n\"\"\"\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"AAB\"\n) == \"Adrian\"\nassert solution(\n\"ABC\"\n) == \"Goran\"\nassert solution(\n\"BAC\"\n) == \"Bruno\"\nassert solution(\n\"CCC\"\n) == \"Adrian\"\nassert solution(\n\"CAB\"\n) == \"Bruno\"\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('BAACC') == '3'\nassert solution('BAABC') == 'Adrian'\nassert solution('BABAC') == 'Bruno'\nassert solution('ACBAC') == 'Goran'\nassert solution('ABBAA') == 'Bruno'\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BAACC\") == 3\nassert solution(\"BBACB\") == 2\nassert solution(\"BAAAC\") == 3\nassert solution(\"ABABC\") == 3\nassert solution(\"CABBC\") == 2\n\n\"\"\"\n\nstdin = input()\n\nprint(max([(stdin.count(letter), letter) for letter in set(stdin)]))\n\n\"\"\""
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"BAACC\") == \"3\", f\"Actual: {solution('BAACC')}\"\n\n-----Constraints-----\n$1 \\le N \\le 100$\n\n$A$, $B$, and $C$ are all distinct.\n\"\"\""
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\nassert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\nassert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\nassert solution(\"7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n-1\") == \"4 502\"\nassert solution(\"7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n-1\") == \"4 502\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\"\"\") == \"3 543\"\n\n\"\"\"\nAll submissions during a contest are processed simultaneously. A team will receive all submissions made during the contest and its submissions will be stored in a log. As soon as a team receives its submissions, it will test all the submissions from the log.\n\nIf the team's submissions are processed sequentially, its total time score and rank is calculated and returned. However, a team cannot process its submissions in order, because if two submissions are made during the contest at the same time, they are indistinguishable. For example, consider a team that receives the following log:\n\n1 H right\n2 A wrong\n3 E wrong\n4 E right\n5 A wrong\n6 E wrong\n7 E wrong\n8 E wrong\n9 D wrong\n10 A wrong\n11 A right\n12 C wrong\n13 C right\n14 B wrong\n15 B right\n16 D wrong\n17 E wrong\n18 C right\n19 D wrong\n20 A wrong\n21 E wrong\n22 C wrong\n23 D right\n24 E wrong\n25 C right\n26 D right\n27 B wrong\n28 D wrong\n29 A wrong\n30 E wrong\n31 E wrong\n32 D wrong\n33 B wrong\n34 E right\n35 B right\n36 E right\n37 C wrong\n38 C right\n39 D wrong\n40 E wrong\n41 C right\n42 D wrong\n43 D wrong\n44 B wrong\n45 E right\n46 C right\n47 D right\n48 A right\n49 A right\n50 B wrong\n51 B wrong\n52 D wrong\n53 B wrong\n54 B wrong\n55 E wrong\n56 E right\n57 C wrong\n58 C wrong\n59 D wrong\n60 E wrong\n61 C right\n62 E right\n63 C wrong\n64 E wrong\n65 E right\n66 C wrong\n67 B right\n68 E right\n69 D wrong\n70 B wrong\n71 C wrong\n72 E wrong\n73 E right\n74 C wrong\n75 D wrong\n76 E right\n77 E wrong\n78 B wrong\n79 D right\n80 D wrong\n81 E wrong\n82 C wrong\n83 E wrong\n84 E wrong\n85 D wrong\n86 E wrong\n87 A wrong\n88 D wrong\n89 A wrong\n90 C wrong\n91 A wrong\n92 B right\n93 C wrong\n94 D wrong\n95 E wrong\n96 E wrong\n97 B wrong\n98 C right\n99 D right\n100 A right\n101 A right\n102 B wrong\n103 E wrong\n104 C wrong\n105 D right\n106 E right\n107 E wrong\n108 A wrong\n109 B wrong\n110 B wrong\n111 B right\n112 A wrong\n113 A wrong\n114 E wrong\n115 D right\n116 A right\n117 E right\n118 A right\n119 C wrong\n120 D wrong\n121 E right\n122 B wrong\n123 C right\n124 C right\n125 B right\n126 D right\n127 E right\n128 A right\n129 C wrong\n130 D wrong\n131 C wrong\n132 E wrong\n133 E right\n134 E right\n135 E right\n136 D right\n137 A right\n138 A right\n139 B right\n140 D right\n141 E wrong\n142 A right\n143 B right\n144 E right\n145 D wrong\n146 E right\n147 E right\n148 B wrong\n149 A right\n150 A right\n151 B right\n152 D right\n153 E wrong\n154 E wrong\n155 E wrong\n156 E right\n157 B right\n158 C right\n159 B wrong\n160 E right\n161 D wrong\n162 E right\n163 D wrong\n164 D wrong\n165 B right\n166 D right\n167 A right\n168 D right\n169 D right\n170 D right\n171 A right\n172 C wrong\n173 E right\n174 B wrong\n175 D wrong\n176 D right\n177 E right\n178 E right\n179 A right\n180 B wrong\n181 B wrong\n182 B right\n183 B right\n184 D wrong\n185 C wrong\n186 D wrong\n187 E wrong\n188 E wrong\n189 D wrong\n190 A wrong\n191 D wrong\n192 D right\n193 E wrong\n194 D right\n195 B wrong\n196 D wrong\n197 C wrong\n198 D wrong\n199 E wrong\n200 A wrong\n201 E wrong\n202 D right\n203 B wrong\n204 C wrong\n205 C wrong\n206 E wrong\n207 A wrong\n208 D right\n209 E wrong\n210 D right\n211 A wrong\n212 E wrong\n213 C wrong\n214 D wrong\n215 B wrong\n216 B wrong\n217 D right\n218 B right\n219 B right\n220 D wrong\n221 D wrong\n222 B wrong\n223 B wrong\n224 D wrong\n225 A wrong\n226 B wrong\n227 D wrong\n228 E wrong\n229 E right\n230 D wrong\n231 D wrong\n232 D wrong\n233 B wrong\n234 D wrong\n235 D right\n236 A wrong\n237 C wrong\n238 D wrong\n239 E right\n240 C wrong\n241 B right\n242 B right\n243 E right\n244 B wrong\n245 A wrong\n246 B wrong\n247 A wrong\n248 E wrong\n249 E wrong\n250 C wrong\n251 D wrong\n252 E wrong\n253 C wrong\n254 D wrong\n255 C right\n256 B right\n257 A right\n258 E right\n259 B wrong\n260 A right\n261 C right\n262 A right\n263 B right\n264 E wrong\n265 E right\n266 A right\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\n\"\"\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_cases.txt_0) == \"3 543\"\nassert solution(test_cases.txt_1) == \"0 543\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == (3, 543)\n\"\"\"\n\nimport re\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n\nassert Solution().solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == (3, 543)\nassert Solution().solution(\"1 A right\\n-1\") == (1, 300)\nassert Solution().solution(\"1 A wrong\\n1 B wrong\\n1 C wrong\\n1 D wrong\\n-1\") == (0, 0)\nassert Solution().solution(\"1 A right\\n10 A wrong\\n30 A wrong\\n50 A wrong\\n100 A wrong\\n200 A right\\n250 A wrong\\n300 A wrong\\n-1\") == (1, 300)\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\"\"\") == (3, 543)\n\"\"\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n''') == '3 543'\nassert solution('''7 H right\n15 B wrong\n30 E wrong\n35 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong\n''') == '4 502'\nassert solution('''7 H right\n15 B wrong\n30 E wrong\n35 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong\n''') == '4 502'\nassert solution('''1 H right\n2 B wrong\n3 E wrong\n4 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong\n''') == '0 0'\nassert solution('''1 H right\n2 B wrong\n3 E wrong\n4 E right\n80 B wrong\n80 B right\n100 D wrong\n100 C wrong\n300 C right\n300 D wrong\n''') == '0 0'\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\") == \"3 543\"\nassert solution(\"7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\") == \"4 502\"\nassert solution(\"7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\") == \"4 502\"\n\"\"\"\n\nimport collections\nfrom typing import List"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\nassert solution(\"4 A right\\n5 C right\\n8 A right\\n10 D wrong\\n-1\") == \"4 10\"\n\"\"\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == [3, 543]\nassert solution(\"7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n\") == [4, 502]\nassert solution(\"7 H right\\n15 B wrong\\n30 E wrong\\n35 E right\\n80 B wrong\\n80 B right\\n100 D wrong\\n100 C wrong\\n300 C right\\n300 D wrong\\n\") == [4, 502]\n\"\"\"\nimport io\nimport os\nimport sys\nfrom collections import Counter\nfrom typing import List\nfrom collections import defaultdict\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == -1\nassert solution('3\\n1 5 1 1 2 5 4 1 5 3') == 5\n'''\n\nn, k = [int(x) for x in input().split()]\ntiles = [[int(y) for y in input().split()] for i in range(n)]\n\n'''\nimport collections\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1') == 1\n\"\"\"\n\nimport sys\nimport ast"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\") == \"5\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '5'\nassert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '-1'\n\n-------"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input) == output\n\"\"\"\n\n\"\"\"\nGame Hopscotch\n=========\n\nYou are given an n by n matrix of positive integers (n >= 1). The matrix represents a hopscotch board, where the ith element of the matrix is the number of hops to get to the tile with number i + 1. Each hop is an integer from 1 to 9.\n\nTo jump, you must move exactly one tile from one number to the next number. That is, the distance between any two tiles must be exactly one. The hopscotch board must be filled in a continuous line, and the starting tile must be 1. The board can only contain numbers from 1 to n^2 (inclusive).\n\nFor example, if n = 5, then the hopscotch board can only contain the numbers 1 through 25. For this board, the hopscotch sequence is as follows:\n\n1 2 4 3 5\n2 1 3 4 5\n3 1 2 4 5\n4 1 3 2 5\n5 1 2 3 4\n\nYou are also given an integer n. Write a function called solution(matrix, n) which returns the hopscotch sequence of length n.\n\nFor example, if matrix = [[1,2,3],[4,5,6],[7,8,9]] and n = 5, then solution(matrix, n) should return the list [1,2,4,3,5].\n\nThe input matrix and n will always be valid hopscotch boards, and n will always be a valid number of hops.\n\nThe solution is guaranteed to have length n.\n\nThe first line of input contains two space-separated integers, n and k, where n is the number of rows in the hopscotch board (i.e., n is the length of the list), and k is the number of hops.\n\nEach of the following n lines contains n space-separated integers, which are the ith element of the hopscotch board.\n\nThe output is the hopscotch sequence of length n.\n\nConstraints\n- 1 <= n <= 50\n- 1 <= k <= n^2\n- There are exactly n^2 integers in the input.\n- All the numbers in the hopscotch board are in range [1, k + 1].\n- The hopscotch board can be filled in a continuous line, starting with tile 1.\n\n\"\"\"\n\n\"\"\"\nSolution\n========\n\nWe can solve this problem by looking at the rows. When we jump from one row to another, we may have to hop at least the minimum number of steps required to move from the previous row to the current one. \n\nFor each row, we can compute the minimum number of steps required to move from the previous row to the current one. We can do this by finding the minimum number of steps we could have taken from the previous row to the next row. If there is no previous row (i.e., we are on the first row), then we must hop at least 1, because we cannot hop to the previous row.\n\nOnce we have computed the minimum number of steps required to move from the previous row to the current row, we can compute the minimum number of steps required to move from the current row to the next row. If there is no next row (i.e., we are on the last row), then we must hop at least 1, because we cannot hop to the next row.\n\nWe can compute the minimum number of steps required to move from the previous row to the current row and from the current row to the next row as follows:\n\nAt the start of the game, the minimum number of steps required to move from the previous row to the current row is 0, and the minimum number of steps required to move from the current row to the next row is 0.\n\nWe want to return the minimum number of steps required to move from the previous row to the current row and from the current row to the next row.\n\n\"\"\""
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == \"5\"\n\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\nart = [[int(i) for i in sys.stdin.readline().split()] for i in range(n)]\ndp = [[0 for i in range(n)] for j in range(n)]\ndp[0][0] = 1\n\nfor i in range(n):\n    for j in range(n):\n        if i!= 0 and art[i][j] - art[i - 1][j] > 0:\n            if dp[i][j] == 0 or dp[i][j] > dp[i - 1][j] + 1:\n                dp[i][j] = dp[i - 1][j] + 1\n        if j!= 0 and art[i][j] - art[i][j - 1] > 0:\n            if dp[i][j] == 0 or dp[i][j] > dp[i][j - 1] + 1:\n                dp[i][j] = dp[i][j - 1] + 1\n        if j!= 0 and i!= 0 and art[i][j] - art[i - 1][j - 1] > 0:\n            if dp[i][j] == 0 or dp[i][j] > dp[i - 1][j - 1] + 1:\n                dp[i][j] = dp[i - 1][j - 1] + 1\nprint(dp[-1][-1])\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '5'\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\\n\") == \"5\"\n\n\"\"\"\n\nimport sys\n\nn, k = map(int, input().split())\ntile_map = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\\n\") == \"5\"\n\"\"\"\nimport sys\nimport re\nimport math"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"2\n1 7\n5 5\"\"\") == \"gunilla has a point\"\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 7\\n5 5') == 'gunilla has a point'\nassert solution('1\\n2') == 'edward is right'\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2\n1 7\n5 5''') == 'gunilla has a point'\n\nassert solution('''5\n2 4\n7 9\n5 12\n2 7\n8 9\n3 5\n1 7\n8 9\n2 5\n8 9\n5 5\n1 7\n2 8\n8 9\n2 4\n5 8\n7 7\n4 8\n1 8\n1 7\n2 3\n5 5\n2 7\n2 7\n5 8\n4 4\n8 6\n5 9\n2 8\n8 5\n5 4\n7 7\n8 6\n5 6\n2 2\n4 2\n4 2\n6 4\n8 5\n5 3\n5 7\n8 7\n6 7\n5 5\n5 5\n6 5\n5 6\n3 5\n3 5\n7 3\n6 6\n8 8\n5 3\n6 6\n5 4\n4 5\n5 5\n5 6\n8 3\n5 7\n6 5\n8 3\n5 4\n8 6\n5 7\n5 8\n8 7\n5 5\n5 5\n3 5\n5 5\n6 6\n5 7\n6 6\n6 6\n7 7\n5 5\n2 4\n3 2\n3 3\n8 4\n3 3\n3 2\n6 6\n3 7\n4 5\n8 4\n3 6\n3 6\n4 4\n6 7\n6 7\n3 5\n5 6\n5 4\n4 6\n5 5\n5 5\n3 3\n5 4\n2 2\n2 7\n5 5\n3 5\n8 6\n5 6\n5 4\n6 7\n8 5\n5 6\n7 7\n2 3\n7 7\n5 8\n8 6\n8 7\n7 7\n5 2\n7 9\n6 7\n3 4\n5 2\n4 5\n8 3\n7 8\n6 7\n8 5\n2 4\n5 4\n6 5\n6 6\n4 4\n7 7\n3 4\n7 8\n6 7\n4 3\n6 6\n2 7\n4 8\n3 6\n3 7\n5 7\n8 7\n7 7\n6 6\n3 5\n8 7\n7 6\n7 4\n4 6\n8 5\n4 4\n5 3\n6 6\n5 8\n6 6\n4 5\n7 8\n5 5\n5 2\n5 5\n2 2\n5 3\n2 4\n3 5\n5 6\n6 7\n5 2\n8 4\n7 7\n5 6\n4 3\n5 2\n6 2\n5 4\n2 5\n7 6\n8 7\n6 6\n8 5\n3 4\n4 4\n5 8\n5 5\n2 3\n6 7\n5 4\n5 5\n5 6\n2 7\n7 8\n5 3\n5 2\n6 6\n4 8\n5 2\n7 7\n3 5\n7 6\n4 3\n2 4\n7 8\n2 7\n4 4\n2 5\n8 7\n5 2\n5 3\n4 6\n2 2\n8 7\n6 7\n3 4\n5 7\n5 8\n3 4\n4 8\n4 8\n8 5\n6 3\n6 4\n7 8\n6 5\n6 6\n7 7\n4 8\n4 4\n8 7\n7 6\n7 7\n4 5\n3 6\n2 7\n6 7\n5 6\n5 2\n3 5\n3 3\n5 6\n4 7\n6 7\n5 3\n5 2\n4 8\n3 7\n5 6\n7 7\n3 4\n6 7\n6 7\n5 2\n2 7\n4 6\n7 8\n5 2\n7 7\n5 8\n3 5\n7 7\n6 7\n7 6\n3 5\n6 6\n5 6\n7 6\n6 7\n8 6\n8 7\n3 4\n5 4\n8 6\n2 6\n5 7\n7 7\n4 8\n7 6\n3 6\n5 6\n8 6\n7 6\n5 7\n6 6\n5 7\n6 7\n5 8\n3 6\n7 7\n6 6\n5 6\n5 3\n2 7\n8 6\n7 7\n6 7\n5 5\n6 7\n5 7\n4 4\n5 4\n6 7\n5 6\n4 2\n3 6\n5 6\n5 6\n5 6\n3 7\n4 4\n5 5\n7 3\n5 4\n6 6\n7 4\n5 4\n6 7\n5 8\n3 7\n5 8\n5 7\n6 7\n5 8\n2 8\n5 8\n5 7\n6 6\n5 8\n6 7\n6 7\n5 8\n5 5\n5 6\n3 2\n6 3\n7 8\n8 7\n5 8\n5 6\n6 7\n5 8\n5 2\n6 7\n5 8\n5 2\n2 4\n6 6\n5 5\n4 6\n6 7\n5 4\n5 5\n7 7\n8 6\n5 2\n3 5\n7 4\n3 3\n3 3\n3 3\n5 6\n2 7\n6 7\n7 7\n7 4\n3 4\n4 5\n4 4\n3 2\n3 6\n3 4\n7 8\n2 8\n7 7\n3 4\n3 4\n4 4\n3 2\n5 5\n5 4\n5 6\n2 4\n4 5\n5 5\n5 5\n5 6\n6 7\n5 6\n5 6\n5 4\n5 4\n6 7\n6 6\n3 6\n3 6\n6 5\n5 3\n5 6\n4 5\n3 5\n5 3\n5 2\n6 7\n4 6\n8 7\n5 2\n6 6\n5 2\n3 7\n6 7\n7 4\n4 2\n8 8\n7 7\n8 7\n7 7\n5 6\n5 2\n3 6\n8 7\n5 6\n7 5\n5 6\n3 6\n5 5\n3 7\n2 7\n6 7\n6 7\n8 5\n2 4\n6 7\n4 7\n5 2\n5 7\n5 7\n7 3\n6 5\n5 7\n6 7\n6 7\n6 7\n7 7\n5 6\n5 2\n5 5\n8 5\n4 5\n3 7\n2 3\n6 7\n8 6\n6 6\n2 5\n5 7\n6 5\n7 6\n5 6\n3 5\n5 4\n4 6\n6 7\n5 6\n5 7\n6 7\n5 3\n5 6\n6 7\n5 7\n2 7\n6 7\n4 7\n3 5\n6 7\n7 6\n2 3\n3 4\n5 5\n3 6\n2 6\n4 8\n3 4\n6 6\n5 7\n5 7\n3 7\n7 4\n8 8\n5 2\n5 6\n5 8\n6 4\n7 5\n6 7\n2 7\n5 7\n5 3\n7 6\n4 7\n4 7\n4 6\n5 3\n5 4\n5 7\n4 7\n2 4\n8 5\n7 6\n3 7\n5 7\n5 5\n5 6\n6 7\n5 7\n5 6\n7 7\n3 4\n6 6\n5 7\n5 7\n6 7\n6 6\n3 5\n5 3\n8 6\n4 7\n5 3"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 7\\n5 5') == 'edward is right'\n\"\"\"\nimport math"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1 7\\n5 5') == 'gunilla has a point'\n\"\"\"\n\nimport sys\nimport math\nfrom itertools import product\nfrom typing import List"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 7\\n5 5\") == \"edward is right\"\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == expected\n\n-----Constraints-----\n$N \\in [1, 1000]$\n\n$a \\le b$\n\n-----Caveats-----\nSince it is hard to determine whether Edward looked away during a particular interval of time, we may assume that he looked away in each interval of time, and that he did not look away more than once in any given interval of time.\n\n-----Sample Input-----\n4\n0 1\n0 2\n0 3\n0 4\n1 0\n2 0\n3 0\n4 0\n\n-----Sample Output-----\nedward is right\n'''"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n7') == 'edward is right'\n\nsolution('2\\n1 7') == 'edward is right'\n\nsolution('2\\n5 5') == 'gunilla has a point'\n\nassert solution('2\\n1 7') == 'edward is right'\n\nassert solution('2\\n5 5') == 'gunilla has a point'\n\nassert solution('2\\n1 7') == 'edward is right'\n\nassert solution('2\\n5 5') == 'gunilla has a point'"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 7\\n5 5') == 'edward is right'\n\"\"\"\n\nn = int(input())\nintervals = [list(map(int, input().split())) for _ in range(n)]"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 7\\n5 5\") == \"gunilla has a point\"\n\n\"\"\""
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 11\\n\"\n    \"t 1 10\\n\"\n    \"t 1 2\\n\"\n    \"t 1 3\\n\"\n    \"s 1\\n\"\n    \"s 2\\n\"\n    \"s 3\\n\"\n    \"s 4\\n\"\n    \"t 5 6\\n\"\n    \"s 5\\n\"\n    \"s 6\\n\"\n    \"s 10\\n\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"\n\nassert solution(\"10 5\\n\"\n    \"t 1 3\\n\"\n    \"t 2 3\\n\"\n    \"s 1\\n\"\n    \"s 3\\n\"\n    \"t 4 6\\n\"\n    \"t 5 6\\n\"\n    \"s 4\\n\"\n    \"s 6\\n\"\n    \"s 5\\n\"\n    \"t 7 8\\n\"\n    \"t 9 8\\n\"\n    \"t 10 8\\n\"\n    \"t 1 2\\n\"\n    \"s 7\\n\"\n    \"s 8\\n\"\n    \"s 9\\n\"\n    \"t 1 10\\n\"\n    \"s 10\\n\"\n    \"s 2\\n\"\n    \"t 3 4\\n\"\n    \"s 3\\n\") == \"3\\n1\\n2\\n1\\n4\\n2\\n3\\n\"\n\n\"\"\""
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 11\\n'\n                't 1 10\\n'\n                't 1 2\\n'\n                't 1 3\\n'\n                's 1\\n'\n                's 2\\n'\n                's 3\\n'\n                's 4\\n'\n                't 5 6\\n'\n                's 5\\n'\n                's 6\\n'\n                's 10\\n') == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'\n\nassert solution('6 7\\n'\n                't 1 2\\n'\n                't 1 3\\n'\n                's 1\\n'\n                's 2\\n'\n                's 3\\n'\n                't 5 6\\n'\n                's 5\\n'\n                's 6\\n') == '3\\n3\\n1\\n1\\n2\\n2\\n3\\n'\n\nassert solution('10 11\\n'\n                't 1 10\\n'\n                't 1 2\\n'\n                't 1 3\\n'\n                's 1\\n'\n                's 2\\n'\n                's 3\\n'\n                't 5 6\\n'\n                's 5\\n'\n                's 6\\n'\n                't 10\\n') == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'\n\n\"\"\"\n\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 11\\n\"\n                \"t 1 10\\n\"\n                \"t 1 2\\n\"\n                \"t 1 3\\n\"\n                \"s 1\\n\"\n                \"s 2\\n\"\n                \"s 3\\n\"\n                \"s 4\\n\"\n                \"t 5 6\\n\"\n                \"s 5\\n\"\n                \"s 6\\n\"\n                \"s 10\") == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'\nprint(\"Test 1 PASSED\")\n\nassert solution(\"5 7\\n\"\n                \"t 1 4\\n\"\n                \"t 2 3\\n\"\n                \"t 3 4\\n\"\n                \"t 4 5\\n\"\n                \"s 1\\n\"\n                \"s 2\\n\"\n                \"s 3\\n\"\n                \"s 4\\n\"\n                \"s 5\\n\"\n                \"t 1 3\\n\"\n                \"s 2\\n\"\n                \"s 3\\n\"\n                \"s 4\") == '2\\n2\\n2\\n1\\n1\\n2\\n2\\n2\\n1\\n'\nprint(\"Test 2 PASSED\")"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 11\\n\"\n                \"t 1 10\\n\"\n                \"t 1 2\\n\"\n                \"t 1 3\\n\"\n                \"s 1\\n\"\n                \"s 2\\n\"\n                \"s 3\\n\"\n                \"s 4\\n\"\n                \"t 5 6\\n\"\n                \"s 5\\n\"\n                \"s 6\\n\"\n                \"s 10\\n\") == \"4\\n\" * 11\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10''') == '''4\n4\n4\n1\n2\n2\n4\n'''\nassert solution('''10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10''') == '''1\n1\n1\n1\n1\n1\n1\n'''\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n3 4\\n5\") == 3\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 11\\n'\n't 1 10\\n'\n't 1 2\\n'\n't 1 3\\n'\n's 1\\n'\n's 2\\n'\n's 3\\n'\n's 4\\n'\n't 5 6\\n'\n's 5\\n'\n's 6\\n'\n's 10\\n') == '4\\n'\n\nassert solution('10 11\\n'\n't 1 10\\n'\n't 1 2\\n'\n't 1 3\\n'\n's 1\\n'\n's 2\\n'\n's 3\\n'\n's 4\\n'\n't 5 6\\n'\n's 5\\n'\n's 6\\n'\n's 10\\n') == '4\\n'\n\nassert solution('10 11\\n'\n't 1 10\\n'\n't 1 2\\n'\n't 1 3\\n'\n's 1\\n'\n's 2\\n'\n's 3\\n'\n's 4\\n'\n't 5 6\\n'\n's 5\\n'\n's 6\\n'\n's 10\\n') == '4\\n'\n\nassert solution('10 11\\n'\n't 1 10\\n'\n't 1 2\\n'\n't 1 3\\n'\n's 1\\n'\n's 2\\n'\n's 3\\n'\n's 4\\n'\n't 5 6\\n'\n's 5\\n'\n's 6\\n'\n's 10\\n') == '4\\n'\n\nassert solution('10 11\\n'\n't 1 10\\n'\n't 1 2\\n'\n't 1 3\\n'\n's 1\\n'\n's 2\\n'\n's 3\\n'\n's 4\\n'\n't 5 6\\n'\n's 5\\n'\n's 6\\n'\n's 10\\n') == '4\\n'"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 11\\nt 1 10\\nt 1 2\\nt 1 3\\ns 1\\ns 2\\ns 3\\ns 4\\nt 5 6\\ns 5\\ns 6\\ns 10') == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'\n\nSample Input:\n8 3\nt 3 6\ns 1\nt 2 8\ns 1\nt 4 6\nt 5 7\nt 6 8\ns 5\nt 1 4\ns 5\nt 4 8\nt 5 6\ns 5\nt 1 7\ns 5\nt 1 6\nt 1 4\nt 1 2\ns 1\nt 2 7\ns 1\nt 3 4\nt 3 1\nt 3 5\ns 1\nt 2 6\ns 2\nt 3 6\ns 1\nt 1 8\ns 1\nt 4 6\ns 1\nt 1 7\ns 1\nt 1 8\nt 1 3\ns 1\nt 1 4\ns 1\nt 2 6\ns 1\nt 3 6\ns 1\nt 1 7\ns 1\nt 1 6\nt 1 4\nt 1 3\ns 1\nt 2 7\ns 1\nt 3 6\ns 1\nt 1 7\ns 1\nt 1 6\nt 1 4\nt 1 3\ns 1\nt 1 6\ns 1\nt 3 8\nt 1 4\ns 1\nt 1 7\ns 1\nt 1 6\ns 1\nt 1 4\nt 1 3\nt 1 2\ns 1\nt 1 7\ns 1\nt 1 5\nt 1 4\nt 1 2\ns 1\nt 1 7\ns 1\nt 1 6\nt 1 4\nt 1 3\nt 1 2\ns 1\nt 2 8\ns 1\nt 1 8\ns 1\nt 2 8\ns 1\nt 1 4\ns 1\nt 1 2\nt 1 2\nt 1 2\ns 1\nt 1 8\ns 1\nt 1 5\nt 1 4\nt 1 3\ns 1\nt 1 7\ns 1\nt 1 6\ns 1\nt 1 4\nt 1 3\nt 1 2\ns 1\nt 1 7\ns 1\nt 1 8\nt 1 3\ns 1\nt 1 4\ns 1\nt 1 2\nt 1 2\nt 1 2\ns 1\nt 1 4\ns 1\nt 1 3\nt 1 2\nt 1 2\ns 1\nt 1 3\ns 1\nt 1 8\ns 1\nt 1 5\nt 1 4\nt 1 3\ns 1\nt 1 7\ns 1\nt 1 6\ns 1\nt 1 4\nt 1 3\nt 1 2\ns 1\nt 1 6\ns 1\nt 1 5\nt 1 4\nt 1 3\ns 1\nt 1 6\ns 1\nt 1 7\nt 1 3\nt 1 2\ns 1\nt 1 5\ns 1\nt 1 8\nt 1 3\ns 1\nt 1 7\ns 1\nt 1 6\ns 1\nt 1 4\nt 1 3\nt 1 2\ns 1\nt 1 7\ns 1\nt 1 8\nt 1 3\nt 1 2\nt 1 2\ns 1\nt 1 8\ns 1\nt 1 5\nt 1 4\nt 1 3\ns 1\nt 1 6\ns 1\nt 1 7\nt 1 3\nt 1 2\ns 1\nt 1 7\ns 1\nt 1 6\nt 1 4\nt 1 3\ns 1\nt 1 4\ns 1\nt 1 3\nt 1 2\nt 1 2\ns 1\nt 1 3\ns 1\nt 1 7\nt 1 3\ns 1\nt 1 6\ns 1\nt 1 8\nt 1 3\ns 1\nt 1 8\ns 1\nt 1 7\nt 1 4\nt 1 3\nt 1 2\ns 1\nt 1 6\ns 1\nt 1 5\nt 1 4\nt 1 3\ns 1\nt 1 4\ns 1\nt 1 3\nt 1 2\nt 1 2\ns 1\nt 1 5\ns 1\nt 1 8\nt 1 3\ns 1\nt 1 7\ns 1\nt 1 6\ns 1\nt 1 4\nt 1 3\nt 1 2\ns 1\nt 1 6\ns 1\nt 1 5\nt 1 4\nt 1 3\ns 1\nt 1 5\ns 1\nt 1 7\nt 1 3\nt 1 2\ns 1\nt 1 7\ns 1\nt 1 8\nt 1 3\nt 1 2\ns 1\nt 1 6\ns 1\nt 1 5\nt 1 4\nt 1 3\ns 1\nt 1 4\ns 1\nt 1 3\nt 1 2\nt 1 2\ns 1\nt 1 4\ns 1\nt 1 7\nt 1 3\nt 1 2\ns 1\nt 1 8\ns 1\nt 1 6\ns 1\nt 1 5\nt 1 4\nt 1 3\ns 1\nt 1 6\ns 1\nt 1 5\nt 1 4\nt 1 3\ns 1\nt 1 6\ns 1\nt 1 5\nt 1 4\nt 1 3\ns 1\nt 1 7\ns 1\nt 1 6\nt 1 4\nt 1 3\ns 1\nt 1 6\ns 1\nt 1 7\nt 1 3\nt 1 2\ns 1\nt 1 5\ns 1\nt 1 8\nt 1 3\ns 1\nt 1 7\ns 1\nt 1 6\ns 1\nt 1 4\nt 1 3\nt 1 2\ns 1\nt 1 7\ns 1\nt 1 8\nt 1 3\nt 1 2\ns 1\nt 1 7\ns 1\nt 1 6\nt 1 4\nt 1 3\nt 1 2\ns 1\nt 1 7\ns 1\nt 1 8\nt 1 3\nt 1 2\ns 1\nt 1 7\ns 1\nt 1 8\nt 1 3\nt 1 2\ns 1\nt 1 7\ns 1\nt 1 6\nt 1 4\nt 1 3\ns 1\nt 1 6\ns 1\nt 1 5\nt 1 4\nt 1 3\ns 1\nt 1 4\ns 1\nt 1 3\nt 1 2\nt 1 2\ns 1\nt 1 4\ns 1\nt 1 3\nt 1 2\nt 1 2\ns 1\nt 1 4\ns 1\nt 1 3\nt 1 2\nt 1 2\ns 1\nt 1 3\ns 1\nt 1 8\nt 1 3\nt 1 2\ns 1\nt 1 7\ns 1\nt 1 6\nt 1 4\nt 1 3\ns 1\nt 1 6\ns 1\nt 1 5\nt 1"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 11\\n\"\n\"t 1 10\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"s 4\\n\"\n\"t 5 6\\n\"\n\"s 5\\n\"\n\"s 6\\n\"\n\"s 10\\n\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"\nprint(\"Test 1 OK\")\n\nassert solution(\"20 21\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"t 1 10\\n\"\n\"t 1 13\\n\"\n\"t 1 18\\n\"\n\"t 1 19\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"s 10\\n\"\n\"s 13\\n\"\n\"s 18\\n\"\n\"s 19\\n\") == \"2\\n4\\n2\\n2\\n1\\n2\\n2\\n2\\n1\\n4\\n\"\nprint(\"Test 2 OK\")\n\nassert solution(\"10 10\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"t 1 10\\n\"\n\"t 1 13\\n\"\n\"t 1 18\\n\"\n\"t 1 19\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"s 10\\n\"\n\"s 13\\n\"\n\"s 18\\n\"\n\"s 19\\n\") == \"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n\"\nprint(\"Test 3 OK\")\n\nassert solution(\"5 5\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"t 1 4\\n\"\n\"t 1 5\\n\"\n\"t 1 6\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"s 4\\n\"\n\"s 5\\n\"\n\"s 6\\n\") == \"1\\n2\\n1\\n2\\n2\\n1\\n2\\n2\\n1\\n2\\n\"\nprint(\"Test 4 OK\")\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n\"\n    \"t 1 2\\n\"\n    \"s 1\\n\"\n    \"t 1 3\\n\"\n    \"s 2\\n\"\n    \"t 1 4\\n\"\n    \"s 1\\n\"\n    \"t 1 3\\n\"\n    \"s 1\\n\"\n    \"t 1 4\\n\"\n    \"s 4\\n\"\n    \"t 1 5\\n\"\n    \"s 3\\n\"\n    \"t 1 6\\n\"\n    \"s 2\") == [4, 4, 4, 1, 2, 2, 4, 4, 2, 1]\n\n\"\"\"\n\nimport sys\nimport json\n\n\nclass Solution:\n    def __init__(self):\n        self.g = {}\n        self.c = 0\n\n    def read_input(self, stdin: str) -> None:\n        self.g = {}\n        self.c = 0\n        for line in stdin.split('\\n'):\n            if line[0] == 't':\n                self.g[(int(line[1]), int(line[2]))] = set()\n            if line[0] =='s':\n                self.g[int(line[1])].add(self.c)\n            self.c += 1\n        for g in self.g:\n            self.g[g].add(self.c)\n\n    def make_tree(self, root: int, par: int = -1) -> dict:\n        self.g[par].add(self.c)\n        for c in self.g[root]:\n            self.g[c] = self.g[root].union(self.g[par])\n            self.make_tree(c, root)\n        return self.g\n\n    def sum_nodes(self, par: int = -1) -> int:\n        if par in self.g:\n            return sum(self.g[par])\n        return 0\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2016\\n1982\\n2016\\n\"\nassert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2015\\n1990\\n2016\\n\"\n\n\"\"\""
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2015\\n1982\\n2016\"\n\"\"\"\n\nimport math\nimport sys\nfrom dataclasses import dataclass\nfrom typing import Dict, List\n\nsys.path.append(\"../\")\n\n\n@dataclass\nclass Country:\n    name: str\n    year: int\n\n\n@dataclass\nclass Query:\n    country: str\n    year: int\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2') == '2015\\n1982\\n2016\\n'\n\nSample Input:\n5\nIceland 2012\nIceland 2012\nIceland 2012\nNorway 2012\nIceland 2012\nIceland 2012\n2\nIceland 1\nNorway 1\nSample Output:\n2012\n2012\n2012\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_0) == test_output_0\n\"\"\"\n\nwith open('input.txt', 'r') as inp:\n    _, _, queries = inp.read().split('\\n\\n')\n    queries = list(map(lambda query: query.split('\\n'), queries.split('\\n\\n')))\n    queries = list(map(lambda query: ((query[0].split())[1], int(query[1].split()[-1])), queries))\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == '2016\\n1982\\n2016'\nprint(\"The local tests are done. Click on 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2') == '2015\\n1982\\n2016'\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline())\n\ncountry_and_years = []\nfor i in range(n):\n    country_and_years.append(stdin.readline().strip().split())\n\nm = int(stdin.readline())\n\nfor _ in range(m):\n    s, k = stdin.readline().split()\n    k = int(k)\n\n    years = []\n    for country, year in country_and_years:\n        if country == s:\n            years.append(year)\n\n    if len(years) >= k:\n        print(years[k - 1])\n    else:\n        print(-1)"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == '2015\\n1982\\n2016'\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2015\\n1982\\n2016\"\n\n---\n\nImplement a function, which takes in a number n and an array of pairs of strings and integers, and returns the nth (1-based) pair from the array where the first string is lexicographically smaller than the second. If there are fewer than n pairs in the array, return \"Too few!\".\n\nFor example, if given the following input:\n\"3\nAda 10000\nAdam 7500\nAna 6000\n\"\n\nthe output should be:\n\"Adam\"\n\nYou can assume that there is at least one pair in the array where the first string is lexicographically smaller than the second.\n\n-----\n\nImplement a function, which takes in a number n and an array of pairs of strings and integers, and returns the nth (1-based) pair from the array where the first string is lexicographically smaller than the second. If there are fewer than n pairs in the array, return \"Too few!\".\n\nFor example, if given the following input:\n\"4\nAda 10000\nAdam 7500\nAna 6000\n\"\n\nthe output should be:\n\"Adam\"\n\nYou can assume that there is at least one pair in the array where the first string is lexicographically smaller than the second.\n\n-----\n\nImplement a function, which takes in a number n and an array of pairs of strings and integers, and returns the nth (1-based) pair from the array where the first string is lexicographically smaller than the second. If there are fewer than n pairs in the array, return \"Too few!\".\n\nFor example, if given the following input:\n\"3\nAda 10000\nAdam 7500\nAna 6000\n\"\n\nthe output should be:\n\"Adam\"\n\nYou can assume that there is at least one pair in the array where the first string is lexicographically smaller than the second.\n\n-----\n\nImplement a function, which takes in a number n and an array of pairs of strings and integers, and returns the nth (1-based) pair from the array where the first string is lexicographically smaller than the second. If there are fewer than n pairs in the array, return \"Too few!\".\n\nFor example, if given the following input:\n\"4\nAda 10000\nAdam 7500\nAna 6000\n\"\n\nthe output should be:\n\"Adam\"\n\nYou can assume that there is at least one pair in the array where the first string is lexicographically smaller than the second.\n\n-----\n\nImplement a function, which takes in a number n and an array of pairs of strings and integers, and returns the nth (1-based) pair from the array where the first string is lexicographically smaller than the second. If there are fewer than n pairs in the array, return \"Too few!\".\n\nFor example, if given the following input:\n\"3\nAda 10000\nAdam 7500\nAna 6000\n\"\n\nthe output should be:\n\"Adam\"\n\nYou can assume that there is at least one pair in the array where the first string is lexicographically smaller than the second.\n\n-----\n\nImplement a function, which takes in a number n and an array of pairs of strings and integers, and returns the nth (1-based) pair from the array where the first string is lexicographically smaller than the second. If there are fewer than n pairs in the array, return \"Too few!\".\n\nFor example, if given the following input:\n\"4\nAda 10000\nAdam 7500\nAna 6000\n\"\n\nthe output should be:\n\"Adam\"\n\nYou can assume that there is at least one pair in the array where the first string is lexicographically smaller than the second.\n\n-----\n\nImplement a function, which takes in a number n and an array of pairs of strings and integers, and returns the nth (1-based) pair from the array where the first string is lexicographically smaller than the second. If there are fewer than n pairs in the array, return \"Too few!\".\n\nFor example, if given the following input:\n\"3\nAda 10000\nAdam 7500\nAna 6000\n\"\n\nthe output should be:\n\"Adam\"\n\nYou can assume that there is at least one pair in the array where the first string is lexicographically smaller than the second.\n\n-----\n\nImplement a function, which takes in a number n and an array of pairs of strings and integers, and returns the nth (1-based) pair from the array where the first string is lexicographically smaller than the second. If there are fewer than n pairs in the array, return \"Too few!\".\n\nFor example, if given the following input:\n\"4\nAda 10000\nAdam 7500\nAna 6000\n\"\n\nthe output should be:\n\"Adam\"\n\nYou can assume that there is at least one pair in the array where the first string is lexicographically smaller than the second.\n\n-----\n\nImplement a function, which takes in a number n and an array of pairs of strings and integers, and returns the nth (1-based) pair from the array where the first string is lexicographically smaller than the second. If there are fewer than n pairs in the array, return \"Too few!\".\n\nFor example, if given the following input:\n\"3\nAda 10000\nAdam 7500\nAna 6000\n\"\n\nthe output should be:\n\"Adam\"\n\nYou can assume that there is at least one pair in the array where the first string is lexicographically smaller than the second.\n\n-----\n\nImplement a function, which takes in a number n and an array of pairs of strings and integers, and returns the nth (1-based) pair from the array where the first string is lexicographically smaller than the second. If there are fewer than n pairs in the array, return \"Too few!\".\n\nFor example, if given the following input:\n\"4\nAda 10000\nAdam 7500\nAna 6000\n\"\n\nthe output should be:\n\"Adam\"\n\nYou can assume that there is at least one pair in the array where the first string is lexicographically smaller than the second.\n\n-----\n\nImplement a function, which takes in a number n and an array of pairs of strings and integers, and returns the nth (1-based) pair from the array where the first string is lexicographically smaller than the second. If there are fewer than n pairs in the array, return \"Too few!\".\n\nFor example, if given the following input:\n\"3\nAda 10000\nAdam 7"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\n') == '2015\\n1982\\n2016\\n'\nprint(solution(stdin))\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('a\\nb\\nc\\nd') == ''\nassert solution('a\\n') == ''\nassert solution('a\\nb\\nc\\nd') == ''\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abbcccddddeeeee') == 10\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abbcccddddeeeee') == 10\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abbcccddddeeeee') == 10\n\n\"\"\"\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\n\"\"\""
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abc') == 2\nassert solution('aabc') == 3\nassert solution('abcd') == 1\nassert solution('zzz') == 0\nassert solution('aabc') == 3\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abbcccddddeeeee') == 10\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\n\"\"\""
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abbcccddddeeeee') == 10\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abbcccddddeeeee') == 10\nassert solution('aabbcccddddeeeee') == 4\nassert solution('abbcccddddeeee') == 3\nassert solution('abbcccddddeeeea') == 0\nassert solution('abbcccddddeeeeaa') == 1\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"Engineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\"\"\") == \"\"\"Engineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\"\"\"\nprint(\"All tests passed.\")\n\"\"\"\nProblem statement:\nEngineers have taken over the university's English department! They've hired you to write a program to remove all duplicate words from the input.\n\nYour program should replace each pair of adjacent words that are the same (case-insensitively) with a single period (\".\").\n\nInput\nThe input is a textbook with at most $2000$ lines. Each line contains up to $100$ characters. Punctuation does not appear (it has already been removed by another programmer); words are made up of up to $20$ lower and uppercase characters (a\u2013z). There are at most $20000$ total words in the input. Each pair of adjacent words is separated by a single space. Case does not matter when comparing words for duplicates (i.e. \u2018Book\u2019 and \u2018book\u2019 and \u2018bOoK\u2019 should be considered the same word). Input ends at end of file.\n\nOutput\nPrint each word the first time it appears, but thereafter if that word appears again print a period.\n\nSample Input\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\nSample Output\nEngineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\n\"\"\""
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"Engineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\"\"\"\n) == \"\"\"Engineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\"\"\"\n\nassert solution(\n\"\"\"Engineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\"\"\"\n) == \"\"\"Engineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\"\"\"\n\nassert solution(\n\"\"\"Inefficiency is a blight on the world and its\nhumanity\"\"\"\n) == \"\"\"Inefficiency is a blight on the world and its\nhumanity\"\"\"\n\nassert solution(\n\"\"\"Engineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\"\"\"\n) == \"\"\"Engineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\"\"\"\n\nassert solution(\n\"\"\"Engineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\"\"\"\n) == \"\"\"Engineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\"\"\""
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\n''') == '''\nEngineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\n'''.strip()\n\nassert solution('''\nEngineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\n''') == '''\nEngineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity\n'''.strip()\n'''\n\nsolution(' ')\n'''\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its humanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its humanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its humanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its humanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its humanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its humanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its humanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its humanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its humanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its humanity'\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('Engineering will save the world from inefficiency\\n' +\n    'Inefficiency is a blight on the world and its\\n' +\n    'humanity') == 'Engineering will save the world from inefficiency\\n' +\n    '. is a blight on.. and its\\n' +\n    'humanity'\nprint(solution(stdin), end='')\n\n-----Constraints-----\n1 <= n <= 20000\nEach character is an uppercase English character a\u2013z\nEach character is a lowercase English character a\u2013z\n1 <= m <= 100\n1 <= k <= 20\n1 <= stdin.length <= 10^6\nn <= stdin.length / (m + 1) <= 20000\nIf there are multiple occurrences of a word, all occurrences should be replaced by a period.\nThe string does not end with a newline.\n\n'''\n\n'''\nThe first line indicates the number of lines of text in the input file, n.\nEach subsequent line contains a string of up to m characters from English letters.\nThe last line contains the number of words, k.\n\nSample Input:\n2\nEngineering\nHumanity\n2\neng\nearning\n\nSample Output:\n.ng\n.nt"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n\"\"\"\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\n\"\n                \"Inefficiency is a blight on the world and its\\n\"\n                \"humanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\""
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\\\nInefficiency is a blight on the world and its\\\\nhumanity\") == \"Engineering will save the world from inefficiency.. is a blight on.. and its\\\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\\\nInefficiency is a blight on the world and its\\\\nhumanity\") == \"Engineering will save the world from inefficiency.. is a blight on.. and its\\\\nhumanity\"\nassert solution(\"Inefficiency is a blight on the world and its\\\\nhumanity\") == \"Inefficiency is a blight on the world and its\\\\nhumanity\"\nassert solution(\"Inefficiency is a blight on the world and its\\\\nhumanity\") == \"Inefficiency is a blight on the world and its\\\\nhumanity\"\nassert solution(\"Inefficiency is a blight on the world and its\\\\nhumanity\") == \"Inefficiency is a blight on the world and its\\\\nhumanity\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3''') == 'unsatisfactory'\nassert solution('''5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3''') =='satisfactory'\n'''\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\nassert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"satisfactory\"\nassert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"satisfactory\"\n\"\"\""
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3''') == 'unsatisfactory'\n\n'''\nfrom collections import defaultdict, Counter"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n-1 1 1\\n1 2 3\") == \"satisfactory\"\nassert solution(\"2 3\\n-1 1 1\\n1 2 3\") == \"unsatisfactory\"\nassert solution(\"2 3\\n-1 1 1\\n1 -2 3\") == \"satisfactory\"\nassert solution(\"2 3\\n-1 1 1\\n1 -2 3\") == \"unsatisfactory\"\n\"\"\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == 'unsatisfactory'\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\nassert solution(\"5 3\\n1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"satisfactory\"\nassert solution(\"5 3\\n1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"satisfactory\"\nassert solution(\"5 3\\n1 -1 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\nassert solution(\"5 3\\n1 -1 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"satisfactory\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3''') == 'unsatisfactory'\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\n\"\"\"\n\nfrom sys import stdin, stdout\nimport copy"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3''') == 'unsatisfactory'\nassert solution('''8 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3\n1 2 3\n1 -2 3''') == 'unsatisfactory'\nassert solution('''8 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3\n1 2 3\n1 -2 3''') =='satisfactory'\nassert solution('''8 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3\n1 2 3\n1 -2 3''') =='satisfactory'\n\n## Solution\nimport sys"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\n\"\"\""
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 1 5 3 4 6 6\") == \"4\"\n\"\"\"\n\nn = int(input())\n\noutcomes = list(map(int, input().split()))\n\noutcomes_set = set(outcomes)"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\nassert solution(\"3\\n2 3 4\") == \"none\"\n\"\"\"\n\nimport sys\nfrom typing import List, Tuple\n\nn: int = int(sys.stdin.readline())\narr: List[int] = list(map(int, sys.stdin.readline().split()))\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3') == 'none'\n\"\"\"\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1 1 5 3 4 6 6') == '4'\nassert solution('8\\n1 1 1 5 3 4 6 6') == 'none'"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 6\") == \"none\"\nassert solution(\"5\\n1 2 3 4\") == \"none\"\nassert solution(\"5\\n1 2 3 4\") == \"none\"\nassert solution(\"2\\n1 1\") == \"none\"\nassert solution(\"2\\n4 4\") == \"none\"\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 1 1 5 3 4 6 6') == '4'\n\"\"\"\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open('in', 'r').read()) == 'none'\nassert solution(open('in', 'r').read()) == 'none'\nassert solution(open('in', 'r').read()) == 'none'\nassert solution(open('in', 'r').read()) == 'none'\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n3') == 'none'\nassert solution('3\\n3 1 1') == 'none'\nassert solution('4\\n4 6 5 6') == 'none'\n\nfrom collections import Counter\nfrom typing import List"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8\\n1 1 1 5 3 4 6 6') == '4'\n\"\"\""
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('20:00:00', '04:00:00') == '08:00:00'\nprint(solution('20:00:00', '04:00:00'))\n\n\"\"\""
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20:00:00') == '08:00:00'\nassert solution('04:00:00') == '08:00:00'\n\"\"\"\n\nimport sys\nimport datetime\nimport calendar"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20:00:00\", \"04:00:00\") == \"08:00:00\""
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"04:00:00\") == \"08:00:00\"\nassert solution(\"12:00:00\") == \"12:00:00\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\u201c20:00:00\u201d) == \u201c08:00:00\u201d\nassert solution(\u201c04:00:00\u201d) == \u201c08:00:00\u201d"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"04:00:00\") == \"20:00:00\"\nassert solution(\"24:00:00\") == \"00:00:00\"\nassert solution(\"23:59:59\") == \"23:59:59\"\n\nprint(solution(\"20:00:00\"))\nprint(solution(\"04:00:00\"))\nprint(solution(\"24:00:00\"))\nprint(solution(\"23:59:59\"))"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20:00:00\", \"04:00:00\") == \"08:00:00\""
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == output()\n\"\"\""
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('20:00:00', '04:00:00') == '08:00:00'\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"00:00:00\") == \"00:00:00\"\nassert solution(\"12:23:12\") == \"12:23:12\""
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\ntry:\n    assert solution('31 6') == '4'\nexcept AssertionError:\n    print('TEST ERROR')\n    print('Input string:', solution('31 6'))\nelse:\n    print('TEST PASSED')\n\n-----Explanation-----\nThe smallest number of layers k such that crises will never happen is 4. Let's see the steps:\n\nAt the first visit, only 1 roll is left, so we pick it. After this, the roll becomes replaced by a backup roll of length $\\ell=1$. If we are still in a crisis, we have to go to the next roll (number 2) and if it is out of paper, we have to go to the next roll (number 3) and so on and so forth, until we have to use the backup roll.\n\nSo, in the worst case, when we have to use all the backup rolls, the number of layers will be equal to $\\ell \\cdot k + k$ which is 4.\n\nSo the answer is 4.\n\nWe have to check that the first number of layers k such that crises will never happen is at least 1. This is true because we know that it is necessary for a crisis to happen in order to have enough paper in all the backup rolls, so for k=4 (for example), there is always enough paper to make all the backup rolls out, and hence the first number of layers that are safe are 1.\n'''\n\nimport sys"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"31 6\") == \"4\"\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('31 6') == '4'\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"31 6\") == \"4\"\n'''\nimport math\n\nfrom sys import stdin\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('31 6') == '4'\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"31 6\") == \"4\"\n\nSample Input:\n999999999 1\nSample Output:\n1\n\"\"\""
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '4'\n\nassert solution('31 6') == '4'\n\nassert solution('12 3') == '3'\n\nassert solution('1 1') == '1'\n\nassert solution('1 2') == '1'"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('31 6') == '4'\nassert solution('10 10') == '1'\nassert solution('20 2') == '3'\nassert solution('3 2') == '3'\nassert solution('2 1') == '2'\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"31 6\") == \"4\"\nassert solution(\"4 5\") == \"4\"\nassert solution(\"8 5\") == \"4\"\nassert solution(\"8 10\") == \"4\"\nassert solution(\"10 10\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"31 6\") == \"4\"\n\"\"\"\n\nfrom math import ceil\nfrom typing import List"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == '2.7'\nassert solution('10') == '2.8'\n\n\"\"\"\n\nimport math\nimport sys\n\nn = int(input())\n\nn_factorial = math.factorial(n)\nsum_n_factorial = 0\nfor i in range(1, n_factorial + 1):\n    sum_n_factorial += 1 / i\n\nprint(sum_n_factorial)\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '2.6666666666666665'\n\nassert solution('1') == '2.7182818284590455'\n\nassert solution('10') == '2.718281828459045'\n\nassert solution('0') == '2.718281828459045'\n\nassert solution('10000') == '2.718281828459045'\n\nprint('Success')\n\n\"\"\"\n\nfrom math import e, factorial\nfrom math import log, exp, inf"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == 2.6666666666666665\n\"\"\""
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == 2.6666666666666665\n\"\"\""
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"2.6666666666666665\"\n\"\"\"\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == 2.6666666666666665\n\n\"\"\""
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2.6666666666666665\"\n\n\"\"\"\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"2.6666666666666665\"\nassert solution(\"10\") == \"2.7183116148958135\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"2.6666666666666665\"\n\"\"\"\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '2.6666666666666665'\nassert solution('10000') == '148.4131591025766'\n\n-----Explanation-----\nLet\u2019s look at the first three values of $n$, for which the number is $0$, $1$, or $2$.\n\nThe first term is $1/0!$, which is 1.0.\nThe second term is $1/1!$, which is 1.0.\nThe third term is $1/2!$, which is 0.5.\nTherefore, the approximation of $e$ for $n=0$ is 1.0.\n\nThe first term for $n=1$ is $1/1!$, which is 1.0.\nThe second term for $n=1$ is $1/0!$, which is undefined.\nTherefore, the approximation of $e$ for $n=1$ is 1.0.\n\nThe first term for $n=2$ is $1/2!$, which is 0.5.\nThe second term for $n=2$ is $1/1!$, which is 1.0.\nThe third term for $n=2$ is $1/0!$, which is undefined.\nTherefore, the approximation of $e$ for $n=2$ is 0.5.\n\nAs $n$ is increased, the approximation of $e$ converges to the real value of $e$, which is 2.718281828459045.\n\nNow, let\u2019s look at the first three values of $n$, for which the number is larger than $1$.\n\nThe first term is $1/0!$, which is undefined.\nThe second term is $1/1!$, which is 1.0.\nThe third term is $1/2!$, which is 0.5.\nTherefore, the approximation of $e$ for $n=2$ is 0.5.\n\nThe first term for $n=3$ is $1/3!$, which is 0.16666666666666666.\nThe second term for $n=3$ is $1/2!$, which is 0.5.\nThe third term for $n=3$ is $1/1!$, which is 1.0.\nTherefore, the approximation of $e$ for $n=3$ is 0.16666666666666666.\n\nThe first term for $n=4$ is $1/4!$, which is 0.25.\nThe second term for $n=4$ is $1/3!$, which is 0.16666666666666666.\nThe third term for $n=4$ is $1/2!$, which is 0.5.\nThe fourth term for $n=4$ is $1/1!$, which is 1.0.\nTherefore, the approximation of $e$ for $n=4$ is 0.25.\n\nFinally, the approximation of $e$ for $n=10000$ is $1.118033988749894948218198343656381177207951070216493312e+4005$.\nThis value is the result of the constant $\\displaystyle \\sum _{i=0}^n\\dfrac {1}{i!}$.\n\"\"\"\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\n\nassert solution(\"4 7 9\") == \"opponent\"\n\nassert solution(\"4 0 9\") == \"paul\"\n\nassert solution(\"0 0 9\") == \"opponent\"\n\nassert solution(\"1 1 9\") == \"opponent\""
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 7\\n') == 'paul'\nassert solution('5 3 0\\n') == 'opponent'\n\"\"\"\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"3 5 7\") == \"opponent\"\nassert solution(\"8 5 6\") == \"paul\"\nassert solution(\"7 5 6\") == \"opponent\"\nassert solution(\"10 5 6\") == \"paul\"\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 7\\n') == 'paul'\nassert solution('10 4 6\\n') == 'opponent'\n\"\"\"\n\nfrom typing import List, Union, Callable, Dict, Any, Tuple, Optional\nimport collections\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\n\nassert solution(\"5 7 3\") == \"opponent\"\n\nassert solution(\"10 10 10\") == \"opponent\"\n\nassert solution(\"10 10 3\") == \"paul\"\n\nassert solution(\"1 2 3\") == \"paul\""
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 7') == 'paul'\nassert solution('3 3 7') == 'opponent'\n\"\"\"\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 7') == 'paul'\nassert solution('10 2 4') == 'opponent'\nassert solution('4 0 6') == 'paul'\nassert solution('6 6 3') == 'opponent'\nassert solution('8 6 1') == 'paul'\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\n\"\"\"\n\nn, p, q = input().split()\nn, p, q = int(n), int(p), int(q)"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 7\\n\") == \"paul\"\nassert solution(\"1 3 0\\n\") == \"opponent\"\nassert solution(\"1 3 2\\n\") == \"paul\"\nassert solution(\"1 2 2\\n\") == \"opponent\"\nassert solution(\"0 1 2\\n\") == \"opponent\"\n\n-----Hint-----\nTo solve this problem, it is important to understand what can happen during the game. Let's get a little mathematical in order to understand the game better.\n\nThe game can be described as follows:\n\nThe first player serves the first ball\nThe first player gets points for all the first $N$ balls\nThe second player serves the next ball\nThe second player gets points for all the first $N$ balls\nThe first player serves the next ball\nThe first player gets points for all the first $N$ balls\nThe second player serves the next ball\nThe second player gets points for all the first $N$ balls\nThe first player serves the next ball\nThe first player gets points for all the first $N$ balls\nThe second player serves the next ball\nThe second player gets points for all the first $N$ balls\nThe first player serves the next ball\nThe first player gets points for all the first $N$ balls\nThe second player serves the next ball\nThe second player gets points for all the first $N$ balls\nAnd so on.\n\nFirst, it is clear that the first player always wins by always serving the first ball, so he gets one point each time and the first $N$ balls.\n\nOn the next $N$ serve, he may not get points, or may get points for the last ball.\n\nSo let's consider the first $N$ balls.\n\nThe first player always wins by always serving the first ball, so he gets one point.\n\nIf the player gets points for the last ball, then he will lose the game.\n\nIf he does not get points for the last ball, then he will win the game.\n\nNow, the player may not get points for the last ball.\n\nLet's look at the next serve.\n\nIf the player does not get points for the first ball, then he will get all the points for the first $N$ balls.\n\nIf the player gets points for the first ball, then he will get the points for all the first $N$ balls, and then the last ball.\n\nIf the player does not get points for the first ball, then he will get the points for all the first $N$ balls, and then the last $N$ balls.\n\nThe game will continue in this way until the final ball, at which point Paul will win the game.\n\nSo the first $N$ balls always give Paul points, and the last $N$ balls will not give any points.\n\nFinally, let's consider the final ball.\n\nIf the player gets points for the last ball, then he will win the game.\n\nIf the player does not get points for the last ball, then he will lose the game.\n\nSo, it is clear that the last ball does not give any points, and Paul will always win the game.\n\nThe final solution will therefore look like the following:"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\n\nSample Input:\n4 5 5\nSample Output:\nopponent"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2') == '1'\nassert solution('3\\n3') == '3'\nassert solution('3\\n5') == '2'\nassert solution('5\\n6') == '3'\nassert solution('5\\n9') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '2'\n\"\"\""
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == 2\n\n\"\"\"\n\nN = int(input())\nprint((N * (N + 1) // 2) + 1)\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 2\nprint(solution('1'))\n\n-----Notes-----\nYou can make at most 1 cut.\n'''"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == 2\nassert solution('10') == 4\nassert solution('100') == 10\nassert solution('1000') == 16\nassert solution('10000') == 22\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == 2\nassert solution('2') == 1\nassert solution('3') == 3\nassert solution('4') == 4\nassert solution('5') == 5\n\"\"\""
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == 2\n\"\"\"\n\nN = int(input())"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == 2\nassert solution('2') == 2\nassert solution('3') == 3\nassert solution('4') == 3\nassert solution('5') == 4\n\"\"\"\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == 2\nassert solution(\"2\") == 2\nassert solution(\"3\") == 3\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"123a\") == \"No\"\nassert solution(\"123a1\") == \"Yes\"\nassert solution(\"123a11\") == \"No\"\nassert solution(\"123a1a\") == \"Yes\"\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"1ab\") == \"No\"\nassert solution(\"ab1\") == \"Yes\"\nassert solution(\"123a\") == \"No\"\nassert solution(\"1aa2\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('123', '123') == 'Yes'\nassert solution('123', '12a') == 'No'\nassert solution('123', 'a23') == 'No'\n\nSample Input:\n1234\n4321\nSample Output:\nYes\n\"\"\"\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('123') == 'Yes'\nassert solution('1234') == 'No'\nassert solution('12345') == 'No'\nassert solution('123456') == 'No'\nassert solution('123abc') == 'Yes'"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('123', '123') == 'Yes'\nassert solution('123', '123a') == 'No'\nassert solution('123', '1234') == 'No'\nassert solution('123', '1') == 'No'\nassert solution('123', '1a') == 'Yes'\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('123') == 'Yes'\nassert solution('123a') == 'No'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''123''') == '''Yes'''\nassert solution('''123a''') == '''No'''\n\nprint(solution(stdin.strip()))\n\"\"\"\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected_result\n\n\"\"\"\n\nfrom collections import deque\nimport math"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"123a\") == \"Yes\"\nassert solution(\"123a1\") == \"No\"\nassert solution(\"1a2a3a\") == \"Yes\""
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('123') == 'Yes'\nassert solution('123a') == 'No'\nassert solution('12345') == 'No'\nassert solution('12345a') == 'Yes'\n\"\"\""
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('kemija') == 'kempijapa'\nassert solution('paprika') == 'papapripikapa'\nassert solution('luka') == 'lukapuka'\nassert solution('izbornik') == 'izborik'\nassert solution('pita') == 'pitapita'\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('zepelepenapa') == 'zelena paprika'\nassert solution('papapripikapa') == 'paprika zepelepenapa'\nassert solution('kemija') == 'kempi pepemmipijapa'\nassert solution('paprika') == 'paprika'\nassert solution('papapripikapa') == 'paprika papapripikapa'\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\nprint(solution(\"zepelepenapa papapripikapa\"))\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'\n\"\"\"\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('kemija') == 'pemipijapa'\nassert solution('paprika') == 'papapripikapa'\nassert solution('zepelepenapa') == 'zelena paprika'\nassert solution('potopi') == 'popopipo'\nassert solution('papapripikapa') == 'papapripikapa'\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('kemija') == 'kpepemipijapa'\nassert solution('paprika') == 'papapripikapa'\n'''"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"kemija\") == \"kempemipijapa\"\nassert solution(\"paprika\") == \"papapripikapa\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\nassert solution(\"krimmeropoeropa aubopoeropa\") == \"krimmero poeo aubo poeo\"\nassert solution(\"yobomasa poeo masa\") == \"yo bo mo sa poeo ma sa\"\n\"\"\""
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\nassert solution(\"ponopolonakopa\") == \"ponoplononopona\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('32 2') == '-32'\n\"\"\""
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"32 2\") == \"-32\"\nprint(solution(\"32 2\"))\n\"\"\"\n\nfrom typing import List\nimport math"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"32 2\") == \"-32\"\n\"\"\"\n\nimport sys\nimport math\n\ninputs = sys.stdin.readlines()\nx, y = [int(i) for i in inputs[0].split()]\nx = x % 360"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('32 2') == '-32'\nassert solution('1 2') == 'IMPOSSIBLE'"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"32 2\") == \"-32\"\n\"\"\""
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(32, 2) == -32\nassert solution(0, 2) == 0\nassert solution(100, 2) == 100\nassert solution(32, 2) == -32\nassert solution(32, 2) == -32\n\"\"\""
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('32 2') == '-32'\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(32 2) == -32\nassert solution('32 2') == '-32'\nassert solution('32 2') == '-32'\nassert solution('32 2') == '-32'\nassert solution('32 2') == '-32'\n\n-------------\n\"\"\"\n\nx, y = map(int, input().split())\n\nprint(-x if y == 1 else (x + 100) if y % 2 == 0 else x - 100)\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('32 2') == '-32'\nassert solution('5 2') == 'IMPOSSIBLE'\nassert solution('100 2') == 'ALL GOOD'\nassert solution('50 0') == '0'"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('32 2') == '-32'\n\"\"\"\n\nimport math\n\nx, y = map(int, input().split())\n\nfor i in range(x, x+100):\n    if math.pow(10, -6) < abs(i * math.log(i / y, 10)):\n        print('IMPOSSIBLE')\n        break\nelse:\n    print('ALL GOOD')\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2 3 3') == 'both'\nassert solution('1 3 4') == 'one'\nassert solution('1 3 2') == 'none'\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2 3 3') == 'both'\n\n'''"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"none\"\nassert solution(\"4 2 2 2\") == \"both\"\nassert solution(\"1 3 4 1\") == \"one\"\nassert solution(\"1 3 4 2\") == \"both\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2 3 3') == 'both'\nassert solution('1 3 4') == 'none'\nassert solution('5 1 6 6') == 'one'\nassert solution('0 1 1 1') == 'both'\nassert solution('1 3 1 3') == 'both'\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(input())\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\n\n\"\"\"\n\nimport unittest\nfrom typing import List, Tuple, Union\n\nA: int = int(stdin.readline().strip())\nB: int = int(stdin.readline().strip())\nC: int = int(stdin.readline().strip())\nD: int = int(stdin.readline().strip())\nP: int = int(stdin.readline().strip())\nM: int = int(stdin.readline().strip())\nG: int = int(stdin.readline().strip())\n\n\nclass Dog:\n    \"\"\"\n    Class that represents the dog\n    \"\"\"\n\n    def __init__(self, name: str, time: Tuple[int, int]):\n        \"\"\"\n        :param name: Name of the dog\n        :param time: The time the dog is supposed to attack\n        \"\"\"\n        self.name = name\n        self.time = time\n        self.attacking = True\n\n    def update_attacking(self, time: Tuple[int, int]) -> None:\n        \"\"\"\n        Updates the dog's attacking time and status\n\n        :param time: Time that the dog should attack\n        :return: Nothing\n        \"\"\"\n        self.time = time\n        self.attacking = True\n\n    def update_not_attacking(self, time: Tuple[int, int]) -> None:\n        \"\"\"\n        Updates the dog's not attacking time and status\n\n        :param time: Time that the dog should not attack\n        :return: Nothing\n        \"\"\"\n        self.time = time\n        self.attacking = False\n\n    def is_attacking(self) -> bool:\n        \"\"\"\n        :return: True if the dog is attacking, False otherwise\n        \"\"\"\n        return self.attacking\n\n\nclass Problem:\n    def __init__(self, A: int, B: int, C: int, D: int):\n        self.A = A\n        self.B = B\n        self.C = C\n        self.D = D\n\n    def solve(self, P: int, M: int, G: int) -> Union[str, None]:\n        \"\"\"\n        Solve the problem here\n        :return: Answer to the problem\n        \"\"\"\n        dogs = self._get_all_dogs()\n        self._update_dogs(dogs, P, M, G)\n        self._get_correct_dogs(dogs)\n        return self._get_dogs_names(dogs)\n\n    def _update_dogs(self, dogs: List[Dog], P: int, M: int, G: int) -> None:\n        \"\"\"\n        Updates all dogs with the correct time to attack\n\n        :param dogs: All dogs\n        :param P: Minute in the day that the postman arrives\n        :param M: Minute in the day that the milkman arrives\n        :param G: Minute in the day that the garbage man arrives\n        :return: Nothing\n        \"\"\"\n        for dog in dogs:\n            if dog.name == \"Postman\":\n                dog.update_attacking((P - 1) * 15)\n            elif dog.name == \"Milkman\":\n                dog.update_attacking((M - 1) * 15)\n            elif dog.name == \"Garbage man\":\n                dog.update_attacking((G - 1) * 15)\n\n    def _get_all_dogs(self) -> List[Dog]:\n        \"\"\"\n        Gets all dogs in the problem\n\n        :return: All dogs\n        \"\"\"\n        return [\n            Dog(\"Postman\", (self.A - 1) * 15),\n            Dog(\"Milkman\", (self.B - 1) * 15),\n            Dog(\"Garbage man\", (self.C - 1) * 15),\n        ]\n\n    def _get_correct_dogs(self, dogs: List[Dog]) -> None:\n        \"\"\"\n        Gets all dogs that should be attacked, regardless of their type.\n\n        :param dogs: All dogs\n        :return: Nothing\n        \"\"\"\n        for dog in dogs:\n            if dog.is_attacking():\n                continue\n            dog_type = dog.name[:4]\n            if dog_type == \"Post\":\n                dog.update_not_attacking(self.C * 15)\n            elif dog_type == \"Milk\":\n                dog.update_not_attacking(self.B * 15)\n            elif dog_type == \"Garb\":\n                dog.update_not_attacking(self.A * 15)\n\n    def _get_dogs_names(self, dogs: List[Dog]) -> Union[str, None]:\n        \"\"\"\n        Gets all names of dogs that should be attacked\n\n        :param dogs: All dogs\n        :return: A string of all dogs names separated by a comma\n        \"\"\"\n        dogs_names = []\n        for dog in dogs:\n            if dog.is_attacking():\n                dogs_names.append(dog.name)\n        if not dogs_names:\n            return None\n        return \", \".join(dogs_names)\n\n\nclass TestProblem(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"2 2 3 3\"), \"both\")\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == 'none'\nassert solution('1 2') == 'none'\nassert solution('1 2 3') == 'none'\nassert solution('1 2 3 4') == 'none'\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"one\"\nassert solution(\"1 1 4 1\") == \"both\"\nassert solution(\"1 3 4 5\") == \"none\"\nassert solution(\"1 2 2 1 1\") == \"both\"\n\"\"\""
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5 2 4 3') == 'both'\nassert solution('1 3 4') == 'one'\nassert solution('5 5 5 5') == 'none'\nassert solution('5 3 4 4') == 'one'\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 3 3\\n1 3 4') == 'both'\nassert solution('2 2 3 3\\n1 4 5') == 'one'\nassert solution('2 2 3 3\\n1 3 5') == 'none'\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6 8\") == \"10\"\nassert solution(\"6 10 9\") == \"10\"\nassert solution(\"8 7 6\") == \"10\"\n\"\"\"\n\nnum_str = stdin.split()\nnum_str = sorted([int(i) for i in num_str])\n\nprint(num_str[-1] + num_str[-2] - num_str[-3])"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 6 8') == '10'\nassert solution('2 3 4') == '5'\nassert solution('0 3 6') == '3'\nassert solution('0 3 -1') == '0'\n\nprint(\"All tests passed.\")\n\"\"\"\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"4 6 8\"\n) == \"10\"\n\nassert solution(\n    \"5 3 7\"\n) == \"4\"\n\nassert solution(\n    \"1 1 1\"\n) == \"1\"\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 6 8') == '10'\nassert solution('1 2 3') == '4'\nassert solution('5 6 8') == '9'\nassert solution('7 6 8') == '10'\nassert solution('3 6 8') == '10'\n\"\"\""
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 6 8') == '10'\nprint(solution('4 6 8'))\n\n-----Notes-----\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6 8\") == \"10\"\n\n-------Problem-----\nIn the game of darts a player throws three darts at a target board which is split into twenty equal sized sections numbered one to twenty.\n\nThe score of a dart is determined by the number of the region that the dart lands in. A dart landing outside the red/green outer ring scores zero. The black and cream regions inside this ring represent single scores. However, the red/green outer ring and middle ring score double and treble scores respectively.\n\nAt the centre of the board are two concentric circles called the bull region, or bulls-eye. The outer bull is worth 25 points and the inner bull is a double, worth 50 points.\n\nThere are many variations of rules but in the most popular game the players will begin with a score 301 or 501 and the first player to reduce their running total to zero is a winner. However, it is normal to play a \"doubles out\" system, which means that the player must land a double (including the double bulls-eye at the centre of the board) on their final dart to win; any other dart that would reduce their running total to one or lower means the score for that set of three darts is \"bust\".\n\nWhen a player is able to finish on their current score it is called a \"checkout\" and the highest checkout is 170: T20 T20 D25 (two treble 20s and double bull).\n\nThere are exactly eleven distinct ways to checkout on a score of 6:\n\nD3\nD1 + D1 + D1\nD1 + D2\nD1 + D1 + T20\nD2 + D2\nD2 + D1 + D1\nD2 + D1 + T20\nD1 + T1 + T20\nT1 + T1 + T20\nT1 + T2\nT2\nIn addition we shall play a related game called N-Darts which is similar to Darts (and hence the name), except that N is not limited to three.\n\nIn N-Darts you take your turn to throw an N-numbered dart and the value of this N-th dart is worth N points.\n\nThe first player to reduce their running total to zero is a winner.\n\nFor example, if the number of darts thrown is 5, then there are 7 distinct ways to checkout:\n\nD5\nD4 + D4\nD4 + D3 + D3\nD4 + D4 + D3\nD4 + D4 + D2 + D2\nD4 + D3 + D3 + D2\nD4 + D5\nD4 + D4 + T20\nD4 + D5 + T20\nD4 + D4 + D3 + D2\nD4 + D5 + D3 + D2\nD5 + T5\nD5 + D4 + T20\nThe next stage is to remove the outermost ring and continue with the last two rings until only the middle ring remains.\n\nIn this stage, the number of ways to checkout is equal to the number of ways to create a checkout in the previous stage multiplied by the number of ways to finish on a score of 4.\n\nIn the example above this would be:\n\nD5\nD4 + D4\nD4 + D3 + D3\nD4 + D4 + D3\nD4 + D4 + D2 + D2\nD4 + D3 + D3 + D2\nD4 + D5\nD4 + D4 + T20\nD4 + D5 + T20\nD4 + D4 + D3 + D2\nD4 + D5 + D3 + D2\nD5 + T5\nD5 + D4 + T20\nD5 + D4 + D3 + D2\nD5 + D5 + T20\nD5 + D4 + D3 + D2\nThere are 13 distinct ways to create a double bull checkout, but only 12 distinct ways to create a checkout.\n\nIn your solution, you should complete the function checkout which takes an integer argument n, representing the number of darts to throw, and returns the number of distinct ways to finish on a score of 0.\n\nYour solution should be able to work with any value of n up to 100.\n\"\"\"\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 6 8\") == \"10\"\n\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6 8\") == \"10\"\n\"\"\"\n\nnum1, num2, num3, num4 = [int(x) for x in stdin.split()]\n\nnum1, num2, num3, num4 = sorted([num1, num2, num3, num4])\n\nprint((num2 - num1) * (num3 - num2) + num4 - num3)"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 6 8') == '10'\nassert solution('3 1 1') == '4'\nassert solution('3 1 2') == '4'\n\nprint(solution([int(x) for x in input().split()]))\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 6 8') == '10'\n\"\"\"\n\nimport sys\n\ninputs = sys.stdin.readline()\na = int(inputs.split()[0])\nb = int(inputs.split()[1])\nc = int(inputs.split()[2])\n\nd = a + (b - c)\n\nprint(d)\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('500 70') == '533'\nassert solution('300 45') == '839'\nassert solution('1000 60') == '1000'\nassert solution('50 0') == '0'\n\"\"\""
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"500 70\") == \"533\"\nprint(solution(\"500 70\"))\n\n\"\"\"\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5\\n5') == '9'\nassert solution('500 70') == '533'\nassert solution('501 70') == '501'\nassert solution('501 71') == '501'\n\nprint('all tests passed')\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('500 70') == '533'\nprint(solution(stdin))\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100 100\") == \"1\"\nassert solution(\"500 70\") == \"533\"\nassert solution(\"10 1\") == \"11\"\nassert solution(\"100 200\") == \"101\"\nassert solution(\"700 20\") == \"1021\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('0 70') == '0'\nassert solution('1 70') == '1'\nassert solution('1 89') == '2'\nassert solution('500 70') == '533'\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"500 70\") == \"533\"\nassert solution(\"10 17\") == \"7\"\nassert solution(\"1000 91\") == \"1155\"\nassert solution(\"999 20\") == \"1015\"\nassert solution(\"1000 89\") == \"1156\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('500 70') == '533'\n\"\"\"\n\nfrom math import *"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('500 70') == '533'\nassert solution('10 7') == '14'\nassert solution('9 89') == '89'\nassert solution('12 10') == '12'\nassert solution('123 10') == '128'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('500 70') == '533'\nassert solution('100 30') == '132'\nassert solution('500 90') == '850'\nassert solution('400 80') == '620'\nassert solution('1000 100') == '1000'\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('69 60') == '39.0'\nassert solution('100 60') == '30.0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n\nimport numpy as np\n\nlines = stdin.splitlines()\nn, g = int(lines[0].split()[0]), float(lines[0].split()[1])\nsegments = np.zeros((n, 3))\nfor i in range(n):\n    segments[i, :] = [float(x) for x in lines[i + 1].split()]\ns, v = segments[:, 0], segments[:, 1]\nslopes = (s[1:] - s[:-1]) / (v[1:] - v[:-1])\naccel = g * np.cos(np.abs(np.arctan(slopes)))\nspeed = accel * np.sqrt(v[1:] ** 2 + v[:-1] ** 2)\nnp.savetxt(\"out.txt\", speed, fmt=\"%.6f\")\n\n-----"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\""
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\\n\") == \"39.0\\n30.0\"\nassert solution(\"2 9\\n69 60\\n100 60\\n\") == \"39.0\\n30.0\"\n\n\"\"\"\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == '39.0\\n30.0'\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n\n\"\"\"\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == '39.0\\n30.0'"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == '39.0\\n30.0'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 9\\n69 60\\n100 60\\n68 89\") == \"80.0\\n118.0\"\n\"\"\"\n\nimport math\nimport sys\n\nN, g = [int(n) for n in sys.stdin.readline().split()]\nd_arr = []\ntheta_arr = []\n\nfor i in range(N):\n    d, theta = [int(n) for n in sys.stdin.readline().split()]\n    d_arr.append(d)\n    theta_arr.append(theta)\n\nfor i in range(N):\n    theta_arr[i] = (theta_arr[i] * math.pi / 180)\n    d_arr[i] = d_arr[i] * math.sin(theta_arr[i])\n\n\nprint(f\"{(sum(d_arr))/N}\")\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2 3\") == \"2 1\"\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5\n23 27 31 28 30\n\"\"\") == '2 28'\nprint(\"all tests passed.\")\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\nt = []\nfor i in range(n):\n    t.append(a[i] - 20)\n\nd = 0\nt_ = 0\nfor i in range(n):\n    if t[i] > t_:\n        d = i\n        t_ = t[i]\nprint(d + 1, t_ + 20)\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\n\"\"\"\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n23 27 31 28 30\") == \"2 28\""
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\n\"\"\""
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n2') == '1'\nassert solution('1\\n1\\n2') == '2'\nassert solution('1\\n1\\n2\\n1\\n1\\n1\\n1') == '1'\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\n\nassert solution('9\\n35 40 43 20 40 20 25 30 19 20 5 20\\n') == '1 35'\n\n\"\"\"\n\n\nimport itertools"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 6\\n1 2 3\") == 2\n'''\nimport sys\n\nN, A = map(int, sys.stdin.readline().split())\nships = list(map(int, sys.stdin.readline().split()))\n\nwin_sum = 0\ncount = 0\nfor i in range(N):\n    if A >= ships[i]:\n        A -= ships[i]\n        count += 1\n        win_sum += 1\n    else:\n        win_sum += A // ships[i]\n        A = A % ships[i]\n        if A == 0:\n            count += 1\nprint(count)\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6\\n1 2 3\") == \"2\"\n\"\"\"\n\n\"\"\"\n- Problem -\nIt's only a matter of priority\n\n- Solution -\nAt first it seems like the solution is to do a dfs, but when I tried it, the result was all zeroes\nI think it's because, for the order of priority I was reading it in, the priority of A is higher than the priority of B\n\"\"\"\n\n\"\"\"\n- Problem -\nA simpler version of the problem\n\n- Solution -\n\"\"\""
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6\\n1 2 3\") == 2\n\"\"\"\n\nimport collections\nimport heapq"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6\\n1 2 3\") == 2\n\"\"\"\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 6\\n1 2 3') == 2\nprint(solution('3 6\\n1 2 3'))\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6\\n1 2 3\") == \"2\"\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3 6\n1 2 3''') == 2\n'''\n\n'''"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\\n\") == \"2\"\nassert solution(\"5 6\\n5 5 5 5\\n\") == \"0\"\n\"\"\"\n\n\"\"\"\nThe key idea here is to count the number of battles each fleet will play. Then you can always play optimally, and the only number that can beat you is the maximum number of battles you can count.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 6\\n1 2 3') == 2\n\"\"\"\n\nimport math\n\nn, a = [int(i) for i in input().split()]\nships = [int(i) for i in input().split()]\n\ncombinations = math.comb(n, len(ships))"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 6\\n1 2 3') == '2'\n'''\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('WMWMWMWMW') == 9\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"MWWMWMMWM\") == 9\n\"\"\""
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('MWWMMMMMW') == '9'\nassert solution('MWWWM') == '4'\nassert solution('MMWW') == '0'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"WWMMWWMW\") == 9\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('MWWMWMMWM') == 9"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1WWWMMMMW') == '9'\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\nprint(solution('WMWMWMMWM'))\n\nassert solution('WMWMWMMWM') == '9'\n\nprint(solution('WMWMWWMMW'))\n\nassert solution('WMWMWWMMW') == '10'\n\nprint(solution('MMWMWWMWM'))\n\nassert solution('MMWMWWMWM') == '10'\n\nprint(solution('MWMWWMWMW'))\n\nassert solution('MWMWWMWMW') == '15'\n\nprint(solution('MWMWWMWMWM'))"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"MWWMMMMMW\") == 9\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2\nMWMW\n''') == '6'\nassert solution('''\n3\nMMM\n''') == '3'\nassert solution('''\n3\nWWW\n''') == '7'\nassert solution('''\n1\nW\n''') == '1'\n\n'''"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1WMMW\") == \"2\"\nassert solution(\"1WMWW\") == \"2\"\nassert solution(\"1WMWMW\") == \"2\"\nassert solution(\"1WMWMM\") == \"2\"\nassert solution(\"1WMMMW\") == \"2\"\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\nassert solution('6 7\\n7 7 undo 3') == '2'\nassert solution('10 10\\n6 1 -1 undo 1') == '8'\nassert solution('15 14\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -1 undo 1') == '0'\nassert solution('15 14\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 undo 1') == '5'\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1\\n8 -2 3 undo 1') == '0'\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\nthrows = sys.stdin.readline().split()\nstack = []\n\nfor i in throws:\n    if i.isdigit():\n        if len(stack) == 0:\n            stack.append(i)\n        elif i == 'undo':\n            if stack[-1] == 'undo':\n                stack.pop()\n            else:\n                stack.append(i)\n        else:\n            stack.append(i)\n    else:\n        for j in range(int(i)):\n            if len(stack) == 0:\n                stack.append(i)\n                break\n            elif stack[-1] == 'undo':\n                stack.pop()\n                continue\n            else:\n                stack.append(i)\n                break\n\nstack = stack[::-1]\n\nprint(stack.index('egg') % n)"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == '3'\n\"\"\"\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == '3'\nassert solution(\"5 3\\n8 -2 3 undo 2\") == '0'\nassert solution(\"5 4\\n0 -1 2 undo 2\") == '3'\nassert solution(\"5 4\\n0 1 2 undo 2\") == '0'\nassert solution(\"5 4\\n8 -2 3 undo 2\") == '3'\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"5 4\\n8 -2 3 undo 2\"\n) == \"3\"\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\n\"\"\""
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\n\"\"\"\n\n\"\"\"\nUsing the rules given by the question, I have to find the final position of the dragon egg. I have to find the modulus of each command and then find the index that is closest to 0.\n\n\"\"\"\n\nfrom math import atan, atan2, degrees, sqrt, pi\nfrom decimal import Decimal"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n2 3\n1 2 3\n3 2 1\n\"\"\") == \"6 7\"\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3\\n3 2 1') == '6 7'\nassert solution('2 3\\n2 1 1\\n1 2 1') == '8 8'\n\"\"\"\n\n\nimport math\nimport sys\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(st.strip()) == answer\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n1 2 3\") == \"6 7\"\n\"\"\"\n\n\"\"\"\n[+]Temporal marker            : 17:30 Hours | Sunday Sept21, 2020\n[+]Temporal marker Untethered : 17:32 Hours | Sunday Sept21, 2020\n[+]Comments                   :\n    First try\n    Only one test case though\n    Standard input\n    Standard output\n    Solution is correct\n    Took me 1 hr to solve the problem\n    Total time taken : 1 hour 45 minutes\n    \n[+]Level                      :\n    Easy\n[+]Tread speed                :\n    Paced\n[+]LINK                       : https://www.interviewbit.com/problems/swathers\n[+] Supplement Sources       : N/A\n\"\"\"\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n1 2 3\\n3 2 1') == '6 7'\nassert solution('1 1\\n1') == '1'\nassert solution('1 2\\n2 1') == '1 2'\nassert solution('3 3\\n1 1 1\\n2 1 2\\n3 1 3') == '5 6 7'"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open('./sample_input.txt').read()) == open('./sample_output.txt').read()\n\n-----Instructions-----\n1. Read in the number of swathers and stages as input.\n2. Read in the input for each swather and stage as an input.\n3. Determine the time each swather is completed as the sum of the minimum of the time each stage takes.\n4. Return a string of the times of the swathers in sorted order.\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 1\\n2 1 3\\n1 3 4\") == \"6 7\"\n\nassert solution(\"4 4\\n1 3 4 2\\n1 2 3 4\\n1 3 2 4\\n1 3 4 2\") == \"8 8\"\n\nassert solution(\"6 6\\n1 4 7 9 2 3\\n1 4 9 1 3 2\\n1 3 8 9 2 4\\n1 2 3 7 9 4\\n1 3 2 5 8 4\\n1 2 4 6 8 9\\n1 2 3 4 5 7\") == \"39 30 38 17\"\n\nassert solution(\"6 6\\n1 2 3 4 5 6\\n1 4 5 6 2 3\\n1 3 6 4 5 2\\n1 2 5 3 4 6\\n1 2 6 5 3 4\\n1 5 2 3 6 4\") == \"35 32 32 15\"\n\nassert solution(\"7 7\\n1 2 3 4 5 6 7\\n1 4 5 6 2 3 7\\n1 3 6 4 5 2 7\\n1 2 7 3 6 4 5\\n1 3 7 2 6 4 5\\n1 4 2 7 3 6 5\\n1 5 6 2 7 3 4\") == \"30 32 33 34 15 26\""
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\"\n'''\n\nn, m = [int(x) for x in stdin.readline().rstrip().split()]\n\nlst = [0] * n\nfor i in range(n):\n    lst[i] = [int(x) for x in stdin.readline().rstrip().split()]"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n1 2 3') == '6 7'\n\"\"\"\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\nassert solution(test_input_4) == test_output_4\nassert solution(test_input_5) == test_output_5\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n\"\n\"als mollen mollen mollen mollen mollen mollen\\n\"\n\"4\\n\"\n\"als when correct\\n\"\n\"mollen moles correct\\n\"\n\"mollen destroy correct\\n\"\n\"mollen mills incorrect\") == \"\"\"64 correct\n665 incorrect\"\"\"\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect') == '64 correct\\n665 incorrect'\nprint(solution(stdin), end='')\n\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\"\"\"\n\nn = int(input())\ndutch = input().split()\nm = int(input())\ncorrect = 0\nincorrect = 0\nfor _ in range(m):\n    if \"correct\" in input().split():\n        correct += 1\n    else:\n        incorrect += 1\nprint(correct, incorrect)\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\\n') == '64 correct\\n665 incorrect'\n\nassert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\\n') == '64 correct\\n665 incorrect'\n\nassert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\n') == '64 correct\\n0 incorrect'\n\nassert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\n') == '64 correct\\n0 incorrect'\n\nassert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\n') == '64 correct\\n0 incorrect'"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'''\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\n''') == '''\n64 correct\n665 incorrect\n'''\n\n---\n>>> \n=== RESTART: /Users/coronauksen/Desktop/study/Python/CodeSigning/Tanya_Zhenukov_lesson4_03_2021.py ===\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\n32 correct\n57 incorrect\n'''\n\nSample Input:\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\nSample Output:\n64 correct\n665 incorrect\n\n=== RESTART: /Users/coronauksen/Desktop/study/Python/CodeSigning/Tanya_Zhenukov_lesson4_03_2021.py ===\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\n32 correct\n57 incorrect\n\nProcess finished with exit code 0\n\n=== RESTART: /Users/coronauksen/Desktop/study/Python/CodeSigning/Tanya_Zhenukov_lesson4_03_2021.py ===\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\n32 correct\n57 incorrect\n\nProcess finished with exit code 0\n\nSample Input:\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\nSample Output:\n64 correct\n665 incorrect\n\n=== RESTART: /Users/coronauksen/Desktop/study/Python/CodeSigning/Tanya_Zhenukov_lesson4_03_2021.py ===\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\n32 correct\n57 incorrect\n\nProcess finished with exit code 0\n\nSample Input:\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\nSample Output:\n64 correct\n665 incorrect\n\n=== RESTART: /Users/coronauksen/Desktop/study/Python/CodeSigning/Tanya_Zhenukov_lesson4_03_2021.py ===\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\n32 correct\n57 incorrect\n\nProcess finished with exit code 0\n\nSample Input:\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\nSample Output:\n64 correct\n665 incorrect\n\n=== RESTART: /Users/coronauksen/Desktop/study/Python/CodeSigning/Tanya_Zhenukov_lesson4_03_2021.py ===\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\n32 correct\n57 incorrect\n\nProcess finished with exit code 0\n\nSample Input:\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\nSample Output:\n64 correct\n66 incorrect\n\n=== RESTART: /Users/coronauksen/Desktop/study/Python/CodeSigning/Tanya_Zhenukov_lesson4_03_2021.py ===\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\n32 correct\n57 incorrect\n\nProcess finished with exit code 0\n\nSample Input:\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\nSample Output:\n64 correct\n65 incorrect\n\n=== RESTART: /Users/coronauksen/Desktop/study/Python/CodeSigning/Tanya_Zhenukov_lesson4_03_2021.py ===\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\n32 correct\n57 incorrect\n\nProcess finished with exit code 0\n\nSample Input:\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\nSample Output:\n64 correct\n64 incorrect\n\n=== RESTART: /Users/coronauksen/Desktop/study/Python/CodeSigning/Tanya_Zhenukov_lesson4_03_2021.py ===\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\n32 correct\n57 incorrect\n\nProcess finished with exit code 0\n\nSample Input:\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\nSample Output:\n64 correct\n64 incorrect\n\n=== RESTART: /Users/coronauksen/Desktop/study/Python/CodeSigning/Tanya_Zhenukov_lesson4_03_2021.py ===\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\n32 correct\n57 incorrect\n\nProcess finished with exit code 0\n\nSample Input:\n7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\nSample Output:\n64 correct\n64 incorrect\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\n mollen destroy correct\\nmollen mills incorrect\") == \"64\\n665\"\n\n\"\"\"\n\n\n\"\"\"\nSolution 2\n\"\"\""
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'''7\nals mollen mollen mollen mollen mollen mollen'''\n) == '''64 correct\n665 incorrect'''\n\nassert solution(\n'''7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect'''\n) == '''64 correct\n665 incorrect'''\n\nassert solution(\n'''7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect'''\n) == '''64 correct\n665 incorrect'''\n\nassert solution(\n'''7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect'''\n) == '''64 correct\n665 incorrect'''\n\nassert solution(\n'''7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect'''\n) == '''64 correct\n665 incorrect'''"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\n\"\n    \"mollen destroy correct\\nmollen mills incorrect\\n\") == \"64\\n665\"\n\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\n\"\n    \"mollen destroy correct\\nmollen mills incorrect\\n\") == \"64\\n665\"\n\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\n\"\n    \"mollen moles correct\\n\"\n    \"mollen destroy correct\\nmollen mills incorrect\\n\") == \"64\\n\"\n\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\n\"\n    \"mollen moles correct\\n\"\n    \"mollen destroy correct\\n\"\n    \"mollen mills incorrect\\n\") == \"64\\n\"\n\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\n\"\n    \"mollen moles correct\\n\"\n    \"mollen destroy correct\\n\"\n    \"mollen mills incorrect\\n\") == \"64\\n\""
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\nprint(solution(\"4\\n2 3 4 3\"))\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\n\"\"\""
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 3 4 3') == 7\n\"\"\""
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\\\n2 3 4 3\") == '7'\n\"\"\"\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(text) == answer\nprint(solution(text))\n\n-----Solution-----"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1 2\\n') == '2'\nassert solution('1 2 3\\n') == '3'\nassert solution('1 2 3 4\\n') == '7'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\n\nprint(solution(stdin.strip()))\n\n\"\"\"\nimport unittest\n\n\nclass Day4Test(unittest.TestCase):\n\n    def test_case_1(self):\n        self.assertEqual(solution(\"4\\n2 3 4 3\"), \"7\")\n\n    def test_case_2(self):\n        self.assertEqual(solution(\"10\\n30 20 40 50 10\"), \"0\")\n\n    def test_case_3(self):\n        self.assertEqual(solution(\"20\\n10 40 50 10 30\"), \"1\")\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\nprint(solution(stdin))\n\"\"\"\n\nimport sys\nimport math\n\n\"\"\"\nI added a check for days in which the first tree has been planted. I assume that the party can be organized only after the first tree has grown up.\n\"\"\"\n\nn = int(sys.stdin.readline())\n\nt = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\n\n\"\"\""
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 3 4 3') == 7\n\"\"\"\n\nN = int(input())\nt = list(map(int, input().split()))\n\nt.sort()\n\nprint(sum(t))\n\n\"\"\"\n\nfrom typing import List, Callable\nfrom collections import Counter\nfrom math import gcd\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0.0 0.0\\n1 1\\n0 2\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0.0 0.0\\n1.0 1.0\\n0.0 2.0\") == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\nassert solution(\"3\\n0 0\\n1 1\\n0 2\") == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\nassert solution(\"2\\n0 0\\n1 1\\n0 2\") == '0.0 0.0\\n2.0 2.0'\n\"\"\"\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\") == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\nassert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\") == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\\n\") == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\nassert solution(\"4\\n1.3 2.4\\n5.9 -0.1\\n0.4 1.2\\n\") == '0.4 1.2\\n1.3 2.4\\n0.4 1.2'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n0 0\\n1 1\\n0 2\\n4\\n') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\n\"\"\"\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 0\\n1 1\\n0 2\\n4\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 2\\n1 1\") == \"1.0 1.0\"\nassert solution(\"3\\n0 0\\n1 1\\n0 2\") == \"1.0 1.0\"\n\"\"\"\nimport math"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0.0 0.0\\n1.1 1.1\\n0.2 2.0\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\nprint(solution(stdin))\n\"\"\"\n\n\nfrom collections import namedtuple\n\nCoordinate = namedtuple('Coordinate', ['x', 'y'])\n\nclass CookieCutter():\n\n    def __init__(self, polygon: str, desired_area: int):\n        self.polygon = polygon\n        self.desired_area = desired_area\n        self.corner_coordinates = self.parse_polygon()\n        self.max_x = max(self.corner_coordinates, key=lambda c: c.x).x\n        self.min_x = min(self.corner_coordinates, key=lambda c: c.x).x\n        self.max_y = max(self.corner_coordinates, key=lambda c: c.y).y\n        self.min_y = min(self.corner_coordinates, key=lambda c: c.y).y\n\n    def parse_polygon(self):\n        polygon = self.polygon.split('\\n')\n        point_coordinates = []\n        for row in polygon[1:]:\n            x, y = row.split(' ')\n            point_coordinates.append(Coordinate(float(x), float(y)))\n        return point_coordinates\n\n    def shrink_polygon(self):\n        shrunk_coordinates = []\n        for i, c in enumerate(self.corner_coordinates):\n            x, y = c.x, c.y\n            shrunk_coordinates.append(Coordinate(x, y))\n        \n        for i, c in enumerate(shrunk_coordinates):\n            c_x, c_y = c.x, c.y\n            if c_x < self.min_x:\n                shrunk_coordinates[i] = Coordinate(self.min_x, c_y)\n            if c_y < self.min_y:\n                shrunk_coordinates[i] = Coordinate(c_x, self.min_y)\n        \n        shrunk_coordinates.sort(key=lambda c: (c.x, c.y))\n        return shrunk_coordinates\n\n    def expand_polygon(self):\n        expanded_coordinates = []\n        for i, c in enumerate(self.shrunk_coordinates):\n            c_x, c_y = c.x, c.y\n            expanded_coordinates.append(Coordinate(c_x, c_y))\n        \n        for i, c in enumerate(expanded_coordinates):\n            c_x, c_y = c.x, c.y\n            if c_x > self.max_x:\n                expanded_coordinates[i] = Coordinate(self.max_x, c_y)\n            if c_y > self.max_y:\n                expanded_coordinates[i] = Coordinate(c_x, self.max_y)\n        \n        expanded_coordinates.sort(key=lambda c: (c.x, c.y))\n        return expanded_coordinates\n\n    def get_relative_area(self, coordinates: list) -> int:\n        deltas = []\n        for i in range(len(coordinates) - 1):\n            dx = coordinates[i + 1].x - coordinates[i].x\n            dy = coordinates[i + 1].y - coordinates[i].y\n            deltas.append(dx * dy)\n        \n        return sum(deltas)\n\n    def adjust_polygon(self, coordinates: list):\n        while True:\n            relative_area = self.get_relative_area(coordinates)\n            if relative_area == 0:\n                return coordinates\n            if relative_area < 0:\n                coordinates = self.expand_polygon()\n                continue\n            if relative_area > self.desired_area:\n                coordinates = self.shrink_polygon()\n                continue\n\n    def draw_polygon(self):\n        x_points = []\n        y_points = []\n        for c in self.coordinates:\n            x_points.append(c.x)\n            y_points.append(c.y)\n        \n        return (x_points, y_points)\n\n    def draw_cookie_cutter(self, coordinates: list):\n        x_points, y_points = coordinates\n        for x in x_points:\n            print(f'{x:.6f}', end=' ')\n        print()\n        for y in y_points:\n            print(f'{y:.6f}', end=' ')\n        print()\n\n    def get_solution(self):\n        self.shrunk_coordinates = self.shrink_polygon()\n        self.coordinates = self.adjust_polygon(self.shrunk_coordinates)\n        solution = self.draw_polygon()\n        return solution"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(1)) == '1'\nassert solution(str(2)) == '2'\nassert solution(str(3)) == '3'\n\"\"\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '3'\nassert solution('4') == '5'\nassert solution('5') == '7'\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '3'\n\"\"\"\nimport math\nimport random\n\nn = int(input())\ndp = [1] * (n+1)\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 1\n\"\"\"\n\n\"\"\"\nIn a warehouse, there is a row of barcodes, where the $i^{th}$ barcode is barcodes[i].\nRearrange the barcodes so that no two adjacent barcodes are equal. To do this, you must do the following:\n\nChoose some index $i$ such that barcodes[$i$] is not equal to barcodes[$i + 1$.\nRearrange barcodes so that barcodes[$i$] is less than barcodes[$i + 1$.\nReplace barcodes[$i$] with barcodes[$i + 1$.\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '1'\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == 1\n\"\"\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '4'\n) == '2'\n\"\"\"\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1\\n6 16\\n9 2') == '36'\n\"\"\""
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\n1 1\\n1 1') == '2'\nassert solution('2 1\\n1 1\\n1 1\\n1 1') == '2'\nassert solution('2 1\\n1 1\\n1 1\\n2 1') == '3'\nassert solution('3 1\\n2 1\\n1 1\\n1 1') == '3'\nassert solution('3 1\\n1 1\\n1 1\\n1 1') == '2'\n\n\"\"\""
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n12 16\") == \"34\"\nassert solution(\"5 2\\n12 16\\n18 36\") == \"52\"\nassert solution(\"5 2\\n12 16\\n18 36\\n8 4\") == \"20\"\n\"\"\"\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n12 16') == '18'\nassert solution('5 2\\n12 16') == '14'\nassert solution('3 1\\n12 16') == '8'\n\nassert solution('7 2\\n12 16') == '22'\nassert solution('8 2\\n12 16') == '26'\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('6 1\\n4 10') == '16'\n'''\na, b = [int(c) for c in stdin.split('\\n')[0].split(' ')]\nm, sigma = [int(c) for c in stdin.split('\\n')[1].split(' ')]"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12 16\") == \"34\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"3 1\\n12 16\"\n) == \"34\"\n\nSample Input:\n3 1\n15 18\nSample Output:\n39\n\"\"\""
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n12 16\") == \"34\"\n\"\"\""
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1\\n12 16') == '34'\nassert solution('10 14\\n25 32') == '55'\nassert solution('10 100\\n100 100') == '500'\n\"\"\""
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a = 3, b = 1, m = 12, sigma = 16) == 34\n\"\"\""
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 1') == '3'\nassert solution('3\\n1 2 3') == '1'\nassert solution('2\\n3 3') == '2'\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\n\n\"\"\""
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\\\n1 2 3 1\") == 3\n\"\"\"\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(s) == e\nprint(solution(s))\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\n\"\"\""
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 1\") == \"3\"\nassert solution(\"4\\n1 2 3 1\\n1 1 3 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 1') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\n\n\"\"\""
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3\n\"\"\"\n\nfrom typing import List, Tuple\nfrom functools import reduce"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 3 1') == '3'\n\n-----Notes-----\nThe number of guests in the input is between 1 and 100000.\n\n\"\"\""
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.0\") == \"1088\"\nassert solution(\"0.5\") == \"571\"\nassert solution(\"0.45\") == \"552\"\n\n-------\nimport math"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1.0') == '1088'\n\n\"\"\""
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.0\") == \"1088\"\n\nassert solution(\"0.5\") == \"596\"\n\n\"\"\""
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1.0') == '1088'"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1.0') == '1088'\nprint(solution('1.0'))"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == '1000'\n\"\"\""
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1.0') == '1088'\nprint(solution('1.0'))\n\"\"\""
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0.5\") == \"819\"\nassert solution(\"1.0\") == \"1000\"\nassert solution(\"2.1\") == \"2000\"\nassert solution(\"5.4\") == \"5544\"\nassert solution(\"12.5\") == \"12500\"\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('0') == '1000'\nassert solution('1') == '100'\nassert solution('2') == '200'\nassert solution('3') == '300'\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '1088'\nassert solution('1.1') == '1088'\nassert solution('1.5') == '1088'\n\"\"\""
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 4\\n10 0 10 0 100\\n10 0 30 0 100\") == \"100.0 100.0 100.0 100.0\"\nassert solution(\"0 4\\n10 1 10 1 100\") == \"25.0 25.0 25.0 25.0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0\\n3\\n100.0 100.0 100.0\\n100.0 100.0 100.0\\n100.0 100.0 100.0\\n\") == \"100.0\\n100.0\\n100.0\"\nassert solution(\"0\\n1\\n100.0 100.0 100.0\\n200.0 200.0 200.0\\n\") == \"200.0\\n200.0\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''0 4\n''') == '25.000000000'\nassert solution('''3 10\n1 1 1 1\n2 2 2 2\n3 3 3 3\n''') == '17.984375000'\n\nassert solution('''0 5\n''') == '100.0'\nassert solution('''0 1\n''') == '100.0'\nassert solution('''0 1\n1 1 1 1\n''') == '100.0'\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 4\\n0 0 0 0\\n0 10 10 10\\n10 0 10 10\\n10 10 0 10\\n10 10 10 0\\n\") == \"25.000000000\\n25.000000000\\n25.000000000\\n25.000000000\""
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 4\\n1 1 1 1') == '25.000000'\n\"\"\""
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 4\\n0 5\\n0 6') == '25.0'"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 4') == '25.0'\n\"\"\""
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 4\\n1 1000 1000 1000\\n2 1000 1000\\n3 1000 1000') == '25.000000000\\n25.000000000\\n25.000000000'\nassert solution('0 4\\n1 1000 1000 1000\\n2 2000 2000\\n3 2000 2000') == '25.000000000\\n25.000000000\\n25.000000000'\nassert solution('0 4\\n1 1000 1000 1000\\n2 1000 1000\\n3 2000 2000') == '25.000000000\\n25.000000000\\n25.000000000'\nassert solution('0 4\\n1 1000 1000 1000\\n2 1000 1000\\n3 2000 2000\\n4 2000 2000') == '25.000000000\\n25.000000000\\n25.000000000'\nassert solution('0 4\\n1 1000 1000 1000\\n2 1000 1000\\n3 2000 2000\\n4 2000 2000\\n5 2000 2000') == '25.000000000\\n25.000000000\\n25.000000000'\n\"\"\"\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n4 9 1 0\\n5 9 1 0\\n4 9 1 1\\n3 9 1 1\\n3 9 1 1\\n5 9 1 1\\n1 0 0 0\\n1 0 0 0\\n1 0 0 0\") == \"25.0\\n25.0\\n25.0\\n25.0\\n\"\n\n-----Constraints-----\n$1 \\le n \\le 10^5$\n$1 \\le s \\le 100$\n$0 \\le x,y,z \\le 100,000$\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 3\\n2 2 5 2\\n3 0 6 2') == '7.00000'\nassert solution('0 3\\n2 2 5 2\\n3 3 7 2') == '4.00000'\nassert solution('0 3\\n2 2 5 2\\n3 3 7 3') == '6.00000'\nassert solution('0 3\\n2 2 5 2\\n3 3 7 4') == '8.00000'\nassert solution('0 3\\n2 2 5 2\\n3 3 7 5') == '10.00000'\n\n\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import print_function\n\nimport math"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"\nprint(\"Passed\")\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 4\\n3\\n4\\n5\\n6\\n7') == 'DA\\nDA\\nDA\\nNE\\nNE'\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\""
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 4\\n3\\n4\\n5\\n6\\n7') == 'DA\\nDA\\nDA\\nNE\\nNE'\nprint('Test pass.')\n\n------------------------------------------------------------------------------------------------------------------------\n\nn, w, h = map(int, stdin.readline().split())\nmatch = [int(input()) for _ in range(n)]\nprint('DA' if sum(match[:w]) < sum(match[w:]) or sum(match[:h]) < sum(match[h:]) else 'NE')\n\n-----"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\\n\"\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 3 4\n3\n4\n5\n6\n7''') == 'DA\\nDA\\nDA\\nNE\\nNE'\nassert solution('''5 3 4\n1\n2\n3\n4\n5''') == 'NE\\nNE\\nNE\\nNE\\nNE'\nassert solution('''5 3 4\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"\n\n----\n\"\"\"\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == 'DA DA DA NE NE'\n\"\"\"\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"\n\nimport sys\nlines = sys.stdin.readlines()\n\nw, h = map(int, lines[0].split())\nm = [int(i) for i in lines[1:]]"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3 4\\n3\\n4\\n5\\n6\\n7') == 'DA DA DA NE NE'\n\nimport re\n\nN, W, H = map(int, re.split('\\s+', stdin.strip(), 2))\n\nmatches = [int(stdin) for stdin in stdin.strip().split('\\n')[:N]]"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(example) == solution('example')"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2\n0 0\n7 42\n\"\"\") == '6'\n\"\"\""
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n0 0\\n7 42') == 6\n\"\"\"\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 1\\n4 2\") == \"6\"\n\"\"\"\n\nn = int(input())\nspeeding = []\nfor i in range(n):\n    t, d = map(int, input().split())\n    speeding.append((t, d))\n\nspeeding = sorted(speeding)\n\nlast_t = speeding[0][0]\nlast_d = speeding[0][1]\n\nfor t, d in speeding[1:]:\n    if t <= last_t:\n        last_t = t\n        last_d = d\n\nprint(int(last_d * 3600 / 2))"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(solution.test_cases) == solution.test_cases_results\nprint(\"All test cases passed.\")\n\n-----Challenge-----\n\n\"\"\"\n\ntest_cases = [\n    \"2\\n0 0\\n7 42\",\n    \"4\\n0 0\\n1 1\\n2 2\\n3 3\",\n]\n\nsolution.test_cases = test_cases\nsolution.test_cases_results = [6, 12]"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\n----\n5\n5 10\n9 20\n8 30\n7 40\n8 50\nSample Output\n40\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n2\n0 0\n7 42\n''') == '6'\nprint('Test pass.')\n\n-----Solution-----\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\"\n\"\"\"\n\nfrom typing import List, Tuple, Dict, Set, Union"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n0 0\\n7 42\") == \"6\"\nassert solution(\"3\\n0 0\\n7 42\\n6 9\") == \"9\"\nassert solution(\"4\\n0 0\\n7 42\\n6 9\\n3 3\") == \"9\"\nassert solution(\"5\\n0 0\\n7 42\\n6 9\\n3 3\\n8 24\") == \"24\"\nassert solution(\"6\\n0 0\\n7 42\\n6 9\\n3 3\\n8 24\\n5 0\") == \"24\"\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\""
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\n\"\"\""
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n\"\n                \"-> ALICE\\n\"\n                \"-> BOB\\n\"\n                \"ALICE BOB -> CARL\\n\") == \"correct\"\n\nassert solution(\"5\\n\"\n                \"-> ALICE\\n\"\n                \"-> BOB\\n\"\n                \"-> ELLA\\n\"\n                \"-> ALICE\\n\"\n                \"-> ELLA\\n\"\n                \"ALICE BOB -> CARL\\n\") == \"1\"\n\nassert solution(\"6\\n\"\n                \"-> ALICE\\n\"\n                \"-> BOB\\n\"\n                \"-> ELLA\\n\"\n                \"-> ALICE\\n\"\n                \"-> ELLA\\n\"\n                \"-> BOB\\n\"\n                \"ALICE BOB -> CARL\\n\") == \"3\"\n\nassert solution(\"1\\n\"\n                \"-> ALICE\\n\"\n                \"ALICE -> CARL\\n\") == \"1\"\n\nassert solution(\"2\\n\"\n                \"-> ALICE\\n\"\n                \"-> BOB\\n\"\n                \"-> ELLA\\n\"\n                \"ALICE -> CARL\\n\") == \"1\""
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n-> ALICE\n-> BOB\nALICE BOB -> CARL\n''') == 'correct'\nassert solution('''2\n-> ALICE\n-> BOB\nALICE BOB -> CARL\n''') == '2'\nassert solution('''1\n-> ALICE\nALICE -> CARL\n''') == '1'\nassert solution('''1\nALICE -> CARL\n''') == '1'\nassert solution('''0\nALICE -> CARL\n''') == '0'\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL') == 'correct'\n\nassert solution('3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL') == 'correct'\n\nassert solution('3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL') == 'correct'\n\nassert solution('3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL') == 'correct'\n\nassert solution('3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL') == 'correct'"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL') == 'correct'\nassert solution('4\\nALICE -> BOB\\nBOB -> CARL\\nALICE CARL -> DENIS\\nDENIS -> TALIS') == '2'\nassert solution('2\\nALICE -> BOB\\nALICE BOB -> CARL') == 'correct'\nassert solution('1\\n-> ALICE') == 'correct'\nassert solution('1\\nALICE -> BOB') == '1'\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\\n') == 'correct'\nassert solution('3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\\n')!= 'incorrect'\nassert solution('3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\\n')!= 'incorrect'\n\nSample Case\n\nSample Case #1\n\nSample Case #2\n\nSample Case #3\n\nSample Output\n\ncorrect\nincorrect\ncorrect\n\n------Do not edit anything above this line---\n\"\"\"\n\n\nfrom typing import NamedTuple\n\n\nclass Proof(NamedTuple):\n    assumptions: list[str]\n    arrow: str\n    conclusion: str\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\nassert solution(\"2\\n-> ALICE\\n-> BOB\\nALICE -> CARL\") == \"1\"\nassert solution(\"1\\n-> ALICE\\nALICE -> CARL\") == \"correct\"\nassert solution(\"1\\n-> ALICE\\nALICE -> CARL\") == \"1\"\nassert solution(\"1\\nALICE -> CARL\") == \"1\""
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n-> ALICE\n-> BOB\nALICE BOB -> CARL\n''') == 'correct'\nassert solution('''2\n-> A\n-> B\nA B -> C\n''') == '1'\nassert solution('''3\n-> A\n-> B\nA B -> C\n''') == 'correct'\nassert solution('''4\n-> A\n-> B\nA B -> C\n-> D\nA B D -> E\n''') == '3'\nassert solution('''5\n-> A\n-> B\nA B -> C\n-> D\n-> E\nA B D -> E\n''') == '5'\n\n'''\n3\n-> ALICE\n-> BOB\nALICE BOB -> CARL\n\n2\n-> A\n-> B\nA B -> C\n\n3\n-> ALICE\n-> BOB\nALICE BOB -> CARL\n\n4\n-> A\n-> B\nA B -> C\n-> D\n-> E\nA B D -> E\n\n5\n-> A\n-> B\nA B -> C\n-> D\n-> E\n-> F\nA B D -> E\n-> G\n-> H\nA B D -> E\n-> I\n-> J\nA B D -> E\n-> K\n-> L\nA B D -> E\n-> M\n-> N\nA B D -> E\n-> O\n-> P\nA B D -> E\n-> Q\n-> R\nA B D -> E\n-> S\n-> T\nA B D -> E\n-> U\n-> V\nA B D -> E\n-> W\n-> X\nA B D -> E\n-> Y\n-> Z\nA B D -> E\n-> AA\n-> AB\nA B D -> E\n-> BA\n-> BB\nA B D -> E\n-> BC\n-> BD\nA B D -> E\n-> BE\n-> BF\nA B D -> E\n-> BG\n-> BH\nA B D -> E\n-> BI\n-> BJ\nA B D -> E\n-> BK\n-> BL\nA B D -> E\n-> BM\n->BN\nA B D -> E\n-> BO\n-> BP\nA B D -> E\n-> BQ\n-> BR\nA B D -> E\n-> BS\n-> BT\nA B D -> E\n-> BU\n-> BV\nA B D -> E\n-> BW\n-> BX\nA B D -> E\n-> BY\n-> BZ\nA B D -> E\n-> CA\n-> CB\nA B D -> E\n-> CC\n-> CD\nA B D -> E\n-> CE\n-> CF\nA B D -> E\n-> CG\n-> CH\nA B D -> E\n-> CI\n-> CJ\nA B D -> E\n-> CK\n-> CL\nA B D -> E\n-> CM\n-> CN\nA B D -> E\n-> CO\n-> CP\nA B D -> E\n-> CQ\n-> CR\nA B D -> E\n-> CS\n-> CT\nA B D -> E\n-> CU\n-> CV\nA B D -> E\n-> CW\n-> CX\nA B D -> E\n-> CY\n-> CZ\nA B D -> E\n'''\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\\n\") == \"correct\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Bruce Stanger\\nBarbara Skinner\\n***\") == \"Runoff!\"\n\"\"\""
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == \"Connie Froggatt\"\nprint('Success')\n\"\"\""
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'Runoff!'\nassert solution('Penny Franklin') == 'Connie Froggatt'\nassert solution('Penny Franklin') == 'Connie Froggatt'\nassert solution('Penny Franklin') == 'Connie Froggatt'\nassert solution('Penny Franklin') == 'Connie Froggatt'\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Penny Franklin\\n\"\n        \"Marti Graham\\n\"\n        \"Connie Froggatt\\n\"\n        \"Joseph Ivers\\n\"\n        \"Connie Froggatt\\n\"\n        \"Penny Franklin\\n\"\n        \"Connie Froggatt\\n\"\n        \"Bruce Stanger\\n\"\n        \"Connie Froggatt\\n\"\n        \"Barbara Skinner\\n\"\n        \"Barbara Skinner\\n\"\n        \"***\\n\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\n\"\n        \"Connie Froggatt\\n\"\n        \"***\\n\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\n\"\n        \"Marti Graham\\n\"\n        \"Connie Froggatt\\n\"\n        \"Penny Franklin\\n\"\n        \"Connie Froggatt\\n\"\n        \"Penny Franklin\\n\"\n        \"***\\n\") == \"Penny Franklin\"\nassert solution(\"Penny Franklin\\n\"\n        \"Marti Graham\\n\"\n        \"Penny Franklin\\n\"\n        \"Connie Froggatt\\n\"\n        \"Penny Franklin\\n\"\n        \"Penny Franklin\\n\"\n        \"Penny Franklin\\n\"\n        \"Penny Franklin\\n\"\n        \"***\\n\") == \"Penny Franklin\"\n\n\"\"\"\n\nimport ast\nfrom collections import Counter"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Runoff!'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Penny Franklin'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Penny Franklin'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Penny Franklin'\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\") == \"Runoff!\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Penny Franklin\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Penny Franklin\"\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\"\nassert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\"\nassert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\"\nassert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\"\nassert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\"\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 6)"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic') == '2'\n'''"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\"\nprint(solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\"))\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == 2\n\"\"\""
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\"\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic') == '2'\nassert solution('2\\nFran-the-Human Fran\\nIan-the-Human Ian\\nPolly-the-Alien Polly\\nSpencer-the-Alien Spencer\\nJenny-the-Alien Jenny') == '0'\n\n\"\"\"\n\nimport sys\nimport collections\nimport functools\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\"\nprint(solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\"))\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\\n2\\n\"\nprint(solution(\"4\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\"))"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'''7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic'''\n) == '2'\nassert solution(\n'''3\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\nGwen Stacy Basic'''\n) == '0'\nassert solution(\n'''3\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\nGwen Stacy Basic\nJon Snow Basic'''\n) == '0'\n\nassert solution(\n'''3\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\nGwen Stacy Basic\nJon Snow Basic\nGwen Stacy Basic'''\n) == '3'\n\nassert solution(\n'''1\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\nGwen Stacy Basic\nJon Snow Basic\nGwen Stacy Basic\nRon Weasley Basic'''\n) == '0'"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\nassert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') =='stay home'"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"\n\"\"\""
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\n'''\n\nfrom collections import namedtuple\nimport re"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == '900'\n\"\"\""
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 2\\n1') == 1\nassert solution('1 1 2\\n2') == 2\nassert solution('1 1 2\\n1') == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"\n\nSample Input:\n3 1000 2 3\n300\n27 3 20\n300\n27 3 20\nSample Output:\nstay home"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(expected)\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 1000 2 3\n200\n0 2 2\n300\n27 3 20''') == '900'\n\n\"\"\"\n\nbudget, people, hotels, weeks = [int(x) for x in stdin.split()]\n\nprices = [int(x) for x in stdin.split('\\n')[1:-1]]\nbeds = [[int(x) for x in stdin.split('\\n')[i + 1].split()] for i in range(hotels)]"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\nC D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"4\\nA A A A\") == \"none\"\nassert solution(\"6\\nC C D C D C D C\") == \"A C D D# F\"\nassert solution(\"4\\nD B D B\") == \"A C D D# F\"\nassert solution(\"4\\nF G A B\") == \"A# C D# F\"\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"C D F D C D F F F C \") == \"A# C D# F\"\n\"\"\"\nfrom collections import defaultdict\nfrom typing import List, Set\n\nA = \"A\"\nA_SHARP = \"A#\"\nB = \"B\"\nC = \"C\"\nC_SHARP = \"C#\"\nD = \"D\"\nD_SHARP = \"D#\"\nE = \"E\"\nF = \"F\"\nF_SHARP = \"F#\"\nG = \"G\"\nG_SHARP = \"G#\"\nSCALE = {A, A_SHARP, B, C, C_SHARP, D, D_SHARP, E, F, F_SHARP, G, G_SHARP}"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\nC D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"12\\nC D C C F C D C D C F C\") == \"A A# C D D# F G\"\nassert solution(\"1\\nC\") == \"none\"\nassert solution(\"2\\nC D\") == \"none\"\nassert solution(\"6\\nC D F D C D F F F C\") == \"A# C D# F G\"\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"A# C D# F G\"\n\"\"\"\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\nABCD') == 'A# C D# F'\nassert solution('4\\nFEDC BED FED') == 'F# G# C# D# E D# F G# A#'\nassert solution('4\\nDDC FDE CFC CBA') == 'C C# C# G C# B C# A C#'\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\nC D F D C D F F F C\") == \"A# C D# F\"\n\n\"\"\"\n\nn = int(input())\nnotes = [input() for _ in range(n)]\nnote_map = {\"A\": 1, \"A#\": 2, \"B\": 3, \"C\": 4, \"C#\": 5, \"D\": 6, \"D#\": 7, \"E\": 8, \"F\": 9, \"F#\": 10, \"G\": 11}\n\nfor i in range(len(notes) - 1):\n    if note_map[notes[i + 1]] - note_map[notes[i]] > 1:\n        print(\"none\")\n        break\nelse:\n    print(\" \".join(k for k in sorted(set(notes))))\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 C D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"10 C D F D C D F F F C C\") == \"none\"\nassert solution(\"4 E D F G A B B C D D E\") == \"A C D E G F# A B\"\nassert solution(\"4 E D F G A B B C D D E E\") == \"A C D E G F# A B\"\nassert solution(\"3 C D F G A B B C D D E E\") == \"A# C D# F A\"\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\nC D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"6\\nC D F D C D F F F\") == \"none\"\n\"\"\"\n\n\nimport collections\nimport itertools\nfrom typing import List, Set, Tuple"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\nC D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"9\\nC D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"6\\nC D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"4\\nC D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"2\\nC D F D C D F F F C\") == \"A# C D# F\"\n\n\"\"\"\n\nwith open(\"inputs/main.txt\", \"r\") as f:\n    n = int(f.readline())\n    notes = f.readline().split()\n\nnotes = sorted(notes)\n\nresult = ''\n\nfor i, note in enumerate(notes):\n    if i < n:\n        result = result + note + '\\n'\n    else:\n        result = result + note\n\nprint(result)\n\nwith open(\"outputs/main.txt\", \"w\") as f:\n    f.write(result)\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"C D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"C D F D C D F F F G\") == \"none\"\nassert solution(\"C D F D C D F F F G A\") == \"none\"\nassert solution(\"C D F D C D F F F G A C\") == \"A# C D# F\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'\nassert solution('dae ju traeligt va') == 'dae ju traeligt va'\n\n\"\"\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == output\n\n-----Problem-----\nGiven a sentence written in the Swedish dialect of \u00f6stg\u00f6tska, determine if the sentence is written in the standard Swedish dialect of rikssvenska.\n\n-----Solution-----\n'''\nfrom collections import Counter"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\n\nprint(solution(\"dae ae ju traeligt va\"))"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju traeligt va\") == \"haer talar vi rikssvenska\"\n\"\"\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"dae ae ju traeligt va\"\n) == \"dae ae ju traeligt va\"\nassert solution(\n\"haer talar vi rikssvenska\"\n) == \"haer talar vi rikssvenska\"\nassert solution(\n\"fahrerens f\u00e4rger v\u00e4garna, f\u00e4rger fykelektronikerna\"\n) == \"fahrerens f\u00e4rger v\u00e4garna, f\u00e4rger fykelektronikerna\"\nassert solution(\n\"efter\u00e5t f\u00e4rger v\u00e4garna, f\u00e4rger fykelektronikerna\"\n) == \"haer talar vi rikssvenska\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"jag och barna v\u00e4ntar\") == \"haer talar vi rikssvenska\"\n\"\"\""
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"ja vad g\u00f6r man n\u00e4r man borde vara traf i rikssvenska\") == \"ja vad g\u00f6r man n\u00e4r man borde vara traf i rikssvenska\"\n\"\"\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'\n\n\"\"\"\n\n\nimport re"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae ae ju traeligt v\u00e4\") == \"haer talar vi rikssvenska\"\n\"\"\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"dae je ju traeligt va\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae je ju traeligt va dae\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae je ju traeligt va dae ae\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae je ju traeligt va dae ae ju\") == \"haer talar vi rikssvenska\"\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n\"\"\"\n\nfrom itertools import product\n\n\nclass Grid:\n    def __init__(self, grid):\n        self.rows, self.columns = len(grid), len(grid[0])\n        self.grid = grid\n        self.max_num = 0\n\n    def get_max_num(self):\n        for row in self.grid:\n            for num in row:\n                if num > self.max_num:\n                    self.max_num = num\n\n    def __str__(self):\n        return '\\n'.join(''.join(row) for row in self.grid)\n\n    def is_valid(self):\n        return all([len(row) == self.columns for row in self.grid]) \\\n               and self.max_num == self.rows - 1\n\n    def rotate(self):\n        self.grid = [[row[j] for row in self.grid][::-1]\n                    for j in range(self.columns)]\n\n    def flip_horizontally(self):\n        self.grid = [row[::-1] for row in self.grid]\n\n    def get_adjacent_cells(self, cell):\n        col, row = cell\n        return [(col + i, row + j) for i, j in product([-1, 0, 1], [-1, 0, 1])\n                if 0 <= col + i < self.columns\n                and 0 <= row + j < self.rows\n                and (i, j)!= (0, 0)]\n\n    def is_valid_cell(self, cell):\n        col, row = cell\n        return (col, row) in self.get_all_cells()\n\n    def get_all_cells(self):\n        return set(product(range(self.columns), range(self.rows)))\n\n    def place_coffee_shops(self):\n        for cell in self.get_all_cells():\n            if self.is_valid_cell(cell):\n                self.grid[cell[1]][cell[0]] = 'E'\n\n    def copy(self):\n        return Grid([row[:] for row in self.grid])\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('...') == '.'\n\nassert solution('#.#') == '#'\nassert solution('#.#.#') == '#.#'\n\nassert solution('..#..#...') == '#'\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n\"\"\""
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\nassert solution('5 6\\n.##..\\n#.#..\\n.##..\\n.#...\\n.###.') == '.#...\\n.###.E\\n#.E.#E\\n.#.E.#'\nassert solution('5 6\\n#.##.#\\n#.#.##\\n#.#.##\\n.#.##.') == '#.E.#E\\n#.E.#E\\n#.E.#E\\n.#.E.#'\nassert solution('5 6\\n.#...\\n.#...\\n.#...\\n.#...') == '#.E.#E\\n#.E.#E\\n#.E.#E\\n.#.E.#'\nassert solution('5 6\\n#.#..\\n#..#.') == '#.E.#E\\n#.E.#E\\n#.E.#E'\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 6\n....#.\n....#.\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n\n\"\"\"\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\n------------"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''12 8 2 4 10 3 25 14''') == '''12 10 3 8 4 2'''\n\n'''\nFor each of the seven pairs of boxes, determine which tower the box in question belongs to. First, sort the boxes from largest to smallest. Then, if the first box is on top of the second, put it in tower one. Otherwise, put it in tower two. Then, if the first tower has three boxes, put the second box in tower one and the third in tower two. Otherwise, put the third box in tower one and the second box in tower two.\n\nThe function solution should return a string of the tower heights, in the order they should be displayed.\n\nFor example, if the input was\n12 8 2 4 10 3 25 14\nthe output should be\n12 10 3 8 4 2\n'''\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''12 8 2 4 10 3 25 14''') == '''12 10 3 8 4 2'''\n\n----Test cases----\nSample Input:\n11 15 7 1 2 8\nSample Output:\n11 15 7 2 8 1'''\n\nSample Input:\n11 15 7 1 2 8\nSample Output:\n11 15 7 2 8 1\n\nSample Input:\n1 2 3 4 5 6 7 8 9 10\nSample Output:\n1 2 3 4 5 6 7 8 9 10\n\nSample Input:\n1 2 3 4 5 6 7 8 9 10 11\nSample Output:\n1 2 3 4 5 6 7 8 9 10 11\n\nSample Input:\n1 2 3 4 5 6 7 8 9 10 11 12\nSample Output:\n1 2 3 4 5 6 7 8 9 10 11 12\n\nSample Input:\n2 2 2 2 2 2 2 2\nSample Output:\n2 2 2 2 2 2 2 2\n\nSample Input:\n11 10 9 8 7 6 5 4 3 2 1\nSample Output:\n11 10 9 8 7 6 5 4 3 2 1\n\nSample Input:\n6 5 4 3 2 1\nSample Output:\n6 5 4 3 2 1\n\nSample Input:\n1 2 3 4 5 6 7 8 9 10 11\nSample Output:\n1 2 3 4 5 6 7 8 9 10 11\n\nSample Input:\n1 2 3 4 5 6 7 8 9 10 11 12\nSample Output:\n1 2 3 4 5 6 7 8 9 10 11 12\n\nSample Input:\n2 2 2 2 2 2 2 2\nSample Output:\n2 2 2 2 2 2 2 2\n\nSample Input:\n1 2 3 4 5 6 7 8 9 10 11\nSample Output:\n1 2 3 4 5 6 7 8 9 10 11\n\nSample Input:\n1 2 3 4 5 6 7 8 9 10 11 12\nSample Output:\n1 2 3 4 5 6 7 8 9 10 11 12\n\nSample Input:\n2 1 2 1\nSample Output:\n2 1 2 1\n\nSample Input:\n1 1 1\nSample Output:\n1 1 1\n\nSample Input:\n1 1 1 1\nSample Output:\n1 1 1 1\n\nSample Input:\n3 2 2\nSample Output:\n3 2 2'''\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\nassert solution(\"4 2 6 1 1\") == \"4 6 1 2\"\n\n\"\"\"\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5 6 7') == '6 7 5 4 3 2 1'\nassert solution('1 1 1 1 1 1 1 1 1 1 1') == '10 9 8 7 6 5 4 3 2 1'\nassert solution('1 2 3 3 4 5 6 7') == '7 6 5 4 3 2 1'\nassert solution('1 1 1 1 1 1 1 1 1 1 1 1') == '10 9 8 7 6 5 4 3 2 1'\n'''"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\nassert solution(\"25 14 3 4 10 2 8\") == \"25 14 3 4 10 2\"\nassert solution(\"10 8 12 10 12 6 8\") == \"12 10 12 6 8\"\n\n\"\"\""
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\n\"\"\"\n\nbox_heights = list(map(int, input().split()))\ntower_heights = list(map(int, input().split()))\n\nfor i in range(6):\n    print(box_heights[i], end=\" \")\nprint()\n\nfor i in range(3):\n    min_height = min(box_heights[i:6])\n    max_height = max(box_heights[i:6])\n    index = box_heights.index(min_height)\n    box_heights[index] = max_height\n\nfor i in range(6):\n    print(box_heights[i], end=\" \")\nprint()\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\"\"\""
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\n\"\"\"\n\nimport sys\nimport math\nimport random\nimport time\nfrom multiprocessing import Pool\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1 1\\n2 1 0\\n3 2 1') == '3'\nassert solution('4 1 2\\n3 1 2\\n4 1 0\\n1 1 1') == '4'\nassert solution('7 1 1\\n2 1 1\\n3 1 1\\n4 1 1\\n5 0 1\\n4 1 0\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 1 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\n1 0 1\\n2 1 1\\n3 1 1\\n4 0 1\\"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('\\n') == '\\n'\nassert solution('\\r\\n') == '\\r\\n'\nassert solution('a\\nb\\r\\nc\\r\\n') == '\\n'\nassert solution('a\\nb\\nc\\n') == '\\n'\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 0 3') == '4'\nassert solution('3 0 0') == '0'\nassert solution('3 1 2') == '2'\nassert solution('3 2 1') == '2'\nassert solution('3 2 3') == '5'\n\n'''\nimport collections"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9 0 3') == 4\n\"\"\"\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9 0 3') == '4'\n\"\"\""
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 0 3\\n2 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 0 3\") == \"4\"\n\"\"\"\n\ne, f, c = [int(i) for i in input().strip().split(\" \")]\n\ntotal = e + f + c\nsoda = e + c\n\nprint(total - soda)\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 0 3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5 6 4') == ''\nassert solution('4 6 8') == '5'\n\"\"\"\n\ne, f, c = [int(x) for x in stdin.split(' ')]\n\nprint((f-1) // c + 1)\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9 0 3') == '4'\nassert solution('9 0 2') == '0'\nassert solution('8 0 1') == '8'\nassert solution('9 0 2') == '0'\nassert solution('9 0 1') == '9'\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1010\") == 12\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1010\") == \"12\"\nprint(solution(\"1010\"))\n'''\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1010') == '12'\nassert solution('11101') == '31'\nassert solution('1110111') == '3'\nassert solution('111011101110111') == '3'\n\"\"\""
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1010\") == \"12\"\nassert solution(\"1100\") == \"3\"\nassert solution(\"110111\") == \"27\"\nassert solution(\"101010\") == \"42\"\nassert solution(\"11101110111010\") == \"132\"\n\"\"\""
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1010') == '12'\nassert solution('1111') == '15'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1010') == '12'\nassert solution('11010') == '14'\nassert solution('101010') == '20'\nassert solution('100010') == '24'\nassert solution('111110') == '46'\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1010') == '12'\nassert solution('101101010') == '144'\nassert solution('111111111') == '255'\nassert solution('111111111111111111111111111111111') == '40841947'\n\n---Problem---\n\nYou are given a binary number. You need to convert this number to the octal number.\n\nInput: A binary number as a string.\n\nOutput: The octal number as a string.\n\nPreconditions: 0 < len(bin_num) \u2264 100\n0 < len(bin_num) \u2264 100\nAllowed digits in the binary number: 0, 1\n\"\"\"\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1010\") == 12\nprint(solution(\"1010\"))\n\nYou can assume that all test cases for the problem will have valid input.\n\n\"\"\""
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1010') == '12'\n\nSolution:\n\nimport re"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1010') == '12'\n\nassert solution('10110110') == '220'\n\nprint(solution('10110110'))\n\n\"\"\""
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n'2 3'\n'..o'\n'o..'\n) == '2'"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\".o.\") == 0\nassert solution(\"ooo\") == 2\nassert solution(\"..o\") == 1"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n..o\\no..\\n\") == \"2\"\n\"\"\"\n\nn, s = input().split()\nn, s = int(n), int(s)\n\nout = 0\nfor _ in range(n):\n    s -= 1\n    out += s\n    if s == 0:\n        break\nprint(out)\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == 2\n\"\"\""
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('.') == ''\nassert solution('..') == ''\nassert solution('o') == ''\nassert solution('oo') == 'o'\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == \"2\"\n\n-----Solution-----\n\"\"\"\n\nR, S = [int(x) for x in stdin.strip().split()]\nM = []\nfor _ in range(R):\n    M.append(list(stdin.strip().split()[1]))"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1\\n.') == '0'\nassert solution('1\\n..') == '0'\nassert solution('1\\no') == '0'\nassert solution('2\\n.o') == '1'\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == \"2\"\n\"\"\"\n\n\"\"\"\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\"\"\""
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n..o\\no..\\n') == 2\n\n\"\"\"\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\".oo.\") == 1\nassert solution(\"ooo..\") == 0\nassert solution(\"..oo\") == 0\n\n\"\"\"\n\n\"\"\"\nThe idea is that one person can sit on their left neighbour, so one person can have the idea of two handshakes.\n\nBut one person can't sit on their neighbour to their right, because the order doesn't allow this.\n\nIf there is an empty seat on the left, it can be occupied by two people. So the next person can only have one handshake.\n\nIf there is no empty seat on the left, it can be occupied by one person. Then the next person can only have one handshake.\n\nIf there is no empty seat to the left and no empty seat on the right, then the next person can have two handshakes.\n\nThen we calculate the total number of handshakes by iterating through the seating order and incrementing the count at every time there's an empty seat to the left.\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\n''') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n\nassert solution('''\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\n''') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n\nassert solution('''\n4 2\n1 2\n1 3\n2 3\n''') == 'LADICA\\nLADICA\\nLADICA\\nSMECE'\n\nassert solution('''\n4 2\n1 2\n1 3\n2 3\n''') == 'LADICA\\nSMECE\\nSMECE\\nSMECE'\n\nassert solution('''\n5 3\n1 2\n1 3\n1 4\n2 3\n''') == 'LADICA\\nLADICA\\nLADICA\\nLADICA\\nSMECE'"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\\n\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\\nSMECE\"\nassert solution(\"4 3\\n1 3\\n1 2\\n1 3\\n1 2\\n\") == \"LADICA\\nLADICA\\nSMECE\\nSMECE\\nSMECE\"\nassert solution(\"2 3\\n1 2\\n\") == \"SMECE\\nSMECE\"\nassert solution(\"5 3\\n1 1\\n1 2\\n1 3\\n1 4\\n1 1\\n\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\\nSMECE\"\nassert solution(\"3 3\\n1 3\\n1 2\\n\") == \"SMECE\\nSMECE\\nSMECE\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\nassert solution(\"10 4\\n3 1\\n7 6\\n8 7\\n8 8\\n8 9\\n9 10\") == \"SMECE\\nSMECE\\nSMECE\\nSMECE\\nSMECE\\nLADICA\\nLADICA\\nLADICA\\nLADICA\"\n\"\"\"\n\nimport sys\n\nlines = []\nfor line in sys.stdin:\n    lines.append(line.rstrip('\\n'))\n\nN, L = [int(elem) for elem in lines[0].split()]\n\ndrawers = {}\n\nfor i in range(1, N + 1):\n    A, B = [int(elem) for elem in lines[i].split()]\n    drawers[i] = (A, B)\n\nfor i in range(1, N + 1):\n    A, B = drawers[i]\n\n    while drawers[i][0]!= A:\n        A = drawers[i][0]\n        if drawers[i][1] == A:\n            drawers[i] = (B, drawers[i][0])\n            A, B = drawers[i]\n        else:\n            drawers[i] = (drawers[i][0], drawers[i][1])\n            A, B = drawers[i]\n\n    print(\"LADICA\" if drawers[i][0] == 1 else \"SMECE\")\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\nassert solution(\"3 3\\n1 2\\n2 3\\n1 3\\n1 2\") == \"LADICA\\nSMECE\\nSMECE\"\n\"\"\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n1 2\\n2 3\\n1 3\\n1 2\\n2 1\\n1 3\\n1 3\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\"\n\n\"\"\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\n\"\"\"\n\nfrom collections import defaultdict\n\nN, L = [int(x) for x in input().split()]\n\nd = defaultdict(list)\n\nfor i in range(N):\n    A, B = [int(x) for x in input().split()]\n    d[A].append(i+1)\n    d[B].append(i+1)\n\nsolution = []\n\nfor i in range(1, N+1):\n    if len(d[i]) == 1:\n        solution.append(\"LADICA\")\n    elif len(d[i]) == 2:\n        solution.append(\"LADICA\")\n    elif len(d[i]) == 0:\n        solution.append(\"SMECE\")\n    else:\n        continue\n\nprint(\"\\n\".join(solution))\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5 3\n1 2\n1 3\n1 2\n1 3\n1 2\n\"\"\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\n\"\"\"\n\nfrom collections import Counter\nimport sys"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n0\\n\") == \"1 2\"\nassert solution(\"1\\n0\\n\") == \"1\"\n\nSample Input:\n5\n0 3 2 4 1\nSample Output:\n1 2 3 4 5\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0\\n2') == '1 2'\nassert solution('2\\n1') == '2 1'\nassert solution('3\\n0 2\\n1') == '2 1 3'\nassert solution('7\\n0 3\\n2 1\\n1 5\\n0 2\\n4 3') == '2 3 1 4 5 7'\n\n\"\"\""
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n0') == '1 2'\nassert solution('2\\n1') == '2 1'\nassert solution('3\\n1 1') == '2 1 3'\nassert solution('3\\n0 0') == '1 2 3'\nassert solution('4\\n2 1 1') == '3 2 4 1'\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 2 1\") == \"1 2 0\"\nassert solution(\"5\\n2 3 0 1 4\") == \"3 4 2 0 1\"\nassert solution(\"1\\n0\") == \"0\"\nassert solution(\"2\\n0 1\") == \"0 1\"\n\"\"\"\n\nimport os\nimport sys\nimport math\nimport re\n\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))\n\nfrom utils import logger\nfrom utils.interfaces import PolygonInterface\n\nlog = logger.get_logger(\"day5\")\n\n\nclass Day5(PolygonInterface):\n\n    def __init__(self):\n        pass\n\n    @staticmethod\n    def solve(input_, test_input=None):\n        try:\n            n = input_['n']\n            stdin = input_['stdin']\n            # n = int(re.findall(r'\\d+', input_['stdin'])[0])\n            # input_['stdin'] = input_['stdin'].split(\"\\n\")\n            # input_['stdin'] = [int(i) for i in input_['stdin']]\n            result = []\n            for i in range(n):\n                result.append(stdin[i] - i - 1)\n            log.info(f\"{n} -> {result}\")\n            return result\n        except Exception as e:\n            log.error(f\"Error occurred: {e}\")\n            raise e\n\n    @staticmethod\n    def test():\n        for input_, result in test_input:\n            log.debug(f\"Running test case: {input_}, {result}\")\n            assert Day5.solve(input_, test_input) == result\n        log.debug(\"All test cases passed.\")\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == '1 2'\nassert solution('0') == '1 2'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n0 1 2') == '1 2 3'\nassert solution('4\\n2 1 3 0') == '0 1 2 3'\nassert solution('3\\n0 1 2') == '1 2 3'\n\nassert solution('2\\n0 1') == '1 2'\nassert solution('2\\n1 0') == '0 1'\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\\n\") == \"4 3 2 1\"\n\"\"\"\n\n\"\"\"\nCode:\nn = int(stdin.readline().strip())\nlines = stdin.readline().strip().split()\nlines = [int(x) for x in lines]\n\nlines.sort()\n\nfor i in range(len(lines) - 1):\n    lines[i + 1] = lines[i] + lines[i + 1]\n\nprint(*lines)\n\n\"\"\"\n\n\n\"\"\"\nExplanation:\nn = 4\nlines = [0, 1, 2, 3]\nlines = [0, 1, 3, 6]\nlines = [0, 1, 2, 5]\nlines = [0, 1, 3, 4]\nlines = [0, 1, 2, 3]\nlines = [0, 2, 4, 6]\nlines = [0, 3, 5, 6]\nlines = [0, 4, 6, 7]\nlines = [0, 5, 7, 8]\nlines = [0, 6, 8, 9]\nlines = [0, 7, 9, 10]\nlines = [0, 8, 10, 11]\nlines = [0, 9, 11, 12]\nlines = [0, 10, 12, 13]\nlines = [0, 11, 13, 14]\nlines = [0, 12, 14, 15]\nlines = [0, 13, 15, 16]\nlines = [0, 14, 16, 17]\nlines = [0, 15, 17, 18]\nlines = [0, 16, 18, 19]\nlines = [0, 17, 19, 20]\nlines = [0, 18, 20, 21]\nlines = [0, 19, 21, 22]\nlines = [0, 20, 22, 23]\nlines = [0, 21, 23, 24]\nlines = [0, 22, 24, 25]\nlines = [0, 23, 25, 26]\nlines = [0, 24, 26, 27]\nlines = [0, 25, 27, 28]\nlines = [0, 26, 28, 29]\nlines = [0, 27, 29, 30]\nlines = [0, 28, 30, 31]\nlines = [0, 29, 31, 32]\nlines = [0, 30, 32, 33]\nlines = [0, 31, 33, 34]\nlines = [0, 32, 34, 35]\nlines = [0, 33, 35, 36]\nlines = [0, 34, 36, 37]\nlines = [0, 35, 37, 38]\nlines = [0, 36, 38, 39]\nlines = [0, 37, 39, 40]\nlines = [0, 38, 40, 41]\nlines = [0, 39, 41, 42]\nlines = [0, 40, 42, 43]\nlines = [0, 41, 43, 44]\nlines = [0, 42, 44, 45]\nlines = [0, 43, 45, 46]\nlines = [0, 44, 46, 47]\nlines = [0, 45, 47, 48]\nlines = [0, 46, 48, 49]\nlines = [0, 47, 49, 50]\nlines = [0, 48, 50, 51]\nlines = [0, 49, 51, 52]\nlines = [0, 50, 52, 53]\nlines = [0, 51, 53, 54]\nlines = [0, 52, 54, 55]\nlines = [0, 53, 55, 56]\nlines = [0, 54, 56, 57]\nlines = [0, 55, 57, 58]\nlines = [0, 56, 58, 59]\nlines = [0, 57, 59, 60]\nlines = [0, 58, 60, 61]\nlines = [0, 59, 61, 62]\nlines = [0, 60, 62, 63]\nlines = [0, 61, 63, 64]\nlines = [0, 62, 64, 65]\nlines = [0, 63, 65, 66]\nlines = [0, 64, 66, 67]\nlines = [0, 65, 67, 68]\nlines = [0, 66, 68, 69]\nlines = [0, 67, 69, 70]\nlines = [0, 68, 70, 71]\nlines = [0, 69, 71, 72]\nlines = [0, 70, 72, 73]\nlines = [0, 71, 73, 74]\nlines = [0, 72, 74, 75]\nlines = [0, 73, 75, 76]\nlines = [0, 74, 76, 77]\nlines = [0, 75, 77, 78]\nlines = [0, 76, 78, 79]\nlines = [0, 77, 79, 80]\nlines = [0, 78, 80, 81]\nlines = [0, 79, 81, 82]\nlines = [0, 80, 82, 83]\nlines = [0, 81, 83, 84]\nlines = [0, 82, 84, 85]\nlines = [0, 83, 85, 86]\nlines = [0, 84, 86, 87]\nlines = [0, 85, 87, 88]\nlines = [0, 86, 88, 89]\nlines = [0, 87, 89, 90]\nlines = [0, 88, 90, 91]\nlines = [0, 89, 91, 92]\nlines = [0, 90, 92, 93]\nlines = [0, 91, 93, 94]\nlines = [0, 92, 94, 95]\nlines = [0, 93, 95, 96]\nlines = [0, 94, 96, 97]\nlines = [0, 95, 97, 98]\nlines = [0, 96, 98, 99]\nlines = [0, 97, 99, 100]\nlines = [0, 98, 100, 101]\nlines = [0, 99, 101, 102]\nlines = [0, 100, 102, 103]\nlines = [0, 101, 103, 104]\nlines = [0, 102, 104, 105]\nlines = [0, 103, 105, 106]\nlines = [0, 104, 106, 107]\nlines = [0, 105, 107, 108]\nlines = [0, 106, 108, 109]\nlines = [0, 107, 109, 110]\nlines = [0, 108, 110, 111]\nlines = [0, 109, 111, 112]\nlines = [0, 110, 112, 113]\nlines = [0, 111, 113, 114]\nlines = [0, 112, 114, 115]\nlines = [0, 113, 115, 116]\nlines = [0, 114, 116, 117]\nlines = [0, 115, 117, 118]\nlines = [0, 116, 118, 119]\nlines = [0, 117, 119, 120]\nlines = [0, 118, 120, 121]\nlines = [0, 119, 121, 122]\nlines = [0, 120, 122, 123]\nlines = [0, 121, 123, 124]\nlines = [0, 122, 124, 125]\nlines = [0, 123, 125, 126]\nlines = [0, 124, 126, 127]\nlines = [0, 125, 127, 128]\nlines = [0, 126, 128, 129]\nlines = [0, 127, 129, 130]\nlines = [0, 128, 130, 131]\nlines = [0, 129, 131, 132]\nlines = [0, 130, 132, 133]\nlines = [0, 131, 133, 134]\nlines = [0, 132, 134, 135]\nlines = [0, 133"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n0\") == \"1 2\"\nassert solution(\"2\\n1\") == \"2 1\"\nassert solution(\"3\\n0 0\") == \"1 2 3\"\nassert solution(\"3\\n1 1\") == \"3 2 1\"\nassert solution(\"3\\n2 1\") == \"3 1 2\"\n\"\"\"\n\nimport sys\nimport os\nfrom datetime import datetime\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"2\n0\"\"\") == \"\"\"1 2\"\"\"\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n0') == '1 2'\nprint(solution('2\\n0'))\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open(r\"D:\\Code\\GitHub\\Hackerrank\\input.txt\", \"r\").read()) == \"4\"\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"\nassert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n\") == \"1\"\nprint(solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n\"))\nassert solution(\"7 5 0\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n0 3\\n1 4\\n\") == \"2\"\nprint(solution(\"7 5 0\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n0 3\\n1 4\\n\"))\n\n\"\"\"\n\n\nfrom typing import List\n\nfrom collections import defaultdict"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == output\n\n-----Explanation-----\nThe horror list consists of movies with IDs 0 and 5, while the database contains two similarities: (0, 5) and (1, 2). \nThe Horror index of movie 0 is 1, since it is the most similar movie to the horror list (movies with IDs 0 and 5). \nThis is the only movie with a Horror index higher than 0. \n\nYou should return the ID of movie 0.\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2') == \"1\""
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == '1'\n\"\"\"\n\nimport operator"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"6 3 5\\n\"\n    \"0 5 2\\n\"\n    \"0 1\\n\"\n    \"1 2\\n\"\n    \"4 5\\n\"\n    \"3 5\\n\"\n    \"0 2\"\n) == \"1\"\n\nSample Input:\n6 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\n5 6\n1 5\n2 6\n4 6\nSample Output:\n0\nassert solution(\n    \"6 3 5\\n\"\n    \"0 5 2\\n\"\n    \"0 1\\n\"\n    \"1 2\\n\"\n    \"4 5\\n\"\n    \"3 5\\n\"\n    \"0 2\\n\"\n    \"5 6\\n\"\n    \"1 5\\n\"\n    \"2 6\\n\"\n    \"4 6\"\n) == \"0\"\n\nSample Input:\n6 2 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\n3 6\n0 5\n1 6\n2 6\nSample Output:\n0\n\nSample Input:\n8 3 4\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\n3 6\n0 5\n1 6\n2 6\nSample Output:\n1\n\nSample Input:\n8 3 4\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\n3 6\n0 5\n1 6\n2 6\nSample Output:\n0\n\nSample Input:\n6 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\n2 6\n0 5\n1 6\n2 6\nSample Output:\n1\n\"\"\""
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\") == '1'\nprint(solution(\"4 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\"))\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == '1'\nassert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == '0'\nassert solution(\"6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2''') == '1'\nassert solution('''4 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2''') == '3'\nassert solution('''4 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2''') == '0'\nassert solution('''6 3 5\n0 5 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2\n4 5\n3 5\n0 2\n0 1\n1 2"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 3 4') == '4 3 1'\nassert solution('1\\n3') == 'impossible'"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n1 3 4''') == '''4 3 1'''\n\nassert solution('''3\n1 3 4\n''') == '''impossible'''\n\nassert solution('''5\n4 3 2 1 1\n''') == '''impossible'''\n\nassert solution('''5\n1 4 3 2 3\n''') == '''1 1 4 3 2'''\n\nassert solution('''5\n1 2 1 2 1\n''') == '''1 2 1 1 1'''"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"3 2 1\"\nassert solution(\"1 3 2\") == \"3 2 1\"\nassert solution(\"1 4 3\") == \"impossible\"\nassert solution(\"1 4 3\", False) == \"3 2 1\"\nassert solution(\"1 2 3\", False) == \"3 2 1\"\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"4\\n1 3 4\\n\"\n) == \"4 3 1\"\nassert solution(\n    \"3\\n1 3 4\\n\"\n) == \"impossible\"\n\n\"\"\"\n\nfrom collections import deque\n\nT = int(input())\n\nfor _ in range(T):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    d = deque()\n    for i in range(n):\n        d.append(lst[i])\n    if n == 1:\n        print(0)\n        continue\n    res = 0\n    #print(lst)\n    #print(d)\n    for i in range(1, n):\n        #print(i)\n        d.append(d[0] + d[i])\n        if i == 1:\n            #print(\"here\")\n            #print(d)\n            if abs(d[0] - d[1]) > abs(d[1] - d[2]):\n                d.popleft()\n                d.popleft()\n                d.appendleft(d[0])\n                d.append(d[-1])\n                res = 1\n                break\n            else:\n                d.popleft()\n                d.popleft()\n                d.appendleft(d[0])\n                d.append(d[-1])\n                res = 2\n                break\n        else:\n            if abs(d[i - 1] - d[i]) > abs(d[i] - d[i + 1]):\n                d.popleft()\n                d.popleft()\n                d.appendleft(d[0])\n                d.append(d[-1])\n                res = 1\n                break\n            else:\n                d.popleft()\n                d.popleft()\n                d.appendleft(d[0])\n                d.append(d[-1])\n                res = 2\n                break\n    print(res)\n\n\"\"\"\n2\n1\n3\n3\n5\n8\n4\n9\n9\n1\n1\n4\n1\n\"\"\"\n\"\"\"\n2\n4\n1 3 4\nSample Output:\n4 3 1\nimpossible\n\"\"\"\n\"\"\"\n3\n3\n1 3 4\nimpossible\n\"\"\""
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 4\") == \"4 3 1\"\nassert solution(\"1 3 4\")!= \"4 1 3\"\nassert solution(\"1 3 4\")!= \"3 4 1\"\nassert solution(\"1 3 4\")!= \"1 3 4\"\nassert solution(\"3 3 3\") == \"impossible\"\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3 4\\n') == '4 3 1'\n\"\"\""
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3\n1 3 4\n\"\"\") == \"4 3 1\"\n\nassert solution(\"\"\"4\n1 2 3 4\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"3\n3 2 1\n\"\"\") == \"impossible\"\n\nassert solution(\"\"\"3\n3 1 2\n\"\"\") == \"3 2 1\"\n\nassert solution(\"\"\"3\n4 1 3\n\"\"\") == \"impossible\""
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 4\") == \"4 3 1\"\nassert solution(\"2 4 8\") == \"impossible\"\nassert solution(\"3 4 1\") == \"4 3 1\"\nassert solution(\"5 5 6\") == \"impossible\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 3 4 5') == '5 1 2 3 4'\n\"\"\"\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 10') == '25.0'\nassert solution('3 10 5') == '15.0'\nassert solution('2 10 5') == '25.0'\nassert solution('2 10 5 10 10 10') == '15.0'\nassert solution('10 10 1') == '10.0'\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"\nprint(solution(input()))\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 20 15') == '18.400'\n\n\"\"\"\n\nimport math\n\nn, p, k = map(int, stdin.readline().split())\nt = [int(stdin.readline()) for _ in range(n)]"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 20 15') == '18.400'\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 20 15\\n3 10\") == '18.4'\nassert solution(\"1 10 1\\n1\") == '1.0'\nassert solution(\"2 20 15\\n3 10\\n1 10\") == '8.0'\nassert solution(\"2 20 15\\n3 10\\n1 10\\n2 10\") == '8.2'\nassert solution(\"2 20 15\\n3 10\\n1 10\\n2 10\\n3 10\") == '8.0'\n\"\"\"\n\nn, p, k = [int(n) for n in input().split()]\n\nt = [int(n) for n in input().split()]\n\nt.sort()\n\ntotal = 0\n\nfor i in range(n):\n    total += ((t[i] - total) * 100) / p\n\nprint(total)\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3 10\n3 10\n3 10\"\"\") == '6.00'\n\nassert solution(\"\"\"2 100\n1 1\n4 1000\"\"\") == '200.00'\n\nassert solution(\"\"\"1 100\n100 100\"\"\") == '100.00'\n\nassert solution(\"\"\"3 10\n1 1\n2 3\"\"\") == '7.50'\n\nassert solution(\"\"\"1 1\n1 1\"\"\") == '1.00'"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\\n\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\nprint(solution(input()))\n\n-----Notes-----\nThe Manhattan distance is not a metric because it is not additive. For example, a point on the map far right and very far down (on the right hand or bottom edge) will have a Manhattan distance of |(right-bottom)|+|(right-bottom)| = 2, but the distance between (right,bottom) and (right,bottom) is obviously equal to 0.\n\"\"\""
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n....H\n.....\nS....\n....H\n.....''') == 5\n\nassert solution('''8\n.S..\n..H..\n..H..\n.H.H.\n.H.H.\n..H..\n..H..\n...S''') == 9\n\nassert solution('''5\n..H.\n....\nH.H.\n....\n....''') == 4\n\nassert solution('''5\n.S...\n....H\nS....\n....H\n.....''') == 4\n\nassert solution('''5\n.S....\nH....H\n....H.\n....H.\n.....''') == 9"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\".HH.H..H.H....H..H.H..H\") == 18\nassert solution(\".H....H....H....H....H....H\") == 4\nassert solution(\".S....S....S....S....S....S....S....S....S\") == 32\n\"\"\"\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n....H\n.....\nS....\n....H\n.....\n''') == 5\nassert solution('''4\n....H\n....H\n....H\n....H\n''') == 0\nassert solution('''3\nH.H\n....\n....\n''') == 3\nassert solution('''4\n....H\nS....\n....H\n....H\n''') == 2\nassert solution('''5\n....S\n....H\n....H\n....H\n....H\n''') == 3\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input))\n\n---------------\nimport sys\nsys.setrecursionlimit(50000)\n\nclass Grid:\n    def __init__(self, width: int, height: int, grid: list):\n        self.width = width\n        self.height = height\n        self.grid = grid"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\") == \"5\"\nassert solution(\"7\\n....H\\n.....\\n....S\\n....H\\n....S\") == \"9\"\nassert solution(\"7\\n....H\\n.....\\n...S\\n....H\\n....S\") == \"6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\nassert solution('10\\n..S.\\n..H.\\n...H\\n....H\\n....H\\n....H\\n....H') == '0'\n\n----Problem----\nIn this problem, we consider the Manhattan distance of two points on the cartesian plane as the distance between them.\n\nYour task is to code the function solution(stdin) which takes as input a string stdin as follows:\n\nstdin has two lines.\nThe first line of stdin contains an integer n where 2<= n <= 100, the height and width of the grid.\nThe second line of stdin contains a string stdin consisting of characters '.', 'S', 'H', and '\\n' (representing a period, a spy, a safe house, and a newline character, respectively).\n\nThe string stdin represents a grid with n^2 safe houses and at most n^2 spies. Each row of the grid is indexed from 0 to n-1, and each column from 0 to n-1.\n\nThe character '.' represents a city block.\nThe character 'S' represents a spy.\nThe character 'H' represents a safe house.\nThe character '\\n' represents the end of a row.\n\nThe function returns an integer representing the Manhattan distance of the nearest safe house.\n\nConstraints\n1<= n <= 100\n'S' and 'H' will always be present\nThere will be at least one safe house and at least one spy in the grid.\nThere will be exactly one safe house and at most n^2 spies in the grid.\nThe grid will always be rectangular and the number of rows and columns will be equal.\n-----Solution-----\n\n\"\"\"\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(sample_input) == expected_output\n\n-----Solution-----\n\"\"\"\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == \"0\"\n\"\"\"\nfrom collections import Counter\nfrom typing import List"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == \"0\"\n\n---\n\"\"\""
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == 0\nassert solution('4 2 3\\n2 4\\n1 3 5') == 0\nassert solution('4 2 3\\n1 3 5\\n1 3 5') == 1\nassert solution('5 2 3\\n1 3 5\\n1 3 5') == 0\nassert solution('5 2 3\\n1 3 5\\n1 4 5') == 1\n\n------BONUS------\nFor five teams, your solution should be able to handle all test cases.\n\"\"\"\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 3\") == \"0\"\nassert solution(\"4 5 2 3\") == \"3\"\nassert solution(\"7 3 3\") == \"1\"\nassert solution(\"1 3 2\") == \"0\"\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n4\\n1 3 5\") == \"0\"\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nn, s, r = [int(i) for i in stdin.readline().split()]\n\nres = []\nfor i in range(s):\n    res.append(int(stdin.readline()))\nfor i in range(r):\n    res.append(int(stdin.readline()))\n\nres.sort()\n\ncurr = 1\ni = 0\n\nwhile i < len(res) and curr >= 0:\n    if res[i] - curr > 0:\n        i += 1\n    else:\n        curr -= 1\n    \nprint(curr)"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3, 2, 1) == 0\n\"\"\"\n\nn, s, r = map(int, input().split())\n\nd = [0] * (n + 1)\n\nfor i in range(r):\n    d[int(input())] = 1\n\nfor i in range(2, n + 1):\n    if d[i] == 0:\n        d[i] = min(d[i - 2], d[i - 1]) + 1\n\nprint(d[n])\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 3\\n2 4\\n1 3 5') == '0'\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(4, 2, 1) == 0\n\nassert solution(5, 3, 2) == 0\n\nassert solution(5, 3, 0) == 1\n\nassert solution(5, 3, 4) == 1\n\nassert solution(5, 3, 3) == 1"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(s) == e\nprint(solution(s))\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == '0'\n\"\"\""
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1') == '0.000000'\nassert solution('1 2') == '0.500000'\nassert solution('2 2') == '1.000000'\nassert solution('2 3') == '0.666700'\nassert solution('2 4') == '0.833333'\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"0.0\"\nassert solution(\"2 1\") == \"0.5\"\nassert solution(\"1 2\") == \"0.5\"\nassert solution(\"1 3\") == \"0.5\"\nassert solution(\"1 10\") == \"0.5\"\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"0.000000\"\nassert solution(\"3 2\") == \"0.500000\"\nassert solution(\"8 8\") == \"1.000000\"\n\"\"\""
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1\\n') == '0.000000'\nassert solution('2 2\\n') == '1.000000'\nassert solution('10 10\\n') == '0.666667'\n\"\"\"\nimport math\n\nC, R = map(int, input().split())\np = math.pi\nres = math.sin(p * R / C)**2\nprint(round(res, 6))\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"0.000000000\"\n\"\"\"\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1') == '0.000000000'\nassert solution('10 10') == '0.200000'\n\"\"\""
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"0.000000000\"\n\"\"\"\n\nimport sys\n\nR, C = map(int, sys.stdin.readline().split())\nprint(0 if R <= C else (C - R) * R * (100 - C) / 2 / R ** 3)\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n') == '0.000000000'\nassert solution('2 0\\n') == '100.000000'\nassert solution('2 1\\n') == '50.000000'\nassert solution('3 5\\n') == '0.33333333'\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1') == '0.000000'"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(1) == '0.0'\nassert solution('1 1') == '0.0'\nassert solution('2 5') == '0.0'\nassert solution('7 10') == '0.0'\nassert solution('10 10') == '0.5'\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100') == '2'\nprint(solution(stdin))\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n100 101 102 103\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"\nassert solution(\"1\\n1000 500 1000 500\\n\") == \"0\"\nassert solution(\"3\\n100 101 102 103\\n100 200 300 101 102\\n103 102 101 488 100\\n10 10 10 10\\n100 100 100 100\\n100 100 100 100\") == \"5\"\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == 2\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\nN = int(sys.stdin.readline().strip())\n\nL = []\nfor i in range(N):\n    L.append(list(map(int, sys.stdin.readline().strip().split())))\n\nL = list(zip(*L))\n\nc = Counter(L[0])\n\nm = max(c.values())\n\nfor i in range(1, len(L[0])):\n    c[L[0][i]] += 1\n    if c[L[0][i]] == m:\n        print(i)\n        break"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == '2'\n\"\"\"\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n1\\n3\\n4') == '1'\nassert solution('1\\n2\\n1\\n2\\n3\\n4') == '0'\nassert solution('2\\n1\\n1\\n2\\n3\\n4') == '2'\nassert solution('1\\n2\\n1\\n2\\n3\\n4\\n1\\n2\\n3\\n4') == '3'\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(solution.test_cases[0]) == solution(solution.test_cases[1])\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"\nassert solution(\"4\\n100 101 102 103\\n101 102 103 104\\n101 102 104 103\\n103 102 101\") == \"0\"\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"\nassert solution(\"3\\n100 101 102 103\\n100 200 300 101 102\\n103 102 101 488 100\") == \"0\"\nassert solution(\"3\\n100 101 102 103\\n200 101 102 488 100\") == \"0\"\nassert solution(\"3\\n100 101 102 103\\n200 101 102 488 100\\n200 101 102 488 100\\n200 101 102 488 100\") == \"3\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1730\") == \"1729\"\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1730') == '1729'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1730') == '1729'\nassert solution('1695') == '1693'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"1730\"\n) == \"1729\"\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1730') == '1729'\nassert solution('10') == '9'\n\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1730\") == \"1729\"\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1730') == '1729'\nassert solution('24') == '23'\nassert solution('1') == 'none'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1730\") == \"1729\"\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1730') == '1729'\nassert solution('35') == '35'\nassert solution('1') == 'none'\nassert solution('4') == '4'\nassert solution('400000') == 'none'"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"65536\") == 16\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('65536') == 16\n\"\"\"\n\nfrom collections import Counter\n\nx = int(input())\ncounter = Counter(x)\n\ncount = 0\n\nwhile x > 1:\n    x //= 2\n    count += 1"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"65536\") == \"16\"\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('65536') == 16\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"65536\") == 16\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('65536') == '16'\n\"\"\""
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('65536') == 16\n\"\"\"\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"65536\") == 16\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('65536') == '16'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"65536\") == \"16\"\nassert solution(\"15\") == \"1\"\nassert solution(\"7\") == \"1\"\n\"\"\""
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n....\\n....\\n....\\n...K\") == \"2\"\nassert solution(\"2\\nK\\n1\") == \"0\"\n\"\"\"\n\nfrom __future__ import annotations\nfrom copy import deepcopy\nfrom typing import Optional\nfrom math import sqrt\n\n\nclass Board:\n    def __init__(self, n: int, grid: list[list[str]]) -> None:\n        self.size = n\n        self.grid = grid\n        self.grid_copy = deepcopy(grid)\n        self.grid_copy[self.grid.index(\"K\")][self.grid[self.grid.index(\"K\")].index(\"K\")] = 1\n        self.moves: dict[tuple[int, int], int] = {}\n        self.solutions: list[list[int]] = []\n\n    def move(self, r: int, c: int) -> None:\n        cur_r, cur_c = self.grid.index(\"K\"), self.grid[self.grid.index(\"K\")].index(\"K\")\n        delta_r = r - cur_r\n        delta_c = c - cur_c\n        if delta_r > 0 and delta_c > 0:\n            self.solutions.append(1)\n        elif delta_r > 0 and delta_c < 0:\n            self.solutions.append(2)\n        elif delta_r < 0 and delta_c > 0:\n            self.solutions.append(3)\n        elif delta_r < 0 and delta_c < 0:\n            self.solutions.append(4)\n\n    def calculate_moves(self) -> None:\n        for r in range(self.size):\n            for c in range(self.size):\n                if self.grid_copy[r][c] == 1:\n                    continue\n                r1, c1 = r + 2, c + 1\n                r2, c2 = r + 2, c - 1\n                r3, c3 = r - 2, c + 1\n                r4, c4 = r - 2, c - 1\n                r5, c5 = r + 1, c + 2\n                r6, c6 = r + 1, c - 2\n                r7, c7 = r - 1, c + 2\n                r8, c8 = r - 1, c - 2\n                if (r1, c1) not in self.moves and 1 <= r1 < self.size and 1 <= c1 < self.size:\n                    self.moves[(r1, c1)] = self.moves[(r1, c1)] + 1 if (r1, c1) in self.moves else 1\n                if (r2, c2) not in self.moves and 1 <= r2 < self.size and 1 <= c2 < self.size:\n                    self.moves[(r2, c2)] = self.moves[(r2, c2)] + 1 if (r2, c2) in self.moves else 1\n                if (r3, c3) not in self.moves and 1 <= r3 < self.size and 1 <= c3 < self.size:\n                    self.moves[(r3, c3)] = self.moves[(r3, c3)] + 1 if (r3, c3) in self.moves else 1\n                if (r4, c4) not in self.moves and 1 <= r4 < self.size and 1 <= c4 < self.size:\n                    self.moves[(r4, c4)] = self.moves[(r4, c4)] + 1 if (r4, c4) in self.moves else 1\n                if (r5, c5) not in self.moves and 1 <= r5 < self.size and 1 <= c5 < self.size:\n                    self.moves[(r5, c5)] = self.moves[(r5, c5)] + 1 if (r5, c5) in self.moves else 1\n                if (r6, c6) not in self.moves and 1 <= r6 < self.size and 1 <= c6 < self.size:\n                    self.moves[(r6, c6)] = self.moves[(r6, c6)] + 1 if (r6, c6) in self.moves else 1\n                if (r7, c7) not in self.moves and 1 <= r7 < self.size and 1 <= c7 < self.size:\n                    self.moves[(r7, c7)] = self.moves[(r7, c7)] + 1 if (r7, c7) in self.moves else 1\n                if (r8, c8) not in self.moves and 1 <= r8 < self.size and 1 <= c8 < self.size:\n                    self.moves[(r8, c8)] = self.moves[(r8, c8)] + 1 if (r8, c8) in self.moves else 1\n\n    def solve(self) -> Optional[int]:\n        if self.grid[0][0] == \"K\":\n            return 0\n\n        if not self.moves:\n            self.calculate_moves()\n\n        if (1, 1) not in self.moves:\n            return -1\n\n        # (key, value) = (delta_r, delta_c, current_steps, min_steps)\n        # In ascending order of (key, value)\n        queue = [(-1, -1, 0, self.moves[(1, 1)])]\n\n        while queue:\n            delta_r, delta_c, cur_steps, min_steps = queue.pop(0)\n            for r, c in [(delta_r + 2, delta_c + 1), (delta_r + 2, delta_c - 1), (delta_r - 2, delta_c + 1), (delta_r - 2, delta_c - 1), (delta_r + 1, delta_c + 2), (delta_r + 1, delta_c - 2), (delta_r - 1, delta_c + 2), (delta_r - 1, delta_c - 2)]:\n                if (r, c) in self.moves and cur_steps + 1 < min_steps:\n                    queue.append((r, c, cur_steps + 1, min_steps))\n\n        if (1, 1) not in self.moves:\n            return -1\n\n        return self.moves[(1, 1)]"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n....\\n....\\n....\\n...K') == '2'\nassert solution('5\\n.....\\n.....\\n.....\\n....K') == '-1'\n\nprint(solution(input()))\n\n-----Solution-----\n\n\"\"\"\n\nN = int(input())\nlines = [input() for _ in range(N)]\nk = (1, 1)\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\n....\n....\n....\n...K\") == 2\n\"\"\"\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"....\\n....\\n....\\n...K\") == 2\nassert solution(\"...#\\n....\\n....\\n....\\n..K\") == -1\nassert solution(\"...#\\n....\\n....\\n....\\n..#\") == 3\nassert solution(\"...#\\n....\\n....\\n....\\n...#\") == 3\nassert solution(\"....\\n....\\n....\\n....\\n..#\") == 5\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n....\\n....\\n....\\n...K') == '2'\nassert solution('4\\n....\\n....\\n....\\nK...') == '4'\n\n-----Solution-----\n\"\"\"\n\nimport sys\nimport string\n\nn = int(sys.stdin.readline())\nboard = [list(sys.stdin.readline().strip()) for _ in range(n)]\n\nr = 0\nc = 0\n\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == 'K':\n            r = i\n            c = j"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == -1\n\n-------Solution-------\n\nn = int(input())\nmatrix = []\nfor _ in range(n):\n    row = input()\n    matrix.append(row)\n\nk_x = k_y = 0\nfor i in range(n):\n    for j in range(n):\n        if matrix[i][j] == 'K':\n            k_x, k_y = i+1, j+1\n\nresult = -1"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"....\\n....\\n....\\n...K\") == '2'\nassert solution(\"\"\"\n8\n...K...\n..#....\n.##....\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n....\\n....\\n....\\n...K\") == 2\nassert solution(\"4\\n....\\n....\\n....\\nK\") == 0\nassert solution(\"3\\n#..\\n..#\\nK\") == -1\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"....\\n....\\n....\\n...K\") == 2\n\n\"\"\"\nfrom typing import List\n\nN = int(input())\nboard = []\nfor _ in range(N):\n    row = input()\n    board.append(row)\n\nr, c = 0, 0\nfor row in range(N):\n    for col in range(N):\n        if board[row][col] == \"K\":\n            r, c = row, col\n            break\n\nvisited = [[False for _ in range(N)] for _ in range(N)]\n\nimport copy\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''....\n....\n....\n...K\n''') == '2'\nassert solution('''....\n....\n....\n....\n''') == '-1'\nassert solution('''....\n....\n....\n....\n''') == '0'\nassert solution('''....\n....\n....\n....\n''') == '-1'\nassert solution('''...\n....\n....\n....\n''') == '3'\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\n\"\"\"\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\n\nassert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\n\nassert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\n\nassert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\n\nassert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1\\n') == '23'\nassert solution('1000 2\\n5\\n99\\n') == 'too late'\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == '23'\nassert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == 'too late'\nassert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == 'too late'\n\"\"\""
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1\\n') == '23'\n\"\"\"\nimport sys"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\nprint(solution('100 5\\n42\\n3\\n2\\n99\\n1'))\n\nassert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\nprint(solution('100 5\\n42\\n3\\n2\\n99\\n1'))\n\nprint(solution('100 5\\n42\\n3\\n2\\n99\\n1'))\nprint(solution('100 5\\n42\\n3\\n2\\n99\\n1'))\n\nprint(solution('100 5\\n42\\n3\\n2\\n99\\n1'))\nprint(solution('100 5\\n42\\n3\\n2\\n99\\n1'))\n\nassert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\nprint(solution('100 5\\n42\\n3\\n2\\n99\\n1'))\n\nassert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\nprint(solution('100 5\\n42\\n3\\n2\\n99\\n1'))\n\nassert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\nprint(solution('100 5\\n42\\n3\\n2\\n99\\n1'))"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\n\n\"\"\"\n\nimport unittest\nfrom unittest import TestCase\n\nimport sys\n\nsys.path.append(\"../\")\nfrom lecture_examples import is_prime"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\\n\") == \"23\"\nprint(\"Tests passed.\")\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"playfair example\") == \"BMNXABDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"BXDKYBEJVDMUIXMMNUVIFKXTB\"\n\"\"\"\n\nkey = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11,'m': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17,'s': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"playfair example\\nhide the gold in the tree stump\"\n) == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\n\nassert solution(\n    \"playfair example\"\n) == \"BECYHJXNQKDUIMKWTTORXU\"\n\nassert solution(\n    \"playfair example\\nx\"\n) == \"BECYHJXNQKDUIMKWTTORXU\"\n\nassert solution(\n    \"playfair example\\nX\"\n) == \"BECYHJXNQKDUIMKWTTORXU\"\n\nassert solution(\n    \"playfair example\\n  \"\n) == \"BECYHJXNQKDUIMKWTTORXU\""
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('playfair example') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\nassert solution('hide the gold in the tree stump') == 'HJNQBCNEVYRMFXIDKVUWZIMQP'\nassert solution('A ABC') == 'A BC'\nassert solution('A abc') == 'A bc'"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"playfair example\"\n) == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\n\nassert solution(\n    \"hide the gold in the tree stump\"\n) == \"LRQOMXBSBVYJKJFZGDLHUIZMNL\"\n\nassert solution(\n    \"hello world\"\n) == \"HELLO WORLD\"\n\nassert solution(\n    \"hello world\"\n) == \"HELLO WORLD\"\n\nassert solution(\n    \"playfair example\"\n) == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\""
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"RUDXISBXASHVNXKFDKUHUFZKUFLRVD\"\n\nprint(solution(stdin))\n\n----"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('playfair example') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\nassert solution('hide the gold in the tree stump') == 'ZJFJSJWYBNJXBMTHDUZSJPZWTIJU'\nassert solution('learn with me') == 'JLFDFQQPZNQADKZDFSRDYOJU'\nassert solution('lonely in the dark') == 'YLJLLKZIGZPZDHYNUZWYQMDU'\n\"\"\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('playfair example') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\nassert solution('hide the gold in the tree stump') == 'MOUYBQWHAZMGPJKUORUHMJNXFESDG'\n\"\"\""
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"VDEZWVFRBKDUBEMLQYUXJWPSTI\"\n\"\"\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('playfair example') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\nassert solution('hide the gold in the tree stump') == 'RQYYGHBKELXEKQZ'\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.010 1.010 2.010 2.010\") == \"The gopher cannot escape.\"\nassert solution(\"1.010 1.010 2.010 2.010\") == \"The gopher can escape through the hole at (2.010, 2.010).\"\nassert solution(\"1.010 1.010 2.010 2.010\") == \"The gopher can escape through the hole at (2.010, 2.010).\"\nassert solution(\"1.010 1.010 2.010 2.010\") == \"The gopher can escape through the hole at (2.010, 2.010).\"\n\"\"\""
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\nassert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500 1.500\") == \"The gopher can escape through the hole at (1, 1).\"\nassert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500 2.500\") == \"The gopher can escape through the hole at (1, 1).\"\nassert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500 2.500 3.400\") == \"The gopher can escape through the hole at (1, 2).\"\nassert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500 2.500 3.400 3.300\") == \"The gopher can escape through the hole at (1, 2).\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == 'The gopher cannot escape.'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\nassert solution(\"1.010 1.020 1.030 1.040\\n1.510 1.520\") == \"The gopher cannot escape.\"\nassert solution(\"1.010 1.020 1.030 1.040\\n1.510 1.510\") == \"The gopher can escape through the hole at (1.010,1.020).\"\nassert solution(\"1.010 1.020 1.030 1.040\\n1.510 1.520\\n1.540 1.550\") == \"The gopher can escape through the hole at (1.010,1.020).\"\n\nSample Input:\n1.010 1.020 1.030 1.040\n1.510 1.520\n1.540 1.550\nSample Output:\nThe gopher can escape through the hole at (1.010,1.020).\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"\n    1.000 1.000 2.000 2.000\n    1.500 1.500\n    \"\"\"\n) == \"The gopher cannot escape.\"\n\nassert solution(\n    \"\"\"\n    1.000 1.000 2.010 2.010\n    1.500 1.500\n    \"\"\"\n) == \"The gopher can escape through the hole at (1.500, 1.500).\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.0 1.0 2.0 2.0\\n1.5 1.5\") == \"The gopher cannot escape.\"\nassert solution(\"1.0 1.0 2.0 2.0\\n0.5 0.5\") == \"The gopher can escape through the hole at (0.5, 0.5).\"\nassert solution(\"1.0 1.0 2.0 2.0\\n3.5 3.5\") == \"The gopher can escape through the hole at (3.5, 3.5).\"\nassert solution(\"1.0 1.0 2.0 2.0\\n-1.5 -1.5\") == \"The gopher can escape through the hole at (-1.5, -1.5).\"\nassert solution(\"1.0 1.0 2.0 2.0\\n1.0 1.0\") == \"The gopher can escape through the hole at (1.0, 1.0).\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\n\"\"\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\\n\") == \"The gopher cannot escape.\"\nassert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\\n1.100 1.200\\n1.200 1.100\\n\") == \"The gopher can escape through the hole at (1.100, 1.100).\"\nassert solution(\"1.010 1.010 2.010 2.010\\n1.100 1.100\\n1.200 1.200\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1.010 1.010\\n1"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1.0 1.0 2.0 2.0\\n1.5 1.5\") == 'The gopher can escape through the hole at (1.5, 1.5).'\nassert solution(\"1.0 1.0 2.0 2.0\\n1.5 1.5\\n1.0 1.5\\n1.5 1.0\") == 'The gopher cannot escape.'\n\"\"\""
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '1.000 1.000 2.000 2.000'\n) == 'The gopher cannot escape.'\n\nassert solution(\n    '1.500 1.500'\n) == 'The gopher can escape through the hole at (1.500, 1.500).'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\nassert solution(\"3 4\\n3 2\\n3\") == \"N\"\nassert solution(\"3 4\\n3 2\\n4\") == \"N\"\n\n'''\n\nimport math"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\n\"\"\"\n\nimport sys\n\nstdin = open(\"input.txt\")\nsys.stdout = open(\"output.txt\", \"w\")\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\nassert solution(\"3 4\\n0 2\\n3\") == \"N\"\nassert solution(\"3 4\\n3 3\\n1\") == \"Y\"\nassert solution(\"3 4\\n3 3\\n0\") == \"Y\"\nassert solution(\"3 4\\n3 3\\n10\") == \"N\"\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\nassert solution(\"7 1\\n3 3\\n3\") == \"N\"\n\"\"\"\nimport sys\n\nstdin = sys.stdin.read()\na, b = map(int, stdin.split()[:2])\nc, d = map(int, stdin.split()[2:4])\nt = int(stdin.split()[4])\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\n\nSample Input:\n3 4\n3 3\n3\nSample Output:\nN\n\"\"\""
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\nassert solution(\"1 1\\n1 1\\n1\") == \"N\"\nassert solution(\"2 2\\n1 1\\n1\") == \"N\"\nassert solution(\"3 3\\n2 3\\n3\") == \"Y\"\nassert solution(\"1 1\\n1 1\\n1\") == \"Y\"\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\nassert solution(\"3 4\\n5 5\\n4\") == \"N\"\nassert solution(\"3 4\\n5 5\\n6\") == \"N\"\nassert solution(\"3 4\\n5 5\\n6\\n1\") == \"N\"\nassert solution(\"3 4\\n5 5\\n6\\n1\\n3\") == \"N\"\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('3 4\\n3 3\\n0') == 'N'\nassert solution('3 4\\n0 3\\n3') == 'Y'\n\nassert solution('1 4\\n1 1\\n5') == 'Y'\nassert solution('1 4\\n1 1\\n0') == 'N'\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\nassert solution(\"1 1\\n1 2\\n1\") == \"Y\"\nassert solution(\"2 4\\n4 3\\n3\") == \"N\"\nassert solution(\"0 1\\n1 1\\n1\") == \"N\"\nassert solution(\"0 0\\n0 1\\n0\") == \"N\"\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\n\"\"\"\n\na, b, c, d, t = map(int, stdin.readline().split())\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"..VVV..\\n.VV#VV.\\n.V###V.\"\nassert solution(\"5 7\\nVV.....\\n....#...\\n....#...\\n....#...\\n.....#..\") == \"....V..\\n....V..\\n.....V.\"\nassert solution(\"5 7\\n.....#..\\n.#....#.\\n..#.#...\\n....#...\\n....#...\\n....#...\\n.....#..\") == \".....#..\\n#......#\\nV.....V\\n...#...#\\n....#.#.\"\nassert solution(\"5 7\\n.....#..\\n.#....#.\\n..#.#...\\n....#...\\n....#...\\n....#...\\n.....#..\") == \".....#..\\n#......#\\nV.....V\\n...#...#\\n....#.#.\"\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5 7\n...V...\n.......\n.......\n...#...\n..###..\n\"\"\") == \"\"\"5 7\n...V...\n...V...\n..VVV..\n.VV#VV.\n.V###V.\"\"\"\n\nassert solution(\"\"\"5 5\n.......\n.......\n..V....\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\nassert solution(\"5 7\\n....V..\\n....V..\\n....V..\\n....V..\\n....V..\") == \"....V..\\n....V..\\n...V...\\n...V...\\n...V...\"\nassert solution(\"5 7\\n...V...\\n....V..\\n....#..\\n....V..\\n....V..\") == \"....V..\\n....#..\\n...V...\\n...#...\\n...V...\""
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..') == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'\n\"\"\"\n\nfrom itertools import chain\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"..VVV..\\n.VV#VV.\\n.V###V.\"\n\"\"\""
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('.#.#.#\\n...#.#.\\n#.#.#.') == '..#V#V..\\n.V#.#VV.\\n.V#.#V#.\\n..#V#V..'\nassert solution('...#.#.\\n...#.#.\\n....#..') == '..#V#V..\\n.V#.#VV.\\n.V#.#V#.\\n..#V#V..'\nassert solution('.#.#.#\\n#.#.#.#\\n#.#.#.#\\n#.#.#.#\\n#.#.#.#') == '..#V#V..\\n.V#.#VV.\\n.V#.#V#.\\n..#V#V..'\nassert solution('......\\n.V.....\\n...#...\\n.V#...#\\n......\\n.....#\\n#..#.#') == '......\\n.V#..#V\\n..#.#.#\\n.V#.#V.\\n......\\n.....#\\n#..#.#'\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..') == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\n\"\"\"\n\nimport sys\n\nN, M = [int(i) for i in input().split(' ')]\n\ngrid = []\nfor i in range(N):\n    grid.append([j for j in sys.stdin.readline() if j!= '\\n'])\n\nmoves = [(1, 0), (-1, 0), (0, 1), (0, -1)]"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..') == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'\n\n\"\"\""
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('13') == '11'\nassert solution('1') == '1'\nassert solution('0') == '0'\n\n\"\"\"\n\n\"\"\"\nThe solution is easy, just do the following:\n\nStart with a list of numbers, which are the binary representations of the numbers in the input.\n\nFor each of these numbers, count the number of ones in the binary representation, and if the number of ones is odd, change the value of the corresponding element of the list.\n\nAfter this, the list of numbers should be the reversed binary representation of the input.\n\nFor example, if the input is 13, the input list is [1, 1, 1, 0, 1]. After reversing the list, we have [1, 0, 1, 1, 1], and after changing the odd elements, we have [0, 0, 1, 0, 1].\n\n\"\"\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13') == '11'\nassert solution('13') == '11'\nassert solution('2') == '10'\nassert solution('2') == '10'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13') == '11'\nassert solution('10') == '1'\nassert solution('110') == '11'\nassert solution('1110') == '101'\nassert solution
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13\") == \"11\"\n\"\"\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13\") == \"11\"\nassert solution(\"19\") == \"11\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\n\n-----Notes-----\nFor the input, you can assume the range of the input number is in the range of 32-bit signed integers.\n\"\"\"\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13\") == \"11\"\nassert solution(\"1010\") == \"1010\"\n\"\"\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('13') == '11'\nassert solution('-13') == '10111'\n\"\"\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(123) == 321\nassert solution(964) == 964\nassert solution(0) == 0\nassert solution(8) == 8\n\nimport unittest\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        assert solution(123) == 321\n        "
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13') == 11\nassert solution('2') == 1\nassert solution('1') == 0\nassert solution('0') == 0\nassert solution('22') == 22\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13') == '11'\nassert solution('101') == '101'\n\"\"\"\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12\\npink\\nteaQuilSunRooSe\\nmexicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\\n\") == '9'\n\"\"\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\nPInkpinkPinK\\nPInkrose\\nlazerlemon\\n\") == \"9\"\n\n-----Notes-----\nNumbers between 1 and 1000\n\n\"\"\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(12) == \"I must watch Star Wars with my daughter\"\nassert solution(\"\") == \"I must watch Star Wars with my daughter\"\nassert solution(12) == \"I must watch Star Wars with my daughter\"\nassert solution(6) == 4\nassert solution(5) == 4\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npiKNkpinkPinK\\nPInkrose\\nlazerlemon\\n\") == \"9\"\nassert solution(\"2\\nPInkrose\\nPInkrose\") == \"1\"\nassert solution(\"3\\nBubblegumRose\\nPInkrose\\nBubblegumRose\") == \"2\"\nassert solution(\"5\\nTeal\\nTeal\\nTeal\\nTeal\\nTeal\") == \"5\"\nassert solution(\"1\\npInk\\nI love pie\\npInk\\nI love pie\") == \"1\"\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(12) == 'I must watch Star Wars with my daughter'\nassert solution(6) == 9\n\"\"\"\n\nimport math"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\\npink\\nteaQuilSunRoe\\nmexicanPaInK\\nCoquelicot\\nturqRoe\\nroSe\\njEtblack\\npink\\nbabypInK\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\nprint(\"Test 1: Success!\")\n\"\"\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12\\npink\\ntequilaSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\\n\") == \"9\"\n\n'''\n\nfrom typing import List, TextIO"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(12) == 9\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12\\npink\\nteaqulaSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nrOsee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon') == '9'"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 5 3') == '1 3 5'\nprint(solution('1 5 3'))\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 5 3') == '1 3 5'\nassert solution('5 1 3') == '3 5 1'\nassert solution('5 3 1') == '1 3 5'\nassert solution('5 3 1') == '3 5 1'\nassert solution('5 3 1') == '1 3 5'\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 5 3') == '1 3 5'\nassert solution('1 3 5') == '1 3 5'\nassert solution('3 5 1') == '3 5 1'\nassert solution('5 1 3') == '5 1 3'\n\nimport itertools"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nassert solution(\"3 5 1\") == \"3 5 1\"\nassert solution(\"5 1 3\") == \"5 1 3\"\nassert solution(\"3 5 1\") == \"3 5 1\"\nassert solution(\"5 3 1\") == \"5 3 1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"\"\"1 5 3\"\"\"\n) == \"\"\"1 3 5\"\"\"\n\nassert solution(\n    \"\"\"10 5 6\"\"\"\n) == \"\"\"1 6 5 10\"\"\"\n\nassert solution(\n    \"\"\"5 6 3\"\"\"\n) == \"\"\"3 5 6\"\"\"\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''1 5 3''') == '1 3 5'\nassert solution('''2 5 4''') == '2 5 4'\nassert solution('''4 1 5''') == '4 1 5'\n'''\n2 5 4\nACB\n'''\nassert solution('''3 2 1''') == '3 2 1'\nassert solution('''9 7 8''') == '9 7 8'\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\n\nassert solution(\"3 5 2\") == \"3 2 5\"\n\nassert solution(\"4 3 2\") == \"4 2 3\"\n\nassert solution(\"5 2 3\") == \"2 5 3\"\n\n\"\"\"\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\n\nassert solution(\"1 5 2\") == \"1 2 5\"\n\nassert solution(\"5 2 1\") == \"5 1 2\"\n\nassert solution(\"5 5 5\") == \"5 5 5\"\n\nassert solution(\"5 3 5\") == \"5 3 5\"\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 5 3') == '1 3 5'\nassert solution('5 1 3') == '1 5 3'\nassert solution('3 5 1') == '1 3 5'\nassert solution('3 1 5') == '1 3 5'\n\"\"\"\nimport sys\n\na = sys.stdin.readline()\nb = sys.stdin.readline()\na = a.split()\nb = b.split()\n\nprint(a[0], a[2], a[1])\nprint(b[0], b[2], b[1])\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\\n') == '8.0'\n\"\"\"\n\n\"\"\"\nThe idea here is to simulate the different splits and merge in a single code.\nI used a list to simulate the stock and its price in the stock.\n\"\"\""
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''buy 1 15\nsplit 3\nsell 1 5\ndie 4''') == '8.0'"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\\n\") == '8.00000000'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\") == \"8.0\"\n\"\"\"\nimport math"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''buy 1 15\nsplit 3\nsell 1 5\ndie 4''') == '8.0'"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"buy 1 15\\n\"\n    \"split 3\\n\"\n    \"sell 1 5\\n\"\n    \"die 4\\n\"\n    \"\") == \"8.00000000\"\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\") == \"8.0\"\n\n------Solution------\nObviously, this solution is not efficient for the large amounts of input data, but it is correct.\n\"\"\"\n\nimport re\nfrom typing import List"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"buy 2 10\\nsplit\\nsell 1 5\\ndie\\nbuy 2 10\") == \"8.0\"\nassert solution(\"buy 2 10\\nsplit\\nsell 1 5\\nbuy 2 10\\nsell 1 5\\nbuy 2 10\\nsell 1 5\\ndie\\nbuy 2 10\") == \"16.0\"\nassert solution(\"buy 3 10\\nsell 1 5\\ndie\\nbuy 2 10\\nsell 1 5\\nbuy 2 10\\nsell 1 5\\nbuy 2 10\\nsell 1 5\\nbuy 2 10\\nsell 1 5\\ndie\\nbuy 2 10\") == \"28.0\"\nassert solution(\"buy 3 10\\nsplit\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge 2\\nsell 1 5\\nbuy 2 10\\nmerge"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\") == \"8.0\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''buy 1 15\nsplit 3\nsell 1 5\ndie 4''') == '8.0'\nassert solution('''buy 1 15\nsplit 3\nsell 1 5\ndie 4\nbuy 2 20\nsplit 4\nbuy 3 40\ndie 3\nbuy 1 20\nsplit 2\nbuy 2 30\nsplit 2\nsell 1 10\nsell 1 10\nsell 1 10\nsell 1 10\nsell 1 10\ndie 3\nsell 1 10\nbuy 1 10\nsplit 2\nsell 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nsell 1 10\nsell 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\nbuy 1 10\nsell 1 10\nbuy 1 10\nsplit 2\nbuy 1 10\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"999\") == \"9\"\nassert solution(\"9\") == \"9\"\nassert solution(\"999\") == \"9\"\nassert solution(\"8\") == \"8\"\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('808') == '8'\nassert solution('2222') == '2'\nassert solution('22222') == '7'\nassert solution('222222') == '2'\n\"\"\"\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"808\") == \"8\"\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('808') == '8'\nassert solution('100') == '0'\nassert solution('111') == '1'\nassert solution('9') == '9'\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('808') == '8'\n\"\"\"\n\n\n\"\"\"\nMy solution:\n\nx = int(stdin.rstrip())\nlst = []\nwhile x >= 1:\n    lst.append(x % 10)\n    x = x // 10\n    \n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('808') == '8'\nassert solution('2') == '2'\n\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"808\") == \"8\"\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"808\") == \"8\"\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"11111111111111111111111111111101\") == \"1\"\nassert solution(\"999_999\") == \"9\"\nassert solution(\"111111111111111111111111111111111\") == \"1\"\n\nprint('All tests passed.')"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(808) == 8\n\"\"\""
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('WWLLW') == 1\nassert solution('WWLLL') == 0\nassert solution('WLLLL') == 0\nassert solution('WWLWC') == 1\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5\\nC C C C C') == '0'\nassert solution('4 5\\nC C C W C') == '1'\nassert solution('4 5\\nC C C W C\\nC C C W C') == '1'\nassert solution('4 5\\nC C C W C\\nC C W C C') == '1'\nassert solution('4 5\\nC C C W C\\nC C W C C') == '2'\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n\"\"\"\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC') == 0\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC') == '0'\nprint('Passed')\n\"\"\""
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n\"\"\"\n\nimport collections\n\nR, C = map(int, input().split())\nH = [input() for _ in range(R)]\n\nd = collections.defaultdict(list)\n\nfor r in range(R):\n    for c in range(C):\n        if H[r][c] == \"L\":\n            d[r].append(c)\n\nans = 0\n\nfor k, v in d.items():\n    q = collections.deque()\n    q.append(v[0])\n    visited = [0] * len(v)\n    visited[0] = 1\n\n    while q:\n        x = q.popleft()\n        for nx in (x+1, x-1, x+C, x-C):\n            if 0 <= nx < C and not visited[nx]:\n                visited[nx] = 1\n                q.append(nx)\n    ans += 1\n\nprint(ans)"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n\"\"\"\n\nimport numpy as np\n\nr,c = map(int,input().split())\narr = np.array([list(input()) for _ in range(r)])"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n\n-------------\nSample Input:\n4 4\nWWWL\\nWWWL\\nWWWL\\nWWWL\\nSample Output:\n1\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n\"\"\"\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC') == 0\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 H\") == '40'\nassert solution(\"2 H\") == '20'\nassert solution(\"2 C\") == '0'\nassert solution(\"2 S\") == '10'\nassert solution(\"2 D\") == '0'\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\\n') == '60'\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\nprint(solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\"))\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4H 3C\\n2S 3C\\n2H 3S\\nTH 9C\\nKS 9S\\nQS 9S\\nJS 9S\\nTD 9S\\nAD 9S') == '48', 'wrong result'\n\nprint(solution(stdin))\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\nassert solution(\"3 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"120\"\n\"\"\"\n\nfrom collections import defaultdict\n\nscores = {'A': 11, 'K': 4, 'Q': 3, 'J': 2, 'T': 10, '9': 14, '8': 0, '7': 0}\n\nN, B = [int(i) for i in input().split()]\n\nhands = []\nfor i in range(N):\n    a, b = input().split()\n    hands.append(a+b)\n\nres = 0\nfor hand in hands:\n    hand_scores = defaultdict(list)\n    for c in hand:\n        hand_scores[c[0]].append(c[1])\n    hand_scores = dict(hand_scores)\n    for c in hand_scores:\n        if c!= B:\n            res += scores[c]\nprint(res)\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '60'\nassert solution('2S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '60'\nassert solution('2S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '60'\nassert solution('2S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '60'\n\nassert solution('2S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '60'\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '60'\n\"\"\""
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('TH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '60'\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\nSample Input:\nh e l l o w o r l d\nh e l l o w o r l d\n\nSample Output:\nh\no"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\"\"\"\n\nimport unittest\n\nimport io"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('aa') == ''\nassert solution('aaa') == ''\nassert solution('a') == 'a'\nassert solution('aaaaa') == 'a'\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('this is very annoying') =='se'\nassert solution('thiss iss veery annoying') =='se'\nassert solution('n m a y t') == 'n m a y t'\n\"\"\"\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('aa') == 'a'\nassert solution('aaabbbccc') == 'a'\nassert solution('abbbccc') == 'a'\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\nassert solution(\"this is very annoying\") == \"se\"\nassert solution(\"this is very annoying\") == \"se\"\nassert solution(\"this is very annoying\") == \"se\"\n\n\"\"\"\n\nimport unittest\nimport re\n\nclass Solution:\n    def __init__(self, text: str, result: str) -> None:\n        self.text = text\n        self.result = result\n\n    def __repr__(self):\n        return '%s\\n%s' % (self.text, self.result)\n\n    def solution(self):\n        result = re.findall(r'\\b([a-zA-Z]+)', self.result)\n        print(result)\n        return result\n\n    def test_solution(self):\n        result = self.solution()\n        "
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\"\"\"\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\n\"\"\"\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\n---"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nprint(solution(\"this is very annoying\"))\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\n\"\"\"\nimport unittest"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\nassert solution('1 10 0\\n1') == 0\nassert solution('1 1 10\\n1') == 1\nassert solution('10 1 1\\n1') == 1\nassert solution('10 10 10\\n1') == 1"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3\n\"\"\"\n\nimport numpy as np\n\nS, C, K = list(map(int, input().split()))\nD = np.array(list(map(int, input().split())))\n\nN = len(D)\nM = min(C, N)\n\nd = D[:M]\ni = np.argsort(d)\nd = d[i]\n\nans = 0\nfor j in range(M):\n    ans += (j+1) * np.sum(d < K)\n\nprint(ans)\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == '3'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3\n\"\"\""
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == \"3\"\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 3 0\n0 0 1 1 2''') == 3"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(len(list(set(map(int, input().split())))))\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"6\"\n\n\"\"\"\n\nimport os"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n\") == \"6\"\nassert solution(\"2\\n\") == \"2\"\nassert solution(\"1\\n\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1\\n2\\n3') == '6'\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('2') == ''\nassert solution('4') == ''\nassert solution('5') == ''\nassert solution('6') == ''\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4') == '1'\nassert solution('6') == '2'\nassert solution('7') == '6'\nassert solution('9') == '6'\nassert solution('21') == '6'"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"6\""
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == 5\nassert solution(\"2\") == 2\nassert solution(\"3\") == 6\n\"\"\"\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '6'\nassert solution('100') == '2'\nassert solution('100100') == '8'\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\") == \"54321\"\nassert solution(\"2\\n5\\n10\\n100\") == \"101010\"\nassert solution(\"0\\n100\\n
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 2') == '4 2'"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\"\"\"\nimport math\nimport sys\n\n_, *nums = [int(i) for i in sys.stdin.readlines()]\n\nprint(sum(nums) * 2 - math.floor(sum(nums) / 2))\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\nassert solution(\"3 3 3\") == \"7 7\"\nassert solution(\"7 3 2\") == \"5 1\"\nassert solution(\"5 2 5\") == \"7 7\"\nassert solution(\"5 5 2\") == \"7 7\"\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\") == \"4 2\""
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\") == \"4 2\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\na_a = sum(a[:n//2])\na_b = sum(a[n//2:])\n\nprint(a_a, a_b)"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\nassert solution(\"10 2 7\") == \"17 6\"\n\"\"\""
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2 3\") == \"4 2\"\n\"\"\"\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nAlice = 0\nBob = 0\n\nfor i in range(n):\n    Alice += a[i]\n    Bob -= a[i]\n\nprint(Alice, Bob)"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 1\\n') == 2\n\n\"\"\"\n\nimport math\n\nnum_bridges = int(stdin.readline())\nnum_knights = int(stdin.readline())\nnum_groups = int(stdin.readline())"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 1') == '2'\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/5b6db8a9a45e1eecb6b00056/train/python\n\nYou were camping with your friends far away from home, but when it's time to go back, you realize that you fuel is running out and the nearest pump is 50 miles away! You know that on average, your car runs on about 25 miles per gallon. There are 2 gallons left. Considering these factors, write a function that tells you if it is possible to get to the pump or not. Function should return true (1 in Prolog) if it is possible and false (0 in Prolog) if not. The input values are always positive.\n\n\"\"\""
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 1\") == \"2\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"2 2 2\") == \"1\"\nassert solution(\"3 3 2\") == \"1\"\nassert solution(\"2 2 3\") == \"1\"\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 1\") == \"2\"\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 1\\n') == '2'\nassert solution('5 2 2\\n') == '1'\nassert solution('5 5 1\\n') == '1'\nassert solution('5 5 2\\n') == '1'\nassert solution('5 10 1\\n') == '5'\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''\n2\n3\n3\n'''\n) == '2'\nassert solution(\n'''\n6\n2\n3\n'''\n) == '5'\nassert solution(\n'''\n6\n1\n2\n'''\n) == '1'\nassert solution(\n'''\n6\n3\n1\n'''\n) == '3'\nassert solution(\n'''\n10\n3\n2\n'''\n) == '7'\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 1\") == 2\n\n\"\"\""
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 1\\n\") == \"2\"\n\"\"\"\n\n\"\"\"\n\u6709\u4e09\u4e2a\u6570\u5b57\uff0ca,b,c\n\u7b2c\u4e00\u6b21\u79fb\u52a8\u7684\u6570\u5b57\u4e2a\u6570=a-b+c\n\u7b2c\u4e8c\u6b21\u79fb\u52a8\u7684\u6570\u5b57\u4e2a\u6570=a+b-c\n\n\"\"\"\na,b,c=map(int,input().split())\n\nprint(a-b+c)\nprint(a+b-c)"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 1') == '2'\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == '1'\nassert solution('2 1 1') == '2'\nassert solution('3 1 1') == '4'\nassert solution('2 2 1') == '2'\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"36\"\nassert solution(\"7\") == \"288\"\n\nprint(solution(\"5\"))\nprint(solution(\"7\"))\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == 36\nassert solution('7') == 288\nassert solution('0') == 0\nassert solution('2**32-1') == 18446744073709551615\n\nassert solution('5') == 36\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"36\"\nassert solution(\"7\") == \"288\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(5) == 36\nassert solution(7) == 288\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == 36\nassert solution('7') == 288\n\n\"\"\"\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == 36\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == 36\nassert solution(\"7\") == 288\n\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"36\"\nassert solution(\"7\") == \"288\"\nassert solution(\"19\") == \"650\"\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7') == '288'\nassert solution('5') == '36'\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == '36'\n\"\"\""
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n\"\"\"\n\n\"\"\"\nCan you determine the number of safe room ordering solutions?\n\n-----Input-----\nThe input consists of:\n - one line containing an integer $n$ ($2 \\le n \\le 30$), the number of rooms.\n - one line containing $n$ integers $s_1, \\ldots, s_ n$ ($1 \\le s_ i \\le 100$ for each $i$), where $s_ i$ is the number of students in room $i$.\n\n-----Output-----\nThe number of safe room ordering solutions.\n\"\"\"\n\nimport itertools\nimport random\n\nclass Heap:\n    def __init__(self, array):\n        self.heap = list(array)\n        self.size = len(array)\n        self.build_heap()\n\n    def build_heap(self):\n        for i in range(self.size // 2 - 1, -1, -1):\n            self.heapify(i)\n\n    def heapify(self, i):\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        smallest = i\n        if left < self.size and self.heap[left] < self.heap[i]:\n            smallest = left\n        if right < self.size and self.heap[right] < self.heap[smallest]:\n            smallest = right\n\n        if smallest!= i:\n            self.swap(i, smallest)\n            self.heapify(smallest)\n\n    def swap(self, i, j):\n        self.heap[i], self.heap[j] = self.heap[j], self.heap[i]\n\n    def peek(self):\n        return self.heap[0]\n\n    def remove(self):\n        self.swap(0, self.size - 1)\n        self.size -= 1\n        self.heap.pop()\n        self.heapify(0)\n\n    def insert(self, item):\n        self.size += 1\n        self.heap.append(item)\n        self.bubble_up(self.size - 1)\n\n    def bubble_up(self, i):\n        while i!= 0:\n            p = (i - 1) // 2\n            if self.heap[i] < self.heap[p]:\n                break\n            self.swap(i, p)\n            i = p\n\n    def is_empty(self):\n        return self.size == 0"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 3 1') == '2 3 4 1'\n\nassert solution('4\\n1 1 1 1') == 'impossible'\n\"\"\"\n\n\"\"\"\nEXPLANATION:\n\nWe can get a solution if we visit each room in a random order, and \nthen try to find a safe order for visiting each room. \nThis is equivalent to assigning a random permutation of the students to each room, and then checking if the permutation is safe. \nSo, we can just do that!\n\"\"\""
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'impossible'\nassert solution('0') == 'impossible'\nassert solution('1') == 'impossible'\nassert solution('2') == '2 3 4 1'\nassert solution('3') == '2 3 4 1'\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'impossible'\nassert solution('2 3 3 1\\n') == '2 3 4 1'\n'''\n\nimport sys\nimport random\nimport itertools\nimport copy"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 3 3 1') == '2 3 4 1'\nassert solution('2\\n1 2') == 'impossible'\nassert solution('1\\n2') == 'impossible'\nassert solution('5\\n1 2 3 4 5') == 'impossible'\nassert solution('5\\n5 4 3 2 1') == 'impossible'\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 3 3 1') == '2 3 4 1'\nassert solution('4\\n1 2 3 4') == '1 2 3 4'\nassert solution('3\\n1 1 1') == 'impossible'\n\n-----Note-----\n1. If there is a solution, it is guaranteed to be unique.\n2. Remember to convert the input to integer from string.\n\"\"\"\nimport sys"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2 3') == '1'\nassert solution('1 2 3 4 5') == '1'\nassert solution('1 2 3 4 5 6') == '3'\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\n\n-----Explanation-----\nTheseus bought the left_oar and right_oar parts on day 1, replaced the hull part on day 4, and bought the right_oar part on day 5.\n\nThe day Theseus replaced the last existing part from the previous season was day 4.\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\nassert solution('2 3\\nhull\\nhull') == '0'\n\n-----Notes-----\n - Each of the words is given in the input as a single line.\n - The number of distinct words is $P$.\n - A word will always appear at least once in the input.\n - There is no need to consider the case when Theseus never bought any part from the previous season.\n\"\"\""
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == 4\n\"\"\"\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == 4\n\n\"\"\"\n\nfrom typing import List\n\n\nclass Part(object):\n    def __init__(self, w: str):\n        self.word = w\n\n    def __eq__(self, other) -> bool:\n        return self.word == other.word\n\n    def __repr__(self) -> str:\n        return f\"<{self.word}>\"\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 5\nleft_oar\nright_oar\nleft_oar\nhull\nright_oar''') == '4'\nassert solution('''3 6\nleft_oar\nright_oar\nleft_oar\nhull\nright_oar\nhull''') == '3'\nassert solution('''3 1\nleft_oar\nhull''') == '0'\nassert solution('''1 1\nhull''') == '0'\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n3 5\nleft_oar\nright_oar\nleft_oar\nhull\nright_oar\n''') == '4'\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\n\"\"\""
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == '4'\n\n\"\"\""
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 5\nleft_oar\nright_oar\nleft_oar\nhull\nright_oar''') == '4'\n\nassert solution('''1 3\nleft_oar\nleft_oar\nleft_oar\nhull''') == '1'\n\nassert solution('''3 5\nleft_oar\nright_oar\nleft_oar\nleft_oar\nhull\nright_oar''') == '4'\n\nassert solution('''3 3\nleft_oar\nright_oar\nleft_oar\nleft_oar\nhull\nright_oar''') == '0'\n\nassert solution('''3 3\nleft_oar\nhull\nright_oar\nleft_oar\nleft_oar\nhull\nright_oar''') == '2'"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(sample_input_lines)) == str(correct_output_lines)\n\"\"\""
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n2 3\\n3 2') == '3 3'\nassert solution('1 2\\n2 3\\n3 4') == '2 2'\nassert solution('2 1\\n3 3\\n2 4') == '3 3'\nassert solution('2 2\\n1 2\\n2 2') == '1 1'\nassert solution('1 2\\n1 2\\n2 2') == '2 2'\n\n\"\"\"\nimport math\n\nimport sys\n\n\"\"\"\nFirst of all, we can check if the input is valid.\nTo do so, we should check if the first given points make a rectangle.\nWe can see it using Pythagoras theorem.\nThe distance between the two points should be equal to the perimeter of the rectangle.\n\"\"\"\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n1 2\\n4 5\") == \"2 2\\n3 2\\n6 6\"\nassert solution(\"5 7\\n7 5\\n7 5\") == \"7 7\\n7 5\"\nassert solution(\"1 1\\n1 1\\n1 1\") == \"1 1\"\nassert solution(\"1 1\\n1 1\\n1 1\\n1 1\\n1 1\") == \"1 1\"\nassert solution(\"1 2\\n4 5\\n7 8\") == \"2 2\\n4 5\\n7 8\"\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 5\n5 7\n7 5''') == '7 7'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 1\\n2 5\\n6 1\\n6 5') == '6 5'\nassert solution('4\\n2 1\\n2 5\\n7 1\\n7 5') == '6 5'\nassert solution('4\\n2 1\\n3 2\\n6 1\\n6 5') == '6 6'\nassert solution('4\\n2 1\\n4 2\\n6 1\\n6 5') == '6 6'\nassert solution('4\\n2 1\\n4 2\\n7 1\\n7 5') == '6 6'\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\nassert solution(\"3 3\\n4 6\\n2 2\") == \"4 6\"\nassert solution(\"8 10\\n5 10\\n10 10\\n6 5\\n10 9\") == \"10 9\"\n\"\"\""
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n') == '4\\n'\nassert solution('1\\n2\\n3\\n4\\n') == '7\\n'\nassert solution('1\\n2\\n3\\n4\\n5\\n') == '7\\n'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n') == '7\\n'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n') == '7\\n'\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readlines()"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 5\") == \"4 5\"\nassert solution(\"5 7 3\") == \"5 5\"\n\"\"\"\n\nimport sys\n\nfrom bisect import bisect\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n5 6\\n7 5\") == \"6 6\"\nassert solution(\"1 1\\n1 1\") == \"1 1\"\nassert solution(\"0 0\\n0 0\") == \"0 0\"\nassert solution(\"1 0\\n0 0\") == \"0 0\"\nassert solution(\"0 0\\n0 0\") == \"0 0\""
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nn = int(input())\nans = 0\nfor _ in range(n):\n    minute, second = map(int, input().split())\n    ans += 60 * minute + second\nprint('%.7f' % (ans / n))\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1\\n61') == '1.016666667'\n\"\"\"\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n1 61\") == \"1.016666667\"\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n1 61') =='measurement error'\nassert solution('3\\n5 59\\n8 8\\n8 59\\n8 59') == '1.12'\nassert solution('2\\n5 59\\n8 8\\n8 59\\n8 59') == '1.12'\nassert solution('1\\n1 1') =='measurement error'\nassert solution('1\\n1 1\\n1 1') =='measurement error'\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 61\\n\") == \"1.016666667\"\nassert solution(\"1 20\\n\") == \"measurement error\"\n\n\"\"\""
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 61\\n') == '1.016666667'\nassert solution('2 3600\\n') =='measurement error'\nassert solution('5 3600\\n') == '0.1200000000'\nassert solution('7 3600\\n') == '0.1733333333'\nassert solution('12 3600\\n') == '0.2133333333'\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 61\") == \"measurement error\"\n\"\"\"\n\nimport sys\nimport math\nfrom decimal import *\n\ngetcontext().prec = 10\n\nn = int(input())\n\nfor i in range(n):\n    a = input().split()\n    a = [int(i) for i in a]\n    a = [i / 60 for i in a]\n    print(sum(a))\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\nprint(solution(stdin))\n\n\n-----Problem-----\n\nThe city\u2019s local subway service S.L., Super Lag, are currently being blamed that their displays, showing the expected wait time until the next train arrives, are faulty. Too many commuters have the experience of coming to the subway station, and then having to wait many more minutes than the display showed when they got there.\n\nThe American Commuter Movement and the International Commuting Peoples\u2019 Community have had it with this. Especially Johan, a young student, who has decided to investigate this matter further. Johan went to one of the stations, and studied the behaviour of the displays. Each time the display showed a new number, Johan carefully measured the number of seconds that passed from that moment until the train arrived. As soon as that train left again, he did the same thing for the next train and so on. He remembers all the displayed minutes, and the wait time for each such in seconds. Although Johan has a very good memory, he does not know what to do with his measurements. He needs your help!\n\nYour task is to help Johan calculate the average length of an S.L. minute (the length of a minute according to the display). You may assume that when the display shows a new number $M$, the expected S.L. wait time in that moment is exactly $M$ minutes.\n\n-----Input-----\nThe first line contains an integer $1 \\le N \\le 1000$ \u2013 the number of observations Johan did. The following $N$ lines contain two positive integers $M \\le 60$ and $S \\le 3600$ \u2013 the number of minutes displayed, and the number of seconds Johan had to wait for his train.\n\n-----Output-----\nOutput should consist of a single real number: the average length of an S.L.\u00a0minute, measured in real minutes. A relative or absolute error of at most $10^{-7}$ will be considered correct. If the average length of an S.L.\u00a0minute is shorter than or equal to a normal minute, print the message \"measurement error\" instead.\n\n-----Examples-----\nSample Input:\n1\n1 61\nSample Output:\n1.016666667\n\n-----Problem-----\nYou have been asked to help Johan who is currently living in one of the cities in your country. He is trying to find out if he is on time or not, and is now confused about the way to calculate the average wait time in the city.\n\nHe first went to the train station, and decided to study the display. He took out his watch and started to count the number of minutes displayed by the train (or he took a note with his pen and counted manually).\n\nFor each train that leaves at the station, he took a note with his pen of the time it took for him to come and get to the station. After the train arrived, he took a note of the time it took him to leave the station.\n\nGiven the number of observations, he will now try to calculate the average of the wait times for the next train that leaves at the station. After that, he will decide if it is on time or not, and will print the result.\n\n-----Input-----\nThe first line contains an integer $1 \\le N \\le 1000$ \u2013 the number of observations Johan did. The following $N$ lines contain two positive integers $M \\le 60$ and $S \\le 3600$ \u2013 the number of minutes displayed, and the number of seconds Johan had to wait for his train.\n\n-----Output-----\nOutput should consist of a single real number: the average length of an S.L.\u00a0minute, measured in real minutes. A relative or absolute error of at most $10^{-7}$ will be considered correct. If the average length of an S.L.\u00a0minute is shorter than or equal to a normal minute, print the message \"measurement error\" instead.\n\n-----Examples-----\nSample Input:\n2\n2 60\n35 50\nSample Output:\nmeasurement error\n0.233333333\n\n-----Problem-----\nYou have been asked to help Johan who is currently living in one of the cities in your country. He is trying to find out if he is on time or not, and is now confused about the way to calculate the average wait time in the city.\n\nHe first went to the train station, and decided to study the display. He took out his watch and started to count the number of minutes displayed by the train (or he took a note with his pen and counted manually).\n\nFor each train that leaves at the station, he took a note with his pen of the time it took for him to come and get to the station. After the train arrived, he took a note of the time it took him to leave the station.\n\nGiven the number of observations, he will now try to calculate the average of the wait times for the next train that leaves at the station. After that, he will decide if it is on time or not, and will print the result.\n\n-----Input-----\nThe first line contains an integer $1 \\le N \\le 1000$ \u2013 the number of observations Johan did. The following $N$ lines contain two positive integers $M \\le 60$ and $S \\le 3600$ \u2013 the number of minutes displayed, and the number of seconds Johan had to wait for his train.\n\n-----Output-----\nOutput should consist of a single real number: the average length of an S.L.\u00a0minute, measured in real minutes. A relative or absolute error of at most $10^{-7}$ will be considered correct. If the average length of an S.L.\u00a0minute is shorter than or equal to a normal minute, print the message \"measurement error\" instead.\n\n-----Examples-----\nSample Input:\n2\n2 60\n35 50\nSample Output:\nmeasurement error\n0.233333333\n\n-----Problem-----\nYou have been asked to help Johan who is currently living in one of the cities in your country. He is trying to find out if he is on time or not, and is now confused about the way to calculate the average wait time in the city.\n\nHe first went to the train station, and decided to study the display. He took out his watch and started to count the number of minutes displayed by the train (or he took a note with his pen and counted manually).\n\nFor each train that leaves at the station, he took a note with his pen of the time it took for him to come and get to the station. After the train arrived, he took a note of the time it took him to leave the station.\n\nGiven the number of observations, he will now try to calculate the average of the wait times for the next train that leaves at the station. After that, he will decide if it is on time or not, and will print the result.\n\n-----Input-----\nThe first line contains an integer $1 \\le N \\le 1000$ \u2013 the number of observations Johan did. The following $N$ lines contain two positive integers $M \\le 60$ and $S \\le 3600$ \u2013 the number of minutes displayed, and"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n1 61') == '1.016666667'\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"1\n61\n\"\"\") == \"measurement error\"\nassert solution(\"\"\"3\n11\n2\n32\n\"\"\") == \"6.66666667\"\nassert solution(\"\"\"6\n60\n42\n120\n180\n240\n300\n\"\"\") == \"180\"\nassert solution(\"\"\"7\n5\n4\n10\n20\n30\n45\n55\n\"\"\") == \"20.83333333\"\n\nprint(solution(\"\"\"1\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100\n110\n\"\"\"[1:]))\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"CRYMAW\") == \"CALGARY\"\nassert solution(\"CALGARY\") == \"CALGARY\"\nassert solution(\"CALGERY\") == \"CALGARY\"\nassert solution(\"CALGARYY\") == \"CALGARY\"\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('CPMCRYY') == 'CALGARY'\nassert solution('BKKCBYB') == 'BELLKISS'\nassert solution('CALGARY') == 'CALGARY'\nassert solution('CALGARY') == 'CALGARY'"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\n\"\"\""
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nprint('OK')\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\n\"\"\"\n\nimport unittest\nimport re\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\n\n\"\"\"\n\nimport string"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\n\nSample Input:\nTCTDPZQ\nAMJDRW\nSample Output:\nTCTDRW\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('CPMCRYY') == 'ALBERTA'\n\nprint(solution('CPMCRYY'))"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"CALGARY\") == \"CALGARY\"\nassert solution(\"ALBERTA\") == \"ALBERTA\"\nassert solution(\"CALGARY\") == \"CALGARY\"\nassert solution(\"CALGARY\") == \"CALGARY\"\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"YGLHHS\") == \"YYHSLG\"\n\"\"\"\n\nimport codewars_test as test"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('AB') == '3'\nassert solution('ABBA') == '2'\nassert solution('ABC') == '1'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"ABC\") == \"1\"\n\"\"\""
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"ABC\") == \"1\"\nassert solution(\"BCA\") == \"2\"\nassert solution(\"CABC\") == \"3\"\nassert solution(\"AAC\") == \"2\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"CABB\") == \"3\"\nassert solution(\"ABC\") == \"1\"\nassert solution(\"ABCCAB\") == \"2\"\nassert solution(\"ABCCABC\") == \"1\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('AB') == '3'\nassert solution('CAB') == '1'\n\nprint(solution(stdin))\n\n-----Input-----\nAAB\n-----Output-----\n1\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"CBA\") == \"1\"\nassert solution(\"BCA\") == \"2\"\nassert solution(\"BAC\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('AB') == '3'\nassert solution('ACB') == '2'\nassert solution('BCA') == '1'\n\"\"\""
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"ABC\") == \"1\"\nassert solution(\"ABCA\") == \"2\"\nassert solution(\"ABBA\") == \"1\"\nassert solution(\"BBAC\") == \"3\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"ABC\") == \"1\"\nassert solution(\"ACB\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('AB') == '3'\nassert solution('ABC') == '2'\nassert solution('ABCC') == '1'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('1 4 2 3') == '6'\nassert solution('2 5 1 4') == '6'\nassert solution('4 1 1 4') == '0'\nassert solution('1 1 1 1') == '0'"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"0 1 2 3\") == \"0\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '3'\n\"\"\"\n\na, b, c, d = [int(s) for s in input().split(' ')]\n\nx = (a + c) * min(b, d)\ny = (b + d) * min(a, c)\nz = (a + b) * max(c, d)\n\nprint(max(x, y, z))\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4\") == 3\n\n\"\"\""
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 2 3 4\", \"5 6 7 8\") == \"5\"\nassert solution(\"1 2 3 4\", \"5 6 7 8\", \"9 10 11 12\") == \"15\"\nassert solution(\"3 4 1 2\", \"3 4 1 2\") == \"8\"\nassert solution(\"1 2 3 4\", \"3 4 1 2\", \"1 2 3 4\", \"4 5 6 7\") == \"16\""
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"1 2 3 4\"\n    ) == \"3\"\n\nassert solution(\n    \"5 5 7 6\"\n    ) == \"12\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == '3', \"Simple\"\nassert solution('5 9 7 4') == '9', '\"Almost there!\"'\nassert solution('1 2 3 5') == '0', '\"Crossing\"!'\nassert solution('1 2 3 8') == '0', '\"Not crossing\"!'\nassert solution('1 2 3 7') == '1', '\"Proper one\"'\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4') == '3'\n\"\"\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == 3\nassert solution(\"9 8 7 6\") == 12\nassert solution(\"5 6 7 8\") == 12\n\n-----Solution-----"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''101 89''') == 2\nassert solution('''103 27''') == 4\nassert solution('''34 15''') == 2\nassert solution('''21 43''') == 2\nassert solution('''14 28''') == 3\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('103 27') == '4'\nassert solution('1 2') == '0'\nassert solution('1 20') == '1'\nassert solution('5 3') == '1'\nassert solution('10 10') == '0'\n\"\"\""
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('103 27') == '4'\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"103 27\") == \"4\"\n\nSample Input:\n104 27\nSample Output:\n4\nassert solution(\"104 27\") == \"4\"\n\"\"\"\n\na, b = list(map(int, input().split()))\n\nd = abs(a - b)\nd //= 2\nd = max(0, d)\nprint(d)\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"103 27\") == \"4\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"11 10\") == \"2\"\nassert solution(\"1 5\") == \"0\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(a, b) == result\n\na, b = map(int, stdin.split(' '))\n\nassert solution(a, b) == result\n\n----\n\n\"\"\"\nfrom typing import List\n\nimport sys\n\na, b = map(int, sys.stdin.readline().strip().split(' '))"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"103 27\") == 4\n\"\"\"\na, b = map(int, stdin.readline().split())\nprint(max(0, min(b//2, a-1) - max(0, b//2-a+1)))"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('103 27') == '4'\n\"\"\""
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('103 27') == 4\nassert solution('1 1') == 0\n\"\"\""
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"103 27\") == 4\n\n\"\"\"\nimport sys\nfrom math import floor\n"
    }
]