[
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n''') == '5 1 8 6'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\") == \"5\"\nassert solution(\"5\\n1 2\\n2 3\\n3 4\\n4 5\") == \"1 8 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8') == '5\\n1 8 6'\nassert solution('6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6') == '5\\n1 6 5'\nassert solution('4\\n1 2\\n2 3\\n3 4') == '1\\n1 4 3'\nassert solution('5\\n1 2\\n2 3\\n3 4\\n4 5') == '1\\n5 4 2'\nassert solution('6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6') == '2\\n3 4 1'\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 4 3\\n5 2 4\") == \"3\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n\") == \"5\\n1 8 6\""
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8''') == '5 1 8 6'\n\n\"\"\"\n\n\nimport sys\nimport networkx as nx\nimport re"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\n---"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\"\"\""
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8''') == '5 1 8 6'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2\\n3 4\\n1 3\") == '5\\n1 3 6'\nassert solution(\"8 6\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n\") == '5\\n1 8 6'\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10\\n10 2 8 1 2 4 1 20 4 5') == '20 8'\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10\\n10 2 8 1 2 4 1 20 4 5') == '20 8'\n\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10\\n10 2 8 1 2 4 1 20 4 5') == '20 8'\n\"\"\"\n\nn = int(input())\nnums = [int(i) for i in input().split()]\n\nfreq = {}\nfor num in nums:\n    if num not in freq:\n        freq[num] = 0\n    freq[num] += 1\n\ncount = 1\nans = [1, 1]\nwhile count < n:\n    if ans[-1] in freq:\n        count += freq[ans[-1]]\n        ans.append(ans[-1])\n    else:\n        count += 1\n        ans.append(ans[-1])\n    if ans[-1] in freq and ans[-2] in freq:\n        if freq[ans[-1]] == freq[ans[-2]]:\n            count += freq[ans[-2]]\n            ans.append(ans[-2])\n        else:\n            count += freq[ans[-2]]\n            ans.append(ans[-1])\n    elif ans[-1] in freq:\n        count += freq[ans[-1]]\n        ans.append(ans[-1])\n    elif ans[-2] in freq:\n        count += freq[ans[-2]]\n        ans.append(ans[-2])\n\nprint(ans[1], ans[-2])\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\nassert solution(\"4\\n6 5 4 1 2 3\") == \"4 6\"\n\n\"\"\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == '20 8'\n\"\"\"\n\nfrom typing import List\n\nn = int(input())\ndivs = [int(i) for i in input().split()]\ndivs.sort()\nans = []\nfor d in divs:\n    if d == 1 or d == n:\n        ans.append(d)\n    else:\n        ans.append(d)\n        ans.append(d)\nprint(*ans)\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10\\n10 2 8 1 2 4 1 20 4 5') == '20 8'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\") == \"2 4\"\n\"\"\"\n\nfrom collections import Counter\nfrom sys import stdin\n\nn = int(stdin.readline())\na = Counter(map(int, stdin.readline().split()))\n\nx = y = 1\n\nfor key in a:\n    if a[key] & 1:\n        x *= key\n    else:\n        y *= key\n\nprint(x, y)\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == 24\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'\nassert solution('5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6') == '56'\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'\n\"\"\"\n\nn, m, k = list(map(int, stdin.split()))\narr = [list(map(int, stdin.split())) for _ in range(n)]\n\ncandidates = [0] * m\nfor row in arr:\n    num = len(row) // 2\n    for idx in range(num):\n        candidates[idx] += row[idx]\n\nfor idx in range(num, m):\n    candidates[idx] += row[idx]\n\nresult = 0\nfor candidate in candidates:\n    if candidate % k == 0:\n        result += candidate\n    else:\n        result -= candidate\n\nprint(result)\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n\"\"\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == 24\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == 56\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n\") == \"24\"\n\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\\n\") == \"56\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n') == 24\n\"\"\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 4 3 2') == '4\\nLRRR'\nassert solution('7\\n1 3 5 6 5 4 2') == '6\\nLRLRRR'\n\"\"\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 4 3 2\\n\") == '4\\nLRRR'\nassert solution(\"7\\n1 3 5 6 5 4 2\\n\") == '6\\nLRLRRR'\nassert solution(\"3\\n2 2 2\\n\") == '1\\nR'\nassert solution(\"4\\n1 2 4 3\\n\") == '4\\nLLRR'\n\n\"\"\"\nimport sys\n\ninput_data = sys.stdin.readlines()\nn = int(input_data[0])\na = list(map(int, input_data[1].split()))"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 4 3 2') == '4'\nassert solution('1 3 5 6 5 4 2') == '6'\nassert solution('1 3 5 6 5 4 2') == '6'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nLRRL\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nRLRRR\"\nassert solution(\"3\\n2 2 2\") == \"1\\nRR\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRR\"\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 4 3 2\\n') == '4\\nLRRR\\n', \"It's not LRRR\"\nassert solution('7\\n1 3 5 6 5 4 2\\n') == '6\\nLRLRRR\\n', \"It's not LRLRRR\"\nassert solution('3\\n2 2 2\\n') == '1\\nR\\n', \"It's not R\"\nassert solution('4\\n1 2 4 3\\n') == '4\\nLLRR\\n', \"It's not LLRR\"\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nRRR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nRLR\"\nassert solution(\"3\\n2 2 2\") == \"1\\nR\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLL\"\n\n\"\"\"\n\nfrom collections import deque\nfrom typing import List, Union\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 4 3 2') == '4\\nLRRR'\nassert solution('7\\n1 3 5 6 5 4 2') == '6\\nLRLRRR'\nassert solution('3\\n2 2 2') == '1\\nR'\nassert solution('4\\n1 2 4 3') == '4\\nLLRR'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(input())) == str(expected)\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 4 3 2\\n\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\\n\") == \"6\\nLRLRRR\"\nassert solution(\"3\\n2 2 2\\n\") == \"1\\nR\"\nassert solution(\"4\\n1 2 4 3\\n\") == \"4\\nLLRR\"\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 4 3 2') == '4'\nassert solution('1 3 5 6 5 4 2') == '6'\nassert solution('1 3 5 6 5 4 2') == '6'\nassert solution('1 3 5 6 5 4 2') == '6'\nassert solution('1 3 5 6 5 4 2') == '6'\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 1 4 7\") == \"3\"\nassert solution(\"4 5 1 4 7 10\") == \"6\"\nassert solution(\"3 5 1 4 7 10\") == \"6\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5 6\") == \"1\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 4 4 7 4 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == \"3\"\nassert solution(\"5\\n2 2 5 2 5\") == \"3\"\nassert solution(\"4\\n1 3 3 7\") == \"-1\"\nassert solution(\"2\\n2 8\") == \"3\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 5 2\") == \"3\"\nassert solution(\"5\\n2 3 5 2 5\") == \"3\"\nassert solution(\"4\\n1 3 7 4\") == \"-1\"\nassert solution(\"2\\n2 8\") == \"3\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == 3\n\"\"\"\n\nfrom math import inf\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == \"3\"\nassert solution(\"5\\n1 4 4 7 4 1\") == \"3\"\nassert solution(\"4\\n1 3 3 7\") == \"-1\"\nassert solution(\"2\\n2 8\") == \"3\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 2 5 2 5\") == \"3\"\nassert solution(\"3\\n1 3 3 7\") == \"-1\"\nassert solution(\"3\\n2 2 5 2 5\") == \"3\"\nassert solution(\"4\\n2 2 5 2 5\") == \"3\"\nassert solution(\"5\\n1 3 3 7\") == \"-1\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 2 5 2 5\") == \"3\"\nassert solution(\"6\\n1 4 4 7 4 1\") == \"3\"\nassert solution(\"5\\n1 3 3 7\") == \"3\"\nassert solution(\"4\\n2 2 5 2 5\") == \"3\"\nassert solution(\"2\\n2 8\") == \"3\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == D\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3) == -1\nassert solution(2) == 3\nassert solution(2) == 3\nassert solution(6) == 3\nassert solution(6) == 3\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"2 2 4 4\\n1 1 3 5\\n3 1 5 5\"\n) == \"NO\"\n\nassert solution(\n    \"5 2 10 5\\n3 1 7 6\\n8 1 11 7\"\n) == \"YES\"\n\nassert solution(\n    \"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\"\n) == \"YES\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"1 1 3 5\") == \"NO\"\nassert solution(\"3 1 5 5\") == \"YES\"\n\nassert solution(\"0 0 4 6\") == \"NO\"\nassert solution(\"0 0 7 4\") == \"YES\""
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 4 6\") == \"NO\"\nassert solution(\"0 0 7 4\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2 4 4\\n1 1 3 5\\n3 1 5 5') == 'NO'\nassert solution('3 3 7 5\\n0 0 4 6\\n0 0 7 4') == 'YES'\nassert solution('5 2 10 5\\n3 1 7 6\\n8 1 11 7') == 'YES'\nassert solution('0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000') == 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'NO'\nassert solution('2 2 4 4') == 'NO'\nassert solution('1 1 3 5') == 'NO'\nassert solution('3 1 5 5') == 'YES'\nassert solution('0 0 4 6') == 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 2 4 4''') == 'NO'\nassert solution('''3 1 7 5''') == 'YES'\nassert solution('''5 2 10 5''') == 'YES'\nassert solution('''0 0 1000000 1000000''') == 'YES'\nassert solution('''0 0 499999 1000000''') == 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"3 1 7 5\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\nassert solution(\"0 0 499999 1000000\") == \"YES\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\n\nsolution(stdin)"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1098\") == 20\n\"\"\"\n\nimport math\n\nn = int(input())"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1098\") == 20\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(123) == 2\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1098) == 20\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1098') == 20\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19\n\"\"\"\n\nfrom typing import List\n\nn = int(input())\n\ncount = 0\n\nwhile True:\n    if n < 10:\n        count += 1\n        break\n    n_str = str(n)\n    if n_str[-1] == '0':\n        n = int(n_str[:-1])\n    else:\n        n = int(n_str[:-1] + str(int(n_str[-1]) + 1))\n    count += 1\n\nprint(count)\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1098') == 20\n\"\"\""
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1098\") == 20\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n0 0 2 4\\n\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\nassert solution(\"7\\n4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\n\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\nassert solution(\"5\\n2 1 0 0 0\") == \"2 1 4 5 3\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\n\"\"\"\n\n\nn = int(stdin.readline())\ns = stdin.readline().split()\n\nb = []\nfor i in s:\n    if i == '0':\n        b.append(i)\n    else:\n        b.append(i)\n\nprint(' '.join(b))\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n5\\n0\\n2\\n4') == '5\\n3\\n1\\n2\\n4'\nassert solution('7\\n7\\n0\\n0\\n1\\n4\\n0\\n6') == '7\\n3\\n1\\n2\\n4\\n5\\n6'\nassert solution('5\\n5\\n0\\n2\\n4') == '5\\n3\\n1\\n2\\n4'\nassert solution('7\\n7\\n0\\n0\\n1\\n4\\n0\\n6') == '7\\n3\\n1\\n2\\n4\\n5\\n6'\n\nassert solution('7\\n7\\n0\\n0\\n1\\n4\\n0\\n6') == '7\\n3\\n1\\n2\\n4\\n5\\n6'\n\"\"\""
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 0 0 2 4') == '5 3 1 2 4'\nassert solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6'\nassert solution('7 4 0 3 0 5 1') == '7 4 2 3 6 5 1'\nassert solution('7 4 0 3 0 5 1') == '7 4 2 3 6 5 1'\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\n\nfor i in range(n):\n    if arr[i] == 0:\n        arr[i] = n\n        n -= 1\n\nprint(*arr)"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\n\n\"\"\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n5 0 0 2 4\\n\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\\n\") == \"7 4 2 3 6 5 1\"\nassert solution(\"7\\n7 4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n5 0 0 2 4\\n') == '5 3 1 2 4'\nassert solution('7\\n7 0 0 1 4 0 6\\n') == '7 3 2 1 4 5 6'\nassert solution('7\\n7 4 0 3 0 5 1\\n') == '7 4 2 3 6 5 1'\nassert solution('5\\n2 1 0 0 0\\n') == '2 1 4 5 3'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n5 0 0 2 4\\n\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\\n\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\\n\") == \"7 4 2 3 6 5 1\"\nassert solution(\"5\\n2 1 0 0 0\\n\") == \"2 1 4 5 3\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 1') == 'YES\\n2 1 1 2 1'\nassert solution('5 2\\n2 1 1 2 1') == 'NO'\n\nprint('The local tests are done. Try to solve the `A` on `Problems -> IDLE`.')\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 2\n1 2 2 3\n''') == 'YES\\n1 1 2 2'\nassert solution('''5 2\n3 2 1 2 1\n''') == 'YES\\n2 1 1 2 1'\nassert solution('''5 2\n2 1 1 2 1\n''') == 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n\nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass C:\n    color: int\n    i: int\n\n@dataclass\nclass S:\n    i: int\n    j: int\n    color: int\n\n@dataclass\nclass F:\n    i: int\n    j: int\n    c: List[C]"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 1') == 'YES\\n2 1 1 2 1'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 3') == 'YES\\n2 1 1 2 1'\n\n\"\"\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\nassert solution(\"11 6 1\") == \"9\"\nassert solution(\"11 6 0\") == \"7\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 5 2\") == \"1\"\n\nassert solution(\"11 5 1\") == \"3\""
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11 5 2') == '1'\nassert solution('11 5 1') == '3'\nassert solution('11 5 0') == '0'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\n\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n\n\n-----Test 2-----\n\nInput\n10 2 3\n101010\n\nOutput\n1\n\nInput\n10 2 4\n101010\n\nOutput\n3\n\n\n-----Test 3-----\n\nInput\n11 5 2\n110101001010\n\nOutput\n2\n\n\n-----Test 4-----\n\nInput\n11 5 1\n110101001010\n\nOutput\n4\n\n\n-----Test 5-----\n\nInput\n1000 5 2\n
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 5 2\\n11010100101') == '1'\nassert solution('11 5 1\\n11010100101') == '3'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\n\"\"\"\n\nimport math\nimport sys\n\nsys.setrecursionlimit(1500)\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11 5 2') == '1'\nassert solution('11 5 1') == '3'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11 5 2') == '1'\nassert solution('11 5 1') == '3'\nassert solution('11 5 0') == '0'\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"4\\n1 2 2 1\\n4\\n1 2 2 1\") == \"YES\\nYES\\nNO\\nYES\"\n\"\"\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 1\\n3\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n3\\n1 2 2 3 2\") == \"NO\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"YES\"\nassert solution(\"4\\n1 2 2 1\\n4\\n1 2 2 1\") == \"NO\"\n\n\"\"\"\n\nimport sys\nimport os\nimport time\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\n\n\"\"\"\n\nfrom collections import Counter\nimport re\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 2 1\\n3\\n1 1 2\") == \"YES\"\nassert solution(\"5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"YES\"\nassert solution(\"5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"NO\"\nassert solution(\"5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\nassert solution(\"6\\n2\\n1 1\\n4\\n1 1 2\\n3\\n1 1 2 2\\n3\\n1 1 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 2\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n1 2\\n4\\n1 2 2 1\\n4\\n1 2 2 1\\n4\\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n\"\"\") == \"YES\\nYES\\nNO\\nYES\\nNO\"\n\nassert solution(\"\"\"\n5\n4\n1 2 1 3\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n\"\"\") == \"NO\\nNO\\nNO\\nYES\\nYES\"\n\n\"\"\"\nfrom typing import List, Set, Tuple\n\nimport re\nimport math\nimport functools"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1337\") == \"1557\"\nassert solution(\"11111\") == \"99999\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1337\") == \"1553\"\nassert solution(\"5\\n11111\") == \"99999\"\nassert solution(\"2\\n33\") == \"33\"\n\"\"\"\n\nimport itertools\nimport sys\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"33\") == \"33\"\nassert solution(\"1 1 1 1 1 1 1 1 1\") == \"9999\"\n\nprint(solution(\"1337\"))\nprint(solution(\"11111\"))\nprint(solution(\"33\"))\nprint(solution(\"1 1 1 1 1 1 1 1 1\"))\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n4\n1337\n1 2 5 4 6 6 3 1 9\n\"\"\"\n) == \"1557\"\n\nassert solution(\n\"\"\"\n5\n11111\n9 8 7 6 5 4 3 2 1\n\"\"\"\n) == \"99999\"\n\nassert solution(\n\"\"\"\n2\n33\n1 1 1 1 1 1 1 1 1\n\"\"\"\n) == \"33\"\nprint(\"Passed!\")\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1337') == '1553'\nassert solution('11111') == '99999'\nassert solution('9998') == '99999'\nassert solution('55555') == '99995'\nassert solution('55555') == '99995'\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1337') == '1553'\nassert solution('11111') == '99999'\n\"\"\"\n\na = int(input())\na_str = input()\nf_str = input()"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1337\") == \"1557\"\nassert solution(\"5\\n11111\") == \"99999\"\n\n\"\"\"\n\n\n\"\"\"\nDynamic Programming\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1337\") == \"1557\"\nassert solution(\"11111\") == \"99999\"\nprint(solution(\"1337\"))\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"4\\n1337\"\n) == \"1557\"\n\nassert solution(\n    \"5\\n11111\"\n) == \"99999\"\n\nassert solution(\n    \"2\\n33\"\n) == \"33\"\n\nprint('Hooray!')\n\n\"\"\""
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"33\") == \"33\"\nprint(\"PASSED\")\n\n\"\"\""
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48'\nprint(\"The local tests are done. Click on 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38'\n\"\"\""
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\"\n\n\"\"\""
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46') == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\"\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('123 321 456') == '3'\nassert solution('5 10 15') == '2'\nassert solution('15 18 21') == '4'\nassert solution('100 100 101') == '3'\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46') == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48'\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 5\\n2 3 5\") == \"1\\n2 2 3\"\nassert solution(\"3 3 3\\n3 3 3\") == \"0\\n3 3 3\"\nassert solution(\"5 5 5\\n5 5 5\") == \"0\\n5 5 5\"\n\nassert solution(\"5 2 6\\n5 2 6\") == \"2\\n1 2 4\"\nassert solution(\"5 2 6\\n6 2 6\") == \"3\\n1 2 3\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 3\") == \"1 1 1\"\nassert solution(\"1 1 2\") == \"2 2 2\"\nassert solution(\"1 1 1\") == \"0 0 0\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import gcd\nfrom functools import reduce\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == ''\nassert solution('123 321 456') == ''\nassert solution('5 10 15') == ''\nassert solution('15 18 21') == ''\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8\\n1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46') == '\\n1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48'"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\nassert solution('3\\n1 3 3') == '2'\nassert solution('4\\n1 3 3 7') == '2'\nassert solution('6\\n1 100000 1 2 3 100 2') == '0'\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 3 7\") == '2'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n1 3 3 7''') == 2\nassert solution('''2\n1 100000''') == 0\nassert solution('''4\n1 3 3 7''') == 2\nassert solution('''2\n1 100000''') == 0\nassert solution('''6\n1 2 3 6 6 5''') == 2\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\nassert solution(\"1\\n100000\") == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\nassert solution(\"10\\n1 1 2 3 4 5 6 7 8 9 10\") == \"0\"\nassert solution(\"10\\n1 10 10 10 10 10 10 10 10 10\") == \"0\"\n\nassert solution(\"1\\n10\") == \"0\""
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"1 2 3 1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\""
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"0\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\""
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 1 1 0 4 3 4 4\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"3 2 1 10 3\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"3 2 10 3\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"3 2 10 3\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"3 2 10 3\") == \"2 2 2 1 1 0 4 3 4 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n\"\"\""
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 1\") == \"1 2 3 0 3\"\n\"\"\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2\\n1 3 1\\n1 5 1') == '1 2 3 0 3'\nassert solution('3 2\\n1 3 1\\n1 2 1') == '-1'\nassert solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5 2\n1 3 1\n1 5 1\"\"\") == \"\"\"1 2 3 0 3 \n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '-1'\nassert solution('1 3 1\\n1 5 1') == '1 2 3 0 3'\nassert solution('1 3 1\\n1 2 1\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2\\n1 3 1\\n1 5 1') == '1 2 3 0 3'\nassert solution('3 2\\n1 3 1\\n1 2 1') == '-1'\nassert solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nimport sys\n\ninputs = sys.stdin.readlines()\nn, m = map(int, inputs[0].split())"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(123) == '-1'\nassert solution(120) == '7'\nassert solution(123) == '-1'\nassert solution(120) == '7'\nassert solution(123) == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n\n\n\"\"\""
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aba') == 'ababababa'\nassert solution('cat') == 'catcat'\n\"\"\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aba\") == \"ababababa\"\nassert solution(\"cat\") == \"catcat\"\nassert solution(\"abacaba\") == \"abacababacababacaba\"\n\nassert solution(\"aaaaaaa\") == \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'aa'\nassert solution('aab') == 'aba'\nassert solution('abc') == 'abcabc'"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\", 3) == \"aba\"\nassert solution(\"cat\", 2) == \"catcat\"\nassert solution(\"cccccc\", 3) == \"cccccccc\"\nassert solution(\"a\", 4) == \"aaaaaaaa\"\nassert solution(\"b\", 1) == \"bbbbbbbb\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aba') == 'ababababa'\nassert solution('cat') == 'catcat'\n\nprint(solution(stdin.readlines()))\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aba\") == \"abababa\"\nassert solution(\"cat\") == \"catcat\"\n\n\"\"\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aba\") == \"ababababa\"\nassert solution(\"cat\") == \"catcat\"\nassert solution(\"dog\") == \"dogdog\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aba\", 3) == \"abababa\"\nprint(solution(\"aba\", 3))\nassert solution(\"cat\", 2) == \"catcat\"\nprint(solution(\"cat\", 2))\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aba') == 'ababababa'\n\nassert solution('cat') == 'catcat'\n\nassert solution('abc') == 'abcabcabc'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 5 1 2 2\") == \"3\\n4 1 5\"\nassert solution(\"4\\n8 3 5 2\") == \"2\\n1 4\"\nassert solution(\"5\\n2 1 2 4 3\") == \"0\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 1 2 2\") == \"3 4 1 5\"\nassert solution(\"4 3 5 2\") == \"0\"\nassert solution(\"5 1 2 4 3\") == \"1 4\"\n\"\"\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 1 2 2\") == \"3 4 1 5\"\nassert solution(\"4 3 5 2\") == \"0\"\nassert solution(\"5 1 2 4 3\") == \"0\"\nassert solution(\"8 3 5 2\") == \"2 1 4\"\n\"\"\""
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"3\\n1 2 3\") == \"1\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1 2 4 3\") == \"0\"\nassert solution(\"2 5 1 2 2\") == \"3\"\nassert solution(\"8 3 5 2\") == \"2\"\nassert solution(\"8 3 5 2\") == \"2\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '0\\n0'\nassert solution('5\\n2 1 2 4 3') == '2\\n1 4'\nassert solution('5\\n2 1 2 2') == '0\\n0'\nassert solution('5\\n1 1 1 1 1') == '0\\n0'\nassert solution('5\\n2 2 2 2') == '0\\n0'\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 1 2 2') == '3 4 1 5'\nassert solution('4 3 5 2') == '0'\nassert solution('8 3 5 2') == '2 1 4'\n\n\n\n\"\"\"\n\nimport sys\nfrom collections import deque\nfrom typing import Dict, List, Deque, Tuple, Set"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 1 2 2\") == \"3 1 4\"\nassert solution(\"4 3 5 2\") == \"0\"\nassert solution(\"5 1 2 4 3\") == \"2 1 4\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 5 1 2\") == \"2\"\nassert solution(\"5\\n2 1 2 4 3\") == \"0\"\nassert solution(\"5\\n8 3 5 2\") == \"1\"\nassert solution(\"5\\n2 1 2 4 3\") == \"0\"\nassert solution(\"5\\n4 2 2 4 1\") == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3 5 2\") == \"0\"\nassert solution(\"2 1 2 4 3\") == \"2\"\nassert solution(\"1 2 3 4 5\") == \"0\"\nassert solution(\"7 7 7 7 7\") == \"7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n asdf\") == \"4\"\nassert solution(\"5 6\\n aaaaa\") == \"15\"\nassert solution(\"5 7\\n aaaaa\") == \"-1\"\nassert solution(\"10 100\\n ajihiushda\") == \"233\""
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5\\nasdf') == 4\n\nassert solution('5 6\\naaaaa') == 15\n\nassert solution('5 7\\naaaaa') == -1\n\nassert solution('10 100\\najihiushda') == 233\n\"\"\"\n\nimport sys\nimport heapq\nimport math\n\ns = input().split()\nn, k = int(s[0]), int(s[1])\n\ns = input()\n\nt = []\nfor c in s:\n    heapq.heappush(t, c)\n\ncost = 0\nwhile len(t) > k:\n    c = heapq.heappop(t)\n    cost += n - len(c)\n\nprint(cost)\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ajihiushda\") == 233\nassert solution(\"aaaaa\") == 15\nassert solution(\"asdf\") == 4\nassert solution(\"asd\") == 1\nassert solution(\"adf\") == 2\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 asdf\") == 4\nassert solution(\"5 6 ajihiushda\") == 15\nassert solution(\"5 7 ajihiushda\") == -1\n\"\"\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 asdf\") == \"4\"\nassert solution(\"5 6 aaaa\") == \"15\"\nassert solution(\"5 7 aaaa\") == \"-1\"\nassert solution(\"10 100 ajihiushda\") == \"233\"\n\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == 233\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 asdf\") == \"4\"\nassert solution(\"5 6 aaaaa\") == \"15\"\nassert solution(\"5 7 aaaaa\") == \"-1\"\nassert solution(\"10 100 ajihiushda\") == \"233\"\nprint(\"All test cases passed.\")\n\n-----\n2.  Input\n    7 6\n    asdza\n\nOutput\n    -1"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\", \"asdf\") == \"4\"\nassert solution(\"5 6\", \"aaaaa\") == \"15\"\nassert solution(\"5 7\", \"aaaaa\") == \"-1\"\nassert solution(\"10 100\", \"ajihiushda\") == \"233\"\n\"\"\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == 233\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution('4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == 'YES\\n1 2\\n1 3\\n4 1\\n2 3'\nassert solution('4 4 3\\n1 2\\n1 4\\n2 3\\n3 4') == 'NO'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n') == 'YES\\n2 1\\n2 3\\n3 4\\n'\nassert solution('4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n') == 'YES\\n1 2\\n1 3\\n4 1\\n'\n\"\"\"\nimport sys\nfrom math import ceil, floor\n\nsys.setrecursionlimit(10 ** 6)\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected_output\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == 'YES\\n2 1\\n2 3\\n3 4'\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == 'YES\\n1 2\\n1 4\\n4 1\\n3 2\\n2 3'\n\"\"\""
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n3 4\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n2 3\\n3 4\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n2 3\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\nassert solution(\"4 4 3\\n1 2\\n1 3\\n2 3\\n3 4\") == \"NO\"\n\n\"\"\"\nfrom collections import defaultdict, deque\nfrom typing import Dict, List, Set, Deque"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\"\n) == \"YES\\n2 1\\n2 3\\n3 4\"\n\nassert solution(\n    \"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\"\n) == \"YES\\n1 2\\n1 3\\n4 1\\n2 3\\n3 4\"\n\nassert solution(\n    \"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\"\n) == \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n2 1\\n2 3\\n3 4\\n\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n1 2\\n1 4\\n3 2\\n3 4\\n\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\\n\") == \"NO\\n\"\nassert solution(\"4 4 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"NO\\n\"\nassert solution(\"4 4 2\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"NO\\n\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(solution.test_cases[0]) == \"02:30\"\nassert solution(solution.test_cases[1]) == \"03:02\"\nassert solution(solution.test_cases[2]) == \"01:02\"\nassert solution(solution.test_cases[3]) == \"23:59\"\nassert solution(solution.test_cases[4]) == \"00:14\"\n\nprint('The local tests are done. Click on \"Check\" for more details about implementation.')\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:00\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\n\"\"\"\n\nh1, m1 = map(int, stdin.readline().split(\":\"))\nh2, m2 = map(int, stdin.readline().split(\":\"))\n\nresult = None"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:00') == '11:00'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\nassert solution('03:02') == '03:02'\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\nassert solution(\"03:02\") == \"03:02\"\nassert solution(\"11:10\") == \"11:11\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10:00 11:00\") == \"10:30\"\nassert solution(\"11:10 11:12\") == \"11:11\"\nassert solution(\"01:02 03:02\") == \"02:02\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10:00 11:00\") == \"10:30\"\nassert solution(\"11:10 11:12\") == \"11:11\"\nassert solution(\"01:02 03:02\") == \"02:02\"\n\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"11:30\"\nassert solution(\"11:10\") == \"11:11\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3) == \"1\"\nassert solution(8) == \"3\"\nassert solution(27) == \"5\"\nassert solution(42) == \"6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\n\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == 1\nprint(solution(\"2\"))\nassert solution(\"3\") == 2\nprint(solution(\"4\"))\nassert solution(\"5\") == 3\nprint(solution(\"6\"))\nassert solution(\"27\") == 5\nprint(solution(\"42\"))\nprint(solution(\"79\"))\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\nassert solution('1') == 1\n\"\"\"\n\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(2) == 1\n\n\"\"\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\nprint('Test pass.')\n\n---\nclass Solution:\n    def fizzBuzz(self, n: int) -> List[str]:\n        res = [str(i) for i in range(1, n+1)]\n        return res if n < 3 else [f'{i}' if i%3!=0 and i%5!=0 else 'FizzBuzz'[i//3%2::2] for i in range(1,n+1)]\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 1\n\"\"\"\n\na = int(input())\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"4\") == 2\nassert solution(\"27\") == 5\nassert solution(\"42\") == 6\n\nprint(\"Try to solve the problem by writing one line of code.\nDon't forget to check your solution!\")\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\nassert solution('64') == 10\n\"\"\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\nassert solution('1') == '1'\n\nassert solution('2') == '1'\n\nassert solution('3') == '2'\n\nassert solution('4') == '2'"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 5\") == \"7\"\nassert solution(\"4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"3 10\\n1 5\\n0 4\") == \"2\"\nassert solution(\"5 10\\n4 5\\n1 2\\n9 20\\n0 4\") == \"0\"\nassert solution(\"2 10\\n4 5\\n1 2\\n9 20\\n0 4\") == \"7\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4\n1 3\n2 6\n0 4\n3 3\n\"\"\") == '1'\n\nassert solution(\"\"\"\n5\n2 6\n1 3\n0 4\n1 20\n0 4\n\"\"\") == '2'\n\nassert solution(\"\"\"\n3\n4 5\n1 2\n9 20\n\"\"\") == '0'\n\nassert solution(\"\"\"\n2\n3 10\n1 5\n\"\"\") == '7'\n\nassert solution(\"\"\"\n2\n3 10\n1 5\n\"\"\") == '7'\n\"\"\""
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == '1'\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == '2'\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == '0'\nassert solution(\"2\\n3 10\\n1 5\") == '7'\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\\n\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\\n\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\\n\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 3\\n2 6\\n0 4\\n3 3') == '1'\nassert solution('5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4') == '2'\nassert solution('3\\n4 5\\n1 2\\n9 20') == '0'\nassert solution('2\\n3 10\\n1 5') == '7'\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4') == '0'\nassert solution('3 2\\n1 5') == '2'\nassert solution('2 1\\n3 5') == '2'\n\n'''"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == '1\\n'\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == '2\\n'\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == '0\\n'\nassert solution(\"2\\n3 10\\n1 5\") == '7\\n'\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == '0\\n'\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 3\\n2 6\\n0 4\\n3 3') == '1\\n'\nassert solution('5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4') == '2\\n'\nassert solution('3\\n4 5\\n1 2\\n9 20') == '0\\n'\nassert solution('2\\n3 10\\n1 5') == '7\\n'\n\nassert solution('5\\n4 5\\n1 2\\n9 20\\n1 5') == '0\\n'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 1 2 5') == 'YES'\nassert solution('3 5 3') == 'NO'\nassert solution('10 10') == 'YES'\n\"\"\""
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'YES'\nassert solution('1\\n3\\n1\\n2\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n1\\n2\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\n1\\n3\\n3\\"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\nassert solution('10\\n10') == 'NO'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\n\nimport unittest\nclass TestVova(unittest.TestCase):\n    def test_example(self):\n        assert solution('5\\n2 1 1 2 5') == 'YES'\n    def test_example2(self):\n        assert solution('3\\n4 5 3') == 'NO'\n    def test_example3(self):\n        "
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 1 1 2 5\\n\") == \"YES\"\nassert solution(\"3\\n4 5 3\\n\") == \"NO\"\nassert solution(\"2\\n10 10\\n\") == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5 3') == 'NO'\nassert solution('2 1 1 2 5') == 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 1 2 5\") == \"YES\"\nassert solution(\"5 2 1 2 5\") == \"YES\"\nassert solution(\"3 4 5\") == \"NO\"\nassert solution(\"10 10\") == \"YES\"\nassert solution(\"1 1 1 1 1\") == \"YES\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aaaaa') == '15'\nassert solution('asdf') == '4'\nassert solution('aaaaa') == '15'\nassert solution('a') == '1'\nassert solution('aaaaa') == '15'\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\najihiushda\") == 4\nassert solution(\"5 6\\naaaaa\") == 15\nassert solution(\"5 7\\naaaaa\") == -1\n\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == 233\nassert solution(\"zasdfasdf\") == -1\n\"\"\""
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"asdf\") == \"4\"\nassert solution(\"aaaaa\") == \"15\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"aaaaa\") == 15\nassert solution(\"aaaaa\") == 15\nassert solution(\"aaaaa\") == 15\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 asdf\") == \"4\"\nassert solution(\"5 6 ajihiushda\") == \"15\"\nassert solution(\"5 7 ajihiushda\") == \"-1\"\nassert solution(\"10 100 ajihiushda\") == \"233\"\n\n\n\n\n\"\"\""
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\", \"asdf\") == 4\nassert solution(\"5 6\", \"aaaaa\") == 15\nassert solution(\"5 7\", \"aaaaa\") == -1\n\n---"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"asdf\", 5, 4) == \"asdf\"\nassert solution(\"aaaaa\", 5, 4) == \"aaaaa\"\nassert solution(\"aaaaa\", 6, 5) == \"aaaaa\"\nassert solution(\"aaaaa\", 7, 6) == -1\nassert solution(\"aaaaa\", 7, 7) == -1\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\najihiushda\") == \"233\"\nassert solution(\"5 7\\naaaaa\") == \"-1\"\nassert solution(\"10 100\\najihiushda\") == \"233\"\n\"\"\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(s=\"ajihiushda\") == 233\n\n\"\"\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\n\n\"\"\"\n\nimport numpy as np\n\nn = list(map(int, input().split()))"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 100 1') == '3'\nassert solution('2 100 1') == '4'\nassert solution('30 20 10') == '39'\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n\n\"\"\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\n\nprint('The local tests are done. Click on \"Check\" to earn cool rewards!')\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 1\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\""
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1\") == '4'\nassert solution(\"3 2 2\") == '7'\nassert solution(\"1 100 1\") == '3'\nassert solution(\"30 20 10\") == '39'"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1 1') == '4'\nassert solution('2 1 1') == '3'\nassert solution('1 100 1') == '3'\n\"\"\""
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1 1\\n') == \"4\"\nassert solution('2 1 1\\n') == \"3\"\nassert solution('3 2 2\\n') == \"7\"\nassert solution('1 100 1\\n') == \"3\"\nassert solution('30 20 10\\n') == \"39\"\n\"\"\"\n\na, b, c = list(map(int, input().split()))\n\nmax_days = max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\") == \"YES\"\nassert solution(\"6 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\") == \"NO\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\") == \"YES\"\nassert solution(\"6 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\") == 'YES'\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\") == 'NO'\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\") == 'YES'\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\") == 'NO'\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\") == 'YES'\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n1 1') == \"YES\"\nassert solution('3 4\\n1 2\\n5 6\\n5 7') == \"NO\"\nassert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n7 4') == \"NO\"\nassert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2') == \"YES\"\nassert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2') == \"NO\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4') == 'YES'\nassert solution('5 5') == 'NO'\n\"\"\"\n\nimport sys\nsys.path.insert(0, './../')\n\nimport unittest\nfrom ddt import ddt, data, unpack\nfrom src.ch_4 import solution\n\n\n@ddt\nclass TestCh4(unittest.TestCase):\n\n    @data(\n        ('3 4', 'YES'),\n        ('4 4', 'NO'),\n    )\n    @unpack\n    def test_solution(self, stdin: str, expected: str):\n        self.assertEqual(solution(stdin), expected)\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7\\n7 4\\n8 9\\n9 8\") == 'YES'\nassert solution(\"1 1\\n1 2\\n2 2\\n1 1\") == 'NO'\nassert solution(\"5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\") == 'NO'\nassert solution(\"5 8\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\") == 'YES'\n\n-----Big-O-----\n\nFor the given test cases:\n\nThe number of test cases is $t$ ($1 \\le t \\le 100$, $1 \\le n \\le 100$, $1 \\le m \\le 100$)\n\nThe number of types of tiles is $n$ ($1 \\le n \\le 100$)\n\nThe complexity is O(n^2)\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\\n\") == \"YES\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\\n\") == \"NO\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\\n\") == \"NO\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\\n\") == \"NO\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2\\n\") == \"NO\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\") == \"YES\"\n\"\"\"\n\nfrom collections import defaultdict, deque"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4') == 'YES'\nassert solution('3 4') == 'NO'\nassert solution('1 2') == 'YES'\nassert solution('100 100') == 'NO'\nassert solution('1 1') == 'YES'\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n1 2\\n4 5\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2') == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 4\n1 2\n5 6\n5 7\n7 4\n8 9''') == 'YES'\nassert solution('''3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1''') == 'NO'\nassert solution('''3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1''') == 'NO'\nassert solution('''3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1''') == 'YES'\nassert solution('''3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1''') == 'NO'\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n\") == \"0\"\nassert solution(\"5\\n\") == \"1\"\nassert solution(\"6\\n\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"1\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '0'\nassert solution('5') == '1'\nassert solution('6') == '1'\n\nassert solution('1, 2, 3') == '0'\nassert solution('1, 3, 4, 5, 2, 6') == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n') == '0'\nassert solution('5\\n') == '1'\nassert solution('6\\n') == '1'"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n') == '0\\n'\nassert solution('5\\n') == '1\\n'\nassert solution('6\\n') == '1\\n'\n\n---\n\n'''"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n') == '0'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n') == '1'\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1\\n2\\n3\\n4\\n5') == '0'\nassert solution('5\\n1\\n2\\n3\\n4\\n5') == '1'\nassert solution('6\\n1\\n2\\n3\\n4\\n5') == '1'\n\"\"\"\nimport sys\n\nfrom stdin_get_number import get_int\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(((()))())\") == 4\nassert solution(\"(()(((()()((()())(())))((()))())(()))(()((()())(()()))(()((()())(()()))()((()))(()(())(((()(()()(((()))(((((()))())(()))(())((())((()))(((())(((()))(())(((()(((((((((((((((((((((()))(((((((((((((((((((()(((((())((()))()(())((()(((((((()(()(((())((((((((((((()()(((())))((())((()(((((()(((())((((((((((((((((((((((((((((((((((((((()(((((((((((()(())((((((((((((((((((((((((((((((((((((((((((((((((()(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"(())()\") == 4\nassert solution(\"(()((()())()))\") == 1\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"()))()\") == \"5\"\nassert solution(\"(()))()\") == \"4\"\nassert solution(\"((()))()\") == \"0\"\nassert solution(\"(()(()))()\") == \"4\"\nassert solution(\"())\") == \"0\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()))()\") == 4\nassert solution(\"((()))\") == 4\nassert solution(\"((((((()))))))\") == 0\nassert solution
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"()))()\") == \"5\"\nassert solution
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"()))()\") == \"5\"\nassert solution(\"(((()))\") == \"4\"\nassert solution(\"((((()))()\") == \"0\""
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()()))()\") == 4\nassert solution(\"((((()))()()()))\") == 10\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('()))()') == 5\nassert solution('(()))') == 4\nassert solution('()()())') == 1\nassert solution('()(()())') == 1\nassert solution('(()())()') == 4\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()))()\") == 4\nassert solution(\"((()))\") == 4\nassert solution(\"(()(()))\") == 4\nassert solution(\"()((()))\") == 4\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"((()))\") == 5\nassert solution(\"((()()))()\") == 2\nassert solution(\"(()(()))()\") == 0\nassert solution(\"()((()))()\") == 5\nassert solution(\"(()())\") == 4\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5071') == '4'\nassert solution('705') == '1'\nassert solution('1241367') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n\nprint(\"Test finished.\")\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\n\"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n5071\n\"\"\"\n) == \"4\"\n\"\"\"\n\n\"\"\"\n)"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5071\") == 4\nassert solution(\"705\") == 1\nassert solution(\"1241367\") == -1\n\n\n\n\"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"505\") == 1\nassert solution(\"1070\") == 1\nassert solution(\"505\") == 1\nassert solution(\"1070\") == 1\nassert solution(\"505\") == 1\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5071') == 4\nassert solution('705') == 1\nassert solution('1241367') == -1\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n\n\n----\n\n\u0418\u043d\u043e\u0433\u0434\u0430 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0434\u0430\u043d\u043d\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u043e \u0447\u0438\u0441\u043b\u043e, \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u044b \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u044e.\n\u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0430\u043f\u0438\u0448\u0435\u0442\u0435 \u043a\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0442\u043e \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0438 \u043f\u043e \u0434\u0440\u0443\u0433\u0438\u043c \u0441\u043b\u0443\u0447\u0430\u044f\u043c.\n\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0432\u043e\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438?\n\n\u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 N \u043d\u0430\u0445\u043e\u0434\u0438\u0442 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0435\u0435 \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430\u0446\u0435\u043b\u043e \u043d\u0430 25.\n\n\u041f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0430:\n\u041e\u0447\u0435\u043d\u044c \u043f\u0440\u043e\u0441\u0442\u043e! \u0412\u043e\u0442 \u043e\u0434\u043d\u0438 \u0441\u043f\u043e\u0441\u043e\u0431:\n\n\u0412 \u0432\u0430\u0448\u0435\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, 5071. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 num \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430 '5701'.\n\u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0443 '5701' \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c.\n\u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u043e 5701, \u043d\u0443\u0436\u043d\u043e \u0443\u043c\u043d\u043e\u0436\u0438\u0442\u044c \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0430 10 \u0438 \u043f\u0440\u0438\u0431\u0430\u0432\u0438\u0442\u044c \u043a \u043d\u0435\u043c\u0443 1. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u0441\u044f \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e res:\n\nres = num * 10 + 1\n\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 res \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c.\n\u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u043d\u0435 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430\u0446\u0435\u043b\u043e \u043d\u0430 25, \u0442\u043e\u0433\u0434\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0443:\n\n\"No solution\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacbecfd\") == \"2\"\nassert solution(\"aaabbcbb\") == \"2\"\nassert solution(\"abcdedc\") == \"3\"\nassert solution(\"abcde\") == \"1\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('aa') == '1'\nassert solution('ab') == '2'\nassert solution('aab') == '2'\nassert solution('abab') == '1 1 2 2'\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abracadabra\") == \"2 1 1 2 2 2 1 2 3 3 2 1 3 1 1 2 3 3\"\nassert solution(\"deeedbbcccbdaa\") == \"3 2 1 2 3 2 1 1 2 2 3 2 1 1 2 3 2 3\"\nassert solution(\"qqqqq\") == \"1 1 1 1 1 1\"\nassert solution(\"bcbabcbacd\") == \"3 2 1 2 1 2 3 3 3 3 1 1 1 1 2 3 3 2 3 1\"\nassert solution(\"bacbacbac\") == \"3 2 1 2 1 1 1 1 2 2 1 1 1 1\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abacbecfd') == '2'\nassert solution('aaabbcbb') == '2'\nassert solution('abcdedc') == '3'\nassert solution('abcde') == '1'"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacbecfd\") == \"2\"\n\nassert solution(\"aaabbcbb\") == \"2\"\n\nassert solution(\"abcdedc\") == \"3\"\n\nassert solution(\"abcde\") == \"1\"\n\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"26\"\n\nprint(\"OK\")"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(example1) == solution(example2)\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacbecfd\") == 2\nassert solution(\"aaabbcbb\") == 2\nassert solution(\"abcdedc\") == 3\nassert solution(\"abcde\") == 1\nassert solution(\"abbabbbc\") == 2\n\"\"\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacbecfd\") == \"2\"\nassert solution(\"aaabbcbb\") == \"2\"\nassert solution(\"abcdedc\") == \"3\"\nassert solution(\"abcde\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacbecfd\") == 2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcd\") == 1\nassert solution(\"aabcde\") == 2\nassert solution(\"abcde\") == 1\nassert solution(\"abcdef\") == 4\nassert solution(\"abcdedc\") == 2\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a\") == \"YES\"\nassert solution(\"aba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"ba\") == \"YES\"\nassert solution(\"aba\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\\n\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\\n\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\\n\"\nassert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\\n\") == \"NO\\n\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"qwerty\") == \"YES\"\nassert solution(\"qwerty\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\na\naba\nabacaba\nba\naba\n\n''') == 'YES\\na\\nba\\naba\\naba\\nabacaba'\n\nassert solution('''5\na\nabacaba\nba\naba\nabab\n\n''') == 'NO'\n\n\nassert solution('''3\nqwerty\nqwerty\nqwerty\n\n''') == 'YES\\nqwerty\\nqwerty\\nqwerty'\n\n\nassert solution('''5\na\nabacaba\nba\naba\nabab\n\n''') == 'NO'\n\n\nassert solution('''1\na\n\n''') == 'YES\\na'\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcd\\nabcd\") == \"YES\\nabcd\\nabcd\"\nassert solution(\"qwerty\\nqwerty\\nqwerty\") == \"YES\\nqwerty\\nqwerty\\nqwerty\""
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\\n\"\nassert solution(\"q\\nq\\nq\\n\") == \"YES\\nq\\nq\\nq\\n\"\nassert solution(\"qwerty\\nqwerty\\nqwerty\\n\") == \"YES\\nqwerty\\nqwerty\\nqwerty\\n\"\nassert solution(\"a\\nabacaba\\nba\\naba\\nabab\") == \"NO\""
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aba\") == \"YES\"\nassert solution(\"qwerty\") == \"NO\"\nassert solution(\"qwerty\") == \"NO\"\nassert solution(\"qwerty\") == \"YES\"\nassert solution(\"qwerty\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aba\\nabacaba\\nba\\na\\nabab\") == \"YES\\na\\nba\\na\\nabacaba\"\n\"\"\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a\\naba\\nabacaba\\nba\\naba\\nabab\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\\n\"\nassert solution(\"qwerty\\nqwerty\\nqwerty\\n\") == \"YES\\nqwerty\\nqwerty\\nqwerty\\n\"\n\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\n\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\n\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n\"\"\"\n\nn, k = map(int, input().split())\na = [int(i) for i in input().split()]"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 3 1 5 1 6 4') == 5\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(int(input()))\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 3 1 5 1 6 4') == 5\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''8 4\n4 2 3 1 5 1 6 4''') == '5'\nassert solution('''5 2\n3 1 2 1 3''') == '0'\nassert solution('''5 100\n12 34 55 43 21''') == '5'\nassert solution('''5 100\n11 9 11 9 11''') == '0'\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 4\") == \"5\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"5 100\") == \"5\"\n\"\"\"\n\n\nfrom math import ceil"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 3 1 5 1 6 4\") == 5\n\"\"\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '4 4'\n    ) == 12\n\nassert solution(\n    '3 9'\n    ) == 14\n\nassert solution(\n    '9 3'\n    ) == 14\n\nassert solution(\n    '506 2708'\n    ) == 3218\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n\n\"\"\""
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n\nprint(\"Successfully tested.\")"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4') == '12'\nassert solution('4 6') == '12'\nassert solution('6 9') == '14'\nassert solution('1 9') == '14'\nassert solution('9 3') == '14'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n\"\"\"\n\na, b = map(int, input().split())\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '2'\nassert solution('2 3') == '3'\nassert solution('4 6') == '6'\nassert solution('4 4') == '0'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcd\") == \"0110\"\n\n-----\nInput\n4\nacd\n\nOutput\nYES\n11\n\nInput\n3\nabc\n\nOutput\nYES\n11\n\nInput\n2\nab\n\nOutput\nNO\n\nInput\n1\na\n\nOutput\nYES\n01\n\n-----\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcd\") == \"YES\"\nassert solution(\"aabcde\") == \"YES\"\nassert solution(\"ababcbac\") == \"NO\"\nassert solution(\"abcbacd\") == \"YES\"\nassert solution(\"abcbacde\") == \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacbecfd\") == 'YES'\nassert solution(\"aaabbcbb\") == 'YES'\nassert solution(\"abcde\") == 'YES'\nassert solution(\"abcdeeef\") == 'NO'\nassert solution(\"abcdedc\") == 'YES'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abacbecfd') == 'YES\\n001010101'\nassert solution('aaabbcbb') == 'YES\\n01011011'\nassert solution('abcde') == 'YES\\n00000'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcdedc\") == \"YES\", \"case1, stdout: 11\"\nassert solution(\"aaabbcbb\") == \"YES\", \"case2, stdout: 1011\"\nassert solution(\"abacbecfd\") == \"NO\", \"case3, stdout: No\"\nassert solution(\"abc\") == \"YES\", \"case4, stdout: 00\"\nassert solution(\"abac\") == \"YES\", \"case5, stdout: 0101\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abacbecfd') == 'YES'\nassert solution('abcdedc') == 'YES'\nassert solution('abcde') == 'YES'\nassert solution('aaaabbbb') == 'NO'\nassert solution('aaabbcbb') == 'YES'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aaabbcbb\") == \"YES\"\nassert solution(\"abacbecfd\") == \"YES\"\nassert solution(\"abcdedc\") == \"NO\"\nassert solution(\"abcde\") == \"YES\"\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\n\"\"\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacbecfd\") == \"NO\"\nassert solution(\"aaabbcbb\") == \"YES\"\nassert solution(\"abcdedc\") == \"NO\"\nassert solution(\"abcde\") == \"YES\"\nassert solution(\"a\") == \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'NO'\nassert solution('abcde') == 'YES'\nassert solution('abcd') == 'NO'\nassert solution('abcc') == 'NO'\nassert solution('abb') == 'NO'\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n\") == \"25\\n\"\nassert solution(\"1 1\\n\") == \"-1\\n\"\nassert solution(\"2 2\\n\") == \"25\\n\"\nassert solution(\"1 1\\n\") == \"-1\\n\"\nassert solution(\"1 5\\n\") == \"10\\n\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2') == 25\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '2 2'\n) == '25'\n\nassert solution(\n    '2 3'\n) == '5'\n\nassert solution(\n    '4 7'\n) == '-1'"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"1 1\") == \"-1\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"25\"\n\"\"\"\n\n\"\"\"\nProblem\n\nFind the lowest price before tax that gives the amount of consumption tax to be A yen and B yen, respectively.\n\nConstraints\n\n1 \u2264 A \u2264 B \u2264 100\n\nInput\n\nA B\n\nOutput\n\nThe lowest price before tax that gives the amount of consumption tax to be A yen and B yen, respectively.\n\nSample Input\n\n2 2\n\nSample Output\n\n25\n\"\"\""
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"./input.txt\") == \"26\"\n\"\"\"\n\nimport sys\n\nimport math\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"25\"\n\n---\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n\") == \"25\"\nassert solution(\"1 1\\n\") == \"-1\"\nassert solution(\"1 10\\n\") == \"10\"\nassert solution(\"10 10\\n\") == \"10\"\nassert solution(\"100 100\\n\") == \"100\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n\") == '25'\nassert solution(\"1 10\\n\") == '-1'\nassert solution(\"4 10\\n\") == '5'\nassert solution(\"2 8\\n\") == '6'\nassert solution(\"1 1\\n\") == '1'\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"25\"\n\"\"\""
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2') == 'YES\\n1 2'\nassert solution('4 1') == 'YES\\n1'\nassert solution('8 3') == 'NO'\nassert solution('10 3') == 'NO'\nassert solution('6 4') == 'YES\\n3 2 1'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('26 6') == 'YES'\nassert solution('8 3') == 'NO'\nassert solution('1 1') == 'YES'\nassert solution('9 4') == 'NO'\n\nprint(solution('26 6'))\nprint(solution('8 3'))\nprint(solution('1 1'))\nprint(solution('9 4'))\n\"\"\"\n\nn, k = [int(i) for i in input().split()]\n\nnum = [0] * k\nl = 0\n\nfor i in range(k):\n    num[i] = int(input())\n\nfor i in range(1, k):\n    if num[i - 1] >= num[i] <= 2 * num[i - 1]:\n        l += 1"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"26 6\") == \"YES\\n1 2 4 5 6 8\"\nassert solution(\"8 3\") == \"NO\\n\"\nassert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"9 4\") == \"NO\\n\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 6\") == \"NO\"\nassert solution(\"8 3\") == \"YES\\n1 2 4 5 6 8\"\nassert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"9 4\") == \"NO\"\nassert solution(\"1 1\") == \"YES\\n1\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"26 6\\n1 2 4 5 6 8\\n\") == \"YES\\n1 2 4 5 6 8\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"26 6\") == \"YES\\n1 2 4 5 6 8\"\nassert solution(\"8 3\") == \"NO\\n\"\nassert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"9 4\") == \"NO\\n\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n2 2\\n3 3\\n4 4\\n5 5') == 'YES\\n1 1 2 3 3 4\\n'\nassert solution('1 2\\n2 1\\n2 3\\n3 1\\n3 2\\n3 3\\n4 4\\n5 5') == 'YES\\n1 1 2 3 2 3 3\\n'\nassert solution('1 2\\n2 1\\n2 3\\n3 1\\n3 2\\n3 3\\n4 4\\n5 5') == 'YES\\n1 1 2 3 2 3\\n'\nassert solution('1 2\\n2 1\\n2 3\\n3 1\\n3 2\\n3 3\\n4 4\\n5 5') == 'YES\\n1 1 2 3 2 3\\n'\nassert solution('1 2\\n2 1\\n2 3\\n3 1\\n3 2\\n3 3\\n4 4\\n5 5') == 'YES\\n1 1 2 3 2 3\\n'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('26 6') == 'YES\\n1 2 4 5 6 8'\n\n-----Explanation-----\n\nThe array [1, 2, 4, 5, 6, 8] satisfies all the conditions of the problem, so this is the answer.\n\n\"\"\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 6\") == \"YES\"\nassert solution(\"8 6\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''8 9\n1 2 3 4 5 6 7 8''') == '''YES\n1 2 4 5 6 7 8 \n'''\n\nassert solution('''7 7\n1 2 3 4 5 6 7''') == '''NO\n'''\n\nassert solution('''10 10\n1 2 3 4 5 6 7 8 9 10''') == '''YES\n1 2 3 4 5 6 7 8 9 10 \n'''\n\nassert solution('''3 2\n1 2 3''') == '''NO\n'''\n\nassert solution('''9 9\n1 2 3 4 5 6 7 8 9''') == '''YES\n1 2 3 4 5 6 7 8 9 \n'''"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == '3'\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == '3'\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == '5'\n\nassert solution('3 4\\n1 -1\\n4 3') == '0'\nassert solution('3 4\\n1 -1\\n4 3\\n1 3') == '1'\nassert solution('3 4\\n4 6\\n10 -2\\n8 -1\\n1 -1\\n4 3\\n1 3') == '3'\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\n\n\"\"\"\n\nn, r = map(int, input().split())\n\narr = []\nfor _ in range(n):\n    a, b = map(int, input().split())\n    arr.append((a, b))\n\ndp = [0 for _ in range(r + 1)]\ndp[0] = 1\n\nfor a, b in arr:\n    for i in range(r + 1):\n        if dp[i] == 0:\n            continue\n        if i + a <= r:\n            dp[i + a] = max(dp[i + a], dp[i] + 1)\n        if i + b <= r:\n            dp[i + b] = max(dp[i + b], dp[i])\n\nprint(max(dp))\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == '3'\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == 3\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(sol(input()))"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\""
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('1 2\\n3 4') == 3"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\nprint(solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\"))"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\n\"\"\""
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\\n\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\\n\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\\n\") == \"YES\\n1 3 1\\n3 1 3\\n1 3 1\\n\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\\n\") == \"NO\\n\"\n\n\"\"\"\nfrom __future__ import annotations\n\nfrom collections import defaultdict\nfrom dataclasses import dataclass, field\nfrom itertools import permutations\nfrom typing import Iterator, NamedTuple, Sequence\n\n\n@dataclass\nclass Matrix:\n    n: int\n    data: tuple[int,...]\n\n    @property\n    def rows(self) -> Iterator[Sequence[int]]:\n        return iter(self.data)\n\n    @property\n    def cols(self) -> Iterator[Sequence[int]]:\n        return iter(tuple(row) for row in self.data)\n\n    def transpose(self) -> Matrix:\n        return Matrix(self.n, tuple(zip(*self.data)))\n\n    def reverse(self) -> Matrix:\n        return Matrix(self.n, tuple(reversed(self.data)))\n\n    def transposed(self) -> Matrix:\n        return Matrix(self.n, tuple(zip(*self.data)))\n\n    def reversed(self) -> Matrix:\n        return Matrix(self.n, tuple(reversed(self.data)))\n\n    def __repr__(self) -> str:\n        return f\"{self.data}\"\n\n\n@dataclass\nclass Solution:\n    n: int\n    matrix: Matrix\n\n    def has_pair(self) -> bool:\n        # Transpose matrix and check if matrix[i][j] is the same as matrix[j][i].\n        transposed = self.matrix.transpose()\n        return all(self.matrix.data[i][j] == transposed.data[j][i] for i, j in permutations(range(self.n), 2))\n\n    def has_palindrome(self) -> bool:\n        # Transpose matrix and check if reversed matrix is palindrome.\n        reversed_matrix = self.matrix.reversed()\n        return self.matrix.has_pair() and reversed_matrix.has_pair()\n\n    def is_palindrome(self) -> bool:\n        # Check if each number is the same in each row and each column.\n        return all(self.matrix.data[i][j] == self.matrix.data[j][i] for i, j in permutations(range(self.n), 2))\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\n    \"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\n    \"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\n\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\n\n\n'''"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'NO'\nassert solution('1') == 'YES'\nassert solution('1 1 1 1 1 3 3 3 3') == 'YES'\nassert solution('1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'YES'\nassert solution('1 1 1 1 1 3 3 3 3') == 'YES'\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'NO'\nassert solution('1\\n10') == 'YES\\n10'\nassert solution('6\\n7 2 9 1 8 7 3 2 9 3 9 5 3') == 'NO'\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"4\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3\") == \"YES\\n1 3 1\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\nassert solution(\"4\\n2 3 4 1 2\") == \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\n\n\n-----SOLUTION-----\nn = int(input())"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"\nassert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 'YES'\nassert solution('3 5\\n4 -5\\n4 -2\\n1 3\\n') == 'YES'\nassert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n') == 'YES'\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"YES\"\n\"\"\"\n\n\n\"\"\"\nThis problem is the same as the solution to the problem Minimum Swaps to Make the Array Increasing. We can use the same approach, but the idea is to keep track of the \"quality\" of the array to start with.\n\"\"\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\nassert solution(\"4 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n\n-----Test2-----\n\nInput\n4 4\n5 2\n5 -3\n2 1\n4 -2\n\nOutput\nYES\n\nInput\n4 4\n5 2\n5 -3\n2 1\n4 -2\n\nOutput\nYES\n\nInput\n3 5\n5 2\n5 -3\n2 1\n4 -2\n\nOutput\nNO\n\n-----Test3-----\n\nInput\n1 5\n5 2\n5 -3\n2 1\n4 -2\n\nOutput\nYES\n\n-----Test4-----\n\nInput\n3 10\n10 0\n10 -10\n30 0\n\nOutput\nNO\n\n-----Test5-----\n\nInput\n3 10\n10 0\n10 -10\n30 0\n\nOutput\nNO\n\n-----Test6-----\n\nInput\n1 4\n4 1\n4 -1\n\nOutput\nYES\n\n\"\"\""
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\") == \"NO\"\n\n\"\"\"\n\nimport sys\n\n\nclass Vertex:\n    def __init__(self, key):\n        self.id = key\n        self.connectedTo = {}\n        self.color = 'white'\n        self.dist = sys.maxsize\n        self.pred = None\n        self.disc = 0\n        self.fin = 0\n\n    def addNeighbor(self, nbr, weight=0):\n        self.connectedTo[nbr] = weight\n\n    def setColor(self, color):\n        self.color = color\n\n    def setDistance(self, d):\n        self.dist = d\n\n    def setPred(self, p):\n        self.pred = p\n\n    def setDiscovery(self, dtime):\n        self.disc = dtime\n\n    def setFinish(self, ftime):\n        self.fin = ftime\n\n    def getFinish(self):\n        return self.fin\n\n    def getDiscovery(self):\n        return self.disc\n\n    def getPred(self):\n        return self.pred\n\n    def getDistance(self):\n        return self.dist\n\n    def getColor(self):\n        return self.color\n\n    def getConnections(self):\n        return self.connectedTo.keys()\n\n    def getWeight(self, nbr):\n        return self.connectedTo[nbr]\n\n    def __str__(self):\n        return str(self.id) + \":color \" + self.color + \":disc \" + str(self.disc) + \":fin \" + str(self.fin) + \":dist \" + str(self.dist) + \":pred \\n\\t[\" + str(self.pred) + \"]\\n\"\n\n\nclass Graph:\n    def __init__(self):\n        self.vertList = {}\n        self.numVertices = 0\n\n    def addVertex(self, key):\n        self.numVertices = self.numVertices + 1\n        newVertex = Vertex(key)\n        self.vertList[key] = newVertex\n        return newVertex\n\n    def getVertex(self, n):\n        if n in self.vertList:\n            return self.vertList[n]\n        else:\n            return None\n\n    def __contains__(self, n):\n        return n in self.vertList\n\n    def addEdge(self, f, t, cost=0):\n        if f not in self.vertList:\n            nv = self.addVertex(f)\n        if t not in self.vertList:\n            nv = self.addVertex(t)\n        self.vertList[f].addNeighbor(self.vertList[t], cost)\n\n    def getVertices(self):\n        return self.vertList.keys()\n\n    def __iter__(self):\n        return iter(self.vertList.values())\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 4\n5 2\n5 -3\n2 1\n4 -2''') == 'YES'\nassert solution('''3 10\n10 0\n10 -10\n30 0''') == 'NO'\nassert solution('''3 4\n4 6\n10 -2\n8 -1''') == 'YES'\nassert solution('''4 4\n5 2\n5 -3\n2 1\n4 -2''') == 'YES'"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"3 10\"\n) == \"YES\"\nassert solution(\n    \"3 4\"\n) == \"YES\"\nassert solution(\n    \"4 -5\"\n) == \"YES\"\nassert solution(\n    \"4 -2\"\n) == \"YES\"\nassert solution(\n    \"1 3\"\n) == \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(7) + '\\n' + str(3) + '\\n' + str([1, 2, 1])) == 'YES\\n0 1 0 2 2 0 3 '\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0\"\n\nprint(\"It is all good. Let's check it now\")\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\""
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\n\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\n\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n\nassert solution(\"100 1 5\\n1\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n\nassert solution(\"100 1 100\\n1\") == \"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 3 2\\n1 2 1') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('10 1 11\\n1') == 'YES\\n0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5\\n2') == 'YES\\n0 0 0 0 1 1 0 0 0 0'\nassert solution('100 3 19\\n18 21 6 8') == 'NO'\nassert solution('100 1 100\\n2') == 'YES\\n0 0 0 0 1 1 0 0 0 0'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7 3 2\n1 2 1''') == 'YES\\n0 1 0 2 2 0 3 '\nassert solution('''10 1 11\n1''') == 'YES\\n0 0 0 0 0 0 0 0 0 1 '\nassert solution('''10 1 5\n2''') == 'YES\\n0 0 0 0 1 1 0 0 0 0 '\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 3 2\\n1 2 1') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('10 1 11\\n1') == 'YES\\n0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5\\n2') == 'YES\\n0 0 0 0 1 1 0 0 0 0'\nassert solution('7 3 2\\n1 2 1\\n3') == 'NO'\nassert solution('10 1 11\\n1\\n3') == 'NO'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 1 11') == 'YES\\n0 0 0 0 0 0 0 0 0 1')\nassert solution('10 1 5') == 'YES\\n0 0 0 0 1 1 0 0 0 0')"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0\""
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('test') == 'tst'\nassert solution('asdfasdf') == 'asd'\n\"\"\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abbabab') == 3\nassert solution('bb') == 1\nassert solution('abcdef') == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('bbaba') == 3\nassert solution('baaba') == 2\nassert solution('abcde') == 0\nassert solution('asdfasdf') == 3\nassert solution('aaaaa') == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"test\") == \"3\"\nassert solution(\"tst\") == \"3\"\nassert solution(\"tt\") == \"2\"\nassert solution(\"et\") == \"3\"\nassert solution(\"\") == \"0\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcdefg\", \"fghij\") == 3\nassert solution(\"abcdefg\", \"fghijklmnopqrst\") == 0\nassert solution(\"abcdefg\", \"fghij\") == 3\nassert solution(\"abcdefg\", \"fghijklmnopqrstuvwxyz\") == 0\nassert solution(\"abcdebf\", \"dbgfe\") == 1\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abcde') == '3', f'Expected 3 but got {solution(\"abcde\")}'\nassert solution('asdfasdf') == '3', f'Expected 3 but got {solution(\"asdfasdf\")}'\nassert solution('aa') == '0', f'Expected 0 but got {solution(\"aa\")}'\nassert solution('bb') == '0', f'Expected 0 but got {solution(\"bb\")}'\nassert solution('a') == '0', f'Expected 0 but got {solution(\"a\")}'\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"test\") == \"t\"\nassert solution(\"tst\") == \"tt\"\nassert solution(\"tt\") == \"\"\nassert solution(\"et\") == \"e\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('ab') == ''\nassert solution('abcd') == ''\nassert solution('abc') == ''\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('bbaba') == 3\nassert solution('bb') == 1\nassert solution('a') == 0\nassert solution('sadfasdf') == 3\nassert solution('asdfasdf') == 3\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 2\nassert solution(\"baaba\") == 2\nassert solution(\"abcde\") == 0\n\"\"\"\n\nimport collections\n\n\nclass Solutions:\n    def solution(self, s1: str, s2: str) -> int:\n        i, j = 0, 0\n        while i < len(s1) and j < len(s2):\n            if s1[i] == s2[j]:\n                i += 1\n            j += 1\n        return len(s1) - i\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(2.572479)) == \"10 3\"\nassert solution(str(4.024922)) == \"9 9\"\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\""
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2.572479') == '10 3'\nassert solution('1.200000') == '3 2'\nassert solution('4.024922') == '9 9'\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\n\nprint(solution(stdin.strip()))\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4.024922\") == '9 9'\n\n\n-----Problem-----\n\nThe function accepts a string, which is the number in base 10, and converts it to the base which is equal to 10. Your function should return the base, as well as the number in the new base.\n\n---Constraints---\n\nThe number is given in the string format.\nThe number is between 0.000001 and 5.0, inclusive.\nThe base is between 2 and 36, inclusive.\nIt is guaranteed that the string is valid for the specified base.\nIt is guaranteed that the number is a valid base 10 number.\nThe number is a valid base 10 number.\nIt is guaranteed that the string will be valid after you convert it.\nYou can assume that all letters in the string are in lower case.\nYou can assume that all spaces in the string are the same.\n\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4.024922') == '9 9'\nassert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''6 3 3''') == 'YES\nassert solution('''6 2 3''') == 'NO\nassert solution('''10 4 3''') == 'YES\nassert solution('''8 5 3''') == 'YES\n'''"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3 3\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3 3\\n\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\\n\"\n\nassert solution(\"10 4 3\\n\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\\n\"\n\nassert solution(\"8 5 3\\n\") == \"YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7\\n\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3 3\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\"\n\nassert solution(\"6 2 3\") == \"NO\"\n\nassert solution(\"10 4 3\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\n\n\"\"\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 3 3\\n') == 'YES'\nassert solution('10 4 3\\n') == 'YES'\nassert solution('8 5 3\\n') == 'YES'\nassert solution('6 2 3\\n') == 'NO'\nassert solution('8 4 3\\n') == 'NO'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''6 3 3''') == 'YES'\nassert solution('''6 2 3''') == 'NO'\nassert solution('''10 4 3''') == 'YES'\nassert solution('''8 5 3''') == 'YES'\nassert solution('''8 5 4''') == 'NO'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 3\\n\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\\n\"\nassert solution(\"6 2 3\\n\") == \"NO\\n\"\nassert solution(\"10 4 3\\n\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\\n\"\nassert solution(\"8 5 3\\n\") == \"YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7\\n\"\nassert solution(\"8 10 3\\n\") == \"NO\\n\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\""
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 2\") == \"1100\"\nassert solution(\"2 2 2\") == \"101100\"\nassert solution(\"2 1 1\") == \"110010\"\nassert solution(\"1 3 1\") == \"111010\"\nassert solution(\"1 2 1\") == \"111010\""
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 1\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\"\nassert solution(\"2 2 1\") == \"1100\"\nassert solution(\"1 1 1\") == \"11\"\nassert solution(\"1 100 100\") == \"101101\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11101\") == \"01010\"\nassert solution(\"101110\") == \"01010\"\nassert solution(\"1110111\") == \"101101\"\nassert solution(\"1111111111111111111111111111111111\") == \"1110111111111111111111111111111110\"\nassert solution
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"01010\") == \"1100\"\nassert solution(\"111001\") == \"110100\"\nassert solution(\"11010\") == \"101100\"\n\n\"\"\""
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11101110\") == \"1100110011001100110011110\"\nassert solution(\"01110\") == \"111011100110011001100110011001100110011001100110011001100110011001100110011001100111010\"\nassert solution(\"0111\") == \"1110111001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001110\"\nassert solution
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1\") == \"1100\"\nassert solution(\"2 3 1\") == \"101100\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11 1 0') == '1101'\nassert solution('11 2 0') == '1110'\nassert solution('11 3 0') == '1111'\nassert solution('11 4 0') == '11110'\nassert solution('11 5 0') == '11111'\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '101100'\nassert solution('3 2 1') == '111010'\nassert solution('5 3 6') == '01010100'\n\n\"\"\""
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"102030\") == \"101010\"\n\"\"\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_data) == test_solution\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"bb\"\n\"\"\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ab') == 'ac'\nassert solution('ca') == 'bb'\nassert solution('bb') == 'cc'\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"bb\"\nassert solution(\"bb\") == \"bc\"\n\"\"\"\n\n\"\"\"\nn = int(input())\ns, t = input(), input()"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"cb\"\nassert solution(\"bb\") == \"bc\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bc\") == \"cb\"\nassert solution(\"ca\") == \"cab\"\nassert solution(\"cc\") == \"ccc\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ab\") == \"cac\"\nassert solution(\"ca\") == \"cbac\"\nassert solution(\"bb\") == \"cbacbc\"\nassert solution(\"bc\") == \"cbac\"\nassert solution(\"cb\") == \"cbac\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ab\") == \"acb\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ab\") == \"acb\"\nassert solution(\"ca\") == \"cab\"\nassert solution(\"bb\") == \"cba\"\n\nassert solution(\"ab\") == \"cba\"\nassert solution(\"ca\") == \"cab\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aa\") == \"cacbacbab\"\n\"\"\"\n\nn = int(input())\ns = input()\nt = input()\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ab') == 'ac'\nassert solution('ca') == 'bb'\nassert solution('bb') == 'ca'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"5 1 2 4\") == \"5 1 4 2\"\nassert solution(\"4 1 2 3\") == \"4 1 3 2\"\n\nprint(\"Success\")\n\n-----\n\n\u041f\u043e\u043b\u0438\u043a\u0430\u0440\u043f \u0441\u043e\u0437\u0434\u0430\u043b \u0441\u0432\u043e\u0439 \u0448\u0438\u0444\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u043b\u0438\u0433\u0430\u0440\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0437\u0430\u043c\u0435\u043d\u044b. \u041f\u043e\u043b\u0438\u043a\u0430\u0440\u043f \u0437\u0430\u043f\u0438\u0441\u0430\u043b \u0432 \u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0441\u0432\u043e\u044e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0430\u043b\u0438 \u043d\u0430 \u0432\u0445\u043e\u0434\u0435. \u0412 \u043e\u0431\u0449\u0435\u043c \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u043f\u043e\u043b\u0438\u0433\u0430\u0440\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u043c\u0435\u043d\u0430, \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043d\u0430\u0437\u043e\u0432\u0435\u043c \u044d\u0442\u043e \u043f\u043e\u043b\u0438\u0433\u0430\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0437\u0430\u043c\u0435\u043d\u043e\u0439. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043c\u0435\u0442\u043e\u0434 \u043f\u043e\u043b\u0438\u0433\u0430\u0440\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0437\u0430\u043c\u0435\u043d\u044b \u0434\u043b\u044f \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u043f\u0440\u0438\u043a\u043e\u043b\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0441\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f, \u043e\u043d \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n\u041f\u043e\u043b\u0438\u043a\u0430\u0440\u043f \u0437\u0430\u043f\u0438\u0441\u0430\u043b \u0432 \u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0430\u043b\u0438 \u043d\u0430 \u0432\u0445\u043e\u0434\u0435. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 -1 \u0434\u043e $n-1$ (\u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e). \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0431\u0443\u0434\u0435\u043c \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043e\u043a, \u0433\u0434\u0435 \u043a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u2014 \u044d\u0442\u043e \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0430\u044f \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u0415\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432 \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u0438\u043d\u0434\u0435\u043a\u0441 \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445, \u0442\u043e \u043e\u043d\u0430 \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u043f\u043e\u043b\u0438\u0433\u0430\u0440\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0437\u0430\u043c\u0435\u043d\u044b. \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043f\u043e\u043b\u0438\u0433\u0430\u0440\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0437\u0430\u043c\u0435\u043d\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043e\u0441\u0442\u0430\u0442\u044c\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0438\u0437 \u043d\u043e\u043b\u0435\u0439 \u0438 \u0435\u0434\u0438\u043d\u0438\u0446. \u041f\u043e\u043b\u0438\u043a\u0430\u0440\u043f \u0437\u0430\u043f\u0438\u0441\u0430\u043b \u043f\u043e\u043b\u0438\u0433\u0430\u0440\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0437\u0430\u043c\u0435\u043d\u0443 \u0432 \u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0441\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043d\u0430\u0439\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0443, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0443\u044e \u0438\u0437 $n-1$ \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043f\u043e\u043b\u0438\u0433\u0430\u0440\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0437\u0430\u043c\u0435\u043d\u043e\u0439, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0438 \u0441\u0438\u043c\u0432\u043e\u043b \u0437\u0430\u043c\u0435\u043d\u044b. \u0415\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0435 \u043f\u043e\u043b\u0438\u0433\u0430\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0437\u0430\u043c\u0435\u043d\u0430, \u0442\u043e \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 \u2014 \u0447\u0438\u0441\u043b\u043e $-1$, \u0430 \u0437\u0430\u0442\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0442 \u0434\u043b\u044f \u043f\u043e\u043b\u0438\u0433\u0430\u0440\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0437\u0430\u043c\u0435\u043d\u044b.\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e $n$, \u043e\u0431\u043e\u0437\u043d\u0430\ufffd"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"5 1 4 -2\") == \"5 1 4 2 3\"\nassert solution(\"4 1 -1\") == \"4 1\"\nassert solution(\"1 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"1 1 1\") == \"1 2 3 4\"\n\"\"\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"5 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"4 1 2\") == \"-1\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n-1 2 2\") == \"1 2 3 4 5\"\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"\n\"\"\""
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 1 2') == '3 1 2'\nassert solution('5\\n1 1 1 1') == '1 2 3 4 5'\nassert solution('5\\n1 1 1 1') == '1 2 3 4 5'\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n-2 1\") == \"3 1 2\"\n\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"\n\nassert solution(\"4\\n-1 2 2\") == \"-1\"\nassert solution(\"5\\n-1 2 2\") == \"2 1 3 4 5\"\nassert solution(\"6\\n-1 2 2\") == \"2 1 3 4 5 6\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n4 3 2 1 6 5\") == \"5 1 2 3 4 6\"\nassert solution(\"4\\n1 1 1 1\") == \"1 2 3 4\"\nassert solution(\"3\\n-1 2\") == \"1 2\"\nassert solution(\"6\\n4 3 2 1 6 5\") == \"5 1 2 3 4 6\"\nassert solution(\"3\\n-1 2\") == \"1 2\""
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n\"\"\""
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"5 1 2\") == \"5 1 2\"\nassert solution(\"4 1 2\") == \"4 2 1\"\n\"\"\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\n\nassert solution(\"5 1 2\") == \"5 1 2\"\n\nassert solution(\"5 1 1 1\") == \"1 2 3 4 5\"\n\nassert solution(\"5 1 -1\") == \"1 2 3 4 5\"\nassert solution(\"5 1 -2\") == \"1 3 4 5\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\nassert solution('9\\n9 9 9 9 9 9 9 9 9 9') == '0'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\nassert solution('4\\n1 2 3 4') == '1'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 4 1 2\") == \"0\"\nassert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\""
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 2 2 3 3\") == \"2\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"5\\n2 2 2 3 3\") == \"2\"\n\"\"\"\n\nn = int(stdin.readline().strip())\ncoordinate = list(map(int, stdin.readline().strip().split(' ')))\n\ncoordinate.sort()"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3\\n') == '1'\nassert solution('5\\n2 2 2 3 3\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"5\"\nassert solution(\"5\") == \"0\"\n\n'''"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''10''') == '''5'''\nassert solution('''100''') == '''25'''\n\n-----\n'''\n\nfor line in stdin.split('\\n'):\n    if line!= '':\n        n = line\n\nprint(len(n) // 2)\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(10) == 5\nassert solution(20) == 8\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"5\"\nprint(solution(\"10\"))\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\") == \"5\"\nassert solution(\"100\") == \"10\"\nassert solution(\"10000\") == \"50\"\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n\nimport math\n\nN = int(input())\n\nmin_moves = int(math.log2(N))\nprint(min_moves)\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == '5'\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10') == '5'\nassert solution('1') == '0'\nassert solution('2') == '0'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"5\"\nassert solution(\"5\") == \"5\"\nassert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == '5'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"15\\n5 5 5\\n5 5 5\") == \"0 15\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n\n\"\"\""
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1'\nassert solution('15\\n5 5 5\\n5 5 5') == '0 15'\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334'\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 0 0\") == \"0 1\"\nassert solution(\"5 5 5\") == \"0 15\"\nassert solution(\"0 1 1\") == \"0 1\"\nassert solution(\"1 1 0\") == \"1 1\"\nassert solution(\"3 3 3\") == \"0 15\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1\") == \"0 1\"\nassert solution(\"1 1 0\") == \"1 1\"\nassert solution(\"3 5 6\") == \"0 0\"\nassert solution(\"1 0 1 0\") == \"0 1\"\nassert solution(\"1 0 1 0 1 0 0 1 1 0 1 1 0 0 1 1 0 1 1 0 0 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 0 0') == '3 3'\nassert solution('2 1 1') == '0 1'\nassert solution('1 1 1') == '1 2'\nassert solution('4 4 6') == '0 6'\nassert solution('1 1 1') == '1 2'\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1'\nassert solution('15\\n5 5 5\\n5 5 5') == '0 15'\nassert solution('3\\n0 0 3\\n3 0 0') == '3 3'\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334'\n\"\"\""
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"0 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n\"\"\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 0 1 1\") == \"0 1\"\nassert solution(\"1 1 0\") == \"0 1\"\nassert solution(\"3 0 0\") == \"3 3\"\nassert solution(\"0 0 3\") == \"0 1\"\nassert solution(\"1 1 0\") == \"0 1\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 0 0') == '0 1'\nassert solution('0 1 1') == '0 1'\nassert solution('3 2 3') == '1 2'\nassert solution('5 5 5') == '0 15'\nassert solution('5 5 5') == '0 15'\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"1\\n1 0 1\\n1 1 0\") == \"0 1\"\nassert solution(\"15\\n5 5 5\\n5 5 5\") == \"0 15\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"3 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n\n\"\"\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3\\n') == '3\\n7 7\\n2 3\\n4 5\\n'\n\"\"\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 2 2 1 5 3\\n') == '3\\n7 7\\n2 3\\n4 5'\n\nsolution(stdin)"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\\n4 5\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\\n2 2\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\\n1 1\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\\n2 2\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10000)"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\\n\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\\n\") == \"2\\n3 4\\n1 1\\n2 2\\n\"\nassert solution(\"4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\\n\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\nassert solution('4\\n1 1 1 1') == '4'\n\"\"\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\"\nassert solution(\"4\\n1 1\") == \"1\\n1 1\"\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\nA = list(map(int, sys.stdin.readline().strip().split()))\n\nA.sort()\n\nresult = {}\n\nfor i in range(N - 1, -1, -1):\n    for j in range(i - 1, -1, -1):\n        if A[i] + A[j] not in result:\n            result[A[i] + A[j]] = [(i, j)]\n        else:\n            result[A[i] + A[j]].append((i, j))\n\n    if A[i] in result:\n        for j in result[A[i]]:\n            if i in j:\n                result[A[i]].append((i, j[0]))\n                result[A[i]].append((i, j[1]))\n\nfor i in sorted(list(result.keys())):\n    for j in result[i]:\n        if i == j[0] + j[1] and j[0] < j[1]:\n            print(j[0] + 1, j[1] + 1)\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"7 4 1 2 2 1 5 3\") == \"3\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\\n\") == \"2\\n3 4\\n1 1\\n2 2\"\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 1 2 2 1 5 3\\n\") == \"3\\n7 7\\n2 3\\n4 5\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\\n\") == \"2\\n3 4\\n1 1\\n2 2\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\\n4 5\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 2') == 'NO'\nassert solution('3 1 1') == 'YES'\n\nassert solution('3 1 2') == 'NO'\nassert solution('3 1 1') == 'YES'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 3 1 2\") == \"NO\"\nassert solution(\"3 3 3 1 2\") == \"YES\"\n\nprint(solution(input()))\n\n---\n\nclass Stack:\n    def __init__(self, size):\n        self.size = size\n        self.items = [None for _ in range(size)]\n        self.len = 0\n    \n    def is_empty(self):\n        return self.len == 0\n    \n    def is_full(self):\n        return self.len == self.size\n    \n    def peek(self):\n        return self.items[self.len - 1]\n    \n    def push(self, item):\n        if not self.is_full():\n            self.items[self.len] = item\n            self.len += 1\n    \n    def pop(self):\n        if not self.is_empty():\n            self.len -= 1\n            return self.items[self.len]\n    \n    def __str__(self):\n        return str(self.items)"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 2 2\") == \"YES\"\n\nfrom collections import deque\nfrom collections import namedtuple\nimport numpy as np\n\nclass Node(namedtuple('Node', ['left', 'right', 'value'])):\n    def __init__(self, left=None, right=None, value=0):\n        self.left = left\n        self.right = right\n        self.value = value"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"1 2 3\") == \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 2\") == \"YES\"\nassert solution(\"4 3 2\") == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 3 1 2\") == \"YES\"\nprint(solution(input()))"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 2 3') == 'YES'\nassert solution('3 1 2') == 'NO'\nassert solution('5 3 2 1') == 'YES'\nassert solution('3 1 2 4') == 'NO'\nassert solution('3 1 2 3') == 'YES'\n\n\"\"\"\n\n\n\nimport sys\n\nn = int(sys.stdin.readline())\nl = list(map(int, sys.stdin.readline().split()))\nst = []\n\nfor i in l:\n    while st and st[-1][0] > i:\n        st.pop()\n    if st and st[-1][0] == i:\n        st[-1][1] += 1\n    else:\n        st.append([i, 1])\n\nprint('YES' if not st else 'NO')\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 3 1 2\") == \"NO\"\nassert solution(\"3 3 3 2 2\") == \"YES\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\narr = [int(x) for x in sys.stdin.readline().split()]\n\nstack = []\n\nfor i in arr:\n    while stack and i > stack[-1]:\n        stack.pop()\n    if not stack:\n        stack.append(i)\n    else:\n        stack.append(i)"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\nassert solution(\"abcd\") == \"accd\"\nassert solution(\"abdc\") == \"accd\"\n\n\"\"\"\n\n\"\"\"\n--------------------\n\"\"\""
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\nassert solution(\"abcd\") == \"accd\"\nassert solution(\"accd\") == \"accd\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcdef\", \"abdfec\") == \"4 5 4 5\"\n\"\"\""
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'abc'\nassert solution('abcdef') == 'abdcef'\nassert solution('abdfec') == 'abdcef'\nassert solution('accd') == 'accd'\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abcd\") == \"accd\"\nassert solution(\"acbdef\") == \"accdfe\"\n\n\"\"\"\n\nimport collections\nimport itertools"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\nassert solution(\"abcd\") == -1\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\nassert solution(\"abcd\") == \"accd\"\n\"\"\""
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\nassert solution(\"abdfec\") == \"abdcef\"\n\"\"\""
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\nassert solution(\"accd\") == -1\nassert solution(\"abcd\") == 0\n\"\"\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\nassert solution(\"accd\") == \"-1\"\nassert solution(\"abcd\") == \"0\"\nassert solution(\"abc\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba\") == \"PS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"b\") == \"P\"\nassert solution(\"ab\") == \"SP\"\nassert solution(\"abab\") == \"SP\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ba\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"abab\") == \"PPSS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"aba\") == \"PS\"\n\"\"\""
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abab\") == \"PSPS\"\n\nassert solution(\"a\") == \"PPS\"\n\nassert solution(\"aa\") == \"PS\"\n\nassert solution(\"a\") == \"PS\"\n\nassert solution(\"aaaaa\") == \"SPPSPSPS\""
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ba\") == \"PS\"\nassert solution(\"a\") == \"S\"\nassert solution(\"abab\") == \"PSPSPS\"\nassert solution(\"a\") == \"SPS\"\nassert solution(\"aba\") == \"PSPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ababa\") == \"PSPSPSPS\"\nassert solution(\"aaa\") in {\"SSPP\", \"PSPS\"}\nassert solution(\"ac\") in {\"PS\", \"S\"}\nassert solution(\"a\") == \"PS\"\n\n\"\"\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aba\") == \"S\"\nassert solution(\"abab\") == \"SPS\"\nassert solution(\"aaaa\") == \"SPS\"\n\nassert solution(\"a\") == \"P\"\nassert solution(\"ac\") == \"PS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aba\") == \"SP\"\nassert solution(\"abc\") == \"PS\"\nassert solution(\"abab\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"a\") == \"PS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\na\\nabab\\na\\naba\\nbaba\\nab\\naba\") == \"PSPSPSPS\"\nassert solution(\"3\\na\\nc\\n\") == \"PPS\"\nassert solution(\"2\\na\\nc\\n\") == \"PS\"\n\nimport re\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ba') == 'SPPSPSPS'\nassert solution('a') == 'PPSS'\nassert solution('abab') == 'PPSS'\nassert solution('a') == 'PPS'\nassert solution('aba') == 'PSPS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a\") == \"PS\"\nassert solution(\"ba\") == \"SPPSPSPS\"\nassert solution(\"abab\") == \"PSPSPSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"aa\") == \"PS\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\nassert solution(\"1 2 4 7 9 10\") == 1\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"2 4 6 8 10\") == \"1\"\nassert solution(\"2 4 6 8 10\") == \"1\"\n\"\"\""
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 4 6 8 10''') == '1'\nassert solution('''2 4 6 8 10''') == '1'\n\n-----Place-holder-----\n\"\"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4 6 8 10') == '1'\n\"\"\"\n\ndata = [int(i) for i in stdin.split()]\n\nprint(int(data[-1]!= sum(data) - data[-1]))\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\""
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4 5') == '1 4'\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(solution(str(input())))\nprint(solution(str(input())))"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 6 8 10') == 1\n\"\"\"\n\na = input().split(' ')\ncount = 0\nfor i in a:\n    if int(i) < 0:\n        count += 1\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\\n\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\\n\") == \"0\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"0\"\nassert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\n\"\"\""
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"0\"\nassert solution(\"5\\n1 1 1 1\") == \"0\"\nassert solution(\"5\\n0 1 0 1\") == \"0\"\nassert solution(\"6\\n0 1 0 1\") == \"0\"\nassert solution(\"6\\n1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 1 0 1 1 0 1 0 1 0') == '2'\nassert solution('5 1 1 0 0 0') == '0'\nassert solution('4 1 1 1') == '0'\n\"\"\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 1 1 1\") == \"0\"\nassert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\nassert solution(\"4\\n0 0 0 1\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 1 1 1') == '0'\nassert solution('5\\n1 1 1 1') == '0'\nassert solution('6\\n1 1 1 1') == '0'\nassert solution('7\\n1 1 1 1') == '0'\nassert solution('8\\n1 1 1 1') == '1'\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 1 1 1\\n\") == \"0\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"0\"\nassert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\\n\") == \"2\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"0\"\nassert solution(\"4\\n0 1 1 1\\n\") == \"0\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 3 4 5\\n') == '2'\n\"\"\"\nfrom typing import List\n\na: List[int] = list(map(int, input().split()))\ncount = 0\nfor i in a:\n    for j in a:\n        if i % j == 0:\n            count += 1\nprint(count)\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n1 2 3 4 5\n''') == '1'\n\nassert solution('''6\n6 90 12 18 30 18\n''') == '4'\n\n\"\"\"\nimport sys\nfrom typing import List, Tuple"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 3 4 5\\n') == '1'\nassert solution('6\\n6 90 12 18 30 18\\n') == '4'\n\"\"\"\n\n\nfrom math import gcd\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a1) == a2"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 4 5') == '2'\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"2\"\nassert solution(\"6\\n6 90 12 18 30 18\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4 5') == '1'\nassert solution('6 90 12 18 30 18') == '4'\n\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 4 5') == '1'\nassert solution('5\\n1 2 3 4 5\\n2') == '2'\nassert solution('5\\n1 2 3 4 5\\n6') == '4'\nassert solution('6\\n6 90 12 18 30 18') == '4'\n\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n5\n1 2 3 4 5\n''') == '1'\n\nassert solution('''\n6\n6 90 12 18 30 18\n''') == '4'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\nassert solution('1\\n2') == '1'\n\nassert solution('2\\n3\\n4') == '2'\n\nassert solution('3\\n3\\n2\\n3\\n4') == '4'\n\nassert solution('4\\n4\\n4\\n4\\n4') == '4'"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"1\\n\"\nassert solution(\"4\\n1 2 3 4\") == \"2\\n\"\nassert solution(\"3\\n1 1 1\") == \"1\\n\"\nassert solution(\"4\\n1 2 3 4\") == \"2\\n\"\nassert solution(\"8\\n1 1 1 1 2 2 3 3\") == \"1\\n\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n1 2 3 3 2 2 1\") == \"1\"\nassert solution(\"4\\n1 2 2 3\") == \"2\"\nassert solution(\"1\\n100\") == \"1\"\nassert solution(\"3\\n1 2 3\") == \"1\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3 4') == '2'\nassert solution('4\\n1 2 3 3') == '1'\nassert solution('4\\n1 2 1 2') == '2'\nassert solution('4\\n1 2 2 1') == '3'\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n100\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2\\n3\\n1') == 2\nassert solution('7\\n1\\n2\\n3\\n4\\n5\\n6\\n7') == 2\nassert solution('1') == 1\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 2 4 3 3 2\") == 2\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 4 3 3 2') == '2'\nassert solution('100') == '1'\nprint('The local tests are done. Try to solve the task on your own!')\n\n-----\nSample Input:\n\n6\n1 2 4 3 3 2\n\nSample Output:\n\n2\n\n-----\nSample Input:\n\n3\n1 2 3\n\nSample Output:\n\n3\n\n-----\nSample Input:\n\n3\n1 2 3\n\nSample Output:\n\n2\n\n------\nSample Input:\n\n5\n1 1 1 1 2\n\nSample Output:\n\n3\n\n\"\"\"\n\nn = int(input())\n\na = list(map(int, input().split()))\n\ns = set(a)\n\nprint(len(s))\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\") == 2\nassert solution(\"4\\n1 1 1 1\") == 1\nassert solution(\"3\\n1 2 3\") == 0\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input) == OUTPUT\n\n----"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 4 3 3 2\") == \"2\"\nassert solution(\"100\") == \"1\"\nassert solution(\"100 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\") == \"1\"\nassert solution(\"20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"3\"\nassert solution(\"20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\") == \"4\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2\") == \"3\"\nassert solution(\"5 3\") == \"2\"\nassert solution(\"5 10\") == \"-1\"\nassert solution(\"10 3\") == \"3\"\nassert solution(\"5 4\") == \"-1\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 3') == '3'\nassert solution('6 2') == '3'\nassert solution('5 10') == '-1'\nassert solution('1 0 0 0 1') == '2'\nassert solution('0 0 1 1 0 1 0 0 0 1') == '2'\n\n\"\"\""
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"1\"\n\nassert solution(\"6 2\") == \"3\"\n\nassert solution(\"5 3\") == \"-1\"\n\nassert solution(\"10 3\") == \"2\"\n\nassert solution(\"6 10\") == \"-1\""
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n0 0 0 1 1\") == \"2\"\nassert solution(\"8 3\\n0 0 0 0 1 1 1 1\") == \"4\"\nassert solution(\"6 10\\n0 0 0 0 0 0 0 0 0 0\") == \"-1\"\n\nprint(\"Success!\")\n\n\"\"\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''6 2\n0 1 1 0 0 1\n''') == 3\n\nassert solution('''5 3\n1 0 0 0 1\n''') == 2\n\nassert solution('''5 10\n0 0 0 0 0\n''') == -1\n\nassert solution('''10 3\n0 0 1 1 0 1 0 0 0 1\n''') == 3\n\n\"\"\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''6 2\n0 1 1 0 0 1\n''') == '3'\n\nassert solution('''5 3\n0 0 0 0 0\n''') == '2'\n\nassert solution('''5 10\n0 0 0 0 0\n''') == '-1'\n\nassert solution('''10 3\n0 0 0 0 0 0 0 0 0 0 1\n''') == '3'\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == \"3\"\nassert solution(\"5 3\\n0 0 0 0 1\") == \"2\"\nassert solution(\"5 10\\n0 0 0 0 0\") == \"-1\"\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"6 2\n0 1 1 0 0 1\n\"\"\") == \"3\"\nassert solution(\"\"\"5 3\n0 0 0 0 1\n\"\"\") == \"2\"\nassert solution(\"\"\"5 10\n0 0 0 0 0\n\"\"\") == \"-1\"\nassert solution(\"\"\"10 3\n0 0 1 1 0 1 0 0 0 1\n\"\"\") == \"3\"\n\"\"\""
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == 3\nassert solution(\"5 3\\n1 0 0 0 1\") == 2\nassert solution(\"5 10\\n0 0 0 0 0\") == -1\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == 3"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 2\\n0 1 1 0 0 1') == '3'\nassert solution('5 3\\n1 0 0 0 1') == '2'\nassert solution('5 10\\n0 0 0 0 0') == '-1'\nassert solution('10 3\\n0 0 1 1 0 1 0 0 0 1') == '3'\nassert solution('10 10\\n0 0 0 0 0 0') == '-1'"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"10\") == \"7\"\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == 3\nassert solution(4) == 1\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('3') == '3'\nassert solution('2') == '1'\nassert solution('1') == ''\nassert solution('3') == '3'\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"3\"\n\"\"\"\n\nimport sys\nfrom typing import Tuple\n\nN = int(sys.stdin.readline())\n\nresult = 0\nfor i in range(1, N + 1):\n    for j in range(1, N + 1):\n        for k in range(1, N + 1):\n            if i * j + k == N:\n                result += 1\n\nprint(result)\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '3'\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '5'\n\"\"\"\n\n\"\"\"\nC++"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3) == 3\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n') == '3'\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"(((())))\") == 2\nassert solution(\n\"()()()\") == 0\nassert solution(\n\"((()))\") == 2\nassert solution(\n\"()(()()(((((()()((((())))(((())))(())))))())()(()())(((()()))((((()()()))(())())()(()((())))(()))(())(()(()(())()(())()(()(())((()(((((())(((()))(((()))))))(()())(((())((((()))()(()()))(())()())(()(())(()(()())((())))((((())))((()))()))(()))(()(((((((((((((((((((((((())((((((((((((((((((((((((((((()))))))))))(()())(((()((()()(())()()(()(()(()()(((((((((()))()()(()(((((((((((((((((((((()))))))))))))))))))))))(((((()()()(())(((()(()((((((()))(())(()(()()(()(()(()((((()))))))))()()(()(()()()(()(()(()(()(()(((((((()))))))(((((()(()(((()()(((((((()(((((((((((((((((((((((((((((((((((((((()))))))))))))))(()(()))((((()(((()(())()()((()()(()(((((((()(((()(())((()()(()()(((((((((((()(()(()(((()(())()()(()((()(()(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('(((())') == 3\nassert solution('()()()') == 0\nassert solution('))((((') == 0\nassert solution(')(') == 1\nassert solution('())(()())') == 5\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('(((())))') == 0\nassert solution('())') == 0\nassert solution('()(()') == 1\nassert solution('(((()') == 2\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"()()\") == 0\nassert solution(\")(\") == 0\nassert solution(\"))(((((\") == 0\nassert solution(\"(((((((((((((((((((((((((((((((((((\") == 0\n\nassert solution(\"(\") == 1\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"(((()))\") == 1\nassert solution(\"((())())\") == 3\nassert solution(\"()()\") == 0\n\n\"\"\"\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"())\") == 0\nassert solution(\"(((\") == 3\n\"\"\"\n\nn = int(stdin.readline())\nlst = [stdin.readline().strip()]\n\nlst_out = []\n\nfor _ in range(n-1):\n    lst.append(stdin.readline().strip())\n\ncount = 0\nfor i in range(len(lst)):\n    if lst[i][0] == '(' and lst[i][-1] == ')':\n        count += 1\n    if lst[i][0] == ')' and lst[i][-1] == '(':\n        count += 1\nprint(count)"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"(((())\") == 3\n\n\"\"\"\n\n\"\"\"\nimport math\nimport sys\nsys.setrecursionlimit(1000000)"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"((((())\") == 3\n\nassert solution(\"()()(())\") == 2\n\nassert solution(\"()(()(()()((()())((()())(())))((()())()))(()(((())))((((())))((()))()(())()(())((((())))((((()())((()))(()((()(()(()(())(((())))(((()()()(()((())((()(()(((()((()()()()((((())((()(()())))((()))())))((()))(())))(((())(((()()()(()())((()()(())))((())(()((())(((())((())(()(())(((((())(()(()()()((()(((()(()(()(((((()(()(()(((((()(()(((((()())((()))(())))((((())))((()((((((((((()(()()(((()(()()()(()((()(((((((()(()(()()(((((((((()((()()(((()(()(()(()()((()(()(((()(())()))(()(()(()(()((()()()(()(()()(()))((()(()(()(()(((()(((()(())())(()(((((((((())((())(()(((((((((()()()()))(())()))(())()(()()(()()(((()())((((((((((((((((((((((((((((((((((()(()()(()(((()(((()(((((((((((((((((((((((((((((((((((((((((((()(()(()(((((()(((((())((((((((((((((((((((((((((((((((((((((((((((((((((((()(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"(((())\") == 3\nassert solution(\"(())((()())()\") == 6\nassert solution(\"())(\") == 0\nassert solution(\"(()())\") == 3\nassert solution(\"(()(()))\") == 5\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"()()\") == 0\nassert solution(\"()(())\") == 1\nassert solution(\"()(())(()())\") == 3\nassert solution(\"((()))\") == 1\n\"\"\""
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"baaba\") == 2\nassert solution(\"abcde\") == 0\n\"\"\"\n\n\n\n\"\"\"\nlongest_subsequence.py\n-----------------\nGiven two strings, find the longest subsequence present in both of them.\nA longest common subsequence is a subsequence which is common to all the\nstrings of input.\nExample: longest_common_subsequence(\"ABCDGH\", \"AEDFHR\")\nshould return \"ADH\"\nExplanation: ADH is a longest common subsequence of \"ABCDGH\" and \"AEDFHR\".\nAnother example: longest_common_subsequence(\"programming\", \"gaming\")\nshould return \"\".\nNote: The sequence of characters may have repeating characters.\nTIP: This problem follows the Longest Common Subsequence (LCS) pattern.\n\nSolution:\n    A Dynamic Programming based solution\n\nComplexity:\n    Time: O(M*N)\n    Space: O(M*N)\n\"\"\"\n\n\n\n\"\"\"\nlongest_subsequence_sol.py\n-----------------\nGiven a dictionary of words and a query string,\nreturn the longest possible substring of query which\nis present in dictionary.\nExample:\nInput: dictionary = [\u201ccat\u201d, \u201cbat\u201d, \u201chat\u201d, \u201ctree\u201d, \u201cdigest\u201d, \u201cmenu\u201d]\nquery = \u201ccat\u201d\nOutput: cat\nExplanation:\nThe longest substrings present in dictionary\nare {\u201ccat\u201d, \u201cat\u201d, \u201ca\u201d, \u201ct\u201d}, so the answer is \u201ccat\u201d.\n\nSolution:\n    We will use a sliding window to process the\n    string in a dynamic programming manner.\n    We will create a 2D array of size len(query)\n    and len(dictionary) and initialize it as 0.\n    We will start with a left and right pointer\n    for our sliding window. We will iterate through\n    the query and dictionary strings from right to\n    left and keep updating the value of array[i][j]\n    in a way that it stores the length of the maximum\n    subsequence present in the query string from i\n    to j.\n    If the element of query string is not present\n    in dictionary string, we will do not increment\n    the value of the array element.\n    If the element of query string is present\n    in dictionary string, we will increment the\n    value of the array element.\n    We will start the left pointer from index 0\n    and the right pointer from index 0.\n    We will move the left pointer to the right by\n    one position at a time and the right pointer\n    to the left by one position at a time and keep\n    checking for the condition mentioned above.\n    We will return the string which has the maximum\n    length sub sequence when the right pointer reaches\n    the end of the dictionary string and the left\n    pointer reaches the end of the query string.\n\nComplexity:\n    Time: O(m*n)\n    Space: O(m*n)\n\"\"\"\n\n\n\n\"\"\"\nlongest_subsequence_sol_v2.py\n-----------------\nGiven a dictionary of words and a query string,\nreturn the longest possible substring of query which\nis present in dictionary.\nExample:\nInput: dictionary = [\u201ccat\u201d, \u201cbat\u201d, \u201chat\u201d, \u201ctree\u201d, \u201cdigest\u201d, \u201cmenu\u201d]\nquery = \u201ccat\u201d\nOutput: cat\nExplanation:\nThe longest substrings present in dictionary\nare {\u201ccat\u201d, \u201cat\u201d, \u201ca\u201d, \u201ct\u201d}, so the answer is \u201ccat\u201d.\n\nSolution:\n    We will use a sliding window to process the\n    string in a dynamic programming manner.\n    We will create a 2D array of size len(query)\n    and len(dictionary) and initialize it as 0.\n    We will start with a left and right pointer\n    for our sliding window. We will iterate through\n    the query and dictionary strings from right to\n    left and keep updating the value of array[i][j]\n    in a way that it stores the length of the maximum\n    subsequence present in the query string from i\n    to j.\n    If the element of query string is not present\n    in dictionary string, we will do not increment\n    the value of the array element.\n    If the element of query string is present\n    in dictionary string, we will increment the\n    value of the array element.\n    We will start the left pointer from index 0\n    and the right pointer from index 0.\n    We will move the left pointer to the right by\n    one position at a time and the right pointer\n    to the left by one position at a time and keep\n    checking for the condition mentioned above.\n    We will return the string which has the maximum\n    length sub sequence when the right pointer reaches\n    the end of the dictionary string and the left\n    pointer reaches the end of the query string.\n\nComplexity:\n    Time: O(m*n)\n    Space: O(m*n)\n\"\"\"\n\n\n\n\"\"\"\nlongest_subsequence_sol_v3.py\n-----------------\nGiven a dictionary of words and a query string,\nreturn the longest possible substring of query which\nis present in dictionary.\nExample:\nInput: dictionary = [\u201ccat\u201d, \u201cbat\u201d, \u201chat\u201d, \u201ctree\u201d, \u201cdigest\u201d, \u201cmenu\u201d]\nquery = \u201ccat\u201d\nOutput: cat\nExplanation:\nThe longest substrings present in dictionary\nare {\u201ccat\u201d, \u201cat\u201d, \u201ca\u201d, \u201ct\u201d}, so the answer is \u201ccat\u201d.\n\nSolution:\n    We will use a sliding window to process the\n    string in a dynamic programming manner.\n    We will create a 2D array of size len(query)\n    and len(dictionary) and initialize it as 0.\n    We will start with a left and right pointer\n    for our sliding window. We will iterate through\n    the query and dictionary strings from right to\n    left and keep updating the value of array[i][j]\n    in a way that it stores the length of the maximum\n    subsequence present in the query string from i\n    to j.\n    If the element of query string is not present\n    in dictionary string, we will do not increment\n    the value of the array element.\n    If the element"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 1\nassert solution(\"tt\") == 0\nassert solution(\"et\") == 2\n\nassert solution(\"test\") == 3\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('test') == 'test'\nassert solution('test') == 'test'\nassert solution('test') == 'test'\n\"\"\"\n\ns1 = input()\ns2 = input()"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"test\") == 1, \"First example\"\nassert solution(\"tst\") == 1, \"Second example\"\nassert solution(\"tt\") == 0, \"Third example\"\nassert solution(\"et\") == 0, \"Fourth example\"\nassert solution(\"\") == 0, \"Fifth example\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('asdfasdf') == 3\nassert solution('bbaba') == 3\nassert solution('baaba') == 2\n\"\"\""
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"tst\") == \"st\"\nassert solution(\"tt\") == \"t\"\nassert solution(\"et\") == \"te\"\nassert solution(\"contest\") == \"\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"asdfasdf\") == 3\nassert solution(\"asdfasdf\") == 3\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"test\") == 2\nassert solution(\"tt\") == 0\nassert solution(\"testest\") == 4\nassert solution(\"asdfasdff\") == 4\n\"\"\""
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tt\") == 2\nassert solution(\"se\") == 2\nassert solution(\"s\") == 0\nassert solution(\"\") == 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 1\nassert solution(\"baaba\") == 3\nassert solution(\"ab\") == 1\nassert solution(\"abcde\") == 0\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"0 2 1 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 1\") == 2\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 1 1') == '2'\nassert solution('2 1 1 1') == '2'\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a=1,b=2,c=1,d=1) == 2\n\"\"\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1 1\") == \"2\"\n\n-------\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 1 1') == '2'\n\"\"\"\n\na, b, c, d = map(int, input().split())"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1 1 1') == '2'\nassert solution('1 2 1 1') == '2'\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom math import inf\nfrom typing import List, Tuple, Union, Dict\n\nfrom advent import get_input\nfrom advent.tools import timer\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7 2 4\") == \"12\"\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(    \"4 1 2 4 4 6 7\") == \"2\"\nassert solution(    \"3 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 1 4 4 6 7\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 1 4 4 6 7\\n\") == '2'\n\n---\n### Exercise 1\n\nThe number of items in a set A of n items is given by the formula n**k, where k is the set cardinality (the number of distinct items).\n\nWrite a program that finds the total number of sets with exactly 3 items.\n\n-----\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 4 6 7\\n\") == '2'\nassert solution(\"9 1 4 4 6 7\\n\") == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 1 4 4 6 7\\n\") == \"2\"\nassert solution(\"6 1 4 4 6 7\\n\") == \"2\"\nassert solution(\"7 1 4 4 6 7\\n\") == \"2\"\nassert solution(\"6 1 4 4 6 8\\n\") == \"0\"\nassert solution(\"9 1 4 4 6 8\\n\") == \"2\"\n\n\"\"\"\nimport sys\nimport time\nimport numpy as np"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 9 1 4 4 6 7\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 1 4 4 6 7\") == \"2\"\n\"\"\"\n\nfrom math import ceil\nfrom typing import List"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9 1 4 4 6 7\\n\") == 2\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 1 2 3 4 5\") == \"3\"\nassert solution(\"7 1 2 3 4 5 6\") == \"2\"\nassert solution(\"2 1 2\") == \"1\"\nassert solution(\"10 10\") == \"1\"\nassert solution(\"7 1 2 3 4 5 6\") == \"2\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 6 9 10 3 4') == '2'\nassert solution('9 1 4 4 6 7') == '2'\nassert solution('4 1 4 6 7') == '1'\nassert solution('9 10 2 1 4 6 7') == '1'\nassert solution('3 5 2 4 1') == '0'\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == 3\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\nassert solution(\"9 20 16 18 16 14 16 10 17\\n19 20 20 15 20 12 20 11 20 15 20 19\") == \"4\"\nassert solution(\"10 20 16 18 16 14 16 10 17\\n19 20 20 15 20 12 20 11 20 15 20 19\") == \"6\"\nassert solution(\"10 20 16 18 16 14 16 10 17\\n19 20 20 15 20 12 20 11 20 15 20 19\") == \"6\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 24 21 23\\n16 17 14 20 20 11 22') == 3\n\"\"\"\n\nimport math"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 24 21 23') == 3"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\n\"\"\"\n\nimport sys\n\nn, h, l, r = [int(x) for x in sys.stdin.readline().split()]\narr = [int(x) for x in sys.stdin.readline().split()]\ngood = 0\nfor i in arr:\n    if i >= l and i <= r:\n        good += 1\nprint(good)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 24 21 23\\n16 17 14 20 20 11 22') == 3\n\"\"\"\n\nn, h, l, r = map(int, input().split())\ntimes = [int(input()) for _ in range(n)]"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5 7 6') == 3\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n7 24 21 23\n16 17 14 20 20 11 22\n''') == '3'\n\"\"\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\n\"\"\"\n\nn, h, l, r = list(map(int, input().strip().split()))\na = list(map(int, input().strip().split()))\ngood_times = 0\n\nfor i in range(n):\n    if l <= (a[i] + i) % h < r:\n        good_times += 1\nprint(good_times)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == 3\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1 2') == ''\nassert solution('1 2 3') == ''\nassert solution('1 2 3 4') == ''\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49') == 4\nassert solution('5\\n2 10 50 110 250') == 1\nassert solution('6\\n4 7 12 100 150 199') == 3\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(print(solution(str(input()))))\n\n\"\"\"\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n5 10 50 110 250\\n') == '3'\n\nassert solution('5\\n2 10 50 110 250\\n') == '1'\n\nassert solution('6\\n4 7 12 100 150 199\\n') == '3'\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\n\"\"\""
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''10\n1 2 5 6 7 10 21 23 24 49\n''') == '4'\n\nassert solution('''5\n2 10 50 110 250\n''') == '1'\n\nassert solution('''6\n4 7 12 100 150 199\n''') == '3'\n\n\"\"\"\n\n\nfrom collections import deque"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n10\n1 2 5 6 7 10 21 23 24 49\n''') == '4'\nassert solution('''\n5\n2 10 50 110 250\n''') == '1'\nassert solution('''\n6\n4 7 12 100 150 199\n''') == '3'"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\n\"\"\"\nimport collections\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49') == '4'\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(10) == 4\n\n\"\"\""
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n2 5 10 1 10 2') == '1 4'\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 8 3 6\") == \"1 2\"\nassert solution(\"5 2 11 3 7\") == \"2 4\"\nassert solution(\"6 2 5 10 1 10 2\") == \"1 4\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5\n2 4 8 3 6\"\"\") == \"1 2\"\nassert solution(\"\"\"5\n2 4 8 3 6\"\"\") == \"1 2\"\nassert solution(\"\"\"5\n2 11 3 7\"\"\") == \"2 4\"\nassert solution(\"\"\"6\n2 5 10 1 10 2\"\"\") == \"1 4\"\nassert solution(\"\"\"6\n2 5 10 1 10 2\"\"\") == \"1 4\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 4 8 3 6') == '1 2'\nassert solution('6\\n5 2 11 3 7') == '1 4'\n\"\"\"\n\n\"\"\"\n    MY ANSWER:\n    return (1,2)\n\n\"\"\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 4 8 3 6') == '1 2'\nassert solution('6\\n2 5 10 1 10 2') == '1 4'\n\n\n\"\"\"\n\nfrom typing import List\nfrom math import lcm\n\nn: int = int(input())\na: List[int] = [int(x) for x in input().split()]\n\nd: List[int] = [0] * n\nl: int = 1\nfor i in range(n):\n    d[i] = l\n    l = lcm(l, a[i])\n\nfor i in range(n - 1):\n    d[i] = lcm(d[i], d[i + 1])"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 11 3 7\") == \"2 4\"\n\nassert solution(\"6 2 11 3 7\") == \"1 4\"\n\nprint(solution(\"5 2 11 3 7\"))\nprint(solution(\"6 2 11 3 7\"))\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == '1 2'\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 8 3 6') == '1 2'\nassert solution('5 2 11 3 7') == '2 4'\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(121) == '021'\nassert solution(211200) == '211200'\nassert solution(120110) == '120120'\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"101010\") == \"111000\"\nassert solution(\"111101010\") == \"11101010\"\nassert solution(\"101010\") == \"101010\"\nassert solution(\"111101010\") == \"11101010\"\nassert solution(\"111101010\") == \"11101010\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"31\") == \"210\"\nassert solution(\"111\") == \"110\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"0123\") == \"0123\"\nassert solution(\"211200\") == \"211200\"\nassert solution(\"120110\") == \"120120\"\nassert solution(\"001110\") == \"001122\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12010\") == \"12010\"\nassert solution(\"10010\") == \"10110\"\nassert solution(\"11010\") == \"10110\"\nassert solution(\"11110\") == \"10110\"\nassert solution(\"11101\") == \"10110\""
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"120110\") == \"120120\"\nassert solution(\"211200\") == \"211200\"\n\"\"\""
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"121\") == \"021\"\n\nassert solution(\"120110\") == \"120120\"\n\nassert solution(\"120120\") == \"120120\"\n\nassert solution(\"120123\") == \"120123\"\n\nassert solution(\"1201020\") == \"1201020\""
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"121\") == \"021\"\n\"\"\"\n\nfrom typing import List\n\nfrom collections import Counter\n\n\nclass Solution:\n    def __init__(self, stdin: str) -> None:\n        self._stdin = stdin\n\n    def solution(self) -> str:\n        stdin = self._stdin\n        c = Counter(stdin)\n\n        c0 = c[\"0\"]\n        c1 = c[\"1\"]\n        c2 = c[\"2\"]\n\n        s = \"\"\n\n        while c0 > 0 and c1 > 0 and c2 > 0:\n            for c in \"012\":\n                if c0 > 0 and c == \"0\":\n                    s += \"0\"\n                    c0 -= 1\n                    c2 -= 1\n                elif c1 > 0 and c == \"1\":\n                    s += \"1\"\n                    c1 -= 1\n                    c0 -= 1\n                elif c2 > 0 and c == \"2\":\n                    s += \"2\"\n                    c2 -= 1\n                    c1 -= 1\n                else:\n                    raise AssertionError(f\"unknown state\")\n\n        if c0 > 0:\n            s += \"0\" * c0\n        elif c1 > 0:\n            s += \"1\" * c1\n        elif c2 > 0:\n            s += \"2\" * c2\n\n        return s\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n11101''') == '1011'\nassert solution('''3\n11101''') == '1011'\nassert solution('''3\n11101''') == '1011'\n\nassert solution('''3\n11101''') == '1011'\nassert solution('''3\n11101''') == '1011'\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"121\") == \"021\"\nassert solution(\"1111\") == \"11112\"\nassert solution(\"120110\") == \"120120\"\n\"\"\"\nimport math\n\nfrom collections import Counter\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1\\n2\\n3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 1\\n3\") == \"4\"\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n3\") == \"4\"\nassert solution(\"5 1\\n2 3 4 5\\n2 3 5\") == \"5\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n0\") == '4'\nassert solution(\"4 2\\n2 3\\n1 3\\n3 4\") == '1'\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1\\n3\\n') == '4'\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"6 1\\n3\\n\"\n) == \"4\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n2\") == \"4\"\nassert solution(\"6 1\\n3\\n4\") == \"4\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n3\") == \"4\"\nassert solution(\"7 1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"8\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 1\\n3\") == \"4\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\nbroken_steps = set(map(int, stdin.readline().split()))\ns = [0] * (n + 1)\ns[0] = 1\ns[1] = 1\nfor i in range(2, n + 1):\n    if i in broken_steps:\n        s[i] = 0\n    else:\n        s[i] = s[i - 1] + s[i - 2]\nprint(s[n] % 1000000007)\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n1') == '1'\nassert solution('3 1\\n1\\n2') == '4'\nassert solution('3 1\\n1\\n2\\n3') == '4'\nassert solution('3 3\\n1\\n2\\n3') == '12'\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 2 4\\n') == '2'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n\nimport sys\nfrom collections import namedtuple\n\nCoordinate = namedtuple('Coordinate', ['x', 'y'])\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('-1 2 3') == '-1'\nassert solution('-10 15 20') == '20'\nassert solution('-1 -1 -1') == '-1'\nassert solution('-10 -10 -10') == '0'"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n\nX, K, D = [int(n) for n in stdin.split(\" \")]"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 2 4') == '2'\nassert solution('4 2 2') == '1'\nassert solution('12 6 4') == '2'\n\"\"\"\n\n\"\"\"\nSolution Explanation:\n\nThe solution is straightforward.\nCreate a list of integers between 1 and the distance,\nthat will be the minimum possible distance.\nThe distance between two integer numbers is defined as\nthe difference of the absolute values of the two numbers.\nStart with the biggest number and go in the opposite direction.\nThe distance between two numbers is the sum of the distance between the two numbers and the difference\nbetween the two numbers.\nFor example:\n1 and 10 are distance 1\n10 and 20 are distance 9\n20 and 40 are distance 16\nTo check if the solution is valid, start with the biggest number and go in the opposite direction.\nThe distance between the numbers is the sum of the distance between the numbers\nand the difference between the numbers.\nIf the sum of the distance between the numbers and the difference between the numbers\nis less than the distance between the numbers, then the solution is valid.\nThis is the result of the solution for example 1, 10, 20.\nThe maximum distance from the biggest number is 10,\nthe distance between the numbers is 16.\nThe sum of the distance between the numbers and the difference between the numbers\nis 16, so this is not a valid solution.\nThe sum of the distance between the numbers and the difference between the numbers\nis 9, so this is also not a valid solution.\nThe sum of the distance between the numbers and the difference between the numbers\nis 1, and the distance between the numbers is 1, so this is also not a valid solution.\nFor example:\n1 and -1 are distance 1\n1 and -2 are distance 1\n-1 and -2 are distance 1\n-1 and -3 are distance 2\n-1 and -4 are distance 2\n-2 and -3 are distance 2\n-2 and -4 are distance 3\n-3 and -4 are distance 3\nThe distance between the numbers is the sum of the distance between the numbers\nand the difference between the numbers.\nThe distance between -4 and -3 is 3, and the sum of the distance between the numbers and the difference between the numbers is 3.\nTherefore, this is not a valid solution.\nFor example:\n1 and -1 are distance 1\n1 and -2 are distance 1\n-1 and -2 are distance 1\n-1 and -3 are distance 2\n-1 and -4 are distance 2\n-2 and -3 are distance 2\n-2 and -4 are distance 3\n-3 and -4 are distance 3\nThe distance between the numbers is the sum of the distance between the numbers\nand the difference between the numbers.\nThe distance between -4 and -3 is 3, and the sum of the distance between the numbers and the difference between the numbers is 3.\nTherefore, this is a valid solution.\n\"\"\""
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"2\"\nassert solution(\"-1 2 3\") == \"0\"\n\nfrom typing import List\nfrom collections import deque\n\nclass Solution:\n    def solve(self, A: List[int]) -> int:\n        x, k, d = A\n        \n        x_0 = abs(x)\n        \n        if x < 0:\n            x_0 = -x_0\n        \n        def bfs(x_0: int) -> int:\n            q = deque([x_0])\n            \n            dist = {x_0: 0}\n            while q:\n                x_i = q.popleft()\n                \n                if x_i > 0 and x_i - d in dist:\n                    return dist[x_i - d] + 1\n                \n                if x_i < 0 and x_i + d in dist:\n                    return dist[x_i + d] + 1\n                \n                for x_i_k in (x_i + d, x_i - d):\n                    if x_i_k not in dist:\n                        dist[x_i_k] = dist[x_i] + 1\n                        q.append(x_i_k)\n            \n            return -1\n        \n        return bfs(x_0)"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 4\") == \"2\"\nassert solution(\"10 7 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 1\\n2 2 2\\n3 3 3') == '1'\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 2 4') == '2'\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(11) == 2\nassert solution(14) == 0\nassert solution(61441) == 2\nassert solution(2128506) == 3\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('61441') == 2\nassert solution('571576') == 10\nassert solution('2128506') == 3\n\"\"\""
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 10\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 2\nassert solution('2128506') == 3\n\"\"\"\nimport math\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11') == 2\n\nassert solution('14') == 0\n\nassert solution('61441') == 10\n\nprint('Success')\n\nprint(solution('571576'))\n\"\"\"\nimport sys"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 10\nassert solution('571576') == 3\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11\") == \"2\"\nassert solution(\"14\") == \"0\"\nassert solution(\"61441\") == \"2\"\nassert solution(\"571576\") == \"10\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11') == '2'\nassert solution('14') == '0'\nassert solution('61441') == '2'\nassert solution('571576') == '10'\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 10\nassert solution('571576') == 3\nassert solution('2128506') == 3\nprint('Test pass.')\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11') == 2\nassert solution('14') == 0\nassert solution('61441') == 2\nassert solution('571576') == 10\nprint('All tests passed.')\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == 27\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == 1\n\"\"\"\n\nimport sys\n\ninput = int(sys.stdin.readline())"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"27\"\n'''"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3\n''') == '27'\n\nassert solution('''\n5\n''') == '12345'\n\nassert solution('''\n7\n''') == '1234567'\n\nassert solution('''\n1\n''') == '1'\n\nassert solution('''\n15\n''') == '123456789101112131415'\n'''"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == 2\nassert solution('2') == 6\nassert solution('3') == 7\nassert solution('4') == 9\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == 27\n\"\"\"\n\na = int(input())\nprint(a*a*a)\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '5'\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == 27\n\"\"\""
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == 27\n-----\n\n2"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == 27\n-----------------------------\n\nWrite a program that outputs the sum of all the multiples of 3 or 5 below 1000.\n-----Input-----\n\nThe input contains one integer n (1 \u2264 n \u2264 1000).\n\n\n-----Output-----\n\nOutput the sum of all the multiples of 3 or 5 below n.\n\n\n-----Example-----\nInput\n10\n\nOutput\n23\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n\"\"\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(13) == 1\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\nprint('You are awesome! All tests are done! Go Check it!')\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n\"\"\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\"\nassert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('927') == '1'\nassert solution('8') == '1'\nassert solution('88') == '0'\nassert solution('11') == '0'\nassert solution('12') == '1'\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 5 3 1') == 4\n\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 3 1') == 4\n\"\"\"\n\n\"\"\"\nHow it is used:\n\nFor testing purposes\n\nPrecondition:\n0 \u2264 n \u2264 100\n0 \u2264 ai \u2264 11\n\n\"\"\""
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5 3 1\") == 4\n\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n2 5 3 1''') == 4\n\n\"\"\"\n\n\nimport unittest\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 3 1\") == 4\nassert solution(\"2 5 3 1\") == 4\nassert solution(\"1 1 1 1\") == 1\n\"\"\"\n\nfrom collections import deque\nfrom itertools import accumulate"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5 3 1\") == 4\n\n\"\"\"\n\nfrom typing import List\n\nimport numpy as np\n\nfrom utils import read_input, print_output"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == ''\nassert solution('2 5 3 1') == ''\nassert solution('2 5 3 1 10 11 12') == ''\nassert solution('2 5 3 1 11 12') == ''\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 1\") == \"4\"\n\n\n\"\"\"\nimport random\n\n__all__ = [\"solution\"]\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5 3 1') == '4'\n\nassert solution('1 2 3 4') == '3'\nassert solution('2 5 3 7') == '4'\n\n-----Placeholder-----\n\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(example) == expected\n\n-----Solution-----\n\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 7') == '2'\nassert solution('8 1') == '8'\nassert solution('6 10') == '1'\nassert solution('999999733 999999732') == '999999733'\nassert solution('999999733 999999733') == '1'\n\"\"\"\n\nimport sys\nimport collections\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == 6\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\\n999999733 999999732\") == \"2\\n8\\n1\\n999999733\\n1\"\nassert solution(\"8 7\\n8 1\\n6 10\\n999999733 999999733\") == \"2\\n8\\n1\\n999999733\\n1\"\n\n\n\n\n-----TESTS-----\n\nInput\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n\nOutput\n2\n8\n1\n999999733\n1\n\n\"\"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733''') == '2\\n8\\n1\\n999999733\\n1'\n\nprint(solution(stdin))"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\n\n\"\"\"\n\nimport sys\n\nT = int(sys.stdin.readline().strip())\n\nfor _ in range(T):\n    n, k = map(int, sys.stdin.readline().strip().split())\n    print(k - 1 if n > k else 0)\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\nassert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\nassert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n\"\"\") == \"2\\n8\\n1\\n999999733\\n1\"\nassert solution(\"\"\"\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n\"\"\") == \"2\\n8\\n1\\n999999733\\n1\"\n\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n8 7\") == \"2\"\nassert solution(\"8 1\\n8 1\") == \"8\"\nassert solution(\"6 10\\n999999733 999999732\") == \"1\"\nassert solution(\"999999733 999999733\\n\") == \"1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\"\"\"\n\nn, m = map(int, input().split())\nlights = []\nfor _ in range(n):\n    lights.append(0)\nfor _ in range(m):\n    bulb, *states = map(int, input().split())\n    for i in range(len(states)):\n        lights[bulb - 1] += (1 if states[i] else -1)\nprint(lights.count(0))\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\") == 1\nassert solution(\"3 3\\n1 1 1\\n2 2 2\\n3 3 3\") == 0\nassert solution(\"5 5\\n1 3 3\\n2 5 5\\n4 6 6\\n5 6 6\\n2 4 4\\n3 5 4\") == 1\nassert solution(\"4 4\\n1 2 2\\n2 1 2\\n3 3 3\\n4 4 4\") == 1\nassert solution(\"4 4\\n2 2 2\\n1 3 3\\n4 4 4\\n3 3 3\") == 1\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n2 1 2\\n1 2') == '1'\nassert solution('4 2\\n2 1 1\\n1 2') == '2'\nassert solution('4 2\\n2 1 1\\n1 2') == '0'\nassert solution('4 1\\n2 1 2\\n1 2') == '3'\nassert solution('4 1\\n2 1 2\\n1 2') == '0'\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\"\"\"\n\n\nfrom collections import defaultdict\n\nn, m = map(int, stdin.readline().split())\n\nswitch = defaultdict(set)\nbulbs = defaultdict(set)\n\nfor i in range(1, n + 1):\n    switch[i] = set()\n    for j in range(1, m + 1):\n        a, b = map(int, stdin.readline().split())\n        if a == b:\n            continue\n        switch[i].add(b)\n        bulbs[j].add(a)\n\nfor i in range(1, m + 1):\n    if i in switch[1]:\n        bulbs[i].add(1)\n\nfor i in range(m + 1):\n    if len(bulbs[i]) == 1:\n        for j in range(1, n + 1):\n            if j in switch[i]:\n                bulbs[j].add(1)\n\nprint(sum(map(lambda x: len(x) % 2, bulbs.values())))\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == 1\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == 1\n\"\"\"\n\nfrom itertools import product\n\nn, m = [int(n) for n in stdin.readline().split()]\n\nswitches = [[int(n) for n in stdin.readline().split()] for _ in range(m)]\n\np = [int(n) for n in stdin.readline().split()]\n\nans = 0\nfor c in product((0, 1), repeat=n):\n    if c.count(1) % 2 == 0:\n        ok = True\n        for i in range(m):\n            if c[switches[i][0] - 1]!= switches[i][1]:\n                ok = False\n                break\n\n        if ok:\n            ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\") == '1'\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n--------------------------------------------------\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 9 0\") == \"5.000000000000\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\n\"\"\"\n\n\"\"\"\nWrong\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3 4 9 0) == '5.00000000000000000000'\nassert solution(0 0 0 0) == '0.00000000000000000000'\nassert solution(3 0 0 0) == '1.4500000000000001'\nassert solution(0 0 1 0) == '0.7071067811865476'\n\"\"\"\nimport math"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 9 0\") == \"5.00000000000000000000\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 9 0\") == '5.00000000000000000000'\n\"\"\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\"\n\nA, B, H, M = map(int, input().split())\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\nassert solution(\"6 8 3 0\") == \"8.00000000000000000000\"\nassert solution(\"1 2 9 0\") == \"10.00000000000000000000\"\nassert solution(\"1 2 3 0\") == \"13.00000000000000000000\"\n\"\"\""
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\") == \"8\"\n\"\"\"\n\nimport collections\nimport itertools\nimport math\nfrom typing import List\n\nfrom icontract import require, ensure, DBC\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"1\"\nassert solution(\"5 4\") == \"1\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"3 1\") == \"6\"\nassert solution(\"15 2\") == \"97\"\n\n\"\"\""
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2') == '8'\n\"\"\"\nimport math"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\") == \"8\"\n\nassert solution(\"3 1\") == \"6\"\n\nassert solution(\"15 2\") == \"97\"\n\"\"\""
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == \"8\"\nassert solution(\"3 1\\n1 1 1\") == \"6\"\nassert solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"97\"\n\nprint(\"Successfully passed all test cases!\")\n\n\n------Problem------\n\nThe index of median of a sequence of integers is the smallest index $i$ that guarantees the following property:\n\nthe number of elements in the left half of the sequence, that is, $a_1, a_2, \\dots, a_i$, is equal to the number of elements in the right half of the sequence, that is, $a_{i+1}, a_{i+2}, \\dots, a_n$.\n\nGiven an integer sequence $a_1, a_2, \\dots, a_n$ find the index of median and the number of elements in the left half.\n\nInput\n\nThe first line contains integers $n$ and $m$ \u2014 the length of the sequence and the required value of the median.\n\nThe second line contains an integer sequence $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 2\\cdot10^5$).\n\nOutput\n\nPrint two integers \u2014 the index of median and the number of elements in the left half of the sequence.\n\nConstraints\n1 <= n <= 2 * 10^5\n1 <= m <= 2 * 10^5\n1 <= a_i <= 2 * 10^5\nIt is guaranteed that the median of the sequence exists.\n\nExamples\nInput\n\n4 2\n1 2 3 4\n\nOutput\n\n2 4\n\nInput\n\n5 3\n1 2 3 1 2 3\n\nOutput\n\n4 4\n\nInput\n\n5 3\n4 5 4 5\n\nOutput\n\n1 4\n\nInput\n\n5 3\n4 3 4 3 1\n\nOutput\n\n3 6\n\nInput\n\n5 3\n1 3 1 2 2\n\nOutput\n\n0 1\n\nInput\n\n5 3\n3 2 3 1 2\n\nOutput\n\n1 0\n\nInput\n\n5 3\n3 3 3 3 1\n\nOutput\n\n3 0\n\nInput\n\n5 3\n4 3 1 3 2\n\nOutput\n\n2 4\n\nInput\n\n5 3\n4 4 3 2 1\n\nOutput\n\n0 2\n\nInput\n\n5 3\n4 1 2 1 1\n\nOutput\n\n1 1\n\nInput\n\n5 3\n2 2 2 2 1\n\nOutput\n\n4 4\n\nInput\n\n5 3\n1 1 2 2 3\n\nOutput\n\n1 4\n\nInput\n\n5 3\n2 2 1 1 3\n\nOutput\n\n3 0\n\nInput\n\n5 3\n3 2 2 2 1\n\nOutput\n\n2 3\n\nInput\n\n5 3\n2 2 1 1 2\n\nOutput\n\n0 1\n\nInput\n\n5 3\n2 2 1 2 1\n\nOutput\n\n2 3\n\nInput\n\n5 3\n1 1 1 2 2\n\nOutput\n\n0 2\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n4 0\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n5 0\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n5 0\n\nInput\n\n5 3\n1 1 1 1 2\n\nOutput\n\n1 2\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n5 0\n\nInput\n\n5 3\n1 1 1 1 2\n\nOutput\n\n1 2\n\nInput\n\n5 3\n1 1 1 2 1\n\nOutput\n\n1 2\n\nInput\n\n5 3\n1 1 2 2 1\n\nOutput\n\n1 2\n\nInput\n\n5 3\n1 1 1 2 1\n\nOutput\n\n1 2\n\nInput\n\n5 3\n1 1 2 2 2\n\nOutput\n\n1 3\n\nInput\n\n5 3\n1 2 1 1 1\n\nOutput\n\n0 2\n\nInput\n\n5 3\n1 2 1 1 1\n\nOutput\n\n0 2\n\nInput\n\n5 3\n1 2 1 1 1\n\nOutput\n\n0 2\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n4 0\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n4 0\n\nInput\n\n5 3\n2 2 1 1 1\n\nOutput\n\n0 1\n\nInput\n\n5 3\n2 1 2 2 1\n\nOutput\n\n1 1\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n4 0\n\nInput\n\n5 3\n1 1 1 1 2\n\nOutput\n\n1 2\n\nInput\n\n5 3\n1 1 1 1 2\n\nOutput\n\n1 2\n\nInput\n\n5 3\n1 1 1 2 1\n\nOutput\n\n1 2\n\nInput\n\n5 3\n2 1 1 2 1\n\nOutput\n\n0 1\n\nInput\n\n5 3\n1 1 1 2 1\n\nOutput\n\n1 2\n\nInput\n\n5 3\n1 1 1 2 1\n\nOutput\n\n1 2\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n4 0\n\nInput\n\n5 3\n1 1 1 1 2\n\nOutput\n\n1 2\n\nInput\n\n5 3\n1 1 1 1 2\n\nOutput\n\n1 2\n\nInput\n\n5 3\n2 1 1 2 1\n\nOutput\n\n0 1\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n4 0\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n5 0\n\nInput\n\n5 3\n1 2 1 1 1\n\nOutput\n\n0 1\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n4 0\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n5 0\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n5 0\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n5 0\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n5 0\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n5 0\n\nInput\n\n5 3\n1 1 1 1 1\n\nOutput\n\n5 0\n\nInput\n\n5 3\n1 2 1 2 1\n\nOutput"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 4\\n1 4 5 60 4') == '8'\nassert solution('3 1\\n1 1 1') == '6'\nassert solution('15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3') == '97'\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == \"8\"\n\nassert solution(\"3 1\\n1 1 1\") == \"6\"\nassert solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"97\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\") == \"8\"\nassert solution(\"1 4 5 60 4\") == \"8\"\nassert solution(\"1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"97\"\nassert solution(\"1 1 1\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 4 5 60 4\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"8\"\nassert solution(\"1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"97\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 4') == '2'\nassert solution('3 1') == '6'\nassert solution('15 2') == '97'\n\"\"\"\n\nfrom typing import List\nfrom bisect import bisect_left, bisect_right\nfrom collections import deque\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == '6\\n2\\n1 4'\n\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == '7\\n2\\n3 2'\n\nassert solution(\"1 0\\n1000000\") == '0\\n0'"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"5 4\") == \"2\"\nassert solution(\"2 -2 3 1 2\") == \"6\"\nassert solution(\"1 3\") == \"1 4\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"6 4\"\n) == \"6\"\nassert solution(\n    \"5 4\"\n) == \"7\"\nassert solution(\n    \"1 0\"\n) == \"0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 4') == '6'\nassert solution('6 5') == '7'\nassert solution('6 5') == '7'\nassert solution('3 4') == '0'\nassert solution('3 5') == '0'\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\"\nassert solution(\"1 0\") == \"0\\n0\""
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n\"\"\"\n\nfrom typing import List\n\nimport pytest\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 4\") == \"3 2\"\n\nassert solution(\"5 4\") == \"3 2\"\n\nassert solution(\"5 3\") == \"4 1\"\n\nassert solution(\"5 2\") == \"3 1\"\n\nassert solution(\"5 1\") == \"0\""
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"7\\n2\\n1 4\\n\"\n\"\"\""
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"7\\n2\\n1 4\\n\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\\n\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\\n\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('fced') == 'Yes'\nassert solution('xyz') == 'Yes'\nassert solution('r') == 'Yes'\nassert solution('dabcef') == 'No'\nassert solution('az') == 'No'\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"fced\\nxyz\\nr\") == \"Yes\"\nassert solution(\"fced\\nz\\nr\") == \"No\"\nassert solution(\"fced\\nz\\nr\") == \"No\"\nassert solution(\"a\\nb\") == \"No\"\nassert solution(\"xzz\\nyy\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abc\") == \"No\"\nassert solution(\"fced\") == \"Yes\"\nassert solution(\"abcdefg\") == \"No\"\nassert solution(\"az\") == \"No\"\nassert solution(\"aa\") == \"No\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\nb = [list(map(int, stdin.readline().split())) for _ in range(m)]\n\ndp = [float('-inf')] * n\nfor l, r in b:\n    dp[l - 1] = max(dp[l - 1], a[l - 1] - a[r - 1])\n\nq = [i + 1 for i, x in enumerate(dp) if x == max(dp)]\nprint(max(dp) + 1)\nprint(' '.join(map(str, q)))\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == '7\\n2\\n4 1'\n\nassert solution(\"4 5\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\\n1 3\\n\") == '7\\n2\\n3 2'\n\nassert solution(\"1 0\\n1000000\\n\") == '0\\n0'\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5') == '6\\n2\\n4 1'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5') == '6\\n2\\n4 1'\n\"\"\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\""
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n4 1'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3''') == '6\\n2\\n4 1'\nassert solution('''1 0\n1000000''') == '0\\n0'\n\nassert solution('''5 4\n2 -2 3 1 2\n3 5\n3 4\n2 4\n2 5''') == '7\\n2\\n3 2'\n\nassert solution('''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3''') == '6\\n2\\n4 1'\n\nassert solution('''5 4\n2 -2 3 1 2\n3 5\n3 4\n2 4\n2 5''') == '7\\n2\\n3 2'\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n\") == \"7\\n2\\n4 1\\n\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\\n\") == \"7\\n2\\n3 2\\n\"\nassert solution(\"1 0\\n1000000\\n\") == \"0\\n0\\n\"\nassert solution(\"10 10\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\\n7 1\\n8 1\\n9 1\\n10 1\\n\") == \"10\\n1\\n\"\n\n\"\"\""
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5') == '6\\n2\\n4 1'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n\n\"\"\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '0 0'\nassert solution('1 2') == '2 0'\nassert solution('0 0') == '0 0'\nassert solution('1 -2 3 1 2') == '6 2'\nassert solution('3 5') == '7 2'\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\"\n\"\"\""
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 5 4 3') == '4'\nassert solution('1 3 5 6 7 4') == '7'\nassert solution('1 2 5 4 3') == '4'\n\nassert solution('7 1 3 5 6 7 4 2') == '7'\nassert solution('7 1 3 5 6 7 4 2') == '7'\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4\\nLRRR'\n\nassert solution('7\\n1 3 5 6 7 4 2') == '7\\nLRLRLLL'\n\nassert solution('3\\n1 2 3') == '3\\nLLL'\n\nassert solution('4\\n1 2 4 3') == '4\\nLLRL'\n\n\"\"\"\n\nn = int(input())\nnums = list(map(int, input().split()))\n\nleft, right = 0, n-1\nleft_count, right_count = 0, 0\nmoves = 0\n\nwhile left < right:\n    if nums[left] > nums[right]:\n        right_count += 1\n        right -= 1\n    elif nums[left] < nums[right]:\n        left_count += 1\n        left += 1\n    moves += 1\n\nprint(moves)\nprint('L'*left_count + 'R'*right_count)\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\n\" + \"LRRR\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\n\" + \"LRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\n\" + \"LLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\n\" + \"LLRL\"\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == '4\\nLRRR'\nassert solution(\"7\\n1 3 5 6 7 4 2\") == '7\\nLRLRLLL'\nassert solution(\"3\\n1 2 3\") == '3\\nLLL'\n\"\"\"\nfrom tools import timing\n\n\"\"\"\nclass Solution:\n    def __init__(self):\n        self.res = 0\n\n    @timing\n    def solution(self, n):\n        arr = list(range(1, n + 1))\n        l = r = 0\n\n        while l < n:\n            if l == r:\n                self.res += 1\n                r += 1\n                l = r\n\n            elif arr[l] < arr[r]:\n                self.res += 1\n                l += 1\n\n            else:\n                self.res += 1\n                r += 1\n\n        return self.res\n\"\"\"\n\n\"\"\"\n2\n5\n2 1 5 4 3\n7\n1 3 5 6 7 4 2\n3\n1 2 3\n4\n1 2 4 3\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\nk = 1\ni, j = 0, n - 1\n\nwhile i <= j:\n    if arr[i] < arr[j]:\n        i += 1\n    else:\n        k += 1\n        j -= 1\n\nprint(k)"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1 5 4 3') == '4'\nassert solution('1 3 5 6 7 4 2') == '7'\nassert solution('1 2 3') == '3'\nassert solution('1 2 4 3') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\"\nassert solution(\"3\\n1 2 3\") == \"3\"\nassert solution(\"4\\n1 2 4 3\") == \"4\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 5 4 3\") == \"4\"\nassert solution(\"1 3 5 6 7 4\") == \"7\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2 4 3\") == \"4\"\nassert solution(\"1 2 5 4 3\") == \"4\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1 5 4 3') == 4\nassert solution('1 3 5 6 7 4') == 7\nassert solution('1 2 3') == 3\nassert solution('1 2') == 2\nassert solution('1') == 1\n\"\"\"\n\nimport sys\nfrom collections import deque\nfrom typing import List, Deque, Tuple\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 5 4 3\") == \"4\"\nassert solution(\"1 3 5 6 7 4\") == \"7\"\nassert solution(\"1 2 3\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 5 3 4') == 4\nassert solution('2\\n1 2') == 2\nassert solution('7\\n6 5 4 3 2 4 3') == 2\nassert solution('3\\n6 5 4 3 2 4 3') == 2\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 4 5\") == \"4\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\""
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"2\"\nassert solution(\"1 2 5 3 4\") == \"2\"\nassert solution(\"1 2 5 3 4\") == \"2\"\nassert solution(\"1 2 5 3 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 5 3 4') == 4\n\nassert solution('2\\n1 2') == 2\n\nassert solution('7\\n6 5 4 3 2 4 3') == 2\n    \"\"\"\n    pass"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 5 3 4') == '4'\nassert solution('2\\n1 2') == '2'\nassert solution('7\\n6 5 4 3 2 4 3') == '2'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4') == '4'\nassert solution('3\\n1 2 4') == '3'\nassert solution('2\\n1 2') == '2'"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 4\") == '4'\n\"\"\"\n\nimport sys\nimport math\nfrom typing import List\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == 4\n\"\"\"\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '1'\n\"\"\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 2 4 5') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 3 3') == '0'\nassert solution('1 2 3 3 1') == '3'\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n\") == \"2\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '1'\nassert solution('5 3\\n1 2 3 3 3') == '0'\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 3\n1 2 2 4 5\n''') == '1'\n\nassert solution('''5 3\n1 2 3 4 5\n''') == '2'\n\nassert solution('''5 3\n1 2 2 2 3\n''') == '0'\n\nassert solution('''5 3\n1 2 3 3 3\n''') == '0'\n\nassert solution('''5 3\n1 2 3 2 3\n''') == '0'"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 2 3 4 5\") == 1\nassert solution(\"1 2 2 4 5\") == 2\nassert solution(\"1 2 3 4 5\") == 2\nassert solution(\"1 2 3 3 3\") == 0\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"2\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\nassert solution(\"5 3\\n1 1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 2 4 5\\n') == '1'\nassert solution('1 2 2 4 5\\n') == '2'\nassert solution('1 2 3 4 5\\n') == '0'\n\"\"\""
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n1 2 3 4 5\") == \"2\"\nassert solution(\"6 7\\n1 2 3 3 3 3\\n\") == \"0\"\nassert solution(\"1 1\\n1\") == \"0\"\nassert solution(\"8 8\\n2 2 2 2 2 2 2 2\") == \"8\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"2\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n1 2 2 4 5\\n') == '1'\nassert solution('5 3\\n1 2 2 4 5\\n') == '2'\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3 2') == '4'\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 4\") == \"4\"\nassert solution(\"8 3 4\") == \"4\"\nassert solution(\"2 1 1\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3 4\") == '4'\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 3 4\\n') == '4'\n\"\"\"\n\nfrom math import gcd\n\nn, a, b = map(int, input().split())\nprint(gcd(a, b) * (n // gcd(a, b)))\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\n'''"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\"\n\n\"\"\"\n8 3 4\n0 1 0\n\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"8 3 4\"\n) == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"8 3 4\"\n) == \"4\"\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"8 3 4\"\n) == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n2\n8\n8 2 12 6 4 24 16 3\n1\n2\n\"\"\"\n) == \"\"\"\n48\n4\n\"\"\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n2\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == '48\\n4'\n\"\"\"\nfrom itertools import combinations, chain\nfrom math import prod"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n8 2 12 6 4 24 16 3') == '48'\nassert solution('1\\n2') == '-1'\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n8\\n2 12 6 4 24 16 3\") == \"48\"\nassert solution(\"1\\n2\") == \"1\"\nassert solution(\"4\\n3\\n2\\n1\\n4\\n5\") == \"-1\"\n\"\"\"\n\nfrom math import log2\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\") == \"48\"\n\"\"\""
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8\\n8 2 12 6 4 24 16 3') == '48'\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\") == \"48\"\n\"\"\"\n\nfrom collections import Counter\n\nimport sys\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n8\\n2\\n4\\n8\\n4\\n2\\n2\\n4\\n8\\n8\\n8\\n2\\n4\\n4\\n4\\n2\\n2\\n8\\n2\\n4\\n2\\n2\\n4\\n4\\n2\\n2\\n8\\n4\\n2\\n2\\n2\\n2\\n4\\n4\\n4\\n2\\n4\\n4\\n4\\n4\\n4\\n2\\n4\\n4\\n4\\n2\\n4\\n4\\n2\\n2\\n2\\n8\\n2\\n4\\n2\\n2\\n2\\n4\\n2\\n2\\n2\\n2\\n2\\n2\\n4\\n2\\n2\\n2\\n8\\n4\\n2\\n4\\n4\\n2\\n4\\n4\\n4\\n4\\n4\\n2\\n2\\n4\\n4\\n2\\n4\\n2\\n4\\n4\\n4\\n4\\n4\\n4\\n2\\n2\\n2\\n8\\n4\\n2\\n4\\n2\\n4\\n4\\n2\\n4\\n4\\n2\\n2\\n2\\n8\\n4\\n2\\n2\\n2\\n4\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n4\\n4\\n2\\n4\\n2\\n4\\n4\\n4\\n4\\n8\\n8\\n8\\n2\\n4\\n2\\n4\\n2\\n2\\n4\\n4\\n4\\n2\\n4\\n4\\n2\\n2\\n8\\n4\\n4\\n8\\n4\\n4\\n2\\n4\\n2\\n2\\n2\\n8\\n8\\n8\\n4\\n4\\n2\\n8\\n8\\n8\\n8\\n2\\n8\\n2\\n4\\n4\\n2\\n4\\n2\\n4\\n2\\n4\\n4\\n2\\n4\\n2\\n4\\n2\\n2\\n2\\n2\\n4\\n4\\n2\\n2\\n4\\n4\\n4\\n2\\n4\\n4\\n4\\n4\\n4\\n4\\n8\\n8\\n4\\n8\\n8\\n8\\n8\\n2\\n8\\n4\\n4\\n2\\n8\\n2\\n4\\n4\\n4\\n4\\n4\\n4\\n8\\n4\\n2\\n4\\n4\\n2\\n4\\n4\\n2\\n2\\n2\\n8\\n4\\n2\\n4\\n4\\n2\\n2\\n2\\n2\\n2\\n2\\n8\\n2\\n4\\n2\\n4\\n4\\n2\\n4\\n4\\n2\\n2\\n8\\n8\\n8\\n4\\n4\\n4\\n4\\n8\\n8\\n8\\n8\\n2\\n4\\n2\\n2\\n4\\n2\\n4\\n2\\n2\\n2\\n2\\n2\\n8\\n2\\n2\\n4\\n4\\n8\\n4\\n4\\n4\\n4\\n2\\n2\\n4\\n4\\n4\\n8\\n4\\n2\\n4\\n2\\n8\\n4\\n4\\n2\\n4\\n4\\n2\\n4\\n2\\n2\\n8\\n2\\n2\\n4\\n4\\n2\\n4\\n2\\n4\\n4\\n4\\n8\\n4\\n4\\n8\\n4\\n4\\n8\\n8\\n8\\n8\\n4\\n8\\n8\\n4\\n8\\n8\\n8\\n8\\n2\\n2\\n4\\n2\\n4\\n2\\n2\\n4\\n2\\n8\\n4\\n2\\n4\\n4\\n4\\n2\\n4\\n4\\n4\\n8\\n2\\n4\\n2\\n2\\n4\\n8\\n8\\n4\\n4\\n4\\n8\\n4\\n8\\n4\\n4\\n4\\n8\\n8\\n4\\n2\\n8\\n2\\n4\\n8\\n8\\n2\\n4\\n2\\n4\\n4\\n8\\n8\\n4\\n8\\n8\\n2\\n4\\n4\\n2\\n4\\n2\\n4\\n4\\n8\\n8\\n8\\n8\\n8\\n4\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n4\\n4\\n2\\n4\\n4\\n8\\n4\\n8\\n8\\n2\\n4\\n4\\n8\\n4\\n8\\n4\\n8\\n8\\n8\\n4\\n8\\n4\\n2\\n4\\n8\\n8\\n8\\n4\\n8\\n4\\n8\\n8\\n8\\n8\\n8\\n8\\n4\\n8\\n4\\n4\\n2\\n4\\n8\\n4\\n8\\n4\\n4\\n2\\n4\\n2\\n4\\n2\\n4\\n4\\n8\\n4\\n4\\n8\\n4\\n4\\n8\\n4\\n8\\n2\\n4\\n4\\n8\\n8\\n4\\n2\\n8\\n4\\n4\\n2\\n4\\n4\\n8\\n8\\n4\\n8\\n4\\n8\\n4\\n8\\n8\\n8\\n8\\n4\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n4\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n8\\n4\\n8\\n4\\n8\\n8\\n4\\n8\\n4\\n2\\n4\\n4\\n2\\n4\\n2\\n4\\n4\\n4\\n4\\n4\\n8\\n4\\n4\\n8\\n4\\n8\\n8"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n8\\n8 2 12 6 4 24 16 3\") == \"48\"\n\nassert solution(\"2\\n5\\n2 2 4 2\") == \"2\"\n\nassert solution(\"2\\n5\\n2 4 4\") == \"-1\"\n\n\"\"\"\n\n\n\n\"\"\"\n\n1 <= t <= 25\n2 <= n <= 300\n2 <= d_i <= 10000\nIt is guaranteed that all values d_i are distinct.\n\n\"\"\""
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\") == \"48\"\n\"\"\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 6 6 6 6\") == \"1 6\"\nassert solution(\"5 5 5 5 5\") == \"2 5\"\nassert solution(\"5 4 4 4\") == \"1 4\"\nassert solution(\"5 4 4 5\") == \"1 4\"\nassert solution(\"5 4 4 4\") == \"1 4\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 5 5 1 6 1\\n\") == \"3\\n5 6 1\\n\"\nassert solution(\"5\\n6 6 6 6 6\\n\") == \"1\\n6\\n\"\nassert solution(\"5\\n6 6 6 6 6\\n\") == \"1\\n6\\n\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5 5 1 6 1\\n\") == \"3\\n5 6 1\"\nassert solution(\"5\\n6 6 6 6 6\\n\") == \"1\\n6\"\n\"\"\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 5 5 1 6 1\") == \"3\\n5 6 1\"\nassert solution(\"5\\n2 4 2 4 4\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6 6 6 6\") == \"1 6\"\nassert solution(\"2 4 2 4 4\") == \"2 4\"\nassert solution(\"5 6 6 6 6\") == \"1 6\"\n\n\"\"\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"5\\n2 4 2 4 4\") == \"2\\n2 4\"\nassert solution(\"5\\n6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"1\\n5\") == \"1\\n5\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n6 6 6 6 6\") == \"1\\n6\"\n\"\"\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 4 2 4 4\") == \"2\\n2 4\"\nassert solution(\"6 6 6 6 6\") == \"1\\n6\"\nassert solution(\"5 6 6 6 6\") == \"1\\n6\"\nassert solution(\"5 6 7 8 9\") == \"1\\n7\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '1 2 3 4'\nassert solution('1 2 3 2 3') == '1 2 3 3'\nassert solution('1 2 3 2 2 3') == '1 2 3 2 2'\nassert solution('1 2 1 2 2 3 3') == '1 2 1 2 2 3 3'\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 5 5 1 6 1') == '3\\n5 6 1'\nassert solution('5\\n2 4 2 4 4') == '2\\n2 4'\nassert solution('5\\n6 6 6 6 6') == '1\\n6'"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('432') == '435'\n\"\"\""
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\nprint('The tests are done. No more input required.')\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(432) == 435\nassert solution(99) == 103\nassert solution(237) == 237\nassert solution(42) == 44\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\nassert solution(\"100\") == \"200\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"432\") == \"435\"\n\"\"\"\n\nimport sys\nfrom typing import Any\n\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_INT = int(INPUT_LINES[0])\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\nprint('Test pass.')\n\nfrom a1 import solution\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\nassert solution(\"1111\") == \"1112\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abac') == 'aac'\n\nassert solution('abc') == 'b'\n\nassert solution('abba') == 'aba'\n\nassert solution('ecoosdcefr') == 'codeforces'\n\nassert solution('dcefoas') == 'dcefoas'"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\""
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\n\nassert solution(\"aabac\") == \"aabac\"\n\nassert solution(\"ecoosdcefr\") == \"codeforces\""
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\"\"\"\n\n\nimport collections\n\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.children = dict()\n        self.indices = dict()\n\n\nclass Solution:\n    def __init__(self):\n        self.root = Node(None)\n        self.table = dict()\n        self.visited = set()\n\n    def insert(self, string):\n        if not string:\n            return None\n        if string in self.table:\n            return self.table[string]\n        node = self.root\n        for s in string:\n            if s not in node.children:\n                node.children[s] = Node(s)\n                node.children[s].indices[s] = 0\n                node = node.children[s]\n            else:\n                node = node.children[s]\n                node.indices[s] += 1\n        self.table[string] = node\n        return node\n\n    def find_next(self, node):\n        if not node:\n            return None\n        if node.indices == 0:\n            return None\n        if node.indices == len(node.children) - 1:\n            return self.find_next(node.children[node.data])\n        max_value = -1\n        res = None\n        for k, v in node.indices.items():\n            if v == max_value and res is None:\n                res = k\n            if v > max_value:\n                max_value = v\n                res = k\n        return self.find_next(node.children[res])\n\n    def solve(self, q: int, query: list) -> str:\n        res = []\n        for i in range(q):\n            stdin = query[i * 3]\n            m = int(query[i * 3 + 1])\n            b = [int(x) for x in query[i * 3 + 2].split(' ')]\n            self.root = self.insert(stdin)\n            node = self.insert(stdin)\n            self.visited = set()\n            self.visited.add(node)\n            for j in range(m):\n                node = self.insert(stdin)\n                self.visited.add(node)\n                node.indices[self.find_next(node)] -= 1\n            res.append(self.find_next(self.root))\n        return '\\n'.join(res)\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"abac\") == \"aac\""
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abac') == 'aac'\nassert solution('ecoosdcefr') == 'codeforces'\n\"\"\"\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\"\"\"\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aac\") == \"aac\"\nassert solution(\"aab\") == \"aab\"\nassert solution(\"aba\") == \"aba\"\nassert solution(\"bbc\") == \"bbc\"\nassert solution(\"codeforces\") == \"codeforces\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"ab\") == \"b\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == 'a'\nassert solution('26') == 'z'\nassert solution('27') == 'aa'\nassert solution('701') == 'zz'\nassert solution('18277') == 'zzz'\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"b\""
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == 'b'\nassert solution('1000000000000001') == 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2') == 'b'\nassert solution('3') == 'c'\nassert solution('4') == 'd'\nassert solution('5') == 'e'\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"b\"\nprint(solution(\"2\"))\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"b\"\nassert solution(\"1000000000000001\") == \"zzzzzz\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"b\"\n\"\"\""
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"a\"\nassert solution(\"2\") == \"b\"\nassert solution(\"26\") == \"z\"\n\"\"\""
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"b\"\n\n\"\"\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 'b'\nassert solution('1000000000000001') == 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"to be or not to be\") == \"TB or not TB\"\nassert solution(\"aa bb aa aa bb bb\") == \"AB aa AB bb\"\nassert solution(\"aa aa aa bb bb\") == \"AA AB Bb\"\n\"\"\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"to be or not to be\") == \"12\"\nassert solution(\"a ab a a b ab a a b c\") == \"13\"\nassert solution(\"aa bb aa aa bb bb\") == \"11\"\n\"\"\""
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('to be or not to be') == 12\nassert solution('a ab a a b ab a a b c') == 13\nassert solution('aa bb aa aa bb bb') == 11"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('abc') == 3\nassert solution('a ab a a b ab a a b c') == 11\nassert solution('aa bb aa aa bb bb') == 11\n\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\nto be or not to be\") == \"12\\n\"\nassert solution(\"10\\na ab a a b ab a a b c\") == \"13\\n\"\nassert solution(\"6\\naa bb aa aa bb bb\") == \"11\\n\""
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('to be or not to be') == 'TB or not TB'\nassert solution('a ab a a b ab a a b c') == 'a AAAB AAAB c'\nassert solution('aa bb aa aa bb bb') == 'AB aa AB bb'\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\nassert solution(\"aA bB aA aA bB bB\") == 11\n\n\n\"\"\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\nassert solution(\"aa bb aa aa bb bb\") == 11\n\na b a c d a b c d\n1 4\n\n----\nab aa ab bb\n0 3\n\n----\naa bb aa aa bb bb\n0 5\n\n----\naa bb aa aa bb bb\n0 5\n\n----\naa bb aa aa bb bb\n0 5\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\nto be or not to be\") == \"12\"\nassert solution(\"10\\na ab a a b ab a a b c\") == \"13\"\nassert solution(\"6\\naa bb aa aa bb bb\") == \"11\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2') == '20'\nassert solution('5 1\\n1 1 1 1 1') == '1'\nassert solution('4 2\\n1 2000 2000 2') == '4000'\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution([\"8\", \"3\"]) == '20'\nassert solution([\"5\", \"1\"]) == '1'\nassert solution([\"4\", \"2000\", \"2000\", \"2\"]) == '4000'\nprint('Success')\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n1 2000 2000 2') == '4000\\n2 2'\n\"\"\"\n\nn, k = [int(x) for x in stdin.split()]\na = [int(x) for x in stdin.split()]\n\nl, r = 0, 0\nm = 0\nfor r in range(n):\n    if m < a[r]:\n        m = a[r]\n    if m > k:\n        break\n    if m + r - l == k:\n        print(m * (r - l + 1))\n        l, r = r + 1, r + 1\n    elif r - l + 1 == k:\n        print(m * (r - l + 1))\n        l, r = r + 1, r + 1\n    else:\n        r += 1\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\\n2 2\"\n\"\"\""
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\"\nassert solution(\"4 2\\n1 2000 2\") == \"4000\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\") == \"20\"\nassert solution(\"5 1\\n1 1 1 1 1\\n\") == \"1\"\nassert solution(\"4 2\\n1 2000 2000 2\\n\") == \"4000\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2000 2000 2\") == \"4000\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\"\nassert solution(\"3 2\\n1 2000 2\") == \"2000\"\n\n\"\"\""
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\\n\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\\n\") == \"4000\\n2 2\"\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\nassert solution(\"5 -2 3 -9 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\nassert solution(\"5 -1 3 -1 2\") == \"0\"\nassert solution(\"8 -1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"9 -1 -1 1 -1 1 1 -1 -1\") == \"3\"\nassert solution(\"11 -1 -1 1 -1 1 1 -1 -1\") == \"6\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\nassert solution(\"5 -2 3 -9 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 -5 3 2') == '1'\nassert solution('4 -2 3 -9 2') == '0'\nassert solution('-1 1 -1 1 -1 1 1 -1 -1') == '6'\nassert solution('-1 1 -1 1 -1 1 1 -1 -1') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(input())) == str(expected_result)\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -2 3 -9 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -2 3 -9 2\") == \"1\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\nassert solution(\"5 -11 10 5 4 -4\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 16 -5 -11 -15 10 5 4 -4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 -2 3 -9 2') == '1'\nassert solution('5 -11 -15 10 5 4 -4') == '0'\nassert solution('9 -1 1 -1 1 -1 1 1 -1 -1') == '6'\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -2 3 -9 2\") == \"1\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n\n\n\n\"\"\""
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 100\") == \"0\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"2 1000000000\") == \"1000000000\"\nassert solution(\"1 1000000000\") == \"2000000000\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 100') == '0'\nassert solution('2 2') == '0'\nassert solution('5 5') == '0'\nassert solution('2 1000000000') == '2000000000'\nassert solution('1 1000000000') == '1000000000'"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"2000000000\"\n\nassert solution(\"1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"2000000000\"\n\"\"\"\n\n\"\"\"\n\ub0b4\uac00 \ud480\uc740 \uac83\n\n\ub0b4\uac00 \ud480\uc740 \uac83\n2\n3 1\n4 3\n5 2\n5 3\n6 4\n7 1\n8 1\n9 1\n10 2\n\n2\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n\n2\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n\n10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n10 10\n\n5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n\n5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n\n10\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n\n\"\"\""
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 100\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"2 1000000000\") == \"2\"\nassert solution(\"1000000000 1000000000\") == \"2000000000\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 100\\n10 5\\n6 3\\n4 1\\n1 1\") == '1\\n1\\n0\\n1'\nassert solution(\"6 1000000000\\n1 1000000000\") == '2000000000\\n1'\nassert solution(\"4 100\\n10 5\\n6 3\\n4 1\\n1 1\") == '1\\n1\\n0\\n1'\nassert solution(\"6 1000000000\\n1 1000000000\") == '2000000000\\n1'\nassert solution(\"6 1000000000\\n1 1000000000\") == '2000000000\\n1'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 100') == '0'\nassert solution('2 2') == '2'\nassert solution('5 5') == '10'\nassert solution('1 1000000000') == '2000000000'\nassert solution('2 1000000000') == '2000000000'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"0\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"3 4\") == \"2\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"1 3\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n100 100 100 99') == '0'\nassert solution('5\\n1 100') == '0'\nassert solution('2\\n2 2') == '0'\nassert solution('1\\n1 1') == '0'\nassert solution('1\\n2 3') == '1'\n\"\"\"\n\n\nfrom collections import defaultdict\nimport heapq\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(['2', '3']) == '4'\nassert solution(['2', '1']) == '1'\nassert solution(['1', '100']) == '0'\nassert solution(['0', '0']) == '0'\nassert solution(['2', '100']) == '0'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('5, 100\\n2, 2') == '0\\n2'\nassert solution('5, 100\\n1000000000, 1000000000') == '1000000000'\nassert solution('5, 100\\n1, 1000000000') == '2000000000'"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101') == '4'\nassert solution('1000') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('101') == '4'\n\"\"\"\n\nk = int(stdin)\n\ni = 1\n\nwhile i < 1000001:\n    if i % k == 0:\n        print(i)\n        break\n    i += 1\nelse:\n    print(-1)\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"101\") == \"4\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"101\") == 4\n\n-----\n\n'''\n\nimport sys\n\nK = int(sys.stdin.readline())"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(sample_input) == sample_output\n\"\"\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('101') == '4'\nassert solution('9') == '-1'\nassert solution('101010') == '4'\nassert solution('1000000') == '-1'\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('101') == '4'\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('101') == '4'\nassert solution('1') == '0'\nassert solution('2') == '1'\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('101') == '4'\nassert solution('18') == '1'\nassert solution('101101') == '6'\n\"\"\"\n\nK = int(stdin.readline().rstrip('\\n'))\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\", \"2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\", \"1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\", \"1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\n\"\"\""
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(['3', '5', '7', '9', '10', '8']) == '1'\nassert solution(['1', '2', '3', '4', '5']) == '0'\nassert solution(['2', '3', '1', '5', '4']) == '4'\n\n-----\n\"\"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\") == '4'\n\"\"\"\nfrom typing import List\nimport math\n\nfrom collections import Counter\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\") == \"4\"\n\"\"\"\n\n\nclass Solution:\n    def brute_force(self, nums, m):\n        \"\"\"O(n^2) / O(1)\"\"\"\n        n = len(nums)\n        res = 0\n        for l in range(n - 1):\n            for r in range(l + 1, n):\n                mid = (l + r) // 2\n                if nums[mid] == m:\n                    res += 1\n        return res\n\n    def solution(self, stdin: str) -> str:\n        n, m = map(int, stdin.split())\n        nums = list(map(int, stdin.split()))\n        nums.sort()\n        left, right = 0, n - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] == m:\n                left = mid + 1\n            elif nums[mid] < m:\n                left = mid + 1\n            else:\n                right = mid - 1\n        res = 0\n        if left == n - 1:\n            res = 0\n        else:\n            if nums[left] == m:\n                res = 1\n            elif nums[left] > m:\n                res = self.brute_force(nums, m)\n        return str(res)\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\n\n\n\"\"\""
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5') == '1'\n\nassert solution('5 4') == '1'\n\nassert solution('5 5') == '0'\n\nassert solution('15 8') == '48'\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('5 4') == '4'\nassert solution('5 5') == '1'\nassert solution('15 8') == '48'\n\"\"\"\nfrom typing import List, Dict\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"5 4\n2 4 5 3 1\"\"\") == \"4\"\nassert solution(\"\"\"5 5\n1 2 3 4 5\"\"\") == \"1\"\nassert solution(\"\"\"15 8\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\"\"\") == \"48\"\n\"\"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"3 1 2\") == \"1\"\nassert solution(\"6 5 4 3 2 1\") == \"1\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n2 4 5 3 1') == '4'\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 10\\n5 5 5 5 5\\n\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == \"1\"\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\nl = [int(x) for x in input().split()]\nl.sort()\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '-1'\nassert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '-1'\nassert solution('5 26\\n5 5 5 5 5') == '2'"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\nassert solution('5 16\\n5 5 5 5 5') == '2'\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5 2 3 1 1 2') == '4'\nassert solution('7 10 5 5 5 5') == '2'\nassert solution('5 15 5 5 5') == '-1'\nassert solution('5 26 5 5 5') == '-1'\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 35\\n5 5 5 5 5\") == \"2\"\n\n---\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\"\"\"\n\n\nfrom typing import List, Tuple, Set\nimport unittest\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 8\") == \"4\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 15\") == \"2\"\nassert solution(\"5 26\") == \"-1\"\nassert solution(\"5 16\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == '4'\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\") == '1'\nassert solution(\"5 26\\n5 5 5 5 5\") == '-1'\n\"\"\"\n\nn, m = list(map(int, input().split()))\ncups = list(map(int, input().split()))\n\ncups.sort()\n\nstart = 0\nend = max(cups)\n\nans = 0\nwhile start <= end:\n    mid = (start + end) // 2\n    sum = 0\n    for c in cups:\n        sum += min(c, mid)\n    if sum > m:\n        start = mid + 1\n    else:\n        end = mid - 1\n        ans = mid\nprint(ans)\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == '4'\nassert solution(\"7 10\\n5 5 5 5 5\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\") == '-1'\nassert solution(\"5 26\\n5 5 5 5 5\") == '-1'\nassert solution(\"5 5\\n5 5 5 5 5\") == '1'\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\\n\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\\n\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == \"-1\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n14 5 1\\n\") == \"1\"\nassert solution(\"5\\n1 3 6 9 12\\n\") == \"1\"\nassert solution(\"2\\n500 500\\n\") == \"0\"\nassert solution(\"3\\n14 5 1\\n\") == \"-1\"\nassert solution(\"5\\n1 3 6 9 12\\n\") == \"1\""
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n24 21 14 10\\n\") == \"3\"\nassert solution(\"2\\n500 500\\n\") == \"0\"\nassert solution(\"3\\n14 5 1\\n\") == \"1\"\nassert solution(\"5\\n1 3 6 9 12\\n\") == \"1\"\n\"\"\"\n\nimport sys\nimport itertools\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n24 21 14 10\") == \"3\"\nassert solution(\"2\\n500 500\") == \"0\"\nassert solution(\"5\\n1 3 6 9 12\") == \"1\""
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"3 14 5 1\") == \"-1\"\nassert solution(\"5 1 3 6 9 12\") == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"3 1 2 4\") == \"1\"\nassert solution(\"1 3 6 9 12\") == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"14 5 1\") == \"-1\"\nassert solution(\"5 1 3 6 9 12\") == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 21 14 10\") == 3\nassert solution(\"500 500\") == 0\nassert solution(\"1 3 6 9 12\") == -1\nassert solution(\"14 5 1\") == 1\n\"\"\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 24 21 14 10\") == \"3\"\nassert solution(\"2 500 500\") == \"0\"\nassert solution(\"3 14 5 1\") == \"-1\"\nassert solution(\"5 1 3 6 9 12\") == \"1\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 21 14 10\") == \"3\"\nassert solution(\"500 500\") == \"0\"\nassert solution(\"3 1 6 9 12\") == \"-1\"\nassert solution(\"5 1 3 6 9 12\") == \"1\""
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 10 20 30') == '3'\nassert solution('2 10') == '-1'\nassert solution('1 2 3 4') == '1'\nassert solution('1 0 0 0') == '1'\nassert solution('1 1 1 1') == '0'\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\nassert solution(test_input_4) == test_output_4\nassert solution(test_input_5) == test_output_5\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"4\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n1 2 15 15 15') == '5'\n\"\"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 2\n1 2 15 15 15''') == '5'\n\nassert solution('''6 1\n36 4 1 25 9 16''') == '2'\n\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n1 2 15 15 15\\n') == '5'\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n1 2 15 15 15\\n') == '5\\n'\nprint('Test passed')\n\n\"\"\""
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\\n\") == 5\n\"\"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\") == \"5\"\nassert solution(\"6 1\\n36 4 1 25 9 16\") == \"2\"\nassert solution(\"4 4\\n1 10 100 1000\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\\n\") == \"5\\n\"\nprint(solution(\"6 1\\n36 4 1 25 9 16\\n\"))\nassert solution(\"4 4\\n1 10 100 1000\\n\") == \"4\\n\"\nprint(solution(\"5 3\\n1 2 15 15 15\\n\"))\n\"\"\"\n\nimport sys\n\na = list(map(int, sys.stdin.readline().rstrip().split()))\nn, k = a[0], a[1]\n\nskills = list(map(int, sys.stdin.readline().rstrip().split()))"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\") == \"5\"\nassert solution(\"6 1\\n36 4 1 25 9 16\") == \"2\"\nassert solution(\"4 4\\n1 10 100 1000\") == \"4\"\nassert solution(\"4 4\\n1 10 100 1000\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 1\\n2 3 1\") == \"2\"\nassert solution(\"5 7 6\\n1 4 5 6 7\") == \"4\"\nassert solution(\"10 7 6\\n5 7 4 7 5 8\") == \"8\"\nassert solution(\"4 4 5\\n5 6 7\") == \"0\"\nassert solution(\"1 1 1\\n1\") == \"1\"\n\"\"\"\n\nn, k, m = [int(x) for x in input().split()]\nsub_scores = [int(x) for x in input().split()]\n\nsub_scores.sort(reverse=True)\n\ntotal_score = 0\nfor i, x in enumerate(sub_scores):\n    if i + 1 >= n:\n        break\n    if i + 1 < n and x == sub_scores[i + 1]:\n        continue\n    if x >= m:\n        total_score += x\n    else:\n        break\nprint(total_score)\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\nprint(solution(\"5 10 7\\n8 10 3 6\"))\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == 8\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected_result\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\\n\") == \"8\"\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\nassert solution(\"3 10 7\\n5 5 3 6\") == \"6\"\nassert solution(\"1 1 1\\n1\") == \"1\"\nassert solution(\"3 3 6\\n2 2 5\") == \"3\"\nassert solution(\"3 3 6\\n2 2 5\\n7 7 1\") == \"4\"\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == '8'\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\n\nimport sys\nimport os\nimport array"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 10 7\\n8 10 3 6') == '8'\n\"\"\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(sys.stdin.read())) == 'Yes'\n\"\"\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 2\\n1\\n2\\n3\\n4\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\nassert solution('5 3 1\\n2\\n3\\n4\\n5\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\nassert solution('5 5 2\\n1\\n2\\n3\\n4\\n5\\n') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo'\nassert solution('6 3 4\\n1\\n2\\n3\\n4\\n5\\n6\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo\\nNo'\nassert solution('5 6 4\\n1\\n2\\n3\\n4\\n5\\n6\\n') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo'\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 1\\n1\\n1') == 'No'\nassert solution('3 3 2\\n1\\n2\\n2') == 'No'\nassert solution('3 3 2\\n1\\n1\\n2') == 'No'\nassert solution('3 3 3\\n1\\n2\\n2') == 'No'\nassert solution('3 3 3\\n1\\n2\\n2\\n3') == 'Yes'\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\nimport os\nimport typing\nimport sys\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\"\"\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\"\"\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"6 3 4\\n\"\n    \"3\\n\"\n    \"1\\n\"\n    \"3\\n\"\n    \"2\\n\"\n) == \"No\\n\" + \"\\n\" + \"No\\n\" + \"Yes\\n\" + \"No\\n\" + \"No\\n\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6 3 4\n3\n1\n3\n2\n''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n1 1\\n0 1') == 'YES\\n00\\n10'\nassert solution('3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1') == 'YES\\n010\\n0000'\nassert solution('3 3\\n0 0 0\\n1 0 1\\n1 1 0') == 'NO\\n010\\n1010'\n\n\"\"\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'NO'\n\n'''\n\nn, m = tuple(map(int, stdin.readline().split(' ')))\na = []\nfor i in range(n):\n    a.append(list(map(int, stdin.readline().split(' '))))"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n0 1 1\\n0 0 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 2\\n1 0 1\\n0 1 1\") == \"NO\"\nassert solution(\"3 3\\n0 0 0\\n1 1 1\\n1 1 1\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\\n010\\n010\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n1 1\\n0 1') == 'YES\\n00\\n10'\nassert solution('3 4\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1') == 'YES\\n010\\n0000'\nassert solution('3 4\\n0 0 0\\n1 0 1\\n1 1 1\\n1 1 1') == 'NO'\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n0 1\") == \"YES\\n10\"\nassert solution(\"0 1\\n1 1\") == \"YES\\n00\"\nassert solution(\"0 1\\n0 0\") == \"YES\\n0\"\nassert solution(\"0 1\\n1 1\") == \"YES\\n1\"\nassert solution(\"0 1\\n0 0\") == \"YES\\n0\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\\n\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\\n\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\\n\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\nassert solution(\"3 3\\n0 0 0\\n1 0 1\\n1 1 0\") == \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\n\nfrom aiounittest import AsyncTestCase\nfrom unittest.mock import AsyncMock\n\n\nclass SolutionTest(AsyncTestCase):\n    async def test_solution(self):\n        pass\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n1 1\\n0 1') == 'YES\\n00\\n10'\nassert solution('3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1') == 'YES\\n010\\n0000'\nassert solution('3 3\\n0 0 0\\n1 0 1\\n1 1 0') == 'NO'\nassert solution('2 3\\n0 1 0\\n1 0 1') == 'YES\\n10\\n00'\nassert solution('3 3\\n0 0 0\\n0 1 1\\n0 0 0') == 'NO'\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"121\") == \"Yes\"\nassert solution(\"373\") == \"Yes\"\nassert solution(\"736\") == \"No\"\nassert solution(\"436\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"121\") == \"Yes\"\nassert solution(\"122\") == \"Yes\"\nassert solution(\"738\") == \"Yes\"\nassert solution(\"4\") == \"Yes\"\nassert solution(\"6\") == \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('373') == \"Yes\"\nassert solution('121') == \"No\"\nassert solution('436') == \"Yes\"\n\nprint(solution('373'))\nprint(solution('121'))\nprint(solution('436'))\n\n\"\"\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"253\") == \"Yes\"\nassert solution(\"13\") == \"No\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('121') == 'No'\nassert solution('237') == 'Yes'\nassert solution('455') == 'Yes'\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\nassert solution(\"436\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4374\") == \"Yes\"\nassert solution(\"1233\") == \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\") == \"Yes\"\nassert solution(\"121\") == \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\n\"\"\""
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n\n-----Tests-----\n\nimport sys\nimport io\nfrom collections import Counter\n\nclass TestHandler(object):\n\n    def __init__(self):\n        self.stdout = ''\n        self.stdin = ''\n\n    def start(self):\n        sys.stdout = self\n        sys.stdin = self\n\n    def write(self, text):\n        self.stdout += text\n\n    def readline(self):\n        return self.stdin\n\n    def test(self, input: str, output: str):\n        for line in input.split('\\n'):\n            if line == '':\n                break\n            self.stdin += line + '\\n'\n        self.stdin += output + '\\n'\n        self.stdout = ''\n        t = solution('')"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == 5\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == 3\nassert solution(\"3 2 1\\n1 0 0\") == 1\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == 5\nassert solution('6 2 1\\n1 0 0 1 0 1') == 3\n\"\"\"\n\nn, b, a = map(int, input().split())\n\nl = list(map(int, input().split()))\n\nmax_s = 0\nmax_e = 0\n\nfor i in range(n):\n    if l[i] == 1:\n        max_s += 1\n        max_e += 1\n    else:\n        max_s += 1\n        max_e = 0\n\nprint(max_s)\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n\"\"\""
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 2 1\n0 1 0 1 0\n''') == '5'\nassert solution('''6 2 1\n1 0 0 1 0 1\n''') == '3'\nassert solution('''5 2 1\n0 1 0 1 0\n''') == '5'\n\nassert solution('''6 2 1\n1 0 0 1 0 1\n''') == '3'\n'''\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\nassert solution(\"2 10 10\\n1 1\") == \"1\"\nassert solution(\"6 3 1\\n1 1 0\") == \"1\"\nassert solution(\"3 10 10\\n0 1 0\") == \"1\"\n\"\"\"\n\n\nfrom sys import stdin"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n\"\"\""
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n\n\"\"\"\n\n\nfrom typing import List\n\n\nclass Solution:\n    def __init__(self, n: int, b: int, a: int, s: List[int]) -> None:\n        self.n = n\n        self.b = b\n        self.a = a\n        self.s = s\n        self.cnt = 0\n        self.battery = b\n        self.accumulator = a\n\n    def solve(self) -> int:\n        self.s = [1 if i > 0 else 0 for i in self.s]\n        for i in range(self.n - 1):\n            if self.s[i] == 1:\n                if self.battery < self.a:\n                    self.battery = self.battery + 1\n                    self.accumulator = self.accumulator - 1\n                self.cnt += 1\n            else:\n                if self.accumulator < self.b:\n                    self.accumulator = self.accumulator + 1\n                    self.battery = self.battery - 1\n                self.cnt += 1\n\n        return self.cnt\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n\"\"\"\n\nimport sys\n\nn, b, a = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\npass_battery = 0\npass_accumulator = 0\n\nfor i in range(len(s)):\n    if s[i] == 1:\n        pass_battery += 1\n        pass_accumulator += 1\n    elif pass_battery!= 0:\n        pass_battery -= 1\n    elif pass_accumulator!= 0:\n        pass_accumulator -= 1\n\nprint(pass_accumulator + pass_battery)\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\nassert solution('5 1 2\\n0 1 0 1 0') == '5'\nassert solution('6 1 2\\n1 0 0 1 0') == '4'\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\n\"\"\"\n\nimport re\n\nstdin = input()"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"46\"\nassert solution(\"112-37\") == \"375\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"0\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\nassert solution(\"4-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\nprint(\"Passed\")"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\"\"\""
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\nassert solution(\"1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1\") == \"21\"\nassert solution(\"0+1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20\") == \"1535\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\n\nassert solution(\"2+2\") == \"-46\"\n\"\"\"\n\nimport re\n\na = re.findall(\"([0-9]{1,3})\\-([0-9]{1,3})\", input())\nb = re.findall(\"([0-9]{1,3})\\+([0-9]{1,3})\", input())\nc = re.findall(\"([0-9]{1,3})\\*([0-9]{1,3})\", input())\nd = re.findall(\"([0-9]{1,3})\\+([0-9]{1,3})\\*([0-9]{1,3})\", input())\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\n\"\"\""
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"0\"\nassert solution(\"112-37\") == \"375\"\nassert solution(\"-8-6+5-2\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n') == 'YES'\nassert solution('4 4\\n') == 'NO'\nassert solution('13 4\\n') == 'YES'\n\"\"\""
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n\") == \"YES\"\nassert solution(\"10 4\\n\") == \"YES\"\nassert solution(\"13 4\\n\") == \"NO\"\nassert solution(\"3 1\\n1 3\\n3 2\\n2 3\\n4 1\\n1 4\\n3 1\\n2 4\\n4 2\\n\") == \"YES\"\nassert solution(\"10 6\\n\") == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'YES'\nassert solution('4 3') == 'YES'\nassert solution('10 4') == 'YES'\nassert solution('13 4') == 'NO'\nassert solution('1 2') == 'YES'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 2\\n1 2\") == \"YES\\n3 1\\n1 3\"\nassert solution(\"4 4\\n3 1\\n2 3\\n4 2\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n2 3\") == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3') == 'YES\\n3 1\\n1 3\\n3 2\\n2 3'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3') == 'YES'\nassert solution('10 4') == 'YES'\nassert solution('13 4') == 'NO'\n\"\"\"\n\nn, k = map(int, input().split())\n\ncolors = list(map(int, input().split()))\n\ncolor_set = set(colors)\n\ngood_color = [1]\nfor i in range(1, k):\n    if i not in color_set:\n        good_color.append(i)"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 3''') == 'YES'\nassert solution('''4 3''') == 'YES'\nassert solution('''4 3''') == 'YES'\nassert solution('''10 4''') == 'YES'\nassert solution('''4 3''') == 'YES'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n3 2\\n1 2\") == \"YES\\n3 1\\n1 3\\n3 2\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\\n\") == '18'\n\nfrom typing import Tuple, List\nimport math\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1') == '18'\n\n\"\"\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 3\\n1 100 1 1\\n\") == \"100\"\n\nprint(solution(\"6 1 5\\n10 30 30 70 10 10\\n\"))\n\nassert solution(\"6 1 5\\n10 30 30 70 10 10\\n\") == \"100\"\n\nprint(solution(\"5 1 3\\n1 100 1 1\\n\"))\n\nassert solution(\"5 1 3\\n1 100 1 1\\n\") == \"100\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n7 5 3\n1 3 5 7 10 20 30\n''') == '20'\n\nassert solution('''\n6 1 5\n1 100 1 1\n''') == '100'\n\nassert solution('''\n7 1 5\n1 100 1 1\n''') == '-1'\n\nassert solution('''\n2 3 1\n1 100\n''') == '100'\n\nassert solution('''\n3 2 1\n10 10\n''') == '10'"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1 3\\n5 1 3 10 1') == '18'\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 3\\n1 100 1 1') == '100'\n\"\"\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == 18\n\"\"\"\n\nn, k, x = map(int, input().split())\n\npictures = list(map(int, input().split()))\n\npictures.sort(reverse=True)\n\ns, l = 0, 0\n\nfor i in range(n):\n    if x <= i:\n        break\n    l = i\n    for j in range(i, n):\n        if x <= j:\n            break\n        if pictures[i] < pictures[j]:\n            s += pictures[j]\n            x -= 1\n    if x == 0:\n        break"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 3 1\n1 100 1 1''') == '100'\n\nassert solution('''5 2 3\n5 1 3 10 1''') == '18'\n\nassert solution('''6 1 5\n10 30 30 70 10 10''') == '-1'\n'''\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 5\\n1 1 2 3 4 5\") == \"18\"\n\n---\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('00100') == 3\nassert solution('0000') == 0\nassert solution('01110') == 1\nassert solution('11011') == 1\nassert solution('11101') == 2\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11111111111\") == \"11111111111\"\nassert solution(\"101010101010\") == \"101010101010\"\nassert solution(\"111001011010101010\") == \"111001011010101010\"\nassert solution(\"10101010\") == \"10101010\"\nassert solution(\"1111111111111111111111\") == \"1111111111111111111111\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"111000\") == 4\nassert solution(\"110000\") == 3\nassert solution(\"111011\") == 4\nassert solution(\"100110\") == 4\n\n\"\"\"\n\nfrom collections import deque\n\nn, k = map(int, stdin.readline().split())\ns = stdin.readline()\n\nqueue = deque([0])\ncost = 0\n\nwhile queue:\n    room = queue.popleft()\n    if s[room] == '1':\n        cost += room\n        queue.extend([i for i in range(max(1, room - k), min(n, room + k) + 1)])\n\nprint(cost)\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 2\\n1100') == '15'\nassert solution('2 2\\n10') == '0'\n\"\"\"\n\nn, k = input().strip().split()\nn, k = int(n), int(k)\n\ns = [input().strip() for _ in range(n)]\n\ncost = 0\n\nfor i in range(n):\n    for j in range(i+1, min(n, i+k+1)):\n        if s[i][j-1] == '1':\n            cost += j - i\n\nprint(cost)\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('00100') == '3'\nassert solution('0011') == '4'\nassert solution('0111') == '5'\nassert solution('1111') == '5'\nassert solution('111111') == '6'\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"00100\") == \"3\"\nassert solution(\"01110\") == \"1\"\nassert solution(\"11110\") == \"2\"\nassert solution(\"11111\") == \"4\"\nassert solution(\"111111\") == \"5\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('00100') == 3\nassert solution('01101') == 7\nassert solution('10111') == 11\nassert solution('11101') == 5\nassert solution('11011') == 6\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('00100') == 3\nassert solution('01110') == 1 + 2 + 3 + 4 + 5\nassert solution('11110') == 21\nassert solution('01110') == 4\nassert solution('11110') == 21\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"01110\") == 3\nassert solution(\"10010\") == 2\nassert solution(\"11111111111111111111111111111111111111111111111111111111111111111111111111110\") == 21\nassert solution(\"011111111111111111111111111111111111111111111111111111111111111111111111101110\") == 21\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"00100\") == 3\n\nassert solution(\"0000\") == 1\n\nassert solution(\"1111\") == 4\n\nassert solution(\"10001\") == 4\n\nassert solution(\"11010\") == 5"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"mumble\") == \"No\"\nassert solution(\"foobar\") == \"No\"\n\"\"\"\n\nS, T = input().split('\\n')\n\nS, T = set(S), set(T)"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"No\"\nassert solution(\"balder\") == \"No\"\nassert solution(\"blue\") == \"No\"\nassert solution(\"monk\") == \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'No'\nassert solution('ab') == 'No'\nassert solution('abcd') == 'No'\nassert solution('aab') == 'Yes'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"me\") == \"No\"\nassert solution(\"bbbcccdddaa\") == \"No\"\n\n\"\"\"\nimport sys\n\nS, T = sys.stdin.readlines()\nS, T = S.strip(), T.strip()"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"cat\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('azzel') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('apple') == 'Yes'\nassert solution('azzel') == 'Yes'\nassert solution('a') == 'Yes'\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\nassert solution('aaaaa') == 'Yes'\nassert solution('a') == 'No'\nassert solution('aba') == 'No'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"anarchy\") == \"No\"\nassert solution(\"a\") == \"Yes\"\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    \"\"\"Solution class\"\"\"\n    def __init__(self, inp_str: str):\n        self.s = inp_str\n        self.t = inp_str[::-1]\n    \n    def is_equal(self):\n        return self.s == self.t"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"azzel\") == \"Yes\"\n\nassert solution(\"apple\") == \"Yes\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10\") == \"12\"\nassert solution(\"6 10\") == \"5\"\n\"\"\"\n\nfrom decimal import Decimal"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 1 5 10 4 2 6\") == \"50\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 0 1 0 2 1 2 1 0 2 1 2 1 0 0 2 1 2 1 2 2 0 2 1 0 0 2 1 2 2 1 2 0 0 1 0 2 0 1 1 1 1 2 2 1 1 1 1 2 2 0 1 0 2 1 1 2 0 0 2 1 2 1 0 2 1 1 2 2 2 1 1 1 2 1 1 1 1 1 0 0 1 0 2 0 1 0 0 0 2 1 1 0 1 1 2 2 0 1 0 2 2 1 0 0 2 1 1 1 0 2 1 0 0 1 1 2 0 1 0 1 0 0 0 1 1 1 1 1 2 2 0 1 2 1 1 2 1 0 1 1 0 0 0 0 0 2 2 2 1 1 1 2 1 2 2 0 1 0 1 2 2 1 2 2 2 1 1 1 1 2 1 1 1 1 1 2 1 2 1 1 0 0 1 0 2 0 1 2 2 0 0 2 1 1 1 1 1 1 1 1 1 1 0 2 1 0 1 1 0 0 0 2 0 2 1 0 1 2 1 1 1 1 2 2 1 1 1 1 1 2 1 2 1 1 0 0 0 2 1 0 2 0 1 1 1 1 2 1 1 0 0 1 0 1 2 1 1 2 2 1 1 1 1 1 1 2 1 2 1 2 2 2 1 1 1 2 1 0 1 0 1 1 1 0 2 0 1 2 2 1 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 0 2 1 1 1 2 1 1 1 1 1 0 1 2 1 1 1 1 2 1 0 2 1 0 0 1 1 2 0 2 1 1 1 0 0 1 1 1 2 0 1 0 1 0 2 1 0 1 2 1 1 2 1 1 2 2 2 1 1 2 1 0 2 2 1 0 1 0 2 1 1 1 1 1 1 1 1 1 1 1 0 2 1 2 2 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 2 1 1 0 2 1 1 1 1 1 1 1 1 1 2 1 1 2 1 1 0 1 2 2 1 0 2 1 0 0 1 1 1 1 2 1 1 1 2 1 0 1 0 1 1 1 1 1 1 1 1 1 1 2 1 2 1 1 1 1 1 1 1 1 2 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 2 1 0 1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 0 1 1 2 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 0 1 1 0 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 2 1 0 0 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 0 10 10 10\") == \"10\"\nassert solution(\"2 2 1 1 1\") == \"1\"\nassert solution(\"4 5 0 10 10 10\") == \"10\"\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"X\"\n\"\"\"\n\nfrom math import gcd\n\nstdin = \"0 2 0 0 2\"\n\nn, a = [int(e) for e in stdin.split()]\nal = [int(e) for e in stdin.split()]\n\nm = len(al)\n\nans = []\n\nfor i in range(n):\n    ans.append(sum(al))\n    for j in range(m):\n        ans[i] = ans[i] - gcd(ans[i], al[j])\n        ans[i] = ans[i] + (a * al[j])\n\nprint(min(ans))\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 5 5\") == \"3\"\nassert solution(\"3 3 1 1\") == \"6\"\nassert solution(\"4 3 5 5\") == \"3\"\nassert solution(\"4 3 1 1\") == \"8\"\nassert solution(\"5 3 1 1\") == \"11\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 6 1 7 8\") == \"12\"\nassert solution(\"5 6 7 8 3\") == \"10\"\nassert solution(\"5 6 7 8 1\") == \"11\"\nassert solution(\"1 1 1 1 1\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 1 2 0 1 0 1 2 2 2\") == \"4\"\nassert solution(\"0 2 2 0 1 0 1 2 2 2\") == \"6\"\nassert solution(\"0 2 2 0 2 0 1 1 2 2 2\") == \"4\"\nassert solution(\"0 2 2 0 1 1 1 2 2 2\") == \"6\"\n\"\"\"\n\nfrom collections import Counter\nfrom functools import reduce\n\ns = input()\n\ncnt = Counter(s)\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n10 -5 2 -3 1''') == '110'\nassert solution('''6\n10 -5 2 -3 1\n4 3 -2 1\n5 -1 1 1\n3 1 -3 2\n10 -5 2 -3 1\n4 3 -2 1\n5 -1 1 1\n3 1 -3 2\n''') == '110'\nassert solution('''6\n10 -5 2 -3 1\n4 3 -2 1\n5 -1 1 1\n3 1 -3 2\n10 -5 2 -3 1\n4 3 -2 1\n5 -1 1 1\n3 1 -3 2\n''') == '110'\nassert solution('''4\n1 1 1 1\n4 5 -2 3\n4 5 -2 3\n3 2 1 1\n''') == '200'\nassert solution('''5\n10 -5 2 -3 1\n4 3 -2 1\n5 -1 1 1\n3 1 -3 2\n10 -5 2 -3 1\n4 3 -2 1\n5 -1 1 1\n3 1 -3 2\n''') == '110'\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5\n1 3 2 2 3\n\"\"\") == \"6\"\n\nassert solution(\"\"\"3\n3 5 4\n\"\"\") == \"8\"\n\nassert solution(\"\"\"4\n1 2 3 1\n\"\"\") == \"4\"\n\nassert solution(\"\"\"5\n1 1 2 2 3\n\"\"\") == \"8\"\n\nassert solution(\"\"\"5\n1 1 1 1 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 700\") == \"3\"\nassert solution(\"3 500\") == \"1\"\nassert solution(\"5 800\") == \"0\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 700\\n3 500\\n5 800') == '3'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s) == e\nprint(solution(input()))\n\nhttps://www.codewars.com/kata/5bbf5a6c4edef70032ff4c30\n\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\nassert solution(\"2 800\\n3 500\\n5 500\") == \"2\"\n\"\"\"\n\nD, G = [int(x) for x in stdin.strip().split()]\n\np, c = [0], [0]\n\nfor i in range(1, D + 1):\n    p.append(int(input()))\n    c.append(int(input()))\n\np_sum = [0] * (D + 1)\nc_sum = [0] * (D + 1)\n\nfor i in range(1, D + 1):\n    p_sum[i] = p_sum[i - 1] + p[i]\n    c_sum[i] = c_sum[i - 1] + c[i]\n\nans = 0\n\nfor i in range(1, D + 1):\n    if p_sum[i] < G:\n        continue\n\n    for j in range(i, D + 1):\n        if p_sum[j] >= G:\n            ans = max(ans, j)\n            break\n\nprint(ans)\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\nprint(\"Teste unit\u00e1rio passou com sucesso!\")\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\"\n\nfrom itertools import permutations\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 700') == '3'\n\"\"\""
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\n\"\"\""
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6') == '2'\nassert solution('8\\n4 8 8 7 8 4 4 5') == '2'\nassert solution('9\\n2 3 4 2 2 3 2 2 4') == '3'\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6\\n') == '2'\nassert solution('8\\n4 8 8 7 8 4 4 5\\n') == '2'\nassert solution('9\\n2 3 4 2 2 3 2 2 4\\n') == '3'\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 4 5 5 6\") == 2\nassert solution(\"8 4 8 7 8 4 4 5\") == 2\nassert solution(\"9 2 3 4 2 2 3 2 2 4\") == 3\n\"\"\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7\n5 5 4 5 5 5 6''') == '2'\nassert solution('''8\n4 8 8 7 8 4 4 5''') == '2'\nassert solution('''9\n2 3 4 2 2 3 2 2 4''') == '3'''\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\\n\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\\n\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\\n\") == \"3\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n\n\"\"\"\n\n\nfrom collections import Counter\nfrom typing import List, Callable\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6') == '2'\nassert solution('8\\n4 8 8 7 8 4 4 5') == '2'\nassert solution('9\\n2 3 4 2 2 3 2 2 4') == '3'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input().rstrip())\nl = list(map(int, input().rstrip().split()))\n\nmax_ = max(l)\nl_1 = [i for i in l if i!= max_]\nl_2 = [i for i in l if i == max_]"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 4 3 3') == '2'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 2 3\n5 1 3 10 1''') == '18'\nassert solution('''6 1 5\n10 30 30 70 10 10''') == '-1'\nassert solution('''4 3 1\n1 100 1 1''') == '100'\nassert solution('''4 1 5\n10 30 30 70 10 10''') == '100'\nassert solution('''4 1 5\n10 10 10 10 10''') == '-1'\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\\n\") == 18\nassert solution(\"6 1 5\\n10 30 30 70 10 10\\n\") == -1\nassert solution(\"4 3 1\\n1 100 1 1\\n\") == 100\n\"\"\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 1\\n1 100 1 1\\n\") == 100\nprint(\"OK!\")\n\n'''\n\nn, k, x = map(int, input().split(' '))\na = list(map(int, input().split(' ')))"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 3\\n10 100 1 1') == '100'\nassert solution('5 2 3\\n5 1 3 10 1') == '18'\nassert solution('7 3 4\\n1 1 1 1 1 1 1 1') == '-1'\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 2 3\n5 1 3 10 1''') == '18'\nassert solution('''6 1 5\n10 30 30 70 10 10''') == '-1'\nassert solution('''4 3 1\n1 100 1 1''') == '100'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 2 3\n5 1 3 10 1\n''') == '18'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1 3 10 1') == 18\n\"\"\"\nimport heapq"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1\\n') == '18'\nprint(solution(input()))\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"100\"\nassert solution(\"5 1 3\\n5 1 3 10 1\") == \"18\"\n\"\"\"\n\nimport itertools\nimport re\nimport math\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '6'\n\nassert solution('1 1 1') == '1'\nassert solution('1 2 3') == '6'\n\nassert solution('1 2 3 4') == '10'\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1111) == 'No'\nassert solution(2222) == 'Yes'\nassert solution(3333) == 'No'"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n5') == 'No'\nassert solution('3\\n3') == 'Yes'\nassert solution('3\\n9') == 'No'\nassert solution('1\\n9') == 'Yes'\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"No\"\nassert solution(\"4\") == \"No\"\nassert solution(\"5\") == \"Yes\"\nassert solution(\"6\") == \"Yes\"\nassert solution(\"7\") == \"Yes\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11\\n\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"Yes\"\nassert solution(\"10\") == \"Yes\"\nassert solution(\"15\") == \"No\"\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2) == 'Yes'\nassert solution(3) == 'Yes'\nassert solution(4) == 'No'\nassert solution(5) == 'Yes'"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\") == \"Yes\"\n\"\"\"\n\nimport math\nimport sys\nimport unittest"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11\") == \"Yes\"\n\"\"\"\n\nN = int(stdin.readline().strip())"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == '2 2 6'\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == expected_result\n\n'''\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\ncenter_coordinates = []\nheight = []\n\nfor i in range(N):\n    _, *args = sys.stdin.readline().split()\n    center_coordinates.append(tuple(map(int, args)))\n\nfor i in range(N):\n    _, *args = sys.stdin.readline().split()\n    height.append(tuple(map(int, args)))\n\nprint(tuple(map(lambda x, y: max(x, y), center_coordinates, height)))"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\"\n) == \"2 2 6\"\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n') == '2 2 6'\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\n\nN = int(stdin.readline().strip())\nfor i in range(N):\n    x, y, h = [int(j) for j in stdin.readline().split()]\n    print(x, y, h - max(abs(x), abs(y)) - max(abs(x), abs(y)) + h)\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('redcoder') == 1\nassert solution('awaglknagaw') == 3\n\nprint('Success')\n'''"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abc\") == 3\nassert solution(\"redcoder\") == 1\nassert solution(\"hellolikekakak\") == 1\nassert solution(\"saas\") == 1\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('code') == 'code'\nassert solution('redcoder') == '1'\nassert solution('redcode') == '2'\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('redcoder') == 1\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('redcoder') == 1\n\"\"\"\n\nstdin = input().strip()\nstdin = ''.join(set(stdin))\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aba\") == 0\nassert solution(\"abca\") == 1\nassert solution(\"aaaaa\") == 0\n\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a\") == 1\nassert solution(\"aa\") == 0\nassert solution(\"ab\") == 2\nassert solution(\"abc\") == 3\nassert solution(\"abcd\") == 4\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('redcoder') == 1\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"redcoder\") == 1\nassert solution(\"redcoder\") == 1\nassert solution(\"redcoder\") == 1\nassert solution(\"redcoder\") == 1\nassert solution(\"redcoder\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == 'Yes'\nassert solution('100') == 'No'\n\n------------\nfrom typing import List"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == 'Yes'\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(10)) == 'Yes'\nassert solution(str(27)) == 'Yes'\nassert solution(str(25)) == 'No'\nassert solution(str(48)) == 'Yes'\nassert solution(str(75)) == 'No'\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"15\") == \"No\"\nassert solution(\"2\") == \"Yes\"\nassert solution(\"25\") == \"No\"\nassert solution(\"20\") == \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == \"Yes\"\nassert solution('11') == \"No\"\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == 'Yes'\n\nassert solution('2') == 'No'\n\nassert solution('3') == 'No'\n\nassert solution('4') == 'Yes'\n\nassert solution('5') == 'Yes'"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10') == 'Yes'\nassert solution('23') == 'No'\nassert solution('123') == 'Yes'\nassert solution('254') == 'No'\nassert solution('789') == 'Yes'\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"100\") == \"No\"\nassert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"No\"\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == 'Yes'\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == 'Yes'\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4 9 7 5\\n') == 5\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n4 4 9 7 5''') == '5'\nassert solution('''5\n4 4 9 7 6''') == '5'\nassert solution('''7\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n4 4 9 7 5\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\n4 4 9 7 5''') == 5\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n4 4 9 7 5') == '5'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    l = list(map(int, sys.stdin.readline().split()))\n    d = defaultdict(int)\n    for i in l:\n        d[i] += 1\n\n    c = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i < j:\n                c += d[i] * d[j] * (d[i] - 1)\n    print(c)"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"5\\n\"\n    \"4 4 9 7 5\"\n) == \"5\"\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4 4 9 7 5\") == 5\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\"\n\nimport sys\nfrom tools import timing\n\n\n@timing\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n4 4 9 7 5') == '5'\nassert solution('3\\n2 1 2') == '1'\nassert solution('5\\n1 1 1 1 1') == '1'\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4 9 7 5\\n\") == \"5\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 5') == '10'\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5\\n') == '10'\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5\\n') == '10'\nassert solution('2 5\\n2 2') == '-1'\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5\\n') == '10'\nassert solution('1 1\\n') == '-1'\nassert solution('9 3\\n') == '-1'\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\") == \"10\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 5\\n') == '10'\n\"\"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 5') == '10'\n\"\"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    a, b = line.split()\n    try:\n        x = int(a) * int(b)\n        print(x)\n    except:\n        print(\"-1\")\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2\\n3 4') == '6'\nassert solution('1 3\\n2 4') == '-1'\nassert solution('5 6\\n8 9') == '-1'\nassert solution('5 6\\n5 6') == '30'\nassert solution('2 3\\n3 6') == '-1'\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4') == '-1'\nassert solution('2 1\\n3 2') == '-1'\nassert solution('2 3\\n1 2') == '-1'\nassert solution('2 3\\n1 2') == '-1'\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n\"\"\""
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5\\n10 12 1 2 14\\n') == '5'\nassert solution('2 5\\n5 9 5 1 12\\n') == '5'\nassert solution('2 5\\n1 2 4 3 10\\n') == '0'\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5\\n10 12 1 2 14\\n') == '5'\n\"\"\""
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n\"\"\"\nfrom __future__ import print_function\n\nimport sys\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2 5\n10 12 1 2 14\n\"\"\") == '5'\n\nassert solution(\"\"\"\n2 5\n10 12 1 2 14\n\"\"\") == '5'\n\n\"\"\"\nTEMPLATE:\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 5\\n10 12 1 2 14\\n') == '5'\n\"\"\"\nimport collections\nimport sys"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 5\\n10 12 1 2 14\\n') == '5'\n\"\"\""
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3') == '1\\n1110\\n1011'\nassert solution('4 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5') == '1\\n101001\\n111010'"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"4 4 3\n1 2\n2 3\n1 4\n4 3\n\"\"\"\n) == \"2\"\n\nassert solution(\n    \"\"\"4 6 3\n1 2\n2 3\n1 4\n4 3\n2 4\n1 3\n\"\"\"\n) == \"1\"\n\nassert solution(\n    \"\"\"5 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n\"\"\"\n) == \"2\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_stdin_1) == test_stdout_1"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\\n1011\"\n\n\"\"\"\nfrom __future__ import annotations\nfrom collections import defaultdict\nimport sys\nfrom typing import List, DefaultDict, Set, Dict, Tuple\n\nclass City:\n    def __init__(self, city: int):\n        self.city: int = city\n        self.connections: Set[City] = set()\n\n    def add_connection(self, connection: City):\n        self.connections.add(connection)\n\n\nclass Connection:\n    def __init__(self, connection: int):\n        self.city: int = connection\n        self.distance: int = 0\n\nclass Solution:\n    def __init__(self):\n        self.connections: DefaultDict[int, Connection] = defaultdict(Connection)\n\n    def find_min_distance(self, solution: List[int]) -> int:\n        \"\"\"\n        This method finds the minimal distance for a solution\n        \"\"\"\n        distance = 0\n        for i in range(len(solution) - 1):\n            distance += self.connections[solution[i]].distance\n\n        return distance\n\n    def add_connection(self, solution: List[int], from_city: int, to_city: int):\n        \"\"\"\n        This method adds a connection to a solution\n        \"\"\"\n        solution.append(to_city)\n        self.connections[from_city].distance += 1\n\n    def get_best_connection(self, solution: List[int]) -> int:\n        \"\"\"\n        This method finds the best connection to add to a solution\n        \"\"\"\n        shortest_distance = sys.maxsize\n        for from_city, connection in self.connections.items():\n            if connection.distance < shortest_distance and from_city not in solution:\n                shortest_distance = connection.distance\n                best_from_city = from_city\n        return best_from_city\n\n    def get_best_solution(self, k: int) -> List[int]:\n        \"\"\"\n        This method finds the best solution for a given k\n        \"\"\"\n        if k <= 0:\n            return []\n\n        # return solution for k == 1\n        if k == 1:\n            return [1]\n\n        solution = [1]\n        for _ in range(k - 1):\n            from_city = self.get_best_connection(solution)\n            self.add_connection(solution, from_city, from_city + 1)\n\n        return solution\n\n    def get_best_solutions(self, n: int) -> List[List[int]]:\n        \"\"\"\n        This method finds the best solutions for a given n\n        \"\"\"\n        return [self.get_best_solution(k) for k in range(1, n + 1)]\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1\\n101001\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"2\\n111100\\n110110\""
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\\n1011\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1\\n101001\\n111010\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"2\\n111100\\n110110\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\\n1011\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n4 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1011\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n\") == '1011'\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n\") == '101001'\n\"\"\""
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 3\") == \"1011\"\nassert solution(\"5 6 2\") == \"111100\"\nassert solution(\"1 2\") == \"101\"\nassert solution(\"5 6 2\") == \"111100\"\nassert solution(\"4 6 2\") == \"111100\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(5, [2, 1, 1, 2, 5]) == \"YES\"\nassert solution(3, [4, 5, 3]) == \"YES\"\nassert solution(2, [10, 10]) == \"YES\"\nassert solution(3, [1, 2, 3]) == \"NO\"\nassert solution(4, [1, 2, 3, 4]) == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n\n-----Hint-----\n\nThe solution is straightforward.\n\nYou can always increase the height of any part by 2. If you can increase the height of all the parts by 2, then Vova will eventually complete the wall with the help of bricks.\n\nLet's do the same thing with less code.\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 1 2 5') == 'YES'\nassert solution('3 5 3') == 'YES'\nassert solution('2 10') == 'YES'\nassert solution('3 10 10') == 'YES'\nassert solution('2 10') == 'YES'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 2 5\") == \"YES\"\nassert solution(\"3 1 2 3\") == \"YES\"\nassert solution(\"2 10\") == \"YES\"\nassert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 2 3\") == \"YES\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'YES'\nassert solution('2\\n10 10') == 'YES'\nassert solution('3\\n1 2 3') == 'NO'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 1 1 2 5\\n\") == \"YES\"\nassert solution(\"3 2 1 2 5\\n\") == \"YES\"\nassert solution(\"2 10 10\\n\") == \"YES\"\nassert solution(\"1 2 3\\n\") == \"NO\"\nassert solution(\"10 10\\n\") == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 1 2 5\\n\") == \"YES\"\nassert solution(\"3 1 2\\n\") == \"YES\"\nassert solution(\"2 10 10\\n\") == \"YES\"\nassert solution(\"3 10 10\\n\") == \"YES\"\nassert solution(\"1 2 3\\n\") == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\nassert solution(\"1000000000000000 1\\n-1 0 0 0 0\") == \"1\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'\n\"\"\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 4\\n-3 -6 5 4') == '-1'\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AZ\") == \"A\"\nassert solution(\"AA\") == \"AA\"\nassert solution(\"ZA\") == \"ZA\"\nassert solution(\"AZA\") == \"A\"\nassert solution(\"AZAZ\") == \"AZ\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n\n\"\"\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BBAABBBA\") == \"BB\"\n\nassert solution(\"AZAAAZAA\") == \"AA\"\n\nassert solution(\"ZZAAZZ\") == \"ZZ\"\n\nassert solution(\"AZAAZAAZAA\") == \"ZZ\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'\nassert solution('ABA') == 'AB'\nassert solution('ABACAB') == 'AB'\n\"\"\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABACABA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"west\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"ab\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('where') == 'here'\nassert solution('a') == ''\nassert solution('codeforces') == 'es'\nassert solution('yes') == 'es'\n\"\"\""
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('codeforces') == 9\nassert solution('yes') == 1\nassert solution('b') == 1\n\"\"\""
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"test\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"test\") == \"est\"\nassert solution(\"codeforces\") == \"es\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"test\") == 2\nassert solution(\"west\") == 2\nassert solution(\"codeforces\") == 9\nassert solution(\"yes\") == 7\n\nprint(solution(\"test\"))\nprint(solution(\"west\"))\nprint(solution(\"codeforces\"))\nprint(solution(\"yes\"))\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"b\"\nassert solution(\"ab\") == 1\nassert solution(\"codeforcesyes\") == 9\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('test') == 'est'\nassert solution('west') == 'est'\nassert solution('codeforces') == 'es'\nassert solution('yes') == 'es'\nassert solution('b') == 'ab'\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('test') == 2\nassert solution('codeforces') == 8\nassert solution('yes') == 1\nassert solution('b') == 1\n\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"b\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"ab\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n\"\"\"\n\nN, X = map(int, stdin.readline().split())\ncities = list(map(int, stdin.readline().split()))\n\nmaxD = 0\nfor d in range(1, N):\n    if cities[0] + d!= X:\n        break\n    if cities[-1] - d!= X:\n        break\n    maxD = d\n\nprint(maxD)"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n1 4 2 3 4\\n\") == \"2\"\nassert solution(\"5 6\\n1 2 3 4 5 6\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 3\n1 7 11''') == '2'\nassert solution('''5 5\n7 7 7 7 7''') == '2'\nassert solution('''5 5\n5 5 5 5 5''') == '0'\nassert solution('''5 5\n1 2 1 3 4''') == '0'\n\n\"\"\"\nT = int(input())\nfor _ in range(T):\n    N, X = map(int, input().split())\n    max_d = 0\n    for i in range(N):\n        max_d = max(max_d, max(map(int, input().split())))\n    print(max_d)\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 7 11\\n') == '2'\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == 2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input) == output\n\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n3 3\n1 7 11\n\"\"\"\n) == \"\"\"\n2\n\"\"\"\nprint(*solution(input()), sep=\"\\n\")\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\nassert solution(\"abababa\") == \"No\"\nassert solution(\"akasakka\") == \"Yes\"\nassert solution(\"amamam\") == \"Yes\"\nassert solution(\"nnnnnn\") == \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(s) == expected_output\n\n------\n\n----\n----\n\n------\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcdcba\") == \"Yes\"\nassert solution(\"madam\") == \"Yes\"\nassert solution(\"abccba\") == \"Yes\"\nassert solution(\"aabcdefgaa\") == \"Yes\"\nassert solution(\"abacde\") == \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('akasaka') == 'Yes'\nassert solution('banana') == 'No'\nassert solution('noonabbad') == 'Yes'\nassert solution('aabaaaa') == 'Yes'\nassert solution('abccbaa') == 'No'"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"abca\") == \"Yes\"\nassert solution(\"abcba\") == \"Yes\"\nassert solution(\"abccba\") == \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('akasaka') == 'Yes'\nassert solution('baka') == 'No'\n\"\"\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(akasaka) == \"Yes\"\nassert solution(house) == \"No\"\nassert solution(house) == \"No\"\nassert solution(house) == \"No\"\nassert solution(akasaka) == \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('akasaka') == \"Yes\"\n\"\"\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('198 1.10') == '217'\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e solution(a, b), \u0433\u0434\u0435 a \u0438 b \u2013 \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0446\u0435\u043b\u0443\u044e \u0447\u0430\u0441\u0442\u043d\u0443\u044e \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f a \u043d\u0430 b \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0430 \u0438 b \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u043e\u0439 \u0447\u0430\u0441\u0442\u043d\u043e\u0439 a \u043d\u0430 b. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f a \u0438 b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0440\u0430\u0432\u043d\u044b 3 \u0438 3, \u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0447\u0438\u0441\u043b\u043e 3.\n\n\u041f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0430\n\u0414\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0447\u0430\u0441\u0442\u043d\u043e\u0433\u043e.\n\u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0447\u0430\u0441\u0442\u043d\u043e\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0432\u043d\u043e \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0435 \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430 \u0430 \u043d\u0430 \u0447\u0438\u0441\u043b\u043e b.\n\u0415\u0441\u043b\u0438 \u0432\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u044d\u0442\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0447\u0430\u0441\u0442\u043d\u043e\u0439 \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u0442\u0430\u0442\u044c \u0440\u0430\u0432\u043d\u044b\u043c \u0447\u0438\u0441\u043b\u0443 b.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f a \u0438 b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0440\u0430\u0432\u043d\u044b 3 \u0438 3, \u0442\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0432 \u043b\u044e\u0431\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0442\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043e\u0442 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0447\u0430\u0441\u0442\u043d\u043e\u0433\u043e \u0438 \u0432\u0435\u0440\u043d\u0435\u0442 3.\n\u0414\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u0441\u0435\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c, \u0447\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0432 \u043f\u0440\u0438\u0432\u0435\u0434\u0451\u043d\u043d\u043e\u043c \u0432\u044b\u0448\u0435 \u0441\u043b\u0443\u0447\u0430\u0435.\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('198 1.10') == '217'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''198 1.10''') == \"217\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('198 1.10') == '217'\nprint('Test passed')\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('198 1.10') == '217'\n\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\n\na, b = input().split()\nprint(int(a * float(b)) // 1)\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"6\\n\"\n    \"7\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"3\\n\"\n    \"2000000000\\n\"\n    \"763243547\\n\"\n) == \"3\\n0\\n0\\n1\\n999999999\\n381621773\""
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(s) == e\n\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n2\") == \"0\"\nassert solution(\"1\\n3\") == \"3\"\nassert solution(\"2\\n2\") == \"0\"\nassert solution(\"3\\n2\") == \"1\"\nassert solution(\"4\\n2\") == \"2\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2000000000\") == \"999999999\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2000000000\") == \"999999999\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1\\n2\\n3\\n4\\n5\\n6\\n') == '3'\nassert solution('7\\n1\\n2\\n3\\n4\\n5\\n6\\n') == '3'\n\"\"\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n7\n1\n2\n3\n2000000000\n763243547\n''') == '3\\n0\\n0\\n1\\n999999999\\n381621773'\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n4\\n4\\n1\\n1\") == \"4\"\nassert solution(\"7\\n6\\n5\\n4\\n3\") == \"0\"\nassert solution(\"6\\n1\\n1\\n1\\n1\\n1\") == \"5\"\nassert solution(\"7\\n1\\n1\\n1\\n1\\n1\\n1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n7\") == \"0\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"1\\n2\") == \"0\"\nassert solution(\"1\\n3\") == \"0\"\nassert solution(\"1\\n4\") == \"0\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n\") == \"0\"\nassert solution(\"1\\n\") == \"1\"\nassert solution(\"2\\n\") == \"2\"\nassert solution(\"3\\n\") == \"3\"\nassert solution(\"4\\n\") == \"1\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1') == '3'\nassert solution('5 4 5\\n1 2\\n2 3\\n3 4\\n4 1') == '1'\n\n\"\"\"\n\n\"\"\"\nN, M, S = map(int, input().split())\nedges = [[] for _ in range(N)]\nfor _ in range(M):\n    u, v = map(int, input().split())\n    edges[u - 1].append(v - 1)\n    edges[v - 1].append(u - 1)\nfrom collections import deque\ndist = [-1] * N\ndist[S - 1] = 0\nq = deque([S - 1])\nwhile q:\n    v = q.popleft()\n    for u in edges[v]:\n        if dist[u] == -1:\n            dist[u] = dist[v] + 1\n            q.append(u)\nprint(dist.count(N - 1))\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3\\n2 3\\n1 5\") == \"1\"\nassert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\nassert solution('1 2') == '0'\n\nassert solution('1 2\\n1 3') == '0'\n\nassert solution('1 2\\n1 3\\n2 3') == '1'\n\nassert solution('1 2\\n1 3\\n2 3\\n3 4') == '1'"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 1\\n1 2\\n1 3\\n2 3\\n1 3') == '2'\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_data) == test_result\nprint(solution(input))\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n3 2 4 1') == '4'\nassert solution('6\\n1 1 1 4 4 4') == '5'\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 1 4 4 4\") == \"5\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 2 4 1\") == 4\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\n\"\"\"\n\na = [int(i) for i in stdin.split()]\nprint(max(a) + 1)\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '3'\nassert solution('4 4 4') == '3'\nassert solution('1 2 3 4') == '4'\nassert solution('1 3 1 4 1 2') == '3'\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\n\"\"\"\nfrom collections import Counter\n\nMAX_VALUE = 150000"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 2 3\") == 4\n\"\"\"\nimport sys\n\nfrom typing import List\n\nfrom collections import Counter\n\nimport sys\n\nclass Solution:\n    def max_weight(self, weights: List[int]) -> int:\n        weights.sort()\n        counts = Counter(weights)\n        max_weight = 0\n        for weight in weights:\n            if weight > max_weight + 1:\n                break\n            max_weight += weight\n        return max_weight"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3 2 4 1') == '4'\nassert solution('6\\n1 1 1 4 4 4') == '5'\n\"\"\"\n\nstdin = [int(x) for x in stdin.split('\\n')[:-1]]\ns = sum(stdin)\nn = len(stdin)\n\nfor _ in range(10000):\n    a = max(stdin)\n    if a > s // n:\n        print(len(stdin) + 1)\n        break\n    stdin.append(a)\n    stdin = sorted(stdin, reverse=True)\n    s = sum(stdin)\n    n = len(stdin)\n    stdin.remove(a)\n\n\"\"\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\\n\") == \"000001000002\\n000002000001\\n000001000001\""
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\\n\") == \"000001000002\\n000002000001\\n000001000001\"\n\n###"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 3\n1 32\n2 63\n1 12''') == '000001000002\\n000002000001\\n000001000001'\n\n\"\"\"\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\np, y = [], []\nfor _ in range(n):\n    p.append(sys.stdin.readline().rstrip())\nfor _ in range(m):\n    y.append(sys.stdin.readline().rstrip())\n\nfor i in range(m):\n    prefecture, year = p[y[i] - 1], y[i]\n    if len(prefecture) < 6:\n        prefecture = \"0\" * (6 - len(prefecture)) + prefecture\n    if len(str(year)) < 6:\n        year = \"0\" * (6 - len(str(year))) + str(year)\n    print(prefecture + year)"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\":\n1 2\n3 4\n:\") == \"000001000002\\n000111000001\"\n\n\"\"\"\n\nimport sys\nimport functools\n\nassert len(sys.argv) == 2\nlines = sys.argv[1].splitlines()\nassert len(lines) == 2\n\n(n, m) = list(map(int, lines[0].split()))\nassert n >= 1\nassert n <= 10 ** 5\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"\nimport re"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\\n\") == \"000001000002\\n000002000001\\n000001000001\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\"\nprint('Hooray')\n\n-----\nSample Input\n5 2\n1 1\n1 2\n1 3\n1 4\n1 5\n\nSample Output\n0101\n0110\n0111\n1000\n1011\n1010\n1011\n1010\n1101\n1110\n1111\n1100\n1101\n1110\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1110\n1111\n1110\n1110\n1110\n1100\n1111\n1100\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1100\n1110\n1111\n1100\n1111\n1110\n1110\n1110\n1110\n1111\n1110\n1110\n1100\n1110\n1110\n1110\n1110\n1110\n1100\n1111\n1100\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1100\n1111\n1110\n1110\n1110\n1100\n1111\n1100\n1110\n1111\n1110\n1110\n1110\n1110\n1110\n1110\n1110\n1100\n1111\n1100\n1100\n1110\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1110\n1100\n1111\n1110\n1110\n1100\n1111\n1110\n1110\n1110\n1110\n1110\n1110\n1100\n1111\n1100\n1100\n1110\n1110\n1111\n1100\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1100\n1111\n1100\n1110\n1111\n1110\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1100\n1111\n1110\n1111\n1110\n1110\n1100\n1111\n1110\n1100\n1111\n1110\n1110\n1110\n1110\n1110\n1110\n1100\n1110\n1110\n1110\n1110\n1100\n1100\n1100\n1100\n1100\n1110\n1110\n1110\n1110\n1100\n1100\n1110\n1100\n1110\n1110\n1110\n1110\n1110\n1100\n1100\n1100\n1100\n1100\n1110\n1110\n1110\n1110\n1110\n1100\n1100\n1110\n1100\n1110\n1110\n1100\n1110\n1110\n1110\n1110\n1110\n1100\n1110\n1110\n1110\n1100\n1110\n1110\n1110\n1100\n1110\n1100\n1100\n1100\n1100\n1100\n1110\n1110\n1110\n1110\n1100\n1100\n1100\n1110\n1110\n1100\n1100\n1110\n1110\n1100\n1110\n1110\n1110\n1100\n1100\n1110\n1100\n1110\n1110\n1100\n1110\n1100\n1110\n1110\n1100\n1100\n1100\n1100\n1110\n1100\n1110\n1110\n1110\n1100\n1110\n1110\n1110\n1110\n1100\n1100\n1110\n1110\n1100\n1110\n1110\n1110\n1110\n1110\n1110\n1110\n1100\n1110\n1110\n1110\n1100\n1110\n1110\n1110\n1100\n1110\n1110\n1110\n1110\n1100\n1110\n1110\n1100\n1110\n1100\n1100\n1100\n1100\n1100\n1110\n1110\n1110\n1110\n1100\n1110\n1110\n1110\n1110\n1110\n1100\n1110\n1110\n1110\n1100\n1110\n1110\n1110\n1100\n1100\n1110\n1110\n1100\n1110\n1110\n1100\n1110\n1110\n1110\n1100\n1100\n1100\n1110\n1110\n1110\n1110\n1110\n1110\n1110\n1110\n1100\n1100\n1110\n1100\n1100\n1100\n1100\n1100\n1100\n1100\n1100\n1100\n1100\n1100\n1100\n1100\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\"\n\"\"\""
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 10 8 40\\n\") == \"2\"\nprint(solution(\"4\\n2 10 8 40\\n\"))\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 10 8 40\") == \"2\"\n\"\"\"\n\nimport unittest\nimport os\nimport sys\nfrom io import StringIO\nfrom queue import PriorityQueue\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = int(stdin)\n        monster_hearts = list(map(int, stdin.split()))\n        monster_queue = PriorityQueue()\n        for monster_heart in monster_hearts:\n            monster_queue.put(monster_heart)\n\n        while monster_queue.qsize() > 1:\n            attack_monster_health = monster_queue.get()\n            attacked_monster_health = monster_queue.get()\n            monster_queue.put(attack_monster_health - attacked_monster_health)\n        \n        return str(monster_queue.get())\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution().solution\n\n    def test_1(self):\n        self.assertEqual(\n            \"2\",\n            self.solution(\"2 10 8 40\")\n        )\n\n    def test_2(self):\n        self.assertEqual(\n            \"0\",\n            self.solution(\"100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 10 8 40') == '2'\nassert solution('4 10 9 100') == '1'\nassert solution('1 1 1 1') == '1'\n\"\"\"\n\nimport sys\nimport random"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 10 8 40') == '2'\n\"\"\"\n\nimport sys\nimport random"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 10 8 40') == '2'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\narr = list(map(int, sys.stdin.readline().split()))\n\nalive = set(range(1, N + 1))\n\nwhile len(alive) > 1:\n    cur = alive.pop()\n    alive.difference_update(arr)\n    arr = list(alive)\n\nprint(alive.pop())\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10 8 40\") == \"2\"\n\"\"\""
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 10 8 40') == 2\n\"\"\"\nimport sys"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n4\n2 10 8 40\n''') == '2'\n\nassert solution('''\n3\n10 2 3\n''') == '5'\n\nassert solution('''\n5\n1 100 100 100 100\n''') == '1'\n\nassert solution('''\n3\n1 100 1\n''') == '1'\n\nassert solution('''\n3\n100 1 100\n''') == '100'"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 10 8 40\") == 2\n\n\"\"\"\n\nimport math\nimport sys\n\nsys.stdin = open(\"test_files/Y11R5P1/A.in\", \"r\")\nsys.stdout = open(\"test_files/Y11R5P1/A.out\", \"w\")"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 10 8 40\\n') == '2'\n\"\"\"\n\nfrom math import ceil, sqrt\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''?(____):-____<_,_<____,____<_,_<____,_<____.\n?(____+_+____):-____>_,_<____,_<_____,_<_____,_<_____,_<_,_<____,_<_.\n?(____+_+____+_):-____>_,_<_____,_<_____,_<_____,_<_____,_<_,_<____,_<_,_<_.\n?(____+_+____+_+_):-____>_,_<_____,_<_____,_<_____,_<_____,_<_,_<_____,_<_,_<_,_<_.\n?(____+_+____+_+_+_):-____>_,_<_____,_<_____,_<_____,_<_____,_<_,_<_____,_<_,_<_,_<_,_<_.\n?(____+_+____+_+_+_+_):-____>_,_<_____,_<_____,_<_____,_<_____,_<_,_<_____,_<_,_<_,_<_,_<_,_<_.\n?(____+_+____+_+_+_+_+_):-____>_,_<_____,_<_____,_<_____,_<_____,_<_,_<_____,_<_,_<_,_<_,_<_,_<_,_<_.\n?(____+_+____+_+_+_+_+_+_):-____>_,_<_____,_<_____,_<_____,_<_____,_<_,_<_____,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,_<_,"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"?(____/________)>________.>________\") == \"100100010\"\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430 \u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0432\u0441\u0435\u0445 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a \u0434\u043b\u0438\u043d\u044b k \u0438\u0437 n \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043f\u0440\u0438\u0447\u0451\u043c \u0432\u0441\u0435 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b.\n\n\u0421\u0443\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c k \u0432\u0441\u0435\u0445 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a n \u0447\u0438\u0441\u0435\u043b.\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u0451\u0442\u0441\u044f \u0434\u043b\u0438\u043d\u0430 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a n, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0432 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0438\u0434\u0443\u0442 n \u0447\u0438\u0441\u0435\u043b \u2014 \u0432\u0441\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430. \u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u0434\u043e \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0435\u0431\u044f. \u041f\u0435\u0440\u0432\u044b\u0435 n \u0441\u0442\u0440\u043e\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0432\u0441\u0435 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432\u044b\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u0432 \u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0441\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. \u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k, \u0437\u0430\u0434\u0430\u044e\u0449\u0435\u0435 \u0442\u0438\u043f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 k \u2260 0, \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f k \u0432\u0441\u0435\u0445 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0442 \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0437\u0430\u0434\u0430\u0447\u0438.\n\n\u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c \u0432 \u043b\u0435\u043a\u0441\u0438\u043a\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 k = 0, \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0447\u0438\u0441\u0435\u043b. \u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0435\u0441\u044f \u0447\u0438\u0441\u043b\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u041d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n \u0438 \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u0432\u0441\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043e\u0442 \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u0434\u043e \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0435\u0431\u044f. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0442 1000. \u0412 \u0441\u0442\u0440\u043e\u043a\u0435 \u0442\u0430\u043a\u0436\u0435 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 10000 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.\n\n\u041d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u0422\u0440\u043e\u0439\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0434\u043b\u0438\u043d\u044b k. \u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0442\u0430\u043a: \"\u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432 \u043b\u0435\u043a\u0441\u0438\u043a\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435\". \u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 k = 0, \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u0432 \u0432\u0438\u0434\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0447\u0438\u0441\u0435\u043b. \u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0435\u0441\u044f \u0447\u0438\u0441\u043b\u0430.\n\"\"\""
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"?(____-__*__):-__>__\") == \"0101\"\nassert solution(\"?(__+__-__):-__>__\") == \"0010\"\nassert solution(\"?(___-__*__):-__>__\") == \"false\"\n\n'''\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('?(___+__-___):-___>__.') == '0101'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == output()\n\n\"\"\"\n\nimport math\nimport functools\nimport re\nimport string\nfrom itertools import chain\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"?(___)-__+_*__+___/__________.__*______________\") == \"0250341\"\nassert solution(\"?(___)-___+_*__+___/__________.__*______________\") == \"0101\"\nassert solution(\"?(____)-__+_*__+___/__________.__*______________\") == \"false\"\nassert solution(\"?(_____)-__+_*__+___/__________.__*______________\") == \"false\"\nassert solution(\"?(______)-__+_*__+___/__________.__*______________\") == \"false\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"?(___+___-____):-___>__\") == \"0250341\"\nassert solution(\"?(___+___-____):-___>__,_____<__\") == \"false\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\") == \"0250341\"\nassert solution(\"?(__+___+__-___):-___>__\") == \"0101\"\n\"\"\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"?(_-_-_/___*__):-__>__,_____<__.__\") == \"0250341\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__.__\") == \"false\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.__\") == \"0250341\"\n\n\"\"\""
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('?(_-*__):-__<__,__<__. ') == '10'\nassert solution('?(__-_+_/_____):-__>__,_____<__. ') == 'false'\nassert solution('?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______. ') == '0250341'\n\"\"\""
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"?(___+___-____/_____):-__<___,___<____,____<_____,_____<______,______<_______.\") == \"0250341\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 11\\n2 1 5\\n7 10 0\\n12 6 4\") == \"3\"\n\nassert solution(\"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"5\"\n\nassert solution(\"3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"0\""
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 11\") == 3\n\nassert solution(\"3 4 1000000000000000000\") == 0\n\nassert solution(\"3 4 2\") == 5\n\nassert solution(\"2 1 5\") == 3\n\nassert solution(\"7 10 0\") == 2"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\nassert solution(\"3 4 10000000001\") == \"1\"\n\nprint(\"The solution is correct!\")\n\"\"\""
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 11\") == 3\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readlines()\nk = int(input[0].split()[2])\ninput_list = [int(i) for i in input[1:]]\ninput_list_dp = [1] * (k + 1)\n\nfor i in input_list:\n    input_list_dp[i] = 0\n\nfor i in input_list:\n    for j in range(1, k+1):\n        if j >= i:\n            input_list_dp[j] += input_list_dp[j - i]\n\nprint(input_list_dp[-1])\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 11') == 3\nassert solution('3 4 2') == 5\nassert solution('3 4 1000000000000000000') == 0\n\nassert solution('3 4 1000000000000000000', 3) == 0\n\nassert solution('3 3 1000000000000000000', 3) == 0\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 11\") == 3\nassert solution(\"3 4 2\") == 5\nassert solution(\"3 4 1000000000000000000\") == 0\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3 11') == '3'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 3 11\n2 1 5\n7 10 0\n12 6 4''') == 3\n\nassert solution('''3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == 5\n\nassert solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == 0\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\"\n\nimport math\n\nn = int(input())\nt = input()"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"thisisexampletwo\") == \"plmaetwoxesisiht\"\n\"\"\"\n\nimport sys\n\nN = sys.stdin.readline().rstrip()\nT = sys.stdin.readline().rstrip()\n\nans = ''\n\nfor i in range(len(N)):\n    ans += T[len(T)-int(N[i]):] + T[:len(T)-int(N[i])]\n\nprint(ans)\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('codeforces') =='secrofedoc'\n\n\"\"\"\n\n\nfrom math import sqrt\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"orcesfedoc\") == \"rocesfedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\nYou can use print to test your code\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(codeforces) == \"secrofedoc\"\nassert solution(orcesfedoc) == \"rocesfedoc\"\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\nprint(\"The local tests are done. Click on 'Check' to earn cool rewards!\")\n\n-----Solution-----\n\nfor line in stdin.split('\\n'):\n    a, b = map(int, line.split())\n    print(a+b)\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 14\") == \"19\"\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 14\") == \"19\"\n\"\"\"\n\nimport sys\nimport io"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\"\"\"\n\na, b = [int(x) for x in stdin.split()]\nprint(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\n\"\"\"\n\na, b = [int(i) for i in stdin.strip().split()]\n\nprint(a+b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\nassert solution(\"123123\") == \"36\"\nassert solution(\"1 2 3 4\") == \"10\"\nassert solution(\"33 3\") == \"36\"\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 14\") == 19\nassert solution(\"1 2\") == 3\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1+1') == '>'\nassert solution('2+3') == '>+>'\nassert solution('3+5') == '>+>+>'\nassert solution('1+1+1') == '>+>+>+>'\nassert solution('1-1') == '<+<'\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1+2') == '++++++++>'\nassert solution('2-3') == '><+>-'\nassert solution('9-7') == '+++++++++>'\n\"\"\"\n\nimport sys\nimport re\n\n\nclass BrainfuckInterpreter:\n    def __init__(self, program):\n        self.cells = [0] * 30000\n        self.pos = 0\n        self.inputs = []\n        self.output = ''\n        self.program = program\n        self.commands = {\n            '+': self.sum,\n            '-': self.sub,\n            '>': self.inc,\n            '<': self.dec,\n            '[': self.open_bracket,\n            ']': self.close_bracket,\n            ',': self.put_input,\n            '.': self.get_output\n        }\n\n    def open_bracket(self):\n        self.cells[self.pos] += 1\n        self.pos += 1\n\n    def close_bracket(self):\n        self.pos -= 1\n        if self.cells[self.pos] == 0:\n            return True\n        self.cells[self.pos] -= 1\n\n    def inc(self):\n        self.cells[self.pos] += 1\n\n    def dec(self):\n        self.cells[self.pos] -= 1\n\n    def sum(self):\n        self.cells[self.pos] += self.cells[self.pos + 1]\n\n    def sub(self):\n        self.cells[self.pos] -= self.cells[self.pos + 1]\n\n    def put_input(self):\n        self.inputs.append(self.cells[self.pos])\n\n    def get_output(self):\n        self.output += chr(self.cells[self.pos])\n        self.pos += 1\n\n    def step(self):\n        op = self.program[self.pos]\n        if op in self.commands:\n            self.commands[op]()\n\n    def run(self):\n        i = 0\n        while i < len(self.program):\n            self.step()\n            i += 1\n        return self.output\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5+7+1+3-1\") == \">++.<+>[<+>-]<\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\"\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\")-]>\") == \"[-]<><\"\nassert solution(\")+]>\") == \"+]<><\"\nassert solution(\")--]>\") == \"]<><\"\nassert solution(\")[>-]>\") == \"]<>-]<\"\nassert solution(\")++[>-]>\") == \"]<<<-]<\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\"\n\"\"\""
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2+3') == '++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n'\nassert solution('9-7') == '+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n'\nassert solution('2+3') == '++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n'\n\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2+3\") == \"++++>\\n<[<+>-]<\\n++++++.\", \"1st example\"\nassert solution(\"9-7\") == \"+++++++++>\\n<[<->-]<\\n+++++++.\", \"2nd example\"\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2+3\") == \"++++>\"\nassert solution(\"9-7\") == \"+[<-]<\"\n\"\"\""
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9-7') == '+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.'\nassert solution('2+3') == '++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.'\nassert solution('9-7') == '+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.'\nassert solution('9-7') == '+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.'\n\nimport re"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solutionn"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"5\\n1\\n3\\n20\\n38\\n56\\n\"\n) == \"1\\n2\\n5\\n2\\n0\"\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('112123123412345$\\dots$') == '112123123412345'\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11212343232354$\\d\\d\\d\\d$1234\\n1234\") == \"1234\"\nassert solution
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"112123123412345$\\dots$\") == '1'\nassert solution(\"1$2$3$4$5$6$7$8$9$10$11$12$13$14$15$16$17$18$19$20$21$22$23$24$25$26$27$28$29$30$31$32$33$34$35$36$37$38$39$40$41$42$43$44$45$46$47$48$49$50$51$52$53$54$55$56$57$58$59$60$61$62$63$64$65$66$67$68$69$70$71$72$73$74$75$76$77$78$79$80$81$82$83$84$85$86$87$88$89$90$91$92$93$94$95$96$97$98$99\") == '2'\nassert solution(\"112111223123123123$\\dots$\") == '3'\nassert solution(\"12123123412312312312$\\dots$\") == '4'\nassert solution(\"121212121212121212$\\dots$\") == '5'\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"5\n1\n3\n20\n38\n56\n\"\"\") == \"\"\"1\n2\n5\n2\n0\"\"\"\n\nassert solution(\"\"\"4\n2132\n506\n999999999999999999\n1000000000000000000\n\"\"\") == \"\"\"8\n2\n4\n1\"\"\""
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"51256\") == \"0\"\nassert solution(\"51256551212\") == \"8\"\nassert solution(\"51256551212121212\") == \"0\"\nassert solution(\"1011121314151617181920\") == \"4\"\nassert solution(\"101112131415161718192020\") == \"4\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1122334455\") == \"1\"\nassert solution(\"11122334455\") == \"1\"\nassert solution(\"11122334455678\") == \"2\"\nassert solution(\"1112233445567890\") == \"7\"\nassert solution(\"111223344556789999\") == \"7\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"1\"\nassert solution(\"1$\\dots$2$\\dots$3\") == \"1\"\nassert solution(\"2$\\dots$3$\\dots$4$\\dots$5\") == \"2\"\nassert solution(\"3$\\dots$4$\\dots$5$\\dots$6\") == \"3\"\nassert solution(\"4$\\dots$5$\\dots$6$\\dots$7\") == \"4\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('575') == 4\nassert solution('1') == 0\nassert solution('10') == 1\nassert solution('1023') == 7\nassert solution('937') == 5\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"575\"\n) == \"4\"\nprint(\"PASSED\")"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('575') == '4'\n\"\"\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('575') == '4'\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('8') == '1'\nassert solution('9') == '0'\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('575') == 4\n\"\"\"\n\nn = int(stdin.readline().strip())"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('575') == 4\n\"\"\"\n\n\"\"\"\n\uc54c\uace0\ub9ac\uc998 \n1. 7\uacfc 5\ub97c \ubc18\ubcf5\ud558\uc5ec \ub9ac\uc2a4\ud2b8\uc5d0 \ub123\ub294\ub2e4.\n2. 3\uc744 \ubc18\ubcf5\ud558\uba74\uc11c \ud574\ub2f9 \uc218\uac00 \ub9ac\uc2a4\ud2b8\uc5d0 \uc788\uc73c\uba74 cnt\ub97c 1\uc529 \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n3. \uadf8\ub9ac\uace0 \uacb0\uacfc\ub97c \ucd9c\ub825\ud558\uba74 \ub41c\ub2e4.\n\"\"\"\n\nn = int(input())\nbase = [7, 5, 3]\ncnt = 0\nfor i in range(1, n+1):\n    num = str(i)\n    flag = True\n    for i in num:\n        if i == '7':\n            flag = False\n        if i == '5':\n            flag = False\n        if i == '3':\n            flag = False\n    if flag:\n        cnt += 1\nprint(cnt)"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"575\") == 4\nassert solution(\"10\") == 0\nassert solution(\"110\") == 1\n\n\"\"\"\nimport re"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('575') == 4\n\"\"\"\n\nfrom typing import List, Set\nimport unittest\n\nimport os\nfrom src.day_3.problem_3 import solution\n\n\nclass TestDay3Problem3(unittest.TestCase):\n    def test_solution(self):\n        for line in os.linesep.join([\n            '575',\n        ]).splitlines():\n            with self.subTest(line=line):\n                self.assertEqual(\n                    solution(line),\n                    4,\n                )\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9\\n3') == '4'\nassert solution('10\\n3') == '5'\nassert solution('11\\n3') == '6'\nassert solution('11\\n5') == '7'\nassert solution('11\\n7') == '9'\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(9) == 6\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1110101010') == 5\nassert solution('10110110') == 4\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('01110') == 1\nassert solution('11010') == 2\nassert solution('10110') == 3\nassert solution('11101') == 3\nassert solution('11110') == 3\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1111') == 0\nassert solution('1110') == 1\nassert solution('1011') == 2\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"111\") == 3\n\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11010') == 1\nassert solution('11110') == 2\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('011') == 2\nassert solution('111') == 2\nassert solution('000') == 1\nassert solution('001') == 1\n\n'''\n\nimport sys"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11100\") == 1\nassert solution(\"00100\") == 2\nassert solution(\"11010\") == 2\nassert solution(\"10010\") == 2\nassert solution(\"11110\") == 1\n\n\"\"\"\nimport collections\nimport sys\nfrom typing import List\n\nsys.setrecursionlimit(100000)\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"110\") == \"1\"\nassert solution(\"00110\") == \"3\"\nassert solution(\"11110\") == \"0\"\n\"\"\"\n\nfrom unittest import TestCase\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"101\") == 1\nassert solution(\"101010\") == 0\nassert solution(\"01\") == 1\nassert solution(\"00\") == 1\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n\n'''"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6 7 9 10 31\") == \"APPROVED\"\n\nassert solution(\"2 4 6 8 10 12\") == \"DENIED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 7 9 10 31\") == \"APPROVED\"\nassert solution(\"1 1 1 1 1\") == \"DENIED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 1 5 2\") == \"APPROVED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == 'APPROVED'\nassert solution('2 5 6 7 8') == 'DENIED'\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7 9 10 31\") == \"APPROVED\"\nassert solution(\"6 7 9 10 31\") == \"DENIED\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\nassert solution(\"5\\n10 1 2 4 8\") == \"APPROVED\"\nassert solution(\"5\\n1 1 2 4 8\") == \"DENIED\"\n\n'''"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n6 7 9 10 31') == 'APPROVED'\n\"\"\"\n\nN = int(stdin.readline())\n\nis_allowed = True\n\nfor i in range(N):\n    if int(stdin.readline()) % 2 == 0:\n        if int(stdin.readline()) % 3!= 0 and int(stdin.readline()) % 5!= 0:\n            is_allowed = False\n\nprint('APPROVED' if is_allowed else 'DENIED')\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RUDRD') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'No'\nassert solution('LLL') == 'No'\nassert solution('LDRRDRLLL') == 'No'\nassert solution('RRDRRLLRLLLLRLRRLLUU') == 'Yes'\nassert solution('LDRDRLLLDRDRLLRDRLDRL') == 'Yes'\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\n\"\"\"\n\n\"\"\"\nRUDLUDR\n\n0 1 2 3 4\nL R U D\n\n0 1 2 3 4\nL R U D\nR 1 2 3 4\n\n0 1 2 3 4\nL U U D\nU 1 2 3 4\n\n0 1 2 3 4\nL U U D\nU 1 2 3 4\nR 1 2 3 4\n\"\"\"\n\nS = input()"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RUDLUDR\") == 'Yes'\nassert solution(\"RUDRDRL\") == 'Yes'\nassert solution(\"RDLLULR\") == 'No'\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('RUDLUDR') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"LLRLLR\") == \"No\"\nassert solution(\"LRURUD\") == \"Yes\"\nassert solution(\"LLRLLUDRDDLRLUDRLRRU\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RULDR\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RUDRD') == 'No'\nassert solution('RUDRLD') == 'No'\n\n---\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n3\\n2\\n4\\n3\\n5') == '7'\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1\\n1\\n1\\n1\\n1') == '7'\nassert solution('4\\n3\\n2\\n4\\n3\\n5') == '7'\nassert solution('4\\n3\\n2\\n4\\n3\\n5\\n5') == '7'\nassert solution('5\\n3\\n2\\n4\\n3\\n5\\n5') == '7'\n\"\"\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n3\\n2\\n4\\n3\\n5') == '7'\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n3\\n2\\n4\\n3\\n5') == '7'\n\"\"\"\n\nimport sys\nimport math\n\nn = int(sys.stdin.readline().strip())\na, b, c, d, e = map(int, sys.stdin.readline().strip().split())\n\nres = 0\nremain = 0\nfor i in range(n):\n    temp = math.ceil((a + b + c + d + e) / 5)\n    if i == 0:\n        remain = temp\n    elif temp > remain:\n        remain = temp\n    a -= 1\n    b -= 1\n    c -= 1\n    d -= 1\n    e -= 1\n\nprint(remain)\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n1\n1\n1\n2\n1\n''') == '7\\n'\n\nassert solution('''5\n3\n2\n4\n3\n5\n''') == '7\\n'\n\nassert solution('''5\n3\n2\n4\n3\n5\n''') == '7\\n'\n\nassert solution('''5\n3\n2\n4\n3\n5\n''') == '7\\n'\n\nassert solution('''5\n3\n2\n4\n3\n5\n''') == '7\\n'"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3\\n2\\n4\\n3\\n5\") == \"7\"\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n') == 2\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == 2\n\"\"\"\n\nN = int(input())"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == 2\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3') == '4'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 2\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2\") == \"2\"\nassert solution(\"2\\n2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == 2\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == 2\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\n2') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == 5\nassert solution(\"10\") == 7\nassert solution(\"20\") == 19\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20') == '23'\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(10) == 13"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20\") == \"23\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20\") == \"23\"\n\"\"\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20\") == \"23\"\n\"\"\"\nimport math"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(23) == '23'\nassert solution(2) == '2'\nassert solution(20) == '23'\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"5\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\nassert solution('2') == '2'\nassert solution('20') == '23'\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12\") == \"2\"\nassert solution(\"1\") == \"2\"\nassert solution(\"23\") == \"23\"\nassert solution(\"5\") == \"7\"\nassert solution(\"7\") == \"7\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 1 3 2\") == '1'\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 1 3 2\") == 1\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"5 100 90 80\"\n) == \"23\"\n\"\"\"\nimport sys\n\ninput_1 = \"5 100 90 80\"\nsys.stdin = open(f\"inputs/input_{input_1}.txt\", \"r\")"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 100 90 80''') == '23'\nassert solution('''6 110 120 130''') == '26'\nassert solution('''5 115 130 125''') == '34'\nassert solution('''5 140 130 125''') == '37'\nassert solution('''8 100 120 130 140''') == '31'\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100 90 80\") == \"23\"\nassert solution(\"98 40 30 21 80\") == \"23\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\\n\") == \"23\"\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 100 90 80\n98\n40\n30\n21\n80''') == '23'\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\"\"\"\n\n\"\"\"\n------------------------------------------------\n|   |  |   |  |   |  |  |  |   |  |   |  |  |  |\n------------------------------------------------\n| 2 |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 3 |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 4 |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 5 |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 6 |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 7 |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 8 |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 9 |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 10|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 11|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 12|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 13|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 14|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 15|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 16|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 17|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 18|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 19|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 20|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 21|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 22|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 23|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 24|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 25|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 26|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 27|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 28|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 29|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 30|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 31|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 32|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 33|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 34|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 35|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 36|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 37|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 38|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 39|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 40|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 41|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 42|  |  |  |  |  |  |  |  |  |  |  |  |  |  |\n------------------------------------------------\n| 43|  |  |  |  |  |  |  |  |  |  |  |  "
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nassert solution(\"4 100 20 30\") == \"13\"\nassert solution(\"1 100 100 100\") == \"101\"\nassert solution(\"100 100 100 100\") == \"101\"\nassert solution(\"100 100 100 100\") == \"101\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\"\"\"\n\nimport sys\n\nn, a, b, c = map(int, sys.stdin.readline().split())\nl = [int(sys.stdin.readline()) for _ in range(n)]\n\nans = 10 ** 5\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\nprint(solution(\"5 100 90 80\"))\n\"\"\"\n\n\"\"\"\nSolution: \n\nFor each bamboo, we can use three types of magics:\nExtension Magic: Consumes 1 MP (magic point). Choose one bamboo and increase its length by 1.\nShortening Magic: Consumes 1 MP. Choose one bamboo of length at least 2 and decrease its length by 1.\nComposition Magic: Consumes 10 MP. Choose two bamboos and combine them into one bamboo. The length of this new bamboo is equal to the sum of the lengths of the two bamboos combined. (Afterwards, further magics can be used on this bamboo.)\nOur objective is to use some of these bamboos (possibly all) to obtain three bamboos of length A, B, C. We can get some bamboos of length A, B, C by using the magics in the following way:\nWe have N bamboos. The lengths (in centimeters) of these are l_1, l_2,..., l_N, respectively.\nOur objective is to use some of these bamboos (possibly all) to obtain three bamboos of length A, B, C.\nAt least how much MP is needed to achieve the objective?\n\nIn terms of the recursive solution, we need to choose a set of three bamboos. This is achieved by adding every possible triple of bamboos into a set of three. We can then iterate through all possible triple sets.\nFor each triple, we can take any number of Extension Magics. In order to use these magics, we have to add 1 to the length of the bamboo we are using and then add 1 to the length of the other bamboo we are using.\nComposition Magic can be used on any two bamboos. If we have two bamboos of length A and B, we can also use Composition Magic on A and B to get a bamboos of length A + B.\nExtension Magic can be used on any bamboo.\nShortening Magic can be used on any bamboo.\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80') == '23'\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\n\nassert solution('ABCXYZ', 2) == 'CDEZAB'\n\nassert solution('ABCXYZ', 3) == 'DGFXYZ'\n\nassert solution('ABCXYZ', 26) == 'ABCXYZ'\n\nassert solution('ABCXYZ', 27) == 'ABCXYZ'"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\nassert solution('AB') == 'BC'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nstring = sys.stdin.readline()\n\nresult = []\nfor char in string:\n    i = ord(char)\n    if i > ord('Z'):\n        i -= 26\n    result.append(chr(i+n))\n\nprint(''.join(result))\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'ABCXYZ'\n) == 'CDEZAB'\nassert solution(\n'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n) == 'BCDEFGHIJKLMNOPQRSTUVWXYZABC'\nassert solution(\n'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n) == 'ABCDEFGHIJKLMNOPQRSTUVWXYZABC'\n\nSample Input:\n2\nABC\n\nSample Output:\nCBA\n\nExplanation:\nA is the first character in the alphabet.\nAfter shifting the first character by 2, it becomes C.\nThen, after shifting the second character by 3, it becomes B.\nFinally, the result is CBA."
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\nassert solution('HIJKLMNOPQ') == 'JOPQABKI'\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\nassert solution(\"ABC\") == \"ABC\"\nassert solution(\"ZYX\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\n\"\"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\n\"\"\""
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\n\"\"\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n\"\"\""
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('3 5 2 3 2 4') == '3 4 2'\nassert solution('1 2750131 199999') == '199999'\n\"\"\"\n\nimport sys\nfrom math import sqrt\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n\"\"\"\n\nn = int(stdin.readline())\n\nprimes = [2]\n\nfor i in range(2, 300_001):\n    if i > 2 and i % 2 == 0:\n        continue\n\n    for j in primes:\n        if j > i:\n            break\n        elif i % j == 0:\n            break\n    else:\n        primes.append(i)\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\n\"\"\""
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\nassert solution('1 2750131') == '199999'"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n\"\"\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\nassert solution('1 2750131 199999') == '199999'\nassert solution('1 3') == '3'\nassert solution('1 10') == '10'\nassert solution('1 3') == '3'\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\nassert solution(\"1 2750131 199999\") == \"199999\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\n2 4 5 3 1') == '11111'\nassert solution('5 1\\n2 1 3 5 4') == '22111'\nassert solution('7 1\\n7 2 1 3 5 4 6') == '1121122'\nassert solution('5 1\\n2 4 5 3 1') == '21112'\n\n\"\"\""
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n2 4 5 3 1\") == \"11111\"\nassert solution(\"5 1\\n2 1 3 5 4\") == \"21112\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\nassert solution(\"5 1\\n2 4 5 3 1\") == \"21112\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n2 4 5 3 1\") == \"11111\"\nassert solution(\"5 1\\n2 1 3 5 4\") == \"21112\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n2 4 5 3 1') == '11111'\nassert solution('5 1\\n2 1 3 5 4') == '22111'\nassert solution('7 1\\n7 2 1 3 5 4 6') == '1121122'\nassert solution('5 1\\n2 4 5 3 1') == '21112'\n\nprint('The solution is correct!')\n\n\n\n-----Problem-----\n\nYou are given a string s consisting of lowercase Latin letters. You need to find the number of ways of splitting s into two non-empty substrings (two continuous substrings of s) such that the sum of the lengths of these substrings is even.\n\n-----Input-----\n\nThe first and the only line of the input contains a string s of length $n \\ge 1$.\n\n-----Output-----\n\nPrint the number of ways of splitting s into two non-empty substrings such that the sum of their lengths is even.\n\n-----Examples-----\nInput\n\n1\n\nOutput\n\n1\n\nInput\n\n2\n\nOutput\n\n1\n\nInput\n\n3\n\nOutput\n\n2\n\n-----Note-----\n\nThe length of the whole string is always even.\n\nIn the first example we have only one way of splitting the string, so the answer is 1.\n\nIn the second example we have two ways of splitting the string:\n\n1) s[0:1] + s[2:3]\n2) s[1:2] + s[3:4]\n\nAnd in the third example we have four ways of splitting the string:\n\n1) s[0:1] + s[2:3] + s[4:5] + s[6:7]\n2) s[0:2] + s[2:4] + s[4:6] + s[6:8]\n3) s[0:3] + s[3:5] + s[5:7] + s[7:9]\n4) s[0:4] + s[4:6] + s[6:8] + s[8:10]\n\"\"\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2') == '1111'\nassert solution('5 1') == '2211'\nassert solution('7 1') == '11222'\nassert solution('5 2') == '11112'\nassert solution('7 2') == '22112'\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n2 4 5 3 1\") == \"11111\"\nassert solution(\"5 1\\n2 1 3 5 4\") == \"22111\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\nassert solution(\"5 1\\n2 4 5 3 1\") == \"21112\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\n\n\"\"\""
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n2 4 5 3 1\") == \"11111\"\nassert solution(\"5 1\\n2 1 3 5 4\") == \"21112\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\nassert solution(\"5 1\\n2 4 5 3 1\") == \"21112\"\nassert solution(\"7 1\\n7 2 1 3 5 4 6\") == \"1121122\"\n\n\"\"\"\n\nimport sys\nimport collections\n\nn, k = map(int, sys.stdin.readline().split())\na = collections.Counter(map(int, sys.stdin.readline().split()))\nnums = sorted(a.keys())\na = sorted(a.items(), key=lambda x: x[0])\n\ncount = k * 2\n\nwhile len(nums) > 1:\n    for i in range(n):\n        if i > 0 and a[i][0] - a[i - 1][0] <= k:\n            a[i][1] += a[i - 1][1]\n        if i < len(nums) - 1 and a[i][0] - a[i + 1][0] <= k:\n            a[i][1] += a[i + 1][1]\n    a = sorted(a, key=lambda x: x[0])\n    nums = nums[: len(a)]\n    a = a[: len(nums)]\n\nprint(''.join([str(count) for i in range(n)]))\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\nassert solution(\"5 1\") == \"21112\"\n\"\"\"\n\nn, k = map(int, input().split())\nskill = list(map(int, input().split()))\n\nskill.sort()\nskill = skill[::-1]\n\nres = []"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2') == '11111'\nassert solution('5 1') == '21112'\nassert solution('7 1') == '1121122'\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '5 2'\n) == '11111'\n\"\"\"\nimport heapq"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 3 7') == 4\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\nd = {}\nb = [0] * n\n\nfor i in range(n):\n    d[a[i]] = d.get(a[i], 0) + 1\n\nfor i in range(n):\n    if d[a[i]] == 1:\n        b[i] = 0\n    else:\n        b[i] = b[i - 1] + 1\n\nprint(b[-1])\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 2 3\") == 2\nassert solution(\"1 3 3 7\") == 4\n\"\"\"\n\nimport itertools\n\na = [int(x) for x in input().split()]\n\nn = len(a)\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == \"2\"\nassert solution(\"4\\n1 3 3 7\") == \"4\"\nassert solution(\"2\\n100 1\") == \"2\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 1 2 3') == 2\nassert solution('2\\n100 1') == 2\nassert solution('4\\n1 3 3 7') == 4\nassert solution('1\\n100 1') == 2\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 1 2 3\\n\") == \"2\"\nassert solution(\"2\\n100 1\\n\") == \"2\"\nassert solution(\"4\\n1 3 3 7\\n\") == \"4\"\n\"\"\"\n\na = [1, 3, 3, 7]"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 2 3\") == 2\nassert solution(\"100 1\") == 2\nassert solution(\"1 3 3 7\") == 4\n\nprint(\"Success\")\n\"\"\"\n\nfrom math import gcd\nfrom collections import Counter"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 1 2 3') == '2'\nassert solution('4\\n1 3 3 7') == '4'\nassert solution('2\\n100 1') == '2'\n\"\"\"\nimport sys\nimport sys\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == 2\nassert solution(\"2\\n100 1\") == 2\nassert solution(\"4\\n1 3 3 7\") == 4\nassert solution(\"3\\n100 1\") == 1\nassert solution(\"3\\n1 2 3\") == 6\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 1 2 3') == '2'\n\"\"\"\n\nfrom itertools import permutations\n\nn = int(input())\na = list(map(int, input().split()))\n\nb = list(map(int, input().split()))\nprint(len(set([tuple(permutation) for permutation in permutations(b)])))\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('16') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 4 5') == '2'\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\n\n-----Implementation-----"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7 1 5 4 9\") == \"1\"\nassert solution(\"4 7 1 5 4 9\") == \"2\"\nassert solution(\"1 1 1 1023\") == \"0\"\nassert solution(\"4 6 2 2 5 9\") == \"2\""
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 4 5') == '0'\nassert solution('1 1 1 1023') == '0'\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 4 1023') == '1'\nassert solution('1 1 1 1023') == '0'\nassert solution('16') == '1'\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_str_1) == test_output_str_1\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\n\"\"\"\n\nfrom math import log"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 1 1 1023\") == \"0\"\nassert solution(\"16\") == \"1\"\nassert solution(\"4 7 1 5 4 9\") == \"1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7 1 5 4 9\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"16\") == \"1\"\nassert solution(\"1 1 1 1023\") == \"0\"\nassert solution(\"4 7 1 5 4 9\") == \"1\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 7 1 5 4 9\") == '1'\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1110111010\") == 4"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1100') == 1\nassert solution('1111') == 2\nassert solution('1110') == 2\nassert solution('1111') == 4\nassert solution('1101') == 4\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"011100\") == 4\nassert solution(\"101111\") == 3\n\"\"\"\n\nfrom typing import List\nimport sys\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == '1'\nassert solution('11') == '0'\nassert solution('00') == '0'\nassert solution('01') == '1'\nassert solution('11010') == '2'\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0011') == '4'\nassert solution('0111') == '2'\nassert solution('1010') == '1'\n\n------\n\nimport sys"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0011\") == 4\nassert solution(\"01010\") == 0\n\"\"\"\nfrom __future__ import annotations\n\nclass Node:\n    def __init__(self, value: int) -> None:\n        self.value = value\n        self.left: Node | None = None\n        self.right: Node | None = None\n        self.next: Node | None = None\n\n    def __str__(self) -> str:\n        return f'[{self.value}]'\n\nclass BinaryTree:\n    def __init__(self, root: Node | None = None) -> None:\n        self.root = root\n\n    def add(self, value: int) -> None:\n        pass\n\n    def _find(self, node: Node | None, value: int) -> Node | None:\n        pass\n\n    def _traverse(self, node: Node | None) -> None:\n        pass\n\n    def _remove(self, node: Node | None, value: int) -> None:\n        pass\n\n    def remove(self, value: int) -> None:\n        pass\n\n    def __str__(self) -> str:\n        return self._traverse(self.root)\n\nclass Queue:\n    def __init__(self) -> None:\n        self.head = None\n        self.tail = None\n\n    def enqueue(self, value: int) -> None:\n        pass\n\n    def dequeue(self) -> None:\n        pass\n\n    def __str__(self) -> str:\n        return self._traverse(self.head)\n\n    def _traverse(self, node: Node | None) -> str:\n        pass\n\nclass Stack:\n    def __init__(self) -> None:\n        self.top = None\n\n    def push(self, value: int) -> None:\n        pass\n\n    def pop(self) -> None:\n        pass\n\n    def __str__(self) -> str:\n        return self._traverse(self.top)\n\n    def _traverse(self, node: Node | None) -> str:\n        pass\n\nclass StackOfCubes:\n    def __init__(self, stdin: str) -> None:\n        self.stdin = stdin\n        self.stack = None\n\n    def solution(self) -> int:\n        pass\n\n    def _build_tree(self, node: Node | None, parent: Node | None = None) -> None:\n        pass\n\n    def _build_tree_from_queue(self) -> None:\n        pass\n\n    def _build_tree_from_string(self) -> None:\n        pass\n\n    def _build_tree_from_stack(self) -> None:\n        pass\n\n    def _traverse(self, node: Node | None) -> None:\n        pass\n\n    def _traverse_queue(self) -> None:\n        pass\n\n    def _traverse_string(self) -> None:\n        pass\n\n    def _traverse_stack(self) -> None:\n        pass"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"011100\") == 4\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10011\") == \"1\"\nassert solution(\"11001100110011\") == \"1\"\nassert solution(\"11011110111010\") == \"5\"\nassert solution(\"10011011110111010\") == \"4\"\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('1') == 0\nassert solution('0') == 0\nassert solution('11') == 0\nassert solution('1011101') == 3\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n'''"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n\n\"\"\"\nOur solution (my solution):\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\ngates = list()\nfor i in range(M):\n    l, r = map(int, sys.stdin.readline().split())\n    gates.append((l, r))\n\ngates.sort()\n\ni = 0\npassed = 0\nwhile i < N:\n    j = i\n    while j < N and gates[j][0] <= gates[i][0]:\n        passed += 1\n        j += 1\n    i = j\n\nprint(passed)\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == '2'\nassert solution('4 1\\n1 3') == '0'\nassert solution('6 2\\n1 3\\n2 4\\n5 6\\n6 5') == '1'\n\"\"\"\n\nn, m = map(int, input().split())\n\ncnt = 0\nfor _ in range(m):\n    l, r = map(int, input().split())\n    cnt += max(0, r-l-1)\n\nprint(n-cnt)\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == 2\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('4 2\\n1 3\\n2 4') == '2'\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == '2'\n\n-----\n3 3\n1 3\n2 3\n3 1\n-----\n3\n\n0 1\n1 2\n2 1\n-----\n1\n\n-----\n4 5\n2 3\n2 4\n4 1\n1 2\n-----\n4\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 2 1') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n1 2 2 1''') == \"2\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nmax_value = a[0]\nfor i in a:\n    if max_value < i:\n        max_value = i\n        \ncount = 0\nfor i in range(0, len(a)):\n    if a[i] == max_value:\n        count = count + 1\n    else:\n        if max_value - a[i] <= 1:\n            count = count + max_value - a[i]\n        else:\n            count = count + 1\n            \nprint(count)"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 2 1\") == 2\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 2 1\") == 2\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\narr = list(map(int, sys.stdin.readline().split()))\n\ns = sum(arr)\n\nmax_left = 0\nmax_right = s\nwater_count = 0\n\nfor i in range(n):\n    if arr[i] > max_right:\n        water_count += max_right - max_left\n        max_right = max_left + arr[i]\n    max_left = max(max_left, arr[i])\n\nwater_count += max_right - max_left\n\nprint(water_count)\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 2 1\") == '2'\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 2 1') == 2\nprint(solution('4\\n1 2 2 1'), 2)\nassert solution('5\\n2 3 4 1 2') == 1\nprint(solution('5\\n2 3 4 1 2'), 1)\nassert solution('5\\n3 3 3 3 3') == 0\nprint(solution('5\\n3 3 3 3 3'), 0)\n\n'''"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n-1 1\\n-1 1\") == \"3\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == '3'\nassert solution(\"2 4\\n-1 1\") == '4'\n\"\"\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\\n2 1 -3\") == \"3\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\nassert solution(\"4 10\\n-1 1\") == \"4\"\n\"\"\"\n\nn, w = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nans = 0"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"3 5\") == \"3\"\nassert solution(\"3 6\") == \"0\"\n\"\"\"\n\nn, w = map(int, input().split())\na = [int(x) for x in input().split()]\n\ndp = [0] * (n + 1)\ndp[0] = 1\n\nfor i in range(n):\n    for j in range(1, min(w + 1, a[i] + 1)):\n        dp[i + 1] += dp[i]\n        if i > 0:\n            dp[i + 1] -= dp[i - 1]\n\nprint(dp[-1] % (10 ** 9 + 7))\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\\n2 1 -3\") == \"3\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430 \u00ab\u0421\u043f\u043e\u0440\u0442\u0441\u043c\u0435\u043d \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e \u0434\u0435\u043b\u0430\u0435\u0442 \u0441\u0442\u0430\u0432\u043a\u0443\u00bb\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435\n\u0414\u0435\u043d\u044c\u0433\u0438 \u0441\u0442\u0430\u043d\u043e\u0432\u044f\u0442\u0441\u044f \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e, \u043a\u043e\u0433\u0434\u0430 \u0441\u043f\u043e\u0440\u0442\u0441\u043c\u0435\u043d \u0432\u044b\u0440\u0432\u044b\u0432\u0430\u0435\u0442 \u0441\u0435\u0431\u0435 \u0437\u0430 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0441\u043f\u043e\u0440\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u0430. \u0412 \u0438\u0442\u043e\u0433\u0435 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0434\u0435\u043d\u0435\u0433 \u0438 \u043e\u043d \u0445\u043e\u0447\u0435\u0442 \u043d\u0430\u0439\u0442\u0438 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441, \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043d\u044f\u0442\u044c \u0441\u0447\u0430\u0441\u0442\u043b\u0438\u0432\u044b\u0439 \u0447\u0435\u043b\u043e\u0432\u0435\u043a. \u0412 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043c\u044b \u043f\u043e\u0434\u0441\u043a\u0430\u0436\u0435\u043c, \u043a\u0430\u043a \u044d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0434\u0432\u0443\u0445 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043e\u0432 \u043a\u043e\u043d\u043a\u0443\u0440\u0441\u043d\u043e\u0433\u043e \u0432\u0438\u0434\u0430. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442 \u0441\u0447\u0430\u0441\u0442\u043b\u0438\u0432\u043e\u0441\u0442\u044c \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0442\u0440\u0435\u0445 \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0438\u0437 \u043f\u044f\u0442\u0438 \u0443\u0440\u043e\u0432\u043d\u0435\u0439. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u0432\u044b\u0438\u0433\u0440\u044b\u0448 \u0441\u0440\u0430\u0437\u0443 \u043f\u043e\u043f\u0430\u0434\u0435\u0442 \u043e\u0434\u043d\u043e\u043c\u0443 \u0438\u0437 \u0442\u0440\u0435\u0445 \u0447\u0435\u043b\u043e\u0432\u0435\u043a, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0438\u043c\u044f \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u0438\u0433\u0440\u0430\u043b. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u043d\u0435\u0442, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0438\u0441\u043a\u043e\u043c\u043e\u0435 \u0441\u043b\u043e\u0432\u043e \u00ab\u041d\u0438\u0447\u044c\u044f\u00bb.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0447\u0438\u0441\u043b\u043e N (1 \u2264 N \u2264 100) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0432 \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0438 \u0437\u0430\u044f\u0432\u043e\u043a \u0447\u0435\u043b\u043e\u0432\u0435\u043a. \u0417\u0430\u0442\u0435\u043c \u0438\u0434\u0435\u0442 N \u0441\u0442\u0440\u043e\u043a, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0437\u0430\u044f\u0432\u043a\u0438 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0438 \u0432\u044b\u0431\u043e\u0440\u0430 \u0437\u0430\u044f\u0432\u0438\u0442\u0435\u043b\u044f. \u0414\u0430\u043b\u0435\u0435 \u0438\u0434\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u0447\u0438\u0441\u043b\u043e N (1 \u2264 N \u2264 100) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u044f\u0432\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c \u043a\u0430\u043a \u00ab\u0432\u044b\u0438\u0433\u0440\u044b\u0448\u043d\u044b\u0435\u00bb. \u0417\u0430\u0442\u0435\u043c \u0438\u0434\u0435\u0442 N \u0441\u0442\u0440\u043e\u043a, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u0430\u0436\u0434\u043e\u043c \u0437\u0430\u044f\u0432\u043a\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \"\u0447\u0430\u0441\u044b:\u0437\u0430\u044f\u0432\u0438\u0442\u0435\u043b\u044c\" (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \"9:A\", \"9:B\", \"9:C\", \u0438 \u0442.\u0434.). \u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u0441\u0442\u0440\u043e\u043a \u0441 \u0437\u0430\u044f\u0432\u043a\u0430\u043c\u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u043e\u0442 1 \u0434\u043e N \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u0438\u043d\u0430\u0447\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u00ab\u041e\u0448\u0438\u0431\u043a\u0430 \u0432\u0432\u043e\u0434\u0430\u00bb.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0437\u0430\u044f\u0432\u043a\u0438 \u0432 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u0447\u043a\u0443 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \"\u0447\u0430\u0441\u044b:\u0437\u0430\u044f\u0432\u0438\u0442\u0435\u043b\u044c\". \u0415\u0441\u043b\u0438 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u044f\u0432\u043e\u043a \u043e\u0434\u043d\u043e\u0433\u043e \u0437\u0430\u044f\u0432\u0438\u0442\u0435\u043b\u044f, \u043f"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 1 2\") == \"2\"\nassert solution(\"4 10\") == \"0\"\nassert solution(\"4 10 4 6\") == \"2\"\nassert solution(\"4 10 5\") == \"0\"\n\nprint(\"The tests for your solution are done.\")\n\n\"\"\"\n\nfrom collections import Counter\nimport sys\nsys.setrecursionlimit(5000)\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n\nimport sys"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n2 1 -3\") == \"3\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\nassert solution(\"4 10\\n-1 1\") == \"4\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split(' ')))"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\""
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == '9 3 6 12 4 8'\nassert solution(\"4\\n42 28 84 126\") == '126 42 84 28'\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == '3000000000000000000 1000000000000000000'\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\"\"\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n6\n4 8 6 3 12 9\n\"\"\"\n) == '9 3 6 12 4 8'\n\nassert solution(\n\"\"\"\n4\n42 28 84 126\n\"\"\"\n) == '126 42 84 28'\n\nassert solution(\n\"\"\"\n2\n1000000000000000000 3000000000000000000\n\"\"\"\n) == '3000000000000000000 1000000000000000000'\n\n\"\"\"\nimport stdin\nn = int(stdin.readline().rstrip())\nseq = list(map(int, stdin.readline().rstrip().split()))\nl = []\nfor i in range(n - 1):\n    if seq[i] % 3 == 0:\n        l.append(seq[i] // 3)\n        l.append(seq[i] * 2)\n    elif seq[i] % 3 == 1:\n        l.append(seq[i] // 3)\n        l.append(seq[i] * 2)\n        l.append(seq[i])\n    else:\n        l.append(seq[i] // 3)\n        l.append(seq[i] * 2)\n        l.append(seq[i] * 2)\nprint(' '.join(map(str, l)))\n\n\"\"\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\n\"\"\""
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 8 3 4 5\") == \"4 5 8 3 2 5\"\nassert solution(\"6\\n2 8 3 4 5 6\") == \"6 5 8 3 2 4 6\"\nassert solution(\"4\\n2 8 3 4 5\") == \"4 5 8 3 2\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\nassert solution(\"4\\n12 3 8 4\") == \"12 4 8 3 3\"\n\n\n\n\n\n-----BONUS-----\n\nYou can make the first line of the input empty, i.e. start with empty input.\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8 6 3 12 9') == '9 3 6 12 4 8'\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"4\\n42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"2\\n1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 8 6 3 12 9') == '9 3 6 12 4 8'"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n3 5 4 7 10 12') == '3\\n7 3 5'\nassert solution('5\\n-1 2 5 8 11') == '1\\n8'\nassert solution('6\\n8 4 9 16 8 16') == '2\\n4 9'\nassert solution('4\\n1 1\\n2 2\\n3 3') == '1\\n3'\nassert solution('3\\n1 2\\n3 4') == '0\\n1 2 3 4'\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5 4 7 10 12\") == \"3\"\nassert solution(\"1 2 5 8 11\") == \"1\"\nassert solution(\"-1 2 5 8 11\") == \"1\"\nassert solution(\"-1 -2 5 8 11\") == \"1\"\nassert solution(\"5 5 4 7 10 12\") == \"3\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\\n8\"\n\"\"\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 4 7 10 12\") == '3'\nassert solution(\"-1 2 5 8 11\") == '1'\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\n\n\"\"\"\n\n\nclass SieveOfEratosthenes:\n    def __init__(self, n):\n        self.n = n\n        self.primes = [True for i in range(n + 1)]\n        self.primes[0] = self.primes[1] = False\n        for i in range(2, int(n**0.5) + 1):\n            if self.primes[i]:\n                self.primes[i * i::i] = [False] * ((n - i * i - 1) // i + 1)\n\n    def get_primes(self):\n        return [i for i in range(len(self.primes)) if self.primes[i]]\n\n    def is_prime(self, i):\n        if 0 <= i < len(self.primes):\n            return self.primes[i]\n        else:\n            return False\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 4 7 10 12\") == \"3\"\nassert solution(\"-1 2 5 8 11\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"1 2 2 2\") == \"2\"\nassert solution(\"1 1 1 1 1\") == \"1\""
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n3 5 4 7 10 12') == '3\\n7 3 5'\nassert solution('5\\n-1 2 5 8 11') == '1\\n8'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 3 7 10 12\") == '3'\n\"\"\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\\n8\"\n\nimport collections\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n1 2 5 8 11\n''') == '''1\n8'''\nassert solution('''3\n5 4 7 10 12\n''') == '''3\n7 3 5'''\nassert solution('''2\n3 4\n''') == '''1\n4'''\nassert solution('''3\n3 4 5\n''') == '''1\n4'''\nassert solution('''4\n10 10 10 10\n''') == '''1\n10'''\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 3\\n') == '0 2'\n\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 3\\n') == '0 2'\n\n-----TESTS-----\n>>> solution('2 3 3\\n') == '0 2'\nTrue\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == '0 2'\nprint(solution(input()))\n'''\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\n\nimport sys\n\nA, B, K = map(int, sys.stdin.readline().split())\ntaka = A\naoki = B\nfor i in range(K):\n    if taka > 0 and aoki > 0:\n        taka -= 1\n        aoki -= 1\n    elif taka > 0:\n        taka -= 1\n    elif aoki > 0:\n        aoki -= 1\nprint(taka, aoki)\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 3\") == '0 2'\nassert solution(\"2 3 3\") == '0 2'\nassert solution(\"1 1 1\") == '0 0'\nassert solution(\"3 3 3\") == '0 1'\nassert solution(\"5 7 4\") == '0 4'\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\n\nA, B, K = [int(x) for x in input().split()]\n\ntakahashi = A\naoki = B\nfor _ in range(K):\n    if takahashi:\n        takahashi -= 1\n    elif aoki:\n        aoki -= 1\n    if not takahashi and not aoki:\n        break\n\nprint(takahashi, aoki)\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"2 3 3\n\"\"\") == \"0 2\"\nassert solution(\n\"\"\"1 2 2\n\"\"\") == \"0 1\"\nassert solution(\n\"\"\"1 2 3\n\"\"\") == \"1 1\"\nassert solution(\n\"\"\"1 2 0\n\"\"\") == \"1 2\"\nassert solution(\n\"\"\"2 2 2\n\"\"\") == \"0 0\"\n\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 3') == '0 2'\n\"\"\"\n\nA, B, K = map(int, stdin.readline().split())\n\ntakahashi = A\naoki = B\n\nfor i in range(K):\n    if takahashi >= 1:\n        takahashi -= 1\n    elif aoki >= 1:\n        aoki -= 1\n    else:\n        pass\n\nprint(takahashi, aoki)\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101') == '1'\nassert solution('103') == '3'\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"103\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100') == '3'\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('104') == '3'\nassert solution('101') == '1'\nassert solution('101010') == '1'\nassert solution('1010101010') == '8'\nassert solution('10101010101100') == '11'\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('103') == '3'\n\"\"\"\n\n\"\"\"\nhttps://yukicoder.me/problems/no/1296\n\n\u9ad8\u6a4b\u304f\u3093\u306f1\u65e5\u305a\u3064\u3001100\u5186\u3092\u5165\u308c\u3066\u3044\u307e\u3059\u3002\n1\u65e5\u306b1\u5186\u3082\u5165\u308c\u306a\u3044\u5834\u5408\u3001\u4f55\u65e5\u5f8c\u306b100\u5186\u3092\u5165\u308c\u308b\u3053\u3068\u3067\u7d2f\u8a08X\u5186\u306b\u306a\u308b\u304b\u6c42\u3081\u307e\u3059\u3002\n\n\u306a\u304a\u3001100\u5186\u3092\u5165\u308c\u308b\u3053\u3068\u3067\u7d2f\u8a08X\u5186\u306b\u306a\u308b\u305f\u3081\u306b\u306f\u3001\u632f\u66ff\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u632f\u66ff\u3059\u308b\u3068\u304d\u3001\u5165\u308c\u3089\u308c\u3066\u3044\u308b\u5186\u3092\u518d\u5165\u308c\u308b\u3053\u3068\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\n\u632f\u66ff\u3059\u308b\u3068\u304d\u306b\u306f\u3001\u632f\u66ff\u5148\u3068\u632f\u66ff\u524d\u306e\u3069\u3061\u3089\u304b\u4e00\u65b9\u306f100\u5186\u4ee5\u4e0a\u306b\u306a\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n\u4f8b\u3048\u3070\u3001\u632f\u66ff\u524d\u306b100\u5186\u3092\u5165\u308c\u305f\u5834\u5408\u3001\u632f\u66ff\u5f8c\u306b100\u5186\u3092\u5165\u308c\u308b\u306e\u306f\u51fa\u6765\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u632f\u66ff\u5f8c\u306b100\u5186\u3092\u5165\u308c\u308b\u3053\u3068\u3067\u7d2f\u8a08X\u5186\u306b\u306a\u3063\u305f\u5834\u5408\u3001\u632f\u66ff\u524d\u306b100\u5186\u3092\u5165\u308c\u308b\u3053\u3068\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\n\u305d\u3053\u3067\u3001\u632f\u66ff\u5f8c\u306b100\u5186\u4ee5\u4e0a\u306b\u306a\u3063\u305f\u5834\u5408\u3001\u3069\u306e\u3088\u3046\u306b\u5165\u308c\u308b\u304b\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101\") == \"1\"\nassert solution(\"1010\") == \"2\"\nassert solution(\"10101010\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100\") == \"3\"\n\nassert solution(\"999\") == \"18\"\nassert solution(\"1\") == \"1\"\nassert solution(\"12\") == \"5\"\nassert solution(\"123\") == \"10\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"101\") == \"1\"\nassert solution(\"102\") == \"2\"\nassert solution(\"103\") == \"3\"\nassert solution(\"104\") == \"5\"\n\nprint('Test pass.')\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('103') == '3'\nassert solution('1000') == '0'\nassert solution('9') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('103') == '3'\nassert solution('1') == '1'\nassert solution('1000') == '1'\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"1+1+1+1+1\"\nassert solution(\"7\") == \"1+1+1+1+1+1+1+1\"\nassert solution(\"3\") == \"1+1+1\"\n\"\"\"\n\n\"\"\"\nYou are given two numbers X and K. You have to find the position of the Kth number in the arithmetic progression X,X+1,X+2,\u2026,X+K-1,X+K.\n\nInput Format:\nThe first line of input contains T denoting the number of testcases. T testcases follow. Each testcase contains two lines of input. The first line contains X and K. The second line contains the elements of the arithmetic progression X,X+1,X+2,\u2026,X+K-1,X+K.\n\nOutput Format:\nFor each testcase, in a new line, print the Kth position of the progression.\n\nYour Task:\nThis is a function problem. You only need to complete the function findPosition and return the Kth position. The driver code automatically appends the newline.\n\nConstraints:\n1 <= T <= 100\n1 <= X,K <= 2000\n\nExample:\nInput:\n1\n4\n5 3\n1 2 3 4\n\nOutput:\n3\n\nExplanation:\nTestcase 1: The 4th element in the progression is 3.\n\nLOGIC\n-----\nWe can use Binary Search here. The idea is to perform a binary search on the progression\nby considering the sum of the first and last K elements.\n\nThe sum of the first K elements (where the sum of first N elements is defined as (N*(N+1)//2))\nwill always be equal to the sum of the last K elements (where the sum of last N elements is defined as (N*(N+1)//2 + (N*(N+1)//2))).\n\nHence, we can guess the Kth position in the progression by\ntaking the half of the difference of these two sums.\n\n\"\"\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"9\"\n\"\"\"\n\n\"\"\"\nSolution 2\n\"\"\"\n\nK = int(stdin.readline())"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '9'\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n') == '9'\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '9'\nassert solution('3') == '14'\n\nprint('Success')\n\nprint(\"Algorithms > Advanced > Greatest Common Divisor > \")\n\n\"\"\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('2 4 6') == '4'\nassert solution('10 12 16') == '12'\nassert solution('3 3 3') == '3'\nassert solution('2 4 5') == '2'\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == '9'\nprint(solution('2'))\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4') == '21'\nassert solution('2') == '9'"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 6\") == \"10\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n3 4 6\") == \"10\"\n\"\"\"\n\n\n\"\"\"\nSOLUTION:\n\n1. Find the maximum value of f(m) = (m \\ mod \\ a_1) + (m \\ mod \\ a_2) +... + (m \\ mod \\ a_N)\n2. Find the sum of all numbers from 1 to n\n3. Find the solution of f(m) = s\n4. The maximum value of f(m) is the solution of f(m) = s\n\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n3 4 6\\n\") == \"10\"\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n3 4 6''') == 10\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4 5') == '10'\n\"\"\"\n\nimport sys\n\ninputs = sys.stdin.readlines()\n\nN = int(inputs[0])\narr = [int(x) for x in inputs[1].split(' ')]"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 6\") == 10\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n4 6 3''') == '10'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nnums = sys.stdin.readline().split(' ')\n\nmax_value = -1\n\nfor i in range(N):\n    for j in range(i, N):\n        max_value = max(max_value, int(nums[i]) + int(nums[j]) - int(nums[i]) * int(nums[j]))\n\nprint(max_value)\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 6') == '10'\nprint(solution('3 4 6'))\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 6\") == \"10\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n4 4\") == \"Yes\"\nassert solution(\"1 2\\n3 4\") == \"No\"\n\nassert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\nassert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n3 3\") == \"No\"\n\"\"\"\n\nimport sys\n\ntests = int(input())\nfor test in range(tests):\n    N = int(input())\n    doublets = set()\n    for _ in range(N):\n        d1, d2 = map(int, sys.stdin.readline().split())\n        doublets.add(d1)\n        doublets.add(d2)\n    doublets = sorted(doublets)\n    for d in doublets:\n        if doublets.count(d) >= 3:\n            print(\"Yes\")\n            break\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\nprint(solution(\"1 2\\n6 6\\n4 4\\n3 3\\n3 2\"))\n\nassert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"No\"\nprint(solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\"))"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n\") == \"Yes\"\n\n\"\"\"\nfrom sys import stdin\n\nN = int(stdin.readline().rstrip('\\n'))\ni = 0\nwhile i < N - 1:\n    if stdin.readline().split(' ')[0] == stdin.readline().split(' ')[0]:\n        i += 1\n    else:\n        break\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 1\\n2 2') == 'Yes'\nassert solution('3\\n1 2\\n2 2') == 'No'\nassert solution('2\\n1 2\\n2 1') == 'Yes'\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n\") == \"Yes\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\nassert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2') == 'Yes'\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n6\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n6\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n6\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n6\\n6\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n6\\n6\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n6\\n6\\n6\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n6\\n6\\n6\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n6\\n6\\n6\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == 4\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"4\"\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"10\") == \"4\"\nassert solution(\"50\") == \"5\"\nassert solution(\"100\") == \"20\"\nassert solution(\"200\") == \"50\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '1\\n'\nassert solution('4') == '2\\n'\nassert solution('5') == '3\\n'"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == 1\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n') == '4'\n\"\"\"\n\nr = int(input().strip())\nprint(r * r * r // (r - 1))\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == expected_output\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\nPROBLEM:\nThe image in the input shows a square wall with a window. The wall is broken into vertical slices with walls at the top and bottom.\nYour task is to find the number of times the window area is larger than the slice area.\n\n-----Solution-----\nThe area of the window is the number of windows multiplied by the width of the window.\nThe area of a slice is the width of the slice multiplied by the number of vertical slices.\nThere are two vertical slices, so the area of the slice is 2 * 1 * 2 = 4.\nThe area of the window is 4 * 2 = 8.\nThe answer is 8 / 4 = 2.\n\n-----Input-----\nThere is one line of input containing the height of the wall.\n\n-----Output-----\nPrint the number of times the window area is larger than the slice area.\n\n-----Sample Input-----\n15\n\n-----Sample Output-----\n4\n\nExplanation\nThe image in the input shows a wall with 15 vertical slices, each of width 1.\nThe window area is 2 * 1 * 2 = 2.\nThere are four vertical slices where the area of the window is larger.\nSo the answer is 4.\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\nPROBLEM:\nThere is a rectangular room in which a person is standing. The room has a vertical wall that is N meters long.\nYou are standing on the floor at a point in the middle of this wall. You can see the top and bottom of the wall, but cannot see its end.\nYou can walk down the wall any number of times.\nYou can walk up the wall in any number of steps.\nThe person is walking the wall from the right to the left.\n\nYour task is to count the number of ways the person can walk from the right-hand end of the wall to the left-hand end.\nThe answer can be very large, so print it modulo 1000000007.\n\n-----Solution-----\nThe solution is as follows:\nWe can walk down the wall N times.\nWe can walk up the wall in 2*N-1 ways.\nWe can walk down the wall in 2*N-2 ways.\nWe can walk up the wall in 2*N ways.\nThe person can walk in 2*N ways.\nThe answer is the sum of the above formulas modulo 1000000007.\n\n-----Input-----\nThere is one line of input containing the number of steps the person can walk down the wall.\n\n-----Output-----\nPrint the number of ways the person can walk from the right-hand end of the wall to the left-hand end of the wall modulo 1000000007.\n\n-----Sample Input-----\n6\n\n-----Sample Output-----\n108\n\nExplanation\nThe person can walk in 3 ways:\n\nDown and up in 1 step.\nDown and down in 2 steps.\nDown and up in 3 steps.\nDown and down and up in 4 steps.\nUp and down in 1 step.\nUp and up in 2 steps.\nUp and up in 3 steps.\nUp and up and up in 4 steps.\nThe person can walk in 6 ways.\nSo the answer is 108.\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\nPROBLEM:\nYou are standing on the floor of a tall building. There is a door with n consecutive steps to open and you cannot open the door.\nYou can climb either 1 or 2 steps at a time.\nFind the number of ways you can climb the steps if you can take 1 or 2 steps at a time.\n\n-----Solution-----\nThe number of ways you can climb the steps if you can take 1 or 2 steps at a time is the number of ways you can climb the steps if you can take 1 or 2 steps at a time plus the number of ways you can climb the steps if you can take 1 or 2 steps at a time from the remaining steps.\n\n-----Input-----\nThere is one line of input containing the number n of steps.\n\n-----Output-----\nPrint the number of ways to climb the steps if you can take 1 or 2 steps at a time.\n\n-----Sample Input-----\n5\n\n-----Sample Output-----\n7\n\nExplanation\n5 possible ways:\nYou can take 1 step and 4 steps.\nYou can take 2 steps and 3 steps.\nYou can take 2 steps and 2 steps and 1 step.\nYou can take 1 step and 2 steps and 1 step.\nYou can take 1 step and 2 steps and 2 steps.\nYou can take 2 steps and 2 steps and 2 steps.\nThe remaining steps are 4 steps.\nThere are 4 possible ways to climb the remaining steps.\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\nPROBLEM:\nYou are standing in front of a fence with n posts, each has a height.\nEach post can be broken by a ball thrown from the first post with a height of 1 step, the ball can break any post.\nYou are going to break all the posts so that the first and the last post are not broken.\nThe height of the broken posts is 1 less than the original height.\nGiven the height of each post, print the number of ways to break all the posts.\n\n-----Solution-----\nWe can break the first and last post, because they are the shortest ones and if one is broken, the rest of the posts are necessarily longer.\nWe can break all the posts except for the first and the last ones.\nNow we have the number of ways to break all the posts if we break the first and the last one, and the rest of the posts.\nWe just have to add them together to get the total number of ways to break all the posts.\n\n-----Input-----\nThere is one line of input containing the number n of posts.\n\n-----Output-----\nPrint the number of ways to break all the posts.\n\n-----Sample Input-----\n6\n\n-----Sample Output-----\n9\n\nExplanation\nThe height of the posts is 6, broken in 3 ways:\n1 step, 4 steps.\n2 steps, 3 steps.\n3 steps, 2 steps.\n4 steps, 1 step.\n1 step, 3 steps.\n2 steps, 2 steps, 1 step.\n3 steps, 1 step.\n1 step, 2 steps, 2 steps.\nThere are 9 possible ways to break all the posts.\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\nPROBLEM:\nYou are standing at the head of a row of n houses, with n >= 1.\nYou can make a series of jumps of 1 or 2 steps in one direction.\nIf you end at the last house, you have to start over at the first house.\nCount the number of possible ways to go from the first house to the last one.\n\n-----Solution-----\nThe solution is as follows:\nFirst we need to find the number of ways to go from the first house to the second one.\nThen we need to count the number of ways to go from the second house to the third one.\nIf we can get to the last house, we count the ways to go from the first house to the second one + the ways to go from the second house to the third one +... + the ways to go from the last house to the first house.\nIf we cannot go to the last house, we count the ways to go from the first house to the second one + the ways to go from the second house to the third one +... + the ways to go from the last house to the first house.\nThe number of ways to go from the first house to the second one is obtained by adding all the ways to go from the first house to the i-th house, where 1 \\leq i \\leq n-1.\nThe number of ways to go from the second house to the third one is obtained by adding all the ways to go from the second house to the i-th house, where 1 \\leq i \\leq n-2.\n\n-----Input-----\nThere is one line of input containing the number of houses in the row.\n\n-----Output-----\nPrint the number of ways to go from the first house to the last one.\n\n-----Sample Input-----\n4\n\n-----Sample Output-----\n7\n\nExplanation\nThere are 7 possible ways:\n1 step in the first house\n1 step in the second house\n1 step in the third house\n2 steps in the first house\n1 step in the first house and 1 step in the third house\n1"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == 4\nassert solution(\"1\") == 1\nassert solution(\"100\") == 49\n\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 4\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 5 1\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\nassert solution(\"4\\n2 5 5 5\") == \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 8 5 1') == 'Yes'\nassert solution('4 8 5 1') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\nassert solution(\"5\\n3 2 4 1 5\") == \"No\"\nassert solution(\"5\\n1 1 1 1 1\") == \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 8 5 1') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 8 5 1\\n') == 'Yes'\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n\"\"\"\n\nfrom collections import Counter\nfrom math import ceil\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\nassert solution('4\\n1 4 8 3') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n\"\"\"\n\nn = int(input())\nlst = list(map(int, input().split()))"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == -1\nassert solution('1 1') == 0\nassert solution('1 0') == -1\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\\n\") == \"702\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 3\n1 7\n3 2\n1 7''') == '702'\nassert solution('''2 3\n1 7\n3 2''') == '-1'\nassert solution('''3 3\n1 7\n1 7\n3 2''') == '-1'\nassert solution('''1 1\n1 1''') == '0'\nassert solution('''3 1\n1 7\n3 2\n1 7''') == '702'\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"\n\nimport sys\nimport math\n\nn, m = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"\nimport numpy as np\n\nstdin = input().split()\nN = int(stdin[0])\nM = int(stdin[1])\nnumbers = []\nfor i in range(N):\n    numbers.append(list(map(int, input().split())))\n\nnumbers = np.array(numbers)"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '3 3\\n1 7\\n3 2\\n1 7') == '702'\nassert solution(\n    '3 3\\n1 7\\n3 2\\n1 7') == '702'\nassert solution(\n    '3 3\\n1 7\\n3 2\\n1 7') == '702'\nassert solution(\n    '3 3\\n1 7\\n3 2\\n1 7') == '702'"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str([3,2])) == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n') == '9'\n\"\"\"\n\nfrom sys import stdin\n\nn, k = [int(x) for x in stdin.readline().split()]\n\ncount = 0\nfor i in range(n):\n    for j in range(n):\n        if (i + j) % k == 0 and i!= j:\n            count += 1\n\nprint(count)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"9\"\n\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(expected_output)\n\nprint('Success')\n\"\"\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2') == '9'\n\"\"\"\nimport math"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n') == '9'\nassert solution('3 3\\n') == '0'\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2') == '9'\n\"\"\"\nfrom itertools import combinations\n\nN, K = map(int, input().split())\n\ntriples = combinations(range(1, N + 1), 3)\ncount = 0\nfor a, b, c in triples:\n    if (a + b) % K == 0 and (b + c) % K == 0 and (c + a) % K == 0:\n        count += 1\nprint(count)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n') == '9'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('2 3\\n') == '6'\nassert solution('5 5\\n') == '9'\n\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == 9"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('-9') == '1011'"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"-9\") == \"1011\"\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('-9') == '1011'\n\"\"\"\n\nfrom typing import List\n\nfrom common import input_as_list\n\nN = input_as_list('-9')\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('-9') == '1011'\nassert solution('1') == '1'\nassert solution('9') == '1001'\nassert solution('-123') == '101111011011011'\n\"\"\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"-9\") == \"1011\"\n\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"-9\") == \"1011\"\nprint(solution(\"-9\"))"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('-9') == '1011'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"-9\") == \"1011\"\nassert solution(\"3\") == \"11\"\nassert solution(\"-6\") == \"110\"\nassert solution(\"19\") == \"10011\"\nassert solution(\"-2147483648\") == \"10111111111111111111111111111110\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"-1\") == \"111111111111111111111111111111\"\nassert solution(\"0\") == \"0\"\nassert solution(\"10\") == \"1010\"\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def solution(self, stdin):\n        pass\n\n    def __init__(self):\n        pass\n\n\nclass unitTest(unittest.TestCase):\n    def setUp(self):\n        self.test_cases = [\n            (1, \"0\"),\n            (0, \"0\"),\n            (10, \"1010\")\n        ]\n        self.solution = Solution().solution\n\n    def test_solution(self):\n        for test_case in self.test_cases:\n            with self.subTest(test_case=test_case):\n                self.assertEqual(self.solution(test_case[0]), test_case[1])"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('-9') == '1011'\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 9\\n2 4\\n\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 9\\n2 4\") == '12'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n2 5\n4 9\n2 4\n''') == '12'"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"2 5\\n4 9\\n2 4\"\n) == \"12\"\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 9\\n2 4\\n\") == \"12\"\n\"\"\"\nimport sys\nfrom typing import List\nfrom bisect import bisect_left"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 5\\n4 9\\n2 4') == '12'\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n2 4\\n3 6') == '11'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\n\"\"\"\nfrom __future__ import annotations\n\nfrom collections import defaultdict\nfrom dataclasses import dataclass\nfrom typing import List, Dict\n\n__all__ = [\"Solution\"]\n\n\n@dataclass\nclass Solution:\n    \"\"\"\n    the solution to the given problem\n    \"\"\"\n\n    min_money: int\n    cans: List[List[int]] = None\n\n    @staticmethod\n    def load(stdin: str = None) -> Solution:\n        \"\"\"\n        load input and create solution\n        :param stdin: input string\n        :return: Solution object\n        \"\"\"\n\n        # parse input\n        lines = stdin.split(\"\\n\") if stdin else []\n\n        if not lines or len(lines) < 2:\n            raise ValueError(\"input is missing\")\n\n        n, m = list(map(int, lines[:2]))\n\n        cans = []\n        for i in range(n):\n            a, b = list(map(int, lines[2 * i + 2 : 2 * i + 4]))\n            cans.append([a, b])\n\n        # init\n        min_money = float(\"inf\")\n        solution = Solution(0, cans)\n\n        # solution\n        for x, y in cans:\n            if x * y < min_money:\n                min_money = x * y\n\n        return solution\n\n    def dump(self) -> str:\n        \"\"\"\n        dump solution\n        :return: the solution\n        \"\"\"\n\n        if not self.cans:\n            raise ValueError(\"solution is not loaded\")\n\n        return str(self.min_money)\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == '12'\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n10 4 8 7 3\\n') == '2'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\nh = list(map(int, sys.stdin.readline().strip().split()))\n\ndp = [0] * n\ndp[0] = 1\nfor i in range(1, n):\n    dp[i] = dp[i - 1]\n    if h[i] <= h[i - 1]:\n        dp[i] += 1\n\nprint(dp[-1])\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n5\n8\n9\n10''') == '2'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 4 8 7 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\nassert solution(\"4\\n2 1 3 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n5\n10 4 8 7 3\n\"\"\") == '2'\nassert solution(\n\"\"\"\n5\n3 5 6 8 7\n\"\"\") == '0'\nassert solution(\n\"\"\"\n1\n3\n\"\"\") == '1'\nassert solution(\n\"\"\"\n5\n10 10 10 10 10\n\"\"\") == '1'\nassert solution(\n\"\"\"\n10\n1 2 3 4 5 6 7 8 9 10\n\"\"\") == '10'\n\"\"\"\nimport sys\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n10 4 8 7 3') == '2'\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 2 1\") == 2\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n10 4 8 7 3\\n') == 2\n\"\"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == 2\n\"\"\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 2 4 5\") == \"2\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '1'\nassert solution('1 1 2 2 3 3') == '0'\n\"\"\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\\n\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\\n\") == \"2\"\nassert solution(\"5 3\\n1 2 3 3 3\\n\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\\n\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\\n\") == \"2\"\nassert solution(\"5 3\\n1 2 2 4 5\\n\") == \"1\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"2\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 2 4 5') == 1\nassert solution('1 2 3 4 5') == 2\n\n'''"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 2 4 5\\n\") == \"1\"\nassert solution(\"1 2 3 4 5\\n\") == \"2\"\nassert solution(\"1 2 2 2 1\\n\") == \"0\"\nassert solution(\"1 2 3 4 5\\n\") == \"2\"\nassert solution(\"1 2 3 3 3\\n\") == \"0\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '1'\nassert solution('5 3\\n1 2 3 4 5\\n1 2 3 3 3') == '0'\nassert solution('5 3\\n1 2 3 3 3\\n1 2 3 3 3') == '0'\nassert solution('5 3\\n1 2 3 3 3\\n1 2 3 3 3') == '0'\nassert solution('5 3\\n1 2 3 3 3\\n1 2 3 3 3\\n1 2 3 3 3') == '0'\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\\n\") == '1'\n\"\"\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 5\\n1 2 2 4 2 3') == 3\nassert solution('7 5\\n3 3 2 1 1 1 3') == 4\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 2 4 2 3') == 3\nassert solution('3 3 2 1 1 1 3') == 4\nassert solution('1 2 2 4 2 3') == 3\nassert solution('3 3 2 1 1 1 3') == 4\n\n\"\"\"\n\nfrom sys import stdin\n\nstdin = open(\"input.txt\", \"r\")"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 2 4 2 3\\n') == '3'\nassert solution('3 3 2 1 1 1 3\\n') == '4'\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5\\n1 2 2 4 2 3') == '3'\nassert solution('5 3\\n1 2 2 4 2 3') == '4'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 5\\n1 2 2 4 2 3') == '3'\n\nprint(solution(input()))"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 5\\n1 2 2 4 2 3') == 3\n\"\"\""
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n1 2 1\\n\") == \"4\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n1 2 2 4 2 3\") == 3\n\"\"\""
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 2 4 2 3\") == 3\n\"\"\"\n\nn, k = list(map(int, stdin.readline().split()))\na = list(map(int, stdin.readline().split()))\n\na.sort()\n\ncnt = 0\nwhile k > 0:\n    if a[-1]!= a[-2]:\n        a[-1] += 1\n        k -= 1\n    else:\n        a[-1] = a[-1] - 1\n        a[-2] = a[-2] - 1\n        cnt += 1\n\nprint(cnt)\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 2 3 3', '3') == '3'\n\"\"\""
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\"\"\"\n\nimport sys\n\ntest_input_one = \"4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\"\ntest_input_two = \"4 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\\n1 2 3 4\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_stdin) == test_stdout"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\"\"\""
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n1 1 1\\n1') == '0'\n'''\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\\n9\\n1000\\n42000000000000\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\"\nassert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"9\"\nassert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"1000\"\nassert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"42000000000000\"\n\n\"\"\""
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\\n\") == \"10\\n9\\n1000\\n42000000000000\"\nprint(solution(\"10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\\n\"))\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 6\\n3 4 5') == '2'\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6\\n3 4 5\\n\") == 2\n\n\"\"\"\nimport re"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 6\\n3 4 5') == '2'\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7\") == \"4\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"5 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6\") == \"2\"\nassert solution(\"1 3\") == \"0\"\nassert solution(\"1 2 3\") == \"0\"\nassert solution(\"1 2 2 1\") == \"0\"\nassert solution(\"1 2 2 3\") == \"0\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\n\n\"\"\"\nimport sys\n\nn, x = map(int, sys.stdin.readline().split())\nl = list(map(int, sys.stdin.readline().split()))\ncounter = 0\nfor i in range(n):\n    if l[i] > x:\n        break\n    counter += i + 1\nprint(counter)"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\n\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\\n3 4 5\\n\") == \"2\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"hoge\\ne\\nhoge\\nenglish\\n\") == \"Yes\"\nassert solution(\"hoge\\nhoge\\nenglish\\n\") == \"No\"\n\nimport re\n\nT = int(input())\n\nfor _ in range(T):\n    s = input()\n    if not re.match(r'^[a-zA-Z0-9]*$', s):\n        print(\"Invalid: \", s)\n        continue\n    if not re.search(r'[A-Z]', s):\n        print(\"Valid: \", s)\n        continue\n    print(re.search(r'[A-Z]\\1[a-z]*$', s))\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\"\n\nn = int(input())\nwords = [input() for _ in range(n)]\nans = True\nfor i in range(n - 1):\n    if not ans:\n        break\n    if words[i] in words[i + 1]:\n        ans = False\n        break\nprint(\"Yes\" if ans else \"No\")\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\nhoge\nenglish\nhoge\nenigma''') == 'No'\nassert solution('''4\nenglish\nhoge\nhoge\nenigma''') == 'Yes'\n\nassert solution('''3\nhoge\nhoge\nhoge''') == 'No'\nassert solution('''2\na\na''') == 'Yes'\n\nassert solution('''2\na\na\na\na''') == 'No'\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\nhoge\\nenglish\\nhoge\\nenigma') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"hoge\\nenglish\\nhoge\\nenigma\\n\") == \"No\"\nassert solution(\"hoge\\nhoge\\nhoge\\nhoge\\n\") == \"Yes\"\nassert solution(\"hoge\\nhoge\\nenigma\\nhoge\\nhoge\\nhoge\\nhoge\\n\") == \"Yes\"\nassert solution(\"hoge\\nhoge\\nhoge\\nhoge\\nenigma\\nhoge\\nhoge\\nhoge\\n\") == \"No\"\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4\nhoge\nenglish\nhoge\nenigma''') == 'No'\n\nassert solution('''5\nhoge\nhoge\nenigma\nenglish\nenglish''') == 'Yes'\n\nassert solution('''5\nhoge\nhoge\nenigma\nenglish\nenigma''') == 'No'\n\nassert solution('''5\nhoge\nhoge\nhoge\nhoge\nhoge''') == 'No'\n\nassert solution('''5\nhoge\nhoge\nhoge\nenigma\nenigma''') == 'No'"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n4\nhoge\nenglish\nhoge\nenigma\n''') == 'No'\n\nassert solution('''\n3\napple\napp\nbanana\n''') == 'Yes'\nassert solution('''\n1\nhoge\n''') == 'Yes'\nassert solution('''\n2\nhoge\nhuga\n''') == 'No'\nassert solution('''\n2\nhoge\nhuga\nhoge\nhuga\n''') == 'Yes'\n'''\n    def solution(stdin: str) -> str:\n        pass\n    return \"Yes\" if... else \"No\"\n'''\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n') == '6'\n\"\"\"\n\n\"\"\"\n- Naive Solution:\nTakahashi is organizing a party.\nAt the party, each guest will receive one or more snack pieces.\nTakahashi predicts that the number of guests at this party will be A or B.\nFind the minimum number of pieces that can be evenly distributed to the guests in both of the cases predicted.\nWe assume that a piece cannot be divided and distributed to multiple guests.\n\n-----Constraints-----\n - 1 \\leq A, B \\leq 10^5\n - A \\neq B\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nPrint the minimum number of pieces that can be evenly distributed to the guests in both of the cases with A guests and B guests.\n\n-----Sample Input-----\n2 3\n\n-----Sample Output-----\n6\n\nWhen we have six snack pieces, each guest can take three pieces if we have two guests, and each guest can take two if we have three guests.\n\"\"\"\n\n\"\"\"\n- Better Solution:\nTakahashi is organizing a party.\nAt the party, each guest will receive one or more snack pieces.\nTakahashi predicts that the number of guests at this party will be A or B.\nFind the minimum number of pieces that can be evenly distributed to the guests in both of the cases predicted.\nWe assume that a piece cannot be divided and distributed to multiple guests.\n\n-----Constraints-----\n - 1 \\leq A, B \\leq 10^5\n - A \\neq B\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nPrint the minimum number of pieces that can be evenly distributed to the guests in both of the cases with A guests and B guests.\n\n-----Sample Input-----\n2 3\n\n-----Sample Output-----\n6\n\nWhen we have six snack pieces, each guest can take three pieces if we have two guests, and each guest can take two if we have three guests.\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3') == 6\nprint(solution('2 3'))\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3') == '6'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3') == 6\nassert solution('1 1') == 1\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"4 1\") == \"4\"\nassert solution(\"9 6\") == \"2\"\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n'''\n\nfrom math import *\n\na,b = map(int,input().split())\nprint(ceil(max(a,b)//min(a,b))*min(a,b))\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"6\"\nassert solution(\"3 3\") == \"4\"\nassert solution(\"7 4\") == \"5\"\nassert solution(\"9 9\") == \"10\"\nassert solution(\"8 8\") == \"10\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution([\"2 3\"]) == \"6\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"1 10\") == \"3\"\nassert solution(\"3 10\") == \"3\"\nassert solution(\"10 10\") == \"10\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\nYou can check your solution on HackerRank:\nhttps://www.hackerrank.com/challenges/replace-all/problem\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\n-------"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(s) == x\n\"\"\"\n\nimport sys\n\ns = input()\n\nprint(s.replace('s', 'x'))\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('sardine') == 'xxxxxxx'\nassert solution('aabbcc') == 'xxxxxxx'\nassert solution('xxxyyy') == 'xxxxyyy'\n\"\"\"\n\nfrom unittest import TestCase\nimport collections"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 1 1 3\") == \"Yes\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1 1 1\") == \"Yes\"\n\"\"\"\n\nN = int(stdin.readline())\nH = list(map(int, stdin.readline().split()))\n\ncount = 1\n\nfor i in range(1, N):\n    if H[i] > H[i - 1]:\n        count += 1"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 2 1 1 3\") == \"Yes\"\n\"\"\"\n\nfrom typing import List, Optional, Tuple"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1 2 1 1 3\\n') == 'Yes'\nassert solution('1 1 1 1 1 3\\n') == 'No'\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n1 2 1 1 3''') == \"Yes\"\nassert solution('''5\n3 2 2 2 3''') == \"No\"\nassert solution('''5\n1 2 1 1 3\n3 2 2 2 3''') == \"Yes\"\nassert solution('''5\n1 2 1 1 2''') == \"No\"\nassert solution('''5\n1 2 1 1 1''') == \"Yes\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 1 1 3\\n\") == \"Yes\"\nassert solution(\"6\\n1 1 1 1 1 1\\n\") == \"No\"\n\"\"\"\n\n\nfrom typing import List, Union\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"Yes\"\nassert solution(\"5\\n1 2 1 3 4\") == \"No\"\nassert solution(\"2\\n3 4\") == \"Yes\"\nassert solution(\"2\\n1 2\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"Yes\"\nassert solution(\"4\\n2 1 4 3\") == \"No\"\nassert solution(\"4\\n1 2 3 4\") == \"Yes\"\nassert solution(\"4\\n2 1 4 3\") == \"No\"\nassert solution(\"3\\n1 2 3\") == \"Yes\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\n\"\"\"\n\nfrom functools import reduce\nfrom operator import __add__"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == '1'\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('1 2 3 4 5\\n2 3 1 4 5') == 1\n\"\"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\"\n) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1\\n2 2 3\\n2 1 2\\n\") == '1'\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1320\") == \"720\"\nassert solution(\"1834\") == \"1234\"\nassert solution(\"1878\") == \"1234\"\nassert solution(\"1188\") == \"1000\"\nassert solution(\"1193\") == \"1000\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1900\") == \"100\"\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1900\") == 100\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000') == 1\nassert solution('2500') == 2\nassert solution('3432') == 3\nassert solution('3432') == 3\nassert solution('2000') == 2\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == '100'\nprint('Test pass.')\n\n-----\nIf you want to test the code, please go to tests folder\n-----\n\"\"\"\nfrom typing import List, Dict\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100\") == \"100\"\nassert solution(\"100000\") == \"0\"\nassert solution(\"10\") == \"10\"\nassert solution(\"1000\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1900') == '100'"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000\") == \"1\"\nassert solution(\"1900\") == \"2\"\nassert solution(\"2000\") == \"0\"\nassert solution(\"1500\") == \"1\"\nassert solution(\"1350\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000\") == 1\nassert solution(\"19\") == 0\nassert solution(\"200\") == 2\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100') == '1'\nassert solution('1500') == '3'\nassert solution('3000') == '4'\nassert solution('7000') == '6'\nassert solution('8000') == '7'\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == '9'\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3 5 2\n4 5''') == '9'\n\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n3 5 2\\n4 5') == '9'\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 2\\n4 5\") == \"9\"\nprint(\"PASSED\")\n\n--------------------------------------------------------------------------------\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\n3 5 2\n4 5''') == '9'\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 2\\n4 5\") == 9\nassert solution(\"3 3 3\\n6 6 6\") == 6\nassert solution(\"3 5 2\\n4 2\") == 6\nassert solution(\"3 5 2\\n4 5\") == 9\nassert solution(\"3 5 2\\n4 1\") == 5\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nA = [int(x) for x in sys.stdin.readline().split()]\nB = [int(x) for x in sys.stdin.readline().split()]\n\ndp = [[0 for x in range(N + 1)] for y in range(2)]\ndp[0][0] = 0\ndp[1][0] = 0\ndp[0][1] = A[0]\ndp[1][1] = B[0]\n\nfor x in range(2, N + 1):\n    dp[0][x] = max(dp[1][x - 1] + A[x - 1], dp[0][x - 1])\n    dp[1][x] = max(dp[0][x - 1] + B[x - 1], dp[1][x - 1])\n\nprint(dp[0][-1])\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 2\\n4 5\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 2\\n4 5\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22\\n') == 'No War'\n\"\"\"\n\nn, m, x, y = [int(x) for x in stdin.split('\\n')[0].split()]\nx_i = [int(x) for x in stdin.split('\\n')[1].split()]\ny_i = [int(x) for x in stdin.split('\\n')[2].split()]\nprint('No War' if max(x_i) < x or min(x_i) > x or max(y_i) < y or min(y_i) > y else 'War')\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\nThe choice Z = 13 satisfies all of the three conditions as follows, thus they will come to an agreement.\n - X = 10 < 13 \\leq 20 = Y\n - 8, 15, 13 < 13\n - 16, 22 \\geq 13\nassert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\nThe choice Z = 18 satisfies all of the three conditions as follows, thus they will come to an agreement.\n - X = 10 < 18 \\leq 20 = Y\n - 8, 15, 13 < 18\n - 16, 22 \\geq 18\nassert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"War\"\n\nThe choice Z = 21 does not satisfy any of the three conditions and war will break out.\n - X = 10 < 21 \\leq 20 = Y\n - 8, 15, 13 < 21\n - 16, 22 \\geq 21\nassert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"War\"\n\nThe choice Z = 14 does not satisfy any of the three conditions and war will break out.\n - X = 10 < 14 \\leq 20 = Y\n - 8, 15, 13 < 14\n - 16, 22 \\geq 14\nassert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"War\"\n\nThe choice Z = 17 does not satisfy any of the three conditions and war will break out.\n - X = 10 < 17 \\leq 20 = Y\n - 8, 15, 13 < 17\n - 16, 22 \\geq 17\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\\n\") == \"No War\"\n\"\"\"\n\nimport sys\nfrom typing import List, Optional\n\nN, M, X, Y = [int(c) for c in sys.stdin.readline().strip().split()]\nx = [int(c) for c in sys.stdin.readline().strip().split()]\ny = [int(c) for c in sys.stdin.readline().strip().split()]\n\nlower_x = min(x)\nupper_x = max(x)\n\nlower_y = min(y)\nupper_y = max(y)\n\nprint(lower_x, upper_x, lower_y, upper_y)"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\"\n\nfrom math import gcd\nfrom collections import defaultdict\n\nclass Solution:\n    def _solution(self, A: int, B: int, X: int, Y: int) -> str:\n        # Z = X - Y\n        if A < X < Y <= B:\n            return \"War\"\n        if A >= X:\n            return \"No War\"\n        if A >= Y:\n            return \"No War\"\n        return \"War\"\n\n    def solution(self, stdin: str) -> str:\n        N, A, X, Y = list(map(int, stdin.split()))\n        return self._solution(A, B, X, Y)\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'3 2 10 20\\n8 15 13\\n16 22\\n'\n) == 'No War'\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\nassert solution(\"3 2 10 20\\n8 15 13\\n16 22\\n10 10\\n20 20\") == \"War\"\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 10 20\\n8 15 13\\n16 22\") == \"No War\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2\\n3\") == \"6\"\nassert solution(\"3\\n2\\n3\") == \"6\"\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\nt = sys.stdin.readline()\nt = t.strip()\nt = t.split('\\n')\nt.pop()\n\nt_list = list()\nfor item in t:\n    t_list.append(int(item))"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n2\\n3\\n\") == \"6\"\nassert solution(\"4\\n8\\n16\\n32\\n64\\n128\\n\") == \"256\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\nassert solution(\"2\\n3\\n3\") == \"7\"\n\"\"\"\n\nimport os\nimport sys\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2\\n3') == '6'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\n2\n3\n''') == '6'\nassert solution('''2\n3\n4\n''') == '8'\nassert solution('''2\n4\n6\n''') == '6'\n\nassert solution('''1\n1\n1\n''') == '360'\nassert solution('''1\n5\n2\n''') == '120'\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"6\"\n\n\"\"\"\n\n\nfrom math import factorial\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n3\\n6\\n') == 6\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\nassert solution(\"5\\n4\\n4\\n3\\n4\\n3\") == \"0\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n2\\n3') == 6\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n1 2 3''') == '0'\nassert solution('''2\n1 2''') == '1'\nassert solution('''3\n1 2 3''') == '0'\nassert solution('''5\n4 7 2 9 10''') == '15'\nassert solution('''4\n1 2 3 4''') == '0'\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(0)\n\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 3') == '0'\n\"\"\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2 3') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3') == '0'\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == 0\n\"\"\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 3 2\\n') == '0'\nassert solution('4 1 2 3\\n') == '1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n1 2 3''') == '0'\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_0) == '0'\nassert solution(test_1) == '1'\nassert solution(test_2) == '2'\nassert solution(test_3) == '0'\nassert solution(test_4) == '0'\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n\") == 6\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == 2\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == '6'\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == '2'\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == 6\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == 2\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == 0\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\nprint('Hooray!')\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"4 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n13 14 15 16\") == \"0\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\nprint(\"The local tests are done.\")\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\\n\") == 6\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == 2\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\nassert solution(\"3 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"6\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n\"\"\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10 1 2 3\") == \"4\"\nassert solution(\"1 100\") == \"100\"\n\n\"\"\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''6\n5 10 2 3 14 5''') == '5'\n\nassert solution('''2\n1 100''') == '99'\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n5 10 2 3 14 5') == '5'\nassert solution('2\\n1 100') == '99'\nassert solution('7\\n3 21 30 19 36 11') == '7'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 1 3 2') == '3'\nassert solution('4\\n1 100 2 3') == '4'\n\"\"\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\nassert solution(\"2\\n1 100\") == \"99\"\n\"\"\"\n\nfrom math import ceil, floor"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"4\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"8\\n1 1 1 1 1 1 1 1 1\") == \"8\"\nassert solution(\"8\\n5 10 2 3 14 5\") == \"5\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n5 10 2 3 14 5') == '5'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n6\n5 10 2 3 14 5\n''') == '5'\nassert solution('''\n2\n1 100\n''') == '99'"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(solution(str(input()))\n\n\"\"\"\n\nfrom typing import List\nimport numpy as np"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n0 1 0 1 1\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\n\n------End------\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n0 0 0') == '0'\nassert solution('5\\n1 0 1 0 1') == '2'\nassert solution('6\\n0 1 0 1 1 0') == '2'\nassert solution('7\\n1 0 1 1 1 0 1') == '3'\nassert solution('5\\n0 1 0 1 0 1') == '2'\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n\"\"\"\n\n\nimport collections\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\") == \"0\"\nassert solution(\"5\\n1 0 1 0 1\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 0 1 0 1 0') == '2'\nassert solution('0 1 0 1 1 0') == '2'\nassert solution('1 0 1 1 1 0') == '3'\nassert solution('0 0 0') == '0'\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n0 0 0 0 1 1\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\n\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\nfrom collections import Counter\nfrom typing import Dict, List, Set, Tuple, Union, Optional\n\nfrom utils import get_data\n\nINPUT = get_data(int)"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '1'\nassert solution('7') == '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('7') == '0'\n\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '1'\nassert solution('7') == '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\") == 0\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nstdout = sys.stdout\n\nsys.stdin = open('input.txt', 'r')\nsys.stdout = open('output.txt', 'w')\n\ntest = int(stdin.read())"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('1') == 1\nassert solution('2') == 1\nassert solution('3') == 2\nassert solution('4') == 2\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == 1\n\n\"\"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == 1\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == \"3\"\nprint(solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\\n\"))\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\\n\"\n                \"brie soft\\n\"\n                \"camembert soft\\n\"\n                \"feta soft\\n\"\n                \"goat soft\\n\"\n                \"muenster soft\\n\"\n                \"asiago hard\\n\"\n                \"cheddar hard\\n\"\n                \"gouda hard\\n\"\n                \"swiss hard\\n\") == \"3\"\nassert solution(\"6\\n\"\n                \"parmesan hard\\n\"\n                \"emmental hard\\n\"\n                \"edam hard\\n\"\n                \"colby hard\\n\"\n                \"gruyere hard\\n\"\n                \"asiago hard\\n\") == \"4\"\nassert solution(\"5\\n\"\n                \"brie soft\\n\"\n                \"camembert soft\\n\"\n                \"feta soft\\n\"\n                \"goat soft\\n\"\n                \"muenster soft\\n\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"brie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == \"3\"\nassert solution(\"parmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == \"4\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == \"3\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == \"3\"\n\n'''\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == \"3\"\n\nprint(solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\"))\nassert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == \"4\"\n\nprint(solution(\"4\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\n\"))\nassert solution(\"4\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\n\") == \"0\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard\") == 4\nassert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == 3\nassert solution(\"10\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\npecorino hard\") == 5\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"brie soft camembert\") == \"brie\"\nassert solution(\"parmesan hard emmental\") == \"parmesan\"\nassert solution(\"swiss gouda cheddar\") == \"gouda\"\nassert solution(\"feta goat muenster asiago\") == \"feta\"\nassert solution(\"feta goat muenster asiago gouda\") == \"gouda\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard') == '3'\nassert solution('6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard') == '4'\nassert solution('8\\ncheddar hard\\ngouda hard\\nswiss hard\\nedam hard\\ngouda hard\\ngouda hard\\ngouda hard\\ngouda hard') == '3'\n\"\"\"\n\nnum_cheeses = int(input())\ncheese_list = []\n\nfor i in range(num_cheeses):\n    cheese, type_cheese = input().split()\n    cheese_list.append([cheese, type_cheese])"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2 3') == '4'\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 2 1 1\\n2 4 3 5 6 5 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nans = [0] * n\ncnt = [0] * n\nfor i in range(n):\n    ans[a[i]] = b[i]\n    cnt[a[i]] += 1\nfor i in range(n):\n    for j in range(n):\n        if cnt[j] == 0:\n            ans[j] = ans[j] + i\n\nprint(*ans, sep=' ')\n\n\"\"\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 1 2\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2 1\") == \"1 0 0 2\"\n\n\"\"\""
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('0\\n') == ''\nassert solution('2\\n') == ''\nassert solution('0 1 2 1\\n') == ''\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\") == \"0 0 0 1 0 2 4\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1 1 1\\n2 1 1 1\") == \"2 1 1 1 0 0 0\"\nassert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\"\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\nassert solution('7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1') == '0 0 0 1 0 2 4'\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\") == \"0 0 0 1 0 2 4\"\nassert solution(\"1\\n0\") == \"0\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"1\\n2\") == \"1 0\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nprint('Test pass.')\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1100\") == 1\nassert solution(\"1010\") == 0\nassert solution(\"1101\") == 1\nassert solution(\"1011\") == 0\n\"\"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"110110\") == 0\nassert solution(\"111000\") == 0\nassert solution(\"101110\") == 0\nassert solution(\"111010\") == 1\nassert solution(\"111110\") == 1\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 1 0\") == \"0\"\n\n\"\"\"\n\n\"\"\"\nProblem Statement\nYou are given an array of N integers, A1, A2,\u2026, AN. Return maximum value of f(i, j) for all 1 \u2264 i, j \u2264 N.\nf(i, j) is defined as |A[i] - A[j]| + |i - j|, where |x| denotes absolute value of x.\n\nFor example,\n\nA=[1, 3, -1]\n\nf(1, 1) = f(2, 2) = f(3, 3) = 0\nf(1, 2) = f(2, 1) = |1 - 3| + |1 - 2| = 3\nf(1, 3) = f(3, 1) = |1 - (-1)| + |1 - 3| = 4\nf(2, 3) = f(3, 2) = |3 - (-1)| + |2 - 3| = 5\n\nSo, we return 5.\n\"\"\"\n\n\"\"\"\nSolution Approach\n\nWe will find the maximum of sum of absolute difference of all pairs of numbers in the array.\n\nWe will use dynamic programming to store the result of each subarray.\nFor a given array, we can define a recurrence relation\n\nf(i, j) = |A[i] - A[j]| + |i - j|\n\nWe can then iteratively compute this for all subarrays of the array. We can then find the maximum of all such values.\n\nWe can use a 2D array to store these values and iterate through the array once, but we can also use a 1D array to store these values.\n\nThis will then give us the maximum of all values.\n\nComplexity Analysis\n\nTime complexity : O(N^2)\n\nSpace complexity : O(N)\n\"\"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0110110') == '0'\nassert solution('1110110') == '1'\nassert solution('11011010') == '1'\nassert solution('11011011') == '0'\nassert solution('11101110') == '1'\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('1\\n0\\n1\\n1\\n') == '1'\nassert solution('1\\n1\\n0\\n0\\n') == '0'\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0\") == 0\nassert solution(\"1\") == 1\nassert solution(\"1\") == 1\nassert solution(\"0\") == 0\n\"\"\"\nfrom typing import Any, List\n\n\"\"\"\n\u8a0e\u53ad\u653b\u64ca\u8005\u7684\u4f5c\u6cd5\n\"\"\"\n\"\"\"\n\u6e2c\u8cc7\uff1a\n\n\u5169\u6578\u5b57\u90fd\u70ba0\uff0c\u56de\u50b30\n\u5169\u6578\u5b57\u90fd\u70ba1\uff0c\u56de\u50b31\n\u5176\u4e2d\u4e00\u500b\u6578\u5b57\u70ba1\uff0c\u53e6\u4e00\u500b\u70ba0\uff0c\u56de\u50b30\n\u5176\u4e2d\u4e00\u500b\u6578\u5b57\u70ba0\uff0c\u53e6\u4e00\u500b\u70ba1\uff0c\u56de\u50b30\n\u5169\u6578\u5b57\u70ba\u5169\u500b\u4e0d\u540c\u7684\u6578\u5b57\uff0c\u56de\u50b30\n\u5176\u4e2d\u4e00\u500b\u6578\u5b57\u70ba0\uff0c\u53e6\u4e00\u500b\u6578\u5b57\u70ba\u975e0\uff0c\u56de\u50b31\n\u5176\u4e2d\u4e00\u500b\u6578\u5b57\u70ba1\uff0c\u53e6\u4e00\u500b\u6578\u5b57\u70ba\u975e1\uff0c\u56de\u50b31\n\n\"\"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 0 0 1\") == \"0\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 1 1 0\") == \"0\"\n------------------------------\n\nInput\n1\n1\n1\n0\n\nOutput\n1\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"011101\") == 0\nassert solution(\"11101\") == 1\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"00110011\") == \"1\"\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\"\"\"\n\nimport os\nimport sys\nfrom io import StringIO\nfrom unittest import main, TestCase\n\nsys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                             os.path.pardir))\nfrom solution import solution\n\n\nclass TestSolution(TestCase):\n    def test_solution(self):\n        io = StringIO('''1000 15 80\n''')\n        sys.stdin = io\n        answer = solution()\n        self.assertEqual(answer, 'Yes')\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\n----------------------"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '1000 15 80'\n) == 'Yes'\n\n-----\n10    0    0\n'1'    '2'    '3'\n'4'    '5'    '6'\n'7'    '8'    '9'\n'10'    '11'    '12'\n\"\"\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\"\"\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\n\nimport os"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '1000 15 80'\n) == 'Yes'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000 15 80') == 'Yes'\nassert solution('1000 15 85') == 'No'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == 'Yes'\n\n-----Problem-----\nNijzgotovna ulica\n\nMalo\u010devi \u0161oli predstavlja se na na\u0161em letu vojno. V \u0161oli za vojno ljudi se poklapa s \u0161umi krogle, ki se predstavlja \u010drko v njem.\nV \u010drki predstavljajo naslednje:\n\nKrogla (C) - \u0161oli\nKrogla (E) - \u0161oli\nKrogla (D) - \u0161oli\nKrogla (G) - \u0161oli\nKrogla (B) - \u0161oli\nKrogla (F) - \u0161oli\nKrogla (H) - \u0161oli\n\nNapisati funkcijo solution(p, q, r, s, n) vrne True, \u010de je najden naloga za leto vojno in False in\u010de.\n\n-----Problem----Solution-----\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == expected_output\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.read()\n\nrows = [[int(i) for i in stdin.split('\\n')[i].split()] for i in range(4)]\ndiagonal = [[rows[i][i] for i in range(4)]]\ndiagonal.append([rows[0][3], rows[1][2], rows[2][1], rows[3][0]])\n\nans = 'Yes' if any(sum(row) >= 3 for row in rows) \\\n    or any(sum(row) >= 3 for row in diagonal) else 'No'\n\nprint(ans)"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\n\n\"\"\"\n\nfrom typing import List\nimport unittest\n\n\nclass Solution:\n    def __init__(self, stdin: str):\n        self.stdin = stdin\n        self.matrix = []\n        self.rows = None\n        self.columns = None\n        self.diagonal_from_top_left = None\n        self.diagonal_from_bottom_right = None\n        self.n = None\n        self.bingo_sheet = None\n        self.bingo_sheet_count = 0\n\n    def convert_to_matrix(self):\n        \"\"\"\n        Convert the input into a 2-dimensional matrix.\n\n        :return:\n        \"\"\"\n        self.matrix = self.stdin.splitlines()\n\n    def get_values_from_matrix(self):\n        \"\"\"\n        Get the values from the matrix.\n\n        :return:\n        \"\"\"\n        self.rows = len(self.matrix)\n        self.columns = len(self.matrix[0])\n        self.diagonal_from_top_left = self.rows * self.columns\n        self.diagonal_from_bottom_right = self.rows * self.columns - self.rows + 1\n\n    def get_bingo_sheet(self):\n        \"\"\"\n        Get the values in the bingo sheet.\n\n        :return:\n        \"\"\"\n        self.bingo_sheet = self.matrix[0].split()\n        self.bingo_sheet = list(map(int, self.bingo_sheet))\n\n    def check_for_bingo_sheet(self):\n        \"\"\"\n        Check if the bingo sheet is part of the matrix.\n\n        :return:\n        \"\"\"\n        self.bingo_sheet_count = 0\n\n        for row in self.matrix:\n            for value in row.split():\n                if int(value) in self.bingo_sheet:\n                    self.bingo_sheet_count += 1\n                else:\n                    self.bingo_sheet_count = 0\n\n        if self.bingo_sheet_count == len(self.bingo_sheet):\n            return True\n        else:\n            return False\n\n    def check_for_bingo_row(self):\n        \"\"\"\n        Check if the row is part of the matrix.\n\n        :return:\n        \"\"\"\n        self.bingo_sheet_count = 0\n\n        for row in self.matrix:\n            for value in row.split():\n                if int(value) in self.bingo_sheet:\n                    self.bingo_sheet_count += 1\n                else:\n                    self.bingo_sheet_count = 0\n\n            if self.bingo_sheet_count == len(self.bingo_sheet):\n                return True\n            else:\n                self.bingo_sheet_count = 0\n\n        return False\n\n    def check_for_bingo_column(self):\n        \"\"\"\n        Check if the column is part of the matrix.\n\n        :return:\n        \"\"\"\n        self.bingo_sheet_count = 0\n\n        for value in range(self.columns):\n            for row in self.matrix:\n                if int(row.split()[value]) in self.bingo_sheet:\n                    self.bingo_sheet_count += 1\n                else:\n                    self.bingo_sheet_count = 0\n\n            if self.bingo_sheet_count == len(self.bingo_sheet):\n                return True\n            else:\n                self.bingo_sheet_count = 0\n\n        return False\n\n    def check_for_bingo_diagonal(self):\n        \"\"\"\n        Check if the diagonal is part of the matrix.\n\n        :return:\n        \"\"\"\n        self.bingo_sheet_count = 0\n\n        for value in range(self.diagonal_from_top_left):\n            if int(self.matrix[value].split()[value]) in self.bingo_sheet:\n                self.bingo_sheet_count += 1\n            else:\n                self.bingo_sheet_count = 0\n\n        if self.bingo_sheet_count == len(self.bingo_sheet):\n            return True\n        else:\n            self.bingo_sheet_count = 0\n\n        for value in range(self.diagonal_from_top_left):\n            if int(self.matrix[value].split()[self.rows - value - 1]) in self.bingo_sheet:\n                self.bingo_sheet_count += 1\n            else:\n                self.bingo_sheet_count = 0\n\n        if self.bingo_sheet_count == len(self.bingo_sheet):\n            return True\n        else:\n            self.bingo_sheet_count = 0\n\n        for value in range(self.diagonal_from_bottom_right):\n            if int(self.matrix[value].split()[value]) in self.bingo_sheet:\n                self.bingo_sheet_count += 1\n            else:\n                self.bingo_sheet_count = 0\n\n        if self.bingo_sheet_count == len(self.bingo_sheet):\n            return True\n        else:\n            self.bingo_sheet_count = 0\n\n        for value in range(self.diagonal_from_bottom_right):\n            if int(self.matrix[value].split()[self.rows - value - 1]) in self.bingo_sheet:\n                self.bingo_sheet_count += 1\n            else:\n                self.bingo_sheet_count = 0\n\n        if self.bingo_sheet_count == len(self.bingo_sheet):\n            return True\n        else:\n            self.bingo_sheet_count = 0\n\n        return False\n\n    def return_result(self):\n        \"\"\"\n        Return the result.\n\n        :return:\n        \"\"\"\n        if self.check_for_bingo_row():\n            return \"Yes\"\n        elif self.check_for_bingo_column():\n            return \"Yes\"\n        elif self.check_for_bingo_diagonal():\n            return \"Yes\"\n        else:\n            return \"No\"\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        # from copy import deepcopy\n        import io\n\n        with io.StringIO() as buf, redirect_stdout(buf):\n            solution(\n                \"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n\")\n            output = buf.getvalue()\n            # print(output)\n            self.assertEqual(output, \"Yes\\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n\"\"\"\n\nA = {(1,1), (1,2), (1,3)}\nB = {(2,1), (2,2), (2,3)}\nC = {(3,1), (3,2), (3,3)}\n\nN = int(input())"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('84 97 66') == 'Yes'\nassert solution('79 89 11') == 'Yes'\nassert solution('61 59 7') == 'No'\nassert solution('7') == 'Yes'\nassert solution('89') == 'Yes'\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'Yes'\n\nassert solution(\n'''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'No'\n\nassert solution(\n'''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'No'\n\nassert solution(\n'''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'No'\n\nassert solution(\n'''84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30''') == 'No'"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n\") == \"Yes\"\n\"\"\"\n\nimport sys\n\nclass Diagonal:\n    def __init__(self, matrix, n, diagonal):\n        self.matrix = matrix\n        self.n = n\n        self.diagonal = diagonal\n        self.total_num = 0\n        self.covered = set()\n        self.bingo_matrix = []\n        self.top_left = False\n        self.bottom_right = False\n\n        for i in range(n):\n            self.bingo_matrix.append([])\n            for j in range(n):\n                self.bingo_matrix[i].append(0)\n\n    def mark_all(self):\n        for i in range(self.n):\n            for j in range(self.n):\n                self.bingo_matrix[i][j] = 1\n\n    def mark_one(self, x, y):\n        self.bingo_matrix[x][y] = 1\n\n    def check(self):\n        if self.bingo_matrix[0][0] == 1:\n            self.top_left = True\n        if self.bingo_matrix[self.n - 1][self.n - 1] == 1:\n            self.bottom_right = True\n\n        for i in range(self.n):\n            if self.bingo_matrix[i][0] == 1:\n                self.total_num += 1\n\n        for i in range(self.n):\n            for j in range(self.n):\n                if self.bingo_matrix[i][j] == 1:\n                    self.covered.add((i, j))\n\n        for i in range(self.n):\n            for j in range(self.n):\n                if (i, j) in self.covered:\n                    self.bingo_matrix[i][j] = 0\n\n    def print(self):\n        for i in range(self.n):\n            print(self.bingo_matrix[i])\n\n    def is_bingo(self):\n        if self.top_left and self.bottom_right:\n            return True\n        if self.total_num == 3:\n            return True\n        return False"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"84 97 66\") == \"Yes\"\nassert solution(\"79 89 11\") == \"Yes\"\nassert solution(\"61 59 7\") == \"Yes\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"89\") == \"Yes\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''41 2\n5 6''') == '30'\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n2 3\\n5 6\") == \"30\"\n\"\"\"\n\nimport math\nfrom typing import List\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"41 2\\n5 6\") == \"30\"\n\"\"\"\n\nN, M = map(int, input().split())\nassignments = list(map(int, input().split()))\n\ntakahashi_max = 0\nfor day in range(1, N + 1):\n    for assignment in assignments:\n        if day % assignment == 0:\n            takahashi_max += 1\n            break\n        if day % assignment!= 0 and day == assignments[-1]:\n            takahashi_max = -1\n\nprint(takahashi_max)"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n1 2 3 4\") == \"1\"\nassert solution(\"4 2\\n1 2 3 4\") == \"0\"\nassert solution(\"4 2\\n1 2 3 4 5\") == \"2\"\n\nassert solution(\"10 1\\n1 2 3 4 5 6 7 8 9 10\") == \"-1\"\nassert solution(\"10 1\\n1\") == \"10\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n1 2\\n2 3\\n3 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5\\n1 3 2 4 5') == '-1'\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 2\\n2 3\\n3 4\\n4 5') == '5'\n\"\"\"\n\n\"\"\"\nYour solution\n\"\"\"\n\nn, m = [int(x) for x in stdin.readline().split()]"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 2 3 4\") == \"7\"\nprint(\"Passed!\")\n\n\"\"\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2\\n1 2\\n2 3') == '7'\nassert solution('3 3\\n1 2\\n2 3') == '-1'\n\n\"\"\"\nimport sys\n\ninput_ = sys.stdin.readlines()\nN, M = map(int, input_.pop(0).split())\nassignments = [int(i) for i in input_[0].split()]\n\nmax_days = 0\ndays = [0] * (N + 1)\nfor assignment in assignments:\n    for i in range(assignment, N + 1):\n        days[i] = max(days[i], days[i - assignment] + 1)\n    max_days = max(max_days, days[N])\nprint(max_days - 1)\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\\n5 3\\n\") == \"4\"\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 3\\n') == '5'\n\"\"\"\nimport math\n\nd, n = map(int, input().split())"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 2\\n\") == \"5\"\n\"\"\"\n\nD, N = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"12\"\n\nassert solution(\"2 4\") == \"10\"\nassert solution(\"1 2\") == \"10\"\n\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"10\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"5\"\nassert solution(\"1 10\") == \"5\"\nassert solution(\"2 10\") == \"6\"\nassert solution(\"0 5\") == \"5\"\nassert solution(\"0 10\") == \"5\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 5\") == \"5\"\nassert solution(\"1 4\") == \"1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"0 5\") == \"5\"\nassert solution(\"1 6\") == \"1\"\n\"\"\"\nimport math"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"3\"\nassert solution(\"0 5\") == \"5\"\nassert solution(\"0 1\") == \"1\"\nassert solution(\"0 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 100\") == \"49\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 5\\n\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"1 10\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 5') == '5'\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n 7 6 8\\n') == '2'\nassert solution('5\\n 5 4 3 2\\n') == '1'\nassert solution('2\\n 1 1\\n') == '1'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 8 7\") == \"2\"\nassert solution(\"8 7 6\") == \"2\"\nassert solution(\"7 6 8\") == \"2\"\n\"\"\"\n\nimport sys\nfrom math import gcd\nfrom typing import List, Dict, Tuple\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n7 6 8\") == \"2\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1'\nassert solution('7 6 8') == '2'\nassert solution('2 8 15') == '5'\nassert solution('2 8 16') == '4'\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n7 6 8\") == \"2\"\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n7 6 8''') == 2\nassert solution('''2\n7 6''') == 1\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 6 8\") == \"2\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == 2\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1'\nassert solution('1 2 3 4') == '1'\nassert solution('1 2 3 5') == '1'\nassert solution('1 2 3 6') == '1'\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n7 6 8\\n\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\nassert solution(\"5\\n2 3 1 5 4\") == \"5 4 2 3 1\"\nassert solution(\"6\\n2 3 1 5 4 6\") == \"6 5 4 2 3 1\"\nassert solution(\"9\\n7 6 5 4 3 2 9 8 1\") == \"9 8 7 6 5 4 3 2 1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 1\") == \"3 1 2\"\n\"\"\"\n\n\nimport sys\n\nN = int(input())\nstudent_list = list(map(int, sys.stdin.readlines()[1:]))\n\nstudent_list.sort()\n\nfor student in student_list:\n    print(student)\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2 1') == '3 1 2'\nprint('Test Success!')"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 1\\n') == '3 1 2'\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 1\") == \"3 1 2\"\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 1\") == \"3 1 2\"\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2 1') == '3 1 2'\n\"\"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 3 1\") == \"3 1 2\"\n\"\"\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 7 100') == '9'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 7 100') == '9'\n\"\"\"\n\nA, B, X = [int(x) for x in stdin.split()]\nd = [int(x) for x in range(1, 100)]\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(10 7 100) == 9\n\"\"\"\n\nimport sys\n\ntry:\n    a, b, x = [int(x) for x in stdin.readlines()]\n    print(max([a * i + b * j for i in range(1, 10) for j in range(0, 10) if a * i + b * j <= x] or [0]))\nexcept:\n    print(0)\n    \n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 7 100') == '9'\nassert solution('1 2 3') == '0'\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 7 100') == '9'\n\"\"\"\n\nimport os\nimport sys\nfrom collections import Counter\nfrom copy import deepcopy"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''10 7 100''') == '9'\nprint('OK')\n\nassert solution('''10 10 7''') == '0'\nprint('OK')\n\nassert solution('''10 10 10''') == '10'\nprint('OK')\n\nassert solution('''10 10 10 100''') == '10'\nprint('OK')\n\nassert solution('''10 0 10''') == '0'\nprint('OK')"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 7 100') == '9'\nassert solution('7 7 100') == '7'\nassert solution('10 10 10') == '0'\nassert solution('7 7 100') == '7'\nassert solution('10 10 10') == '0'\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"1 2 100\") == \"0\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == 2\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"150 140 100 200\\n\") == 2\nassert solution(\"150 140 100 200\\n\") == 2\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('N K\\nh_1 h_2\\n') == '1'\nassert solution('4 150\\n150 140 100 200') == '2'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\nassert solution('4 200\\n200 200 200 200') == '4'\n\n\"\"\"\n\nimport sys\nfrom collections import Counter\nfrom math import ceil"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == 2\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 150\\n150 140 100 200') == 2\n\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\n\"\"\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\n\n-----\nAfter you've completed your solution, run this file through the online **Test** and **Reveal** buttons to see how your solution performs!\n\n[Secret tip: you can edit files on the right *Twitch* screen via the *Edit* button at the top!](https://cs61a.org/edit/)\n\n\"\"\"\n\nN, K = map(int, input().split())\nh = list(map(int, input().split()))\nprint(sum(1 for h_i in h if h_i >= K))\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\n\nfrom typing import List\n\n\"\"\"\nGiven N items with their popularity. The popularity can be represented by an array of size N. The i-th element represents the popularity of the i-th item.\n\nSelect M popular items and print Yes if there exists any such subset of size M that sums up to the popularity of the selected items. Otherwise, print No.\n\nInput Format\n\nThe first line contains N and M.\nThe next line contains N integers separated by space.\n\nConstraints\n\n1 <= N, M <= 10^5\n1 <= A_i <= 10^5\n\nOutput Format\n\nPrint Yes if there exists any such subset of size M that sums up to the popularity of the selected items. Otherwise, print No.\n\nSample Input 0\n\n4 1\n5 4 2 1\nSample Output 0\n\nYes\nExplanation 0\n\n1 -> Popularity\n\n4 -> Popularity\n\n5 + 4 + 2 + 1 = 12\n\n12 % 4 = 0\n\nThere are two ways to select 4 items that sum up to 12:\n\n4 + 1 + 2 + 1\n\n4 + 4 + 1 + 1\n\nBoth ways are valid.\n\nSample Input 1\n\n4 2\n5 4 2 1\nSample Output 1\n\nNo\nExplanation 1\n\nThere is no combination of 4 items that sums up to the popularity of the selected items.\n\nSample Input 2\n\n4 3\n5 4 2 1\nSample Output 2\n\nYes\nExplanation 2\n\n5 + 4 + 1 = 12\n\n12 % 3 = 0\n\nThere are three ways to select 3 items that sum up to 12:\n\n5 + 1 + 1\n\n4 + 4 + 1\n\n5 + 4 + 2\n\nSample Input 3\n\n10 4\n1 2 3 4 5 6 7 8 9 10\nSample Output 3\n\nYes\nExplanation 3\n\nThere are two ways to select 4 items that sum up to 20:\n\n1 + 9 + 8 + 2\n\n10 + 1 + 2 + 3\n\nSample Input 4\n\n10 4\n1 2 3 4 5 6 7 8 9 10\nSample Output 4\n\nNo\nExplanation 4\n\nThere is no combination of 4 items that sums up to the popularity of the selected items.\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 2\n5 4 2 1''') == 'Yes'\nassert solution('''4 2\n5 4 2 1''') == 'Yes'\nassert solution('''4 3\n5 4 2 1''') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\nassert solution(\"4 1\\n3 3 3 3\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\nassert solution(\"2 1\\n1 1\") == \"Yes\"\nassert solution(\"4 2\\n2 2 2 2\") == \"No\"\nassert solution(\"10 2\\n3 1 2 3 4 1 3 5 2 4\") == \"No\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"Yes\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\n\nfrom typing import List\nimport math\nimport unittest\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == 5\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == 5\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('.#..#\\n.....\\n#####\\n....#\\n...##') == '5'\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('.#.#\\n###.') == 5\n\"\"\"\nfrom math import factorial\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('.#..') == 3\n\nassert solution('#..#') == 2\n\nassert solution('###') == 1\n\nassert solution('#..') == 2\n\nassert solution('.#.') == 2"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\\n\") == \"5\"\nassert solution(\"2 3 2\\n..#\\n###\\n\") == \"5\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2020 2040') == 2\n\"\"\"\nfrom itertools import count\n\nnums = list(map(int, stdin.strip().split()))\nprint(min(map(lambda x: x * (x + 1) % 2019, nums)))\n\n\"\"\"\nfrom itertools import count\nimport operator\nimport numpy as np\n\nnums = list(map(int, stdin.strip().split()))\nprint(min(map(lambda x: x * (x + 1) % 2019, nums)))\n\"\"\"\n\"\"\"\nfrom itertools import combinations\n\nnums = list(map(int, stdin.strip().split()))\nprint(min(map(lambda x: min(x) * max(x) % 2019, combinations(nums, 2))))\n\"\"\"\n\n\"\"\"\nimport itertools\nfrom operator import mul\n\nnums = list(map(int, stdin.strip().split()))\nprint(min(map(lambda x: min(x) * max(x) % 2019, itertools.combinations(nums, 2))))\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(a) == b\n\na, b = map(int, stdin.split())"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(12345678910111213141516) == 12\n\"\"\"\n\nfrom my_decorators import timeit, reset_timer\n\nimport math\n\n@reset_timer\n@timeit\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2020, 2040) == 2\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(2)\nprint('Success')\n\"\"\"\n\nimport sys\n\nL, R = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2020 2040') == '2'"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2020 2040') == '2'\nprint('PASS')\n\n-------------\n\nclass Solution:\n    def __init__(self):\n        self.result = None\n\n    def solution(self, stdin: str) -> str:\n        a, b = map(int, stdin.split(' '))\n        self.result = b * b - b * (b - 1) // 2 - a * (a - 1) // 2 + a * b\n        return str(self.result)\n\nassert Solution().solution('2020 2040') == '2'\nprint('PASS')\n\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2020 2040\") == 2\nprint(solution(\"2020 2040\"))\n\n'''"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'WA'\nassert solution('AtCoder') == 'AC'\nassert solution('Atcoder') == 'WA'\nassert solution('ATCODER') == 'WA'\nassert solution('AtCODER') == 'AC'\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"AtCoder2\") == \"WA\"\nassert solution(\"AtCoder3\") == \"WA\"\nassert solution(\"AtCoder4\") == \"AC\"\nassert solution(\"AtCoder5\") == \"WA\"\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('AtCoder') == 'AC'\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"Atcoder\") == \"WA\"\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('AtCoder') == 'AC'\nassert solution('Atcoder') == 'WA'\nassert solution('atcoder') == 'WA'\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"Atcoder\") == \"WA\"\nassert solution(\"atcoder\") == \"AC\"\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"AtCoder2\") == \"WA\"\nassert solution(\"AtCoder3\") == \"AC\"\nassert solution(\"AtCoder4\") == \"WA\"\nassert solution(\"AtCoder5\") == \"AC\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"AtCoder1\") == \"WA\"\nassert solution(\"AtCoder2\") == \"AC\"\nassert solution(\"AtCoder3\") == \"WA\"\nassert solution(\"AtCoder4\") == \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\nSample Input:\nCodeforces\n\nSample Output:\nWA\n\nThe first character is C, which is not A, so the condition #1 is false.\nThe second character is o, which is not C, so the condition #2 is false.\nThe remaining letters are all lowercase, so the condition #3 is true.\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"1324\") == \"2\"\nassert solution(\"1211\") == \"1\"\nassert solution(\"11111\") == \"1\"\nassert solution(\"111111\") == \"1\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1214') == '2'\nassert solution('1') == '1'\nassert solution('1214444') == '4'\nassert solution('12144444') == '4'\nassert solution('12345') == '5'\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1214\") == \"2\"\nprint(\"Test 1: \" + solution(\"1214\") == \"2\")\nassert solution(\"1214\") == \"2\"\nprint(\"Test 2: \" + solution(\"1214\") == \"2\")\nassert solution(\"1214\") == \"2\"\nprint(\"Test 3: \" + solution(\"1214\") == \"2\")\nassert solution(\"1214\") == \"2\"\nprint(\"Test 4: \" + solution(\"1214\") == \"2\")\nassert solution(\"1214\") == \"2\"\nprint(\"Test 5: \" + solution(\"1214\") == \"2\")\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1214') == '2'\nassert solution('1') == '1'\nassert solution('101') == '1'\nassert solution('111111') == '1'\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1214\") == \"2\"\nprint(solution(\"1214\"))\n\n\"\"\"\n\nfrom collections import Counter\nimport math\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1214') == '2'\n\n\"\"\"\nfrom math import log10\n\nfrom input_parser import parse_input\nfrom int_to_k_s_r_n import int_to_k_s_r_n\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1214') == '2'\nassert solution('1324') == '4'\nassert solution('1111') == '1'\nassert solution('9') == '9'\nassert solution('1112') == '3'\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1214') == '2'\nassert solution('111222333') == '2'\nassert solution('101222222222') == '2'\nassert solution('10122222222222222') == '2'\nassert solution('101222222222222222222') == '2'\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1214\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1214\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3 4 1\") == 'YES'\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 2 3 1\") == \"NO\"\nassert solution(\"5 2 3 4 1\") == \"YES\"\nassert solution(\"3 1 2 5 4\") == \"NO\"\nassert solution(\"2 3 1 5 4\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\n\"\"\"\n\n\"\"\"\n\n\uc544\uc774\ub514\uc5b4 : \uadf8\ub0e5 \uc2a4\uc651\n\n\uc811\uadfc : \uad73\uc774 swap\uc744 \uc704\ud574\uc11c \ud574\uc918\uc57c\ud558\ub294 \uac83\uc740 \uc5c6\ub2e4\n\n\ud480\uc774\ubc29\ubc95 : \uc9c0\uae08 \uc2a4\uc651\ud560 \uacbd\uc6b0\uc5d0\ub294 \uac12\uc758 \uc704\uce58\uac00 \ubc14\ub00c\uac8c \ub418\ub294\ub370 \uc774\ub294 swap\uc774 \uc5c6\ub2e4 -> \uc5ec\ub7ec\ubc88 swap\uc744 \uc9c0\uc6cc\uc57c\ud558\ub294\ub370 \uc774\ub54c\uc758 \ucd5c\uc18c\uc758 swap \ud69f\uc218\ub97c \ucc3e\ub294\uac8c \ud575\uc2ec\n\n1\ucc28 \uc2dc\ub3c4 : \uac19\uc740 \uc22b\uc790\uac00 \uc788\ub294 \uacbd\uc6b0 \ucc3e\uae30 -> \uc704 \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uacbd\uc6b0\uc5d0\ub9cc \uac12\uc774 \ubc14\ub010\ub2e4\n\uc811\uadfc\uc740 \ud1b5\uacfc\ud55c\ub2e4\n\n\uc0c8\ub85c\uc6b4 \uc544\uc774\ub514\uc5b4 : \uad73\uc774 \uc2a4\uc651\uc744 \uc9c4\ud589\ud560 \ud544\uc694\uac00 \uc5c6\uc74c\n\uc811\uadfc : \uac19\uc740 \uc22b\uc790\uac00 \uc788\ub294 \uacbd\uc6b0 \ucc3e\uae30 -> \uc5ec\ub7ec\ubc88 swap\uc744 \uc9c0\uc6cc\uc57c\ud558\ub294\ub370 \uc774\ub54c\uc758 \ucd5c\uc18c\uc758 swap \ud69f\uc218\ub97c \ucc3e\ub294\uac8c \ud575\uc2ec\n\n2\ucc28 \uc2dc\ub3c4 : \ubaa8\ub4e0 \uc22b\uc790\uac00 \ub2e4\ub978 \uacbd\uc6b0 \ucc3e\uae30\n\n\uc811\uadfc : \ubaa8\ub4e0 \uc22b\uc790\uac00 \ub2e4\ub978 \uacbd\uc6b0 \ucc3e\uae30 -> \uc5ec\ub7ec\ubc88 swap\uc744 \uc9c0\uc6cc\uc57c\ud558\ub294\ub370 \uc774\ub54c\uc758 \ucd5c\uc18c\uc758 swap \ud69f\uc218\ub97c \ucc3e\ub294\uac8c \ud575\uc2ec\n\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\nassert solution(\"5 2 3 1 4\") == \"NO\"\n\"\"\"\nimport collections"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n5 2 3 4 1') == 'YES'\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 3 2 4') == 'NO'\nassert solution('5\\n5 2 3 4 1') == 'YES'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n5 2 3 4 1') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"1000000000000000000000000000000000\") == 33\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'\nassert solution('201920181') == '4'\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3121') == '2'\nassert solution('201920181') == '4'\nassert solution('1000000000000000000000000000000000') == '33'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'\n\n-----\n3121\n\n2\n\n6\n\n1000000000000000000000000000000000\n\n33\n\n\"\"\""
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"201920181\") == \"4\"\n\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('201920181') == '4'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3121') == 2\nassert solution('6') == 1\nassert solution('201920181') == 4\nassert solution('1000000000000000000000000000000000') == 33\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'\nassert solution('201920181') == '4'\nassert solution('100010110001110001101010110111111111111111111111111111') == '1'\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"1000000000000000000000000000000000\") == 33\nassert solution(\"201920181\") == 4\n\"\"\"\nfrom math import ceil"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"201920181\") == 4\nassert solution(\"1000000000000000000000000000000000\") == 33\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 3 4 5\\n2 4 7 11 3') == 2\n\"\"\"\nfrom typing import List\n\nfrom collections import Counter"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\") == \"3\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\nb = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\\n\") == \"3\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == 2\nassert solution(\"3\\n13 37 39\\n1 2 3\") == 2\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == 0\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a_1, a_2, a_3, b_1, b_2, b_3) == 1\nassert solution(a_1, a_2, a_3, b_1, b_2, b_3) == 2\nassert solution(a_1, a_2, a_3, b_1, b_2, b_3) == 0\nassert solution(a_1, a_2, a_3, b_1, b_2, b_3) == 3\nassert solution(a_1, a_2, a_3, b_1, b_2, b_3) == 2\n\nprint(\"OK!\")\n\n\"\"\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\nassert solution(\"3\\n1 2 3\\n-6 -12 6\\n\") == \"3\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n 1 2\\n 3 4\") == 2\n\nprint(solution(\"5\\n 1 2 3 4 5\\n 2 4 7 11 3\"))\n\nprint(solution(\"3\\n 13 37 39\\n 1 2 3\"))\n\nprint(solution(\"4\\n 0 0 0 0\\n 1 2 3 4\"))"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\n\"\"\"\n\ubb38\uc81c \uc124\uba85\n\ub450 \uac1c\uc758 \ubc30\uc5f4\uc744 \uc785\ub825\ubc1b\uc544\uc11c, \ub450 \ubc30\uc5f4\uc758 \uacf1\uc744 \uc774\uc6a9\ud574\uc11c \uc815\ub82c\ub41c \uac12\uc744 \uc0c8\ub85c\uc6b4 \ubc30\uc5f4\uc5d0 \ub2f4\ub294 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub77c.\n\n\ub9e4\uac1c\ubcc0\uc218 \uc124\uba85\n\uc785\ub825\uc73c\ub85c\ub294 \ub450 \uac1c\uc758 \ubc30\uc5f4\uc758 \uae38\uc774 n\uacfc \ub450 \ubc30\uc5f4\uc758 \uac12\uc744 \ub098\ud0c0\ub0b4\ub294 \uac01\uac01\uc758 \ubc30\uc5f4 a\uc640 b\uac00 \ub4e4\uc5b4\uc788\ub2e4.\n\n\ubc30\uc5f4 a\uc758 \uae38\uc774 n\uc740 1\uc774\uc0c1 10,000\uc774\ud558\uc758 \uc815\uc218\uc774\ub2e4.\n\ubc30\uc5f4 a\uc758 \uc6d0\uc18c\ub294 \ubaa8\ub450 -10,000,000 \uc774\uc0c1 10,000,000 \uc774\ud558\uc758 \uc815\uc218\uc774\ub2e4.\n\ubc30\uc5f4 b\uc758 \uae38\uc774 n\uc740 1\uc774\uc0c1 10,000\uc774\ud558\uc758 \uc815\uc218\uc774\ub2e4.\n\ubc30\uc5f4 b\uc758 \uc6d0\uc18c\ub294 \ubaa8\ub450 -10,000,000 \uc774\uc0c1 10,000,000 \uc774\ud558\uc758 \uc815\uc218\uc774\ub2e4.\n\ub450 \ubc30\uc5f4\uc5d0\uc11c \uac19\uc740 \uc6d0\uc18c\uac00 \uba87 \uac1c \uc788\ub294\uc9c0 \ud655\uc778\ud55c \ub4a4\uc5d0\ub294 \ub2e4\ub978 \uac1c\uc218\ub97c \ucd9c\ub825\ud55c\ub2e4.\n\n\ub9e4\uac1c\ubcc0\uc218 \uc124\uba85\n\ubc30\uc5f4 a\uc758 \uae38\uc774 n\uc740 1\uc774\uc0c1 10,000\uc774\ud558\uc758 \uc815\uc218\uc774\ub2e4.\n\ubc30\uc5f4 a\uc758 \uc6d0\uc18c\ub294 \ubaa8\ub450 -10,000,000 \uc774\uc0c1 10,000,000 \uc774\ud558\uc758 \uc815\uc218\uc774\ub2e4.\n\ubc30\uc5f4 b\uc758 \uae38\uc774 n\uc740 1\uc774\uc0c1 10,000\uc774\ud558\uc758 \uc815\uc218\uc774\ub2e4.\n\ubc30\uc5f4 b\uc758 \uc6d0\uc18c\ub294 \ubaa8\ub450 -10,000,000 \uc774\uc0c1 10,000,000 \uc774\ud558\uc758 \uc815\uc218\uc774\ub2e4.\n\ub450 \ubc30\uc5f4\uc5d0\uc11c \uac19\uc740 \uc6d0\uc18c\uac00 \uba87 \uac1c \uc788\ub294\uc9c0 \ud655\uc778\ud55c \ub4a4\uc5d0\ub294 \ub2e4\ub978 \uac1c\uc218\ub97c \ucd9c\ub825\ud55c\ub2e4.\n\n\ubc30\uc5f4 a\uc758 \uc6d0\uc18c \uc911\uc5d0\uc11c \uac00\uc7a5 \ud070 \uc6d0\uc18c\uc640 \uac00\uc7a5 \uc791\uc740 \uc6d0\uc18c\ub97c \ucc3e\uace0, \uadf8 \ucc28\ub97c \ucd9c\ub825\ud55c\ub2e4.\n\n\ubc30\uc5f4 a\uc758 \uc6d0\uc18c \uc911\uc5d0\uc11c \uac00\uc7a5 \ud070 \uc6d0\uc18c\uc640 \uac00\uc7a5 \uc791\uc740 \uc6d0\uc18c\ub97c \ucc3e\uace0, \uadf8 \ucc28\ub97c \ucd9c\ub825\ud55c\ub2e4.\n\n\ubc30\uc5f4 a\uc640 b\uc758 \uc6d0\uc18c \uc911\uc5d0\uc11c \uac00\uc7a5 \ud070 \uc6d0\uc18c\uc640 \uac00\uc7a5 \uc791\uc740 \uc6d0\uc18c\ub97c \ucc3e\uace0, \uadf8 \ucc28\ub97c \ucd9c\ub825\ud55c\ub2e4.\n\n\ubc30\uc5f4 a\uc640 b\uc758 \uc6d0\uc18c \uc911\uc5d0\uc11c \uac00\uc7a5 \ud070 \uc6d0\uc18c\uc640 \uac00\uc7a5 \uc791\uc740 \uc6d0\uc18c\ub97c \ucc3e\uace0, \uadf8 \ucc28\ub97c \ucd9c\ub825\ud55c\ub2e4.\n\n\ub9e4\uac1c\ubcc0\uc218 \uc124\uba85\n\ubc30\uc5f4 a\uc758 \uae38\uc774 n\uc740 1\uc774\uc0c1 10,000\uc774\ud558\uc758 \uc815\uc218\uc774\ub2e4.\n\ubc30\uc5f4 a\uc758 \uc6d0\uc18c\ub294 \ubaa8\ub450 -10,000,000 \uc774\uc0c1 10,000,000 \uc774\ud558\uc758 \uc815\uc218\uc774\ub2e4.\n\ubc30\uc5f4 b\uc758 \uae38\uc774 n\uc740 1\uc774\uc0c1 10,000\uc774\ud558\uc758 \uc815\uc218\uc774\ub2e4.\n\ubc30\uc5f4 b\uc758 \uc6d0\uc18c\ub294 \ubaa8\ub450 -10,000,000 \uc774\uc0c1 10,000,000 \uc774\ud558\uc758 \uc815\uc218\uc774\ub2e4.\n\ub450 \ubc30\uc5f4\uc5d0\uc11c \uac19\uc740 \uc6d0\uc18c\uac00 \uba87 \uac1c \uc788\ub294\uc9c0 \ud655\ufffd"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 2 3\\n2 4 7 11 3') == '2'\nassert solution('1\\n2\\n3') == '0'\nassert solution('1\\n2\\n3\\n4\\n5') == '0'\nassert solution('1\\n2\\n0\\n3\\n0\\n4\\n0\\n5\\n0') == '2'\n\n\"\"\"\n\nn = int(stdin.readline().strip())\na = [int(x) for x in stdin.readline().strip().split(' ')]\nb = [int(x) for x in stdin.readline().strip().split(' ')]\nc = [a[i] * b[i] for i in range(n)]\nd = [0 for _ in range(n)]\nfor i in range(n):\n    for j in range(n):\n        d[i] += a[j] * b[i]\n\nprint(max(d))\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n3\n1 2 -1\n-6 -12 6\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n1 2 3 4 5\n2 4 7 11 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n5\n0 0 0 0\n1 2 3 4\n\"\"\") == \"0\"\nassert solution(\"\"\"\n5\n13 37 39\n1 2 3\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n1 2 -1\n-6 -12 6\n\"\"\") == \"3\""
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('hellocode') == '0'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"10\"\nassert solution(\"abaca?b\") == \"5\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\n\"\"\"\n\nn = int(input())\nl = input()\nr = input()\n\ncompatibility = {}\nfor i in range(n):\n    if l[i] not in compatibility:\n        compatibility[l[i]] = {'?'}\n    else:\n        compatibility[l[i]].add('?')\n    if r[i] not in compatibility:\n        compatibility[r[i]] = {'?'}\n    else:\n        compatibility[r[i]].add('?')\n\nfor i in compatibility:\n    compatibility[i] = list(compatibility[i])\n\nans = 0\nfor i in compatibility:\n    if len(compatibility[i]) == 2:\n        ans += 1\n\nprint(ans)\nfor i in compatibility:\n    if len(compatibility[i]) == 2:\n        print(i, compatibility[i][0], compatibility[i][1])\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"0\""
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('hellocode') == '0'\nassert solution('bambarbia') == '10'\nassert solution('code???????????') == '10'\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"hellocode\") == \"0\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"code??????\") == \"10\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('bambarbia') == '0'\nassert solution('hellocode') == '10'\n\n\"\"\""
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"0\"\nassert solution(\"test\") == \"10 9\"\n\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"0\"\nassert solution(\"test\") == \"10\"\n\"\"\"\n\nfrom collections import Counter\nimport sys"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"5\\n7 8\"\nassert solution(\"dodivthree\") == \"5\\n7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"10\\n6 2\\n1 6\\n7 3\\n3 5\\n4 8\\n9 7\\n5 1\\n2 4\\n10 9\\n8 10\"\nassert solution(\"aaaaaaaa\") == \"5\\n6 2\\n1 6\\n7 3\\n3 5\\n4 8\\n9 7\\n5 1\\n2 4\\n10 9\\n8 10\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"7 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"4 1 1 1\") == \"4\"\nassert solution(\"4 4\") == \"1 1\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"4\\n1 1 1 1\") == \"4\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\n\"\"\""
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\nassert solution('7') == '7'\n\"\"\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"7 4 1 2 2 1 5 3\") == \"3\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 2 2 1 5 3\\n') == '3'\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '2'\n\"\"\"\n\nimport sys\nimport re\nfrom collections import defaultdict"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == '3\\n7 7\\n2 3\\n4 5'\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == '2\\n3 4\\n1 1\\n2 2'\nassert solution(\"4\\n1 1 1 1\") == '4\\n4 4\\n1 1'\nassert solution(\"4\\n4 4\") == '4\\n4 4'\nprint('The solution is correct!')\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\\n4 5\"\n\"\"\"\n\nimport sys\nimport heapq\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 2\\n\") == '1'\n\nassert solution(\"4 3\\n1 2 3 4\\n\") == '0'\n\nassert solution(\"2 2\\n1 2\\n\") == '1'\n\nassert solution(\"4 3\\n1 2 3 4\\n\") == '0'\n\nassert solution(\"4 3\\n4 3\\n\") == '0'"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_data) == test_results\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n2 78 4 10') == '12'\nassert solution('5 2\\n3 7 19 3 3') == '0'\nassert solution('4 2\\n3 7 19 3 3') == '0'\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n2 78 4 10\\n\") == 12\nassert solution(\"5 2\\n3 7 19 3 3\\n\") == 0\nassert solution(\"4 11\\n45 1 10 12 11 7\\n\") == 7\nassert solution(\"5 2\\n3 7 19 3 3\\n\") == 0"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n2 78 4 10\\n') == '12'\nassert solution('5 2\\n3 7 19 3 3\\n') == '0'\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'6 11\\n45 1 10 12 11 7'\n) == '7'\nassert solution(\n'4 2\\n2 78 4 10'\n) == '12'\nassert solution(\n'5 2\\n3 7 19 3 3'\n) == '0'"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 11\\n45 1 10 12 11 7\") == \"7\"\nassert solution(\"4 2\\n2 78 4 10\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\"\n\n\n'''"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 11\") == '7'\nassert solution(\"4 2\") == '12'\nassert solution(\"5 2\") == '0'\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"6 11\n45 1 10 12 11 7\"\"\") == 7\nassert solution(\"\"\"4 2\n2 78 4 10\"\"\") == 12\nassert solution(\"\"\"5 2\n3 7 19 3 3\"\"\") == 0\n\n\"\"\""
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '0'\nassert solution('3 3') == '0'\nassert solution('5 2') == '0'\nassert solution('7 2') == '0'\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n2 4 1 5 8 1 7\") == \"10\"\n\"\"\"\nimport sys\n\nn = int(input().strip())\nb = [int(x) for x in input().strip().split()]"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n2 5') == '9'\n\"\"\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2 5') == '9'\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('4') == '4'\nassert solution('6') == '6'\nassert solution('17') == '17'\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n2 5\\n3 10\") == \"16\"\nassert solution(\"10\\n1 2\\n3 4\\n5 6\\n7 8\\n9 10\\n11 12\") == \"20\"\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n3 5 4 5') == '9'\nassert solution('3\\n5 5 5') == '9'\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 5\") == '9'\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 5\") == 9\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n5') == '9'\n\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 5') == '100'\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == '110'\n\"\"\"\n\nfrom math import inf\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(    \"3 4 3\"\n        \"1 3 3 100\"\n        \"1 2 2 10\"\n        \"2 3 2 10\") == \"110\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6 2\\n1 3 1 10\\n2 4 2 10') == '110'\n\"\"\"\nfrom typing import List\nfrom collections import namedtuple\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\"\n\nN, M, Q = list(map(int, input().split(' ')))\nscores = [0] * Q\nfor i in range(Q):\n    a, b, c, d = list(map(int, input().split(' ')))\n    scores[i] = d\n    for j in range(a, b+1):\n        scores[i] += scores[i-1] if i-1 >= 0 else 0\nprint(max(scores))\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nhttps://www.pramp.com/challenge/r4gBKKgJHq6X5J3fSZpJ\n\nGiven a sorted array of strings that is interspersed with empty strings, write a method to find the location of a given string.\n\nExample\n\nGiven input array A = [\"at\",\"\",\"\",\"\",\"ball\",\"\",\"\",\"car\",\"\",\"\",\"dad,,\",\"mom\"]\n\nand given query string B = \"ball\", your method should return 4.\n\nGiven array A = [\"at\",\"\",\"\",\"\",\"ball\",\"\",\"\",\"car\",\"\",\"\",\"dad,,\",\"mom\"]\n\nand given query string B = \"at\", your method should return 0.\n\n-----Constraints-----\n - 1 \u2264 size(A) \u2264 106\n - size(A) \u2264 106\n - 1 \u2264 size(B) \u2264 106\n - size(B) \u2264 106\n - A contains only lowercase English letters, and empty strings.\n - B contains only lowercase English letters.\n - The elements of A are in sorted order (lexicographicaly).\n - The elements of A are distinct.\n - The elements of B are distinct.\n - 0 \u2264 B.length \u2264 106\n\n-----Sample Input-----\n\n[\u201cat\u201d,\u201d\u201d,\u201d\u201d,\u201d\u201d,\u201dball\u201d,\u201d\u201d,\u201d\u201d,\u201dcar\u201d,\u201d\u201d,\u201ddad,\u201d,\u201dmom\u201d]\n\u201dball\u201d\n-----Sample Output-----\n4\n\n-----Explanation-----\n\nThe query string B = \u201cball\u201d is present in the array A at index 4.\n\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 4 6 3\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 4 6 3') == '5'"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\nassert solution(\"3\\n4 6 2\") == \"3\"\n\"\"\"\n\nimport sys\n\nfrom typing import List, Union\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n6 3 4 7 9\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\nprint(solution(\"4\\n1 4 6 3\"))\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 4 6 3\\n\") == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 4 6 3\\n\") == \"5\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\n\nprint(solution(stdin.readlines()[0]))\n\n\"\"\""
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\nassert solution(\"4\\n1 2\\n2 3\\n3 1\") == \"2.8284271247\"\n\"\"\"\nfrom math import sqrt"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n\n\"\"\"\n    n = int(stdin.readline())\n    x, y = [], []\n    for i in range(n):\n        x.append(int(stdin.readline()))\n        y.append(int(stdin.readline()))\n    total = 0\n    for i in range(n):\n        total += ((x[i] - x[0]) ** 2 + (y[i] - y[0]) ** 2) ** (1 / 2)\n    print(total / factorial(n))\n\"\"\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 0 0 1 0\\n0 0\\n1 0\\n0 1\") == \"2.276142\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n0 0\n1 0\n0 1\n\"\"\") == \"2.2761423749\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n0 0\\n1 0\\n0 1') == '2.276142...'\n\"\"\"\n\nimport math\nimport sys\n\ntest_cases = int(sys.stdin.readline())\nfor test in range(test_cases):\n    n = int(sys.stdin.readline())\n    towns = []\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        towns.append([x, y])\n    towns = list(sorted(towns, key=lambda x: x[0]))\n    x_values = [town[0] for town in towns]\n    y_values = [town[1] for town in towns]\n    town_set = set()\n    town_set.add(towns[0])\n    for i in range(1, n):\n        if x_values[i] - towns[i][0]!= 0:\n            slope = (y_values[i] - towns[i][1]) / (x_values[i] - towns[i][0])\n        else:\n            slope = sys.maxsize\n        for j in range(len(town_set)):\n            if towns[i] == list(town_set)[j]:\n                if i!= j:\n                    town_set.remove(town_set[j])\n                break\n        town_set.add(towns[i])\n    if len(town_set) == 1:\n        print('Impossible')\n    else:\n        print(1/6 * sum([math.sqrt((town_set[i][0] - towns[i][0]) ** 2 + (town_set[i][1] - towns[i][1]) ** 2) for i in range(len(town_set))]))\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 0\\n1 0\\n0 1\\n\") == \"1.41421356237\"\n\"\"\"\n\nimport math\n\nN = int(stdin.readline())\ncoordinates = [tuple(map(float, stdin.readline().split())) for _ in range(N)]\n\naverage = sum(\n    math.sqrt(sum((coordinates[i][0] - coordinates[j][0]) ** 2 + (coordinates[i][1] - coordinates[j][1]) ** 2 for i, j in\n                  ((i, j) for i in range(N) for j in range(N) if i!= j))\n    ) for _ in range(N * (N - 1) // 2)\n) / (N * (N - 1) // 2)\n\nprint(round(average, 6))\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n0 0\n1 0\n0 1''') == '2.0'\nprint(solution('''3\n0 0\n1 0\n0 1'''), '2.0')\nassert solution('''3\n0 0\n0 0\n0 0''') == '2.0'\nprint(solution('''3\n0 0\n0 0\n0 0'''), '2.0')\n\nassert solution('''8\n0 0\n1000 0\n1000 1000\n0 1000\n1000 1000\n1000 0\n0 1000\n0 0\n0 0''') == '8.0'\nprint(solution('''8\n0 0\n1000 0\n1000 1000\n0 1000\n1000 1000\n1000 0\n0 1000\n0 0\n0 0'''), '8.0')\n\nassert solution('''8\n0 0\n-1000 0\n1000 -1000\n0 1000\n1000 1000\n1000 0\n0 1000\n0 0\n0 0''') == '8.0'\nprint(solution('''8\n0 0\n-1000 0\n1000 -1000\n0 1000\n1000 1000\n1000 0\n0 1000\n0 0\n0 0'''), '8.0')\n\nassert solution('''2\n0 0\n0 1''') == '1.4142135623730951'\nprint(solution('''2\n0 0\n0 1'''), '1.4142135623730951')\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n0 0\\n1 0\\n0 1\\n') == '2.2761423749'\n\"\"\"\n\nimport sys\nimport math\n\nassert len(sys.argv) >= 2\nfor arg in sys.argv[1:]:\n    print(arg)"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n0 0\\n1 0\\n0 1') == '2.2761423749'\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('12 4') == '4'\n\"\"\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''12 4''') == '4'\nassert solution('''4 4''') == '0'\nassert solution('''4 3''') == '0'\nassert solution('''1 1''') == '0'\n\n----\n\n\nimport math"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12 4') == '4'\n\"\"\"\n\nimport math\n\na, b = input().split(' ')\n\na, b = int(a), int(b)\n\nprint(math.ceil((a - b) / 2))\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12 4\\n') == '4', 'wrong result'\n\"\"\"\n\nA, B = [int(i) for i in input().split()]\nC = A-2*B\nprint(C)"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12 4\") == \"4\"\nassert solution(\"12 4\") == \"4\"\nassert solution(\"12 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12 4\\n') == '4'\n\"\"\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4') == '4'\n\nassert solution('10 10') == '0'\n\nassert solution('123 10') == '60'\n\nassert solution('1234 10') == '90'\n\nassert solution('1234 15') == '120'"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12 4\") == \"4\"\nassert solution(\"34 4\") == \"0\"\nassert solution(\"10 9\") == \"1\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12 4') == '4'\n\n--------------------------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10000\") == \"3\"\nprint(solution(\"10000\"))\n\"\"\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10000') == '3'\n\"\"\"\n\nimport math\nfrom typing import Generator\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"8\") == \"2\"\nassert solution(\"16\") == \"3\"\nassert solution(\"32\") == \"4\"\nassert solution(\"64\") == \"5\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10000') == 3\n\"\"\"\n\nfrom math import log10"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10000') == 3\n\"\"\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(10**10) == 3\nassert solution(10**11) == 5\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10000\") == 3\n\"\"\"\n\nn = int(stdin.readline())"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n2 1 3\\n4 2 5') == '3'\nassert solution('2 1\\n3 1') == '1'\nassert solution('2 2\\n2 1\\n1 2') == '1'\n\"\"\"\n\nn, m = input().split()\nm, k = map(int, n.split())\n\nd = {}\nfor i in range(m):\n    d[i+1] = list(map(int, input().split()[1:]))"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4\\n2 1 3\\n3 1 2 3') == '1'\nprint(solution(stdin))\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\\n2 3 2\") == '1'\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4\\n2 1 3\\n3 1 2 3') == '1'\nassert solution('3 4\\n2 3 2\\n2 3 2') == '0'\n\n-----Testing-----\nInput:\n3 4\n2 1 3\n3 1 2 3\n2 3 2\n\nOutput:\n1\n\nInput:\n1 10\n2 3\n3 4\n3 5\n3 6\n3 7\n4 8\n5 9\n6 10\n\nOutput:\n2\n\nInput:\n5 10\n2 1 3\n2 3 2\n2 4 2\n2 5 2\n2 6 2\n3 7 3\n4 8 3\n5 9 3\n6 10 3\n\nOutput:\n4\n\nInput:\n5 10\n2 1 3\n2 3 2\n2 4 2\n2 5 2\n2 6 2\n3 7 3\n4 8 3\n5 9 3\n6 10 3\n\nOutput:\n4\n\"\"\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 3 2 3\\n2 1 2\\n\") == \"1\"\n\"\"\"\n\n\n\"\"\"\nINPUT:\n4 5\n2 3 4 1 2\n2 3 2\n1 1 2 3\n1 1 1\n1 1 1 1\n\nOUTPUT:\n2\n\nExplanation:\nThe first 4 lines defines a 4x5 matrix. The numbers written in the matrix are the numbers of the food liked by each people.\nEach number is defined by three numbers, which are the numbers of the food.\nSo, if the first person likes 1st, 3rd and 2nd food, the matrix will be written as\n\n2 3 4 1 2\n2 3 2\n1 1 2 3\n1 1 1\n1 1 1\n\nFor the second person, the food he likes is 2nd, 3rd and 2nd food.\nSo, the matrix will be written as\n\n2 3 4 1 2\n2 3 2\n1 1 2 3\n1 1 1\n1 1 1\n\nThe numbers of liked foods for each person are:\n\n1st person: (1, 3, 2)\n2nd person: (2, 3, 2)\n3rd person: (1, 3, 2)\n4th person: (1, 3, 2)\n\nOnly 2 foods are liked by everyone, which are 2nd and 3rd food.\nSo the answer is 2\n\nNote: if you want to use numpy, you can import it as np and do np.sum(matrix, axis = 0)\n\"\"\"\n\nimport sys\n\nfoods = []\nfor i in range(4):\n    line = sys.stdin.readline().split()\n    foods.append([int(j) for j in line])\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == '1'"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == \"1\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 4\n2 1 3\n3 1 2 3''') == '1'\n\n\"\"\""
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'3 4\\n'\n'2 1 3\\n'\n'3 1 2 3\\n'\n'2 3 2\\n') == '1'\n\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\nfoods = dict()\nfor i in range(n):\n    a = int(sys.stdin.readline())\n    for j in range(a):\n        foods[j + 1] = 1\n\ns = set(foods.values())\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4\\n2 1 3\\n3 1 2 3\\n2 3 2') == '1'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n') == '0.5'\n\"\"\""
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n\") == \"0.5\"\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '0.5'\nassert solution('3') == '0.6666666666666666'\nassert solution('1') == '0.3333333333333333'\nassert solution('5') == '0.4'\n\"\"\"\n\nfrom fractions import Fraction"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1) == \"0.5\"\nassert solution(2) == \"0.8333333333333334\"\nassert solution(3) == \"0.6666666666666666\"\nassert solution(4) == \"0.5\"\nassert solution(5) == \"0.4\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n') == '0.5'\n\n-------\n\nGiven is an integer N. Takahashi chooses an integer a from the positive integers not greater than N with equal probability.\nFind the probability that a is odd.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint the probability that a is odd.\nYour output will be considered correct when its absolute or relative error from the judge's output is at most 10^{-6}.\n\n-----Sample Input-----\n4\n\n-----Sample Output-----\n0.5\n\nThere are four positive integers not greater than 4: 1, 2, 3, and 4. Among them, we have two odd numbers: 1 and 3. Thus, the answer is \\frac{2}{4} = 0.5.\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"4\\n\"\n) == \"0.5\\n\"\n\"\"\"\nfrom __future__ import print_function\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n\") == \"0.5\"\nassert solution(\"3\\n\") == \"0.6666666666\"\n\"\"\"\n\nN = int(stdin.readline().strip())\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '0.5'\nassert solution('1') == '0'\nassert solution('5') == '0.4'\n\"\"\"\n\n\"\"\"\nSolution 1:\nTo calculate probability of an event P(A) = P(A and B), P(A) = P(A and not B) = P(A and not B and C) = P(A and not B and not C) = P(A and not B and not C and D)\n= P(A and not B and not C and not D) = P(not A and B and C and D)\n= 1 - P(A and B and C and D)\n= 1 - P(not A and not B and C and D)\n= 1 - P(not A and not B and C and D)\n= 1 - P(not A and B and C and D)\n= 1 - P(A and B and C and D)\n= 1 - P(A and B and C)\n= 1 - P(A and B)\n= 1 - P(A)\n= 1 - 0.5\n= 0.5\n\"\"\"\n\n\"\"\"\nSolution 2:\nTo calculate probability of an event P(A) = P(A and B), P(A) = P(A and not B) = P(A and not B and C) = P(A and not B and not C) = P(A and not B and not C and D)\n= P(A and not B and not C and not D) = P(not A and B and C and D)\n= 1 - P(A and B and C and D)\n= 1 - P(A and B and C)\n= 1 - P(A and B)\n= 1 - 0.5\n= 0.5\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n\") == \"0.5\"\n\"\"\""
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n') == '0.5'\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == 2\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == 2\n\n------\n3\n1\n2 1\n1\n1 1\n1\n2 0\n\n------\n\n4\n1\n1\n1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n4\n1\n2 1\n1\n1 1\n1\n2 0\n\n-------\n4\n2\n1\n1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n4\n1\n2 1\n2\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n5\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n5\n1\n2 1\n2\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n5\n1\n1\n2 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n6\n1\n1\n2 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n6\n1\n2 1\n2\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n7\n1\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n7\n1\n1\n1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n7\n2\n1\n1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n8\n1\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n8\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n8\n1\n2 1\n2\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n8\n2\n1\n1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n8\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n8\n1\n2 1\n2\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n8\n1\n2 1\n2\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n8\n1\n1\n1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n8\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n9\n1\n1\n1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n9\n1\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n9\n1\n1\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n9\n1\n1\n1\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n9\n1\n1\n2 1\n2\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n10\n1\n1\n1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n10\n1\n1\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n10\n1\n1\n1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n10\n1\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n10\n1\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n10\n1\n2 1\n2\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n10\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n10\n1\n2 1\n2\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n10\n2\n1\n1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n11\n1\n1\n1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n11\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n11\n1\n2 1\n2\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n11\n1\n1\n1\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n11\n1\n1\n2 1\n2\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n12\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n12\n1\n1\n1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n12\n1\n1\n1\n2 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n2 0\n\n-------\n12\n1\n1\n1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\nassert solution(\"4\\n2\\n1 0\\n2 1\\n2 1\\n2\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\n\"\"\"\n\nimport sys\n\nN = int(input())\nhonest_list = []\nunkind_list = []\nfor i in range(N):\n    if i == 0:\n        honest_list.append(list(map(int, sys.stdin.readline().split())))\n    elif i == N - 1:\n        unkind_list.append(list(map(int, sys.stdin.readline().split())))\n    else:\n        honest_list.append(list(map(int, sys.stdin.readline().split())))"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\") == \"2\"\nassert solution(\"6\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\") == \"2\"\nassert solution(\"7\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\\n7 1\") == \"2\"\nassert solution(\"8\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\\n7 1\\n8 1\") == \"3\"\nassert solution(\"9\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\\n7 1\\n8 1\\n9 1\") == \"3\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1\\n2 1\\n1\\n1\\n1\\n1\\n2 0\\n') == '2'\n\n---------------\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == \"2\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == '2'\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(solution.__doc__) == 'nikoandsolstice has a length of 15, which exceeds K=7.\\nWe should extract the first 7 characters in this string, append... to the end of them, and print the result nikoand....'\nprint(solution(stdin))"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nprint(\"Test 1 PASSED\")\nassert solution(\"kalendernikorsolstice\") == \"kalendernikor...\"\nprint(\"Test 2 PASSED\")\nassert solution(\"kalendernikorsolsticeaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"zoomlazapzo\") == \"zoomlazapzo\"\nassert solution(\"bricks\") == \"bricks\"\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7nikoandsolstice\") == \"nikoand...\"\nassert solution(\"5solstice\") == \"solstice\"\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\nassert solution('abracadabra') == 'abracadabra'\n\nprint(solution('nikoandsolstice'))\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"7\\nnikoandsolstice\"\n) == 'nikoand...'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"orange\") == \"oranges\"\nassert solution(\"banana\") == \"bananas\"\n\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    'apple'\n) == 'apples'\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('apple') == 'apples'\nassert solution('takne') == 'takneses'\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"atcoder\") == \"atcoders\"\n\"\"\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('z') == 'z'\nassert solution('0') == '0'\nassert solution('aa') == 'aa'\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a') == 'a'\nassert solution('aa') == 'aa'\nassert solution('aaa') == 'aaa'\nassert solution('aaaa') == 'aaaa'\nassert solution('aaaaa') == 'aaaaa'\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('apple') == 'apples'\n\"\"\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\\n\") == \"1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"3 2\\n2\\n1 3\\n1\\n3\"\n) == \"1\"\n\"\"\"\n\nimport sys\n\n_, K, *lines = sys.stdin.readlines()\nK = int(K)\nd = []\nsnacks = []\nfor i in range(K):\n    snacks.append(list(map(int, lines[i].split())))\n    d.append(len(snacks[i]))\n\ncurrent = -1\nfor i, snack in enumerate(snacks):\n    if not snack:\n        current = i\n        break\n\ncount = 0\nfor snack in snacks:\n    if snack == []:\n        count += 1\n\nsnakes = 0\nfor snack in snacks:\n    snakes += len(snack)"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\nassert solution('4 1\\n1\\n3\\n1\\n3') == '0'\n\"\"\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == 1\n\"\"\"\n\n\"\"\"\nTakahashi went to the Snuking Community and wrote a story about his adventures.\n\nThe Snuking Community consists of N Snukes and N Snacks.\n\nEvery Snuke lives in the same town and there is only one Snuke in the town for each Snack.\n\nTakahashi always goes to the Snuking Community to make mischief.\n\nWhenever Takahashi comes to the Snuking Community, the Snuke who has no snacks will fall victim to Takahashi's mischief.\n\nThere is only one Snuke who has the Snack, so it will always fall victim to Takahashi's mischief.\n\nTakahashi knows that N Snukes have Snacks 1, Snacks 2,..., Snacks N and every Snuke has only one Snack.\n\nGiven N Snukes' names, Snuking Community's name, Snacks' names, and the number of Snacks each Snuke has, print the number of Snukes who fall victim to Takahashi's mischief.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - 1 \\leq K \\leq 10^5\n - 1 \\leq Snacks_i \\leq 10^5\n - Snukes_i \\neq Snacks_i\n - 1 \\leq A_{i, 1} < \\cdots < A_{i, d_i} \\leq Snacks_i\n\n-----Input-----\nFirst line of the input contains a single integer N, 1 \\leq N \\leq 10^5.\n\nNext line contains a single string Snuking Community's name, 1 \\leq len(Snuking Community's name) \\leq 100.\n\nNext line contains a single string containing N space-separated integers Snacks' names, each of the strings is 1 \\leq len(Snack's name) \\leq 100.\n\nNext N lines contain a single integer d_i, 1 \\leq d_i \\leq N, and d_i space-separated integers A_{i, 1}, A_{i, 2}, \\cdots, A_{i, d_i}, 1 \\leq A_{i, j} \\leq Snacks_i.\n\n-----Output-----\nPrint a single integer, the number of Snukes who fall victim to Takahashi's mischief.\n\n-----Sample Input-----\n3\nSnuking Community\n1 2 3\n3\nA_1 A_2 A_3\n2\nA_1 1\nA_2 1\nA_3 1\n2\nA_1 1\nA_2 1\nA_3 2\n3\nA_1 1\nA_2 1\nA_3 1\n\n-----Sample Output-----\n1\n\n---Problem---\nSnuking Community consists of 3 Snukes and 3 Snacks.\n\nEvery Snuke lives in the same town and there is only one Snuke in the town for each Snack.\n\nEvery Snuke has only one Snack, so every Snuke will fall victim to Takahashi's mischief.\n\nTakahashi knows that N Snukes have Snacks 1, Snacks 2,..., Snacks N and every Snuke has only one Snack.\n\nGiven N Snukes' names, Snuking Community's name, Snacks' names, and the number of Snacks each Snuke has, print the number of Snukes who fall victim to Takahashi's mischief.\n\n------Solution------\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\"\n\nn, k = map(int, stdin.readline().strip().split(' '))\n\nsnakes = []\nfor i in range(n):\n    snakes.append(list(map(int, stdin.readline().strip().split(' '))))\n\nm = int(stdin.readline().strip())\n\nsnakes_chosen = []\n\nfor i in range(m):\n    snakes_chosen.append(list(map(int, stdin.readline().strip().split(' '))))\n\nvictims = [0] * n\n\nfor i in range(m):\n    snake = snakes_chosen[i][0] - 1\n    snack = snakes_chosen[i][1] - 1\n    victims[snake] += 1\n\nprint(sum(victims))\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\nassert solution('1 2\\n1\\n2') == '0'\nassert solution('2 2\\n1\\n1') == '0'\n\"\"\"\n\nimport sys\n\nn, k = [int(x) for x in sys.stdin.readline().strip().split()]\n\nsnake = [int(x) for x in sys.stdin.readline().strip().split()]\n\nsnake_set = set()\n\nfor i in snake:\n    snake_set.add(i)\n\nsnake_list = list(snake_set)\n\nsnake_list.sort()\n\nans = 0\nfor i in snake_list:\n    if i + 1 not in snake_set:\n        ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'a'\nassert solution('aab') == 'a'\nassert solution('aba') == 'a'\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected_output\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n\"\"\"\n\nimport sys\nimport re\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aabbbbaaca\") == 5\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/5526fc09a1bbd946250002dc/train/python\n\nslide 1\n\nNotes: \n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aabbbbaaca') == '5'\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('A') == 'A'\nassert solution('AA') == 'A'\nassert solution('AAB') == 'AB'\nassert solution('AABB') == 'AB'\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abbbbaaca\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5 2 4\") == 3\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\"\n\nimport math\n\nn = int(stdin.readline().rstrip())\na = list(map(int, stdin.readline().rstrip().split(\" \")))\n\ns = sum(a)\ni = 1\nwhile i <= n:\n    if (s % i == 0) and (i % 2 == 0 or i % 3 == 0):\n        s = s / i\n        n = n - 1\n        i = 1\n    i = i + 1\n\nprint(math.floor(s))\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3\n5 2 4\n''') == '3'\n\n\"\"\"\n\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 4\") == 3\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'''3\n5 2 4\n'''\n) == '3'\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n5 2 4') == '3'\nassert solution('2\\n3 5 6') == '1'\nassert solution('4\\n1 2 3 4') == '0'\nassert solution('2\\n3 4 6') == '0'\n\"\"\"\nimport sys\nfrom typing import List, Dict, Union, Tuple\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n5 2 4') == '3'\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"3\\n2\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 4\") == \"3\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = [0] * n\nfor i in range(n):\n    b[i] = a[i] % 3\nprint(b.count(0))"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\nprint('All tests passed.')\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"100 100 100 100\") == \"100\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1 3\") == \"2\"\nassert solution(\"2 1 1 3\") == \"2\"\nassert solution(\"2 2 1 3\") == \"3\"\nassert solution(\"2 1 2 3\") == \"5\"\nassert solution(\"2 1 1 3\") == \"2\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\n\"\"\"\n\nfrom typing import List\nfrom sys import stdin\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 3\") == \"2\"\nassert solution(\"1 2 1 3\") == \"3\"\nassert solution(\"1 1 2 3\") == \"3\"\nassert solution(\"1 2 1 3\") == \"3\"\nassert solution(\"1 1 2 3\") == \"3\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 1 3') == '2'\n\n\"\"\"\nimport re"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 3\") == \"2\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"1 2 3 4\") == \"3\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 3\") == \"2\"\n\nassert solution(\"2 1 1 3\") == \"3\"\n\nassert solution(\"3 1 1 3\") == \"3\"\n\nassert solution(\"1 2 1 3\") == \"3\"\n\nassert solution(\"2 1 3 1\") == \"2\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"10 10\") == \"No\"\n\n----\n\n\nFind the smallest positive number that is evenly divisible by all of the numbers from 1 to 20.\n\n-----Constraints-----\n - 20 \\leq X \\leq 100\n - 1 \\leq Y \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nX Y\n\n-----Output-----\nPrint the smallest positive number that is evenly divisible by all of the numbers from 1 to 20.\n\n-----Sample Input-----\n6 20\n\n-----Sample Output-----\n360\n\nThe smallest positive number that is evenly divisible by all of the numbers from 1 to 20 is 360.\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"No\"\nassert solution(\"5 4\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 8\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 8\") == \"Yes\"\nassert solution(\"4 8\") == \"No\"\nassert solution(\"2 2\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 8\\n\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 8\\n') == 'Yes'\nassert solution('3 2\\n') == 'No'\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"No\"\nassert solution(\"3 4\") == \"Yes\"\nassert solution(\"3 3\") == \"No\"\n\"\"\"\n\nX, Y = [int(i) for i in input().split()]"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 8\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 8') == 'Yes'\nassert solution('2 1') == 'No'\nassert solution('1 5') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == \"2\"\n\"\"\"\n\nN, M = [int(s) for s in input().split()]\n\ngraph = {}\n\nfor i in range(M):\n    edge = input().split()\n    if edge[0] not in graph:\n        graph[edge[0]] = [edge[1]]\n    else:\n        graph[edge[0]].append(edge[1])\n    if edge[1] not in graph:\n        graph[edge[1]] = [edge[0]]\n    else:\n        graph[edge[1]].append(edge[0])"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"4 3\\n1 3\\n1 2\\n2 3\\n1 2\") == \"2\"\n\n\"\"\"\n\nclass Solution:\n    # Solution 1\n    \"\"\"\n    Time Complexity : O(2^N)\n    Space Complexity : O(N)\n    \"\"\"\n    def __init__(self):\n        self.visited = set()\n\n    def DFS(self, i):\n        if i not in self.visited:\n            self.visited.add(i)\n        for j in range(N):\n            if self.g[i][j] == 1 and j not in self.visited:\n                self.DFS(j)\n\n    def countPaths(self, n):\n        self.g = [ [0]*n for _ in range(n) ]\n        for u, v in edges:\n            self.g[u-1][v-1] = 1\n            self.g[v-1][u-1] = 1\n        for i in range(n):\n            self.DFS(i)\n        return len(self.visited)\n\n\n    # Solution 2\n    \"\"\"\n    Time Complexity : O(M*2^N)\n    Space Complexity : O(N)\n    \"\"\"\n    def __init__(self):\n        self.visited = set()\n\n    def DFS(self, i, c):\n        if c in self.visited:\n            return\n        self.visited.add(c)\n        for j in range(N):\n            if self.g[i][j] == 1 and c == 0:\n                self.DFS(j, 1)\n\n    def countPaths(self, n):\n        self.g = [ [0]*n for _ in range(n) ]\n        for u, v in edges:\n            self.g[u-1][v-1] = 1\n            self.g[v-1][u-1] = 1\n        for i in range(n):\n            self.DFS(i, 0)\n        return len(self.visited)"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 3\") == \"2\"\n\"\"\"\n\nimport sys\nimport unittest\n\n\nclass Solution:\n    \"\"\"Class that contains solution to the problem\"\"\"\n\n    def __init__(self):\n        \"\"\"Initializes instance variables\"\"\"\n        pass\n\n    def get_number_of_paths(self, num_vertices: int, edges: list) -> int:\n        \"\"\"Returns number of paths starting from vertex 1 that visit all vertices exactly once\n\n        Args:\n            num_vertices: integer that represents number of vertices\n            edges: list of tuples that represent edges\n\n        Returns:\n            int: number of paths\n        \"\"\"\n\n        number_of_paths = 0\n\n        # iterate over all edges\n        for edge in edges:\n            # get start and end vertices\n            start, end = edge[0] - 1, edge[1] - 1\n\n            # store start vertices in set if not in set, otherwise increment number of paths\n            if start in self.vertices:\n                self.vertices[start] += 1\n            else:\n                self.vertices[start] = 1\n            \n            # if end vertex is not in set, then path is valid and increment number of paths\n            if end not in self.vertices:\n                number_of_paths += 1\n\n        return number_of_paths\n\n\nclass UnitTest(unittest.TestCase):\n    \"\"\"Unit test class\"\"\"\n\n    def test_get_number_of_paths(self):\n        \"\"\"Test get_number_of_paths method\"\"\"\n\n        solution = Solution()\n\n        self.assertEqual(2, solution.get_number_of_paths(3, [(1, 2), (1, 3), (2, 3)]))\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n1 4\\n2 4\") == 2\n\"\"\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2\\n1 3\\n2 3\\n3 1\\n3 4\") == \"2\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"3 3\n1 2\n1 3\n2 3\n\"\"\") == '2'\n\nassert solution(\n\"\"\"3 3\n1 2\n1 3\n2 3\n\"\"\") == '2'\n\nassert solution(\n\"\"\"3 3\n1 2\n1 3\n2 3\n\"\"\") == '2'\n\nassert solution(\n\"\"\"5 5\n1 2\n1 3\n2 3\n2 4\n2 5\n3 4\n3 5\n\"\"\") == '9'\n\nassert solution(\n\"\"\"5 5\n1 2\n1 3\n2 3\n2 4\n2 5\n3 4\n3 5\n\"\"\") == '9'"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == \"2\"\n\n-------"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1 2\\n1 3\\n2 3\\n') == '2'\nassert solution('4 3\\n1 2\\n2 3\\n') == '2'\nassert solution('4 3\\n1 2\\n3 4\\n') == '0'\nassert solution('4 4\\n1 2\\n3 4\\n') == '1'\nassert solution('4 4\\n1 2\\n3 4\\n') == '1'\n\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 2\\n1 3\\n2 3') == '2'\n\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 3\n1 2\n1 3\n2 3''') == '2'\nassert solution('''4 4\n1 2\n1 3\n2 3\n3 4''') == '2'\n\nassert solution('''4 4\n1 2\n1 3\n2 3\n3 4\n1 4''') == '1'\nassert solution('''8 7\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\n5 6\n6 7\n2 7\n3 7''') == '0'\n\nassert solution('''8 7\n1 2\n1 3\n2 3\n3 4\n3 5\n4 5\n5 6\n6 7\n1 7''') == '1'\n\n'''\nInput:\n    - stdin (stdout)\n    - A string (str) containing the input of the program.\nOutput:\n    - A string (str) containing the output of the program.\n'''"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n1 2 3 4 5\") == \"18\"\n\"\"\"\n\nfrom math import inf\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n\") == \"18\"\n\"\"\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"18\"\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2') == '18'\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"18\"\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n') == '18'\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n\") == \"18\"\n\"\"\"\n\nfrom sys import stdin\n\n\"\"\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n') == '18'\n\"\"\"\n\nN, L = [int(num) for num in stdin.split()]"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == '18'\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\") == \"5\"\nassert solution(\"10 1\") == \"13\"\nassert solution(\"100 1\") == \"101\"\nassert solution(\"200 1\") == \"201\"\nassert solution(\"100 100\") == \"1010\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('15\\n') == '60'\n\n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('15') == '60'\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n20\n\"\"\"\n) == \"30\"\nprint(\"All Test Cases Passed!\")\n\nassert solution(\n\"\"\"\n3\n\"\"\"\n) == \"6\"\nprint(\"All Test Cases Passed!\")\n\nassert solution(\n\"\"\"\n4\n\"\"\"\n) == \"10\"\nprint(\"All Test Cases Passed!\")\n\nassert solution(\n\"\"\"\n5\n\"\"\"\n) == \"16\"\nprint(\"All Test Cases Passed!\")\n\nassert solution(\n\"\"\"\n6\n\"\"\"\n) == \"22\"\nprint(\"All Test Cases Passed!\")"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"15\") == \"60\"\nprint(\"PASSED\")\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('15\\n') == '60'\n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"15\") == \"60\"\n\n'''\n\nfrom collections import deque"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('15') == '60'\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\n-----Explanation-----\nTest case:\n  X = 6\n  p_1 = 4, p_2 = 7, p_3 = 10, p_4 = 6, p_5 = 5\n  The only integers not contained in the sequence 4, 7, 10, 6, 5 are 3 and 8.\n  The integer 8 has the minimum absolute difference with X, so we print it.\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 7 10 6 5\") == 8\n\"\"\"\n\nx, n = list(map(int, stdin.split()))\nnums = list(map(int, stdin.split()))\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\nprint('Test: OK\\n')\n\n-----\nIf you\u2019ve done a lot of coding, you probably have no idea of the standard input and output format of challenges. It is no secret that a lot of beginners have this incomprehensible idea, too.\n\nIt\u2019s easy to overlook, but it is an important part of being a programmer. It is your job to convince yourself that things that look like strings in the input are strings, that things that look like numbers are numbers, and so on.\n\nThe input for this problem is read from the console.\n\nThe first line contains integers X and N, X being the number to which the nearest integer should be found and N being the length of the sequence.\n\nNext, N lines contain the integers p_1, \\ldots, p_N (p_i is not necessarily positive).\n\nAfter that, there is one more line containing the integer X, which is the number to which the nearest integer should be found.\n\nFinally, there is one last line containing N integers not contained in the sequence p_1, \\ldots, p_N.\n\nIf there are multiple such integers, print the smallest such integer.\n\nOutput Format\nOn the console output, print the integer nearest to X, that is, the integer whose absolute difference with X is the minimum.\n\nSample Input\n6 5\n4 7 10 6 5\n8\n\nSample Output\n8\n\"\"\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"\n\"\"\"\n\nX, N = map(int, input().split())\np = [int(i) for i in input().split()]\na = [abs(X - i) for i in p]\nprint(min(a))\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"\nimport math\n\nX, N = map(int, input().split())\nnums = list(map(int, input().split()))\n\nnums.sort()\n\nleft, right = 0, len(nums)\nwhile left < right:\n    mid = left + math.floor((right - left) / 2)\n    if nums[mid] < X:\n        left = mid + 1\n    elif nums[mid] > X:\n        right = mid\n    else:\n        left = mid\n\nleft, right = 0, len(nums)\nwhile left < right:\n    mid = left + math.floor((right - left) / 2)\n    if nums[mid] < X:\n        left = mid + 1\n    elif nums[mid] > X:\n        right = mid\n    else:\n        right = mid"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n4 7 10 6 5\") == \"8\"\nprint('PASSED')\n\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n2 1\") == 1\n\"\"\"\n\nfrom utils.test import Test"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n2 1') == '1'\n\n---------------------------------------"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 2\n2 1''') == '1'\n\nassert solution('''3 2\n1 2''') == '0'\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\"\n\nimport sys\nimport math\nfrom collections import defaultdict\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 2\n2 1''') == \"1\"\nassert solution('''5 5\n2 2\n1 4\n2 3\n3 2\n4 1''') == \"0\"\n\n\"\"\"\n\nH, W = map(int, input().split())\nrow_col = []\nfor _ in range(H):\n    row_col.append(list(map(int, input().split())))"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n2 1') == '1'\nassert solution('3 3\\n3 2') == '4'\nassert solution('3 2\\n1 1') == '1'\nassert solution('3 2\\n1 2') == '0'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\n\"\"\"\nimport sys\nimport os\nimport time\n\n_input = sys.stdin.readlines()\nn, k = list(map(int, _input[0].split()))\n_input = list(map(int, _input[1].split()))"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == '6'\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\n\"\"\"\n\nfrom math import ceil\nimport sys\n\nn, k = map(int, input().strip().split())\narr = list(map(int, input().strip().split()))\n\npos = 0\nfor i in range(n):\n    if arr[i] <= k:\n        k -= arr[i]\n    else:\n        pos = i + 1\n        break"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == '6'\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == '-1'\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2\\n3 7 5 1 10 3 20\") == '6'\nassert solution(\"7 4\\n3 7 5 1 10 3 20\") == '6'\n\n\"\"\"\n\nimport sys\n\nlines = sys.stdin.readlines()\nline = lines[0].split()\nN, K = int(line[0]), int(line[1])\nsequence = list(map(int, lines[1].split()))\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2 3 7 5 1 10 3 20\") == \"1\"\nassert solution(\"7 3 7 5 1 10 3 20\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 7 5 1 10 3 20') == '6'\nassert solution('3 7 5 1 10 3 20') == '6'\nassert solution('3 7 5 1 10 3 20') == '6'\nassert solution('3 7 5 1 10 3 20') == '6'\nassert solution('3 7 5 1 10 3 20') == '6'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n') == '3\\n3 4 1\\n3 5 2\\n3 5 1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\n.*...\\n.*..\\n****') == '3\\n2 2 1\\n3 3 1'\nassert solution('3 3\\n.*...\\n.*..\\n.*..') == '-1'\nassert solution('5 5\\n.*...\\n.*..\\n.*...\\n.*...') == '-1'\n\"\"\""
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n.*\\n.*\") == \"3\\n1 2 1\"\nassert solution(\"3 2\\n.*\\n.*\") == \"3\\n1 2 1\"\nassert solution(\"3 2\\n.*\\n.*\") == \"3\\n1 2 1\"\nassert solution(\"3 2\\n.*\\n.*\") == \"3\\n1 2 1\"\nassert solution(\"3 2\\n.*\\n.*\") == \"3\\n1 2 1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3') == '-1'\nassert solution('5 5') == '-1'\nassert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....') == '3\\n2 2 1\\n3 3 1\\n3 4 1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\n\"\"\""
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\".*...\\n.*...\\n..****\\n...**.\\n....*\\n........\\n\") == \"3\\n3 4 1\\n3 5 2\"\nassert solution(\".....\\n....*\\n.****\\n****.\\n*****\\n.....\") == \"-1\""
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n.*\\n.*\\n.*\") == \"3\\n2 2 1\"\nassert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\"\nassert solution(\"5 5\\n.*...\\n.*..\\n.*..\\n.*..\\n.*..\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"5 5\\n.*...\\n.*..\\n.*..\\n.*..\\n.*..\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"5 5\\n.*...\\n.*..\\n.*..\\n.*..\\n.*..\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"-1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"\n\nassert solution(\"3 3\\n.*\\n.*\\n.*\") == \"1\"\nassert solution(\"3 3\\n.*\\n***\\n.*\") == \"1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\".*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.*...\\n.*...\\n.....\\n\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\\n\") == \"-1\"\n\n[[\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\\n\"],\n[\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\\n\"],\n[\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\\n\"]]\n\n\"\"\"\nfrom typing import List\n\nfrom utils import read_input\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"3 3\\n.**\\n.*.\\n.*.\") == \"-1\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('good') == 0\nassert solution('bad') == 1\nassert solution('aa') == 1\nassert solution('aabc') == 2\n\nassert solution(stdin) == 2\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aaa\") == \"def\"\nassert solution(\"aabc\") == \"ab\"\nassert solution(\"abc\") == \"\"\nassert solution(\"aab\") == \"a\"\nassert solution(\"a\") == \"a\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abcd') == 'abc'\nassert solution('abc') == 'abc'\nassert solution('aaaa') == 'aa'\nassert solution('aaa') == 'aa'\nassert solution('abac') == 'ab'\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(good) == 0\nassert solution(string) == 2\nassert solution(xyyx) == 3\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aaa\") == \"abc\"\nassert solution(\"aab\") == \"ab\"\n\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aabc') == 'ab'\n\nassert solution('aaa') == '3'\n\nassert solution('ab') == '1'\n\nassert solution('b') == '0'\n\nassert solution('bb') == '1'"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a\") == \"\"\nassert solution(\"aab\") == \"a\"\nassert solution(\"aa\") == \"\"\nassert solution(\"aabc\") == \"a\"\nassert solution(\"aabca\") == \"aab\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(good) == \"0\"\nassert solution(string) == \"string\"\nassert solution(aabc) == \"2\"\nassert solution(aaa) == \"3\"\n\"\"\""
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aaa') == 'aba'\nassert solution('aabc') == 'ab'\nassert solution('xyyxy') == 'x'\n\"\"\"\n\ns = input()\ni = 0\ngood = 0\nwhile i < len(s):\n    if i == 0:\n        if s[i] == s[i + 1]:\n            good += 1\n    elif i == len(s) - 1:\n        if s[i] == s[i - 1]:\n            good += 1\n    else:\n        if s[i] == s[i - 1] or s[i] == s[i + 1]:\n            good += 1\n    i += 1\nprint(good)\ns = s[good:]\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aaa\") == \"ab\"\nassert solution(\"aaaa\") == \"ab\"\nassert solution(\"aaaaa\") == \"ab\"\nassert solution(\"aaaaaa\") == \"ab\"\nassert solution(\"aaaaaaa\") == \"ab\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('\\n') == '\\n'\n\"\"\"\n\n\nfrom collections import defaultdict, Counter\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n1 2\\n2 3\\n3 1\\n3 4\") == \"NO\"\nassert solution(\"5 8\\n1 2\\n1 3\\n2 4\\n3 4\\n5 4\") == \"YES\"\nassert solution(\"6 8\\n1 2\\n1 3\\n2 4\\n3 4\\n3 5\\n5 6\\n5 4\") == \"YES\"\nassert solution(\"1 1\\n2 3\") == \"NO\"\nassert solution(\"3 2\\n1 2\\n2 3\") == \"NO\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n6 5\n1 5\n2 1\n1 4\n3 1\n6 1\n''') == 'YES\\n10100'\n\n-----\n\n@ Cool feature: now I can print the test string to the console in order to verify correctness of my solution!\n\nprint(solution(stdin))\n\n-----\n\nAnd here are some more hints:\n\nUse the function `sys.setrecursionlimit(10 ** 6)` to increase the recursion limit of your system, if you meet a maximum recursion error.\n\nThe `networkx` library can also be helpful.\n\n'''\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 8\\n1 2\\n2 3\\n2 4\\n4 5\\n5 6\\n3 6\\n3 7') == '10100'\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2\\n1 2\\n2 3\") == \"100\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\") == \"10101\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\") == \"101010\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\") == \"10101010\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\") == \"1010101010\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin_lines[0]) == stdout_lines[0]\n\"\"\""
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 3\\n1 2\\n2 3\\n1 3\") == \"YES\\n101\"\nassert solution(\"4 2\\n1 3\\n2 3\") == \"NO\"\nassert solution(\"7 8\\n1 7\\n3 6\\n4 5\\n5 7\\n1 2\\n2 3\\n3 4\\n4 6\\n6 7\\n1 4\") == \"YES\\n101100101010\"\nassert solution(\"3 2\\n1 2\\n2 3\") == \"NO\"\nassert solution(\"6 4\\n2 3\\n4 1\\n1 2\\n2 5\\n1 4\\n1 5\\n2 3\\n1 4\") == \"NO\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 6\\n1 3\\n2 3\\n3 4\\n1 4\\n2 5\\n1 5\\n5 2\\n5 3\\n5 4\") == \"YES\\n10101\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == \"YES\\n10100\"\nassert solution(\"5 3\\n1 2\\n2 3\\n1 4\") == \"NO\"\nassert solution(\"3 2\\n1 2\\n1 3\") == \"YES\\n11\"\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == \"YES\\n10100\"\nassert solution(\"7 9\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 3\\n2 4\\n2 5\\n2 6\\n2 7\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\") == \"NO\"\nassert solution(\"8 5\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n2 3\\n2 4\\n2 5\\n2 6\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\") == \"YES\\n11010\"\nassert solution(\"8 5\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n2 3\\n2 4\\n2 5\\n2 6\\n3 4\\n3 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\") == \"YES\\n11010\"\n\"\"\"\n\nfrom collections import deque\n\nimport sys\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n3 5\n2 2\n1 2\n5 5\n\"\"\") == '2\n3 4'\n\nassert solution(\"\"\"\n1 7\n1 7\n\"\"\") == '0'\n\n\"\"\"\n\nYou are given a set of n intervals on the real line.\n\nWrite a function that returns the maximum number of intervals that are covered by intervals on the real line. That is, if the intervals [a1, b1] and [a2, b2] overlap, then they cover the entire interval [a1, b1] or [a2, b2]. The intervals are said to overlap if they share a common point.\n\nFor example, given intervals [(1, 4), (7, 10), (3, 6)], the function should return 3, since the intervals [(1, 4), (3, 6), (7, 10)] cover the entire interval [1, 10].\n\nGiven intervals [(1, 4), (7, 10), (3, 5)], the function should return 2, since the intervals [(1, 4), (3, 5)] and [(3, 5), (7, 10)] overlap and cover the entire interval [3, 10].\n\nGiven intervals [(1, 4), (6, 7)], the function should return 1, since [(1, 4)] and [(6, 7)] overlap, covering the entire interval [1, 4] and [6, 7].\n\nWrite an efficient algorithm for the following assumptions:\n\nintervals is an array of intervals sorted by their start time;\nn is an integer (n \u2264 intervals.length)."
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n1 2\\n3 4\\n4 5\\n5 6\\n3 7\\n7 7\\n7 7\") == \"0\\n1\\n3\\n4\\n6\"\nassert solution(\"1 7\\n1 7\") == \"0\\n\"\n\nassert solution(\"2 5\\n5 5\\n1 7\") == \"1\\n6\\n\"\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"0\\n0\\n1\\n2\"\nassert solution(\"1 7\\n1 7\\n\") == \"0\\n\""
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5\\n2 2\\n1 2\\n5 5') == '2\\n3 4'\nassert solution('1 7\\n1 7') == '0'\n\nassert solution('3 5\\n2 2\\n1 2\\n5 5') == '2\\n3 4'\nassert solution('1 7\\n1 7') == '0'\n\nassert solution('3 5\\n2 2\\n1 2\\n5 5') == '2\\n3 4'\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\nassert solution(\"1 7\\n2 2\\n1 2\") == \"0\"\nassert solution(\"1 7\\n2 2\\n2 2\\n1 2\") == \"0\"\nassert solution(\"1 7\\n2 2\\n1 2\\n2 2\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\nassert solution(\"1 7\\n1 7\\n1 7\") == \"\"\nassert solution(\"1 7\\n1 7\\n1 7\\n1 7\") == \"0\"\n\n\"\"\"\n\nimport sys\nimport collections\nimport functools\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\") == \"0\"\nassert solution(\"1 7\") == \"0\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"5 5\") == \"0\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 9 2 3') == '2'\nassert solution('1 9 2 3') == '0'\nassert solution('4 6 2 3') == '1'\nassert solution('4 9 6 3') == '0'\nassert solution('1 9 6 3') == '1'\n\"\"\"\n\nA, B, C, D = input().split()\n\nprint(sum(x for x in range(int(A), int(B) + 1) if x % C!= 0 and x % D!= 0))\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 9 2 3') == 2\nassert solution('1 2 2 3') == 0\nassert solution('4 9 2 1') == 4\n\"\"\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 9 2 3') == '2'\nassert solution('4 9 2 4') == '0'\nassert solution('1 5 8 10') == '3'\n\"\"\"\n\nA, B, C, D = map(int, stdin.read().split())\nprint(sum(a % c!= 0 and a % d == 0 for a in range(A, B + 1)))\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 9 2 3') == '2'"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input) == expected_result, 'Not implemented'\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 9 2 3') == 2\n\"\"\"\nimport sys"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(result)\nprint(\"OK\")\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 9 2 3') == '2'\n\"\"\"\n\na, b, c, d = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"0\") == \"No\"\nassert solution(\"12222222222222222222\") == \"No\"\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"23456\") == \"No\"\nassert solution(\"34567\") == \"No\"\nassert solution(\"45678\") == \"Yes\"\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"1234\") == \"No\"\nassert solution(\"12345\") == \"No\"\nassert solution(\"123456\") == \"No\"\nassert solution(\"1234567\") == \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(123456789) == \"Yes\"\n\n-------Solution--------"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(123456789) == \"Yes\"\nassert solution(123) == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('123456789') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(123456789) == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('127') == '4'\n\"\"\"\n\n\"\"\"\n-----idea-----\n\u7d04\u6570: \n\u7d04\u6570\u5171\u8d77\u7684\u7b87\u6240:\n\u7d04\u6570\u5171\u8d77:\nN * N\n=\nN\n * (N-1)\n + N\n * (N-2)\n +...\n + 1\n\n1 1 1 1 1 1 1 1 1 1 1\n1 1 2 3 6 10 15 21 28 36 45 54\n1 1 2 3 6 9 15 21 28 36 45 54...\n\n\u7d04\u6570: \u6307\u4e00\u500b\u6574\u6578\uff0c\u88ab\u6b64\u6574\u6578\u8207\u5c0d\u61c9\u7684\u5076\u6578\u516c\u500d\u6578\u76f8\u52a0\uff0c\u4e0d\u5305\u542b\u81ea\u5df1\n\u7d04\u6578\u5171\u8d77: \u6307\u4e00\u500b\u6574\u6578\uff0c\u88ab\u6b64\u6574\u6578\u8207\u5c0d\u61c9\u7684\u5076\u6578\u516c\u500d\u6578\u76f8\u52a0\uff0c\u4e0d\u5305\u542b\u81ea\u5df1\uff0c\u53ef\u4ee5\u88ab\u67d0\u6574\u6578\u8207\u6b64\u6574\u6578\u7684\u5076\u6578\u516c\u500d\u6578\u76f8\u52a0\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"12\") == \"3\"\nassert solution(\"127\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('127') == '4'\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"127\") == \"4\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"Yes\"\nassert solution(\"a\") == \"No\"\nassert solution(\"aa\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('kyoto') == 'Yes'\nassert solution('tokyo') == 'Yes'\n\"\"\"\n\ns1 = stdin.split('\\n')[0]\ns2 = stdin.split('\\n')[1]"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"xyxz\") == \"Yes\"\nassert solution(\"ab\") == \"No\"\nassert solution(\"a\") == \"Yes\"\nassert solution(\"abcdefgh\") == \"No\"\nassert solution(\"cba\") == \"Yes\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aab\") == \"aba\"\nassert solution(\"aba\") == \"aab\"\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abc\") == \"cba\"\nassert solution(\"abcdefg\") == \"gabcdef\"\nassert solution(\"abcdef\") == \"fabcde\"\nassert solution(\"1234567\") == \"7654321\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"zyxwvutsrqponmlkjihgfedcba\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('kyoto') == 'tokyo'\nassert solution('tokyo') == 'kyoto'\n\"\"\"\n\nS, T = input().split()"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a') == 'a'\nassert solution('a b') == 'b a'\nassert solution('a b c') == 'c b a'\nassert solution('a b c d') == 'd c b a'\nassert solution('a b c d e') == 'e d c b a'\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('kyoto') == 'tokyo'\nassert solution('tokyo') == 'kyoto'\nassert solution('akindofar') == 'kindfar'\nassert solution('a') == 'a'\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('kyoto') == 'tokyo'\nassert solution('tokyo') == 'kyoto'\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"kyoto\") == \"Yes\"\nassert solution(\"tokyo\") == \"Yes\"\nassert solution(\"japan\") == \"No\"\n\n----\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('cabacc') == 1\n\"\"\"\n\ns = input()\nt = input()\nmin_changes = len(t)\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        tmp_changes = 0\n        for j in range(len(t)):\n            if s[i+j] == t[j]:\n                tmp_changes += 1\n        min_changes = min(min_changes, tmp_changes)\n\nprint(min_changes)\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('cabacc') == '1'\n\"\"\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('cabacc') == '1'\nassert solution('abc') == '0'\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abc\") == \"1\"\nassert solution(\"cabacc\") == \"1\"\nassert solution(\"aaa\") == \"0\"\nassert solution(\"abccc\") == \"1\"\nassert solution(\"ddd\") == \"3\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"cabacc\") == 1\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('cabacc') == '1'\nassert solution('abc') == '0'\nassert solution('aaaaaaaaaa') == '0'\nassert solution('aaaaaaaa') == '0'\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"cabacc\") == 1\nassert solution(\"abc\") == 0\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"cabacc\") == \"1\"\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(T) == P\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abc') == '0'\nassert solution('aabc') == '1'\nassert solution('abca') == '0'\nassert solution('abbcc') == '2'\nassert solution('abcab') == '0'\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 12 2\\n') == '2'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 12 2\") == \"2\"\n\"\"\"\n\nA, B, K = map(int, input().split())\n\nlst = [a for a in range(1, min(A, B) + 1) if A % a == 0 and B % a == 0]\nprint(lst[K - 1])\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 8 2') == '2'\nassert solution('1 1 1') == '1'\nassert solution('5 9 3') == '3'\nassert solution('2 3 9') == '9'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 12 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 20 3\") == \"2\"\nassert solution(\"12 3 1\") == \"2\"\nassert solution(\"8 12 2\") == \"2\"\n\"\"\"\n\nfrom sys import stdin\nfrom math import gcd"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(a_b_k_input) == solution_output\nprint(\"Successfully solved.\")\n\n-----Problem-----\n\nIf you don't know how to start solving this problem,\ngo back and work on that later.\n\n-----Solution-----\n\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 12 2') == '2'\n\"\"\"\n\n\"\"\"\nThe divisor of A and B is written as the largest integer d that\ndivides both A and B, i.e., d = A/B.\n\nIt is also possible to find the divisor of A and B as the greatest common\ndivisor of A and B (GCD).\n\nFind the GCD of A and B, then find the K-th largest among d and GCD.\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 12 2\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('A') == ''\nassert solution('A ') == ''\nassert solution('A   ') == ''\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 5 3\") == \"2\"\nassert solution(\"4 2 1\") == \"1\"\n\n\"\"\"\n\nimport heapq\nimport sys\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1024') == '2020'\n\"\"\"\n\n\"\"\"\nI have not tested this solution, but I believe it works.\nThis solution splits the string into the number of coins, and then uses a greedy approach to add up the maximum happiness points you can earn.\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('2') == '5'\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"512\") == \"2560\"\nassert solution(\"2048\") == \"8192\"\nassert solution(\"1024\") == \"2048\"\nassert solution(\"1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1024\") == \"2020\"\nprint(solution(\"1024\"))\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1025\") == \"2050\"\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1024') == '2020'\n\"\"\"\n\nx = int(stdin.readline().strip())\n\ncount = 0\n\nwhile x > 0:\n    if x >= 500:\n        x -= 500\n        count += 1\n    elif x >= 100:\n        x -= 100\n        count += 1\n    elif x >= 50:\n        x -= 50\n        count += 1\n    elif x >= 10:\n        x -= 10\n        count += 1\n    elif x >= 5:\n        x -= 5\n        count += 1\n    else:\n        x -= 1\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1024') == '2020'\n\"\"\"\n\nx = int(input())"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 4\") == 5\n\"\"\"\n\nimport math"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 4\") == \"5\"\nassert solution(\"3\\n1 10 2 30\") == \"60\"\n\"\"\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4 3 2 1\") == \"12\"\nassert solution(\"1 4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 4\") == 5\n\"\"\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1') == '2'\nassert solution('2 4') == '5'\nassert solution('5 1 3 5 6') == '11'\n\nprint(solution(stdin.rstrip('\\n')))\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 2 4 1') == '12', 'Test 1'\nassert solution('3\\n1 1 1') == '2', 'Test 2'\nassert solution('2\\n2 1') == '2', 'Test 3'\n\"\"\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2 4') == '5'\nassert solution('1 1 1') == '0'\nassert solution('3 2 5') == '10'\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n1 4\") == 5\n\nimport sys\nlines = list(map(int, sys.stdin.readlines()))\nassert lines == [2, 1, 1, 4]\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n2\n1 4\n\"\"\"\n) == \"5\"\nprint(\"PASSED\")\n\n-----\n2\n1 4\n\"\"\"\n) == \"5\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 4') == '5'\nassert solution('4 1 5') == '10'\nassert solution('5 5 5 5') == '10'\n\n\"\"\"\nimport sys\nfrom math import ceil"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 10') == '3'\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 10\\n\") == \"3\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 10') == '3'\n\nassert solution('2 3') == '0'\n\nassert solution('1 1') == '0'\n\nassert solution('3 3') == '1'\n\nassert solution('3 4') == '0'"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 10\") == \"3\"\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 10\\n') == '3'\n\"\"\"\n\nA, B = input().split()\nA = int(A)\nB = int(B)"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 10\") == 3\n\n-----\n1. Read the input.\n2. Take the first number as the number of sockets of the socket.\n3. Take the second number as the number of power strips.\n4. Use the formula to calculate the minimum number of power strips required.\n\n-----\n1. Read the input.\n2. Take the first number as the number of sockets of the socket.\n3. Take the second number as the number of power strips.\n4. Use the formula to calculate the minimum number of power strips required.\n5. Print the minimum number of power strips required.\n\na = int(stdin[0])\nb = int(stdin[1])\nprint(a + b - 1)\n-----\n1. Read the input.\n2. Take the first number as the number of sockets of the socket.\n3. Take the second number as the number of power strips.\n4. Use the formula to calculate the minimum number of power strips required.\n5. Print the minimum number of power strips required."
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 10') == 3\n\"\"\"\n\nA, B = [int(x) for x in stdin.split()]\n\ncnt = 0\nfor i in range(1, A+1):\n    for j in range(A, A-B, -1):\n        if i >= j:\n            break\n        cnt += 1\n\nprint(cnt)\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10\") == \"3\"\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10\") == \"3\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 10') == '3'\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('CSS') == '2'\nassert solution('CSR') == '0'\nassert solution('SCS') == '1'\nassert solution('CSR') == '1'\n\n---\nYou are given a partial code that is used for generating the HackerRank Logo of variable thickness.\nYour task is to replace the blank (______) with rjust, ljust or center.\n\nInput Format\n\nA single line containing the thickness value for the logo.\n\nConstraints\n\nThe thickness must be an odd number.\n\nOutput Format\n\nOutput the desired logo.\n\nSample Input\n\n5\n\nSample Output\n\n    H\n   HHH\n  HHHHH\n HHHHHHH\nHHHHHHHHH\n  HHHHH               HHHHH\n  HHHHH               HHHHH\n  HHHHH               HHHHH\n  HHHHH               HHHHH\n  HHHHH               HHHHH\n  HHHHH               HHHHH\n  HHHHHHHHHHHHHHHHHHHHHHHHH\n  HHHHHHHHHHHHHHHHHHHHHHHHH\n  HHHHHHHHHHHHHHHHHHHHHHHHH\n  HHHHH               HHHHH\n  HHHHH               HHHHH\n  HHHHH               HHHHH\n  HHHHH               HHHHH\n  HHHHH               HHHHH\n  HHHHH               HHHHH\n                    HHHHHHHHH\n                     HHHHHHH\n                      HHHHH\n                       HHH\n                        H\n\n'''\nimport math\nthickness = int(input())\nc = 'H'"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"CSS\") == 2\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"CS\") == '1'\nassert solution(\"CSS\") == '2'\nassert solution(\"CSR\") == '0'\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"CSS\") == 2\n\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('CSS') == 2\nassert solution('CSR') == 0\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"CSS\") == 2\nassert solution(\"CSR\") == 0"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"CSS\") == 2\n\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"CSS\") == 2\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"CSS\") == 2\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"CSS\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"5\\n1 3 5 4 2\"\n) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 2 4 3 1\") == \"2\"\nassert solution(\"1 3 5 4 2\") == \"0\"\nassert solution(\"1 2 3 5 4\") == \"0\"\nassert solution(\"10 9 8 7 6 5 4 3 2 1\") == \"1\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"0\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\nassert solution('8\\n4 6 3 7 5 1 2') == '3'\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 3 5 4 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 3 5 4 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 3 5 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\nprint('OK')\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"2\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"6.040\"\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\") == \"6.720\"\nprint(solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\"))"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"6.040\"\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\") == \"6.720\"\nprint(solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\"))\nprint(solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\"))\nprint(solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\"))\nprint(solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\"))\nprint(solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\"))"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\\n\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\\n\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\\n\") == \"6.040\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\\n\") == \"6.720\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\\n\") == \"6.720\"\n\"\"\""
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == '5.410'\n\"\"\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == '5.410'\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == '5.620'\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == '5.480'\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == '6.040'\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == '6.720'\n\"\"\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\\n\") == '5.410'\nprint(\"Passed!\")\n\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\\n\") == '5.620'\nprint(\"Passed!\")\n\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\\n\") == '5.480'\nprint(\"Passed!\")\n\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\\n\") == '6.720'\nprint(\"Passed!\")\n\"\"\""
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66') == '5.620'"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == '5.410'\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == '5.620'\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == '5.480'\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\") == '6.720'\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == '6.040'\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62') == '5.410'\nassert solution('5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66') == '5.620'\nassert solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76') == '5.480'\nassert solution('5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06') == '6.040'\nassert solution('8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92') == '6.720'\n\n\"\"\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n5\n2.26 1.44\n2.28 0.64\n2.30 -0.30\n1.58 0.66\n3.24 0.66\n''') == '5.610'\nassert solution('''\n8\n6.98 2.06\n6.40 1.12\n5.98 0.24\n5.54 -0.60\n7.16 0.30\n7.82 1.24\n8.34 0.24\n8.74 -0.76\n''') == '5.580'\nassert solution('''\n8\n16.94 2.42\n15.72 2.38\n14.82 1.58\n14.88 0.50\n15.76 -0.16\n16.86 -0.20\n17.00 0.88\n16.40 0.92\n''') == '6.040'\nassert solution('''\n7\n20.62 3.00\n21.06 2.28\n21.56 1.36\n21.66 0.56\n21.64 -0.52\n22.14 2.32\n22.62 3.04\n''') == '6.720'"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\n\n\"\"\""
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8') == '4'\nassert solution('7 10') == '2'\nassert solution('5 15') == '-1'\nassert solution('5 26') == '-1'\nassert solution('5 5 5 5 5') == '1'\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\\n\") == '4'\nassert solution(\"7 10\\n1 3 4 2 1 4 2\\n\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == '1'\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == '-1'\nassert solution(\"5 16\\n5 5 5 5 5\\n\") == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == '4'\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\") == '1'\nassert solution(\"5 26\\n5 5 5 5 5\") == '-1'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n1 3 4 2 1 4 2') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n\n'''\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 8\") == \"4\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 15\") == \"1\"\nassert solution(\"5 26\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 1 1 2\") == 4\nassert solution(\"7 10 5 5 5 5\") == 2\nassert solution(\"5 15 5 5 5\") == -1\nassert solution(\"5 26 5 5 5\") == -1\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\nassert solution(\"1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\") == \"1 1\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3\\n1 2 3 2 4 3 1') == '1 2 3'\nassert solution('10 4\\n1 3 1 3 10 3 7 7 12 3') == '7 3 1 3'\nassert solution('15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1') == '1 1'\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == '1 2 3'\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == '7 3 1 3'\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\") == '1 1'\n\"\"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\\n\") == \"1 2 3\\n\"\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\\n\") == \"7 3 1 3\\n\"\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\\n\") == \"1 1\\n\""
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\n\"\"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\nassert solution(\"10 4\") == \"7 3 1 3\"\nassert solution(\"15 2\") == \"1 1\"\nassert solution(\"4 4\") == \"1 1 1 1\"\nassert solution(\"5 6\") == \"1 1 1 1 1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 3 1 3 10 3 7 7 12 3\") == '7 3 1 3'\nassert solution(\"5 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\") == '1 1'\nassert solution(\"5 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1\") == '1 1'\n\"\"\""
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\nassert solution(\"10 4\") == \"7 3 1 3\"\nassert solution(\"15 2\") == \"1 1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3\\n1 2 3 2 4 3 1') == '1 2 3'\nassert solution('10 4\\n1 3 1 3 10 3 7 7 12 3') == '7 3 1 3'\nassert solution('15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1') == '1 1'\n\"\"\"\n\n\nimport collections\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n1 2 3\\n10 3 7 3\") == \"0\"\n\"\"\"\n\nimport sys\nimport operator\n\nsys.stdin = open('test_files/Y13R5P1/A.in')"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n1\\n1\\n1') == 0\nassert solution('1\\n2\\n3\\n4\\n5') == 0\nassert solution('1\\n2\\n3\\n4\\n5\\n2\\n1\\n3\\n4\\n5') == 5\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1') == 0\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\n\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\n\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == '5'\nassert solution('2 4\\n1 2 3 4\\n10 3 7 3') == '0'\nassert solution('6 1\\n3\\n6\\n2\\n5\\n1\\n4') == '3'\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n\n\"\"\"\n\nimport collections\nimport heapq\n\n\nclass Cell:\n    def __init__(self, value, row_i):\n        self.value = value\n        self.row_i = row_i\n\n    def __repr__(self):\n        return f'<Cell value={self.value} row_i={self.row_i}>'\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == '5'\nassert solution('2 4\\n1 2 3 4\\n10 3 7 3') == '0'\nassert solution('6 1\\n3\\n6\\n2\\n5\\n1\\n4') == '3'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == '5'\nassert solution('2 4\\n1 2 3 4\\n10 3 7 3') == '0'\nassert solution('6 1\\n3\\n6\\n2\\n5\\n1\\n4') == '3'\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\\n\") == \"3\"\nassert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\\n\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"xxiixxxiixxxiixxxiixxx\") == \"1\"\nassert solution(\"xxxixxxixxxixxxixxxixxxi\") == \"8\"\nassert solution(\"xxxixxixxxiixxixxxiixx\") == \"8\"\nassert solution(\"xxxxxxiixxxiixxxiixxxi\") == \"8\"\nassert solution(\"xxxxxxixxxiixxixxxiixx\") == \"7\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"exxxii\") == 1\nassert solution(\"exxii\") == 0\nassert solution(\"exxx\") == 1\nassert solution(\"exx\") == 0\nassert solution(\"ex\") == 0\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"xxxxxxxxxx\") == \"8\"\n\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"xxxiii\") == \"1\"\nassert solution(\"xxoxx\") == \"0\"\nassert solution(\"xxxxxxxxxx\") == \"8\"\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('xxxiii') == 1\nassert solution('xxoxx') == 0\nassert solution('xxxxxxxxxx') == 8\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"exxxii\") == \"exxii\"\nassert solution(\"xxxxx\") == \"0\"\nassert solution(\"xx\") == \"0\"\nassert solution(\"xxexxx\") == \"0\"\nassert solution(\"exx\") == \"0\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('xxxiii') == '1'\n\nassert solution('xxxxxx') == '0'\n\nassert solution('exxxii') == '1'\n\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('xaxx') == '1'\nassert solution('xxxxx') == '0'\nassert solution('xxxxxx') == '0'\nassert solution('exxxii') == '0'\nassert solution('xxiii') == '1'\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == 48\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '48'\nassert solution('1') == '1'\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n') == '48'\n\n\"\"\"\nimport math"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"48\"\nassert solution(\"10\") == \"645\"\nassert solution(\"3\") == \"12\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == 48\n\n-------"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1) == 3\nassert solution(2) == 16\nassert solution(3) == 36\nassert solution(4) == 48\nassert solution(5) == 60\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"48\"\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n') == '4'\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"48\"\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == 48\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5') == 'unsafe'\n\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3 4) =='safe'\nassert solution(4 6) == 'unsafe'\n\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\") == 'unsafe'\n\"\"\"\n\n\"\"\"\n1714. Check if One String Swap Can Make Strings Equal\n\nGiven two strings s1 and s2, return true if you can swap two letters in s1 so the result is equal to s2, otherwise, return false.\n\nSwapping letters is defined as taking two indices i and j (0-indexed) such that i!= j and swapping the characters at s1[i] and s1[j].\n\nFor example, swapping at indices 0 and 2 in \"abcd\" results in \"cbad\".\n\nExample 1:\n\nInput: s1 = \"ab\", s2 = \"ba\"\nOutput: true\nExplanation: You can swap s1[0] = 'a' and s1[1] = 'b' to get \"ba\", which is equal to s2.\nExample 2:\n\nInput: s1 = \"ab\", s2 = \"ab\"\nOutput: false\nExplanation: The only letters you can swap are s1[0] = 'a' and s1[1] = 'b', which results in \"ba\"!= s2.\nExample 3:\n\nInput: s1 = \"aa\", s2 = \"aa\"\nOutput: true\nExplanation: You can swap s1[0] = 'a' and s1[1] = 'a' to get \"aa\", which is equal to s2.\nExample 4:\n\nInput: s1 = \"aaaaaaabc\", s2 = \"aaaaaaacb\"\nOutput: true\nExample 5:\n\nInput: s1 = \"\", s2 = \"\"\nOutput: true\n \n\nConstraints:\n\n0 <= s1.length, s2.length <= 2 * 104\ns1 and s2 consist of lowercase English letters.\n\n\"\"\"\n\n\"\"\"\nGiven a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.\n\nNote:\n\nThe same word in the dictionary may be reused multiple times in the segmentation.\nYou may assume the dictionary does not contain duplicate words.\nExample 1:\n\nInput: s = \"leetcode\", wordDict = [\"leet\", \"code\"]\nOutput: true\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".\nExample 2:\n\nInput: s = \"applepenapple\", wordDict = [\"apple\", \"pen\"]\nOutput: true\nExplanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\n             Note that you are allowed to reuse a dictionary word.\nExample 3:\n\nInput: s = \"catsandog\", wordDict = [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"]\nOutput: false\n\n\"\"\"\n\n\nclass Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        for i in range(len(s) + 1):\n            for j in range(i + 1, len(s) + 1):\n                if dp[i] and s[i:j] in wordDict:\n                    dp[j] = True\n\n        return dp[len(s)]\n\n\n\"\"\"\n1715. Minimum Subsequence in Non-Increasing Order\n\nGiven the array nums, obtain a subsequence of the array whose sum of elements is strictly greater than the sum of the non included elements in such subsequence. \n\nIf there are multiple solutions, return the subsequence with minimum size and if there still exist multiple solutions, return the subsequence with the maximum total sum of all its elements. A subsequence of an array can be obtained by erasing some (possibly zero) elements from the array. \n\nNote that the solution with the given constraints is guaranteed to be unique. Also return the answer sorted in non-increasing order.\n\nExample 1:\n\nInput: nums = [4,3,10,9,8]\nOutput: [10,9] \nExplanation: The subsequences [10,9] and [10,8] are minimal such that the sum of their elements is strictly greater than the sum of elements not included, however, the subsequence [10,9] has the maximum total sum of its elements. \nExample 2:\n\nInput: nums = [4,4,7,6,7]\nOutput: [7,7,6] \nExplanation: The subsequence [7,7] has the sum of its elements equal to 14 which is not strictly greater than the sum of elements not included (14 = 4 + 4 + 6). Therefore, the subsequence [7,6,7] is the minimal satisfying the conditions. Note the subsequence has to returned in non-decreasing order.  \nExample 3:\n\nInput: nums = [6]\nOutput: [6]\n \n\nConstraints:\n\n1 <= nums.length <= 500\n1 <= nums[i] <= 100\n\"\"\"\n\n\"\"\"\nGiven an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.\n\nExample 1:\n\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nOutput: Because nums[0] + nums[1] == 9, we return [0, 1].\nExample 2:\n\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\nExample 3:\n\nInput: nums = [3,3], target = 6\nOutput: [0,1]\n \n\nConstraints:\n\n1 <= nums.length <= 10^5\n-10^9 <= nums[i] <= 10^9\n-10^9 <= target <= 10^9\nOnly one valid answer exists.\n\n\"\"\"\n\n\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        nums_hash = dict()\n        for i, num in enumerate(nums):\n            if target - num in nums_hash:\n                return [nums_hash[target - num], i]\n            else:\n                nums_hash[num] = i\n\n\n\"\"\"\n1716. Minimum Operators to Reduce X to Zero\n\nGiven a non-negative integer x, compute the minimum number of steps it takes to reduce it to zero.\n\nIn one step, if x is even, you can divide it by 2 to make it odd, or if it's odd, you can subtract 1 to make it even.\n\nExample 1:\n\nInput: x = 1\nOutput: 0\nExplanation: The integer 1 has done all the operations of getting it to zero.\nExample 2:\n\nInput: x = 3\nOutput: 2\nExplanation: \nFirst step: x becomes 2.\nSecond step: x becomes 1.\nExample 3:\n\nInput: x = 6\nOutput: 2\nExplanation: \nFirst step: x becomes 3.\nSecond step: x becomes 2.\nExample 4:\n\nInput: x = 0\nOutput: 0\n\n\"\"\"\n\n\nclass Solution:\n    def numberOfSteps(self, num: int) -> int:\n        step = 0\n        while num!= 0:\n            if num % 2 == 0:\n                num = num / 2\n                step += 1\n            else:\n                num = num - 1\n                step += 1\n        return step\n\n\n\"\"\"\n1717. Minimum Difference Between Largest and Smallest Value in Three Moves\n\nYou are given an integer array nums. By the pigeonhole principle, there must be a number that appears exactly once in nums.\n\nReturn the minimum difference between the maximum value and the minimum value in nums.\n\nExample 1:\n\nInput: nums = [1,"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\nassert solution(\"3 2\") == \"safe\"\nassert solution(\"3 1\") == \"unsafe\"\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5') == 'unsafe'\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5') == 'unsafe'\n\n-----Explanation-----\nThere are four sheep and five wolves. The number of wolves is not less than that of sheep, so they will attack them.\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'unsafe'\n\nassert solution('1 1') =='safe'\n\nassert solution('2 4') == 'unsafe'\n\nassert solution('3 5') =='safe'\n\nassert solution('4 5') == 'unsafe'"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\nassert solution(\"10 3\") == \"safe\"\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 5') == '6'\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 5') == '6'\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\"\nimport ast\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nprint(solution(\"3 4 5\"))\n\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 11 4\") == 4\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3 4') == '1'\n\"\"\"\n\nfrom unittest import TestCase\n\nfrom io import StringIO\n\nfrom itertools import combinations\n\nclass Solution:\n    # Time: O(n)\n    # Space: O(n)\n    def solve(self, A, B, C):\n        # 1 <= A <= 100, 1 <= B <= 100, 1 <= C <= 100\n        min_sounds = 1\n\n        # Check if money can be spent\n        if A * min_sounds > B:\n            return 0\n        if (A * min_sounds + B * C) < A:\n            return 0\n\n        # If we can spend money, check how many times we can\n        min_sounds = B // C\n        max_sounds = B // A + 1\n        return max_sounds - min_sounds + 1\n\nclass TestSolution(TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def test_case1(self):\n        A, B, C = 2, 11, 4\n\n        self.assertEqual(self.solution.solve(A, B, C), 4)\n\n    def test_case2(self):\n        A, B, C = 2, 11, 2\n\n        self.assertEqual(self.solution.solve(A, B, C), 3)\n\n    def test_case3(self):\n        A, B, C = 4, 6, 4\n        self.assertEqual(self.solution.solve(A, B, C), 2)\n\n    def test_case4(self):\n        A, B, C = 10, 10, 10\n        self.assertEqual(self.solution.solve(A, B, C), 0)\n\n    def test_case5(self):\n        A, B, C = 4, 6, 2\n        self."
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 11 4') == 4\nassert solution('10 6 1') == 4\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 11 4') == '4'\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\n\na, b, c = map(int, input().split())"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 11 4') == '4'\nassert solution('7 13 3') == '0'\nassert solution('15 12 6') == '2'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 11 4') == '4'\nassert solution('0 11 4') == '1'\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 11 4') == '4'\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '2 5'\n) == '10'\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5') == 10\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5\") == 10\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 5\") == \"10\"\nassert solution(\"2 6\") == \"12\"\nassert solution(\"4 9\") == \"36\"\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(sample_input) == sample_output\nprint(solution(input))\n\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == \"10\"\nprint(solution(\"2 5\"))\n\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n4 5') == '10'\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 5\n''') == 10\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 5') == 10\n'''"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\"\n\n\n\"\"\"\n---SOLUTION---\n\"\"\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 7\\n\") == 10\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 7\") == 10\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 7\\n\") == \"10\"\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(A, B, T) == '10'\nprint('The strings are equal.')\n\n-----\n\nOne challenge of solving these types of problems is that the problem description is typically too detailed for typical beginners to understand. In general, even if you don\u2019t know how to solve it, it is important to be able to understand the problem and its possible solutions. So, before we start to solve these problems, let\u2019s take a look at an example.\n\nSuppose we have a problem which is simple to understand and not too tricky. The problem is to calculate the total number of cookies produced by a machine over a period of T seconds.\n\nSo, we can solve this problem in two ways:\n\nWe can calculate and print the value for N seconds, where N is a multiple of T.\nWe can calculate and print the value for the remaining T-N seconds, where N is a multiple of T.\nIf we want to print the final value, we can add N to the value of T and then print it."
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 5 7\n''') == '10'\nprint('Test pass.')"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n3 4\\n') == 'OK'\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 500 600\\n') == 'OK'\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n500 600\") == \"OK\"\nassert solution(\"5\\n1 1\") == \"NG\"\n\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('567') == 'NG'\n\n\"\"\"\n\nK, A, B = [int(x) for x in stdin.split()]\nprint('OK' if (A//K)*K <= A <= (B//K)*K else 'NG')\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 500 600\\n') == 'OK'\nassert solution('7 500 600\\n7 498 600\\n') == 'NG'"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n500 600\") == \"OK\"\n\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 500 600\\n\") == \"OK\"\nassert solution(\"7 500 593\\n\") == \"NG\"\n\"\"\"\n\nK, A, B = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n500 600\") == \"OK\"\nassert solution(\"7\\n400 600\") == \"NG\"\n\n-------TEST1--------\n7\n500 600\nOK\n\n-------TEST2--------\n7\n200 200\nOK\n\n-------TEST3--------\n7\n1000 1000\nNG\n\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n500 600\") == \"OK\"\n\"\"\"\n\nimport sys\n\nK = int(sys.stdin.readline().strip())\nA, B = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 500 600') == 'OK'\nassert solution('567 500 600') == 'NG'\n\"\"\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == expected\n\n'''"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n\"\"\"\n\nimport math\nimport sys\n\nfor line in sys.stdin:\n    (T, X) = line.split()\n    T = int(T)\n    X = int(X)\n    print(math.ceil(T / X))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 3\\n') == '2.6666666667'\n\"\"\"\n\nimport math\n\nT, X = map(int, input().split())\n\nprint(math.ceil(T / (X * math.sqrt(2))))"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3\\n\") == \"2.6666666667\"\n\"\"\"\n\nT, X = map(int, input().split())\n\nprint(T / (X - 1))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n\"\"\"\n\nimport math\n\nt, x = map(int, stdin.readline().split())\nprint(math.floor(t / x))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"8 3\"\n) == \"2.6666666667\"\n\"\"\"\n\nimport math\n\nT, X = [float(x) for x in input().split()]\nprint(math.ceil(T / (X / 3600)))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\nprint(solution(\"8 3\"))\n\"\"\"\n\nimport math\n\nT, X = [int(x) for x in stdin.split()]\n\nprint(math.ceil((T * X) / 3600))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3') == '2.6666...'\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n\nA, B, C = map(int, stdin.split())\n\nprint(C - B if B < C else 0)"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"6 4 3\"\n) == \"1\"\n\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 4 3') == '1'\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 3') == '1'\nassert solution('1 1 1') == '0'\nassert solution('9 4 3') == '0'\n\"\"\"\n\nfrom typing import NamedTuple, Dict, List\n\nclass Hund:\n    def __init__(self, bottles: Dict[int, int]):\n        self.bottles = bottles\n\n    def transfer(self, source_bottle, destination_bottle, amount):\n        if amount > self.bottles[source_bottle]:\n            raise ValueError('There is not enough water!')\n        self.bottles[source_bottle] -= amount\n        self.bottles[destination_bottle] += amount\n\n    def __str__(self):\n        return str(self.bottles)\n\nclass TransferData(NamedTuple):\n    source_bottle: int\n    destination_bottle: int\n    amount: int\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n\na, b, c = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 4 3\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5 6') == '1'\nassert solution('7 9 8') == '5'\nassert solution('8 7 5') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 2 4\\n2 1 4 3') == '3'\nassert solution('4\\n1 2 3 4\\n3 1 4 2') == '0'"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 3 2') == '3'\nassert solution('3\\n3 1 2') == '0'\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 3 2\") == \"3\"\nassert solution(\"5\\n1 2 3 4 5\") == \"0\"\nassert solution(\"2\\n1 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 3 2') == '3'\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 3 2\\n3 1 2') == '3'\nassert solution('3\\n3 1 2\\n1 3 2') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n3\n1 3 2\n3 1 2\n''') == '3'\n\nassert solution('''\n3\n1 3 2\n3 1 2\n''') == '0'\n\nassert solution('''\n2\n2 1\n1 2\n''') == '1'\n\nassert solution('''\n3\n2 3 1\n1 3 2\n''') == '2'\n\nassert solution('''\n4\n4 3 2 1\n3 4 1 2\n''') == '5'"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 3 2\\n3 1 2') == '3'\nassert solution('2\\n1 3 2\\n3 1 2') == '1'\n\"\"\"\n\nfrom typing import List, Set, Tuple, Dict, Optional\nimport sys"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\nassert solution(\"3\\n1 3 2\\n3 2 1\") == \"3\"\nassert solution(\"4\\n1 4 3 2\\n4 1 3 2\") == \"2\"\nassert solution(\"3\\n1 3 2\\n3 1 3\") == \"0\"\nassert solution(\"3\\n1 3 3\\n3 1 2\") == \"3\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ATCODER\") == 3\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ATCODER') == 'ATC'\nassert solution('CODER') == 'COD'\nassert solution('ACG') == 'ACG'\nassert solution('AT') == 'AT'\nassert solution('ATC') == 'ATC'\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ATCODER') == 3\n\nassert solution('GATCAYA') == 4\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ATCODER') == 3\n\n\"\"\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ATCODER\") == \"ATC\"\n\"\"\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ATCODER') == 3\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ACGT') == 'AC'\nassert solution('AACGT') == 'AAC'\nassert solution('AAC') == 'AAC'\nassert solution('A') == 'A'\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ATCODER') == 3\n\n\"\"\"\n\nimport unittest\nimport unittest.mock as mock\nimport os\nimport io\nimport sys\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ATCODER\") == 3\nprint(solution(\"ATCODER\"))\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11') == '9'\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11') == '9'\nprint(solution('11'))"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == '9'\nassert solution('21') == '13'\n\"\"\"\nimport unittest\nfrom io import StringIO\nfrom unittest.mock import patch\n\n\nclass TestMain(unittest.TestCase):\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n    def test_main(self):\n        with patch('sys.stdin', StringIO('11\\n')):\n            with patch('sys.stdout', new=StringIO()) as fake_stdout:\n                main()\n                self.assertEqual(\n                    fake_stdout.getvalue().strip(),\n                    '9'\n                )\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11\") == \"9\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12') == '9'\nassert solution('11') == '9'\nassert solution('8') == '0'\nassert solution('9') == '1'\nassert solution('1') == '0'\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11\") == \"9\"\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\") == \"9\"\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nN = int(sys.argv[1])\n\ncount = 0\nfor i in range(1, N + 1):\n    if len(str(i)) % 2 == 1:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11\") == 9\nassert solution(\"9\") == 0\nassert solution(\"999\") == 9\nassert solution(\"0\") == 0\nassert solution(\"1234\") == 0\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(11) == 9"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"cupofcoffee\") == \"cuhottefofhee\"\nprint(solution(\"cupofcoffee\"))\nassert solution(\"cupofhottea\") == \"cuhottefofhee\"\nprint(solution(\"cupofhottea\"))\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"cupofcoffee\") == \"hottea\"\nassert solution(\"jithinakumar\") == \"jithinakumar\"\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('cupofcoffee') == 'hotteacupofcoffee'\nassert solution('cupofhottea') == 'hottea'\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('cupofcoffee') == 'hotteacupofcoffee'\nassert solution('caefo') == 'foecaefo'\nassert solution('caef') == 'foecaef'\nassert solution('ca') == 'foeca'\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'aab'\nassert solution('abc') == 'aabc'\n\nimport sys; read = sys.stdin.readline\nsys.stdout.write(str(solution(read().strip())))\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('cupofcoffee') == 'cupofhottea'\nassert solution('cupofcoffee') == 'cupofhottea'\nassert solution('cupofcoffe') == 'cupofcoffee'\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"cupofcoffee\") == \"coffee\"\nassert solution(\"cupofhottea\") == \"hottea\"\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"cupofcoffee\") == \"hotteacupofcoffee\"\nassert solution(\"cupofhottea\") == \"hotteacupofhottea\"\n\"\"\"\n\n\nimport re\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"cupofcoffee\") == \"hottea\"\n\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"cupofcoffee\") == \"cupofhottea\"\nassert solution(\"mushrooms\") == \"mushroomsmushrooms\"\nassert solution(\"aba\") == \"aba\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 7\") == '5 6 7 8 9'\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6 7 8 9\\n3 7\\n') == '5 6 7 8 9'\n\"\"\"\n\n\"\"\"\nD. Given a number N and a string S consisting only of letters D and I, you have to delete all the vowels in the given string S such that after the operation the result won't have any vowels.\n\nNote that vowels in the input string are not sorted or ordered in any special way.\n\nInput Format:\nThe first line of the input contains a number N representing the length of the string. The next line contains a string consisting of lowercase English letters only \u2013 the string S.\n\nConstraints:\n1 \\leq N \\leq 100\n\nOutput Format:\nPrint the resulting string.\n\nSample Input:\n9\nDIDID\n\nSample Output:\nDDID\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1') == '0'\nassert solution('2 9') == '9'\nassert solution('3 6') == '5 6 7 8 9'\n\n-----\nIn this solution, the first line of input is a number k, which is the number of consecutive stones.\nThe second line of input is a number x, which is the coordinate of a black stone.\n\nFirst, we have a variable b that defines the coordinate of the black stone.\nThen, we have a variable s that holds the number of black stone.\n\nThen we use a for-loop to loop through the range of 1 to 2000000.\n\nIf the current number is the b + k, then it's a black stone, and we need to output it.\nOtherwise, if the current number is b - k, then it's a white stone, and we should not output it.\nIn both cases, we add one to the number of black stone.\n\nFinally, we print the number of black stone at the end."
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"./tests/test_01.txt\") == \"7 7 7 8 8 9\"\nassert solution(\"./tests/test_02.txt\") == \"0 1 2 3 4 5 6 7\"\nassert solution(\"./tests/test_03.txt\") == \"8 7 6 5 4 3 2 1 0\"\nassert solution(\"./tests/test_04.txt\") == \"3 4 5 6\"\nassert solution(\"./tests/test_05.txt\") == \"9 8 7 6 5 4 3 2 1 0\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 7\\n\") == \"5 6 7 8 9\"\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'No'\nassert solution('5') == 'Yes'\nassert solution('6') == 'No'\nassert solution('15') == 'Yes'\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"30\") == \"Yes\"\n\n\"\"\"\n\nX = input()"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"25\") == \"No\"\n\"\"\"\n\nx = int(input())"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('25') == 'No'\nassert solution('-1') == 'No'\n\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"0\") == \"No\"\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('20') == 'Yes'\nassert solution('30') == 'Yes'\nassert solution('15') == 'No'\nassert solution('5') == 'No'\nassert solution('0') == 'No'\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('25') == 'No'\n\"\"\"\n\n\"\"\"\nProblem 3 - Cats and a Mouse\n\nGiven:\nTwo positive integers a and b, each less than 1000.\n\nReturn:\nThe last digits of a^b.\n\n-----Constraints-----\n - 1000 \\leq a \\leq 1000\n - 1000 \\leq b \\leq 1000\n - a and b are integers.\n\n-----Input-----\nThe input consists of two lines. The first line contains the first integer, a, and the second line contains the second integer, b.\n\n-----Output-----\nPrint the last digits of a^b.\n\n-----Sample Input-----\n9\n10\n\n-----Sample Output-----\n91\n\"\"\"\n\n\"\"\"\nProblem 4 - Names Score\n\nGiven:\nA file containing a list of names (one name per line)\n\nReturn:\nA score of that name\n\n-----Constraints-----\n - Each name is composed of lowercase English letters only.\n - The list of names is ordered alphabetically.\n\n-----Input-----\nThe input consists of a single line containing the names seperated by a comma.\n\n-----Output-----\nPrint a single line containing the name and score seperated by a comma.\n\n-----Sample Input-----\nAnnie,Cindy,Dora,Benny,Sue\n\n-----Sample Output-----\nAnnie,1\nCindy,2\nDora,3\nBenny,4\nSue,5\n\"\"\"\n\n\"\"\"\nProblem 5 - Summation\n\nGiven:\nAn integer n, 0 \\leq n \\leq 10^5\nA list of numbers - a0,a1,...,an\n\nReturn:\nThe sum of the list\n\n-----Constraints-----\n - 1 \\leq ai \\leq 10^5\n - The list of numbers is ordered.\n\n-----Input-----\nThe input consists of three lines. The first line contains n (1 \\leq n \\leq 10^5). The second line contains a0,a1,...,an (1 \\leq a_i \\leq 10^5). The third line contains n+1 numbers delimited by comma and space. These are the numbers in the list.\n\n-----Output-----\nPrint the sum of the list.\n\n-----Sample Input-----\n2\n5,2,3,4,1\n1,2,3,4,5\n\n-----Sample Output-----\n10\n\"\"\"\n\n\"\"\"\nProblem 6 - Fast Exponentiation\n\nGiven:\nTwo integers m and k, 1 \\leq m \\leq 10^5, 0 \\leq k \\leq 1000\n\nReturn:\nThe result of m^k\n\n-----Constraints-----\n - m is an integer\n - 1 \\leq k \\leq 1000\n\n-----Input-----\nThe input consists of three lines. The first line contains m (1 \\leq m \\leq 10^5). The second line contains k (0 \\leq k \\leq 1000). The third line contains the result.\n\n-----Output-----\nPrint the result of m^k\n\n-----Sample Input-----\n3\n2\n\n-----Sample Output-----\n9\n\"\"\"\n\n\"\"\"\nProblem 7 - Product Summation\n\nGiven:\nA file containing at most 1000 names (first and last names are separated by space).\n\nReturn:\nThe number of pairs of names with exactly one name appearing exactly twice.\n\n-----Constraints-----\n - First and last names are separated by a space.\n - Each name consists of lower case English letters only.\n - The list of names is ordered in lexicographic ascending order.\n\n-----Input-----\nThe input file contains a list of names. The first line in the file contains the number of names, and the second line contains the names.\n\n-----Output-----\nPrint the number of pairs of names with exactly one name appearing exactly twice.\n\n-----Sample Input-----\n5\nAnnie Luney\nBenny Curd\nAnnie Luney\nCindy Kay\nBenny Curd\n\n-----Sample Output-----\n4\n\"\"\"\n\n\"\"\"\nProblem 8 - Prime Factorization\n\nGiven:\nA positive integer n \\leq 10^7\n\nReturn:\nThe prime factorization of n, in the form of a list of (prime,exponent) pairs, where prime is a prime number and exponent is the exponent of that prime in n, in ascending order. If n is prime, the exponent is 1.\n\n-----Constraints-----\n - n is an integer\n - 1 \\leq n \\leq 10^7\n\n-----Input-----\nThe input consists of a single integer n \\leq 10^7.\n\n-----Output-----\nPrint the prime factorization of n.\n\n-----Sample Input-----\n12\n\n-----Sample Output-----\n[(2,1),(3,1)]\n\"\"\"\n\n\"\"\"\nProblem 9 - Primorial\n\nGiven:\nAn integer n \\leq 10^7\n\nReturn:\nThe value of the primorial of n\n\n-----Constraints-----\n - n is an integer\n - 1 \\leq n \\leq 10^7\n\n-----Input-----\nThe input consists of a single integer n \\leq 10^7\n\n-----Output-----\nPrint the value of the primorial of n\n\n-----Sample Input-----\n5\n\n-----Sample Output-----\n10\n\"\"\"\n\n\"\"\"\nProblem 10 - Summation\n\nGiven:\nAn integer n, 0 \\leq n \\leq 10^5\nA list of numbers - a0,a1,...,an\n\nReturn:\nThe sum of a0^2 + a1^2 +... + an^2\n\n-----Constraints-----\n - 1 \\leq a_i \\leq 10^5\n - The list of numbers is ordered.\n\n-----Input-----\nThe input consists of three lines. The first line contains n (1 \\leq n \\leq 10^5). The second line contains a0,a1,...,an (1 \\leq a_i \\leq 10^5). The third line contains n+1 numbers delimited by comma and space. These are the numbers in the list.\n\n-----Output-----\nPrint the sum of a0^2 + a1^2 +... + an^2\n\n-----Sample Input-----\n3\n1,2,3\n1,2,3\n\n-----Sample Output-----\n14\n\"\"\"\n\n\"\"\"\nProblem 11 - Summation with Odds\n\nGiven:\nTwo positive integers a and b, each less than 1000, and a list of positive integers l, each less than 100, with no duplicates.\n\nReturn:\nThe sum of all odd integers in the list.\n\n-----Constraints-----\n - a and b are integers\n - 1 \\leq a,b \\leq 1000\n - 1 \\leq l_i \\leq 100\n - The list of integers is ordered.\n - There are at most 1000 numbers in the list.\n\n-----Input-----\nThe input consists of four lines. The first line contains a single integer, a, denoting the number of test cases. The next a lines contains three integers, a, b and l, respectively. The last line contains n positive integers delimited by comma and space. These are the numbers in the list.\n\n-----Output-----\nPrint the sum of all odd integers in the list.\n\n-----Sample Input-----\n2\n2 1 2\n2 2 2\n5 2 5\n\n-----Sample Output-----\n8\n10\n\"\"\"\n\n\"\"\"\nProblem 12 - Product Summation with Odds\n\nGiven:\nTwo positive integers a and b, each less than 1000, and a list of positive integers l, each less than 100, with no duplicates.\n\nReturn:\nThe sum of all odd integers in the list.\n\n-----Constraints-----\n - a and b are integers\n - 1 \\leq a,b \\leq 1000\n - 1 \\leq l_i \\leq 100\n - The list of integers is ordered.\n - There are at most 1000 numbers in the list.\n\n-----Input-----\nThe input consists of four lines. The first line contains a single integer, a, denoting the number of test cases. The next a lines contains three integers, a, b and l, respectively. The last line contains n positive integers delimited by comma and space. These are the numbers in the list.\n\n-----Output-----\nPrint the sum of all odd integers in the list.\n\n-----Sample Input-----"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('25') == 'No'\nassert solution('-40') == 'No'\nassert solution('-1') == 'No'\nassert solution('0') == 'No'\nassert solution('1') == 'Yes'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('25') == 'No'\nassert solution('-5') == 'No'\nassert solution('3') == 'Yes'\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"25\") == \"No\"\n\"\"\"\n\ntemp = int(stdin)"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 2\") == \"1\"\nassert solution(\"1 2\\n5 5\") == \"1\"\nassert solution(\"2 1\\n5 5\") == \"0\"\nassert solution(\"3 3\\n-2 8\") == \"0\"\nassert solution(\"2 3\\n1 2\\n5 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2\\n5 5\\n-2 8\") == \"1\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2\\n3 4\\n5 6\") == \"1\"\nassert solution(\"4 2\\n1 2\\n3 4\\n5 6\\n1 1\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == '1'\n\"\"\"\n\n\"\"\"\nQuestion 2\nWrite a program that reads three integers and prints the corresponding triangle.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nAn integer n\nAn integer m\nAn integer p\n\n-----Output-----\nPrint the corresponding triangle.\n\n-----Sample Input-----\n5\n5\n5\n\n-----Sample Output-----\n*\n* *\n* * *\n* * * *\n* * * * *\n\n\"\"\"\n\n\"\"\"\nQuestion 3\nWrite a program that reads one word and prints all words with the same number of letters as the read word.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nAn integer n\n\n-----Output-----\nPrint all words with the same number of letters as the read word.\n\n-----Sample Input-----\n7\n\n-----Sample Output-----\ndone\ndonkey\ndoneee\ndood\ndoods\ndoody\ndoodie\n\"\"\"\n\n\"\"\"\nQuestion 4\nWrite a program that reads a word and prints the same word with a number of the same letter in the middle of the word.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nAn integer n\nA word\n\n-----Output-----\nPrint a word with a number of the same letter in the middle of the word.\n\n-----Sample Input-----\n4\nfluffy\n\n-----Sample Output-----\nfluffy3\nfluffy4\nfluffy5\nfluffy6\nfluffy7\nfluffy8\nfluffy9\n\"\"\"\n\n\"\"\"\nQuestion 5\nWrite a program that reads one word and prints the same word with a number of the same letter in the middle of the word. If there are no letters, print \"No such word\".\n\n-----Input-----\nInput is given from Standard Input in the following format:\nAn integer n\nA word\n\n-----Output-----\nPrint a word with a number of the same letter in the middle of the word.\n\n-----Sample Input-----\n4\napple\n\n-----Sample Output-----\napp3le\napp4le\napp5le\napp6le\napp7le\napp8le\napp9le\napple3\napple4\napple5\napple6\napple7\napple8\napple9\nNo such word\n\"\"\"\n\n\"\"\"\nQuestion 6\nWrite a program that reads one word and prints a new word with letters from the original word in the middle of the new word. If there are no letters, print \"No such word\".\n\n-----Input-----\nInput is given from Standard Input in the following format:\nAn integer n\nA word\n\n-----Output-----\nPrint a new word with letters from the original word in the middle of the new word.\n\n-----Sample Input-----\n5\nfluffy\n\n-----Sample Output-----\nflufi5\nflufi6\nflufi7\nflufi8\nflufi9\nflufi3\nflufi4\nflufi5\nflufi6\nflufi7\nflufi8\nflufi9\nflufi1\nflufi2\nflufi3\nflufi4\nflufi5\nflufi6\nflufi7\nflufi8\nflufi9\nflufi11\nflufi12\nflufi13\nflufi14\nflufi15\nNo such word\n\"\"\"\n\n\"\"\"\nQuestion 7\nWrite a program that reads one word and prints all words with the same number of letters as the read word. If there are no words with a given number of letters, print \"No such word\".\n\n-----Input-----\nInput is given from Standard Input in the following format:\nAn integer n\nA word\n\n-----Output-----\nPrint all words with the same number of letters as the read word.\n\n-----Sample Input-----\n4\nfluffy\n\n-----Sample Output-----\nfluffy2\nfluffy3\nfluffy4\nfluffy5\nfluffy6\nfluffy7\nfluffy8\nfluffy9\nfluffy10\nfluffy11\nfluffy12\nfluffy13\nfluffy14\nNo such word\n\"\"\"\n\n\"\"\"\nQuestion 8\nWrite a program that reads one word and prints the same word with a number of the same letter in the middle of the word. If there are no letters, print \"No such word\".\n\n-----Input-----\nInput is given from Standard Input in the following format:\nAn integer n\nA word\n\n-----Output-----\nPrint a word with a number of the same letter in the middle of the word.\n\n-----Sample Input-----\n4\napple\n\n-----Sample Output-----\napp3le\napp4le\napp5le\napp6le\napp7le\napp8le\napp9le\napple3\napple4\napple5\napple6\napple7\napple8\napple9\nNo such word\n\"\"\"\n\n\"\"\"\nQuestion 9\nWrite a program that reads one word and prints a new word with letters from the original word in the middle of the new word. If there are no letters, print \"No such word\".\n\n-----Input-----\nInput is given from Standard Input in the following format:\nAn integer n\nA word\n\n-----Output-----\nPrint a new word with letters from the original word in the middle of the new word.\n\n-----Sample Input-----\n5\nfluffy\n\n-----Sample Output-----\nflufi5\nflufi6\nflufi7\nflufi8\nflufi9\nflufi3\nflufi4\nflufi5\nflufi6\nflufi7\nflufi8\nflufi9\nflufi1\nflufi2\nflufi3\nflufi4\nflufi5\nflufi6\nflufi7\nflufi8\nflufi9\nNo such word\n\"\"\"\n\n\"\"\"\nQuestion 10\nWrite a program that reads one word and prints the same word with a number of the same letter in the middle of the word. If there are no letters, print \"No such word\".\n\n-----Input-----\nInput is given from Standard Input in the following format:\nAn integer n\nA word\n\n-----Output-----\nPrint a word with a number of the same letter in the middle of the word.\n\n-----Sample Input-----\n4\napple\n\n-----Sample Output-----\napp3le\napp4le\napp5le\napp6le\napp7le\napp8le\napp9le\napple3\napple4\napple5\napple6\napple7\napple8\napple9\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\"\"\"\n\nfrom collections import defaultdict\nfrom collections import Counter\nfrom sys import stdin, stdout"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1\\n1 1 1 1') == '0'\nassert solution('2 1\\n1 1') == '1'\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\nassert len(sys.argv) == 2\nN, D = [int(x) for x in sys.argv[1].split()]\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3876\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\n\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1233\") == \"Good\"\nassert solution(\"1234\") == \"Bad\"\nassert solution(\"1111\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"9999\") == \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\nassert solution(\"2222\") == \"Bad\"\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1234\") == \"Bad\"\nassert solution(\"1223\") == \"Good\"\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\nassert solution(\"1256\") == \"Bad\"\nassert solution(\"2996\") == \"Bad\"\nassert solution(\"37\") == \"Bad\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\nassert solution(\"2345\") == \"Bad\"\nassert solution(\"3456\") == \"Good\"\nassert solution(\"4567\") == \"Bad\"\n\n'''\n\nimport sys\n\ns = sys.stdin.readline().strip()"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3776\") == \"Good\"\nassert solution(\"2341\") == \"Bad\"\nassert solution(\"1111\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\n\n\"\"\"\n\nS = str(input())\na = S[0]\nb = S[1]\nc = S[2]\nd = S[3]\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n3 4') == '3.5'\n\"\"\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n') == '3.5'\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n\") == \"3.5\"\n\"\"\"\nimport math"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n4\\n') == '3.5'\nprint('Test success.')\n\nIf you start with one ingredient, you can put it in the pot and never come back. The maximum value of this ingredient is its value.\n\n>>> solution('1\\n5\\n')\n'5.0'\n>>> solution('2\\n3\\n')\n'2.0'\n>>> solution('2\\n1\\n')\n'1.0'\n>>> solution('2\\n5\\n')\n'5.0'\n>>> solution('2\\n3\\n')\n'2.0'\n>>> solution('2\\n4\\n')\n'4.0'\n>>> solution('3\\n1 2\\n')\n'2.5'\n>>> solution('3\\n3 4\\n')\n'3.5'\n>>> solution('3\\n6\\n')\n'6.0'\n>>> solution('3\\n2\\n')\n'2.0'\n>>> solution('3\\n1\\n')\n'1.0'\n>>> solution('3\\n3\\n')\n'3.0'\n>>> solution('4\\n2\\n')\n'2.0'\n>>> solution('4\\n1 1\\n')\n'1.5'\n>>> solution('4\\n2\\n')\n'2.0'\n>>> solution('5\\n1 2\\n')\n'2.5'\n>>> solution('5\\n3 4\\n')\n'3.5'\n>>> solution('6\\n1 1 1\\n')\n'1.8'\n>>> solution('6\\n1 1 2\\n')\n'1.8'\n>>> solution('7\\n1 2 3\\n')\n'2.6'\n>>> solution('7\\n4 5 6\\n')\n'5.5'\n>>> solution('7\\n7 8 9\\n')\n'8.0'\n>>> solution('7\\n7 8\\n')\n'7.0'\n>>> solution('8\\n1 2 3\\n')\n'2.6'\n>>> solution('8\\n1 2\\n')\n'2.0'\n>>> solution('8\\n1 1\\n')\n'1.5'\n>>> solution('8\\n1 1 1\\n')\n'1.8'\n>>> solution('8\\n1 1 2\\n')\n'1.8'\n>>> solution('9\\n1 1 2\\n')\n'1.8'\n>>> solution('9\\n1 1 2\\n')\n'1.8'\n>>> solution('9\\n1 1 2\\n')\n'1.8'\n>>> solution('10\\n1 2\\n')\n'2.0'\n>>> solution('10\\n1 1\\n')\n'1.5'\n>>> solution('10\\n1 1 1\\n')\n'1.8'\n>>> solution('10\\n1 1 2\\n')\n'1.8'\n>>> solution('10\\n1 1 2\\n')\n'1.8'\n>>> solution('10\\n1 1 2\\n')\n'1.8'\n>>> solution('11\\n1 2\\n')\n'2.0'\n>>> solution('11\\n1 1\\n')\n'1.5'\n>>> solution('11\\n1 1 1\\n')\n'1.8'\n>>> solution('11\\n1 1 2\\n')\n'1.8'\n>>> solution('11\\n1 1 2\\n')\n'1.8'\n>>> solution('11\\n1 1 2\\n')\n'1.8'\n>>> solution('11\\n1 1 2\\n')\n'1.8'\n>>> solution('12\\n1 1 2\\n')\n'1.8'\n>>> solution('12\\n1 1 2\\n')\n'1.8'\n>>> solution('12\\n1 1 2\\n')\n'1.8'\n>>> solution('12\\n1 1 2\\n')\n'1.8'\n>>> solution('12\\n1 1 2\\n')\n'1.8'\n>>> solution('12\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'1.8'\n>>> solution('13\\n1 1 2\\n')\n'"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n3 4') == '3.5'\n\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n\") == \"3.5\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"3.5\"\nassert solution(\"2 4\") == \"3.5\"\nassert solution(\"3 3\") == \"3.0\"\nassert solution(\"1 2\") == \"2.0\"\n\n\"\"\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"3.5\"\nassert solution(\"1 1\") == \"1.0\"\nassert solution(\"2 1000000000\") == \"1.0\"\nassert solution(\"5 1 1 1 1\") == \"2.0\"\nassert solution(\"5 3 6 7 8\") == \"3.857142857142857\"\n\n-----Problem-----\nYou are given a list of integers, your task is to return the product of the elements of this list, except for the number represented by the list itself.\nIf the input list is empty, return 1.\n\n-----Solution-----\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == 2\nassert solution(\"1 2 3\") == 2.5\nassert solution(\"1 2 3 4\") == 2.75\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n3 1 2\\n2 5 4\\n3 6') == 14\n\"\"\"\n\nimport math"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\\n\") == 14\n\"\"\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 2\\n2 5 4\\n3 6\\n') == 14\n\"\"\"\n\nimport collections\nimport functools\nimport itertools\nimport operator\nimport sys\n\nsys.setrecursionlimit(1000000)\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_ITEMS = (\n    (int(first) if first.isdigit() else ord(first) - ord('A') + 1, int(second))\n    for first, second in (line.split() for line in INPUT_LINES))"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\") == 14\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'''\n3\n1 2\n2 5\n3 6\n''') == '14'\nassert solution(\n'''\n2\n3 1\n2 5\n3 6\n''') == '4'\nassert solution(\n'''\n3\n3 1\n2 5\n3 6\n''') == '9'\nassert solution(\n'''\n4\n1 1\n2 1\n3 2\n4 1\n''') == '6'\nassert solution(\n'''\n3\n3 1\n2 5\n3 6\n''') == '12'\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n3 1 2\\n2 5 4\\n3 6') == '14'\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 2\\n2 5 4\\n3 6') == '14'\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\") == 14\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\\n3 6\\n\") == 14\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 2\\n2 5\\n3 6\") == \"14\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''10\nZABCDBABCQ''') == '2'\nassert solution('''10\nABCDBABCQ''') == '2'\nassert solution('''10\nABCABCABCABCABC''') == '4'\nassert solution('''10\nABABABABABABABA''') == '8'\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('AB') == 'AB'\nassert solution('A') == ''\nassert solution('AAAA') == 'AAAA'\nassert solution('ABCABCABC') == 'ABC'\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABCDBABCQ\") == \"2\"\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\nZABCDBABCQ\") == 2\n\"\"\"\nfrom collections import defaultdict\nimport re"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 ABCDBABCQ') == '2'\nassert solution('10 ABCDBABCQ') == '2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3QW2EW3R4T5Y7U8I9\") == \"3\"\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abracadabra') == 5\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ZABCDBABCQ\") == 2\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\nZABCDBABCQ') == 2\nprint('Hooray!')\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n'''5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\n'''\n) == '2'\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"MASHIKE:RUMOI:OBIRA:HABORO\") == \"2\"\nassert solution(\"MASHIKE:RUMOI:OBIRA:HABORO:HOROKANAI\") == \"1\"\nassert solution(\"MASHIKE:RUMOI:OBIRA:HABORO:HOROKANAI:OBIRA\") == \"0\"\nassert solution(\"MASHIKE:RUMOI:OBIRA:HABORO:HOROKANAI:MASHIKE\") == \"3\"\nassert solution(\"MASHIKE:RUMOI:OBIRA:HABORO:HOROKANAI:MASHIKE:MASHIKE\") == \"5\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI''') == '2'\n\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input) == answer\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_data) == test_result"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI') == '2'\nassert solution('3\\nMASHIKE\\nRUMOI\\nHABORO') == '1'\n\"\"\"\n\n\"\"\"\nTHREE PASSES\n    1) Counter\n    2) OrderedDict\n    3) Union Find\n\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI') == '2'\n\"\"\"\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n\nfrom typing import Set\n\nN = int(input())\n\nletters: Set[str] = set()\nfor _ in range(N):\n    letters.add(input())\n\nans: int = 0\n\nfor i in range(1, N):\n    for j in range(1, N - i + 1):\n        subset: Set[str] = set(letters)\n        for k in range(j):\n            subset.remove(input())\n        if len(subset) == 0 or all(x[0] in ('M', 'A', 'R', 'C', 'H') for x in subset):\n            ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI') == '2'\n\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\nprint(\"PASSED\")\n\n-----Explanation-----\nThere are 2 ways to choose three people from 5 people.\n\"\"\"\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\"), \"2\")"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3') == 'Yes'\nassert solution('2 2') == 'No'\n\n-----\n'''\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"6 3\") == \"No\"\nassert solution(\"5 1\") == \"Yes\"\nassert solution(\"1 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3,3) == \"Yes\"\nassert solution(1,1) == \"No\"\nassert solution(10,10) == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3') == 'Yes'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 1\\n1 1\\n1 1\") == \"Yes\"\nassert solution(\"3 3\\n1 1\\n1 1\\n1 1\") == \"No\"\n\nassert solution(\"3 3\\n1 1\\n2 1\\n1 1\") == \"No\"\nassert solution(\"3 3\\n1 1\\n2 1\\n1 2\") == \"No\"\n\nassert solution(\"3 3\\n2 1\\n1 1\\n1 1\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 1\\n2 2\\n3 3\\n\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n3 3 1\\n3 3 2\\n3 3 3') == 'Yes'\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 1\\n1 1\\n0 0\") == \"Yes\"\n\"\"\"\n\nfrom functools import reduce\nfrom typing import List, Tuple\n\nfrom. import helpers\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"2 3\") == \"No\"\n\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\n\n------Solution------"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('sippuu') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\n\n\"\"\"\n\nS = input()"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"ppuuu\") == \"No\"\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('sippuuu') == 'No'\nassert solution('sippuuuuu') == 'No'\nassert solution('sippuuuuuuu') == 'Yes'\nassert solution('sippuuuuuuuuu') == 'Yes'\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"cocuoc\") == \"No\"\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"aabbcc\") == \"No\"\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"spood\") == \"No\"\nassert solution(\"spop\") == \"No\"\nassert solution(\"spoof\") == \"No\"\nassert solution(\"spoos\") == \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"coffee\") == \"Yes\"\nassert solution(\"coffe\") == \"No\"\nassert solution(\"sippuu\") == \"Yes\"\nassert solution(\"cof\") == \"No\"\nassert solution(\"coffe\") == \"No\"\n\"\"\""
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"\nassert solution(\"3 1\\n7 10\\n1 1\") == \"TLE\"\nassert solution(\"1 1\\n1 1\") == \"TLE\"\nassert solution(\"5 10\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\") == \"TLE\"\nassert solution(\"3 5\\n7 60\\n1 80\") == \"7\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"\nassert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"TLE\"\n\"\"\"\n\nimport sys\n\nN, T = [int(i) for i in sys.stdin.readline().split()]\nlines = sys.stdin.readlines()\n\ndurations = {}\nfor i in range(N):\n    c, t = [int(j) for j in lines[i].split()]\n    durations[t] = c\n\ntotal_cost = 0\nfor time, cost in sorted(durations.items(), key=lambda x: x[0]):\n    if time > T:\n        break\n    total_cost += cost\n\nprint(total_cost)\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50') == '4'\nprint(solution(stdin))\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input_0) == 'TLE'\nassert solution(test_input_1) == '6'\nassert solution(test_input_2) == '4'\n\"\"\"\n\ntest_input_0 = \"\"\"\n5 80\n7 60\n1 80\n4 50\n3 40\n\"\"\"\ntest_input_1 = \"\"\"\n3 70\n7 60\n1 80\n4 50\n\"\"\"\ntest_input_2 = \"\"\"\n5 80\n7 60\n1 80\n4 50\n3 40\n\"\"\"\n\nfrom itertools import zip_longest"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 70\\n7 60\\n1 80\\n4 50\") == \"4\"\n\"\"\"\n\nN, T = map(int, input().split())\ncosts = []\ntimes = []\nfor _ in range(N):\n    cost, time = map(int, input().split())\n    costs.append(cost)\n    times.append(time)\n\ncosts.sort(reverse=True)\ntimes.sort(reverse=True)\n\ntotal_cost = 0\nfor i in range(N):\n    time_left = T - times[i]\n    if time_left <= 0:\n        break\n    else:\n        total_cost += costs[i]"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"\nassert solution(\"2 10\\n3 5\\n1 10\") == \"TLE\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\\n\") == \"4\"\n\n----------\n    Time Complexity: O(n * log(n))\n        [1] Initial solution: O(n^2)\n        [2] Sorting: O(n log(n))\n        [3] Greedy: O(n)\n    Space Complexity: O(n)\n        [1] input\n        [2] initial\n        [3] result\n-------------\n\"\"\""
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50') == '4'\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50\\n') == '4','result must be 4'\nprint('PASSED')\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('5 5 5') == ''\nassert solution('1 2 3 4 5') == ''\nassert solution('2 2 1') == ''\nassert solution('10 20 30 40') == ''\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 9\") == 8\n\"\"\"\n\nimport math"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 9\") == \"8\"\nprint(\"PASS\")\n\n\"\"\"\n\n\nimport unittest\nfrom collections import namedtuple\nfrom typing import Dict\n\nTEST_CASE = namedtuple(\"TestCase\", [\"input\", \"expected_output\"])\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        test_cases = [\n            TEST_CASE(input=\"4 2 9\", expected_output=\"8\"),\n            TEST_CASE(input=\"2 8 6\", expected_output=\"14\"),\n            TEST_CASE(input=\"2 8 2\", expected_output=\"18\"),\n            TEST_CASE(input=\"2 3 9\", expected_output=\"18\"),\n            TEST_CASE(input=\"4 3 7\", expected_output=\"28\"),\n            TEST_CASE(input=\"3 3 8\", expected_output=\"24\"),\n            TEST_CASE(input=\"4 2 9\", expected_output=\"8\"),\n            TEST_CASE(input=\"3 3 5\", expected_output=\"16\"),\n            TEST_CASE(input=\"1 3 2\", expected_output=\"4\"),\n            TEST_CASE(input=\"2 3 5\", expected_output=\"12\"),\n            TEST_CASE(input=\"3 4 3\", expected_output=\"16\"),\n            TEST_CASE(input=\"4 1 7\", expected_output=\"14\"),\n            TEST_CASE(input=\"5 5 1\", expected_output=\"11\"),\n            TEST_CASE(input=\"3 5 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"3 3 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"3 3 5\", expected_output=\"16\"),\n            TEST_CASE(input=\"3 4 3\", expected_output=\"16\"),\n            TEST_CASE(input=\"3 4 3\", expected_output=\"16\"),\n            TEST_CASE(input=\"5 5 5\", expected_output=\"25\"),\n            TEST_CASE(input=\"3 5 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"3 5 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"3 5 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"3 5 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"1 1 1\", expected_output=\"3\"),\n            TEST_CASE(input=\"1 2 1\", expected_output=\"3\"),\n            TEST_CASE(input=\"5 1 1\", expected_output=\"6\"),\n            TEST_CASE(input=\"5 5 5\", expected_output=\"25\"),\n            TEST_CASE(input=\"1 1 1\", expected_output=\"3\"),\n            TEST_CASE(input=\"3 2 7\", expected_output=\"16\"),\n            TEST_CASE(input=\"1 2 7\", expected_output=\"10\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"3 4 1\", expected_output=\"14\"),\n            TEST_CASE(input=\"5 4 1\", expected_output=\"11\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"2 6 8\", expected_output=\"24\"),\n            TEST_CASE(input=\"5 2 1\", expected_output=\"12\"),\n            TEST_CASE(input=\"6 2 1\", expected_output=\"18\"),\n            TEST_CASE(input=\"6 2 8\", expected_output=\"24\"),\n            TEST_CASE(input=\"6 2 8\", expected_output=\"24\"),\n            TEST_CASE(input=\"3 7 5\", expected_output=\"24\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"5 2 8\", expected_output=\"28\"),\n            TEST_CASE(input=\"6 2 8\", expected_output=\"24\"),\n            TEST_CASE(input=\"5 2 8\", expected_output=\"28\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"4 3 5\", expected_output=\"16\"),\n            TEST_CASE(input=\"5 3 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"5 3 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"5 4 3\", expected_output=\"16\"),\n            TEST_CASE(input=\"5 5 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"1 3 3\", expected_output=\"12\"),\n            TEST_CASE(input=\"4 3 5\", expected_output=\"16\"),\n            TEST_CASE(input=\"5 5 5\", expected_output=\"25\"),\n            TEST_CASE(input=\"5 2 1\", expected_output=\"12\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"5 3 5\", expected_output=\"24\"),\n            TEST_CASE(input=\"3 4 1\", expected_output=\"14\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"6 4 1\", expected_output=\"14\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"5 3 5\", expected_output=\"24\"),\n            TEST_CASE(input=\"5 2 1\", expected_output=\"12\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"4 3 5\", expected_output=\"16\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"7 2 5\", expected_output=\"18\"),\n            TEST_CASE(input=\"5 4 3\", expected_output=\"16\"),\n            TEST_CASE(input=\"3 5 1\", expected_output=\"14\"),\n            TEST_CASE(input=\"5 3 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"5 3 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"5 3 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"5 3 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"5 3 3\", expected_output=\"24\"),\n            TEST_CASE(input=\"5 4 3\", expected_output=\"16\"),\n            TEST_CASE(input=\"5 5 3\", expected_"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 9\") == \"8\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 9\\n\") == \"8\"\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 9') == '8'\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2 9') == '8'\n\"\"\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2 9') == '8'\nassert solution('4 2 1') == '4'\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\": 4 2 9\\n\") == \"8\"\n\"\"\"\n\n\n\nN, A, B = map(int, input().split())\nprint(A*N + B*N)"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\"\"\"\n\nn = int(stdin.readline())\n\nanagrams = 0\n\nfor _ in range(n):\n    s1 = stdin.readline()\n    s2 = stdin.readline()\n    if sorted(s1) == sorted(s2):\n        anagrams += 1\n\nprint(anagrams)\n\n\"\"\"\nTook about 20 minutes.\n\"\"\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\naca\\nbba\") == \"3\"\nassert solution(\"3\\nabcd\\nefgh\\nijkl\\n\") == \"6\"\nassert solution(\"1\\nhijkl\") == \"0\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"acornistnt\") == \"1\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\\n\") == '1'\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\nacornistnt\\npeanutbomb\\nconstraint') == '1'\nprint('Test: OK')"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\nacornistnt\\npeanutbomb\\nconstraint\\n') == '1'\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\ncornistnt\\npeanutbomb\\nconstraint\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n1\n3\n20\n38\n56''') == '''1\n2\n5\n2\n0'''\nprint(\"Test 1 OK.\")\n\nassert solution('''4\n2132\n506\n999999999\n1000000000''') == '''8\n2\n9\n8'''\nprint(\"Test 2 OK.\")\n\nassert solution('''7\n983\n913\n101\n11\n812\n39\n97''') == '''6\n9\n8\n2\n1\n0\n0'''\nprint(\"Test 3 OK.\")\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1122334455\") == \"112\"\nassert solution(\"1\") == \"1\"\nassert solution(\"122333\") == \"2\"\nassert solution(\"122334455\") == \"2\"\nassert solution(\"12233445567\") == \"2\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"56\") == \"0\"\nassert solution
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('56 2 2 1\\n8 9 10 1') == '9 9 0 9'\n'''"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"112123123412345$\\\\dots$\") == \"1\"\nassert solution(\"112123123412345$\\\\dots$1234567\") == \"2\"\nassert solution(\"112123123412345$\\\\dots$1234567\\\\dots\") == \"5\"\nassert solution(\"112123123412345$\\\\dots$1234567\\\\dots12\") == \"4\"\nassert solution(\"112123123412345$\\\\dots$1234567\\\\dots1234\") == \"3\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n1\n3\n20\n38\n56''') == '''1\n2\n5\n2\n0'''\nassert solution('''4\n2132\n506\n999999999\n1000000000''') == '''8\n2\n9\n8'''\n\"\"\""
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n'''\n\nq = int(input())\nlst = [0]\nfor i in range(q):\n    k = int(input())\n    lst.append(k)\n    \nfor i in range(q+1):\n    if lst[i]>0:\n        print(lst[i]%10)\n    else:\n        print(lst[i])"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345123456712345671234567812345678912345678910\"\n\"\"\"\n\nimport sys\n\nq = int(sys.stdin.readline())\n\nfor _ in range(q):\n    k = int(sys.stdin.readline())\n\n    if k < 1:\n        print(0)\n        continue\n\n    print(k % 10)\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12345678910111213141516171819') == '191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"1\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2') == '2'\nassert solution('4 2\\n3 1\\n1 4\\n1 2') == '1'\nassert solution('10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9') == '3'\n\"\"\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n1 4\") == \"1 1\"\nassert solution(\"1 2\\n1 3\") == \"1 1 1\"\nassert solution(\"1 2\\n1 4\\n2 4\") == \"1 1 1 1\"\n\n\"\"\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n2 3\") == \"1\\n2 1\"\nassert solution(\"1 2\\n2 3\\n3 4\") == \"1\\n2 1\\n1 2 2\"\nassert solution(\"1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\") == \"1\\n2 1\\n3 2 1\\n2 2 2\\n3 3 2\\n4 4 2\\n3 3 2\\n1 2 1\\n2 1 2\\n2 3 2\\n4 4 1\\n4 5 1\\n1 5 1\\n1 6 1\\n5 6 1\\n5 7 1\\n6 7 1\\n6 8 1\\n7 8 1\\n3 9 2\\n9 9 2\\n5 9 2\\n5 10 2\\n9 10 2\")\nassert solution(\"1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 1\") == \"1\\n2 1\\n3 2 1\\n2 2 2\\n3 3 2\\n4 4 2\\n3 4 2\\n1 5 1\\n2 5 1\\n3 5 1\\n4 5 1\\n5 6 1\\n6 7 1\\n7 8 1\\n8 9 1\\n9 10 1\\n10 1 2\\n1 10 1\\n1 11 1\\n11 12 1\\n12 1 2\\n2 13 1\\n13 14 1\\n14 15 1\\n3 16 1\\n16 17 1\\n16 18 1\\n17 19 1\\n18 20 1\\n19 21 1\\n20 22 1\\n21 23 1\\n22 24 1\\n23 25 1\\n24 26 1\\n25 27 1\\n26 28 1\\n27 29 1\\n28 30 1\\n29 31 1\\n30 32 1\\n31 33 1\\n32 34 1\\n33 35 1\\n34 36 1\\n35 37 1\\n36 38 1\\n37 39 1\\n38 40 1\\n39 41 1\\n40 42 1\\n41 43 1\\n42 44 1\\n43 45 1\\n44 46 1\\n45 47 1\\n46 48 1\\n47 49 1\\n48 50 1\\n49 51 1\\n50 52 1\\n51 53 1\\n52 54 1\\n53 55 1\\n54 56 1\\n55 57 1\\n56 58 1\\n57 59 1\\n58 60 1\\n59 61 1\\n60 62 1\\n61 63 1\\n62 64 1\\n63 65 1\\n64 66 1\\n65 67 1\\n66 68 1\\n67 69 1\\n68 70 1\\n69 71 1\\n70 72 1\\n71 73 1\\n72 74 1\\n73 75 1\\n74 76 1\\n75 77 1\\n76 78 1\\n77 79 1\\n78 80 1\\n79 81 1\\n80 82 1\\n81 83 1\\n82 84 1\\n83 85 1\\n84 86 1\\n85 87 1\\n86 88 1\\n87 89 1\\n88 90 1\\n89 91 1\\n90 92 1\\n91 93 1\\n92 94 1\\n93 95 1\\n94 96 1\\n95 97 1\\n96 98 1\\n97 99 1\\n98 100 1\")\nassert solution(\"1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n10 1\") == \"1\\n2 1\\n3 2 1\\n2 2 2\\n3 3 2\\n4 4 2\\n3 4 2\\n1 5 1\\n2 5 1\\n3 5 1\\n4 5 1\\n5 6 1\\n6 7 1\\n7 8 1\\n8 9 1\\n9 10 1\\n10 1 2\\n1 10 1\\n1 11 1\\n11 12 1\\n12 1 2\\n2 13 1\\n13 14 1\\n14 15 1\\n3 16 1\\n16 17 1\\n16 18 1\\n17 19 1\\n18 20 1\\n19 21 1\\n20 22 1\\n21 23 1\\n22 24 1\\n23 25 1\\n24 26 1\\n25 27 1\\n26 28 1\\n27 29 1\\n28 30 1\\n29 31 1\\n30 32 1\\n31 33 1\\n32 34 1\\n33 35 1\\n34 36 1\\n35 37 1\\n36 38 1\\n37 39 1\\n38 40 1\\n39 41 1\\n40 42 1\\n41 43 1\\n42 44 1\\n43 45 1\\n44 46 1\\n45 47 1\\n46 48 1\\n47 49 1\\n48 50 1\\n49 51 1\\n50 52 1\\n51 53 1\\n52 54 1\\n53 55 1\\n54 56 1\\n55 57 1\\n56 58 1\\n57 59 1\\n58 60 1\\n59 61 1\\n60 62 1\\n61 63 1\\n62 64 1\\n63 65 1\\n64 66 1\\n65 67 1\\n66 68 1\\n67 69 1\\n68 70 1\\n69 71 1\\n70 72 1\\n71 73 1\\n72 74 1\\n73 75 1\\n74 76 1\\n75 77 1\\n76 78 1\\n77 79 1\\n78 80 1\\n79 81 1\\n80 82 1\\n81 83 1"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3\\n1 1 2 3 2 3 1 3 1\"\n\nassert solution(\"4 2\\n3 1\\n1 4\\n1 2\") == \"1\\n1 1 1\"\n\nassert solution(\"6 2\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2\\n1 2 1 1 2\"\n\nassert solution(\"6 2\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2\\n1 2 1 1 2\"\n\nassert solution(\"6 2\\n4 3\\n3 5\\n3 6\\n5 2\") == \"2\\n1 2 1 1 2\""
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n1') == '1'\nassert solution('1\\n2\\n3') == '1'\nassert solution('1\\n2\\n3\\n3') == '1'\nassert solution('1\\n2\\n3\\n3\\n4') == '1'\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2') == '2\\n1 2 1 1 2'\nassert solution('4 2\\n3 1\\n1 4\\n1 2') == '1\\n1 1 1'\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 4\\n1 2\\n1 3\\n2 5\") == \"1 2 1 1 2\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3 1 1 2 3 2 3 1 3 1\""
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('5 2\\n1 4\\n4 3\\n3 5\\n3 6') == '2'\nassert solution('10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9') == '3'\nassert solution('1 1\\n1 2') == '1'\nassert solution('4 2\\n3 1\\n1 4\\n1 2') == '1'\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n6 2\n1 4\n4 3\n3 5\n3 6\n5 2\n''') == '2\\n1 2 1 1 2'\nassert solution('''\n4 2\n3 1\n1 4\n1 2\n''') == '1\\n1 1 1'\nassert solution('''\n10 2\n10 3\n1 2\n1 3\n1 4\n2 5\n2 6\n2 7\n3 8\n3 9\n''') == '3\\n1 1 2 3 2 3 1 3 1'"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n1 3\") == '3\\n1 1 2 3 2 3 1 3 1'\nassert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\") == '2\\n1 2 1 1 2 2 1 2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n\n\n-----Tests-----\nSubtask #1.\ntest_1_solution = lib.Subtask(\n    tests=[\n        lib.Test(\n            input=\"4\\n1 2 4 4\",\n            output=\"2 4\"\n        ),\n        lib.Test(\n            input=\"9\\n1 1 8 8 8 4 4 4 4\",\n            output=\"3 8\"\n        ),\n        lib.Test(\n            input=\"7\\n4 3 7 1 4 3 3\",\n            output=\"3 6\"\n        )\n    ]\n)\n\nSubtask #2.\ntest_2_solution = lib.Subtask(\n    tests=[\n        lib.Test(\n            input=\"4\\n1 2 4 4\",\n            output=\"2 4\"\n        ),\n        lib.Test(\n            input=\"9\\n1 1 8 8 8 4 4 4 4\",\n            output=\"3 8\"\n        ),\n        lib.Test(\n            input=\"7\\n4 3 7 1 4 3 3\",\n            output=\"3 6\"\n        )\n    ]\n)\n\nSubtask #3.\ntest_3_solution = lib.Subtask(\n    tests=[\n        lib.Test(\n            input=\"4\\n1 2 4 4\",\n            output=\"2 4\"\n        ),\n        lib.Test(\n            input=\"9\\n1 1 8 8 8 4 4 4 4\",\n            output=\"3 8\"\n        ),\n        lib.Test(\n            input=\"7\\n4 3 7 1 4 3 3\",\n            output=\"3 6\"\n        )\n    ]\n)\n\nSubtask #4.\ntest_4_solution = lib.Subtask(\n    tests=[\n        lib.Test(\n            input=\"4\\n1 2 4 4\",\n            output=\"2 4\"\n        ),\n        lib.Test(\n            input=\"9\\n1 1 8 8 8 4 4 4 4\",\n            output=\"3 8\"\n        ),\n        lib.Test(\n            input=\"7\\n4 3 7 1 4 3 3\",\n            output=\"3 6\"\n        )\n    ]\n)\n\nSubtask #5.\ntest_5_solution = lib.Subtask(\n    tests=[\n        lib.Test(\n            input=\"4\\n1 2 4 4\",\n            output=\"2 4\"\n        ),\n        lib.Test(\n            input=\"9\\n1 1 8 8 8 4 4 4 4\",\n            output=\"3 8\"\n        ),\n        lib.Test(\n            input=\"7\\n4 3 7 1 4 3 3\",\n            output=\"3 6\"\n        )\n    ]\n)\n\nSubtask #6.\ntest_6_solution = lib.Subtask(\n    tests=[\n        lib.Test(\n            input=\"4\\n1 2 4 4\",\n            output=\"2 4\"\n        ),\n        lib.Test(\n            input=\"9\\n1 1 8 8 8 4 4 4 4\",\n            output=\"3 8\"\n        ),\n        lib.Test(\n            input=\"7\\n4 3 7 1 4 3 3\",\n            output=\"3 6\"\n        )\n    ]\n)\n\nSubtask #7.\ntest_7_solution = lib.Subtask(\n    tests=[\n        lib.Test(\n            input=\"4\\n1 2 4 4\",\n            output=\"2 4\"\n        ),\n        lib.Test(\n            input=\"9\\n1 1 8 8 8 4 4 4 4\",\n            output=\"3 8\"\n        ),\n        lib.Test(\n            input=\"7\\n4 3 7 1 4 3 3\",\n            output=\"3 6\"\n        )\n    ]\n)\n\nSubtask #8.\ntest_8_solution = lib.Subtask(\n    tests=[\n        lib.Test(\n            input=\"4\\n1 2 4 4\",\n            output=\"2 4\"\n        ),\n        lib.Test(\n            input=\"9\\n1 1 8 8 8 4 4 4 4\",\n            output=\"3 8\"\n        ),\n        lib.Test(\n            input=\"7\\n4 3 7 1 4 3 3\",\n            output=\"3 6\"\n        )\n    ]\n)\n\nSubtask #9.\ntest_9_solution = lib.Subtask(\n    tests=[\n        lib.Test(\n            input=\"4\\n1 2 4 4\",\n            output=\"2 4\"\n        ),\n        lib.Test(\n            input=\"9\\n1 1 8 8 8 4 4 4 4\",\n            output=\"3 8\"\n        ),\n        lib.Test(\n            input=\"7\\n4 3 7 1 4 3 3\",\n            output=\"3 6\"\n        )\n    ]\n)\n\nSubtask #10.\ntest_10_solution = lib.Subtask(\n    tests=[\n        lib.Test(\n            input=\"4\\n1 2 4 4\",\n            output=\"2 4\"\n        ),\n        lib.Test(\n            input=\"9\\n1 1 8 8 8 4 4 4 4\",\n            output=\"3 8\"\n        ),\n        lib.Test(\n            input=\"7\\n4 3 7 1 4 3 3\",\n            output=\"3 6\"\n        )\n    ]\n)\n\nSubtask #11.\ntest_11_solution = lib.Subtask(\n    tests=[\n        lib.Test(\n            input=\"4\\n1 2 4 4\",\n            output=\"2 4\"\n        ),\n        lib.Test(\n            input=\"9\\n1 1 8 8 8 4 4 4 4\",\n            output=\"3 8\"\n        ),\n        lib.Test(\n            input=\"7\\n4 3 7 1 4 3 3\","
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 4 4\\n\") == \"2 4\"\n\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\\n\") == \"3 8\"\n\nassert solution(\"7\\n4 3 7 1 4 3 3\\n\") == \"3 6\"\n\"\"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2 4\") == \"2 4\"\nassert solution(\"7 1 4 3 7 1 4 3\") == \"3 6\"\n\"\"\"\n\nn = int(input())\nx = list(map(int, input().split()))\nmin_n = max_n = 0\nfor i in range(1, n+1):\n    min_n += abs(x[i]-x[i-1])\n    max_n += abs(x[i-1]-x[n])+1\n\nprint(min_n, max_n)\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 4 4\\n\") == \"2 4\"\n\nprint(solution(\"9\\n1 1 8 8 8 4 4 4 4\\n\"))\nassert solution(\"7\\n4 3 7 1 4 3 3\\n\") == \"3 6\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\nassert solution('7\\n4 3 7 1 4 3 3') == '3 6'\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 4 4\") == '2 4'\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == '3 8'\nassert solution(\"7\\n4 3 7 1 4 3 3\") == '3 6'"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n\"\"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\nassert solution('9\\n1 1 8 8 8 4 4 4 4') == '3 8'\nassert solution('7\\n4 3 7 1 4 3 3') == '3 6'\n\"\"\""
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n\") == \"3 2 4 1 5\"\n\nprint(solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n\"))\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\n\nassert solution(\"3\\n2 3\\n3 1\\n1 2\") == \"3 1 2\"\n\n\nimport unittest\nfrom solutions.problem067_solution import solution\n\nclass Test067(unittest.TestCase):\n    def test067(self):\n        assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\n\n    def test068(self):\n        assert solution(\"3\\n2 3\\n3 1\\n1 2\") == \"3 1 2\""
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\nassert solution(\"3\\n2 3\\n1 2\\n1 2\") == \"3 1 2\"\n\n\"\"\"\n\nfrom typing import Dict, List, Set\nfrom collections import defaultdict\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 3\\n3 1\\n1 2\\n1 3') == '3 2 1'\nassert solution('3\\n3 1\\n1 2') == '3 1 2'\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == '3 2 4 1 5'\nassert solution(\"4\\n1 2\\n2 3\\n3 4\") == '1 2 3 4'\n\"\"\"\n\n\n\nimport sys\nimport re\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3''') == '3 2 4 1 5'\n\nassert solution('''5\n3 5\n1 4\n2 4\n1 5\n2 3''') == '3 2 4 1 5'\n\nassert solution('''5\n2 3\n3 1\n1 2\n1 4\n2 5''') == '3 1 2'\n\nassert solution('''1\n1 1''') == '1'\n\nassert solution('''4\n4 3\n1 3\n2 3\n1 2\n2 1\n1 2\n1 3\n2 1\n2 3\n''') == '3 1 2'"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3') == '3 2 4 1 5'\nassert solution('3\\n2 3\\n3 1\\n1 2') == '3 1 2'\n\"\"\"\n\nimport sys\nimport itertools\nimport math"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4') == '3 1 2 4'\nassert solution('7\\n2 3\\n1 4\\n5 6\\n3 7\\n1 7\\n4 5') == '3 1 4 2 5 7'\n\n-----Notes-----\n\nThis solution is trivial and not very efficient.\n\"\"\""
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 3\\n3 1\\n1 2') == '3 1 2'\n\"\"\""
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n1 1000 10000 10 100 1000000000\\n') == '1'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\\n') == '10'\nassert solution('6\\n1 1000 10000 10 100 1000000000\\n') == '1'\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 1000 10000 10 100 1000000000\\n\") == \"1\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\\n\") == \"10\"\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\\n\") == \"1\""
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n6\n1 10 17 12 15 2\n''') == '3'\nassert solution('''\n10\n
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 10 17 12 15 2\") == \"3\"\n\"\"\"\n\n\n\nfrom typing import List\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == \"3\"\nassert solution(\"10\\n
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1000 10000 10 100 1000000000\") == \"1\"\nassert solution(\"1 10 17 12 15 2\") == \"3\"\nassert solution(\"1 10 17 12 15 2\") == \"3\"\nassert solution(\"1 10 17 12 15 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"1\"\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\nassert solution(\"10\\n
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n1 1000 10000 10 100 1000000000') == '1'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == '10'\nassert solution('6\\n1 1000 10000 10 100 1000000000') == '1'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == '10'\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n1 1000 10000 10 100 1000000000\\n') == '1'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\\n') == '10'\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 10 17 12 15 2') == 3\nassert solution('3\\n1 1000 10000 10 100') == 1\nassert solution('6\\n1 1000 10000 10 100 1000000000') == 1\nassert solution('10\\n
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '-1'\nassert solution('3 5 2 1') == '4'\nassert solution('15 5 3 2') == '-1'\nassert solution('15 5 4 3') == '5'\nassert solution('15 5 2 1') == '2'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == \"4\\n-1\\n5\\n2\\n0\\n1\"\n\"\"\"\nfrom copy import deepcopy\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''6\n15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n16 7 5 2\n20 5 7 3\n''') == '4\\n-1\\n5\\n2\\n0\\n1'\nprint('Success')\n\n------------------------------------------------------------"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == '4\\n-1\\n5\\n2\\n0\\n1'\nassert solution(\"1 1 1 1\") == '-1'\nassert solution(\"1 1 1 2\\n1 2 1 1\") == '0'\nassert solution(\"1 1 2 1\\n1 2 1 2\") == '2'\nassert solution(\"1 1 1 1\\n1 2 1 2\\n1 1 1 1\") == '-1'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5 2 1\") == \"2\"\nassert solution(\"5 5 3 2\") == \"0\"\nassert solution(\"6 7 5 2\") == \"1\"\n\"\"\"\n\nimport sys\n\nfrom typing import List, Tuple\n\nassert sys.version_info >= (3, 7)\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == '4\\n-1\\n5\\n2\\n0\\n1'\n\"\"\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4\\n-1\\n5\\n2\\n0\\n1'\nassert solution('8 7 5 2\\n8 7 4 3\\n8 7 2 1\\n8 7 5 1\\n8 8 6 2\\n8 8 7 3\\n8 8 8 1\\n8 8 9 2\\n8 8 10 3') == '-1\\n5\\n2\\n0\\n1'\nassert solution('5 2 1 1\\n5 2 2 1\\n5 2 3 1\\n5 2 4 1\\n5 2 5 1\\n5 3 4 2\\n5 3 5 2\\n5 4 5 2\\n5 5 6 2\\n5 5 7 2\\n5 6 7 3\\n5 6 8 3\\n5 7 8 2\\n5 7 9 3\\n5 7 10 3\\n5 8 10 3\\n5 9 10 2\\n5 9 11 2\\n5 10 11 1') == '4\\n2\\n0\\n1'\nassert solution('5 2 1 2\\n5 2 2 1\\n5 2 3 1\\n5 2 4 1\\n5 2 5 1\\n5 3 4 2\\n5 3 5 2\\n5 4 5 2\\n5 5 6 2\\n5 5 7 2\\n5 6 7 3\\n5 6 8 3\\n5 7 8 2\\n5 7 9 3\\n5 7 10 3\\n5 8 10 3\\n5 9 10 2\\n5 9 11 2\\n5 10 11 1') == '4\\n0\\n2\\n1'\nassert solution('5 1 1 1\\n5 1 2 1\\n5 1 3 1\\n5 1 4 1\\n5 1 5 1\\n5 2 4 2\\n5 2 5 2\\n5 3 5 3\\n5 4 5 3\\n5 5 6 3\\n5 6 7 3\\n5 7 8 3\\n5 8 9 3\\n5 9 10 3\\n5 10 11 3\\n5 11 11 1') == '4\\n0\\n2\\n1'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\\n\") == \"4\\n-1\\n5\\n2\\n0\\n1\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5 3 2') == '-1'\nassert solution('15 5 3 2') == '4'\nassert solution('15 5 4 3') == '-1'\nassert solution('15 5 2 1') == '5'\nassert solution('15 5 5 1') == '2'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == '4\\n-1\\n5\\n2\\n0\\n1'\n\"\"\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ac?b?c\") == 24\nassert solution(\"aaaaa\") == 40\nassert solution(\"aac?b?c\") == 56\n\"\"\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\nassert solution(\"???????\") == \"2835\"\nassert solution(\"a???c\") == \"46\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ac?b?c\") == 24\n\"\"\""
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\nassert solution(\"???????\") == \"2835\"\nassert solution(\"cccbbbaaa\") == \"0\"\n\"\"\"\nimport itertools"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ac?b?c\") == 24\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ac?b?c\") == 24\n\nassert solution(\"a???c\") == 46\n\nassert solution(\"ac??\") == 7\n\nassert solution(\"a???c\") == 2835\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ac?b?c\") == 24\n\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ac?b?c\") == 24\n\"\"\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ac?b?c') == '24'\nassert solution('???????') == '2835'\nassert solution('a???c') == '46'\nassert solution('cccbbbaaa') == '0'\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ac?b?c') == '24'\nassert solution('???????') == '2835'\nassert solution('cccbbbaaa') == '0'\nassert solution('a???c') == '46'\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 0\\n1 3 3 7\\n2 3 5\\n2 1 1\\n1 3 10\") == \"18\"\nassert solution(\"4 0\\n1 2 3 7\\n2 3 5\\n2 1 1\\n1 3 10\") == \"16\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n1 3 3\\n2 3 5\\n2 1 1') == '5'\nassert solution('4 0\\n1 3 3 7') == '16'\n\"\"\"\n\nn, m = [int(i) for i in input().split()]\nnums = [int(i) for i in input().split()]\n\nedges = []\nfor _ in range(m):\n    x, y, w = [int(i) for i in input().split()]\n    edges.append((x, y, w))\n\nedges = sorted(edges, key=lambda x: x[2])\n\nans = 0\nedge = 0\n\nfor x, y, w in edges:\n    if nums[x - 1]!= nums[y - 1]:\n        nums[x - 1] = nums[y - 1] = min(nums[x - 1], nums[y - 1]) + w\n        ans += w\n        edge += 1"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3 2\n1 3 3\n2 3 5\n2 1 1\"\"\") == \"5\"\nassert solution(\"\"\"4 0\n1 3 3 7\n\"\"\") == \"16\"\nassert solution(\"\"\"5 4\n1 2 3 4 5\n1 2 8\n1 3 10\n1 4 7\n1 5 15\n\"\"\") == \"18\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 3 3\\n2 3 5\\n2 1 1\\n\") == \"5\"\nassert solution(\"4 0\\n1 3 3 7\\n\") == \"16\"\n\n\n\"\"\"\n\n\nimport sys\nimport collections\nimport heapq"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1\\n3 3 5') == '5'\nassert solution('1 2 3\\n2 3 5') == '5'\nassert solution('1 2 3\\n2 3 5\\n2 1 1') == '3'\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3 2\n1 3 3\n2 3 5\n2 1 1\"\"\") == \"5\"\nassert solution(\"\"\"4 0\n1 3 3 7\"\"\") == \"16\"\nassert solution(\"\"\"5 4\n1 2 3 4 5\n1 2 8\n1 3 10\n1 4 7\n1 5 15\"\"\") == \"18\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n3 2\n1 3 3\n2 3 5\n2 1 1\n\"\"\") == \"5\"\nassert solution(\"\"\"\n4 0\n1 3 3 7\n\"\"\") == \"16\"\nassert solution(\"\"\"\n5 4\n1 2 3 4 5\n1 2 8\n1 3 10\n1 4 7\n1 5 15\n\"\"\") == \"18\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 3 3 7\\n2 3 5\\n2 1 1\\n1 3 10\\n1 4 7\\n1 5 15\\n\") == \"18\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\\n\") == \"18\"\n\n\"\"\""
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 3 3\\n2 3 5\\n2 1 1\") == \"5\"\nassert solution(\"4 0\\n1 3 3 7\") == \"16\"\n\n\"\"\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n1 3 3\\n2 3 5\") == \"5\"\nassert solution(\"4 0\\n1 3 3 7\") == \"16\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\") == \"-1\"\n\n\"\"\"\n\nimport heapq\nfrom collections import namedtuple\n\nPoint = namedtuple(\"Point\", [\"x\", \"y\"])\nWeight = namedtuple(\"Weight\", [\"x\", \"y\"])\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\n\n\"\"\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 1\\n0 7\\n0 6\") == \"9\"\nassert solution(\"3 2 1\\n0 7\\n0 6\\n8 0\\n0 5\") == \"14\"\nassert solution(\"3 2 1\\n0 7\\n0 6\\n8 1\\n0 5\") == \"14\"\nassert solution(\"3 2 1\\n0 7\\n0 6\\n8 1\\n0 5\\n9 0\\n0 4\") == \"13\"\nassert solution(\"3 2 1\\n0 7\\n0 6\\n8 1\\n0 5\\n9 0\\n0 4\\n0 0\\n0 3\") == \"14\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == '14'\nassert solution(\"10 1 1\\n0 9\\n0 5\") == '45'\nassert solution(\"10 1 1\\n0 9\\n1 5\") == '-1'\n\"\"\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == '14'\nassert solution(\"10 1 1\\n0 9\\n0 5\") == '45'\nassert solution(\"10 1 1\\n0 9\\n1 5\") == '-1'\n\nprint('Success')\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\\n\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\\n\") == \"-1\"\n\"\"\"\n\nimport sys\nimport math\n\nA, N, M = map(int, sys.stdin.readline().strip().split())\nranges = []\nfor _ in range(N):\n    ranges.append(map(int, sys.stdin.readline().strip().split()))\n\numbrellas = []\nfor _ in range(M):\n    umbrellas.append(map(int, sys.stdin.readline().strip().split()))\n\nranges.sort(key=lambda x: x[0])\numbrellas.sort(key=lambda x: x[0])\n\ndp = [[0 for _ in range(A+1)] for _ in range(N+1)]\nprev = [0 for _ in range(A+1)]\n\nfor i in range(1, N+1):\n    r = ranges[i-1]\n    left, right = r[0], r[1]\n    for j in range(1, A+1):\n        curr = dp[i-1][j]\n        if left <= j <= right:\n            prev[j] = curr\n        dp[i][j] = prev[j] + (right - j) * (j - left + 1) * sum(map(lambda x: x[1], umbrellas[:i]))\n\nres = math.inf\nfor j in range(1, A+1):\n    res = min(res, dp[N][j] + (A - j) * (j - 1) * sum(map(lambda x: x[1], umbrellas[:N])))\n\nprint(-1 if res == math.inf else res)\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2\n''') == '14'\nassert solution('''\n10 1 1\n0 9\n0 5\n''') == '45'\nassert solution('''\n10 1 1\n0 9\n1 5\n''') == '-1'\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"-1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\") == \"-1\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 2\") == \"Yes\"\nassert solution(\"4 4 4\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 7 5') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7 5') == 'Yes'\n\"\"\"\nimport sys"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 1\") == \"Yes\"\nassert solution(\"1 1 1\") == \"Yes\"\nassert solution(\"1 1 1\") == \"Yes\"\nassert solution(\"1 1 1\") == \"Yes\"\n\nassert solution(\"1 1 1\") == \"Yes\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\nassert solution(\"3 3 3\") == \"No\"\n\"\"\"\n\na, b, c = [int(i) for i in input().split()]"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 2\") == \"No\"\nassert solution(\"4 5 5\") == \"Yes\"\nassert solution(\"2 2 4\") == \"Yes\"\n\"\"\"\n\nimport sys\nimport unittest\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        # O(1) time | O(1) space\n        if int(stdin.split(' ')[0]) == int(stdin.split(' ')[1]) and int(stdin.split(' ')[1])!= int(stdin.split(' ')[2]):\n            return \"Yes\"\n        elif int(stdin.split(' ')[0]) == int(stdin.split(' ')[2]) and int(stdin.split(' ')[1])!= int(stdin.split(' ')[2]):\n            return \"Yes\"\n        elif int(stdin.split(' ')[1]) == int(stdin.split(' ')[2]) and int(stdin.split(' ')[0])!= int(stdin.split(' ')[2]):\n            return \"Yes\"\n        return \"No\"\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        assert Solution().solution(\"5 7 5\") == \"Yes\"\n        assert Solution().solution(\"1 2 2\") == \"No\"\n        "
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n12 5\\n1000 2000') == '1'\n\"\"\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12 5 1000 2000') == '1'\n\n\"\"\"\n\nimport sys\n\nn, t, a = map(int, sys.stdin.readline().split())\nheights = list(map(int, sys.stdin.readline().split()))\n\nprint(heights.index(min(heights, key=lambda x: abs(t - (x * 0.006)))))\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50') == '1'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100') == '1'\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 12 5\\n1000 2000\") == \"1\"\nassert solution(\"4 4\\n1 10 1 10\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 12 5\\n1000 2000') == '1'\n\"\"\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n2\n12 5\n1000 2000\n''') == '1'\nassert solution('''\n4\n12 30\n1 2 3 4\n''') == '2'\nassert solution('''\n1\n12\n1000\n''') == '0'\nassert solution('''\n2\n1 2\n1000 2000\n''') == '0'\nassert solution('''\n2\n10 30\n1000 2000\n''') == '0'\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 1\") == \"0\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"2 2\") == \"1\"\n\nprint(\"All Tests Passed\")\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1') == '1'\n\n\"\"\"\nfrom collections import Counter\nimport itertools\nimport math\nimport numpy as np\nimport pandas as pd\n\nimport unittest\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"1\"\n\nimport unittest\nimport sys\nfrom io import StringIO\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.held, sys.stdin = sys.stdin, StringIO(\"2 1\\n\")\n\n    def test_solution(self):\n        self.assertEqual(solution(), \"1\")\n\n    def tearDown(self):\n        sys.stdin = self.held"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10\") == \"4\"\nassert solution(\"2 1\") == \"1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"4 1\") == \"1\"\nassert solution(\"1 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"7 3\") == \"0\"\nassert solution(\"5 5\") == \"6\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1') == '1'\n\n------Test input-------\n3 3\n1\n2\n3\n\n------Test output-------\n2\n\"\"\""
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1') == '1'\nassert solution('5 5') == '3'\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ACACTACG\") == '2\\n0\\n3'\nassert solution(\"CATCGTA\") == '3\\n0\\n3'\nassert solution(\"AAACTACG\") == '2\\n1\\n4'\n\"\"\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ACACTACG\") == 2\nassert solution(\"ACTACG\") == 1\nassert solution(\"ACG\") == 0\n\"\"\"\n\n\"\"\"\nOne solution:\nfor line in stdin.splitlines():\n    N, Q = line.split(' ')\n    N, Q = int(N), int(Q)\n    for _ in range(Q):\n        l, r = map(int, stdin.split(' '))\n        print(sum([1 for i in range(l, r+1) if N % i == 0]))\n\nassert solution('ACACTACG') == 2\nassert solution('ACTACG') == 1\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''8 3\nACACTACG\n3 7\n2 3\n1 8''') == '2\\n0\\n3'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"CTCGATC\") == \"5\"\nassert solution(\"AAACC\") == \"0\"\nassert solution(\"\") == \"0\"\n\n\"\"\"\n\nimport sys\nimport re\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ACACTACG', 3, 7) == 2\nassert solution('ACACTACG', 3, 2) == 0\nassert solution('ACACTACG', 3, 1) == 3\n\"\"\"\nfrom itertools import zip_longest"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('ABC') == 'A,B,C'\nassert solution('AABB') == 'A,A,B,B'\nassert solution('ABBCCAB') == 'A,B,C,C,B,A,B'\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str_in) == str_out\nprint('Success')\n\n\n\n\n\n\n\n\n\n\n\n-----\n\nimport sys\nsys.setrecursionlimit(100000)"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ACACTACG\") == 2\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ACACTACG\\n3 7\\n2 3\\n1 8\") == \"2\\n0\\n3\"\n\"\"\"\n\nimport collections\nimport sys\n\nfrom itertools import chain\n\ns = sys.stdin.readline()"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\n\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\n\"\"\"\n\nN, K = map(int, input().split())\nprices = list(map(int, input().split()))\n\nprint(sum(prices[:K]))\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n50 100 80 120 80\\n') == 210\n\n\"\"\""
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n50 100 80 120 80') == 210\n\"\"\""
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n50 100 80 120 80\\n') == \"210\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n50 100 80 120 80') == '210'\nprint('Test succeeded')\n\n\"\"\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n50 100 80 120 80') == 210\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\\n\") == \"210\"\n\"\"\"\n\nimport sys\n\n_, k = map(int, sys.stdin.readline().split())\nnums = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\\n\") == 210\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"1 3 2\") == \"4\"\nassert solution(\"1 2 3\") == \"4\"\nassert solution(\"1 2 3 2\") == \"3\"\nassert solution(\"2 3 1\") == \"4\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == solution.__annotations__[0]\n\"\"\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3 4') == '4'\n\n---------------"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"1 2 1\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"2 5 1\") == \"9\"\nassert solution(\"3 1 3\") == \"12\"\n\n\"\"\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3 4') == '4'\nassert solution('1 3 3') == '8'\nassert solution('1 2 5') == '7'\nassert solution('1 3 5') == '7'\nassert solution('4 7 6') == '17'\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"2 3 5\") == \"8\"\nassert solution(\"1 2 3\") == \"4\"\nassert solution(\"1 3 5\") == \"8\"\nassert solution(\"2 3 1\") == \"4\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3 4') == '4'\nassert solution('2 2 2') == '4'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\") == \"0\"\nassert solution(\"7 3\") == \"10\"\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5') == '0'\nprint(solution('3 5'))\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5') == '0'\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5') == 0"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1, 2) == 0\nassert solution(3, 5) == 0\nassert solution(5, 3) == 10\nassert solution(7, 5) == 10\nassert solution(7, 6) == 10\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5') == '0'\n\n\"\"\"\n\nimport sys\n\nN, M = map(int, input().split())\n\nprint(int(N < M))\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5\\n') == '0'\nassert solution('1 3\\n') == '10'\n\"\"\"\n\nimport unittest\nimport sys\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5') == '0'\nassert solution('1 1') == '10'\nassert solution('4 6') == '10'\nassert solution('7 10') == '0'\n\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5') == '0'\nassert solution('3 5') == '0'\nassert solution('2 3') == '10'\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\") == \"0\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 4') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4\\n\") == '1'\n\nimport sys\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''7 4''') == '1'\nassert solution('''10101010''') == '10'\n'''\nWrite a Python program to calculate the future value of a specified principal amount, rate of interest, and a number of years.\n\nNote: For simplicity, assume that the interest is compounded monthly.\n\n-----Constraints-----\n1 \u2264 P \u2264 1000\n0 \u2264 i \u2264 15\n0 \u2264 n \u2264 30\n\n-----Input-----\nThe first line contains the principal amount, P.\nThe second line contains the interest rate, i.\nThe third line contains the number of months, n.\n\n-----Output-----\nPrint the future value, F, of the initial principal amount, P at the end of n months.\n\n-----Sample Input-----\n1500 1000 3\n\n-----Sample Output-----\n2222.22222222222222\n\nprincipal_amount = int(input())\ninterest_rate = float(input())\nmonths = int(input())\n\nF = principal_amount*((1 + interest_rate / 12) ** months)\nprint(round(F, 2))\n\nWrite a Python program to calculate the area of a right-angled triangle.\n\nNote: A right-angled triangle has two sides a and b and one angle 90\u00b0.\n\n-----Constraints-----\na < b\n\n-----Input-----\nThe length of the side a\nThe length of the side b\n\n-----Output-----\nThe area of the right-angled triangle\n\n-----Sample Input-----\n5\n3\n\n-----Sample Output-----\n5.0\n\na = int(input())\nb = int(input())\n\nprint(round(a * b / 2, 2))\n\nWrite a Python program to calculate the value of X^2.\n\n-----Constraints-----\n1 \u2264 X \u2264 10\n\n-----Input-----\nX\n\n-----Output-----\nX^2\n\nx = int(input())\nprint(x**2)\n\nWrite a Python program to check whether a given number is a narcissistic number or not.\n\nNote: A narcissistic number is a positive integer that is equal to the sum of its own digits each raised to the power of the number of digits.\n\n-----Constraints-----\n1 \u2264 n \u2264 10^9\n\n-----Input-----\nn\n\n-----Output-----\nn is a narcissistic number.\n\n-----Sample Input-----\n371\n\n-----Sample Output-----\n371 is a narcissistic number.\n\nn = int(input())\n\nis_narcissistic = lambda n: sum(int(d) ** len(str(n)) for d in str(n)) == n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 4\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 4\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 4\") == \"1\"\n\n---\n3.12: Speed and Accuracy\n\nCorrectness and performance\nSuccessfully solved 3.11.\nYour solution meets the criteria. It does not have a lot of extra logic.\n\nPerformance\nYour solution is efficient.\nIt does not unnecessarily recalculate values or create excessive values.\n\nRuntime\nRuntime is very short.\nIt takes less than a second to run.\n\nMemory\nIt uses less than 7 MB of memory.\n\nSpeed / Accuracy\nSpeed is good.\nIt is very close to being correct.\n\nTests\nThe solution passes all 6 tests in the sample cases.\n\"\"\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 4') == '1'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 4') == '1'"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('3 3 6') == 'bust'\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5 4') == 'win'\n\"\"\"\n\nimport sys\nimport unittest\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7 9\") == \"win\"\nassert solution(\"5 4 4\") == \"bust\"\nassert solution(\"1 1 1\") == \"bust\"\nassert solution(\"1 1 2\") == \"win\"\n\n\"\"\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7 9') == \"win\"\nassert solution('4 2 1') == \"bust\"\nassert solution('9 9 9') == \"bust\"\nassert solution('3 3 3') == \"win\"\n\"\"\"\nimport math"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7 9\") == 'win'\n\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('1 1 1') == 'bust'\n\"\"\"\n\na1, a2, a3 = input().split(' ')"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(5, 7, 9) == 'win'\nassert solution(1, 2, 3) == 'bust'\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\n\"\"\"\nimport sys\n\nA = sys.stdin.readline().strip().split(' ')\n\nnum = []\nfor a in A:\n    num.append(int(a))"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('1 1 1') == 'bust'\nassert solution('2 3 4') == 'bust'\nassert solution('6 7 11') == 'win'\nassert solution('2 3 12') == 'win'\n\"\"\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\"\"\""
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(3) == 6\n\"\"\""
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6') == '6'\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7') == '12'\nassert solution('3') == '6'\nassert solution('10') == '12'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3) == '6'\nassert solution(1) == '2'\n\"\"\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '6'\nassert solution('2') == '2'\nassert solution('1') == '1'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\""
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"6\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == 6\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(5) == 5\nassert solution(6) == 6\nassert solution(7) == 14\nassert solution(100) == 100\nassert solution(1_000) == 1_000\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\n\nn = input()"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == '2'\n\"\"\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == output\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2\") == 2\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 2\\n3 1\\n5 2\\n4 1\\n2 5\\n7 3\\n1 2') == '3'\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n1 2\\n3 4') == 2\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2\") == 2\nassert solution(\"6 3\") == 2\nassert solution(\"6 4\") == 2\n\"\"\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2\") == \"2\"\n\"\"\"\n\nimport sys\n\ninput_data = list(map(int, sys.stdin.read().split()))\nn = input_data[0]\nd = input_data[1]\napples = list(map(int, sys.stdin.read().split()))\n\ninspectors = 0\nfor apple in apples:\n    if apple + d in apples:\n        inspectors += 1\nprint(inspectors)"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 2\") == 2\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 2\") == 2\n\"\"\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('1\\n2') == '1'\nassert solution('1\\n1\\n1\\n1\\n2\\n2\\n2\\n2') == '1'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n2') == '2'\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('16') == 'pon'\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"16\") == \"pon\"\nprint(solution(\"16\"))\n\nYou can submit your solution through the Box or through slack. This problem is a programming question so you can learn from others.\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"2\") == \"hon\"\nassert solution(\"3\") == \"bon\"\nassert solution(\"4\") == \"hon\"\nassert solution(\"5\") == \"hon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"15\") == \"bon\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('16') == \"pon\"\nassert solution('10') == \"bon\"\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(16) == \"pon\"\n\"\"\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('16') == 'pon'\n\n--------------------------------\n\nfrom unittest import TestCase"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"16\") == \"pon\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('16') == 'pon'\nassert solution('16') == 'pon'\nassert solution('16') == 'pon'\n\"\"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n3 1 2''') == 11\n\"\"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n3 1 2\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == 11\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\narr = list(map(int, sys.stdin.readline().split()))\n\ntakoyaki_sum = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        takoyaki_sum += arr[i] * arr[j]\n\nprint(takoyaki_sum)\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 2\\n') == 11\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2\\n') == 11\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == 11\n\"\"\"\n\n\"\"\"\nSolution Explanation\nSince there are only three possible choices for eating the two takoyaki, you can just compute the sum of the health points\nafter eating each pair. You can multiply the health points after eating each pair with the number of possible pairings.\n\nFor example, in this case we have:\n\nN = 3, so there are three possible pairings\n\nThe first pairing will eat 1 and 2, so you get 2 health points.\nThe second pairing will eat 2 and 3, so you get 6 health points.\nThe third pairing will eat 1 and 3, so you get 11 health points.\nSo the sum of the health points after eating two pairs is 2 + 6 + 11 = 21.\n\nSo the answer is 21.\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('2\\n3 1 2') == '11'\n\"\"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 2\") == \"11\"\n\"\"\"\n\nfrom math import comb"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\") == 11\n\n\"\"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\\n\") == \"11\"\n\"\"\""
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1\\n3\\n4\") == '4\\n3\\n4'\n\"\"\"\n\nimport os\nimport sys"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n1\n4\n3''') == '4\\n3\\n4'\n\n\"\"\"\nTests.\n\"\"\"\nimport unittest\nimport unittest.mock as mock\nimport io\nimport sys\n\nclass TestSolution(unittest.TestCase):\n    def test_solution_1(self):\n        stdin = io.StringIO('3\\n1\\n4\\n3\\n')\n        stdout = io.StringIO()\n\n        with mock.patch('sys.stdin', stdin):\n            with mock.patch('sys.stdout', stdout):\n                Solution = Solution()\n                Solution.solution()\n\n                self.assertEqual(stdout.getvalue(), '4\\n3\\n4\\n')"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3\n1\n4\n3''') == '4\\n3\\n4'\nassert solution('''2\n1\n4\n3''') == '3\\n3\\n4'"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\\n\"\nassert solution(\"3\\n2\\n1\\n4\\n3\\n\") == \"3\\n3\\n3\\n\"\n\"\"\""
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1\\n4\\n3') == '4\\n3\\n4'\nassert solution('5\\n1\\n2\\n3\\n4\\n5') == '5\\n4\\n5\\n5\\n5'\nassert solution('20\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20') == '20\\n20\\n20\\n20\\n20\\n20\\n20\\n20\\n20\\n20\\n20'\nprint(\"Passed.\")\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1\\n4\\n3\\n') == '4\\n3\\n4\\n'\n\n\"\"\""
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n1\n4\n3''') == '''4\n3\n4'''\n\nassert solution('''2\n1\n4\n3''') == '''4\n3'''\n\nassert solution('''200000\n1\n4\n200000''') == '''200000\n4'''\n\nassert solution('''200\n4\n4\n4\n4\n''') == '''4\n4\n4\n4\n4'''\n\nassert solution('''1\n1\n1\n1\n''') == '''1\n1\n1\n1'''"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(':') == ':','solution(\":\",) failed'\n\"\"\"\n\nfrom sys import stdin\n\nN = int(stdin.readline())\nA = [int(stdin.readline()) for _ in range(N)]\n\nmax_el = 0\n\nfor i in range(1, N):\n    if A[i] > max_el:\n        max_el = A[i]\n\nfor i in range(N):\n    if A[i]!= max_el:\n        print(max_el)\n    else:\n        print(A[i])\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n') == '9'\n\"\"\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n\") == \"9\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"9\"\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3') == 9\nassert solution('2 3') == 4\nassert solution('3 2') == 0\n\"\"\"\n\n\"\"\"\nSolution 3\n\nComplexity:\nO(1) time\nO(1) space\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == 9\n\"\"\"\n\nimport sys\n\nn = list(map(int, input().split()))\n\nprint(n[0] * 2 + n[1] * 3)\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3') == '9'\n\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(['5 3']) == '9'\n\"\"\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n\") == '9'\nassert solution(\"4 4\\n\") == '0'\nassert solution(\"2 1\\n\") == '1'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\") == \"9\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"10 10\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\") == \"9\"\n\n-------------\nFor the first test case, the maximum coins you can get is 9.\n\nYou can press the first button twice, each time resulting in a coin of size 4 and a button of size 3.\nSo pressing the first button twice results in the maximum number of coins: 4 + 4 = 8.\n\nYou can press the second button twice, each time resulting in a coin of size 4 and a button of size 2.\nSo pressing the second button twice results in the maximum number of coins: 4 + 4 = 8.\n\nYou can press the third button once, resulting in a coin of size 4 and a button of size 1.\nSo pressing the third button once results in the maximum number of coins: 4 + 4 = 8.\n\nSo, the maximum number of coins you can get is 8.\n\n-------------\nFor the second test case, the maximum coins you can get is 9.\n\nYou can press the first button twice, resulting in a coin of size 5 and a button of size 3.\n\nYou can press the second button twice, resulting in a coin of size 5 and a button of size 2.\n\nYou can press the third button once, resulting in a coin of size 5 and a button of size 1.\n\nSo, the maximum number of coins you can get is 9.\n\n-------------\nFor the third test case, the maximum coins you can get is 10.\n\nYou can press the first button twice, resulting in a coin of size 6 and a button of size 3.\n\nYou can press the second button twice, resulting in a coin of size 6 and a button of size 2.\n\nYou can press the third button once, resulting in a coin of size 6 and a button of size 1.\n\nYou can press the fourth button once, resulting in a coin of size 6 and a button of size 1.\n\nSo, the maximum number of coins you can get is 10.\n\n-------------\nFor the fourth test case, the maximum coins you can get is 10.\n\nYou can press the first button twice, resulting in a coin of size 7 and a button of size 3.\n\nYou can press the second button twice, resulting in a coin of size 7 and a button of size 2.\n\nYou can press the third button once, resulting in a coin of size 7 and a button of size 1.\n\nYou can press the fourth button once, resulting in a coin of size 7 and a button of size 1.\n\nYou can press the fifth button once, resulting in a coin of size 7 and a button of size 1.\n\nSo, the maximum number of coins you can get is 10.\n\n-------------\nFor the fifth test case, the maximum coins you can get is 11.\n\nYou can press the first button twice, resulting in a coin of size 8 and a button of size 3.\n\nYou can press the second button twice, resulting in a coin of size 8 and a button of size 2.\n\nYou can press the third button once, resulting in a coin of size 8 and a button of size 1.\n\nYou can press the fourth button once, resulting in a coin of size 8 and a button of size 1.\n\nYou can press the fifth button once, resulting in a coin of size 8 and a button of size 1.\n\nYou can press the sixth button once, resulting in a coin of size 8 and a button of size 1.\n\nYou can press the seventh button once, resulting in a coin of size 8 and a button of size 1.\n\nSo, the maximum number of coins you can get is 11.\n\n-------------\nFor the sixth test case, the maximum coins you can get is 12.\n\nYou can press the first button twice, resulting in a coin of size 9 and a button of size 3.\n\nYou can press the second button twice, resulting in a coin of size 9 and a button of size 2.\n\nYou can press the third button once, resulting in a coin of size 9 and a button of size 1.\n\nYou can press the fourth button once, resulting in a coin of size 9 and a button of size 1.\n\nYou can press the fifth button once, resulting in a coin of size 9 and a button of size 1.\n\nYou can press the sixth button once, resulting in a coin of size 9 and a button of size 1.\n\nYou can press the seventh button once, resulting in a coin of size 9 and a button of size 1.\n\nYou can press the eighth button once, resulting in a coin of size 9 and a button of size 1.\n\nYou can press the ninth button once, resulting in a coin of size 9 and a button of size 1.\n\nYou can press the tenth button once, resulting in a coin of size 9 and a button of size 1.\n\nYou can press the eleventh button once, resulting in a coin of size 9 and a button of size 1.\n\nYou can press the twelfth button once, resulting in a coin of size 9 and a button of size 1.\n\nSo, the maximum number of coins you can get is 12.\n\n-------------\nFor the seventh test case, the maximum coins you can get is 13.\n\nYou can press the first button twice, resulting in a coin of size 10 and a button of size 3.\n\nYou can press the second button twice, resulting in a coin of size 10 and a button of size 2.\n\nYou can press the third button once, resulting in a coin of size 10 and a button of size 1.\n\nYou can press the fourth button once, resulting in a coin of size 10 and a button of size 1.\n\nYou can press the fifth button once, resulting in a coin of size 10 and a button of size 1.\n\nYou can press the sixth button once, resulting in a coin of size 10 and a button of size 1.\n\nYou can press the seventh button once, resulting in a coin of size 10 and a button of size 1.\n\nYou can press the eighth button once, resulting in a coin of size 10 and a button of size 1.\n\nYou can press the ninth button once, resulting in a coin of size 10 and a button of size 1.\n\nYou can press the tenth button once, resulting in a coin of size 10 and a button of size 1.\n\nYou can press the eleventh button once, resulting in a coin of size 10 and a button of size 1.\n\nYou can press the twelfth button once, resulting in a coin of size 10 and a button of size 1.\n\nYou can press the thirteenth button once, resulting in a coin of size 10 and a button of size 1.\n\nSo, the maximum number of coins you can get is 13.\n\n-------------\nFor the eighth test case, the maximum coins you can get is 14.\n\nYou can press the first button twice, resulting in a coin of size 11 and a button of size 3.\n\nYou can press the second button twice, resulting in a coin of size 11 and a button of size 2.\n\nYou can press the third button once, resulting in a coin of size 11 and a button of size 1.\n\nYou can press the fourth button once, resulting in a coin of size 11 and a button of size 1.\n\nYou can press the fifth button once, resulting in a coin of size 11 and a button of size 1.\n\nYou can press the sixth button once, resulting in a coin of size 11 and a button of size 1.\n\nYou can press the seventh button once, resulting in a coin of size 11 and a button of size 1.\n\nYou can press the eighth button once, resulting in a coin of size 11 and a button of size 1.\n\nYou can press the ninth button once, resulting in a coin of size 11 and a button of size 1.\n\nYou can press the tenth button once, resulting in a coin of size 11 and a button of size 1.\n\nYou can press the eleventh button once, resulting in a coin of size 11 and a button of size 1.\n\nYou can press the twelfth button once, resulting in a coin of size 11 and a button of size 1.\n\nYou can press the thirteenth button once, resulting in a coin of size 11 and a button of size 1.\n\nYou can press the fourteenth button once, resulting in a coin of size 11 and a button of size 1.\n\nYou can press the fifteenth button once, resulting in a coin of size 11 and a button of size 1."
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin))\n\n-----\n3\n6 5\n2 4 3 2 3 2\n\n4\n2 4 6 8\n\n6\n-15 0 9 4 6 3\n\n4\n8 7 8 8\n\n6\n0 0 0 0 1\n\n8\n-15 -9 -7 0 1 2 3\n\n5\n0 1 -1 1 0\n\n7\n-15 -8 0 1 1 2 3\n\n7\n-15 -8 -8 0 1 1 2 3\n\n5\n1 1 1 1 1\n\n3\n-1 1 1\n\n3\n-1 1\n\n3\n1 1\n\n3\n0 1\n\n3\n1 1\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0\n\n3\n0 0"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n-30 -10 10 20 50') == '40'\n\"\"\"\nimport sys"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"-30 -10 10 20 50\") == \"40\"\n\n------Problem Source--------\nhttps://www.pramp.com/challenge/xgMdJLrXfJJWz6yVw4dN\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\"\"\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n-10 -5 2\") == \"15\"\n\"\"\"\n\nfrom __future__ import annotations\n\nimport sys\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n-30 -10 10 20 50') == '40'\n\n\"\"\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\n\"\"\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n\nimport math\nfrom typing import List, Dict, Tuple\n\nfrom collections import deque\n\nimport unittest"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\nprint(solution(\"5 3\\n-30 -10 10 20 50\"))"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\"\"\""
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"0\"\nassert solution(\"7 7\") == \"4\""
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 12') == '4'\n\"\"\"\n\na, b = map(int, input().split())\n\nprint(b - a)\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 15\") == 2\n\"\"\"\n\na, b = [int(input()) for _ in range(2)]\nprint(max(0, (b - a - 1) // 2))\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 13') == '2'\nassert solution('8 9') == '1'\n\"\"\"\n\na, b = map(int, stdin.readline().split())"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 15\") == \"2\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 13\") == \"2\"\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 13') == '2'\n\"\"\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 13') == '2'\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/56b1c15a7783c00f290018f6\n\nTesting your solution to this exercise is more complicated because the test is essentially a stack overflow.\nThe trick is to use the Python assert statement to test the code when it's run, which is very helpful.\n\nUsing the assert statement, you can test the code with the input data that you provide."
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 13\\n') == '2'\n\n-----Explanation-----\nIn the first case, the first tower is 10 meters high, and the second tower is 15 meters high.\nThe heights of the two towers are 10 meters and 15 meters, respectively.\nAssuming that the depth of the snow cover is always at least 1 meter, the depth of the snow cover is 2 meters.\n\"\"\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 20\") == \"2\"\nassert solution(\"9 12\") == \"1\"\nassert solution(\"1 10\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 4\") == \"3\"\nassert solution(\"15 6\") == \"2\"\nassert solution(\"20 10\") == \"3\"\nassert solution(\"50 20\") == \"2\"\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 4\") == \"3\"\nprint(solution(\"10 4\"))\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 4\") == 3\n\"\"\"\n\n\"\"\"\n------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nF\n\nB\n\nL\n\nO\n\nV\n\nL\n\nF\n\nO\n\nV\n\nN\n\nW\n\nY\n\nE\n\nW\n\nO\n\nH\n\nU\n\nN\n\nT\n\nD\n\nG\n\nR\n\nM\n\nP\n\nS\n\nE\n\nC\n\nS\n\nS\n\nB\n\nU\n\nL\n\nH\n\nM\n\nE\n\nT\n\nT\n\nE\n\nD\n\nU\n\nT\n\nC\n\nE\n\nM\n\nW\n\nB\n\nE\n\nT\n\nS\n\nE\n\nI\n\nB\n\nO\n\nF\n\nG\n\nT\n\nM\n\nC\n\nH\n\nL\n\nG\n\nT\n\nE\n\nR\n\nE\n\nF\n\nE\n\nM\n\nS\n\nF\n\nG\n\nL\n\nE\n\nP\n\nE\n\nS\n\nG\n\nO\n\nE\n\nO\n\nG\n\nP\n\nY\n\nG\n\nM\n\nS\n\nE\n\nP\n\nU\n\nF\n\nI\n\nW\n\nP\n\nC\n\nW\n\nF\n\nI\n\nW\n\nO\n\nV\n\nL\n\nO\n\nG\n\nS\n\nO\n\nE\n\nE\n\nU\n\nR\n\nE\n\nR\n\nV\n\nE\n\nE\n\nB\n\nF\n\nC\n\nH\n\nO\n\nE\n\nE\n\nH\n\nU\n\nE\n\nO\n\nY\n\nE\n\nN\n\nE\n\nI\n\nN\n\nE\n\nS\n\nC\n\nE\n\nI\n\nE\n\nG\n\nE\n\nI\n\nM\n\nE\n\nG\n\nI\n\nH\n\nO\n\nV\n\nL\n\nE\n\nR\n\nM\n\nE\n\nF\n\nW\n\nM\n\nI\n\nS\n\nH\n\nU\n\nG\n\nO\n\nG\n\nP\n\nS\n\nT\n\nS\n\nE\n\nW\n\nM\n\nI\n\nC\n\nL\n\nO\n\nG\n\nE\n\nO\n\nE\n\nT\n\nS\n\nS\n\nT\n\nE\n\nM\n\nE\n\nE\n\nS\n\nG\n\nG\n\nE\n\nR\n\nM\n\nE\n\nE\n\nG\n\nI\n\nE\n\nM\n\nM\n\nE\n\nW\n\nS\n\nS\n\nM\n\nT\n\nU\n\nE\n\nR\n\nL\n\nE\n\nH\n\nV\n\nF\n\nR\n\nT\n\nF\n\nU\n\nH\n\nG\n\nP\n\nB\n\nN\n\nP\n\nT\n\nP\n\nE\n\nS\n\nB\n\nG\n\nM\n\nG\n\nI\n\nE\n\nY\n\nG\n\nM\n\nE\n\nB\n\nG\n\nG\n\nN\n\nN\n\nE\n\nR\n\nH\n\nU\n\nB\n\nN\n\nE\n\nS\n\nE\n\nT\n\nT\n\nE\n\nT\n\nT\n\nU\n\nE\n\nW\n\nC\n\nR\n\nO\n\nL\n\nM\n\nE\n\nE\n\nE\n\nF\n\nF\n\nO\n\nT\n\nM\n\nG\n\nC\n\nG\n\nT\n\nP\n\nG\n\nR\n\nE\n\nE\n\nE\n\nE\n\nN\n\nV\n\nR\n\nO\n\nS\n\nU\n\nE\n\nS\n\nE\n\nG\n\nS\n\nE\n\nE\n\nS\n\nE\n\nE\n\nL\n\nE\n\nS\n\nF\n\nG\n\nY\n\nO\n\nN\n\nS\n\nN\n\nE\n\nI\n\nE\n\nB\n\nN\n\nE\n\nE\n\nM\n\nE\n\nS\n\nE\n\nG\n\nG\n\nE\n\nT\n\nB\n\nE\n\nE\n\nE\n\nE\n\nE\n\nE\n\nI\n\nO\n\nE\n\nW\n\nE\n\nM\n\nS\n\nE\n\nG\n\nE\n\nS\n\nE\n\nM\n\nN\n\nE\n\nP\n\nE\n\nP\n\nE\n\nE\n\nO\n\nO\n\nE\n\nW\n\nE\n\nN\n\nE\n\nT\n\nU\n\nE\n\nS\n\nS\n\nS\n\nP\n\nE\n\nE\n\nE\n\nS\n\nO\n\nS\n\nE\n\nS\n\nE\n\nE\n\nE\n\nT\n\nE\n\nM\n\nS\n\nE\n\nN\n\nG\n\nN\n\nM\n\nG\n\nC\n\nG\n\nC\n\nT\n\nE\n\nE\n\nS\n\nE\n\nE\n\nE\n\nP\n\nE\n\nW\n\nR\n\nB\n\nI\n\nM\n\nE\n\nE\n\nS\n\nE\n\nM\n\nT\n\nB\n\nG\n\nT\n\nH\n\nO\n\nE\n\nG\n\nR\n\nE\n\nE\n\nE\n\nE\n\nE\n\nE\n\nE\n\nF\n\nF\n\nF\n\nG\n\nF\n\nS\n\nM\n\nW\n\nN\n\nG\n\nE\n\nL\n\nE\n\nL\n\nE\n\nL\n\nL\n\nE\n\nL\n\nO\n\nG\n\nE\n\nE\n\nO\n\nW\n\nC\n\nW\n\nE\n\nR\n\nT\n\nE\n\nE\n\nT\n\nN\n\nE\n\nE\n\nE\n\nO\n\nE\n\nE\n\nE\n\nE\n\nE\n\nE\n\nG\n\nE\n\nE\n\nE\n\nG\n\nT\n\nE\n\nU\n\nE\n\nT\n\nU\n\nG\n\nG\n\nE\n\nT\n\nU\n\nL\n\nG\n\nE\n\nR\n\nE\n\nE\n\nE\n\nB\n\nB\n\nP\n\nE\n\nE\n\nE\n\nE\n\nE\n\nE\n\nF\n\nF\n\nN\n\nT\n\nO\n\nC\n\nE\n\nL\n\nB\n\nG\n\nE\n\nO\n\nE\n\nE\n\nG\n\nE\n\nM\n\nE\n\nE\n\nG\n\nE\n\nE\n\nE\n\nE\n\nE\n\nW\n\nR\n\nO\n\nE\n\nE\n\nM\n\nE\n\nB\n\nE\n\nE\n\nF\n\nE\n\nE\n\nP\n\nE\n\nG\n\nE\n\nE\n\nO\n\nE\n\nE\n\nE\n\nE\n\nE\n\nE\n\nE\n\nE\n\nE\n\nM\n\nE\n\nE\n\nE\n\nM\n\nT\n\nE\n\nM\n\nM\n\nE\n\nF\n\nE\n\nE\n\nE\n\nO\n\nE\n\nN\n\nE\n\nG\n\nU\n\nE\n\nE\n\nE\n\nE\n\nE\n\nE\n\nG\n\nE\n\nF\n\nF\n\nE\n\nE\n\nF\n\nE\n\nN\n\nM\n\nB\n\nE"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 4\") == \"3\"\nprint(solution(\"10 4\"))\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 4\") == 3\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 4\") == 3\n\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 4') == '3'"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 4') == '3'\nassert solution('5 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '2'\nassert solution('1 2 3') == '3'\nassert solution('1 2 3 4') == '5'\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nassert solution(\"0 0 0 0\") == \"0\"\nassert solution(\"100 100 100 100\") == \"0\"\nassert solution(\"0 0 0 0\") == \"0\"\n\"\"\""
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('0 75 25 100') == '50'\nassert solution('0 75 25 20') == '25'\nassert solution('0 20 20 0') == '20'\nassert solution('0 0 0 0') == '0'\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nprint(solution(\"0 75 25 100\"))"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 75 25 100') == '50'\nassert solution('3 5 4 8') == '4'\nassert solution('0 1 2 3') == '0'\nassert solution('0 0 0 0') == '0'\nassert solution('0 100 10 20') == '10'\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nassert solution(\"0 75 25 100\")!= \"50\"\nassert solution(\"0 75 25 101\") == \"0\"\nassert solution(\"0 75 25 100 D\") == \"0\"\n\n'''"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 75 25 100') == '50'\n\"\"\"\nfrom functools import lru_cache"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nassert solution(\"75 0 25 100\") == \"50\"\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(105) == 1\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(105) == 1\n\"\"\"\n\nfrom math import ceil, sqrt"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('105') == '1'\nprint(solution('105'))"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"105\") == 1\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('105') == '1'\n\"\"\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('105') == 1\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('105') == '1'\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\"\n\nn = int(input())\n\nodd = 0\nfor i in range(1, n + 1):\n    if i % 2!= 0:\n        odd += 1\n        for j in range(1, 8):\n            if i ** j <= n:\n                odd -= 1\n\nprint(odd)\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\"\n\nfrom math import ceil, floor\n\nn, k = map(int, stdin.split())"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3') == '1'\nassert solution('1 1') == '0'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"1\"\n\"\"\"\n\nn, k = input().split()\nk = int(k)\nn = int(n)\n\nmax_crackers = 1\nmin_crackers = 1\n\nfor i in range(k):\n    if i % 2 == 0:\n        max_crackers *= (n-1)\n        min_crackers *= (n-1)\n    else:\n        max_crackers *= (n)\n        min_crackers *= (n)\n\nprint(abs(max_crackers - min_crackers))\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 3\\n2 2 3') == '1'\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\"\n\nfrom typing import List\nimport unittest\n\n\nclass DistributeCandies:\n    def solution(self, stdin: str) -> str:\n        candies = list(map(int, stdin.split()))\n        min_num = min(candies)\n        return str(max(candies) - min_num)\n\n\nclass TestDistributeCandies(unittest.TestCase):\n    def test_solution_1(self):\n        self.assertEqual(DistributeCandies().solution(\"7 3\"), \"1\")\n\n    def test_solution_2(self):\n        self.assertEqual(DistributeCandies().solution(\"10 10\"), \"0\")\n\n    def test_solution_3(self):\n        self.assertEqual(DistributeCandies().solution(\"3 5\"), \"1\")\n\n    def test_solution_4(self):\n        self.assertEqual(DistributeCandies().solution(\"7 4\"), \"0\")\n\n    def test_solution_5(self):\n        self."
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\") == 1\n\"\"\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3\") == \"1\"\nassert solution(\"10 5\") == \"0\"\nassert solution(\"100 50\") == \"50\"\nassert solution(\"100 51\") == \"1\"\nassert solution(\"20 50\") == \"10\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\"\n\nimport sys\n\nN, K = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"111\") == \"111\"\n\n\"\"\"\n\nn = int(input())\n\nbase = 10\n\nans = base**n - 1\n\nprint(ans)\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"111\") == \"111\"\nassert solution(\"111\")!= \"110\"\nassert solution(\"101010\") == \"101010\"\n\"\"\"\n\nN = input()\n\n\"\"\"\nIn this problem,\nwe can use a simple method of finding the Nth number in the Fibonacci sequence.\nThis is a great example of a problem that can be solved with a simple example.\nThe Fibonacci numbers are defined recursively as follows:\n    f[0] = 0\n    f[1] = 1\n    f[n] = f[n-1] + f[n-2]\n    where f[n] is the nth Fibonacci number.\nWith this definition, we can write an expression for f[n] = 1 + 5**0.5:\n    f[n] = 1 + 5**0.5\n    (1) - f[n] = 5**0.5\n    (2) - 5**0.5 - 1 = 4.5\n    (3) - 5**0.5 = 2.2360679775\n    (4) - f[n] = 2.2360679775\n    (5) - f[n] - 1 = 2.2360679775 - 1\n    (6) - f[n] - 1 < 0\n    (7) - f[n] - 1 = -0.5\n    (8) - f[n] = 0.5\nWith (1) and (7), we can determine when a Fibonacci number is an integer.\nWith (2) and (3), we can determine when a Fibonacci number is less than one.\nWith (4), we can determine when a Fibonacci number is an integer or less than one.\nWith (5), we can determine when a Fibonacci number is greater than one.\nWith (6), we can determine when a Fibonacci number is equal to one.\nWith (8), we can determine when a Fibonacci number is greater than one.\n\nThis solution correctly passes all sample tests.\n\"\"\"\nf = lambda n: (1 + 5**0.5) / 2 + 5**0.5 - 1\n\nn = int(N)\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('111') == '111'\nassert solution('110') == '1010'\nassert solution('101') == '1011'\nassert solution('100') == '1100'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('111') == '111'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('111') == '111'\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n\nN = int(input())\nprint(N)\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('111') == '111'\nassert solution('112') == '211'\nassert solution('113') == '311'\nassert solution('114') == '411'\nassert solution('115') == '511'\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('111') == '111'\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 6 3\") == \"5\"\nassert solution(\"4 1 3\") == \"5\"\nassert solution(\"4 1 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 6 3') == '5'\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 6 3\") == '5'\nprint(solution(\"1 6 3\"))\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1 6 3''') == '5'\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 6 3') == '5'\n\"\"\"\n\nA = [int(x) for x in stdin.split()]\nprint(sum(abs(x-y) for x, y in zip(A, sorted(A))))"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\"\n\n\"\"\"\nTODO: RTFM\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 4\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 6 3\") == \"5\"\nprint(solution(\"1 6 3\"))\n\n------------Solution------------\n\nA_1, A_2, A_3 = [int(x) for x in stdin.split()]\nA = [0, A_1, A_2, A_3]\n\ncost = 0\nfor i in range(3):\n    cost += A[i] - A[i+1]\nprint(cost)\n\n'''\n\nimport sys\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 6 3') == '5'\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 6 3\") == \"5\"\nprint(solution(\"1 6 3\"))\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8') == '5'\n\"\"\"\n\ns = int(stdin.readline().strip())\na = [s]\n\nfor i in range(1, 1000001):\n    if a[i - 1] % 2 == 0:\n        a.append(a[i - 1] // 2)\n    else:\n        a.append(3 * a[i - 1] + 1)\n\nprint(a.index(s))\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8') == '5'\nassert solution('8', '4') == '8'\nassert solution('8', '3') == '5'\nassert solution('8', '7') == '7'\nassert solution('8', '9') == '5'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8') == '5'\nassert solution('7') == '3'\nassert solution('1') == '1'\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8') == 5\n\"\"\"\n\ns = int(stdin.readline())\n\na = [s]\ni = 1\nwhile True:\n    if a[-1] % 2 == 0:\n        a.append(a[-1] // 2)\n    else:\n        a.append(3 * a[-1] + 1)\n    if a[i] == a[i - 1]:\n        break\n    i += 1\nprint(i)\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(8) == 5\nassert solution(5) == 5\n\"\"\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8') == '5'\nassert solution('8') == '5'\nassert solution('1') == '1'\nassert solution('1') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8') == '5'\n\"\"\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8') == '5'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\") == \"5\"\nprint(solution(\"8\"))\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"10 10 10 10\") == \"Yes\"\n\n\"\"\"\n\nA, B, C, D = [int(x) for x in stdin.strip().split()]\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\"\n\na, b, c, d = map(int, input().split())\nprint(\"Yes\" if a > b else \"No\")\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 9 10 10') == 'No'\nassert solution('1 1 1 1') == 'Yes'\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 9 10 10\") == \"No\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a=\"10 9 10 10\") == \"No\"\nassert solution(a=\"1 10 10 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 9 10 10') == 'No'\nassert solution('9 9 10 10') == 'Yes'\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"1 1 1 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 9 10 10') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\"\n\na, b, c, d = [int(num) for num in stdin.split(' ')]"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\"\n\nclass Creature:\n    def __init__(self, hp, atk):\n        self.hp = hp\n        self.atk = atk"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\n\"\"\"\nimport collections\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\n\nimport math\nfrom collections import defaultdict"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n10 2 5\\n6 3 4') == '5'\n\"\"\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\n\nn = int(input())\nv, c = [], []\nfor _ in range(n):\n    v_, c_ = map(int, input().split())\n    v.append(v_)\n    c.append(c_)\n\nv.sort()\nc.sort()\nres = 0\n\nfor i in range(n):\n    res += v[i] - c[i] if v[i] > c[i] else 0\n\nprint(res)\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\n\nimport math\nfrom typing import List"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\nimport sys\nimport functools\n\nassert len(sys.argv) == 2\n\nN = int(sys.argv[1])\n\nlines = sys.stdin.readlines()\n\nN, lines = int(lines[0]), lines[1:]\n\nvalues = [int(n) for n in lines[:N]]\ncosts = [int(n) for n in lines[N:]]"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n10 2 5\\n6 3 4') == '5'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('.#..#\\n.....\\n#####\\n....#\\n...##') == '#.#\\n###\\n.#.'\nassert solution('....\\n#..#\\n#..#\\n#..#\\n#..#\\n.##\\n...') == '#..\\n.##\\n#..\\n...'\n\n\"\"\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"3 3\\n.##\\n###\\n.##\"\nassert solution(\"4 4\\n#.#\\n....\\n#.#\\n.#.#\") == \"3 3\\n.##\\n###\\n.##\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4 4\n##.#\n....\n##.#\n.#.#\n\"\"\") == \"\"\"\n3 3\n.##\n.##\n.##\n\"\"\"\n\nassert solution(\"\"\"\n4 4\n.#.#\n.##.\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"4 4\n##.#\n....\n##.#\n.#.#\n\"\"\") == \"###\\n###\\n.##\"\nassert solution(\"\"\"4 4\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\n\"\"\"\n\nfrom typing import List\nimport math\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n##.#\\n....\\n##.#\\n.#.#\\n') == '###\\n###\\n.##\\n'\n\"\"\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\nassert solution(\"4 4\\n##.#\\n....\\n##.#\\n#.#\") == \"###\\n###\\n.##\"\nassert solution(\"4 4\\n#.#\\n....\\n##.#\\n#.#\") == \"###\\n###\\n.##\"\nassert solution(\"4 4\\n#.#\\n....\\n##.#\\n#.#\") == \"###\\n###\\n.##\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"3 3\\n.##\\n.##\\n.##\"\nassert solution(\"4 4\\n###\\n#.#\\n#.#\\n\") == \"1 1\\n#.#\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n##.#\\n....\\n##.#\\n.#.#\\n') == '###\\n###\\n.##\\n'\n\n\"\"\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\n\"\"\"\n\nimport sys\n\nh, w = map(int, sys.stdin.readline().split())\ngrid = [sys.stdin.readline() for _ in range(h)]"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == '6.28318530717958623200'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '6.28318530717958623200'\nassert solution('2') == '12.566370614359172106'\nassert solution('3') == '19.638752093021521015'\nassert solution('4') == '31.006229007633623238'\nassert solution('5') == '62.96071571837265771'\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\n\"\"\"\n\n\"\"\"\nExplanation\na = 1\nR = a\n\nn = 1\nR = 1 + n * 2\nn = 2\nR = 2 + n * 2\nn = 3\nR = 2 + 3 * 2\nn = 4\nR = 4 + n * 2\nn = 5\nR = 2 + 5 * 2\nn = 6\nR = 6 + n * 2\nn = 7\nR = 2 + 7 * 2\nn = 8\nR = 8 + n * 2\nn = 9\nR = 2 + 9 * 2\nn = 10\nR = 10 + n * 2\nn = 11\nR = 2 + 11 * 2\nn = 12\nR = 12 + n * 2\nn = 13\nR = 2 + 13 * 2\nn = 14\nR = 14 + n * 2\nn = 15\nR = 2 + 15 * 2\nn = 16\nR = 16 + n * 2\nn = 17\nR = 2 + 17 * 2\nn = 18\nR = 18 + n * 2\nn = 19\nR = 2 + 19 * 2\nn = 20\nR = 20 + n * 2\n\nSince R = a + n(2), R - R(1) = n(2) which is equal to 2n, R - R(1) = 2n and R = n(2) + 2.\n\nTherefore, the circumference of the circle is 2n * pi.\n\"\"\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n') == '6.28318530717958623200'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '6.28318530717958623200'\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n') == '6.28318530717958623200'\nassert solution('2\\n') == '12.566370614359172953850'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '6.28318530717958623200'\nassert solution('10') == '62.831853071795862'\nassert solution('100') == '6283.1853071795862'\nassert solution('1000') == '62831853071795862'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"1\"\n) == '6.28318530717958623200'\n\nassert solution(\n\"2\"\n) == '12.566370614359172953850'\n\nassert solution(\n\"100\"\n) == '5040.0'\n\n-----\nThe solution below is very inefficient."
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '6.28318530717958623200'\n\"\"\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"AAAA\") == \"Yes\"\nassert solution(\"ASDF\") == \"No\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ASSS') == 'Yes'\nassert solution('ASSSW') == 'No'\nassert solution('AAAA') == 'Yes'\nassert solution('AAAAA') == 'No'\n\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('ASS') == 'Yes'\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"BASA\") == \"No\"\nassert solution(\"ABAB\") == \"Yes\"\nassert solution(\"AAAB\") == \"No\"\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ASAS') == 'Yes'\nassert solution('ABABA') == 'No'\nassert solution('AAAA') == 'Yes'\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ASSA') == \"Yes\"\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('AAAA') == 'Yes'\nassert solution('AAAS') == 'No'\nassert solution('ASAS') == 'Yes'\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\n\"\"\"\n\n\"\"\"\nimport re\nimport sys\n\nfor line in sys.stdin:\n    if re.search(r'([A-Z])\\1', line) and re.search(r'([A-Z])\\1', line)[0] == re.search(r'([A-Z])\\1', line)[0]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\"\"\"\n\nimport re\n\nfor line in sys.stdin:\n    if re.search(r'([A-Z])\\1', line) and re.search(r'([A-Z])\\1', line)[0] == re.search(r'([A-Z])\\1', line)[0]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"ABCD\") == \"No\"\nassert solution(\"AAAA\") == \"Yes\"\nassert solution(\"ABBA\") == \"No\"\nassert solution(\"ABCD\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"-13 3\") == \"-10\"\nprint('Hooray!')\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"-13 3\") == \"10\"\n\n\"\"\"\n\n\n\"\"\"\n8. Write a program to find the number of occurrences of each character in the string.\nInput Format\n\nInput contains a string.\n\nConstraints\n\n\nOutput Format\n\nPrint the number of occurrences of each character in the string.\n\nSample Input 0\n\nabcdabcdababde\nSample Output 0\n\na,5\nb,3\nc,2\nd,2\ne,1\nSample Input 1\n\nabcdabd\nSample Output 1\n\na,1\nb,1\nc,1\nd,2\nd,1\ne,1\nSample Input 2\n\nabcdefg\nSample Output 2\n\na,1\nb,1\nc,1\nd,2\ne,1\nf,1\ng,1\nSample Input 3\n\n12aa33b21bcd\nSample Output 3\n\na,1\nb,3\nc,1\nd,2\n\n\"\"\"\n\n\n\"\"\"\n9. Write a program to print the number of occurrences of each character in the string.\nInput Format\n\nInput contains a string.\n\nConstraints\n\nOutput Format\n\nPrint the number of occurrences of each character in the string.\n\nSample Input 0\n\nabcdabcdababde\nSample Output 0\n\na,5\nb,3\nc,2\nd,2\ne,1\nSample Input 1\n\nabcdabd\nSample Output 1\n\na,1\nb,1\nc,1\nd,2\nd,1\ne,1\nSample Input 2\n\nabcdefg\nSample Output 2\n\na,1\nb,1\nc,1\nd,2\ne,1\nf,1\ng,1\nSample Input 3\n\n12aa33b21bcd\nSample Output 3\n\na,1\nb,3\nc,1\nd,2\n\n\"\"\"\n\n\n\"\"\"\n10. Write a program to find the total number of digits and letters in the string.\nInput Format\n\nInput contains a string.\n\nConstraints\n\nOutput Format\n\nPrint the total number of digits and letters in the string.\n\nSample Input 0\n\nabcd1234123ghi\nSample Output 0\n\n13\n27\nSample Input 1\n\nabcd\nSample Output 1\n\n4\n4\nSample Input 2\n\nABCD123\nSample Output 2\n\n5\n4\nSample Input 3\n\nabcd1234123ghi\nSample Output 3\n\n5\n13\n\n\"\"\"\n\n\n\"\"\"\n11. Write a program to compute the sum of digits of a number in Python.\nInput Format\n\nInput contains a positive integer.\n\nConstraints\n\nOutput Format\n\nPrint the sum of digits of the given number in Python.\n\nSample Input 0\n\n10\nSample Output 0\n\n1\nSample Input 1\n\n151\nSample Output 1\n\n5\nSample Input 2\n\n12345\nSample Output 2\n\n15\nSample Input 3\n\n123456\nSample Output 3\n\n21\n\n\"\"\"\n\n\n\"\"\"\n12. Write a program to count and display the number of each character in a string.\nInput Format\n\nInput contains a string.\n\nConstraints\n\nOutput Format\n\nPrint the number of occurrences of each character in the string.\n\nSample Input 0\n\nabcdabcdababde\nSample Output 0\n\na,5\nb,3\nc,2\nd,2\ne,1\nSample Input 1\n\nabcdabd\nSample Output 1\n\na,1\nb,1\nc,1\nd,2\nd,1\ne,1\nSample Input 2\n\nabcdefg\nSample Output 2\n\na,1\nb,1\nc,1\nd,2\ne,1\nf,1\ng,1\nSample Input 3\n\n12aa33b21bcd\nSample Output 3\n\na,1\nb,3\nc,1\nd,2\n\n\"\"\"\n\n\n\"\"\"\n13. Write a program to find the longest word in a given string.\nInput Format\n\nInput contains a string.\n\nConstraints\n\nOutput Format\n\nPrint the longest word in the string.\n\nSample Input 0\n\nabcd efgh ijklmnopqrstuvwxyz\nSample Output 0\n\nijklmnopqrstuvwxyz\nSample Input 1\n\nThe quick brown fox jumps over the lazy dog\nSample Output 1\n\nThe\nSample Input 2\n\nThis is good to know\nSample Output 2\n\nThis\nSample Input 3\n\nthis is good to know\nSample Output 3\n\nthis\n\n\"\"\"\n\n\n\"\"\"\n14. Write a program to calculate the sum of first n natural numbers.\nInput Format\n\nInput contains a integer.\n\nConstraints\n\nOutput Format\n\nPrint the sum of first n natural numbers.\n\nSample Input 0\n\n5\nSample Output 0\n\n15\nSample Input 1\n\n2\nSample Output 1\n\n3\nSample Input 2\n\n0\nSample Output 2\n\n0\n\n\"\"\"\n\n\n\"\"\"\n15. Write a program to count the number of even and odd digits in a given number.\nInput Format\n\nInput contains a integer.\n\nConstraints\n\nOutput Format\n\nPrint the number of even digits and odd digits in the given number.\n\nSample Input 0\n\n123321\nSample Output 0\n\n1\n2\n3\nSample Input 1\n\n123\nSample Output 1\n\n0\n1\n2\nSample Input 2\n\n1112\nSample Output 2\n\n2\n1\nSample Input 3\n\n12345\nSample Output 3\n\n0\n0\n0\n1\nSample Input 4\n\n12321\nSample Output 4\n\n0\n0\n0\n1\nSample Input 5\n\n12\nSample Output 5\n\n1\n0\n\n\"\"\"\n\n\n\"\"\"\n16. Write a program to find the frequency of occurrence of each character in a string.\nInput Format\n\nInput contains a string.\n\nConstraints\n\nOutput Format\n\nPrint the frequency of occurrence of each character in the string.\n\nSample Input 0\n\nabcdabcdababde\nSample Output 0\n\na,5\nb,3\nc,2\nd,2\ne,1\nSample Input 1\n\nabcdabd\nSample Output 1\n\na,1\nb,1\nc,1\nd,2\nd,1\ne,1\nSample Input 2\n\nabcdefg\nSample Output 2\n\na,1\nb,1\nc,1\nd,2\ne,1\nf,1\ng,1\nSample Input 3\n\n12aa33b21bcd\nSample Output 3\n\na,1\nb,3\nc,1\nd,2\n\n\"\"\"\n\n\n\"\"\"\n17. Write a program to swap cases.\nInput Format\n\nInput contains a string.\n\nConstraints\n\nOutput Format\n\nPrint the strings in the upper case or lower case format.\n\nSample Input 0\n\nPython is great\nSample Output 0\n\npYTHON iS gREAT\nSample Input 1\n\nPYTHON\nSample Output 1\n\nPYTHON\nSample Input 2\n\nPython\nSample Output 2\n\npYTHON\nSample Input 3\n\nPython is great\nSample Output 3\n\npYTHON iS gREAT\n\n\"\"\"\n\n\n\"\"\"\n18. Write a program to swap comma and dot in a string.\nInput Format\n\nInput contains a string.\n\nConstraints\n\nOutput Format\n\nPrint the string with swapped comma and dot format.\n\nSample Input 0\n\nPython,PHP\nSample Output 0\n\nPython.PHP\nSample Input 1\n\nPython.PHP\nSample Output 1\n\nPython,PHP\nSample Input 2\n\nPython.PHP\nSample Output 2\n\nPython,PHP\nSample Input 3\n\nPython,PHP\nSample Output 3\n\nPython.PHP\n\n\"\"\"\n\n\n\"\"\"\n19. Write a program to compute the sum of digits of a given number.\nInput Format\n\nInput contains a integer.\n\nConstraints\n\nOutput Format\n\nPrint the sum of digits of the given number.\n\nSample Input 0\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('-13 3') == '-10'\n\"\"\"\n\nimport sys\n\nA, B = map(int, sys.stdin.readline().split())\nprint(-max(A + B, A - B, A * B))"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''-13 3''') == '-10'\nassert solution('''-13 -3''') == '-16'\nassert solution('''-13 3''') == '-39'\n\"\"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"-13 3\") == \"10\"\nassert solution(\"1 3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('-13 3') == '-10'\n\n\"\"\"\n\nfrom __future__ import annotations\n\nimport math\n\nimport pytest\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '3'\nassert solution('2 1') == '2'\nassert solution('-1 -1') == '-2'\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\nassert solution('5\\n2 5 4 8 10') == '2'\n\"\"\"\nfrom itertools import combinations\nimport sys"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n6 5 6 8''') == 3\n\n-----\n4\n6 5 6 8\n\n3\n\n4\n6 5 6 8\n\n3\n\n5\n6 5 6 8 10\n\n3\n\n20\n
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\nh = list(map(int, sys.stdin.readline().rstrip().split()))\n\nh.sort(reverse=True)\n\ncount = 0\nfor i in range(n - 1):\n    if i == 0:\n        if h[i] <= h[i + 1]:\n            count += 1\n    elif i == n - 1:\n        if h[i - 1] <= h[i]:\n            count += 1\n    else:\n        if h[i] <= h[i + 1] and h[i] <= h[i - 1]:\n            count += 1\nprint(count)\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input) == expected\n\nprint(solution(input))\n\n-----\nYou can see the ocean from the first, third and fourth inns from the west.\n\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first, third and fourth inns from the west.\nYou can see the ocean from the first,"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n6 5 6 8\") == 3\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\n'''"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n6 5 6 8') == 3\nprint(solution(stdin))\n\n'''\n\nn = int(stdin.readline())\nmountain = list(map(int, stdin.readline().split()))\nsea = 0\nfor i in range(n):\n    if i!= 0:\n        if mountain[i - 1] <= mountain[i]:\n            sea += 1\n\nprint(sea)\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n\") == \"1\\n5\\n1 2 3 4 5\"\n\"\"\"\n\nstdin = input()\n\nn = int(stdin.split(\"\\n\")[0])\n\ns = stdin.split(\"\\n\")[1:]\n\nr = []\nl = []\nfor el in s:\n    r.append(int(el))\n    l.append(int(el))\n\nfor i in range(n):\n    j = 0\n    a = l[i]\n    if l[i] in r:\n        if l[i] > l[i + 1]:\n            r.remove(l[i])\n        else:\n            l.remove(l[i + 1])\n    else:\n        r.append(l[i])\n\nprint(len(r))\nprint(\" \".join([str(el) for el in r]))\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''7\n1 2 3 1 2 3 4''') == '2\\n3 4\\n'\nassert solution('''4\n1 1 1 1''') == '4\\n1 1 1 1\\n'\nassert solution('''5\n1 2 1 2 1''') == '1\\n5\\n'\nassert solution('''5\n1 2 1 2 1''') == '1\\n5\\n'\nassert solution('''5\n1 2 1 2 1''') == '1\\n5\\n'\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == 2\nassert solution(\"4\\n1 1 1 1\") == 4\nassert solution(\"5\\n1 2 1 2 1\") == 3\nassert solution(\"5\\n1 1 1 1\") == 4\nassert solution(\"5\\n1 2 1 2 1\") == 3\nprint(\"Success\")"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\n\"\"\"\n\nn = int(input())\nl = list(map(int, input().split()))\ncount = 0\nprev = l[0]\nfor i in l[1:]:\n    if i > prev:\n        count += 1\n    prev = i\nprint(count + 1)\nprint(*l)"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\"\nassert solution(\"4\\n1 1 1 1\") == \"4\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"3\"\n\"\"\"\n\na = input().split()\na = list(map(int, a))"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\n\"\"\"\n\nfrom collections import Counter\n\nstdin = stdin.split(\"\\n\")\nn = int(stdin[0])\narr = [int(i) for i in stdin[1].split()]\n\ns = dict(Counter(arr))\n\nprint(len(s))\nprint(*s.values())\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == '2\\n3 4'\nassert solution(\"4\\n1 1 1 1\") == '4\\n1 1 1 1'\nassert solution(\"5\\n1 2 1 2 1\") == '1\\n5'\nassert solution(\"5\\n1 2 1 2 1\") == '1\\n5'\nprint('test passed')\n\nfrom collections import Counter\n\na = Counter(map(int, stdin.split()[1:]))\nres = []\ni = 1\nwhile len(a) > 0:\n    if i in a:\n        res.append(i)\n        a[i] -= 1\n        if a[i] == 0:\n            del a[i]\n    i += 1\nprint(len(res))\nprint(' '.join(map(str, res)))\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\n\"\"\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 1 2 1\\n\") == \"3\\n2 2 1\"\nassert solution(\"5\\n1 1 1 1\\n\") == \"4\\n1 1 1 1\"\nassert solution(\"7\\n1 2 3 1 2 3 4\\n\") == \"2\\n3 4\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 1 2 1\\n\") == \"3\\n2 2 1\"\nassert solution(\"5\\n1 1 1 1\\n\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 3 4 5\\n\") == \"1\\n5\"\nassert solution(\"7\\n1 2 3 1 2 3 4\\n\") == \"2\\n3 4\"\n\n\"\"\"\n\nn = int(stdin.readline())\n\nlst = list(map(int, stdin.readline().split()))\n\nlst.sort()\n\ncount = 1\ni = 0\nres = []\nfor i in range(n-1):\n    if lst[i] == lst[i+1]:\n        count += 1\n    else:\n        res.append(count)\n        count = 1\nres.append(count)\nprint(res)\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '9\\n9\\n9\\n10\\n10\\n10\\n'\nassert solution('8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n') == '12\\n12\\n12\\n12\\n12\\n12\\n14\\n14\\n'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3) == 1\nassert solution(6) == 2\nassert solution(7) == 1\nassert solution(21) == 7\nassert solution(28) == 4\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n6\") == \"1\"\nassert solution(\"7\\n21\") == \"4\"\nassert solution(\"999999999\\n999999984\") == \"333333328\""
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n6\") == \"1\"\nassert solution(\"7\\n21\") == \"4\"\nassert solution(\"2\\n28\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n7\\n1\\n2\\n3\\n4\\n5\\n1\\n2\\n3\\n4\\n5\\n1\\n2\\n3\\n4\\n5\\n1\\n2\\n3\\n4\\n5\\n') == '1\\n2\\n1\\n7\\n4\\n333333333\\n333333328'\nassert solution('3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1') == '2'\nassert solution('1\\n1') == '1'\nassert solution('3\\n10') == '0'\nassert solution('3\\n20') == '1'\nassert solution('3\\n30') == '2'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\") == \"1\"\n\nassert solution(\"2\\n1\") == \"2\"\n\nassert solution(\"2\\n2\") == \"1\"\n\nassert solution(\"5\\n7\") == \"1\"\n\nassert solution(\"5\\n9\") == \"4\""
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n1') == '1'\nassert solution('2\\n3') == '2'\nassert solution('3\\n3') == '1'\nassert solution('3\\n6') == '2'\nassert solution('7\\n21') == '7'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n6') == '1'\nassert solution('7\\n21') == '2'\nassert solution('7\\n28') == '1'\nassert solution('7\\n999999999') == '3'\nassert solution('7\\n999999984') == '2'\n\"\"\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n9') == '1'\nassert solution('7\\n21') == '4'\nassert solution('7\\n999999999') == '3'\nassert solution('7\\n999999984') == '2'\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"512 4\") == \"50\"\n\nassert solution(\"1000000000 9\") == \"1\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\"\"\"\n\nimport os\nimport sys\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"512 4\") == \"50\"\n\nsolution(\"1000000000 9\") == \"1\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"512 4\") == \"50\"\n\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\"\"\"\n\nn, k = input().split()\n\nn, k = int(n), int(k)"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\n\n########################################################################################\n\nimport math"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\nassert solution(test_input_4) == test_output_4\n\nprint(solution(input()))\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 5 1 2 2 1') == '5'\nassert solution('5 1 4') == '2'\nassert solution('7 1 5') == '2'\nassert solution('7 5 1') == '2'\nassert solution('7 2 5') == '2'\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''7\n4 3 5 1 2 2 1\n''') == '5\\n2 1 1 2 3', \"Test #1.1 failed.\"\nassert solution('''5\n3 7 5 1 5\n''') == '2\\n5 5', \"Test #1.2 failed.\"\nassert solution('''3\n5 1 4\n''') == '2\\n5 5', \"Test #1.3 failed.\"\nassert solution('''7\n2 2 3 2 1 2 2\n''') == '7\\n1 2 2 2 2 3 2', \"Test #1.4 failed.\"\n\nprint(\"\\n*** ALL TESTS PASSED. HOP ALONG NOW! ***\\n\")"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5) == 5\nassert solution(5) == 5\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1') == '5\\n2 1 1 2 3'\nassert solution('5\\n3 7 5 1 5') == '2\\n5 5'\nassert solution('3\\n5 1 4') == '2\\n4 5'\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 2 1\") == '5\\n2 1 1 2 3'\nassert solution(\"5\\n3 7 5 1 5\") == '2\\n5 5'\nassert solution(\"3\\n5 1 4\") == '2\\n4 5'\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1 4\\n') == '2 1 1 2 3'\nassert solution('7 1 4\\n') == '2 1 1 2 2 2 3'"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1') == '5\\n2 1 1 2 3'\nassert solution('5\\n3 7 5 1 5') == '2\\n5 5'\nassert solution('3\\n5 1 4') == '2\\n4 5'\nassert solution('7\\n2 2 3 2 1 2 2') == '7\\n1 2 2 2 2 3 2'\nassert solution('5\\n3 7 5 1 5') == '2\\n5 5'\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"4 21\n10 8\n7 4\n3 1\n5 4\"\"\"\n) == '2'\nassert solution(\n    \"\"\"4 16\n10 8\n7 4\n3 1\n5 4\"\"\"\n) == '-1'\nassert solution(\n    \"\"\"4 15\n10 8\n7 4\n3 1\n5 4\"\"\"\n) == '1'\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\"\nassert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\""
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == '2'\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == '-1'\n\"\"\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 21\\n10 8\\n7 4\\n3 1\\n5 4') == '2'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '-1'"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 8\\n7 4\\n3 1\\n5 4\") == '2'\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == '-1'\nassert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == '2'\n\"\"\"\n\n_, m = map(int, input().split())\narr = []\nfor _ in range(int(input())):\n    arr.append([int(i) for i in input().split()])\n\narr.sort(key=lambda x: x[1], reverse=True)\n\ncnt = 0\ncap = 0\nfor x, y in arr:\n    if cap + y > m:\n        break\n    else:\n        cap += y\n        cnt += 1\n\nprint(cnt if cap + arr[-1][1] <= m else -1)\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 21\\n10 8\\n7 4\\n3 1\\n5 4') == '2'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '-1'\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 21\\n10 8\\n7 4\\n3 1\\n5 4') == '2'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '-1'\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\n\"\"\"\n\nn, m = [int(i) for i in input().split(' ')]\ns = [0 for i in range(n)]\nfor i in range(n):\n    a, b = [int(i) for i in input().split(' ')]\n    s[i] = a\n    if a > m:\n        s[i] = b\n    else:\n        s[i] = m\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == '2'\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == '-1'\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == '2'\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 5 3\\n6 1 1\\n6 6 1') == 'tleelte'\nassert solution('7 5 3\\n6 1 1\\n6 6 1') == 'qwerty'\nassert solution('7 5 3\\n6 1 1\\n6 6 1') == 'vvvvvv'\nassert solution('7 5 3\\n6 1 1\\n6 6 1') == 'abcde'\n\n'''"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 5 3\\n6 1 1\\n6 6 1\") == \"tleelte\"\nassert solution(\"7 5 3\\n6 1 1\\n6 6 1\") == \"qwerty\"\nassert solution(\"7 5 3\\n6 6 1\") == \"vvvvvv\"\nassert solution(\"7 5 3\\n5 2 2\") == \"abcde\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 5 3') == 'tleel'\n\"\"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\") == \"tleelte\\nqwerty\\nvvvvvv\\nabcde\"\n\"\"\"\nimport io\nimport os\nimport sys\nfrom collections import deque\nimport threading\nfrom functools import reduce\nfrom itertools import combinations"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5 3\") == \"tleel\"\n\"\"\"\n\nt = int(input())"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n\"\"\""
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n\n\nimport math\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n\"\"\"\n\nimport os\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n\n\"\"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 5 3') == 'tleelte'\nassert solution('6 1 1') == 'qwerty'\nassert solution('6 6 1') == 'vvvvvv'\nassert solution('5 2 2') == 'abcde'\n\n\n-----Hints-----\n\nThe answer can be constructed by concatenating as many parts as needed to meet the requirements. To find a solution, the number of parts is enough.\n\nCan you sort the values of length $a$ and check the number of distinct values in each part?\n\nCan you use hashmaps to solve this problem?\n\n\n-----Solution-----\n\n\"\"\""
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == '0'\nassert solution('2 3 6') == '4'\nassert solution('4 3 1') == '5'\nassert solution('5 3 5') == '10'\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n\n\"\"\"\n\nN, X, T = map(int, input().split())\n\nstart = N // X\ntime = X * start\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n\"\"\""
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20 12 6') == '12'\n\"\"\""
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20 12 6') == '12'\n\"\"\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 12 6\") == 12\n\"\"\"\n\n\nimport math\n\nN, X, T = [int(i) for i in stdin.readline().split(' ')]\n\nresult = math.ceil(N / (X - T)) * (X - T) + T * (N - N // (X - T))\n\nprint(result)\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('20 12 6') == '12'\n\"\"\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 6 4') == '4'\nassert solution('1 1 1') == '3'\nassert solution('1 1 10') == '10'\nassert solution('2 2 2') == '0'\nassert solution('1 1 1') == '3'\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 12 6\") == \"12\"\nassert solution(\"20 12 6\") == \"12\"\nassert solution(\"20 12 6\") == \"12\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('20 12 6') == '12'\nassert solution('20 12 6') == '12'\nassert solution('100 2 5') == '50'\nassert solution('1 0 1') == '0'\nassert solution('1 1 1') == '0'\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n3\\n2\\n1\\n1\\n') == '3'\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str("
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 0\nassert solution('123') == 3\nassert solution('123456789') == 4\n\n'''\n\nimport sys"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\n') == '2'\nassert solution('3\\n') == '1'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n3\\n5\\n4\\n1\\n5\\n4') == '2'\nassert solution('5\\n3\\n5\\n4\\n1') == '1'\nassert solution('7\\n7\\n7\\n7\\n7\\n7\\n7\\n7') == '0'\nassert solution('8\\n8\\n8\\n8\\n8\\n8\\n8\\n8') == '1'\nassert solution('7\\n7\\n7\\n7\\n7\\n7\\n7\\n7') == '0'\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\") == 2\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == '2'\nassert solution('10') == '3'\nassert solution('8') == '2'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == output()\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('10') == '3'\nassert solution('10\\n5') == '4'\nassert solution('10\\n5\\n2') == '5'\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8\\n') == '2'\nassert solution('7\\n') == '2'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == 3\nassert solution(\"3 2\") == 2\nassert solution(\"1 2\") == 1\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3\\n') == '3'\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3\\n') == '3'\nassert solution('2 3\\n') == '4'\nassert solution('3 3\\n') == '4'\nassert solution('100 4\\n') == '100'\nassert solution('0 0\\n') == '0'\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3') == '3'\nprint(solution(stdin=input()))\n\"\"\"\n\n\n\n\"\"\"\nBINARY SEARCH\n\nPROBLEM: Given an array of integers, find the index of the first occurrence of a given number in the array.\n\n-----Constraints-----\n - All values in input are integers.\n - 0 \\leq A[i] \\leq 10^9\n - 0 \\leq B \\leq 10^9\n - 1 \\leq C \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n3\n10 20 30 30 40 50\n40\n\n-----Output-----\nPrint the index of the first occurrence of B in the array.\n\n-----Sample Input-----\n3\n10 20 30 30 40 50\n40\n\n-----Sample Output-----\n1\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given a string s, find the longest palindromic substring in s.\n\n-----Constraints-----\n - The string s consists of only uppercase and lowercase English letters.\n - 1 \\leq s.length \\leq 3000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nHELLEHOLLEHOLLE\n\n-----Output-----\nPrint the longest palindromic substring in s.\n\n-----Sample Input-----\nHELLEHOLLEHOLLE\n\n-----Sample Output-----\nHELLO\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given an array of integers, find the pair of adjacent elements that has the largest product and return that product.\n\n-----Constraints-----\n - 1 \\leq A[i] \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n5\n5 4 3 2 3\n\n-----Output-----\nPrint the largest product possible.\n\n-----Sample Input-----\n5\n5 4 3 2 3\n\n-----Sample Output-----\n20\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given a list of numbers, find the length of the longest increasing subsequence in the given list of numbers.\n\n-----Constraints-----\n - 1 \\leq A[i] \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 3 5 2 4 6\n\n-----Output-----\nPrint the length of the longest increasing subsequence.\n\n-----Sample Input-----\n1 3 5 2 4 6\n\n-----Sample Output-----\n4\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given an array of numbers, find the length of the longest increasing subsequence in the given array of numbers.\n\n-----Constraints-----\n - 1 \\leq A[i] \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 3 5 2 4 6\n\n-----Output-----\nPrint the length of the longest increasing subsequence.\n\n-----Sample Input-----\n1 3 5 2 4 6\n\n-----Sample Output-----\n4\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given a list of numbers, find the length of the longest increasing subsequence in the given list of numbers.\n\n-----Constraints-----\n - 1 \\leq A[i] \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 3 5 2 4 6\n\n-----Output-----\nPrint the length of the longest increasing subsequence.\n\n-----Sample Input-----\n1 3 5 2 4 6\n\n-----Sample Output-----\n4\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given a list of numbers, find the longest increasing subsequence in the given list of numbers.\n\n-----Constraints-----\n - 1 \\leq A[i] \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 3 5 2 4 6\n\n-----Output-----\nPrint the longest increasing subsequence.\n\n-----Sample Input-----\n1 3 5 2 4 6\n\n-----Sample Output-----\n[1, 2, 3, 4, 5, 6]\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given a list of numbers, find the longest increasing subsequence in the given list of numbers.\n\n-----Constraints-----\n - 1 \\leq A[i] \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 3 5 2 4 6\n\n-----Output-----\nPrint the longest increasing subsequence.\n\n-----Sample Input-----\n1 3 5 2 4 6\n\n-----Sample Output-----\n[1, 2, 3, 4, 5, 6]\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given a list of numbers, find the longest increasing subsequence in the given list of numbers.\n\n-----Constraints-----\n - 1 \\leq A[i] \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 3 5 2 4 6\n\n-----Output-----\nPrint the longest increasing subsequence.\n\n-----Sample Input-----\n1 3 5 2 4 6\n\n-----Sample Output-----\n[1, 2, 3, 4, 5, 6]\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given a list of numbers, find the longest increasing subsequence in the given list of numbers.\n\n-----Constraints-----\n - 1 \\leq A[i] \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 3 5 2 4 6\n\n-----Output-----\nPrint the longest increasing subsequence.\n\n-----Sample Input-----\n1 3 5 2 4 6\n\n-----Sample Output-----\n[1, 2, 3, 4, 5, 6]\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given a list of numbers, find the longest increasing subsequence in the given list of numbers.\n\n-----Constraints-----\n - 1 \\leq A[i] \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 3 5 2 4 6\n\n-----Output-----\nPrint the longest increasing subsequence.\n\n-----Sample Input-----\n1 3 5 2 4 6\n\n-----Sample Output-----\n[1, 2, 3, 4, 5, 6]\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given a list of numbers, find the longest increasing subsequence in the given list of numbers.\n\n-----Constraints-----\n - 1 \\leq A[i] \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 3 5 2 4 6\n\n-----Output-----\nPrint the longest increasing subsequence.\n\n-----Sample Input-----\n1 3 5 2 4 6\n\n-----Sample Output-----\n[1, 2, 3, 4, 5, 6]\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given a list of numbers, find the longest increasing subsequence in the given list of numbers.\n\n-----Constraints-----\n - 1 \\leq A[i] \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 3 5 2 4 6\n\n-----Output-----\nPrint the longest increasing subsequence.\n\n-----Sample Input-----\n1 3 5 2 4 6\n\n-----Sample Output-----\n[1, 2, 3, 4, 5, 6]\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given a list of numbers, find the longest increasing subsequence in the given list of numbers.\n\n-----Constraints-----\n - 1 \\leq A[i] \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n1 3 5 2 4 6\n\n-----Output-----\nPrint the longest increasing subsequence.\n\n-----Sample Input-----\n1 3 5 2 4 6\n\n-----Sample Output-----\n[1, 2, 3, 4, 5, 6]\n\"\"\"\n\n\n\n\"\"\"\nPROBLEM: Given a list of numbers, find the longest increasing subsequence in the given list of numbers.\n\n-----Constraints-----\n - 1"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3') == '3'\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3\\n') == 3\n\n\"\"\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"3\"\nassert solution(\"4 5\") == \"2\"\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"3\"\n\n-----\nWe can first make one apple pie by simmering two of the three pieces of apple. Then, we can make two more by simmering the remaining piece and three more pieces obtained by cutting the whole apple.\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n') == '0'\nassert solution('3 1\\n') == '1'\nassert solution('3 2\\n') == '2'\nassert solution('3 3\\n') == '3'\n'''"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 12\") == '16'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 12') == '16'\nassert solution('1 1') == '0'\n\"\"\"\n\na, b = map(int, input().split())\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 12') == '16'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 12\") == \"16\"\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 12\") == \"16\"\n\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 12') == '16'\nprint(solution(stdin))\n\n'''"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 12') == '16'\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 12') == '16'\nassert solution('8 12') == '0'\n\"\"\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 12\\n\") == \"16\"\nassert solution(\"4 16\\n\") == \"12\"\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 12') == '16'\nprint(solution('4 12'))\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\nassert solution(\"asdfadsf\") == \"No\"\nassert solution(\"asdfadsfz\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\n\"\"\"\n\ns, t = (input() for i in range(2))\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\nassert solution('chokudak') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\nassert solution(\"badminton\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 16\") == \"9\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 16\") == \"9\"\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 16') == '9'\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\n2 4') == 'IMPOSSIBLE'\nassert solution('8 6\\n4 7') == '5'\nassert solution('1 0\\n2 10') == 'IMPOSSIBLE'\nassert solution('2 1\\n1 2') == '3'\nassert solution('1 1\\n2 2') == '1'"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 16') == '9'\nprint(solution('2 16'))"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 16\") == \"9\"\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 16') == '9'\n\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 16\") == \"9\"\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 16') == '9'\nassert solution('5 20') == 'IMPOSSIBLE'\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == IMPOSSIBLE\n\n----------------------\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(117) == \"Yes\"\nassert solution(123) == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('117') == 'Yes'\nassert solution('4') == 'No'\n\"\"\"\n\n\"\"\"\nGiven a string of digits, you need to reverse the digits.\n\nExamples:\nInput:  \"12345\"\nOutput: \"54321\"\n\nInput:  \"456\"\nOutput: \"654\"\n\nInput:  \"91234\"\nOutput: \"4321\"\n\nInput:  \"86779\"\nOutput: \"98776\"\n\"\"\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"117\") == \"Yes\"\nprint(solution(\"117\"))\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('117') == 'Yes'\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('117') == 'Yes'\nassert solution('987') == 'No'"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == \"Yes\"\nassert solution('7') == \"Yes\"\nassert solution('4') == \"No\"\nassert solution('3') == \"No\"\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11') == 'No'\nassert solution('7') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('117') == 'Yes'\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('117') == 'Yes'\n\nassert solution('777') == 'Yes'\n\nassert solution('777') == 'Yes'\n\nassert solution('897') == 'No'\n\nassert solution('000') == 'No'"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('117') == 'Yes'\nprint(solution('117'))\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"\nfrom functools import reduce"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12') == 'Yes'\n\"\"\"\nimport sys"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\") == \"Yes\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12') == 'Yes'\n\"\"\"\nimport sys"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12\") == \"Yes\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('101') == 'Yes'\nassert solution('12') == 'Yes'\nassert solution('1234') == 'No'\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12') == 'Yes'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\""
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == output\nprint(f\"Successfully prepared function. Output is {output}.\")\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n\n\"\"\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 0 1\") == \"0 1 -1 0\"\n\"\"\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\"\n\nfrom typing import List\nimport math\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 0 0 1') == '1 1 -1 0'"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('red blue') == '2 4'\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\""
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n\nS, T = input().split()\nA, B = input().split()\n\nA, B = int(A), int(B)\n\nU = input()\n\ns1 = 0\ns2 = 0\n\nfor i in range(A):\n    if S == U:\n        s1 += 1\n    else:\n        s2 += 1\n\nfor j in range(B):\n    if T == U:\n        s1 += 1\n    else:\n        s2 += 1\n\nprint(s1, s2)"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''red blue\n3 4\nred''') == '2 4'\n\n'''\n---Problem 03: Sequence Equation---\nThe sequence of integers from 1 to n is called a sequence (or arithmetic sequence for n > 1).\n\nIn a sequence, each term after the first is found by adding the same constant to the previous term.\n\nThe constant difference between successive terms in a sequence is called the common difference.\n\nFor example, the sequence (1, 2, 3, 4, 5, 6, 7, 8, 9) has a common difference of 1.\n\nThe difference between the consecutive terms in a sequence can be determined from the following formula:\n\ndifference = (a - b) / n\n\nIf the denominator is 0, then the common difference is undefined.\n\nFor the sequence (1, 3, 5, 7, 9), the sequence of differences would be:\n\n1, 1/2, 1/3, 1/4, 1/5, 1/6, 1/7, 1/8, 1/9\n\nWrite a function common_difference(sequence) that, given the sequence of integers as input,\nreturns the common difference of that sequence.\n\n-----Constraints-----\n - sequence is a list of integers with at least two entries.\n - sequence is in non-decreasing order.\n - sequence is in the range 1 <= n <= 10^7\n\n-----Sample Input-----\n[1, 3, 5, 7, 9]\n\n-----Sample Output-----\n1.0\n\n-----Explanation-----\nThe sequence is (1, 3, 5, 7, 9)\n\nThe common difference is 1.0 since it is the average of the difference between consecutive terms.\n'''"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''red blue\n3 4\nred''') == '2 4'\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\""
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n4\nc\ncc\n\"\"\") == \"Yes\"\n\n\"\"\"\nGiven are two strings A and B of length N. Find the length of the longest string C,\nsuch that C can be obtained by concatenating A with B and B with A.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - A, B consists of lowercase English letters.\n - |A| = N\n - |B| = N\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA\nB\n\n-----Output-----\nPrint the length of C.\n\n-----Sample Input-----\n4\nd\nh\n\n-----Sample Output-----\n2\n\n\"\"\""
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abcbac') == 'No'\nassert solution('aaaaaa') == 'Yes'\nassert solution('aabaa') == 'No'\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'No'\nassert solution('abcabc') == 'Yes'\nassert solution('abcabcabc') == 'Yes'\nassert solution('abcabcdef') == 'No'\n\n\"\"\""
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abcabc') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abcabcabcabc') == 'Yes'\nassert solution('abcbac') == 'No'\nassert solution('abcabcabcbac') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\nassert solution(\"abcabcabc\") == \"Yes\"\nassert solution(\"abccba\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcabc') == 'Yes'\n\"\"\""
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input) == expected_result\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abcabc') == 'Yes'\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\n\n\"\"\"\n\nfrom sys import stdin, stdout\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 1 2\\n') == '3.000000 0'\n\"\"\"\n\nimport re\n\nimport sys\n\npattern = re.compile(r'(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)')\n\nresult = 0"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 1 2') == '3.0 0'\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 1 2\") == \"3.0 0\""
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 1 2\") == \"3.000000 0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\nassert solution(\"2 3 2 1\") == \"3.000000 0\"\nassert solution(\"5 2 3 4\") == \"10.000000 1\"\nassert solution(\"5 2 3 5\") == \"10.000000 1\"\nassert solution(\"2 3 3 1\") == \"3.000000 1\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 1 2\") == \"3.000000 0\"\n\"\"\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n    2 3 1 2\n    \"\"\"\n) == \"3.000000 0\"\n\n\"\"\"\nInput:\n1 4 1 2\nOutput:\n0\nExplanation:\nNo line can be drawn which cuts the area into two parts of equal or smaller area.\n\nInput:\n3 3 1 1\nOutput:\n1.000000 1\nExplanation:\nDrawing a line x = 0 will cut the area into two parts of equal area.\nDrawing a line x = 2 will cut the area into two parts of equal area.\nDrawing a line x = 1 will cut the area into two parts of unequal area.\nThere is no way to cut the area into two parts of equal or smaller area.\n\nInput:\n6 7 1 1\nOutput:\n0.500000 1\nExplanation:\nDrawing a line x = 1 will cut the area into two parts of equal area.\nDrawing a line x = 3 will cut the area into two parts of equal area.\nDrawing a line x = 2 will cut the area into two parts of unequal area.\nThere is no way to cut the area into two parts of equal or smaller area.\n\"\"\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 1 2\") == \"3.0 0\"\n\"\"\""
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 1 2\") == \"3.000000 0\"\nassert solution(\"4 2 2 2\") == \"2.000000 2\"\nassert solution(\"10 10 10 10\") == \"0.000000 1\"\nassert solution(\"0 0 1 1\") == \"0.000000 1\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 G W P Y W') == 'Four'\nassert solution('4 W G Y P Y W') == 'Four'\n\"\"\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 G Y P Y W') == 'Four'\nassert solution('3 G W Y P Y W') == 'Four'\nassert solution('3 G W Y P Y P') == 'Three'\n\n\"\"\"\nimport unittest\nimport sys\nimport collections\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\nG W Y P Y W\") == \"Four\"\n\"\"\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 W P G Y G W P\") == \"Four\"\nassert solution(\"8 G W P G Y G G W W P W P P W\") == \"Eight\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 G Y P W\\nG P G G') == \"Four\"\nassert solution('1 G\\nG G G') == \"Three\"\nassert solution('1 W\\nW W W') == \"Four\"\nassert solution('2 W G\\nG G G') == \"Four\"\nassert solution('2 W G\\nG G G\\nG G G') == \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 G W P Y W') == 'Four'\nassert solution('4 G W Y P Y W') == 'Four'\nassert solution('3 P G W Y W') == 'Four'\nassert solution('4 P G W Y Y') == 'Four'\nassert solution('3 P G W P Y W') == 'Four'\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\nG W Y P Y W') == 'Four'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\nP\\nW\\nG\") == \"Three\"\nassert solution(\"4\\nP\\nW\\nG\\nY\") == \"Four\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6GWWYPPYYW') == 'Four'\nassert solution('2YWPG') == 'Three'\nassert solution('3YYGW') == 'Four'\nassert solution('6YYG') == 'Four'\nassert solution('3GYY') == 'Three'\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6\nG W Y P Y W''') == 'Four'\nassert solution('''6\nW G Y P Y W''') == 'Four'\nassert solution('''6\nP W G Y P W''') == 'Three'\nassert solution('''6\nW P Y G G Y''') == 'Three'\nassert solution('''6\nW P G W G Y''') == 'Three'\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 3 2\\n2 3 1 3 4 2') == 6\nassert solution('5 3 3\\n1 2 4 2 3') == 2\nassert solution('5 5 6\\n1 2 6 10 3') == 2\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3 2\\n2 3 1 3 4 2\") == 6\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3 2\\n2 3 1 3 4 2\") == 6\nassert solution(\"5 3 3\\n1 2 4 2 3\") == 2\n\n\"\"\"\n\nn, x, y = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\n\ncnt = 0\nfor i in range(len(a)):\n    if a[i] >= x:\n        a[i] -= x\n        if a[i] >= y:\n            a[i] += y\n            cnt += 1\n        else:\n            a[i] = 0\nprint(cnt)\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 3 2\\n2 3 1 3 4 2') == '6'\nassert solution('5 3 3\\n1 2 4 2 3') == '2'\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\n\"\"\""
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output\n\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 3\\n1 2 6 10 3\\n\") == 2\nassert solution(\"6 3 2\\n2 3 1 3 4 2\\n\") == 6\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == '1'\nassert solution(test_input_2) == '3'\nassert solution(test_input_3) == '1'\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 3\\n1 2 6 10 3\\n') == 2\n\"\"\"\n\nimport sys\n\nDEBUG = False\ndata = sys.stdin.read().strip().split()\nn, x, y = [int(i) for i in data]\na = [int(i) for i in sys.stdin.read().strip().split()]\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 2\") == \"6\"\nassert solution(\"5 3 3\") == \"2\"\n\"\"\"\n\nfrom itertools import accumulate\nfrom functools import partial\n\nn, x, y = map(int, input().split())\ndurabilities = list(map(int, input().split()))\n\nn_max = 0\nn_min = 0\nfor i in range(n):\n    n_max = max(n_max, durabilities[i])\n    n_min = min(n_min, durabilities[i])\n\nsum_durabilities = list(accumulate(durabilities, partial(lambda x, y: max(0, y - x))))\nsum_durabilities.append(0)\n\nans = 0\n\nfor i in range(n_min, n_max + 1):\n    for j in range(n):\n        if i == durabilities[j]:\n            for k in range(j + 1, n):\n                if sum_durabilities[k] - sum_durabilities[j] == x:\n                    ans += 1\n                    break\n\nprint(ans)\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 2 6 2\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == solution(test_input_2)\n\n\"\"\"\nfrom typing import List, Iterator\nimport unittest\n\nclass UnionFind:\n    def __init__(self, size: int) -> None:\n        self.parent = [i for i in range(size + 1)]\n        self.size = [1] * (size + 1)\n    def find(self, i: int) -> int:\n        if self.parent[i] == i:\n            return i\n        self.parent[i] = self.find(self.parent[i])\n        return self.parent[i]\n    def union(self, x: int, y: int) -> None:\n        x = self.find(x)\n        y = self.find(y)\n        if self.size[x] < self.size[y]:\n            x, y = y, x\n        self.parent[y] = x\n        self.size[x] += self.size[y]\n    def same_check(self, x: int, y: int) -> bool:\n        return self.find(x) == self.find(y)\n\nclass Solution:\n    def __init__(self, n: int, m: int, a: List[int], b: List[int]) -> None:\n        self.n = n\n        self.a = a\n        self.b = b\n    def good_pairs(self) -> int:\n        uf = UnionFind(self.n)\n        ans = 0\n        for i in range(self.n):\n            for j in range(i + 1, self.n):\n                if self.a[i] + self.a[j] > self.b[i] + self.b[j]:\n                    if not uf.same_check(i, j):\n                        uf.union(i, j)\n                        ans += 1\n        return ans\n\nclass TestSolution(unittest.TestCase):\n    def test_equal(self):\n        self.assertEqual(Solution(5, [4, 8, 2, 6, 2], [4, 5, 4, 1, 3]).good_pairs(), 7)"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8 2 6 2\\n4 5 4 1 3\") == \"7\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_stdin_1) == test_stdout_1\n\"\"\"\n\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 8 2 6 2\\n4 5 4 1 3') == '7'\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8 2 6 2\\n4 5 4 1 3') == '7'\nassert solution('4 1 3 2 4\\n1 3 2 4') == '0'\nassert solution('4 1 3 2 4\\n1 3 2 5') == '1'\nassert solution('4 1 3 2 4\\n1 3 2 4\\n1 3 2 5') == '1'\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8 2 6 2\\n4 5 4 1 3\") == '7'\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n4 8 2 6 2\\n4 5 4 1 3\") == 7\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8 2 6 2\\n4 5 4 1 3') == 7\n\"\"\""
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n4 8 2 6 2\\n4 5 4 1 3\") == 7\nassert solution(\"4\\n1 3 2 4\\n1 3 2 4\") == 0\n\nprint(solution(stdin))\n\n\"\"\"\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution(\n            \"5\\n4 8 2 6 2\\n4 5 4 1 3\"),\n            7)\n        \n    def test_2(self):\n        self.assertEqual(solution(\n            \"4\\n1 3 2 4\\n1 3 2 4\"),\n            0)\n            \n    def test_3(self):\n        self.assertEqual(solution(\n            \"3\\n1 5 2\\n2 4 1\"),\n            2)\n\n    def test_4(self):\n        self."
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == '1 1 3 5 9'\n'''"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2\") == \"1 1\"\nassert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\"\n\n\nimport sys\nimport numpy as np\n\nN = int(sys.stdin.readline())\narr = np.array(list(map(int, sys.stdin.readline().split())))\n\narr[arr == 1] = 2\narr[arr == 2] = 1\narr[arr == 3] = 4\narr[arr == 4] = 3\narr[arr == 5] = 6\narr[arr == 6] = 5\narr[arr == 7] = 9\narr[arr == 8] = 10\narr[arr == 9] = 7\narr[arr == 10] = 8\n\nprint(*arr)\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1 2 4 5 10') == '1 1 3 5 9'\nassert solution('10 10000 50605065 1 5 89 5 999999999 60506056 1000000000') == '9999 9 50605065 1 5 89 5 999999999 60506055 999999999'\n\n\"\"\""
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n3 4\") == \"1\"\nassert solution(\"1 1\\n2 3\") == \"2\"\nassert solution(\"1 2\\n3 4\\n5 6\") == \"1\"\nassert solution(\"1 2\\n3 4\\n5 6\\n7 8\") == \"2\"\nassert solution(\"1 2\\n3 4\\n5 6\\n7 8\\n9 10\") == \"1\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 4\n1 2\n3 4\n5 4\n3 5''') == '1'\nassert solution('''17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6''') == '2'''\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\""
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == '1'\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == '2'"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 17\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\") == '2'\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\\n\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\\n\") == \"2\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n5 4\n1 2\n3 4\n5 4\n3 5\n''') == '1'\n\nassert solution('''\n17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6\n''') == '2'\n\nassert solution('''\n7 4\n1 2\n1 3\n5 6\n''') == '0'\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\\n\") == '1'\nassert solution(\"5 5\\n1 2\\n3 4\\n5 4\\n3 5\\n\") == '2'\nassert solution(\"5 6\\n1 2\\n3 4\\n5 4\\n3 5\\n\") == '2'\nassert solution(\"5 7\\n1 2\\n3 4\\n5 4\\n3 5\\n\") == '2'\n\"\"\""
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\\n\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"4\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\") == \"1\"\n\n---\n\nThe idea is to traverse the tree with BFS. At every step, we find all uncolored vertices with red edges and all uncolored vertices with blue edges, and remove them from the graph. For each step, we count how many uncolored vertices are left, and we will get the answer at the last step.\n\nFor example, if we have 5 vertices:\n\n1 0 0 0 2\n1 2\n2 3\n2 4\n2 5\n\nWe can remove 1 edge, then we will have 4 edges:\n\n1 1 2\n2 3\n2 4\n2 5\n\nWe can remove 2 edges, then we will have 3 edges:\n\n1 1 2\n1 3\n2 4\n2 5\n\nWe can remove 3 edges, then we will have 2 edges:\n\n1 1 2\n1 3\n3 4\n2 5\n\nWe can remove 4 edges, then we will have 1 edge:\n\n1 1 2\n3 4\n2 5\n\nSo, if we have 5 vertices, the number of nice edges is 1 + 2 + 3 + 4 + 1 = 10.\n\nThe complexity is $O(n \\cdot e)$, where $n$ is the number of vertices and $e$ is the number of edges.\n\nComplexity Analysis:\n\nTime complexity: O(n \\cdot e).\n\nSpace complexity: O(n + e).\n\n\"\"\"\n\nfrom collections import deque\nfrom typing import List\n\nclass Node:\n    def __init__(self, val: int, left: 'Node' = None, right: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5\n2 0 0 1 2\n1 2\n2 3\n2 4\n2 5\n\"\"\") == '1'\n\nassert solution(\"\"\"\n5\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n\"\"\") == '4'\n\nassert solution(\"\"\"\n3\n1 1 2\n2 3\n1 3\n\"\"\") == '0'\n\nassert solution(\"\"\"\n3\n1 1 2\n2 3\n1 3\n\"\"\") == '0'\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 1 2 3 0') == '4'\n\nassert solution('5 1 2 0 2 3') == '3'\n\nassert solution('5 1 2 3 3') == '0'\n\nassert solution('5 1 2 3 3') == '0'"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == '1'\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == '4'\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == '0'\n\nprint(solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\"))\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\\n\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\\n\") == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\\n') == '1'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '4'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '4'\n\"\"\""
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"gf\") == \"gf\"\n\nassert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('az') == 'bc'\nassert solution('bf') == 'bf'\nassert solution('nijfvj') == 'qoztvz'\nassert solution('tvqhwp') == 'tvqhwp'\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n3\nb\na\n\"\"\") == \"b\"\n\nassert solution(\n\"\"\"\n2\naz\nbf\n\"\"\") == \"bc\"\n\nassert solution(\n\"\"\"\n2\nab\nac\n\"\"\") == \"ab\"\n\nassert solution(\n\"\"\"\n2\naz\nac\n\"\"\") == \"ab\"\n\nassert solution(\n\"\"\"\n2\ns\na\n\"\"\") == \"s\""
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"ab\") == \"ab\"\nassert solution(\"cd\") == \"cd\"\nassert solution(\"ef\") == \"ef\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abefg\") == \"abefg\"\nassert solution(\"bcde\") == \"bcde\"\nassert solution(\"cdef\") == \"cdef\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"sabx\") == \"abx\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"bc\") == \"bc\"\nassert solution(\"abcde\") == \"abde\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\n\"\"\"\n\n\nimport math\n\nk = int(stdin.readline().strip())\ns = stdin.readline().strip()\nt = stdin.readline().strip()\n\ns_list = []\nt_list = []\n\nfor i in range(k):\n    s_list.append(s[i])\n    t_list.append(t[i])\n\nwhile len(s_list) > 0 and len(t_list) > 0:\n    if s_list[0] < t_list[0]:\n        s_list.append(s_list.pop(0))\n        t_list.append(t_list.pop(0))\n    else:\n        s_list.append(t_list.pop(0))\n        t_list.append(s_list.pop(0))"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"ab\") == \"ab\"\nassert solution(\"nijfvj\") == \"qoztvz\"\n\"\"\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\nassert solution(\"nijfvj\") == \"tvqhwp\"\nassert solution(\"abcdefghijk\") == \"zqxwv\"\nassert solution(\"qwert\") == \"yuiop\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('afogk') == 'alvuw'\nassert solution('asdji') == 'qoztvz'\nassert solution('vhgsbqasd') == 'hgvuw'\n\nassert solution('nijfvj') == 'qoztvz'\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\n\n\"\"\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\n\"\"\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n15 13 15 15 12') == 'YES\\n1 2 5'\nassert solution('5 4\\n20 10 40 30') == 'YES\\n1 2 3 4'\nassert solution('4 4\\n20 10 40 30') == 'NO'\nassert solution('5 3\\n15 15 15 15 12') == 'NO'\nassert solution('5 3\\n15 15 15 15 12') == 'NO'\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"5 3\n15 13 15 15 12\n\"\"\") == 'YES\\n1 2 5'\nassert solution(\"\"\"5 4\n15 13 15 15 12\n\"\"\") == 'NO'\nassert solution(\"\"\"4 4\n20 10 40 30\n\"\"\") == 'YES\\n1 2 3 4'\n\n\"\"\"\n\n\n\"\"\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n15 13 15 15 12') == 'YES\\n1 2 5'\nassert solution('5 4\\n15 13 15 15 12') == 'NO'\nassert solution('4 4\\n20 10 40 30') == 'YES\\n1 2 3 4'\n\"\"\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n\"\"\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n20 10 40 30\\n\") == \"YES\\n1 2 3 4\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\n\n\"\"\"\n\nn, k = map(int, input().split())\n\narr = list(map(int, input().split()))\n\ncheck = set()\n\nfor i in range(k):\n    min_value = arr[i]\n    min_idx = i\n    for j in range(i, n):\n        if arr[j] < min_value and j not in check:\n            min_value = arr[j]\n            min_idx = j\n    check.add(min_idx)\n    \n    if len(check) == k:\n        break"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(TEST1) == 'YES\\n1 2 5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 0 1 2 3 4 5 6 7 8\") == \"YES\\n0 1 0 0 0 1 0 1 0\"\nassert solution(\"7 4 9 3 5 8 2 6\") == \"YES\\n0 1 0 1 0 1 1 1\"\nassert solution(\"6 4 3 2 1 9 5\") == \"NO\"\nassert solution(\"5 1 3 6 8 2 9 0 10\") == \"NO\"\nassert solution(\"10 9 8 7 6 5 4 3 2 1 0\") == \"YES\\n0 0 0 0 0 0 0 1 0 1 0\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'NO'\nassert solution('10\\n5 1 3 6 8 2 9 0 10') == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution('7\\n5 1 3 6 8 2 9 0 10') == 'NO'\n\"\"\""
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4 5\\n5 6 8 7 2') == 'NO'\nassert solution('0 1 2 3\\n4 5 6 7') == 'YES\\n0 0 1 1 0 1 1 1 1 1'\nassert solution('0 1 2 3\\n4 5 6 7\\n7 6 5 4') == 'YES\\n0 0 1 0 1 0 0 1 1 1'\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"9\n5 1 3 6 8 2 9 0 10\"\"\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"\"\"5\n1 2 4 0 2\"\"\") == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 3 4') == 'YES\\n1 0 1 1 0'\nassert solution('4\\n5 3 1 2 0') == 'NO'\nassert solution('4\\n1 2 3 4') == 'YES\\n1 0 1 1 0'\nassert solution('5\\n1 2 3 4 0') == 'YES\\n1 1 1 1 0 0'\nassert solution('4\\n1 2 3 4') == 'YES\\n1 0 1 1 0'\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"1\\n1\") == \"YES\\n1 0\"\nassert solution(\"1\\n2\") == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 3 2') == 'YES\\n1 1 1 1 0'\nassert solution('9 8 7 6 5 4 3 2 1') == 'YES\\n0 0 0 1 0 1 1 0 1'\nassert solution('8 9 4 7 3 6 5 2 1') == 'YES\\n1 0 1 1 1 1 0 1 0'\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 4 0 2\") == \"YES\\n1 0 0 0 1 0 1 0 1\"\nassert solution(\"5\\n1 2 3 4 5\") == \"YES\\n0 1 1 1 1 0 0 0 1\"\n\"\"\""
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"7\\n1 2 3 4 5 6 7\") == \"YES\\n1 1 1 1 1 1 1 1\"\nassert solution(\"7\\n10 9 8 7 6 5 4 3 2 1 0\") == \"YES\\n0 1 0 0 0 1 0 1 0\"\nassert solution(\"9\\n1 2 3 4 5 6 7 8 9\") == \"NO\"\nassert solution(\"5\\n3 1 4 5 2\") == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 3 5') == 'NO'\nassert solution('7 1 5 6 8 2 0 3 4') == 'YES\\n0 1 0 0 1 0 1 0 1'\nassert solution('10 3 4 9 2 8 7 6 5 0 1') == 'NO'\n\"\"\""
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == \"2\"\nassert solution(\"10 2 3 7\") == \"3\"\nassert solution(\"100 51 51 51\") == \"0\"\nassert solution(\"1234 1 100 199\") == \"1134\"\nassert solution(\"1000000000 1 1 1000000000\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n\n\"\"\"\n\nt = int(stdin.readline())\nwhile t > 0:\n    L, v, l, r = map(int, stdin.readline().split())\n    q = int((r - l + 1) / v)\n    print(q)\n    t -= 1"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 3 7\") == \"3\"\nassert solution(\"100 51 51 51\") == \"0\"\nassert solution(\"1234 1 100 199\") == \"1134\"\nassert solution(\"1000000000 1 1 1000000000\") == \"0\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\nprint(\"The test for the solution is done.\")"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000') == '3\\n0\\n1134\\n0'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nres = []\nfor i in range(n):\n    l, v, lt, rt = [int(i) for i in sys.stdin.readline().split()]\n    ls = l // v * v\n    rs = rt // v * v\n    if ls < lt <= ls + v - 1 and rs >= lt:\n        res.append(0)\n    else:\n        res.append(rs - lt + 1)\nsys.stdout.write('\\n'.join(map(str, res)))\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000') == '3\\n0\\n1134\\n0'\n\"\"\"\n\n\"\"\"\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == '3\\n0\\n1134\\n0'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n\n\"\"\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\nprint(\"\u2714\")\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\n\"\"\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == 3\n\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\n\n\"\"\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\n\n\"\"\""
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '3'\nassert solution('2') == '1'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\nassert solution('16') == '238980386039604160'\n\n\"\"\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\nprint('The local tests are done. Now use solution() to get the real solution to the problem.')\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\n\nprint(solution(\"20\"))"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\n\"\"\""
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"u\") == \"d\"\nassert solution(\"abccbacb\") == \"acdb\"\nassert solution(\"abccbacb\") == \"acdb\"\nassert solution(\"aaaaa\") == \"\"\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\n\"\"\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('u') == ''\n\n----\n'''\n\ns, k = map(int, input().split())\nstring = input()\n\nfor i in range(k):\n    string = string[1:]\n    if string == '':\n        break\n    if string.find('a')!= -1:\n        string = string[:string.find('a')]\n    elif string.find('b')!= -1:\n        string = string[:string.find('b')]\n    elif string.find('c')!= -1:\n        string = string[:string.find('c')]\n    elif string.find('d')!= -1:\n        string = string[:string.find('d')]\n    elif string.find('e')!= -1:\n        string = string[:string.find('e')]\n    elif string.find('f')!= -1:\n        string = string[:string.find('f')]\n    elif string.find('g')!= -1:\n        string = string[:string.find('g')]\n    elif string.find('h')!= -1:\n        string = string[:string.find('h')]\n    elif string.find('i')!= -1:\n        string = string[:string.find('i')]\n    elif string.find('j')!= -1:\n        string = string[:string.find('j')]\n    elif string.find('k')!= -1:\n        string = string[:string.find('k')]\n    elif string.find('l')!= -1:\n        string = string[:string.find('l')]\n    elif string.find('m')!= -1:\n        string = string[:string.find('m')]\n    elif string.find('n')!= -1:\n        string = string[:string.find('n')]\n    elif string.find('o')!= -1:\n        string = string[:string.find('o')]\n    elif string.find('p')!= -1:\n        string = string[:string.find('p')]\n    elif string.find('q')!= -1:\n        string = string[:string.find('q')]\n    elif string.find('r')!= -1:\n        string = string[:string.find('r')]\n    elif string.find('s')!= -1:\n        string = string[:string.find('s')]\n    elif string.find('t')!= -1:\n        string = string[:string.find('t')]\n    elif string.find('u')!= -1:\n        string = string[:string.find('u')]\n    elif string.find('v')!= -1:\n        string = string[:string.find('v')]\n    elif string.find('w')!= -1:\n        string = string[:string.find('w')]\n    elif string.find('x')!= -1:\n        string = string[:string.find('x')]\n    elif string.find('y')!= -1:\n        string = string[:string.find('y')]\n    elif string.find('z')!= -1:\n        string = string[:string.find('z')]"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\n\"\"\"\nimport sys"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"u\") == \"\"\n\"\"\"\n\n\nn, k = [int(i) for i in input().split(' ')]\ns = input()\nwhile k > 0:\n    if s[0] == 'a':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'b':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'c':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'd':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'e':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'f':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'g':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'h':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'i':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'j':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'k':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'l':\n        s = s[1:]\n        k -= 1\n    elif s[0] =='m':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'n':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'o':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'p':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'q':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'r':\n        s = s[1:]\n        k -= 1\n    elif s[0] =='s':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 't':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'u':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'v':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'w':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'x':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'y':\n        s = s[1:]\n        k -= 1\n    elif s[0] == 'z':\n        s = s[1:]\n        k -= 1\n    else:\n        break\n\nprint(s)\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n\n\"\"\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('u') == 'f'\nassert solution('abc') == 'abc'\nassert solution('abcba') == 'abc'\nassert solution('ab') == ''\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n\"\"\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"u\") == \"\"\n\"\"\""
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == \"20\"\nprint(solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\"))\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == \"20\"\n\n\"\"\""
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == \"20\"\n\"\"\""
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n\n\"\"\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4') == '1'\nassert solution('3 4\\n1 2') == '1'\nassert solution('1 2\\n3 4\\n3 2') == '3'\nassert solution('1 2\\n3 4\\n1 2\\n1 2') == '4'\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\") == \"8\"\n\"\"\""
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n''') == '8'\nassert solution('''5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n''') == '20'\n\nassert solution('''5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n''') == '20'\nassert solution('''5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n''') == '20'\nassert solution('''5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n''') == '20'"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\nassert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"20\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n\n\"\"\""
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n.*\\n.*\\n.*\\n') == '3'\nassert solution('5 5\\n.*\\n.*\\n.*\\n.*\\n') == '-1'\nassert solution('3 3\\n.*\\n.*\\n.*\\n') == '-1'\nassert solution('3 3\\n.*\\n.*\\n.*\\n') == '-1'\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n.*\\n.*\\n.*') == '2 2 1'\nassert solution('5 5\\n.*.*\\n.*.*\\n.*.*\\n.*.*') == '3 3 1'\nassert solution('3 3\\n**\\n.*\\n.*') == '-1'\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n') == '3'\nassert solution('.*.*\\n.*.\\n.*.*\\n') == '-1'\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\".*...\\n.*...\\n..****\\n...**.\\n....*.\") == \"3\"\nassert solution(\".*.*.*.*.\\n*.*.*.*.\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\") == \"3\"\nassert solution(\".*...\\n.*...\\n..****\\n...*.*\\n...*.*\\n.....\\n.*.*.*\\n*.*.*.*\\n*.*.*.*\\n*.*.*.*\\n*.*.*.*\\n*.*.*.*\\n*.*.*.*\") == \"6\"\nassert solution(\".*.*.*.*.\\n.*.*.*.*.\\n*.*.*.*.*\\n.*.*.*.*.\\n.*.*.*.*.\\n*.*.*.*.*\\n.*.*.*.*.\\n*.*.*.*.*\\n.*.*.*.*.\\n*.*.*.*.*\\n.*.*.*.*.\") == \"11\"\nassert solution(\".*.*.*.*.\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n*.*.*.*.*\\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"\nassert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"3\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"3\""
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\".*...\\n****.\\n.*...\\n.*...\") == 3\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\") == 3\nassert solution(\".*...\\n****.\\n.*...\\n.*...\") == -1\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\") == -1\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\") == -1\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\".*...\\n.*...\\n..****\\n...**.*\\n....*..\\n.*..**\\n**....\\n.*...*\\n****...\\n....*..\\n..*.*.\\n.*.*.*\\n.*.*.*\") == \"3\\n2 2 1\\n3 3 1\"\nassert solution(\".*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\n.*.*.*.*\\"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\\n\") == \"-1\"\nassert solution(\"3 3\\n.*.\\n.*.\\n*.*\\n\") == \"-1\"\n\n\"\"\"\n\nfrom collections import deque\nfrom itertools import product\nfrom typing import Tuple, List\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\\n3 5 1\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"-1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"\n\n\"\"\"\n\n\"\"\"\nThe plan:\nThis is a similar problem to \n\nSudoku https://www.geeksforgeeks.org/sudoku-backtracking-7/\n\nWe represent the grid as a matrix (2D array).\nWe will loop over all the rows, looping over each column and then over the cells.\n\nIt is easy to check if a row, column or cell is full, by iterating over all the values and seeing if there is a duplicate.\n\nThis is the first step of the algorithm. Then we know that the first cell is free.\n\nWe can also quickly check if a column or cell is free by looking at the number of zeros in that column or row.\n\nNow it's time for the \"backtracking\". We should look at the first empty cell in the grid. If we're at the end of the grid, we're done, and we can return the grid.\n\nWe can check if the cell is free by looking at the values of its row and column.\nIf we're at the end of the grid, we can return the grid. Otherwise, we can try out all possibilities for the next cell. If we don't find a valid combination, we can try out the next empty cell.\n\nWe know that the next cell must be in the same row as the previous one. So we know that if the previous cell is already filled, the next cell must also be filled in the same row.\n\nWe know that the next cell must be in the same column as the previous one. So we know that if the previous cell is already filled, the next cell must also be filled in the same column.\n\nWe can backtrack in the next cell.\n\nWe can try out all possibilities for the next cell, or we can try out a new possibility for the next row or next column.\n\nWe can check if the next cell is free by looking at its value.\n\nIf it is free, we can try out all possibilities for it.\n\nIf it is not free, then we know that we've come to the end of the grid. We can return the grid.\n\nIf there are no possible moves (no valid cell is free), then we have to backtrack to the previous cell and try a new one.\n\nThe algorithm ends if there is a solution.\n\n\"\"\"\n\nclass Solution:\n    def solve_sudoku(self, input):\n        if not input:\n            return input\n        \n        grid = self.parse(input)\n        return self.solve(grid)\n    \n    def parse(self, input):\n        grid = []\n        for i in range(len(input)):\n            row = []\n            for j in range(len(input[0])):\n                if input[i][j] == '*':\n                    row.append(None)\n                else:\n                    row.append(int(input[i][j]))\n            grid.append(row)\n        return grid\n    \n    def solve(self, grid):\n        if not grid:\n            return grid\n        \n        row, col = self.find_next_empty(grid)\n        if row == -1:\n            return grid\n        for i in range(1, 10):\n            if self.is_valid(grid, row, col, i):\n                grid[row][col] = i\n                if self.solve(grid):\n                    return grid\n                grid[row][col] = 0\n        return False\n    \n    def is_valid(self, grid, row, col, value):\n        for i in range(len(grid)):\n            if grid[row][i] == value:\n                return False\n            if grid[i][col] == value:\n                return False\n            if grid[3 * (row // 3) + i // 3][3 * (col // 3) + i % 3] == value:\n                return False\n        return True\n    \n    def find_next_empty(self, grid):\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == 0:\n                    return i, j\n        return -1, -1\n\nassert Solution().solve_sudoku(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"123\") == \"No\"\nassert solution(\"221\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"575\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"0\") == \"Yes\"\nassert solution(\"100\") == \"No\"\nassert solution(\"100101\") == \"No\"\nassert solution(\"101\") == \"Yes\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('575') == 'Yes'\nassert solution('975') == 'Yes'\nassert solution('97512') == 'No'\nassert solution('9975') == 'No'\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"575\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(575) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '575'\n) == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100\") == \"Yes\"\nassert solution(\"503\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"575\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('575') == 'Yes'\nassert solution('7') == 'No'\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"1 1\") == \"Draw\"\nassert solution(\"7 7\") == \"Draw\"\nassert solution(\"8 6\") == \"Bob\"\nassert solution(\"8 7\") == \"Alice\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"7 9\") == \"Bob\"\nassert solution(\"3 8\") == \"Draw\"\n\"\"\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '8 6'\n) == 'Alice'\nassert solution(\n    '3 7'\n) == 'Bob'\nassert solution(\n    '7 2'\n) == 'Bob'\n\"\"\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 6\\n') == 'Alice'\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"8 6\"\n) == \"Alice\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 6') == 'Alice'\n\"\"\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"3 2\") == \"Bob\"\nassert solution(\"1 3\") == \"Draw\"\nassert solution(\"9 6\") == \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"6 8\") == \"Bob\"\nassert solution(\"4 8\") == \"Draw\"\nassert solution(\"8 4\") == \"Alice\"\nassert solution(\"6 6\") == \"Draw\"\n\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 2') == 'Alice'\nassert solution('8 7') == 'Bob'\nassert solution('7 7') == 'Draw'\nassert solution('2 8') == 'Alice'\nassert solution('8 2') == 'Bob'\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 6') == 'Alice'\nassert solution('8 6') == 'Bob'\nassert solution('8 6') == 'Draw'\nassert solution('8 6') == 'Draw'\nassert solution('8 6') == 'Alice'\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nprint(\"The 1st solution is correct!\")\n\n---"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\n\"\"\"\n\ns = input().split(',')\nprint(*s,sep=' ')\n\nprint(s)"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n\"\"\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nassert solution(\"happy,newyear,enjoy,dolphine\") == \"happy newyear enjoy dolphine\"\n\"\"\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n\n\"\"\"\n\ns = 'happy,newyear,enjoy'\nprint(s.replace(',',''))\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n\") == \"2\\n1\"\nassert solution(\"2 2\\n1 1\\n1 1\\n\") == \"1\\n2\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2 2\n2 0\n0 0\n-1 0\n1 0''') == '2\\n1'\n\n\"\"\""
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"3 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"3 4\\n1 1\\n0 0\\n-1 0\\n1 0\") == \"1\\n2\"\nassert solution(\"2 4\\n3 2\\n0 0\\n0 0\\n-1 0\\n1 0\") == \"3\\n1\"\nassert solution(\"3 4\\n2 1\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n\"\"\"\n\nfrom math import inf\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"3 3\\n0 0\\n1 0\\n0 0\\n0 0\\n0 0\") == \"1\\n3\\n1\\n2\"\nassert solution(\"3 3\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\") == \"2\\n3\\n1\\n2\"\n\n\"\"\""
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"3 3\\n0 0\\n0 0\\n0 0\") == \"2\\n1\\n2\"\nassert solution(\"5 10\\n-1 1\\n0 1\\n1 1\\n0 1\\n0 0\\n0 0\\n0 0\\n0 0\") == \"5\\n2\\n3\\n3\\n4\\n2\\n5\"\nassert solution(\"1 10\\n-1 10\\n0 10\") == \"1\\n1\"\n\"\"\"\n\n\"\"\"\n-------SOLUTION-------\n\"\"\""
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"4 4\\n-2 -4\\n5 5\\n-10 -8\\n2 4\\n1 3\") == \"3\\n1\\n2\\n2\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(2) == 14\nprint(solution(2))\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2) == 14"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"14\"\nassert solution(\"5\") == \"41\"\n\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == 14\nassert solution('7') == 126\nassert solution('1') == 1\n\"\"\"\n\na = input()\nb = int(a)\nc = b + b**2 + b**3\nprint(c)"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n\") == \"1\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n427\\n428\\n429\\n430\\n431\\n432\\n433\\n434\\n435\\n436\\n437\\n438\\n439\\n440\\n441\\n442\\n443\\n444\\n445\\n446\\n447\\n448\\n449\\n450\\n451\\n452\\n453\\n454\\n455\\n456\\n457\\n458\\n459\\n460\\n461\\n462\\n463\\n464\\n465\\n466\\n467\\n468\\n469\\n470\\n471\\n472\\n473\\n474\\n475\\n476\\n477\\n478\\n479\\n480\\n481\\n482\\n483\\n484\\n485\\n486\\n487\\n488\\n489\\n490\\n491\\n492\\n493\\n494\\n495\\n496\\n497\\n498\\n499\\n500\\n501\\n502\\n503\\n504\\n505\\n506\\n507\\n508\\n509\\n510\\n511\\n512\\n513\\n514\\n515\\n516\\n517\\n518\\n519\\n520\\n521\\n522\\n523\\n524\\n525\\n526\\n527\\n528\\n529\\n530\\n531\\n532\\n533\\n534\\n535\\n536\\n537\\n538\\n539\\n540\\n541\\n542\\n543\\n544\\n545\\n546\\n547\\n548\\n549\\n550\\n551\\n552\\n553\\n554\\n555\\n556\\n557\\n558\\n559\\n560\\n561\\n562\\n563\\n564\\n565\\n566\\n567\\n568\\n569\\n570\\n571\\n572\\n573\\n574\\n575\\n576\\n577\\n578\\n579\\n580\\n581\\n582\\n583\\n584\\n585\\n586\\n587\\n588\\n589\\n590\\n591\\n592\\n593\\n594\\n595\\n596\\n597\\n598\\n599\\n600\\n601\\n602\\n603\\n604\\n605\\n606\\n607\\n608\\n609\\n610\\n611"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == 14\nprint(solution(input()))\n\n'''"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2) == 14\n\"\"\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n') == '14'\nprint('Test passed\\n')\n\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"14\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"14\"\n\nprint(solution(\"2\"))\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n#.#\\n.#.') == 'Yes'\nassert solution('3 2\\n#.#\\n#.#') == 'Yes'\nassert solution('3 2\\n#.#\\n#.#') == 'Yes'\nassert solution('3 2\\n#.#\\n#.\\n#.#') == 'Yes'\nassert solution('3 2\\n#.#\\n.#.\\n#.#') == 'Yes'\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('A') == 'A'\nassert solution('#') == '#'\nassert solution('#.#') == '#'\nassert solution('#.#\\n') == '#'\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\nassert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\nassert solution(\"3 2\\n#.\\n#.\\n#.\") == \"No\"\n\"\"\""
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.#\") == \"Yes\"\nassert solution(\"5 5\\n...\\n#..\\n.#.\\n.#.\\n#..\\n#..\\n#..\\n#..\\n#..\\n...\") == \"Yes\"\nassert solution(\"3 3\\n#.\\n#.\\n#.\") == \"No\"\nassert solution(\"3 2\\n#.#\\n#.#\\n#.#\\n#.\\n#.\") == \"No\"\nassert solution(\"5 5\\n.##\\n.#.\\n##.\\n###\\n##.\") == \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n.#\\n.#\\n#.\\n.#\") == \"Yes\"\nassert solution(\"3 2\\n.#\\n.#\\n#.\") == \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.') == 'Yes'\nassert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.\") == \"Yes\"\n\nassert solution(\"3 2\\n.#\\n.#\\n#.\\n#\\n.\") == \"No\"\n\nassert solution(\"3 3\\n#.#\\n.#.\\n#.#\\n#.#\\n#.#\\n#.\") == \"Yes\"\n\nassert solution(\"3 3\\n#.#\\n#.#\\n#.#\\n#.#\\n#.#\\n#.#\\n#.\") == \"Yes\"\n\nassert solution(\"1 1\\n#\") == \"Yes\""
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n3 2\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\") == \"Yes\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 5 2') == '53'\n\"\"\"\n\nimport sys\nfrom typing import Tuple, List\n\nA, B, C = map(int, sys.stdin.readline().split())\n\noutput = 0\n\nfor a in range(1, A + 1):\n    for b in range(1, B + 1):\n        for c in range(1, C + 1):\n            sum_value = a + b + c\n            if sum_value <= output:\n                break\n\n            if sum_value > output:\n                output = sum_value\n\n\nprint(output)"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5 2\") == \"53\"\nassert solution(\"1 2 3\") == \"6\"\nassert solution(\"4 8 9\") == \"81\"\n\"\"\"\n\nA, B, C = map(int, stdin.readline().strip().split())\nprint((A * (10 ** 9) + B * (10 ** 6) + C * (10 ** 3)) - 1)\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\">1 + 2 + 4 + 7 =?\\n\") == \"17\"\n\"\"\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 5 2') == '53'\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 5 2') == '53'"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n50\\n100\\n100\\n100') == '8200'\nassert solution('3\\n1\\n100\\n') == '5200'\n\"\"\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n4980\\n7980\\n6980') == '15950'\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4980\\n7980\\n6980') == '15950'\nprint('Test PASS.')\n\nSolution\nPython 2.7\nPython3.6\nAuthor: Redact\n'''\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\\n\") == \"15950\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4980\\n7980\\n6980\\n\") == \"15950\"\n\"\"\"\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n2\n2\n3\n''') == '1'\n\nassert solution('''\n3\n4780\n8080\n6980\n''') == '15950'\n\nassert solution('''\n4\n8080\n8080\n6980\n6980\n''') == '15950'\n\nassert solution('''\n5\n8080\n8080\n6980\n6980\n6980\n''') == '15950'\n\nassert solution('''\n1\n20000\n''') == '20000'"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\\n\") == \"15950\"\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n60\\n5\\n5\\n5\\n') == '290.0'\nassert solution('2\\n50\\n80\\n') == '160.0'\nassert solution('3\\n50\\n80\\n') == '200.0'\nassert solution('7\\n100\\n90\\n80\\n70\\n60\\n50\\n') == '300.0'\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4980\\n7980\\n6980\\n\") == \"15950\"\n\"\"\"\n\n\"\"\"\n    # return int(input()) * int(input()) // 2\n    return sum(int(i) for i in stdin.split('\\n')) // 2\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n10\\n20\\n') == '90'\nassert solution('4\\n10\\n20\\n30\\n40\\n') == '200'\nassert solution('6\\n1\\n2\\n3\\n4\\n5\\n') == '20'\nassert solution('7\\n1\\n2\\n3\\n4\\n5\\n6\\n') == '40'\n\n\"\"\"\n\nN = int(stdin.readline())\n\nprices = []\nfor i in range(N):\n    prices.append(int(stdin.readline()))\n\nprices = sorted(prices)\n\nprint(sum([a*b for a,b in zip(prices, [0.5, 0.5, 1] + [0 for i in range(N-2)])]))"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('29\\n20\\n7\\n35\\n120') == '215'\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\"\"\"\n\n\"\"\"\n- Input\nABC Don\nARC Curry\nAGC Pasta\nAPC Ramen\nATC Hanbagu\n\n- Output\n215\n\n- Solution\nABC Don\nARC Curry\nAGC Pasta\nAPC Ramen\nATC Hanbagu\n\"\"\"\n\nimport sys\n\ndish_input = sys.stdin.readlines()"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\\n\") == \"215\"\nassert solution(\"29\\n20\\n7\\n35\\n120\\n\") == \"215\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\nprint(\"Passed\")\n\n\"\"\"\n\nA, B, C, D, E = (int(stdin) for _ in range(5))\n\nstart = 0\n\nwhile (start + A) % 10!= 0 or (start + B) % 10!= 0 or (start + C) % 10!= 0 or (start + D) % 10!= 0 or (start + E) % 10!= 0:\n    start += 1\n\nprint(start)\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"29\\n20\\n7\\n35\\n120\"\n) == \"215\"\nassert solution(\n\"3\\n6\\n9\\n12\\n18\"\n) == \"36\"\n\"\"\"\nfrom math import inf"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\"\n\nfrom itertools import permutations\n\ntime = 0\nfor i in range(5):\n    a, b, c, d, e = map(int, input().split())\n    for order in list(permutations([a, b, c, d, e])):\n        if order[-1] % 10 == 0:\n            time = max(time, order[-1])\nprint(time)\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 30') == '7.5'\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\nprint(solution(\"2\\n10 30\"))\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 30\\n') == '7.5'\nassert solution('1 10\\n') == '1.0'\n\"\"\"\n\nN = int(input())\nA = list(map(int, input().split()))\nB = [1/num for num in A]\nC = sum(B)\n\nprint(round(C, 5))\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 30\") == \"7.5\"\nassert solution(\"10 10\") == \"1.0\"\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n10 30') == '7.5'\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 30') == '7.5'\n\"\"\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n10 30') == '7.5'\nassert solution('3\\n10 20 30') == '1.75'\nassert solution('3\\n10 20 30\\n100 150 200') == '0.333333'\n\nimport numpy as np\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n10 30') == '7.5'\n\"\"\"\n\nn = int(input())\nnums = list(map(int, input().split()))\n\nans = 0\nfor num in nums:\n    ans += 1 / num\n\nprint(ans)\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2\n10 30''') == '7.5'\n\"\"\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n15\\n11\\n14\\n12\") == \"2\"\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 15\\n11\\n14\\n12') == 2\nassert solution('1 2\\n3\\n4') == 0\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == '2'\nprint(solution(\"5 3\\n10\\n15\\n11\\n14\\n12\"))\n\n-----Big O Notation-----\nTime: O(N)\nSpace: O(N)\n\n-----Testcases-----\npython3 -m pytest -m'small' solution.py -v\n\n----\nhttps://www.geeksforgeeks.org/minimum-height-difference-two-trees/\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n\") == 2\n\"\"\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"\n\"\"\"\n\nimport sys\n\nn, k = map(int, input().split())\nh = [int(i) for i in sys.stdin.read().split()]\n\nheights = sorted(h)\nprint(heights[k - 1] - heights[0])\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n\") == \"2\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n\") == \"2\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 15\\n11\\n14\\n12\\n\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12\\n') == '2'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"B\") == \"A\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('B') == 'A'\nassert solution('a') == 'a'\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('B') == 'A'\nassert solution('a') == 'a'\nassert solution('A') == 'A'\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('B') == 'A'\nassert solution('a') == 'a'\nassert solution('A') == 'A'"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('A') == 'A'\nassert solution('a') == 'a'\nassert solution('B') == 'A'\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('B') == 'A'\nassert solution('a') == 'a'\nassert solution('A') == 'A'\n\"\"\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"B\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"A\") == \"A\"\nassert solution(\"Z\") == \"Z\"\nassert solution(\"z\") == \"z\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('B') == 'A'\nassert solution('a') == 'a'\nassert solution('A') == 'A'\nassert solution('b') == 'b'\nassert solution('Bb') == 'B'\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('B') == 'A'\n\"\"\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n') == '6'\nassert solution('2 3\\n') == '0'\nassert solution('3 2\\n') == '0'\nassert solution('3 3\\n') == '1'\nassert solution('1 1\\n') == '0'\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2\\n') == '6'\n\"\"\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\n') == '6'\n\"\"\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n\") == \"6\"\nprint(solution(\"2 2\\n\"))\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2') == 6\n\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('K 2') == '6'\nassert solution('2 2') == '6'\n\nprint('Success')\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"3 0\") == \"0\"\nassert solution(\"0 3\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"6\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905XX\") == \"YYMM\"\nassert solution(\"XX1905\") == \"MMYY\"\nassert solution(\"0519\") == \"YYMM\"\nassert solution(\"1719\") == \"YYMM\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('190521') == 'YYMM'\nassert solution('19052112') == 'AMBIGUOUS'\nassert solution('1905211234') == 'AMBIGUOUS'\nassert solution('19052112341234') == 'AMBIGUOUS'\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1905\") == \"YYMM\"\n\"\"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1905\") == \"YYMM\"\n\n\"\"\"\n\n\"\"\"\n----- Challenge 3 - Puzzles from Practice Problems -----\n- Valid Date\n- Valid Date 2\n- Valid Date 3\n- Valid Date 4\n- Valid Date 5\n- Valid Date 6\n\n\"\"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1905\") == \"YYMM\"\n\"\"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1905\") == \"YYMM\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('1011') == 'MMYY'\nassert solution('19') == 'AMBIGUOUS'\nassert solution('1010') == 'NA'\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1906\") == \"AMBIGUOUS\"\nassert solution(\"1905a\") == \"NA\"\n\n\"\"\"\n\nimport unittest\nimport re\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"190519\") == \"AMBIGUOUS\"\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == 'YYMM'\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '2'\n\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n3') == '2'\nprint('Passed')\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n\") == 2\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == 3\n\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n3') == '2'\n\"\"\"\n\nK = int(stdin.readline())\nodd_counter = 0\neven_counter = 0\nfor i in range(1, K + 1):\n    if i % 2 == 0:\n        even_counter += 1\n    else:\n        odd_counter += 1\nprint(odd_counter * even_counter)\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == 4\nassert solution(\"3\") == 2\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == 2\nassert solution(\"3\") == 2\nassert solution(\"4\") == 4\nassert solution(\"7\") == 6\nassert solution(\"8\") == 8\n\"\"\"\n\nk = int(stdin.readline().strip())"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == 2\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n') == '2'\nprint('Test pass.')\n\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9 12') == \"21\"\n\"\"\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 12\") == \"21\"\nprint(solution(\"9 12\"))\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9 12') == '21'\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\"\n\nA, B = [int(x) for x in stdin.split()]\nprint(str(A + B - 24) +'' + str(A + B))\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == '21'\n\nSolution 1:\n  stdin = input().split()\n  a,b = [int(x) for x in stdin]\n  print(str(a+b) +'o\\'clock')\n\nSolution 2:\n  import sys\n  stdin = [int(x) for x in sys.stdin]\n  a,b = stdin\n  print(str(a+b) +'o\\'clock')\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('9 12\\n') == '21'\n\"\"\"\n\nfrom datetime import datetime\nfrom typing import Union\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\"\n\nA, B = [int(i) for i in stdin.split()]\nprint(B - A)\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(2, 2919) == \"3719\"\nprint(solution(2, 2919))\n\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2919\\n\") == \"3719\"\n\"\"\"\n\n\"\"\"\n        1\n      1 1 1 1\n    1 1 1 1 1 1 1\n  1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2919') == '3719'\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2919\\n') == '3719'\nassert solution('1 1\\n') == '1'\nassert solution('3 7\\n') == '7'\nassert solution('4 10\\n') == '20'\nassert solution('5 2\\n') == '6'\n\"\"\"\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"2 2919\"\n) == \"3719\"\n\"\"\"\n\nn, r = map(int, input().split())"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2919\") == \"3719\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\">5<->5<->2<-<5>\") == \"30\"\nassert solution(\"3<-<2>5<->3<->5<->2<->5<-<2>\") == \"110\"\n\"\"\"\nfrom collections import deque\nfrom collections import defaultdict\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2919') == '3719'\nassert solution('1 3000') == '3000'\nassert solution('0 3') == '-100'\nassert solution('5 8000') == '-100'\nassert solution('3 751') == '749'\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(11, 2) == 4\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11 2') == '4'\n\"\"\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 2\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11 2') == '4'\n\"\"\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 2') == 4\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(11,2) == 4\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 2\") == '4'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11 2\") == \"4\"\nprint('Passed')\n\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11 2') == '4'\n\"\"\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11 2') == 4\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1, 2') == '1'\nassert solution('1, 2, 3') == '1'\nassert solution('2, 1') == '2'\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == '3'\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\"\n\nn = int(input())\nprint((n - 1) // 2)\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"5\") == \"3\"\nassert solution(\"5\") == \"3\"\nassert solution(\"3\") == \"1\"\nassert solution(\"3\") == \"1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"3\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n') == '3'\n'''"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(solution)\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == expected_result\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\nassert solution(\"5 5\") == \":(\".\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 4''') == 'Yay!'\nassert solution('''5 3''') == 'Yay!'\nassert solution('''4 3''') == 'Yay!'\nassert solution('''6 4''') == 'Yay!'\nassert solution('''4 4''') == 'Yay!'\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4\\n') == 'Yay!'\nassert solution('5 3\\n') == 'Yay!'\nassert solution('4 4\\n') == 'Yay!'\nassert solution('4 5\\n') == ':(\n\"\"\"\n\nimport sys\n\ninput_lines = []\nfor line in sys.stdin:\n    input_lines.append(line)\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('3 1') == 'Yay!'\nassert solution('4 4') == 'Yay!'\nassert solution('4 6') == ':(\nassert solution('1 16') == 'Yay!'\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == \"Yay!\"\nassert solution(\"10 5\") == \":(\nassert solution(\"7 3\") == \"Yay!\"\n\n\"\"\"\n\nimport ast\n\nA, B = ast.literal_eval(stdin.readline())\nprint(\"Yay!\") if A + B <= 16 else print(\":(\")\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\"\"\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\"\"\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n'''\n\n'''\nKhan did not go to the last fight with A[i] < B[i], so his final happiness is A[0] - B[0]. \n\nAnd if he goes to the last fight with A[i] >= B[i], then his final happiness is A[0] + A[1] - B[0] - B[1].\n\nSo if A is a subsequence of B, then the maximum final happiness of Khan is the maximum of all the above values.\n\nFor example, if A is {5, 6, 7, 8, 9} and B is {3, 5, 7, 9, 11}, then the maximum final happiness of Khan is 6."
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"Yay!\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1234567876') == '34'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1234567876') == '34'\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1234567876') == '34'\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1234567876\") == \"34\"\nprint(\"PASSED\")"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\n\"\"\"\n\nfrom typing import Tuple\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1234\") == \"3\"\nassert solution(\"98765\") == \"0\"\nassert solution(\"123456\") == \"0\"\nassert solution(\"111111\") == \"0\"\nassert solution(\"123456789\") == \"0\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\nassert solution(\"6 13 52 0 13 26 52\") == \"12 13\"\nassert solution(\"5 7 5 6 3\") == \"5 3\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\nassert solution(\"6 13 52 0 13 26 52\") == \"12 13\"\nassert solution(\"2 1\") == \"1 2\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('2 9') == '1 7'\nassert solution('7 13') == '12 13'\nassert solution('13 52 0 13 26 52') == '12 13'\n\n'''"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\n\nassert solution(\"2 9\") == \"1 7\"\n\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n\nassert solution(\"6 13 52 0 13 26 52\") == \"12 13\"\n\n\"\"\"\n\nimport sys\n\ninputs = sys.stdin.read()\n\nn = int(inputs.split('\\n')[0])\na = list(map(int, inputs.split('\\n')[1].split()))\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\n\nassert solution(\"2 9\") == \"1 7\"\n\nassert solution(\"7 2 1000000000 4 6 8 4 2\") == \"2999999987 2\"\n\nassert solution(\"6 13 52 0 13 26 52\") == \"12 13\"\n\n\n\n-----\n\nThe maximum number of people equals to $n$.\n\nEach of them has $x_i$ type of sword and $y_i$ of the number of sword that have been taken by the people who have broken into the basement.\n\nThis solution has a time complexity of O(n^3)."
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 2 1000000000 4 6 8 4 2\") == \"2999999987 2\"\nassert solution(\"6 13 52 0 13 26 52\") == \"12 13\"\n\"\"\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\n\nassert solution(\"2 9\") == \"1 7\"\n\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n\n\"\"\""
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\n\nassert solution(\"2 9\") == \"1 7\"\n\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n\n\"\"\""
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\nassert solution(\"6 13 52 0 13 26 52\") == \"12 13\"\n\n\"\"\""
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 4 1\\n') == '3'\nassert solution('3 1 4 1\\n') == '1'\nassert solution('5 1 1 2 2\\n') == '2'\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3 1 4 1\") == \"3\"\n\"\"\"\n\nfrom collections import Counter\nn = int(input())\na = list(map(int, input().split()))\n\ntotal = sum(a)\nd = Counter(a)\n\ntotal_days = 0\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1 4 1\\n3 1 2') == '3'\n\"\"\"\nimport collections"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 1 2\") == 3\n\"\"\""
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 4 1\\n3 1 4 1\") == 3\nassert solution(\"1 1 1\\n1 1 1\") == 1\nassert solution(\"1 1 1\\n1 1 2\") == 2\n\"\"\""
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 4 1\\n3 1 4 1\") == 3\nassert solution(\"3 1 4 1\\n1 1 1\") == 1\n\"\"\""
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 4 1\") == '3'\nassert solution(\"3 1 4 1\") == '1'\nassert solution(\"5 1 1 2 2\") == '2'\n\"\"\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 4 1\\n3 1 4 1\") == \"3\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('2 2 2') == '2'\nassert solution('2 1 2') == '2'\nassert solution('1 1 1') == '1'\nassert solution('1 1 1 1') == '0'\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n4\n3 1 4 1\n\"\"\"\n) == 3\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\\n\") == '2'\nassert solution(\"2 0\\n\") == '1'\nassert solution(\"3 2\\n1 3\\n2 3\\n\") == '2'"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 2\n1 2\n2 3''') == '2'\n\nassert solution('''2 0''') == '1'\n\nassert solution('''3 2\n1 3\n2 3''') == '2'\n\nassert solution('''5 5\n1 2\n2 3\n3 4\n4 5\n5 1''') == '2'\n\nassert solution('''6 5\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1''') == '3'"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\\n\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"2 0\\n\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n5 6\n1 2\n1 3\n1 4\n2 4\n3 4\n''') == '1\\n1 2\\n1 3\\n1 4\\n2 4\\n3 4\\n'\nassert solution('''\n4 2\n1 2\n2 3\n''') == '1\\n2\\n1 3\\n'\nassert solution('''\n4 1\n1 2\n2 3\n''') == '2\\n1 3\\n'\nassert solution('''\n3 2\n1 3\n2 3\n''') == '2\\n'\nassert solution('''\n3 1\n1 3\n2 3\n''') == '2\\n'\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\\n1 2\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\""
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2'\nassert solution('2 0\\n') == '1'\nassert solution('3 2\\n1 3\\n2 3') == '2'\n\n\n----\n\n\n\n\n\n------\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\\n4 2\"\nassert solution(\"2 0\") == \"1\\n1 2\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\") == \"4\"\nassert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n4 5\") == \"11\"\nassert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n4 5\") == \"11\"\nassert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n4 5\") == \"11\"\nassert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n4 5\") == \"11\"\n\"\"\""
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5 1\\n1 2 3 4 5') == 11\nassert solution('7 2\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4') == 4\nassert solution('5 1\\n1 2 3 4 5') == 11\nassert solution('7 2\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4') == 4\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open(r\"D:\\Github\\Coding-Challenge\\Coding-Challenge\\d4\\input\\input_small.txt\").read()) == \"11\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List, DefaultDict\n\nclass UnionFind():\n    def __init__(self, n: int):\n        self.n = n\n        self.parents = [-1] * n\n    def find(self, x: int) -> int:\n        if self.parents[x] < 0:\n            return x\n        self.parents[x] = self.find(self.parents[x])\n        return self.parents[x]\n    def union(self, x: int, y: int) -> bool:\n        x_parent = self.find(x)\n        y_parent = self.find(y)\n        if x_parent == y_parent:\n            return False\n        if self.parents[x_parent] > self.parents[y_parent]:\n            x_parent, y_parent = y_parent, x_parent\n        self.parents[x_parent] += self.parents[y_parent]\n        self.parents[y_parent] = x_parent\n        return True\n\nclass Solution:\n    def solve(self, n: int, k: int, a: List[int]) -> int:\n        # s = {i: i for i in range(1, n + 1)}\n        # for i in range(n - 1):\n        #     u, v = map(int, stdin.readline().split())\n        #     if s[u]!= s[v]:\n        #         s[min(u, v)] = max(u, v)\n        #         s[max(u, v)] = min(u, v)\n        # kth = {i: 0 for i in range(1, n + 1)}\n        # for i in range(1, n + 1):\n        #     kth[s[i]] += a[i - 1]\n        # kth = sorted(kth.items(), key=lambda x: x[1], reverse=True)\n        # s = UnionFind(n + 1)\n        # ans = 0\n        # for i in kth:\n        #     ans += i[1]\n        #     if s.union(s[i[0]], s[i[0] - 1]):\n        #         if s.find(i[0]) == s.find(i[0] - 1):\n        #             ans -= i[1]\n        #         if s.parents[i[0]] < k:\n        #             ans -= i[1]\n        # return ans\n\n        sum_tree = [0] * (n + 1)\n        for weight in a:\n            sum_tree[weight] += weight\n            sum_tree[weight + 1] += weight\n        for i in range(1, n):\n            sum_tree[i + 1] += sum_tree[i]\n        k_parent = {i: i for i in range(1, n + 1)}\n        for i in range(n - 1):\n            a, b = map(int, input().split())\n            if k_parent[a]!= k_parent[b]:\n                if sum_tree[a] > sum_tree[b]:\n                    a, b = b, a\n                k_parent[a] = k_parent[k_parent[a]]\n                k_parent[b] = k_parent[k_parent[b]]\n        k_parent = {k_parent[i]: i for i in k_parent}\n        for i in range(1, n + 1):\n            if k_parent[i] <= k:\n                sum_tree[i] = 0\n        return sum(sum_tree)\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 1\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5''') == '11'\n\nassert solution('''7 2\n2 1 2 1 2 1 1\n6 4\n1 5\n3 1\n2 3\n7 5\n7 4''') == '4'\n\"\"\"\n\nimport sys\nimport copy"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 1\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5\n''') == '11'\nassert solution('''7 2\n2 1 2 1 2 1 1\n6 4\n1 5\n3 1\n2 3\n7 5\n7 4\n''') == '4'\n\n\"\"\"\nimport collections"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3') == '3'\nassert solution('5 2') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n1 2\\n1 3\\n2 3\\n2 1\\n2 2\\n3 4\\n3 5\\n3 1\\n4 5\\n4 4\\n5 2\\n5 3') == '4'\n\nassert solution('3 3\\n1 2\\n2 1\\n3 1\\n3 2') == '3'\n\nassert solution('3 3\\n1 2\\n2 1\\n3 1\\n3 2') == '3'\n\nassert solution('5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1') == '6'\n\nassert solution('6 6\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 1') == '6'"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5') == '11'\nassert solution('7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4') == '4'\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\n\n\"\"\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5') == 11\nassert solution('7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4') == 4"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\nassert solution(\"2 3\\n5 6 9999999999\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\nassert solution(\"3 3\\n1 1\\n5 6 9999999999\\n5 6 9999999999\") == \"1 1\\n2 1\\n2 9999999994\"\nassert solution(\"5 4\\n1 2 3 4 5\") == \"1 1\\n1 4\\n2 2\\n2 3\\n3 1\\n3 4\\n4 1\\n4 2\\n4 3\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2\") == \"1 1\"\nassert solution(\"2 3\") == \"2 1\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\""
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    2 3\n    5 10000000000\n    5 6 9999999999\n    \"\"\"\n) == \"\"\"\n1 1\n1 9\n2 2\n2 13\n3 1\n3 12\n\"\"\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13'\nassert solution('2 3\\n5 10000000000\\n5 6 9999999999') == '1 5\\n2 1\\n2 9999999994'"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13'\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 3 2\") == \"3 3\"\nassert solution(\"4 3 2\") == \"1 2\"\n\"\"\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13\\n3 1\\n3 12'\n\n\n-----\n\n'''"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\\n3 1\\n3 12\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\nprint(solution('3 6 5 4'))\n\n\"\"\"\n\na, b, c, d = [int(x) for x in input().split()]\nprint(a + b + c, a + c + b, b + c + a, a + b + c + d)\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n\n\"\"\"\n\nimport sys\n\nnums = sys.stdin.readline().split()\n\nnums = list(map(int, nums))\nnums.sort()\nprint(nums[0] + nums[1])\nprint(nums[0] + nums[2])\nprint(nums[1] + nums[2])\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nprint(solution(\"3 6 5 4\"))"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\n\"\"\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\nassert solution('40 40 40 60') == '20 20 20'\nassert solution('201 101 101 200') == '1 100 100'\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 6 5 4\") == \"2 1 3\"\nassert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"4 4 4 4\") == \"4 4 4\"\nassert solution(\"1 2 3 4\") == \"1 2 3\""
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n\n\"\"\"\n\nimport sys\n\nfrom collections import Counter\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n\"\"\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\nRBGRRBRGG\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\") == \"2\\nBRBGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\") == \"6\\nBGRRRRBGBGGBRRR\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9\\nRBGRRBRGG') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRBRBGBGBGRG'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\nRRR\\n\") == \"2\\nRRR\\n\"\nassert solution(\"8\\nRGR\\n\") == \"0\\nRRR\\n\"\nassert solution(\"8\\nGRR\\n\") == \"2\\nGRR\\n\"\nassert solution(\"9\\nGRR\\n\") == \"2\\nRRGR\\n\"\nassert solution(\"9\\nBGRR\\n\") == \"2\\nRRGB\\n\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\nRBGRRBRGG\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\") == \"2\\nBRBGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\") == \"6\\nBGRRRRBBGBGBGRG\""
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9\\nRBGRRBRGG\") == '2\\nRBGRGBRGR'\nassert solution(\"8\\nBBBGBRRR\") == '2\\nBRBGBRGR'\nassert solution(\"13\\nBBRRRRGGGGGRR\") == '6\\nBGRRRBGBGBGRG'"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\nRBGRRBRGG\\n\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGRRRRR\\n\") == \"2\\nRBGRGBRGR\"\nassert solution(\"13\\nBBRRRRRGGGGGRR\\n\") == \"6\\nBGRRRBGBGBGRG\"\n\"\"\""
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\nRBGRRBRGG\\n\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\\n\") == \"2\\nBRBGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\\n\") == \"6\\nBGRRRRBBGGRRRR\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\nRRRRRR\") == \"2\\nRRRRRR\"\nassert solution(\"8\\nRRRRRR\") == \"2\\nRRRRRR\"\nassert solution(\"13\\nRRRRRRGGGRRRR\") == \"6\\nBGRRRRRGBGBRRRR\"\n\nprint(\"The solution is correct!\")\n\n-----Problem-----\n\nYou are given a garland of $n$ lamps, each of them is red, green or blue. You are given a string, which contains $n$ characters: \"R\" - the lamp is red, \"G\" - the lamp is green and \"B\" - the lamp is blue.\n\nYou have to choose a color for each lamp so that the string is valid and all lamps have different colors. The string is valid if for any two adjacent lamps the color of the latter is different than the color of the former.\n\nThe string is called balanced if the number of \"R\" is equal to the number of \"G\" and the number of \"B\" is equal to the number of \"G\".\n\nYou have to output the minimum number of colors needed to make the string balanced and print this minimum number in the first line of the output. If there is no solution, print \"Impossible\".\n\nIf there are multiple solutions, print any of them in the following format:\n\n\"Case #id: #color1 #color2 #color3... #color#\"\n\nIn the case of the first test case, the string is balanced, so the colors can be \"R\", \"G\" and \"B\".\n\nIn the case of the second test case, there is no solution, so the string is not balanced.\n\nFor each test case, there is a single line containing a non-empty string, which contains only uppercase letters \"R\", \"G\" and \"B\". The length of the string is from $1$ to $10^5$.\n\n-----Sample Tests-----\nSample Input 1:\n\n9\nRBRRGG\n\nSample Output 1:\n\n2\nRRRR\n\nSample Input 2:\n\n8\nRGRGRG\n\nSample Output 2:\n\nImpossible\n\nSample Input 3:\n\n13\nRRRRRRRRGGG\n\nSample Output 3:\n\n6\nBGRRRRRGBG\n\n------Problem------\n\nYou are given an array of positive integers. You should find the sum of the integers with even indexes (0th, 2nd, 4th...).\n\nThen multiply this summed number and the final element of the array together.\n\nDon't forget that the first element has an index of 0.\n\nFor an empty array, the result will always be 0 (zero).\n\nInput\n\nThe first line of the input contains integer n (1 \\le n \\le 100) \u2014 the number of elements in the array.\n\nThe second line of the input contains n space-separated integers a1, a2,..., an (|a_i| \\le 10^6).\n\n-----Output-----\n\nPrint one integer: the answer to the problem.\n\n-----Examples-----\nInput\n7\n1 2 3 4 5 6 7\n\nOutput\n26\n\nInput\n8\n4 2 3 6 1 5 7 0\n\nOutput\n40\n\nInput\n4\n2 4 3 1\n\nOutput\n16\n\nInput\n5\n5 7 6 2 1\n\nOutput\n126\n\n------Problem------\n\nThe fraction 49/98 is a curious fraction, as an inexperienced mathematician in attempting to simplify it may incorrectly believe that 49/98 = 4/8, which is correct, is obtained by cancelling the 9s.\n\nWe shall consider fractions like, 30/50 = 3/5, to be trivial examples.\n\nThere are exactly four non-trivial examples of this type of fraction, less than one in value, and containing two digits in the numerator and denominator.\n\nIf the product of these four fractions is given in its lowest common terms, find the value of the denominator.\n\n-----Solution-----"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\\nRBGRRBRGG\\n\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\\n\") == \"2\\nBRBGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\\n\") == \"6\\nBGRBRBGBGBGRG\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\\nRBGRRBRGG\\n\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\\n\") == \"2\\nBRBGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\\n\") == \"6\\nBGRBRBGBGBGRG\"\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n3 3 4 7 5 6 8\") == \"4\\n2 3 5 6\"\nassert solution(\"6\\n1 3 5 2 4 6\") == \"2\\n1 4\"\nassert solution(\"4\\n10 9 8 7\") == \"1\\n1\"\nassert solution(\"9\\n6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\n\"\"\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 7 8 3 4 5 9 10 11\") == \"1 2 3 7 8 9\"\nassert solution(\"10 9 8 7\") == \"1 2\"\nassert solution(\"1 3 5 2 4 6\") == \"1 4\"\nassert solution(\"1 3 5 2\") == \"1 4\"\nassert solution(\"1 3 5\") == \"1 4\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 3 4 7 5 6\") == \"4\\n2 3 5 6\"\nassert solution(\"7\\n3 3 4 7 5 6 8\") == \"4\\n2 3 5 6\"\nassert solution(\"6\\n1 3 5 2 4 6\") == \"2\\n1 4\"\nassert solution(\"9\\n6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\n\"\"\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == \"4\"\nassert solution(\"6 3 5 2 4 6\") == \"2\"\nassert solution(\"1 3 5 2 4 6\") == \"1\"\nassert solution(\"9 6 7 8 3 4 5 9 10 11\") == \"6\"\n\n\"\"\""
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\nassert solution(\"10 9 8 7\") == \"1\\n1\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\n\"\"\""
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == \"4\", \"a\"\nassert solution(\"1 3 5 2 4 6\") == \"2\", \"b\"\nassert solution(\"10 9 8 7\") == \"1\", \"c\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\", \"d\"\nassert solution(\"1 3 5 2 4 6\") == \"2\", \"e\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == '4', 'Test 1'\nassert solution(\"6 7 8 3 4 5 9 10 11\") == '6', 'Test 2'\nassert solution(\"4 10 9 8 7\") == '1', 'Test 3'\nassert solution(\"9 6 7 8 3 4 5 9 10 11\") == '6', 'Test 4'\nassert solution(\"10 9 8 7\") == '1', 'Test 5'\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 7 8 3 4 5 9 10 11\") == '1 2 3 7 8 9'\nassert solution('1 3 5 2 4 6') == '1 4'\nassert solution('10 9 8 7') == '1 4'\nassert solution('1 3 5 2 4 6') == '1 4'\nassert solution('9 6 7 3 4 5 9 10 11') == '1 2 3 7 8 9'\n\n\n\n-----\n6 7 8 3 4 5 9 10 11\n1 3 5 2 4 6\n\n\n\n-----\n\n\n1 3 5 2 4 6\n1 4\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n-----\n5 3 4 7 8 9 10 11\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 4\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n6 7 8 3 4 5 9 10 11\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 4\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n6 7 8 3 4 5 9 10 11\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 4\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n6 7 8 3 4 5 9 10 11\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 4\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n6 7 8 3 4 5 9 10 11\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 4\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n6 7 8 3 4 5 9 10 11\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n6 7 8 3 4 5 9 10 11\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9\n\n\n-----\n1 3 5 2 4 6\n1 2 3 7 8 9"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == \"4\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\"\nassert solution(\"4 10 9 8 7\") == \"1\"\nassert solution(\"9 6 7 8 3 4 5 9 10 11\") == \"6\"\nassert solution(\"10 9 8 7\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 4 7 5 6 8\") == 4\nassert solution(\"1 3 5 2 4 6\") == 2\nassert solution(\"1 3 5 2 4 6\") == 2\nassert solution(\"10 9 8 7\") == 1\nassert solution(\"6 7 8 3 4 5 9 10 11\") == 6\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"Yes\"\nassert solution(\"5 2\") == \"No\"\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\"\"\"\n\na, b = map(int, stdin.split())\nprint(\"Yes\" if a*b % 2 == 1 else \"No\")\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"Yes\"\nassert solution(\"4 2\") == \"No\"\n\"\"\"\n\nA, B = input().split()\nA = int(A)\nB = int(B)"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == 'Yes'"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1') == 'Yes'\n\"\"\"\n\nfrom unittest import TestCase\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1') == 'Yes'\n\n-----Explanation-----\nThe odd numbers are: 1, 3, 5, 7, 9\n3 * 1 = 3\n3 * 3 = 9\n\nSince 3 is the only odd number between 1 and 3, print Yes\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1') == 'Yes'\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\"\"\"\n\nimport sys\n\na, b = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\"\"\"\n\n\"\"\"\nGiven three integers A, B and C, return any string S such that:\n\nS has length A + B and contains exactly C A's unless S contains every possible A, in which case it contains C B's.\nString S should contain only lowercase English letters.\nIt can be proved that at least one solution exists.\n\nExample\n\nFor A = 1, B = 2, and C = 4, the output should be\n\nstringConstruction(A, B, C) = \"abacab\";\n\nThere are several ways to construct such string: \"a\", \"b\", \"ab\", \"ac\", \"bc\", \"abc\".\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer A\n\nGuaranteed constraints:\n1 \u2264 A \u2264 50.\n\n[input] integer B\n\nGuaranteed constraints:\n1 \u2264 B \u2264 50.\n\n[input] integer C\n\nGuaranteed constraints:\n1 \u2264 C \u2264 50.\n\n[output] string\n\nConstructs the given string.\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('81 58') == '110'\n\"\"\"\n\nimport math\n\nX, Y = input().split()\nX = int(X)\nY = int(Y)"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"81 58\") == \"110\"\nassert solution(\"77 65\") == \"74\"\nassert solution(\"40 30\") == \"40\"\nassert solution(\"30 40\") == \"40\"\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"81 58\") == \"110\"\nprint(\"Test succeeded.\")\n\n-----\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 1') == '1'\nassert solution('1 1 2') == '1'\nassert solution('1 1 2 2') == '2'\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"81 58\") == \"110\"\nprint(solution(\"81 58\"))"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''81 58''') == '110'\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('81 58') == '110'\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == '8'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nresult = 0\nfor i in range(1, n + 1):\n    for j in range(1, n + 1):\n        for k in range(1, n + 1):\n            result += 1\nprint(result)"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '0'\nassert solution('1') == '0'\nassert solution('2') == '9'\nassert solution('3') == '98'\nassert solution('4') == '980'\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == '8'\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == 8\n\"\"\"\n\nimport sys\nfrom math import factorial"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"8\"\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == '8'\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n') == '8'\n\"\"\"\n\n\"\"\"\nTakahashi is going to set a 3-character password.\nHow many possible passwords are there if each of its characters must be a digit between 1 and N (inclusive)?\n\n-----Constraints-----\n - 1 \\leq N \\leq 9\n - N is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint the number of possible passwords.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n8\n\nThere are eight possible passwords: 111, 112, 121, 122, 211, 212, 221, and 222.\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2') == '4'\nassert solution('2 2') == '0'\nassert solution('1 2 3') == '4'\nassert solution('2 3') == '4'\n\"\"\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"8\"\nprint(solution(\"2\"))\n\n\"\"\"\nimport os\nimport sys\n\nDEBUG = False"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 8\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"7\") == \"NO\"\nassert solution(\"8\") == \"YES\"\nassert solution(\"9\") == \"YES\"\n\"\"\"\n\nfrom typing import Optional"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"1\") == \"YES\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"3\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == 'YES'\nassert solution('3') == 'NO'\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"7\") == \"YES\"\nassert solution(\"6\") == \"NO\"\n\n-----Explanation-----\nThe growth of a five-year-old child will be celebrated.\n\"\"\"\n\nx = int(stdin.readline().strip())"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == 'YES'\nassert solution('8') == 'YES'\nassert solution('1') == 'NO'\nassert solution('9') == 'NO'\nassert solution('4') == 'NO'\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(0) == \"YES\"\nassert solution(1) == \"YES\"\nassert solution(5) == \"YES\"\nassert solution(10) == \"NO\"\nassert solution(20) == \"NO\"\n\n\"\"\"\n\nX = int(stdin.readline())\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n') == \"YES\"\nassert solution('3\\n') == \"NO\"\nassert solution('5\\n') == \"YES\"\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n\") == \"YES\"\n\n\"\"\"\n\n\"\"\"\n\u672c\u984c\u53ea\u8ad6\u65bc\u984c\u76ee\u6307\u5b9a\u4e86\u53ea\u6703\u5728\u6307\u5b9a\u5e74\u9f61\u4e4b\u5f8c\u624d\u6703\u5728\u6307\u5b9a\u7a2e\u985e\u8fb2\u4f5c\u7684\u8fb2\u4f5c\u3002\n\u56e0\u6b64\u5982\u679c\u6709\u5169\u500b\u53ca\u4ee5\u4e0a\u7684\u5e74\u9f61\u4e4b\u5f8c\u7684\u8fb2\u4f5c\uff0c\u5247\u53ef\u4ee5\u8aaa\u660e\u9019\u4e9b\u8fb2\u4f5c\u7686\u6703\u88ab\u8fb2\u4f5c\u5206\u7d44\u3002\n\n\u5148\u4f86\u5206\u6790\u6bcf\u500b\u7a2e\u985e\u8fb2\u4f5c\u7684\u5e74\u9f61\u7d44\u6210\uff0c\u63a5\u8457\u8a08\u7b97\u6bcf\u500b\u8fb2\u4f5c\u7684\u5e74\u9f61\u7d44\u6210\u662f\u5426\u548c\u4e4b\u524d\u88ab\u62bd\u9078\u8d70\u7684\u5e74\u9f61\u7d44\u6210\u4e00\u6a23\u3002\n\"\"\"\n\nfrom collections import defaultdict\nimport operator\nimport re\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        # \u628a\u8fb2\u4f5c\u653e\u9032\u5b57\u5178\u88e1\u9762\n        # \u8fb2\u4f5c\u7a2e\u985e\n        items = ['\u83dc', '\u679c', '\u8c6c', '\u9b5a', '\u9bad', '\u86cb']\n        \n        # \u628a\u5e74\u9f61\u653e\u9032\u5b57\u5178\u88e1\u9762\n        # {\u8fb2\u4f5c:{\u5e74\u9f61:\u7d44\u6210}}\n        # \u82e5\u67d0\u8fb2\u4f5c\u5177\u6709\u76f8\u540c\u7684\u5e74\u9f61\u7d44\u6210\uff0c\u5247\u6240\u6709\u8fb2\u4f5c\u7686\u6703\u88ab\u62bd\u9078\u8d70\n        result = defaultdict(dict)\n        # {\u8fb2\u4f5c:\u5e74\u9f61}\n        year = {}\n\n        # \u53d6\u51fa\u5e74\u9f61\n        for i in stdin.split('\\n'):\n            # \u5206\u6790\u5e74\u9f61\n            age = int(i)\n            # \u8fb2\u4f5c\n            for j in items:\n                # \u8981\u5c0d\u6bcf\u500b\u8fb2\u4f5c\u5206\u6790\uff0c\u56e0\u6b64\u6211\u5011\u53d6\u51fa\u8fb2\u4f5c\n                item = j\n                # \u53d6\u51fa\u76ee\u524d\u8fb2\u4f5c\u7684\u5e74\u9f61\n                if item in result:\n                    year = result[item]\n                    # \u628a\u5e74\u9f61\u52a0\u5165\u5b57\u5178\u88e1\u9762\n                    year[age] = age\n                    result[item] = year\n                    break\n                else:\n                    # \u5206\u6790\u5e74\u9f61\n                    result[item] = {}\n                    year[age] = age\n                    result[item] = year\n        # \u5c07\u6bcf\u4e00\u500b\u8fb2\u4f5c\u6309\u7167\u5e74\u9f61\u7531\u5927\u5230\u5c0f\u6392\u5e8f\n        sorted_result = sorted(result.items(), key=operator.itemgetter(0))\n\n        # \u628a\u5b57\u5178\u53cd\u8f49\n        reversed_result = defaultdict(dict)\n        for i in sorted_result:\n            reversed_result[i[0]] = i[1]\n\n        # \u53d6\u51fa\u6bcf\u4e00\u500b\u8fb2\u4f5c\u7684\u5e74\u9f61\u7d44\u6210\n        for j in reversed_result:\n            # \u53d6\u51fa\u6bcf\u4e00\u500b\u8fb2\u4f5c\u7684\u5e74\u9f61\u7d44\u6210\n            year = reversed_result[j]\n            # \u53d6\u51fa\u5176\u4e2d\u4e00\u500b\u5e74\u9f61\n            test = list(year.keys())[0]\n            # \u53d6\u51fa\u5176\u4ed6\u5169\u500b\u5e74\u9f61\n            year2 = list(year.keys())[1]\n            year3 = list(year.keys())[2]\n\n            # \u5982\u679c\u5169\u500b\u5e74\u9f61\u7684\u5e74\u9f61\u7d44\u6210\u90fd\u548c\u7b2c\u4e00\u500b\u5e74\u9f61\u4e00\u6a23\uff0c\u5247\u8aaa\u660e\u9019\u5169\u500b\u8fb2\u4f5c\u7686\u6703\u88ab\u62bd\u9078\u8d70\n            if year2[year2.index(test)+1] == test and year3[year3.index(test)+1] == test:\n                return 'YES'\n        return 'NO'"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\nABC = \"\"\nfor i in range(N):\n    ABC += \"ABC\"[i]\n\nprint(ABC)\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\n\"\"\"\n\nN = int(stdin.readline())\n\nprint(\"ABC\" + str(N % 1000))\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(ABD999) == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ABC999') == 'ABC'\nassert solution('ABD999') == 'ABC'\nassert solution('ABD1000') == 'ABC'\nassert solution('ABD1001') == 'ABC'\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\nassert solution(\"912\") == \"ABC\"\nassert solution(\"1\") == \"ABC\"\n\n\"\"\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"999\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC\") == \"ABC\"\nassert solution(\"ABCD\") == \"ABC\"\nassert solution(\"ABCDEF\") == \"ABC\"\nassert solution(\"ABCDEFG\") == \"ABC\"\nassert solution(\"ABCDEFGH\") == \"ABC\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABC\") == \"ABC\"\nassert solution(\"ABC001\") == \"ABC\"\nassert solution(\"ABC000\") == \"ABC\"\nassert solution(\"ABC999\") == \"ABC\"\nassert solution(\"ABC1000\") == \"ABC\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'ABC'\nassert solution('1') == 'ABC'\nassert solution('0') == 'ABC'\nassert solution('999') == 'ABC'\nassert solution('1000') == 'ABD'\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(ABC999) == \"ABC\"\n\nprint(solution(ABC999))\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 4 8 9 15') == 'Yay!'\n\"\"\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n\") == \"Yay!\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n\") == \"Yay!\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n\") == \"Yay!\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n\") == \"Yay!\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n\") == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15\\n') == 'Yay!'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n') == 'Yay!'\nassert solution('1\\n2\\n3\\n4\\n5\\n7\\n') == 'Yay!'\nassert solution('1\\n2\\n3\\n4\\n5\\n7\\n8\\n') == 'Yay!'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n') == 'Yay!'\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"1\\n2\\n4\\n8\\n9\\n15\"\n) == \"Yay!\"\nassert solution(\n    \"1\\n2\\n4\\n8\\n9\\n0\"\n) == \":(\\n\"\nassert solution(\n    \"1\\n2\\n4\\n8\\n9\\n10\"\n) == \":(\\n\"\nassert solution(\n    \"1\\n2\\n4\\n8\\n10\\n11\"\n) == \":)\"\n\nassert solution(\n    \"1\\n2\\n4\\n8\\n11\\n12\"\n) == \":)\""
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15\\n') == 'Yay!'\nassert solution('0\\n2\\n4\\n8\\n9\\n15\\n') == ':(\nassert solution('0\\n2\\n2\\n8\\n9\\n15\\n') == ':(\n\n\"\"\""
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15\\n') == 'Yay!'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n') == ':(\\n'\nassert solution('1\\n2\\n3\\n4\\n5\\n7\\n') == 'Yay!'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n') == ':(\\n'\n\n\"\"\""
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"1\n2\n4\n8\n9\n15\"\"\") == \"Yay!\"\n\"\"\""
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'\nassert solution('1\\n2\\n4\\n8\\n9\\n15\\n16') == 'Yay!'\nassert solution('1\\n2\\n4\\n8\\n9\\n15\\n16\\n17') == 'Yay!'\nassert solution('1\\n2\\n4\\n8\\n9\\n15\\n16\\n17\\n18') == 'Yay!'\nassert solution('1\\n2\\n4\\n8\\n9\\n15\\n16\\n17\\n18\\n19') == 'Yay!'\n\n'''"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3200\") == \"pink\"\nassert solution(\"5200\") == \"red\"\n\"\"\"\na = int(input())\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3200') == 'pink'\nassert solution('3201') =='red'\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"pink\") == \"pink\"\n\"\"\"\n\n\"\"\"\nINPUT:\n3200\nred\n\nOUTPUT:\nred\n\na = 3200 is not less than 3200, so we print s = red.\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3200', 'pink') == 'pink'\n\"\"\"\n\na = int(stdin())\ns = stdin()\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('pink') == 'pink'\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3200\") == \"pink\"\nassert solution(\"2600\") == \"red\"\nassert solution(\"2800\") == \"pink\"\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3200 pIsk\") == \"pIsk\"\nassert solution(\"pink\") == \"pink\"\n\"\"\"\n\na = int(input())\ns = input()\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3200') == 'pink'\nassert solution('3500') =='red'\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('pink') == 'pink'\nassert solution('yellow') =='red'\n\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1200') == 'ABC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1199') == 'ABC'\n\"\"\"\n\nr = int(input())"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1338') == 'ABC'\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1111\") == \"ABC\"\nassert solution(\"2999\") == \"ARC\"\nassert solution(\"1200\") == \"ABC\"\nassert solution(\"2501\") == \"ARC\"\nassert solution(\"3000\") == \"AGC\"\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'ABC'\nassert solution('ABC') == 'ABC'\nassert solution('ABC') == 'ABC'\nassert solution('ABC') == 'ABC'\nassert solution('ABC') == 'ABC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1234') == '1234'\nassert solution('12345') == '1234'\nassert solution('123456') == '1234'\n\n'''\n\nR = int(input())"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == \"ABC\"\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == 'A'\nassert solution('2') == 'B'\nassert solution('3') == 'C'\nassert solution('4') == 'D'\nassert solution('5') == 'E'\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1199') == 'ABC'\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(0) == \"ABC\"\nassert solution(1) == \"ARC\"\nassert solution(2) == \"AGC\"\nassert solution(3) == \"ABC\"\nassert solution(4) == \"ARC\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('111') == '999'\nassert solution('9') == '1'\nassert solution('119') == '991'\n\nprint(solution('111'))\nprint(solution('9'))\nprint(solution('119'))\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123\") == \"321\"\nassert solution(\"199\") == \"999\"\nassert solution(\"201\") == \"1001\"\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11') == '1'\nassert solution('9') == '9'\nassert solution('1111') == '1'\nassert solution('9') == '9'\nassert solution('1010') == '1'\n\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9111') == '9911'\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('119') == '991'\n\"\"\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"111\") == \"999\"\nassert solution(\"999\") == \"111\"\nassert solution(\"101\") == \"101\"\nassert solution(\"299\") == \"999\"\nassert solution(\"999\") == \"999\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"101\") == \"99\"\nassert solution(\"9\") == \"1\"\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1011') == '1111'\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"119\") == \"991\"\nprint(solution(\"119\"))\n\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"119\") == \"991\"\n\"\"\""
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\nassert solution(\"abbcc\") == \"abbcc\"\n\"\"\"\n\n\nfrom collections import Counter\nimport string"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_str) == solution_ref(test_str)"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\""
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\"\"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abbaac') == 'abac'\nassert solution('ac') == 'ac'\nassert solution('bccddaaf') == 'bcdaf'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\"\"\""
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\n\n\"\"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\n\"\"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 4\") == \"2\"\nassert solution(\"13 9\") == \"5\"\nassert solution(\"100 13\") == \"4\"\nassert solution(\"123 456\") == \"333\"\nassert solution(\"92 46\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5\n10 4\n13 9\n100 13\n123 456\n92 46\n\"\"\") == \"2\\n5\\n4\\n333\\n0\"\nprint(\"Cool!\")\nassert solution(\"\"\"\n5\n10 4\n13 9\n100 13\n123 456\n92 46\n\"\"\") == \"2\\n5\\n4\\n333\\n0\"\n\"\"\""
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n10 4\") == \"2\"\nassert solution(\"13 9\") == \"5\"\nassert solution(\"100 13\") == \"4\"\nassert solution(\"123 456\") == \"333\"\nassert solution(\"92 46\") == \"0\"\n\nprint(solution(input()))\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"123\\n4\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 4\") == \"2\"\nassert solution(\"13 9\") == \"5\"\nassert solution(\"100 13\") == \"4\"\nassert solution(\"123 456\") == \"333\"\nassert solution(\"92 46\") == \"0\""
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 4') == '2'\nassert solution('13 9') == '5'\nassert solution('100 13') == '4'\nassert solution('123 456') == '333'\nassert solution('92 46') == '0'\n\nprint(solution(\"10 4\"))\nprint(solution(\"13 9\"))\nprint(solution(\"100 13\"))\nprint(solution(\"123 456\"))\nprint(solution(\"92 46\"))\n\"\"\"\nimport math\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '10 4') == '2'\nassert solution(\n    '13 9') == '5'\nassert solution(\n    '100 13') == '4'\nassert solution(\n    '123 456') == '333'\nassert solution(\n    '92 46') == '0'\n\"\"\""
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n10 4\\n13 9\\n100 13\\n123 456\\n92 46\\n\") == \"2\\n5\\n4\\n333\\n0\"\nprint(\"OK\")\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == test_output_1\n\n-----Solution-----\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 4') == 2\nassert solution('13 9') == 5\nassert solution('100 13') == 4\nassert solution('123 456') == 333\nassert solution('92 46') == 0\n\"\"\""
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == 2.666666666666667\n\"\"\"\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667\n\"\"\"\n\n\nfrom math import ceil\nimport sys"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(sys.stdin.readlines())) == '2.666666666666667'\n\"\"\""
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == \"2.666666666666667\"\n\"\"\"\n\nimport math\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nres = 0\nfor i in range(n - k + 1):\n    res = max(res, math.floor(sum(a[i:i + k]) / k))\n\nprint(res)\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == 2.666666666666667\n\n---"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n3 4 1 2') == 2.666666666666667\n\"\"\"\n\nn, k = map(int, input().split())\n\na = list(map(int, input().split()))\n\nmax_ = 0\nfor i in range(n - k + 1):\n    sum_ = 0\n    for j in range(k):\n        sum_ += a[i + j]\n    if sum_ / k > max_:\n        max_ = sum_ / k\n\nprint(max_)\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == 2.666666666666667\n\"\"\"\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'4 3\\n3 4 1 2'\n) == '2.666666666666667'\n\nassert solution(\n'5 3\\n3 5 4 1 2'\n) == '3.833333333333334'\n\n-----Explanation-----\nIn the first example the segment consists of 3 consecutive days (1, 2 and 4). The average temperature of this segment is (3 + 4 + 1) / 3 = 2.5, which is the maximal value possible for the average temperature. The heat intensity in this segment is 2.5.\n\nIn the second example the segment consists of 5 consecutive days (4, 1, 2, 3 and 5). The average temperature of this segment is (3 + 4 + 1 + 2 + 4) / 5 = 3.8, which is the maximal value possible for the average temperature. The heat intensity in this segment is 3.8.\n\nIn both cases the heat intensity value is 2.666666666666667."
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"YES\"\n\"\"\"\n\nfrom collections import Counter, defaultdict\nfrom typing import List, Set, Dict"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\") == 'YES'\nassert solution(\"4 2\\n4 1 2 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == 'YES'\nassert solution(\"4 2\\n4 1 2 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == 'NO'\nassert solution(\"6 2\\n6 1 2 3 4 5 6\\n1 2 3\\n4 2 5 6\\n2 3 4\\n4 1 5 6\\n3 1 2 4 5 6\\n3 4 5\\n2 4 3\\n4 5 6\\n2 5 3 6\\n5 2 3 6\\n1 6 2 3 4 5\\n5 3 6\\n3 6 4 2 5 1\\n1 6 2 3 4 5\\n5 4 3 6\\n2 4 3 6\\n4 3 6 2 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1\\n1 6 2 3 4 5\\n5 2 3 4 6\\n3 2 4 6 5 1"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'YES'\n\"\"\""
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == 'NO'\nassert solution('1 1') == 'NO'\nassert solution('3 2') == 'YES'\nassert solution('1 2') == 'NO'\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n3 2\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\") == \"YES\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'NO'\n\nassert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'YES'\n\nassert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'NO'\n\nassert solution('1 1\\n4 4\\n4\\n4\\n1 1\\n1 1\\n1\\n') == 'YES'\n\nassert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'NO'"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'YES\\nNO\\nYES\\nYES\\nNO\\nYES\\n'\n\"\"\""
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1 2 3\") == \"NO\"\nassert solution(\"2 1\") == \"NO\"\nassert solution(\"3 2\") == \"YES\"\nassert solution(\"4 2\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2') == 'YES'\nassert solution('1 2 3') == 'NO'\nassert solution('3 2') == 'YES'\nassert solution('4 2') == 'YES'\nassert solution('5 1') == 'YES'\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bab\") == \"baabbb\"\n\"\"\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('baabbb') == 'bab'\nassert solution('ooopppssss') == 'oops'\nassert solution('z') == 'z'\nassert solution('110110111') == '111110111'\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"bab\") == \"baabbb\"\n\nassert solution(\"babbba\") == \"babbaba\"\n\nassert solution(\"abbabbabbbbbbb\") == \"abbabbabbbbbbb\"\n\nassert solution(\"z\") == \"z\"\n\nassert solution(\"aabbb\") == \"aabbb\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"baabbb\") == \"bab\"\n\"\"\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bab\") == \"baabbb\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('baabbb') == 'bab', 'wrong result'\nassert solution('ooopppssss') == 'oops'\nassert solution('z') == 'z'"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('bab') == 'baabbb'\nassert solution('baabbb') == 'bab'\nassert solution('z') == 'z'\n\n\"\"\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('baabbb') == 'bab'\nassert solution('ooopppssss') == 'oops'\n\"\"\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bab\") == \"baabbb\"\nassert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n\n\"\"\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4') == '1'\nassert solution('4 3\\n2 1 3\\n4 3 4\\n2 4 1') == '0'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3') == '0'\nassert solution('5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2') == '2'\nassert solution('1 0') == '0'\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == \"0\"\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n\") == \"1\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"2\"\nassert solution(\"1 0\\n\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == \"0\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 3\\n1 2 1\\n2 3 2\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == \"1\"\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\") == \"1\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n1 1 3\") == \"2\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == \"2\""
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == '1'\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n\") == '0'\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == '0'\nassert solution(\"1 0\\n\") == '0'\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == '2'"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4') == '1'\nassert solution('4 3\\n2 1 3\\n4 3 4\\n2 4 1') == '0'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3') == '0'\nassert solution('1 0\\n') == '0'\nassert solution('5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3') == '2'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''8 10\n1 2 1\n2 3 2\n2 4 5\n1 4 2\n6 3 3\n6 1 3\n3 5 2\n3 7 1\n4 8 1\n6 2 4''') == '1'\nassert solution('''4 3\n2 1 3\n4 3 4\n2 4 1''') == '0'\nassert solution('''3 3\n1 2 1\n2 3 3\n1 3 3''') == '0'\nassert solution('''1 0\n''') == '0'\nassert solution('''5 6\n1 2 2\n2 3 1\n4 5 3\n2 4 2\n1 4 2\n1 5 3''') == '2'"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == \"0\"\n\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\\n\") == \"1\"\n\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"2\"\n\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == \"0\"\n\nassert solution(\"1 0\\n\") == \"0\"\n\n\"\"\"\n\nfrom collections import defaultdict\nfrom itertools import combinations\nfrom math import inf\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\\n\") == \"1\"\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == \"0\"\nassert solution(\"1 0\\n\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"2\""
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n\") == '0'\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == '1'\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\n\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n\") == \"0\"\n\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == \"0\"\n\nassert solution(\"1 0\\n\") == \"0\"\n\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"2\"\n\n\"\"\"\n\nfrom collections import deque, defaultdict\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBGRR\"\nassert solution(\"RR\") == \"RR\"\nassert solution(\"RGBG\") == \"RRRRRRRR\"\nassert solution(\"RGBG\") == \"RRRRRRRR\"\nassert solution(\"RGBG\") == \"RRRRRRRR\"\n\"\"\""
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RGBGRBB\") == '3\\nRGBRGBR'\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\n\"\"\"\n\nimport collections\nimport math\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBGRR\"\nassert solution(\"RRRRRR\") == \"RRRR\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"RGGB\") == \"GG\"\nassert solution(\"RBBB\") == \"RR\"\nassert solution(\"GB\") == \"G\"\nassert solution(\"RB\") == \"R\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\n\"\"\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"RGBGRRR\") == \"RR\"\nassert solution(\"RGBGRRBR\") == \"RRRR\"\nassert solution(\"RGBGRRRR\") == \"RRR\"\nassert solution(\"RGBGRRRRR\") == \"R\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"RGBGR\") == \"RR\"\nassert solution(\"RR\") == \"RR\"\nassert solution(\"GB\") == \"GB\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RGBRGBGR\") == \"RGBRGBR\"\nassert solution(\"GRB\") == \"GRB\"\nassert solution(\"RGBGRRR\") == \"RRR\"\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List, Dict, Set, Union, Tuple, Callable\nfrom functools import reduce\nfrom itertools import combinations\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('RGBGRBB') == 'RGBRGBR'\nassert solution('GRB') == 'GRB'\nassert solution('RGBRBB') == 'GRB'\nassert solution('BB') == 'BB'\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 JPY\\n0.1BTC\") == \"48000.0\"\nprint(\"Test 1:\", solution(\"1 JPY\\n0.1BTC\"), \"48000.0\")\n\nassert solution(\"2 JPY\\n10000 JPY\\n0.1BTC\") == \"48000.0\"\nprint(\"Test 2:\", solution(\"2 JPY\\n10000 JPY\\n0.1BTC\"), \"48000.0\")\n\nassert solution(\"3 JPY\\n10000 JPY\\n0.1BTC\\n1 JPY\\n10000 JPY\\n0.1BTC\") == \"80000.0\"\nprint(\"Test 3:\", solution(\"3 JPY\\n10000 JPY\\n0.1BTC\\n1 JPY\\n10000 JPY\\n0.1BTC\"), \"80000.0\")\n\nassert solution(\"4 JPY\\n10000 JPY\\n0.1BTC\\n1 JPY\\n10000 JPY\\n0.1BTC\\n1 JPY\\n10000 JPY\\n0.1BTC\") == \"80000.0\"\nprint(\"Test 4:\", solution(\"4 JPY\\n10000 JPY\\n0.1BTC\\n1 JPY\\n10000 JPY\\n0.1BTC\\n1 JPY\\n10000 JPY\\n0.1BTC\"), \"80000.0\")\n\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n10000 JPY\\n0.10000000 BTC\\n:\") == \"48000.0\"\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\":\n    1, JPY\n    2, BTC\n    :\n    3, JPY\n    :\n    4, JPY\n    :\n    5, JPY\n    :\n    6, JPY\n    :\n    7, JPY\n    :\n    8, JPY\n    :\n    9, JPY\n    :\n    10, JPY\n    :\n    11, JPY\n    :\n    12, JPY\n    :\n    13, JPY\n    :\n    14, JPY\n    :\n    15, JPY\n    :\n    16, JPY\n    :\n    17, JPY\n    :\n    18, JPY\n    :\n    19, JPY\n    :\n    20, JPY\n    :\n    21, JPY\n    :\n    22, JPY\n    :\n    23, JPY\n    :\n    24, JPY\n    :\n    25, JPY\n    :\n    26, JPY\n    :\n    27, JPY\n    :\n    28, JPY\n    :\n    29, JPY\n    :\n    30, JPY\n    :\n    31, JPY\n    :\n    32, JPY\n    :\n    33, JPY\n    :\n    34, JPY\n    :\n    35, JPY\n    :\n    36, JPY\n    :\n    37, JPY\n    :\n    38, JPY\n    :\n    39, JPY\n    :\n    40, JPY\n    :\n    41, JPY\n    :\n    42, JPY\n    :\n    43, JPY\n    :\n    44, JPY\n    :\n    45, JPY\n    :\n    46, JPY\n    :\n    47, JPY\n    :\n    48, JPY\n    :\n    49, JPY\n    :\n    50, JPY\n    :\n    51, JPY\n    :\n    52, JPY\n    :\n    53, JPY\n    :\n    54, JPY\n    :\n    55, JPY\n    :\n    56, JPY\n    :\n    57, JPY\n    :\n    58, JPY\n    :\n    59, JPY\n    :\n    60, JPY\n    :\n    61, JPY\n    :\n    62, JPY\n    :\n    63, JPY\n    :\n    64, JPY\n    :\n    65, JPY\n    :\n    66, JPY\n    :\n    67, JPY\n    :\n    68, JPY\n    :\n    69, JPY\n    :\n    70, JPY\n    :\n    71, JPY\n    :\n    72, JPY\n    :\n    73, JPY\n    :\n    74, JPY\n    :\n    75, JPY\n    :\n    76, JPY\n    :\n    77, JPY\n    :\n    78, JPY\n    :\n    79, JPY\n    :\n    80, JPY\n    :\n    81, JPY\n    :\n    82, JPY\n    :\n    83, JPY\n    :\n    84, JPY\n    :\n    85, JPY\n    :\n    86, JPY\n    :\n    87, JPY\n    :\n    88, JPY\n    :\n    89, JPY\n    :\n    90, JPY\n    :\n    91, JPY\n    :\n    92, JPY\n    :\n    93, JPY\n    :\n    94, JPY\n    :\n    95, JPY\n    :\n    96, JPY\n    :\n    97, JPY\n    :\n    98, JPY\n    :\n    99, JPY\n    :\n    100, JPY\n    :\n    101, JPY\n    :\n    102, JPY\n    :\n    103, JPY\n    :\n    104, JPY\n    :\n    105, JPY\n    :\n    106, JPY\n    :\n    107, JPY\n    :\n    108, JPY\n    :\n    109, JPY\n    :\n    110, JPY\n    :\n    111, JPY\n    :\n    112, JPY\n    :\n    113, JPY\n    :\n    114, JPY\n    :\n    115, JPY\n    :\n    116, JPY\n    :\n    117, JPY\n    :\n    118, JPY\n    :\n    119, JPY\n    :\n    120, JPY\n    :\n    121, JPY\n    :\n    122, JPY\n    :\n    123, JPY\n    :\n    124, JPY\n    :\n    125, JPY\n    :\n    126, JPY\n    :\n    127, JPY\n    :\n    128, JPY\n    :\n    129, JPY\n    :\n    130, JPY\n    :\n    131, JPY\n    :\n    132, JPY\n    :\n    133, JPY\n    :\n    134, JPY\n    :\n    135, JPY\n    :\n    136, JPY\n    :\n    137, JPY\n    :\n    138, JPY\n    :\n    139, JPY\n    :\n    140, JPY\n    :\n    141, JPY\n    :\n    142, JPY\n    :\n    143, JPY\n    :\n    144, JPY\n    :\n    145, JPY\n    :\n    146, JPY\n    :\n    147, JPY\n    :\n    148, JPY\n    :\n    149, JPY\n    :\n    150, JPY\n    :\n    151, JPY\n    :\n    152, JPY\n    :\n    153, JPY\n    :\n    154, JPY\n    :\n    155, JPY\n    :\n    156, JPY\n    :\n    157, JPY\n    :\n    158, JPY\n    :\n    159, JPY\n    :\n    160, JPY\n    :\n    161, JPY\n    :\n    162, JPY\n    :\n    163, JPY\n    :\n    164, JPY\n    :\n    165, JPY\n    :\n    166, JPY\n    :\n    167, JPY\n    :\n    168, JPY\n    :\n    169, JPY\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10000 JPY\\n0.10000000 BTC') == '48000.0'\n\n-------\n\nWrite 5 lines of code to test the correctness of solution:\nTakahashi received otoshidama (New Year's money gifts) from N of his relatives. You are given N values x_1, x_2,..., x_N and N strings u_1, u_2,..., u_N as input. Each string u_i is either JPY or BTC, and x_i and u_i represent the content of the otoshidama from the i-th relative.\nFor example, if x_1 = 10000 and u_1 = JPY, the otoshidama from the first relative is 10000 Japanese yen; if x_2 = 0.10000000 and u_2 = BTC, the otoshidama from the second relative is 0.1 bitcoins.\nIf we convert the bitcoins into yen at the rate of 380000.0 JPY per 1.0 BTC, how much are the gifts worth in total?\n\n-----Constraints-----\n - 2 \\leq N \\leq 10\n - u_i = JPY or BTC.\n - If u_i = JPY, x_i is an integer such that 1 \\leq x_i \\leq 10^8.\n - If u_i = BTC, x_i is a decimal with 8 decimal digits, such that 0.00000001 \\leq x_i \\leq 100.00000000.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nx_1 u_1\nx_2 u_2\n:\nx_N u_N\n\n-----Output-----\nIf the gifts are worth Y yen in total, print the value Y (not necessarily an integer).\nOutput will be judged correct when the absolute or relative error from the judge's output is at most 10^{-5}.\n\n-----Sample Input-----\n2\n10000 JPY\n0.10000000 BTC\n\n-----Sample Output-----\n48000.0\n\nThe otoshidama from the first relative is 10000 yen. The otoshidama from the second relative is 0.1 bitcoins, which is worth 38000.0 yen if converted at the rate of 380000.0 JPY per 1.0 BTC. The sum of these is 48000.0 yen.\nOutputs such as 48000 and 48000.1 will also be judged correct.\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\") == '48000.0'\n\"\"\"\n\nfrom math import log10\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10000 JPY\\n0.10000000 BTC') == '48000.0'\n\"\"\"\n\nN = int(stdin.readline())\nx_list = []\nu_list = []\nfor _ in range(N):\n    x, u = stdin.readline().split()\n    x_list.append(float(x))\n    u_list.append(u)"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\":\\n2\\n10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\nprint(\"Passed\")\n\"\"\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10000 JPY\\n0.10000000 BTC') == 48000.0\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10000 JPY\\n0.10000000 BTC') == 48000.0\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n') == '3'\nassert solution('4 2\\n') == '3'\nassert solution('4 3\\n') == '4'\nassert solution('5 5\\n') == '4'\nassert solution('10 7\\n') == '7'\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2') == '3'\nassert solution('2 1') == '1'\nassert solution('100 1000') == '999'\n\n\"\"\"\nimport math"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n') == '3'\nprint(solution(stdin))\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2') == '3'\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '4 2\\n') == '3'\nprint('Passed')\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2') == '3'\n\"\"\"\n\nN, i = [int(item) for item in stdin.split()]\nprint(i-1)\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ip cc') == 'icpc'\nassert solution('dp dp') == 'dpdp'\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\nassert solution(\"lk hw rr\") == \"lkhwrr\"\n\"\"\"\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '2'\n    'ip cc'\n) == 'icpc'\n\n------\n\n'''"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\n\"\"\"\nimport unittest\nfrom typing import List"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ip cc') == 'icpc'\n\"\"\"\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ip cc') == 'icpc'"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ip cc') == 'icpc'\nassert solution('ip') == 'ip'\nassert solution('') == ''\n\"\"\"\n\nimport ast\nimport sys\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'abc'\nassert solution('abc ') == 'abc '\nassert solution('ab c') == 'a b c'"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ip cc') == 'icpc'\nprint('Passed')\n\n\"\"\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABA\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABA') == 'Yes'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABA') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABA\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABA') == 'Yes'\nassert solution('ABB') == 'Yes'\nassert solution('BAB') == 'No'\nassert solution('AAB') == 'No'\n\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"BAA\") == \"Yes\"\nassert solution(\"ABA\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"ABB\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('AAA') == 'Yes'\nassert solution('ABA') == 'Yes'\nassert solution('BAA') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"BBA\") == \"Yes\"\nassert solution(\"ABB\") == \"No\"\nassert solution(\"BAB\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"BBA\") == \"No\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('SRS') == '2'\nassert solution('RRS') == '2'\nassert solution('S') == '0'\n\"\"\"\n\n\"\"\"\n\u89e3\u8aac\n\n\u5148\u982d\u304b\u3089\u7d42\u7aef\u307e\u3067\u56de\u3059\n0: S\n1: S\n2: R\n3: R\n4: S\n5: R\n6: R\n7: R\n8: S\n9: S\n10: S\n11: R\n12: R\n13: S\n14: R\n15: R\n16: S\n\n\u5148\u982d\u304b\u3089\u7d42\u7aef\u307e\u3067\u30921\u3064\u305a\u3064\u56de\u3057\u3001rain\u3067\u306a\u3051\u308c\u3070\u6c34\u3067\u3042\u308c\u3070\u30ab\u30a6\u30f3\u30c8\u3059\u308b\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''RRS\nRRR''') == '2'\n\nassert solution('''SRS\nRSS\nRSR\nRRS\n''') == '3'\n\nprint(solution(input()))\n'''"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"SRSR\") == 2\nassert solution(\"SRRS\") == 2\nassert solution(\"RRS\") == 2\nassert solution(\"RRR\") == 1\nassert solution(\"RRSR\") == 2\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('RRR') == 2\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RRR\") == 1\nassert solution(\"RRS\") == 2\nassert solution(\"RRRRS\") == 2\nassert solution(\"RRRRSR\") == 2\nassert solution(\"RRRRSRRSRRSR\") == 2\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RRR\") == 3\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('RRR') == 3\n\"\"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"SRS\") == 2\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RRR\") == 1\nassert solution(\"SRS\") == 1\nassert solution(\"SRSR\") == 2\nassert solution(\"RRSR\") == 3\nassert solution(\"SRSRS\") == 2\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('RRS') == 2\nassert solution('SRS') == 3\nassert solution('SRR') == 3\nassert solution('RRSR') == 3\nassert solution('RRRR') == 4\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3\\n1 2 3') == '3 1 2'\nassert solution('1 2 3\\n2 1 3') == '3 1 2'\nassert solution('1 2 3\\n3 1 2') == '3 1 2'\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n1 2 3\n\"\"\"\n) == \"\"\"\n3 1 2\n\"\"\"\n\nassert solution(\n\"\"\"\n5 6 7\n\"\"\"\n) == \"\"\"\n7 6 5\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 1\") == \"3 1 2\"\nassert solution(\"1 1 2\") == \"2 1 1\"\nassert solution(\"1 2 3\") == \"3 2 1\"\n\nimport os\nimport sys"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3') == '3 1 2'\n\n-------"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n\nassert solution(\"4 5 6\") == \"6 5 4\"\n\nassert solution(\"10 11 12\") == \"12 11 10\"\n\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"2 3 1\") == \"3 1 2\"\nassert solution(\"3 1 2\") == \"1 2 3\"\nassert solution(\"4 5 6\") == \"6 5 4\"\nassert solution(\"2 3 1\") == \"3 1 2\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"1 1 1\") == \"1 1 1\"\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n\"\"\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nprint(\"PASS\")\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('30 100') == '100'\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('30 100') == '100'\n\"\"\"\n\nfrom unittest import TestCase\n\n\nclass Solution:\n    def solve(self, A, B):\n        if A < 0 or A > 100:\n            return None\n        if B < 0 or B > 1000:\n            return None\n\n        if B % 2!= 0:\n            return None\n\n        if 13 <= A <= 100:\n            return B\n        if A <= 6:\n            return 0\n        if A >= 12:\n            return B / 2\n\n        return B / 2 - 1\n\n\nclass TestSolution(TestCase):\n    def test_example_1(self):\n        assert Solution().solve(30, 100) == 100\n\n    def test_example_2(self):\n        assert Solution().solve(100, 100) == 0\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('30 100\\n') == '100'\n'''"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"30 100\") == \"100\"\n\n\"\"\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('30 100') == '100'\n\"\"\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 10\") == \"10\"\n\"\"\"\n\nA, B = list(map(int, input().split()))\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('30 100') == '100'\n\"\"\"\n\na, b = map(int, input().split())\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('30 100') == '100'\n\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('+-') == '2'\n\"\"\"\n\nS = input()\nintegers = [0, 0, 0, 0]\n\nfor s in S:\n    if s == '+':\n        integers[0] += 1\n    elif s == '-':\n        integers[0] -= 1\n    integers[1] = integers[0] // 2\n    integers[2] = integers[0] // 2\n    integers[3] = integers[0] // 2\n\nprint(*integers)"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('+-') == '2'\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"+-\") == \"2\"\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('+-') == '2'\nassert solution('+-++') == '1'\nassert solution('+-+++') == '0'\nassert solution('+-+++-') == '-1'\n\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('+-') == '2'\nassert solution('-+-+') == '0'\nassert solution('+-0') == '2'\nassert solution('0') == '0'\nassert solution('0+') == '1'\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"+-\") == 2\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"+-\") == \"2\"\nassert solution(\"--\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"+-\") == \"2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"+-\") == \"0\"\nassert solution(\"+-++\") == \"1\"\n\nprint(\"Successfully passed!\")\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"+-\") == \"2\"\nprint(\"Test 1 Passed\")\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/06/30') == 'TBD'\n\nimport sys"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/04/29') == 'TBD'\nassert solution('2019/04/32') == 'TBD'\n\"\"\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/29\") == \"TBD\"\n\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/31\") == \"TBD\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2018/04/30\") == \"TBD\"\nassert solution(\"2000/1/1\") == \"TBD\"\n\"\"\"\n\nfrom datetime import datetime\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2020/01/10) == \"TBD\"\nassert solution(2019/04/30) == \"Heisei\"\nassert solution(2019/02/29) == \"TBD\"\n\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/04/29') == 'TBD'\n\"\"\"\nimport datetime\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/31\") == \"TBD\"\nassert solution(\"2020/01/01\") == \"TBD\"\nassert solution(\"2019/04/32\") == \"TBD\"\nassert solution(\"2019/04/33\") == \"TBD\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/02/29\") == \"TBD\"\n\n\"\"\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'\nassert solution('3\\n1337 1337 1337') == '3'\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"18\") == \"14\"\nassert solution(\"10\") == \"9\"\nassert solution(\"3\") == \"3\"\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == 14\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == 9\nassert solution(\"3\\n1337 1337 1337\") == 3\n\"\"\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == '14'\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == '9'\nassert solution(\"3\\n1337 1337 1337\") == '3'\nassert solution(\"1\\n5\") == '1'\nassert solution(\"2\\n7 6\") == '2'\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"18\") == \"14\"\nassert solution(\"10\") == \"9\"\nassert solution(\"3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\n\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'\n\nassert solution('3\\n1337 1337 1337') == '3'\n\n\n\"\"\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'\nassert solution('3\\n1337 1337 1337') == '3'\n\n\n\"\"\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"18 2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == \"14\"\nassert solution(\"10 6 6 3 6 1000000000 3 3 6 6\") == \"9\"\nassert solution(\"3 1337 1337 1337\") == \"3\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == 14\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == 9\nassert solution('3\\n1337 1337 1337') == 3\n\n\n\"\"\""
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'\nassert solution('3\\n1337 1337 1337') == '3'\n\n\n-----Question-----\n\nFind a sequence of contests such that the number of problems in each contest is exactly twice the number of problems in the previous contest.\n\n-----Hints-----\n\nIf you know that the number of problems in the last contest is $K$, you can find the number of problems in the first contest with $2K$ problems.\n\nIf you have $k$ problems in the last contest and $2k$ problems in the previous one, you can always find $2k$ problems in the first contest.\n\nThe number of problems in the first contest can be found with $k + k/2$.\n\nIf the number of problems in the first contest is $k$, then the number of problems in the second one is $2k - 2k/2 = k/2$.\n\nIf the number of problems in the first contest is $k - 1$, then the number of problems in the second one is $2k - 1 = k/2 + 1$.\n\nIf the number of problems in the first contest is $k - 2$, then the number of problems in the second one is $2k - 2 = k/2 + 2$.\n\nAnd so on.\n\nThe number of problems in the last contest can be found with $2k - 2$.\n\nIf the number of problems in the last contest is $2k - 2$, then the number of problems in the first one is $k - 2 = 2k/2 - 1$.\n\nIf the number of problems in the last contest is $2k - 3$, then the number of problems in the first one is $k - 3 = 2k/2 - 2$.\n\nSo on.\n\"\"\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == '2\\n2 1'\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2\\n') == '2\\n2 1'\n\"\"\"\n\nn, k = map(int, input().split())\nids = list(map(int, input().split()))\n\nk_queue = []\n\nfor i in range(k):\n    k_queue.append(0)\n\nid_queue = []\nfor i in range(k):\n    id_queue.append(0)\n\nk_queue_len = k\n\nfor i in range(n):\n    k_queue_len -= 1\n    if k_queue_len < 0:\n        k_queue_len = k - 1\n    if ids[i] in id_queue:\n        continue\n    if ids[i] in k_queue:\n        k_queue.remove(ids[i])\n        k_queue.insert(0, ids[i])\n        id_queue.remove(ids[i])\n        id_queue.insert(0, ids[i])\n    else:\n        while len(k_queue) > 0:\n            if ids[i] < k_queue[-1]:\n                break\n            k_queue.pop()\n            id_queue.pop()\n        k_queue.append(ids[i])\n        id_queue.append(ids[i])\n\nprint(len(k_queue))\nprint(' '.join(map(str, k_queue)))"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2\\n') == '2\\n2 1'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3\\n') == '3\\n1 3 2'\n\"\"\"\n\nn, k = map(int, input().split())\nls = list(map(int, input().split()))\n\nlast_seen = {}\nfor i, v in enumerate(ls):\n    if v in last_seen:\n        if len(last_seen) < k:\n            print(v)\n            for vv in last_seen:\n                print(vv)\n            last_seen[v].append(i)\n            if len(last_seen) == k:\n                print(v)\n                print(last_seen[v][-1])\n                for vv in last_seen[v]:\n                    print(vv)\n    else:\n        last_seen[v] = [i]\n        if len(last_seen) == k:\n            print(v)\n            print(last_seen[v][-1])\n            for vv in last_seen[v]:\n                print(vv)\n    if i < n - 1:\n        print(v, i)\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\nassert solution(\"2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\nassert solution(\"10 4\\n1 2 3 2 1 3 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\n\n\"\"\""
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"7 2\\n1 2 3 2 1 3 2\"\n) == \"2\\n2 1\"\n\nassert solution(\n\"10 4\\n2 3 3 1 1 2 1 2 3 3\"\n) == \"3\\n1 3 2\""
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\nassert solution(\"10 4\\n1 2 3 2 1 3 2\") == \"2\\n1 3 2\"\n\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"7 2\\n\"\n    \"1 2 3 2 1 3 2\\n\"\n) == \"2\\n2 1\"\nassert solution(\n    \"10 4\\n\"\n    \"2 3 3 1 1 2 1 2 3 3\\n\"\n) == \"3\\n1 3 2\""
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\") == \"2\\n2 1\"\nassert solution(\"10 4\") == \"3\\n1 3 2\"\n\"\"\""
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\nassert solution(\"5 2\\n2 2 5 4\\n\") == \"1\\n2 2 4 5\"\n\n\"\"\""
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n8\\n4\\n2\\n1\") == \"1 -1 2 3\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 8 2 4\\n8\\n5\\n14\\n10\") == '1 -1 3 2'\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2\\n8\\n2\\n4\") == \"1\\n-1\\n3\\n2\"\n\"\"\"\n\nn, q = map(int, input().split())\n\ncoins = list(map(int, input().split()))\n\nfor _ in range(q):\n    b = int(input())\n    min_value = 0\n    # print(b)\n    for i in range(n):\n        if b == 0:\n            if min_value == 0:\n                min_value = -1\n            break\n        # print(b, min_value, 2 ** i, b >= 2 ** i)\n        if b >= 2 ** i and min_value == 0:\n            min_value = i + 1\n            continue\n        if b < 2 ** i and min_value == 0:\n            min_value = -1\n            break\n    print(min_value)\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n3\\n1') == '1\\n2\\n-1'\n\"\"\"\n\nimport sys\nfrom typing import List\n\n\nclass Solution:\n    def solution(self, input_str: str) -> str:\n        n, q = input_str.split('\\n')\n        coins = list(map(int, input_str.split('\\n')[1:]))\n        query = list(map(int, input_str.split('\\n')[2:]))\n        n = int(n)\n        q = int(q)\n        max_n = max(coins)\n        min_n = min(coins)\n        if min_n == max_n:\n            return''.join(['1'] * q)\n        else:\n            return''.join(['-1'] * q)\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n1\\n1\\n1\\n1\\n2\\n2\\n2\\n2\\n2\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n6\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7\\n7"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\") == \"1 -1 3 2\"\n\"\"\"\n\nimport math\n\n_, _ = map(int, input().split())\na = list(map(int, input().split()))\nfor _ in range(int(input())):\n    print(math.floor(math.log(int(input()), 2)) + 1)\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n1 1\\n2\\n3\\n4\\n2 2') == '3'\n\"\"\"\n\nn, q = map(int, stdin.readline().split())\narr = list(map(int, stdin.readline().split()))\na = list(map(int, stdin.readline().split()))\n\nfor i in range(q):\n    b = int(stdin.readline())\n    x = 1\n    t = 2\n    while t < n:\n        t *= 2\n        x += 1\n    x -= 1\n    t = 2 ** x\n    while t > 0:\n        if t >= b:\n            t //= a[x]\n            x -= 1\n        else:\n            x -= 1\n    print(x + 1)\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 4 8 2 4\\n8\\n5\\n14\\n10\\n') == '1 -1 3 2 2'\n\"\"\""
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n4 5\\n2 4\\n1 3\\n2 5\\n2 4\\n1 4\\n2 3\\n1 2\\n2 5\\n2 5\\n1 5\\n1 5\\n1 2\\n1 3\\n1 4\\n2 2\\n2 1\\n1 4\\n1 2\\n1 2\\n2 2\\n2 3\\n1 4\\n2 4\\n2 3\\n2 4\\n1 4\\n1 2\\n1 3\\n1 4\\n2 3\\n1 4\\n1 4\\n2 3\\n1 4\\n2 2\\n2 5\\n2 4\\n1 5\\n2 2\\n1 2\\n2 4\\n1 2\\n1 2\\n1 3\\n1 4\\n1 4\\n2 4\\n2 4\\n1 4\\n1 3\\n2 2\\n2 3\\n1 4\\n1 4\\n2 5\\n2 3\\n2 4\\n2 4\\n2 5\\n1 5\\n1 4\\n1 3\\n1 4\\n1 5\\n2 4\\n1 2\\n1 3\\n2 5\\n1 3\\n1 4\\n1 3\\n2 4\\n1 2\\n2 4\\n1 2\\n1 3\\n1 4\\n2 5\\n2 4\\n1 2\\n2 3\\n2 4\\n1 2\\n1 5\\n1 4\\n1 3\\n2 2\\n1 5\\n2 2\\n1 4\\n2 2\\n2 3\\n1 3\\n1 2\\n1 5\\n1 2\\n1 5\\n1 3\\n1 5\\n2 2\\n1 3\\n2 4\\n1 2\\n1 4\\n1 2\\n1 4\\n1 4\\n1 2\\n1 5\\n2 2\\n1 2\\n1 2\\n1 5\\n2 2\\n1 4\\n1 5\\n1 5\\n2 4\\n2 4\\n2 4\\n2 3\\n2 2\\n1 3\\n2 2\\n1 2\\n1 2\\n2 3\\n2 4\\n1 4\\n1 3\\n1 5\\n1 2\\n2 2\\n1 2\\n1 2\\n1 4\\n1 3\\n1 2\\n2 2\\n1 4\\n1 5\\n1 2\\n2 4\\n2 5\\n2 2\\n1 3\\n1 2\\n1 4\\n1 5\\n1 3\\n1 3\\n1 4\\n1 2\\n1 2\\n1 4\\n1 5\\n1 2\\n1 2\\n1 4\\n2 4\\n1 2\\n1 5\\n1 2\\n1 2\\n1 5\\n1 2\\n1 4\\n1 3\\n1 5\\n1 4\\n1 5\\n1 3\\n1 2\\n1 4\\n1 2\\n1 2\\n1 5\\n1 2\\n1 5\\n1 3\\n1 5\\n2 2\\n2 4\\n1 4\\n1 4\\n1 2\\n1 5\\n1 4\\n1 5\\n1 3\\n1 5\\n1 5\\n1 2\\n1 4\\n1 2\\n1 2\\n1 3\\n1 3\\n1 5\\n2 3\\n2 2\\n2 4\\n1 2\\n1 2\\n1 4\\n1 5\\n1 4\\n1 4\\n1 3\\n1 5\\n2 2\\n2 4\\n1 2\\n1 2\\n1 2\\n1 3\\n2 4\\n2 2\\n1 3\\n1 2\\n1 2\\n1 5\\n1 2\\n1 4\\n1 5\\n1 3\\n1 2\\n1 3\\n1 4\\n1 5\\n1 3\\n1 4\\n1 5\\n1 2\\n1 4\\n1 2\\n1 3\\n1 2\\n1 4\\n1 5\\n1 5\\n1 4\\n1 5\\n1 4\\n1 2\\n1 4\\n1 3\\n1 5\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 3\\n1 4\\n1 5\\n1 4\\n1 4\\n1 2\\n1 4\\n1 2\\n1 5\\n1 4\\n1 5\\n1 3\\n1 5\\n1 5\\n1 4\\n1 5\\n1 4\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 5\\n1 2\\n1 2\\n1 5\\n1 2\\n1 2\\n1 2\\n1 4\\n1 5\\n1 5\\n1 4\\n1 4\\n1 2\\n1 3\\n1 2\\n1 4\\n1 4\\n1 3\\n1 5\\n1 5\\n1 2\\n1 4\\n1 5\\n1 3\\n1 2\\n1 5\\n1 5\\n1 5\\n1 5\\n1 4\\n1 5\\n1 5\\n1 5\\n1 5\\n1 2\\n1 4\\n1 2\\n1 2\\n1 2\\n1 5\\n1 4\\n1 3\\n1 2\\n1 2\\n1 2\\n1 3\\n1 5\\n1 2\\n1 5\\n1 2\\n1 5\\n1 2\\n1 4\\n1 2\\n1 2\\n1 5\\n1 4\\n1 2\\n1 5\\n1 5\\n1 2\\n1 2\\n1 5\\n1 4\\n1 4\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 5\\n1 2\\n1 5\\n1 2\\n1 5\\n1 2\\n1 4\\n1 2\\n1 2\\n1 2\\n1 2\\n1 4\\n1 5\\n1 5\\n1 5\\n1 5\\n1 5\\n1 4\\n1 5\\n1 5\\n1 5\\n1 5\\n1"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 8 2 4\\n8\\n5\\n14\\n10\\n') == '1 -1 3 2'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '0'\nassert solution('3 3') == '0'\nassert solution('2 2 2') == '0'\nassert solution('1 2 2 2') == '0'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == \"21\"\n\n\"\"\"\nfrom collections import Counter\n\nfrom utils import timing\n\ninput_n, input_k = [int(x) for x in input().split()]\nfav_nums = [int(x) for x in input().split()]\ncount = [int(x) for x in input().split()]\nassert len(count) == input_n * input_k\nassert len(fav_nums) == input_n\n\nsorted_count = sorted(count, reverse=True)\nassert all(x <= input_k for x in sorted_count)\n\ncount_counter = Counter(count)\n\nresult = 0\ncount_dict = {}\nfor i in range(input_k, 0, -1):\n    fav_num = fav_nums[count_counter[i]]\n    if count_dict.get(fav_num, 0) < i:\n        count_dict[fav_num] = i\n    else:\n        continue\n    result += i\n\nfor key, value in count_dict.items():\n    result += value\n\nprint(result)\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\") == \"21\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\") == '21'\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == '0'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 3\n1 3 2 8 5 5 8 2 2 8 5 2''') == '21'\nassert solution('''3 3\n9 9 9 9 9 9 9 9 9 9''') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\\n\") == \"21\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7') == '21'\n\nassert solution('3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == '0'\n\nprint('Success')"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == \"21\"\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == \"0\"\n\"\"\"\n\n\nclass Player:\n    def __init__(self, f: int, cards: str):\n        self.cards = cards\n        self.f = f\n\n    def get_cards(self) -> str:\n        return self.cards\n\n    def get_f(self) -> int:\n        return self.f\n\n    def set_f(self, f: int):\n        self.f = f\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 1 1') == 0\n\"\"\""
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == '2\\n1 2 3\\n1 1 2\\n'\nassert solution(\"3\\n2 8 10\") == '2\\n2 2 1\\n'\nassert solution(\"4\\n1 1 1 1\") == '0\\n'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2 8 10') == '2\\n2 2 1'\n\"\"\""
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n') == '1 2 3\\n1 1 2\\n1 2 1\\n1 3 2\\n1 4 2\\n1 5 2\\n2 1 3\\n2 2 1\\n2 3 1\\n2 4 2\\n2 5 2\\n3 1 4\\n3 2 4\\n3 4 1\\n3 5 2\\n4 1 5\\n4 2 5\\n4 5 1\\n4 6 2\\n5 1 6\\n5 2 6\\n5 6 1\\n5 7 2\\n6 1 7\\n6 2 7\\n6 7 1\\n6 8 2\\n7 1 8\\n7 2 8\\n7 8 1\\n7 9 2\\n8 1 9\\n8 2 9\\n8 9 1\\n8 10 2\\n9 1 10\\n9 2 10\\n9 10 1\\n9 11 2\\n10 1 11\\n10 2 11\\n10 11 1\\n10 12 2\\n11 1 12\\n11 2 12\\n11 12 1\\n11 13 2\\n12 1 13\\n12 2 13\\n12 13 1\\n12 14 2\\n13 1 14\\n13 2 14\\n13 14 1\\n13 15 2\\n14 1 15\\n14 2 15\\n14 15 1\\n14 16 2\\n15 1 16\\n15 2 16\\n15 16 1\\n15 17 2\\n16 1 17\\n16 2 17\\n16 17 1\\n16 18 2\\n17 1 18\\n17 2 18\\n17 18 1\\n17 19 2\\n18 1 19\\n18 2 19\\n18 19 1\\n18 20 2\\n19 1 20\\n19 2 20\\n19 20 1\\n19 21 2\\n20 1 21\\n20 2 21\\n20 21 1\\n20 22 2\\n21 1 22\\n21 2 22\\n21 22 1\\n21 23 2\\n22 1 23\\n22 2 23\\n22 23 1\\n22 24 2\\n23 1 24\\n23 2 24\\n23 24 1\\n23 25 2\\n24 1 25\\n24 2 25\\n24 25 1\\n24 26 2\\n25 1 26\\n25 2 26\\n25 26 1\\n25 27 2\\n26 1 27\\n26 2 27\\n26 27 1\\n26 28 2\\n27 1 28\\n27 2 28\\n27 28 1\\n27 29 2\\n28 1 29\\n28 2 29\\n28 29 1\\n28 30 2\\n29 1 30\\n29 2 30\\n29 30 1\\n29 31 2\\n30 1 31\\n30 2 31\\n30 31 1\\n30 32 2\\n31 1 32\\n31 2 32\\n31 32 1\\n31 33 2\\n32 1 33\\n32 2 33\\n32 33 1\\n32 34 2\\n33 1 34\\n33 2 34\\n33 34 1\\n33 35 2\\n34 1 35\\n34 2 35\\n34 35 1\\n34 36 2\\n35 1 36\\n35 2 36\\n35 36 1\\n35 37 2\\n36 1 37\\n36 2 37\\n36 37 1\\n36 38 2\\n37 1 38\\n37 2 38\\n37 38 1\\n37 39 2\\n38 1 39\\n38 2 39\\n38 39 1\\n38 40 2\\n39 1 40\\n39 2 40\\n39 40 1\\n39 41 2\\n40 1 41\\n40 2 41\\n40 41 1\\n40 42 2\\n41 1 42\\n41 2 42\\n41 42 1\\n41 43 2\\n42 1 43\\n42 2 43\\n42 43 1\\n42 44 2\\n43 1 44\\n43 2 44\\n43 44 1\\n43 45 2\\n44 1 45\\n44 2 45\\n44 45 1\\n44 46 2\\n45 1 46\\n45 2 46\\n45 46 1\\n45 47 2\\n46 1 47\\n46 2 47\\n46 47 1\\n46 48 2\\n47 1 48\\n47 2 48\\n47 48 1\\n47 49 2\\n48 1 49\\n48 2 49\\n48 49 1\\n48 50 2\\n49 1 50\\n49 2 50\\n49 50 1\\n49 51 2\\n50 1 51\\n50 2 51\\n50 51 1\\n50 52 2\\n51 1 52\\n51 2 52\\n51 52 1\\n51 53 2\\n52 1 53\\n52 2 53\\n52 53 1\\n52 54 2\\n53 1 54\\n53 2 54\\n53 54 1\\n53 55 2\\n54 1 55\\n54 2 55\\n54 55 1\\n54 56 2\\n55 1 56\\n55 2 56\\n55 56 1\\n55 57 2\\n56 1 57\\n56 2 57\\n56 57 1\\n56 58 2\\n57 1 58\\n57 2 58\\n57 58 1\\n57 59 2\\n58 1 59\\n58 2 59\\n58 59 1\\n58 60 2\\n59 1 60\\n59 2 60\\n59 60 1\\n59 61 2\\n60 1 61\\n60 2 61\\n60 61 1\\n60 62 2\\n61 1 62\\n61 2 62\\n61 62 1\\n61 63 2\\n62 1 63\\n62 2 63\\n62 63 1\\n62 64 2\\n63 1 64\\n63 2 64\\n63 64 1\\n63 65 2\\n64 1 65\\n64 2 65\\n64 65 1\\n64 66 2\\n65 1 66\\n65 2 66\\n65 66 1\\n65 67 2\\n66 1 67\\n66 2 67\\n66 67 1\\n66 68 2\\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 4 6 6 6\\n') == '2\\n1 2 3\\n1 1 2\\n'\nassert solution('3\\n2 8 10\\n') == '2\\n2 2 1\\n'\nassert solution('4\\n1 1 1 1\\n') == '0\\n'\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n2 4 6 6 6\n''') == '2'\n\nassert solution('''3\n2 8 10\n''') == '2'\n\nassert solution('''4\n1 1 1 1\n''') == '0'\n\nassert solution('''4\n2 8 10\n2 8 10\n''') == '2'\n\nassert solution('''5\n2 4 6 6 6\n''') == '2'"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 4 6 6 6\\n\") == \"2\"\nassert solution(\"5\\n4 5 4 5 4\\n\") == \"3\"\nassert solution(\"3\\n8 10\\n\") == \"2\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"0\"\nassert solution(\"4\\n4 4 4 4\\n\") == \"0\"\nprint(\"Passed!\")"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == \"2\\n1 2 3\\n1 1 2\\n\"\nassert solution(\"3\\n2 8 10\") == \"2\\n2 2 1\\n\"\n\"\"\""
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 6 6 6\") == \"2\"\nassert solution(\"2 8 10\") == \"2\"\nassert solution(\"1 1 1 1\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 6 6 6\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"6 1\\n\"\n    \"100010\\n\"\n    \"6 2\\n\"\n    \"000000\\n\"\n    \"5 1\\n\"\n    \"10101\\n\"\n    \"3 1\\n\"\n    \"001\\n\"\n    \"2 2\\n\"\n    \"00\\n\"\n    \"1 1\\n\"\n    \"0\\n\"\n) == \"1\\n2\\n0\\n1\\n1\\n1\"\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"11111111\") == 0\nassert solution(\"10100100\") == 2\nassert solution(\"10011001\") == 1\n\"\"\"\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10100100\") == 2\nassert solution(\"11111111\") == 0\nassert solution(\"10110110\") == 1\nassert solution(\"10010001\") == 1\n\n\"\"\"\nimport math"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10100100\") == 2\nassert solution(\"11111111\") == 0\nassert solution(\"00000000\") == 0\nassert solution(\"00100000\") == 1\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10000010\") == 2\nassert solution(\"00000000\") == 0\nassert solution(\"00100000\") == 1\nassert solution(\"10100100\") == 2\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10101\") == 2\nassert solution(\"10100\") == 0\nassert solution(\"11110\") == 1\nassert solution(\"110011\") == 2\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"101010\") == 2\nassert solution(\"0101010\") == 0\nassert solution(\"10011010\") == 1\nassert solution(\"100101010\") == 2\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100010\") == \"1\"\nassert solution(\"100101\") == \"2\"\nassert solution(\"11101\") == \"0\"\nassert solution(\"1011111\") == \"1\"\nassert solution(\"11111\") == \"1\"\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100010') == 1\nassert solution('10101') == 2\nassert solution('000000') == 0\nassert solution('00100010') == 1\nassert solution
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == 3\n\nassert solution('29 30\\n30 30\\n29 29\\n28 30\\n30 30') == 3\n\nassert solution('2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3') == 4\n\n\"\"\"\nimport sys\n\nlines = sys.stdin.readlines()\nn, k = list(map(int, lines[0].split()))\n\ns = set()\n\nfor line in lines[1:]:\n    l, r = list(map(int, line.split()))\n    for i in range(l, r+1):\n        s.add(i)\n\nbad = set()\nfor i, line in enumerate(lines):\n    l, r = list(map(int, line.split()))\n    for j in range(l, r+1):\n        if j in s:\n            bad.add(i)\n\nto_remove = set()\nfor i in range(k):\n    to_remove |= bad\n\nwhile bad:\n    bad -= to_remove\n\nprint(len(to_remove))\n\nfor i in sorted(to_remove):\n    print(i+1, end=' ')\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1') == '0 1'\nassert solution('7 2') == '1 2'\nassert solution('7 4') == '2 3 4'\nassert solution('7 3') == '2 3 4'\nassert solution('7 5') == '0 1 2 3'\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input))"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n4 6 7'\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30') == '3\\n1 4 5'\nassert solution('6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3') == '4\\n1 3 5 6'\n\"\"\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n4 6 7'\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30') == '3\\n1 4 5'\n\n-----\n'''\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == '3\\n4 6 7'\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == '3\\n4 6 7'\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == '3\\n1 4 5'\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == '4\\n1 3 5 6'\nassert solution(\"7 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == '4\\n1 3 5 6'\n\"\"\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n4 6 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\") == \"3\\n1 4 5\"\n\nprint(solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n'))\nprint(solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n'))\n\nassert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n4 6 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\") == \"3\\n1 4 5\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\"\n\n\"\"\"\n\n\nimport sys\nimport math\nfrom collections import defaultdict"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == '3\\n4 6 7'\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == '3\\n1 4 5'\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == '4\\n1 3 5 6'\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n') == '30\\n31\\n10'\n\"\"\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n\") == \"30\\n31\\n10\"\n\"\"\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n\") == \"30\\n31\\n10\"\nassert solution(\"3\\n3 4 6\\n\") == \"10\"\n\n\"\"\"\nfrom functools import reduce\nimport sys\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\") == \"30\"\nassert solution(\"3\\n3 4 6\\n\") == \"10\"\n\"\"\"\n\nimport sys\nimport heapq\n\nassert len(sys.argv) == 2\nlines = open(sys.argv[1]).readlines()\n\nq = int(lines[0])\n\nproblems = [int(i) for i in lines[1].split(\" \")]\n\nheap = []\nheapq.heapify(heap)\nfor i in range(len(problems)):\n    heapq.heappush(heap, -problems[i])\n\nanswer = 0\n\nfor i in range(q):\n    answer = heapq.heappop(heap)\n    heapq.heappush(heap, answer + 1)\n\nprint(answer)\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\n5 6 15 30\n4\n10 6 30 15\n3\n3 4 6''') == '30\\n31\\n10'\n\n'''\nIn the example above the optimal contest consists of two problems from the first query, and one problem from the second query. The cumulative prettiness of the contest is:\n\n30 + 6 = 36\n30 + 6 + 15 = 36\n10 + 6 = 16\n10 + 6 + 15 = 31\nSo the maximum possible cumulative prettiness of the contest is 36.\n\nIn the third query the optimal contest consists of only one problem from the query:\n\n30 + 6 = 36\n\nAnd the cumulative prettiness of the contest is 36.\n\n'''"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n0\\n0\\n0') == '0'\nassert solution('1\\n1\\n0\\n1') == '1'\nassert solution('1\\n1\\n0\\n0\\n0') == '1'\nassert solution('2\\n3\\n1\\n0\\n1') == '3'\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n5 6 15 30') == '30'\nassert solution('4\\n10 6 30 15') == '31'\nassert solution('3\\n3 4 6') == '10'\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5 6 15 30\") == \"30\\n\"\nassert solution(\"4\\n10 6 30 15\") == \"31\\n\"\nassert solution(\"3\\n3 4 6\") == \"10\\n\"\n\n\n'''\n\nfrom itertools import permutations\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n\") == \"30\\n31\\n10\"\n\"\"\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_0) == test_output_0\n\"\"\"\n\nwith open(\"task-2.txt\") as f:\n    n = int(f.readline())\n    a = list(map(int, f.readline().split()))\n    q = int(f.readline())\n    b = []\n    for i in range(q):\n        s = f.readline()\n        s = s.split()\n        n = int(s[0])\n        c = int(s[1])\n        b.append([n, c])\n    print(b)\n    "
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2\\n10 1 20\\n2\\n3 6\") == \"2\\n1\\n2\\n1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\nassert solution(\"6\\n1\\n2\\n1\\n2\\n3\\n1\") == \"3\"\nassert solution(\"7\\n1\\n2\\n3\\n4\\n5\\n6\\n1\") == \"1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '2'\nassert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '1'\n\"\"\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2\\n10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\n\"\"\""
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"2\\n1\\n2\\n1\"\nassert solution(\"4\\n1\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42\") == \"1\\n2\\n2\\n1\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100') == '2\\n1\\n2\\n1'\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\") == \"2\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\") == \"1\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\") == \"2\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\") == \"1\"\n\n\nassert solution(\"4\\n1\\n42\") == \"1\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str([4,2,10,1,20]) == 2)\nassert solution(str([2,3,6,5,4,99,100]) == 2)\nassert solution(str([42])) == 1\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2\\n3\\n4\\n99\\n100\") == \"2\\n1\\n2\\n1\"\nassert solution(\"5\\n2\\n3\\n4\\n99\\n100\") == \"2\\n1\\n2\\n1\"\nassert solution(\"1\\n42\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n1 1 1 1') == ''\nassert solution('1\\n2 1 1 1') == 'YES'\nassert solution('1\\n2 1 1 2') == 'YES'\nassert solution('1\\n2 1 1 3') == 'NO'"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str([1,2,3,4])) == \"YES\"\nassert solution(str([1,2,3,6])) == \"NO\"\nassert solution(str([5,2,6,27])) == \"YES\"\nassert solution(str([3,3,5,18])) == \"NO\"\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 3 6\\n1 2 3 6\\n5 2 6 27\\n3 3 5 18') == 'YES\\nNO\\nNO\\nYES'\nassert solution('3 3 5 18\\n4 2 6 27\\n1 2 3 6') == 'NO\\nNO\\nYES'\n\"\"\"\n\n\nimport sys\nimport itertools\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 6\") == \"NO\"\nassert solution(\"5 2 6 27\") == \"NO\"\nassert solution(\"3 3 5 18\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4\\n1 2 3 6') == 'YES'\nassert solution('5 2 6 27\\n3 3 5 18') == 'NO'\nassert solution('5 2 6 27\\n3 3 5 18') == 'NO'\nassert solution('1 2 3 4\\n1 2 3 6') == 'YES'\nassert solution('1 2 3 4\\n1 2 3 6') == 'YES'\n\n-----Constraints-----\n1 <= a <= 10^9\n1 <= b <= 10^9\n1 <= n <= 10^9\n0 <= S <= 10^9\n0 <= x, y <= a\n\n\"\"\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 3 6\\n1 2 3 6\") == \"YES\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(expected_output)\n\"\"\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\\n1 2 3 6\") == \"YES\"\n\"\"\"\nfrom math import gcd"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 6\") == \"NO\"\nassert solution(\"5 2 6 27\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 4\") == 'YES'\n\"\"\""
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 2 7 3 3 1 4') == 'YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n'\nassert solution('5 4 3 2 1 0') == 'YES\\n1\\n3\\n4\\n5 4 3 1\\n'\nassert solution('5 0 4 3 2 1') == 'YES\\n0\\n3\\n4\\n5 4 3 1\\n'\nassert solution('5 2 4 3 1 0') == 'NO\\n'\nassert solution('0 1 2 3 4') == 'YES\\n0\\n'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 4 3 2 1 0\") == \"YES\"\nassert solution(\"1 1 2 1 2\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n\"\nassert solution(\"5 4 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\nassert solution(\"5 1 1 2 1 2\") == \"NO\\n\"\nassert solution(\"5 0 1 2 3 4\") == \"YES\\n0\\n\"\nassert solution(\"4 3 2 1 0\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\n\n\"\"\""
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 3 1 4 2 3\") == \"YES\"\nassert solution(\"5 1 4 3 2 3\") == \"NO\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n\"\nassert solution(\n\"5 4 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\nassert solution(\n\"5 0\") == \"YES\\n1\\n3\\n4\\n5 0\\n\"\nassert solution(\n\"1 1 2 1 2\") == \"NO\\n\"\nassert solution(\n\"0 1 2 3 4\") == \"YES\\n0\\n\""
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 4 3 2 1 0\") == \"YES\"\nassert solution(\"5 4 3 2 1\") == \"NO\"\nassert solution(\"5 4 3 2 1 2\") == \"NO\"\nassert solution(\"4 3 1 5 3\") == \"YES\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n4 3 1 5 3\\n') == 'YES\\n1\\n3\\n5 4 3 1\\n'\nassert solution('5\\n0 1 2 3 4\\n') == 'YES\\n0\\n'\nassert solution('5\\n0 1 2 3 4\\n') == 'YES\\n0\\n'\nassert solution('5\\n0 1 2 3 4\\n') == 'YES\\n0\\n'\nassert solution('5\\n0 1 2 3 4\\n') == 'YES\\n0\\n'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\"\nassert solution(\"5 4 3 1 5 3\") == \"YES\\n1\\n3\\n4 5\\n5 4 3 1\"\nassert solution(\"5 1 1 2 1 2\") == \"NO\"\nassert solution(\"5 0 1 2 1 2\") == \"YES\\n0\\n1 2 3 4 5\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n\"\nassert solution(\"5 4 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 5 4 3 1\\n\"\nassert solution(\"5 1 1 2 1 2\") == \"NO\\n\"\nassert solution(\"5 0 1 2 1 2\") == \"YES\\n0\\n\"\nassert solution(\"1 1 2 1 2\") == \"NO\\n\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == 'YES\\n2\\n3 7\\n5\\n7 4 3 2 1'\nassert solution(\"5 3 1 5 3\") == 'YES\\n1\\n3\\n4\\n5 4 3 1'\nassert solution(\"5 1 1 2 1 2\") == 'NO'\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1') == '-1'\n\n\"\"\"\n\nfrom sys import stdin\n\nn, k = map(int, stdin.readline().split())\nbooks = [list(map(int, stdin.readline().split())) for _ in range(n)]\nbooks.sort()\nalice = 0\nbob = 0\ncurrent_sum = 0\n\nfor book in books:\n    current_sum += book[0]\n    if book[1] == 1:\n        alice += book[2]\n    else:\n        bob += book[2]\n    if alice >= k and bob >= k:\n        print(current_sum)\n        break\nelse:\n    print(-1)\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"9\"\nassert solution(\"3 2\") == \"6\"\nassert solution(\"8 3\") == \"17\"\nassert solution(\"5 2\") == \"8\"\nassert solution(\"3 1\") == \"6\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n\"\"\") == \"18\"\nassert solution(\"\"\"5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 1\n\"\"\") == \"8\"\n\nassert solution(\"\"\"5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n\"\"\") == \"-1\""
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == \"18\"\n\"\"\""
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n''') == '18'\n\nassert solution('''\n5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 1\n''') == '8'\n\nassert solution('''\n5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n''') == '-1'\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n\"\"\") == \"18\"\nassert solution(\"\"\"\n5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 1\n\"\"\") == \"8\"\nassert solution(\"\"\"\n5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n\"\"\") == \"-1\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n\"\"\") == \"18\"\n\nassert solution(\"\"\"5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 1\n\"\"\") == \"8\"\n\nassert solution(\"\"\"5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n\"\"\") == \"-1\"\n\n-----Debug-----"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n\") == 18\n\n\"\"\"\n\nfrom collections import defaultdict, deque\nfrom itertools import islice"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n\"\"\") == '18'\nassert solution(\"\"\"5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 1\n\"\"\") == '8'\nassert solution(\"\"\"5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n\"\"\") == '-1'\n\"\"\""
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5') == '2\\n6\\n-1\\n7'\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n\"\"\"\n) == \"2\"\nassert solution(\n\"\"\"\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n\"\"\"\n) == \"6\"\nassert solution(\n\"\"\"\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n\"\"\"\n) == \"-1\"\nassert solution(\n\"\"\"\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n\"\"\"\n) == \"7\"\n\n\"\"\"\nInput\n4\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n\nOutput\n2\n6\n-1\n7\n\"\"\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input) == output\n\"\"\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '3'\nassert solution('1 2 3\\n4 5 6') == '6'\nassert solution('1 2 3\\n4 5 6\\n7 8 9') == '9'\nassert solution('1 2 3\\n4 5 6\\n7 8 9\\n10 11 12') == '12'\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n') == '2\\n6\\n-1\\n7'\n\"\"\"\n\n\nfrom __future__ import annotations\nimport sys\nfrom collections import defaultdict\nfrom typing import List\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '2'\nassert solution('''\n7 3\n4 9 4 5 7 7 6\n5 1\n10 9 7 1 2 2\n8 4\n1 1 1 1 1 1 1\n5 3\n3 7 6 4 1 2\n3 2\n2 2\n2 2\n3 3\n3 3\n''') == '6'\nassert solution('''\n8 1\n1 1 1 1 1 1 1\n5 1\n10 9 7 1 2 2\n8 4\n1 1 1 1 1 1 1\n5 3\n3 7 6 4 1 2\n3 2\n2 2\n2 2\n3 3\n3 3\n''') == '6'\nassert solution('''\n7 1\n1 1 1 1 1 1 1\n5 1\n10 9 7 1 2 2\n8 4\n1 1 1 1 1 1 1\n5 3\n3 7 6 4 1 2\n3 2\n2 2\n2 2\n3 3\n3 3\n''') == '-1'\nassert solution('''\n8 2\n2 3 4 5 6 7 8 9\n8 2\n1 2 3 4 5 6 7 8\n''') == '1'\n\n-----Bite-----\n\nCreate an algorithm that takes the old price of each product and the maximum difference $k$ that can be changed for each product. It should return the maximum price possible for all products.\n\nThe best approach would be to sort the products from the highest price to the lowest and then always increase the price for the current product. So you can just iterate the array from the end."
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n1 1 2 3 1\") == \"2\"\nassert solution(\"5 1\\n1 1 2 3 1\") == \"2\"\nassert solution(\"4 2\\n6 4 8 5\") == \"6\"\nassert solution(\"2 2\\n1 6\") == \"-1\"\nassert solution(\"5 2 5\\n6 4 8 5\") == \"7\"\nprint(\"The code ran Correctly\")\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n4 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '2\n6\n-1\n7\n'''\n)\n\nassert solution('''\n4 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '2\n6\n-1\n7\n'''\n)"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n\") == '2\\n6\\n-1\\n7'\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 15 16 42 23\") == \"0\"\n\"\"\"\n\nfrom collections import Counter, deque, OrderedDict\nfrom itertools import combinations\nfrom operator import itemgetter\nimport unittest\nimport sys\n\nsys.setrecursionlimit(10000000)"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"0\"\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42 4 8 15 16 23 15 16 42 23 42\") == \"3\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 8 15 16 23') == '5'\n\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '0'\n\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '3'"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n4 8 15 16 23') == '5'\nassert solution('12\\n4 8 4 8 15 16 8 16 23 15 16 4 42 23 42') == '3'\nassert solution('15\\n4 8 4 8 15 16 8 16 23 15 16 4 42 23 42') == '0'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8 15 16 23') == '5'\nassert solution('4 8 4 15 16 8 23 15 16 42 23 42') == '0'\nassert solution('4 8 4 15 16 8 16 23 15 16 42 23 42') == '3'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"0\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8 15 16 23') == '5'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '0'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '3'\nassert solution('4 8 4 8 8 15 16 8 16 23 15 16 42 23 42') == '3'\nassert solution('4 8 4 8 8 15 16 8 16 23 15 16 42 23 42') == '3'\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8 15 16 23') == 5\nassert solution('4 8 4 15 16 8 23 15 16 42 23 42') == 3\nassert solution('4 8 4 15 16 8 16 23 15 16 42 23 42') == 3\nassert solution('4 8 4 15 16 8 16 23 15 16 42 23 42 4 8 15 16 23') == 3\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42 4 8 15 16 23') == 3\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 8 15 16 23\\n') == '5'\nassert solution('4 8 15 16 23\\n') == '5'\n\"\"\""
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\") == '0'\nassert solution(\"13 42\") == '3'\nassert solution(\"18 4\") == '2'\nassert solution(\"1337 420\") == '92'\nassert solution(\"123456789 1000000000\") == '87654322'\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5\\n13 42') == '0\\n3'\nassert solution('13 37\\n18 4') == '2\\n0'\nassert solution('123456789 1000000000\\n100500 9000') == '92\\n87654322'\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5') == 0\nassert solution('13 42') == 3\nassert solution('18 4') == 2\nassert solution('1337 420') == 92\nassert solution('123456789 1000000000') == 87654322\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\") == \"0\"\nassert solution(\"13 42\") == \"3\"\nassert solution(\"18 4\") == \"2\"\nassert solution(\"1337 420\") == \"92\"\nassert solution(\"123456789 1000000000\") == \"87654322\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 2\") == \"0\"\nassert solution(\"1\\n5\") == \"2\"\nassert solution(\"5\\n8\") == \"3\"\nassert solution(\"10\\n36\") == \"1\"\nassert solution(\"20\\n100\") == \"7\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\"\nassert solution(\"13 37\\n18 4\") == \"2\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"9150\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"9150\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"9150\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 5\\n13 42') == '0'\nassert solution('13 37\\n20 17') == '3'\nassert solution('123456789 1000000000\\n100500 9000') == '92'\nassert solution('100500 9000') == '87654322'\nassert solution('1337 420') == '2'\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\") == \"0\"\nassert solution(\"13 42\") == \"3\"\nassert solution(\"18 4\") == \"2\"\nassert solution(\"1337 420\") == \"92\"\nassert solution(\"123456789 1000000000\") == \"87654322\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1') == '1'\nassert solution('10 8') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1') == ''\nassert solution('2 10') == '0'\nassert solution('3 9') == '2'\nassert solution('4 8') == '1'\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n\n\"\"\""
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\nassert solution('4 2 10\\n4 4 6\\n6 4 8') == '5\\n0\\n8'\n\"\"\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''7\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999''') == '12339'\nassert solution('''8\n10 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999''') == '0'\nassert solution('''9\n10 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n''') == '15'\nassert solution('''10\n10 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n''') == '54306'\nassert solution('''11\n17 8 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n''') == '999999995'\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5 12345\") == \"12339\"\nassert solution(\"5 0 4\") == \"0\"\nassert solution(\"10 5 15\") == \"15\"\nassert solution(\"17 8 54321\") == \"54306\"\nassert solution(\"499999993 9 1000000000\") == \"999999995\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\nprint(solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998')"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n\"\"\"\nimport sys\nimport numpy as np\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 5 12345') == '12339'\nassert solution('5 0 4') == '0'\nassert solution('10 5 15') == '15'\nassert solution('17 8 54321') == '54306'\nassert solution('499999993 9 1000000000') == '999999995'\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''7\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999''') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n\"\"\"\n\nimport math\n\ntests = int(stdin.readline().strip())\n\nfor test in range(tests):\n    first, second, n = [int(x) for x in stdin.readline().strip().split()]\n    # first, second, n = [int(x) for x in input().strip().split()]\n    # n = int(input())\n    res = math.floor(n / first) * second\n    # n = int(input())\n    # print(n % first)\n    # n = int(input())\n    if n % first == second:\n        res += second\n    print(res)\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n\n-------------\n>>> \n=============== RESTART: /Users/hsiaotingluv/Desktop/python/20200610_python_do_homework/homework2.py ===============\n0\n0\n0\n0\n0\n0\n0\n\n>>> \n=============== RESTART: /Users/hsiaotingluv/Desktop/python/20200610_python_do_homework/homework2.py ===============\n12339\n0\n15\n54306\n999999995\n185\n999999998\n\n\"\"\""
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''7 2\n1 2 2 3 2 4 10\n''') == '6'\n\nassert solution('''8 2\n1 2 2 3 2 4 6 10\n''') == '8'\n\nassert solution('''7 3\n1 2 2 3 2 4 5\n''') == '4'\n\nassert solution('''2 2\n1 2\n''') == '0'\nassert solution('''5 3\n1 2 3 4 5\n''') == '1'\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n\"\"\""
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\nassert solution('8 3\\n1 2 2 3 2 4 6 10') == '8'"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"1 2 2 3 2 4 5\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n\nprint('Hooray!')"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == expected\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n\"\"\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABC') == 'abc'\nassert solution('AA') == 'aA'\nassert solution('BB') == 'bB'\n\"\"\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABC') == 'abc'\nassert solution('ABSC') == 'absC'\nassert solution('ABCD') == 'abcd'\n\"\"\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC\", 1) == \"aBC\"\n\n-----\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ABC') == 'abc'\nassert solution('abC') == 'aBC'\nassert solution('ABCD') == 'abcD'\n\"\"\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABBC\") == \"aBC\"\nassert solution(\"ABC\") == \"abc\"\n\"\"\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABC\") == \"abc\"\n\"\"\"\n\nfrom unittest import TestCase\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC\") == \"aBC\"\nassert solution(\"AaBCC\") == \"AaBcc\"\nassert solution(\"AABBC\") == \"AABbC\"\nassert solution(\"ABCD\") == \"AbCd\"\n\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABC\") == \"aBC\"\nassert solution(\"abC\") == \"AbC\"\nassert solution(\"aBC\") == \"ABC\"\n\"\"\"\nimport re"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC\") == \"abc\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"ABCabc\") == \"abcabc\"\nassert solution(\"ABcAbC\") == \"abcabc\"\nassert solution(\"abcABC\") == \"abcabc\"\n\"\"\""
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABC\") == \"aBC\"\n\n-------------\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40''') == '''3\n4\n6\n1\n5\n2'''\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40''') == '3\\n4\\n6\\n1\\n5\\n2'\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == '3\\n4\\n6\\n1\\n5\\n2'\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == '3\\n2\\n4\\n1\\n5\\n6'\n\"\"\""
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == '3\\n4\\n6\\n1\\n5\\n2'\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == '3\\n4\\n6\\n1\\n5\\n2'\n\"\"\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str_input) == str_output\nprint(solution(str_input))\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\nkhabarovsk 20\\nmoscow 10\\nkazan 50\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == '3\\n4\\n6\\n1\\n5\\n2'\nassert solution(\"moscow 10\\nkazan 50\\nkhabarovsk 20\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == '4\\n6\\n1\\n5\\n3\\n2'\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 35\\nkazan 50\\nmoscow 60\\nkhabarovsk 40\") == '3\\n5\\n2\\n1\\n4\\n6'\nassert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 35\\nkhabarovsk 40\") == '2\\n4\\n1\\n5\\n3\\n6'\nassert solution(\"moscow 10\\nkazan 50\\nkhabarovsk 20\\nkazan 35\\nmoscow 35\\nkhabarovsk 40\") == '4\\n6\\n3\\n5\\n2\\n1'\n\"\"\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\n\"\"\") == \"\"\"\n3\n4\n6\n1\n5\n2\n\"\"\"\n\nprint(solution(input()))"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 500\") == 'Yes'\nassert solution(\"3 900\") == 'No'\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\"\n\nK, X = [int(i) for i in input().split()]\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"Yes\"\nassert solution(\"2 1\") == \"No\"\nassert solution(\"3 0\") == \"No\"\nassert solution(\"3 3\") == \"Yes\"\nassert solution(\"3 4\") == \"Yes\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 900') == 'Yes'\n\"\"\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 900') == 'Yes'\nassert solution('2 800') == 'No'\nassert solution('2 700') == 'No'\nassert solution('2 600') == 'No'\nassert solution('2 500') == 'Yes'\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\"\"\"\n\n\"\"\"\nN = int(stdin)\nK = int(stdin)"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 10') == '0.145833333333'\n\"\"\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10\") == \"0.145833333333\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\nassert solution(\"3 11\") == \"0.115555555556\"\nassert solution(\"5 10\") == \"0.55\"\nassert solution(\"5 11\") == \"0.53377853493\"\nassert solution(\"5 12\") == \"0.59183673469\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 10') == '0.145833333333'"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\nprint(solution(stdin))"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nfrom collections import Counter\nfrom math import factorial\nfrom itertools import product"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('SAT') == 1\nassert solution('SUN') == 0\nassert solution('MON') == 0\nassert solution('TUE') == 0\nassert solution('WED') == 0\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"SAT\") == 1\nassert solution(\"MON\") == 0\nassert solution(\"TUE\") == 1\nassert solution(\"WED\") == 2\nassert solution(\"THU\") == 3\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(SAT) == 1\n\"\"\""
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"SUN\") == '1'\nassert solution(\"MON\") == '1'\nassert solution(\"TUE\") == '1'\nassert solution(\"WED\") == '1'\nassert solution(\"THU\") == '1'\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"SAT\") == 1\n\"\"\"\n\nfrom datetime import datetime"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(SAT) == 1\n\"\"\""
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"SAT\") == \"1\"\n\"\"\""
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('SUN') == '1'\nassert solution('MON') == '2'\nassert solution('TUE') == '3'\nassert solution('WED') == '4'\nassert solution('THU') == '5'\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"SAT\") == \"1\"\nassert solution(\"SUN\") == \"0\"\nassert solution(\"MON\") == \"6\"\nassert solution(\"TUE\") == \"2\"\nassert solution(\"WED\") == \"3\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"SAT\") == \"1\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\nprint(\"It works!\")"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 10 20\\n') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    r = 2,\n    D = 10,\n    x_2000 = 20\n    ) == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\nr, D, x_2000 = map(int, stdin.split())\n\nprint('\\n'.join([str(r * x_2000 - D)] * 10))\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10 20\") == \"30\"\nassert solution(\"2 10 30\") == \"50\"\nassert solution(\"3 5 10\") == \"22\"\nassert solution(\"2 5 100\") == \"1000\"\nassert solution(\"3 2 100\") == \"300\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 10 20\") == \"30\"\nassert solution(\"3 10 20\") == \"40\"\nassert solution(\"5 10 20\") == \"70\"\nassert solution(\"3 100 20\") == \"340\"\nassert solution(\"2 10 100\") == \"340\"\n\n-----\nhttps://www.hackerrank.com/challenges/algs-rainwater/problem\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\"\nassert solution(\"6\\n1 2 3 3 4 4 5\") == \"10\"\nassert solution(\"1\\n1\") == \"1\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\\n\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\\n\"\nassert solution(\"3\\n4 1 2\") == \"0\\n\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\\n\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 3 1 1 4') == '5'\nassert solution('5\\n1 3 2 1 4') == '4'\nassert solution('3\\n4 1 2') == '0'\nassert solution('3\\n1 2 4') == '0'\nassert solution('4\\n1 3 2') == '0'\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == 5\nassert solution(\"5\\n1 3 2 1 4\") == 4\nassert solution(\"3\\n4 1 2\") == 0\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 3 1 1 4') == 5\nassert solution('5\\n1 3 2 1 4') == 4\nassert solution('3\\n4 1 2') == 0\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 3 1 1 4\") == \"5\"\nassert solution(\"1 3 2 1 4\") == \"4\"\nassert solution(\"1 3 2 1 4\") == \"0\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n1 3 1 1 4\n''') == '5'\nassert solution('''5\n1 3 2 1 4\n''') == '4'\nassert solution('''3\n4 1 2\n''') == '0'"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\"\nassert solution(\"5\\n4 1 2\") == \"0\"\nassert solution(\"3\\n4 4 3\") == \"0\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3 1 1 4') == '5'\nassert solution('1 3 2 1 4') == '4'\nassert solution('4 1 2') == '0'\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == 'NO\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000'\nprint(solution(stdin))\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n\"\"\") == \"\"\"\nYES\n3 2 1\nYES\n100 100 100\nNO\nNO\nYES\n1 1 1000000000\n\"\"\"\n\n\"\"\"\n5\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n\n5\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n\n5\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n\"\"\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1\") == \"NO\"\nassert solution(\"2 2 3\") == \"NO\"\nassert solution(\"3 2 3\") == \"NO\"\nassert solution(\"3 2 1\") == \"YES\"\nassert solution(\"100 100 100\") == \"YES\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 3\\n1 1 1\\n3 2 2\\n4 4 4\\n5 5 5\\n1 1 1\") == \"YES\\n1 1 1\"\nassert solution(\"2 2 3\\n1 1 1\\n4 4 4\") == \"NO\"\n\"\"\"\nimport itertools\nimport re"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n\"\"\""
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\\n\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n\"\"\"\n\n\nimport sys\n\nstdin = sys.stdin\nt = int(next(stdin))\n\nfor _ in range(t):\n    x, y, z = map(int, next(stdin).split())\n    a = max(x, y)\n    b = max(x, z)\n    c = max(y, z)\n    if a < b and b < c:\n        print(a, b, c)\n    else:\n        print('NO')"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 3\") == \"YES\"\nassert solution(\"100 100 100\") == \"NO\"\nassert solution(\"50 49 49\") == \"YES\"\nassert solution(\"10 30 20\") == \"YES\"\nassert solution(\"1 1000000000 1000000000\") == \"YES\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == 'YES\\n2 1'\nassert solution('3\\n5\\n5') == 'YES\\n5 3'\nassert solution('2\\n5\\n5\\n1') == 'YES\\n5 5 1'\nassert solution('10\\n3\\n6\\n2') == 'NO\\nNO\\n6 3'\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\nprint(solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\"))"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\""
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 2 6\n5 2 1 4 2\n''') == '4'\nassert solution('''5 1 4\n4 2 3 4 1\n''') == '1'\nassert solution('''5 3 3\n1 2 3 1 1\n''') == '5'\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\n\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\n\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'\n\"\"\"\nfrom collections import deque\nfrom typing import List, Deque\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 21\nassert solution(\"sadfaasdda\") == 0\nassert solution(\"ab\") == 2\nassert solution(\"a\") == 1\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abcdef') == 6\nassert solution('bcaba') == 5\nassert solution('bacaba') == 4\nassert solution('aaaaaa') == 0\nassert solution('abc') == 3\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"aaaaaa\") == 21\n\"\"\"\n\nfrom sys import stdin\n\nn, k = [int(x) for x in stdin.readline().split()]\ns = stdin.readline()\n\nletters = [chr(i) for i in range(ord('a'), ord('z') + 1)]\n\nprint(len(s))\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''7 2\nabacaba\na b''') == '12'\nassert solution('''10 3\nsadfaasdda\nf a d''') == '21'\nassert solution('''7 1\naaaaaaa\nb''') == '0'\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\n\"\"\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacaba\") == 12\n\"\"\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\n\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\n\"\"\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aaaaaaa\", \"b\") == 0\nassert solution(\"abacaba\", \"a b\") == 12\nassert solution(\"abcdefghijklmnopqrstuvwxyz\", \"a b c\") == 23\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2\\n-1\\n6'\nassert solution('4\\n3\\n1 2 3\\n4\\n-1 -2 -1 -3') == '1\\n-1'\nassert solution('4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2\\n-1\\n6'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == '2\\n-1\\n6'\nassert solution(\"4\\n1\\n-1 -2 -1 -3\") == '-1'\nassert solution(\"4\\n4\\n1 1 2 2 3\") == '5'\nassert solution(\"4\\n1\\n1 1 1 1\") == '0'\nassert solution(\"4\\n1\\n-1 -1 -1 -1\") == '0'\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"2\\n3\\n1 2 3\\n4\\n3 4 5\") == \"5\\n5\\n7\"\nassert solution(\"2\\n2\\n1 2\\n3\\n2 1\") == \"4\\n3\\n1\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n''') == '''\n2\n-1\n6\n-2999999997\n'''\nprint(solution(input()))\n\n'''\nIn the first test case of the example, one of the possible answers is $[1, 2, \\underline{3}, \\underline{-1}, -2]$.\n\nIn the second test case of the example, one of the possible answers is $[-1, -2, \\underline{-1}, -3]$.\n\nIn the third test case of the example, one of the possible answers is $[\\underline{-2}, 8, 3, \\underline{8}, \\underline{-4}, -15, \\underline{5}, \\underline{-2}, -3, \\underline{1}]$.\n\nIn the fourth test case of the example, one of the possible answers is $[\\underline{1}, \\underline{-1000000000}, \\underline{1}, \\underline{-1000000000}, \\underline{1}, \\underline{-1000000000}]$.\n'''"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n\"\"\") == \"\"\"\n2\n-1\n6\n-2999999997\n\"\"\"\n\nassert solution(\"\"\"\n4\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n\"\"\") == \"\"\"\n2\n-1\n6\n-2999999997\n\"\"\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n5\\n1 2 3 -1 -2') == '2'\nassert solution('4\\n4\\n-1 -2 -1 -3') == '-1'\nassert solution('10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '6'\nassert solution('6\\n1 -1000000000 1 -1000000000 1 -1000000000') == '-2999999997'\n\n\n\"\"\""
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"2\\n4\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"2\\n4\\n-1 -2 -1 -3\\n4\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"1\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\\n-2999999997\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2\\n-1\\n6\\n-2999999997'\nassert solution('4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1') == '2\\n-1\\n6\\n-2999999997'\n\n\n\n-----Problem-----\n\nYou have a list of integers and you want to choose the maximal possible sum of the list, where the sum of the chosen numbers does not exceed some given value.\n\nExample:\n\nlist_of_integers = [2, 3, 4, 5, 6]\nchosen_sum = 9\n\nthe output should be\nmaximalSum(list_of_integers, chosen_sum) = 10.\n\nThere are 3 possible ways to choose 2 elements from the list of integers.\n\n2 + 3 + 4 + 5 = 9\n2 + 3 + 4 + 6 = 9\n2 + 3 + 5 + 6 = 9\nthe sum of the chosen elements are [2, 3, 4, 5] and [2, 3, 4, 6], so the answer is 10."
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\\n\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"3\\n4\\n1 2 3 4\\n2\\n5\\n\") == \"2\\n5\\n\"\nassert solution(\"2\\n4\\n1 2 -2\\n4\\n1 1\\n\") == \"2\\n1\\n\"\nassert solution(\"2\\n4\\n-1 -2\\n4\\n-1 -2\\n\") == \"4\\n-1\\n\"\nassert solution(\"1\\n4\\n-1 -2\\n4\\n-1 -2\\n\") == \"4\\n\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nprint('Success')\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\\n\") == \"3 5\\n2 1\\n3 2\\n3 4\""
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == '3 5\\n2 1\\n3 2\\n3 4'\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == '4 1\\n1 2\\n1 3'\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == '3 2\\n2 5\\n8 5\\n6 1\\n2 7'\n\n\n\"\"\"\nfrom collections import defaultdict, Counter\nfrom typing import List\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n\"\"\") == \"\"\"\n3 2\n2 5\n8 5\n6 1\n2 7\n1 2\n3 4\n\"\"\"\n\nassert solution(\"\"\"\n5 5\n1 2\n2 3\n3 5\n4 3\n1 5\n\"\"\") == \"\"\"\n3 5\n2 1\n3 2\n3 4\n\"\"\"\n\nassert solution(\"\"\"\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n\"\"\") == \"\"\"\n4 1\n1 2\n1 3\n\"\"\"\n\nassert solution(\"\"\"\n8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n\"\"\") == \"\"\"\n3 2\n2 5\n8 5\n6 1\n2 7\n1 2\n3 4\n\"\"\"\n\nassert solution(\"\"\"\n5 5\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n\"\"\") == \"\"\"\n3 2\n2 5\n8 5\n6 1\n2 7\n1 2\n3 4\n\"\"\""
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n\n\"\"\"\n\nimport sys\nimport math\nimport copy\nfrom collections import deque\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5') == '3 5\\n2 1\\n3 2\\n3 4'\nassert solution('4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4') == '4 1\\n1 2\\n1 3'\nassert solution('8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n') == '3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4'"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n5 5\n1 2\n2 3\n3 5\n4 3\n1 5\n\"\"\"\n) == \"\"\"\n3 5\n2 1\n3 2\n3 4\n\"\"\"\n\nassert solution(\n    \"\"\"\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n\"\"\"\n) == \"\"\"\n4 1\n1 2\n1 3\n\"\"\"\n\nassert solution(\n    \"\"\"\n8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n\"\"\"\n) == \"\"\"\n3 2\n2 5\n8 5\n6 1\n2 7\n1 2\n3 4\n\"\"\"\n\n\nassert solution(\"5 3\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\\n\") == \"\"\"\n3 5\n2 1\n3 2\n3 4\n\"\"\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n2 3') == '2 1\\n3 2'\nassert solution('1 2\\n2 3\\n3 4') == '2 1\\n3 2\\n4 3'\nassert solution('1 2\\n2 3\\n3 4\\n4 5') == '2 1\\n3 2\\n4 3\\n5 4'\n\nassert solution('') == ''\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\nassert solution(\"2 2\\n1 2\") == \"2 1\"\nassert solution(\"1 2\\n2 1\") == \"1 2\"\n\n\"\"\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n3 4\\n\") == \"3 2\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('499993') == '41664916690999888'\n\n\n-----Solution-----\n\n\n\n-----Test Data-----\n\n\n-----Efficient Test Data-----\n\nInput:\n4\n1\n1\n2\n3\n\nOutput:\n0\n2\n1\n3\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n5\\n499993\\n') == '0'\nassert solution('2\\n5\\n499993\\n') == '40'\nassert solution('3\\n5\\n499993\\n') == '41664916690999888'\n\"\"\""
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5\\n99993\") == \"0\\n40\\n41664916690999888\"\n\"\"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n499993') == '0\\n40\\n41664916690999888'\n\"\"\""
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == 0\nassert solution(\"2\") == 1\nassert solution(\"3\") == 2\nassert solution(\"4\") == 3\nassert solution(\"5\") == 4\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n499993') == '0\\n40\\n41664916690999888'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n5') == '0'\nassert solution('499993') == '41664916690999888'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('499993') == '41664916690999888'\n\"\"\"\n\nimport sys\nfrom copy import deepcopy\nfrom collections import defaultdict\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('499993') == '41664916690999888'\n\"\"\"\nimport sys"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n\n---------------\n\nhttps://www.codewars.com/kata/589934db4a2b8d6f50000b7a/solutions/python\n\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nt = 0\nm = [0] * (n + 1)\nfor i in range(n):\n    if a[i] % 2 == 1:\n        t += 1\n    m[a[i]] = t\n\nprint(*m[1:])\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\n\"\"\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6 7 4 3') == '1 1 1 2 -1 1 1 3 1 1'\n\"\"\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\"\n\n\"\"\"\n\u041a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split(' ')]"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\nassert solution(\"64\\n32\\n97\\n2\\n123456\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"64 32 97\") == \"2 4 8\"\n\nassert solution(\"2 12345\") == \"NO\"\n\nassert solution(\"12345\") == \"YES\"\n\nassert solution(\"123456789\") == \"NO\"\n\nassert solution(\"1234567890123\") == \"YES\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\nassert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\nassert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\nassert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\nassert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == 'YES'\nassert solution('2\\n1') == 'YES'\nassert solution('2\\n3') == 'NO'\nassert solution('3\\n5') == 'YES'\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == 'YES\\n2 4 8'\n\"\"\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2') == 'YES\\n2 4 8 '\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 A \u0438 B \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u0437 \u043d\u0438\u0445. \n\u0427\u0438\u0441\u043b\u0430 \u2014 \u0446\u0435\u043b\u044b\u0435 \u043e\u0442 1 \u0434\u043e 1000.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\n\u0422\u0435\u0441\u0442 1\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n1\n2\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n2\n\n\"\"\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('64 32 97 2 12345') == 'YES 2 4 8'\n\"\"\"\nimport sys"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''64\n32\n97\n2\n12345''') == 'YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823'\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\nassert solution(\"2\\n3\\n4\\n5\") == \"NO\"\nassert solution(\"2\\n4\\n8\\n16\") == \"YES\"\nassert solution(\"2\\n9\\n16\\n25\") == \"NO\"\nassert solution(\"3\\n9\\n27\\n81\") == \"YES\\n3 5 823\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'YES'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n') == 'NO'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n') == 'YES'\nassert solution('2\\n3\\n4\\n5\\n6\\n') == 'NO'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n') == 'YES'\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'a'\nassert solution('ab') == 'a'\nassert solution('bb') == 'b'\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"bbbb\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"bbbbb\") == 2\nassert solution(\"abbaba\") == 0\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\nbbbb''') == '2'\nassert solution('''6\nababab''') == '0'\nassert solution('''2\naa''') == '1'\nassert solution('''5\naaaaa''') == '5'\nassert solution('''6\naaaaa''') == '0'\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"aabab\") == 0\nassert solution(\"ababab\") == 0\nassert solution(\"aaaaaaaaaaa\") == 0\nassert solution(\"aaaaaaaaabaaaaabaaa\") == 1\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"bbbb\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"ba\") == 0\nassert solution(\"ab\") == 1\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"ba\") == 1\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"abb\") == 1\nassert solution(\"bab\") == 1\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"baabaa\") == 0\nassert solution(\"ababa\") == 2\nassert solution(\"abaab\") == 0\nassert solution(\"abbba\") == 1\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aaaa\") == 0\nassert solution(\"aabbaa\") == 2\nassert solution(\"baabb\") == 2\n\n\"\"\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == \"15\"\n\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2') == '15'\nassert solution('5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n') == '9'\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2') == '15'\nassert solution('5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n') == '9'"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\""
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\nassert solution(\"3\\n1 1\\n2 1\\n\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n2 1\\n1 1\\n1 0\\n2 0\\n1 1\\n0 1\\n2 2\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n\"\"\""
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n') == '9'\nassert solution('8\\n2 1\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n') == '15'\n\n\"\"\"\n\nimport sys\nimport sys\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1\\n2 0\\n3 2\\n4 3\") == \"9\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\") == \"9\"\nassert solution(\"8\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n1 1\\n4 3\\n1 2\") == \"15\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 0\\n2 0\\n3 2\\n4 3\") == \"9\"\nassert solution(\"8\\n1 2\\n2 0\\n3 0\\n4 0\\n5 1\\n6 2\\n7 3\\n8 4\") == \"15\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1\\n') == '2'\nprint('OK!')"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\") == \"2\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1') == '2'\nassert solution('1 3') == '2'\n\"\"\""
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n1''') == '2'\n\n'''\nSolution:\n1. Find the smallest and largest number from the first two lines.\n2. Use them to find the right answer.\n'''\n'''\nHint\n1. In order to find the smallest number, you need to make sure that the smallest number is larger than the largest number.\n2. You could try it out and find out what happens when the smallest number is the answer and what happens when the largest number is the answer.\n3. Think about the edge cases when the smallest number is the answer.\n4. Think about the edge cases when the largest number is the answer.\n5. Try it out, make sure that the edge cases are covered.\n'''\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3') == '2'\nassert solution('1 3 2') == '3'\n\"\"\"\nfrom util import hook\n\n\n@hook.command\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1') == '2'\n\"\"\""
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"3 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"1 2\") == \"1\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\nassert solution(\"5\") == \"2.000000000000\"\nassert solution(\"7\") == \"4.000000000000\"\nassert solution(\"9\") == \"6.000000000000\"\nassert solution(\"11\") == \"8.000000000000\"\n\"\"\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '1.000000000000'\n\"\"\"\n\n\"\"\"\n2) For two positive integers x and y. The task is to find the maximal sum of squares of x and y that is less than or equal to a given integer n.\n\n-----Constraints-----\n - 0 \u2264 x, y \u2264 1000\n - x, y and n are integers.\n\n-----Input-----\nThe first line of input contains a single integer t, denoting the number of test cases.\nNext t lines contains two integers x and y.\n\n-----Output-----\nFor each test case, print a single line containing the maximum possible value of the sum of squares of x and y which is less than or equal to n.\nYour output is considered correct if its absolute or relative error from our answer is at most 10^{-6}.\n\n-----Sample Input-----\n3\n1 1\n2 3\n2 3\n\n-----Sample Output-----\n2.0\n3.0\n4.0\n\nExplanation:\nIn the first case, 1 + 1 = 2 and 2 is less than or equal to 3, hence the maximum possible value of the sum of squares of x and y that is less than or equal to 3 is 2.\nIn the second case, 2 + 3 = 5 and 5 is less than or equal to 3, hence the maximum possible value of the sum of squares of x and y that is less than or equal to 3 is 3.\nIn the third case, 2 + 3 = 5 and 5 is less than or equal to 3, hence the maximum possible value of the sum of squares of x and y that is less than or equal to 3 is 4.\n\"\"\"\n\n\"\"\"\n3) The first line of input contains an integer n.\nThe second line of input contains n space-separated integers a1,a2,...,an.\n\n-----Constraints-----\n - 1 \u2264 a1,a2,...,an \u2264 100\n - 1 \u2264 n \u2264 100\n - 1 \u2264 ai \u2264 10000\n - ai is an integer.\n\n-----Input-----\n5\n1 1 1 1\n\n-----Output-----\n1\n\nExplanation:\nFor n = 5, there are 5 integers: 1, 1, 1, 1 and 1.\nThe sum of squares of those 5 integers is 1 + 1 + 1 + 1 + 1 = 5.\n\n-----Sample Input-----\n2\n1 2 3\n4 5 6\n\n-----Sample Output-----\n4\n9\n\"\"\"\n\n\"\"\"\n4) Find the number of occurrences of the smallest number in a given array of positive integers.\n\n-----Constraints-----\n - 1 \u2264 n \u2264 100,000\n - 1 \u2264 ai \u2264 100,000\n - ai is an integer.\n\n-----Input-----\nFirst line of input contains an integer n, denoting the number of elements in the array.\nSecond line of input contains n space-separated integers, denoting the elements of the array.\n\n-----Output-----\nPrint the number of occurrences of the smallest number in the array.\nYour output is considered correct if its absolute or relative error from our answer is at most 10^{-4}.\n\n-----Sample Input-----\n5\n5 2 1 3 1\n\n-----Sample Output-----\n2\n\nExplanation:\nThere are two occurrences of 1 in the array.\n\"\"\"\n\n\"\"\"\n5) For a given natural number n. Find the sum of squares of its digits.\n\n-----Constraints-----\n - n \u2264 100,000\n - n is an integer.\n\n-----Input-----\nFirst line of input contains a single integer t, denoting the number of test cases.\nFirst line of test case contains an integer n.\n\n-----Output-----\nPrint the sum of squares of its digits.\nYour output is considered correct if its absolute or relative error from our answer is at most 10^{-6}.\n\n-----Sample Input-----\n2\n13\n12\n\n-----Sample Output-----\n85\n64\n\"\"\"\n\n\"\"\"\n6) Given an array of positive integers, which contains all the elements in a given set.\nYou have to find the number of elements in the array, such that there exists a pair of elements whose product is odd.\n\n-----Constraints-----\n - 1 \u2264 n \u2264 100,000\n - n is an integer.\n - 1 \u2264 ai \u2264 100,000\n - ai is an integer.\n\n-----Input-----\nFirst line of input contains a single integer t, denoting the number of test cases.\nFirst line of test case contains an integer n, denoting the number of elements in the array.\nNext line contains n space-separated integers, denoting the elements of the array.\n\n-----Output-----\nPrint the number of pairs of elements, whose product is odd.\nYour output is considered correct if its absolute or relative error from our answer is at most 10^{-6}.\n\n-----Sample Input-----\n2\n6\n1 2 4 5 6 7\n6\n6 5 4 3 2 1\n\n-----Sample Output-----\n1\n0\n\"\"\"\n\n\"\"\"\n7) Find the number of occurrences of a given character in a string.\n\n-----Constraints-----\n - 1 \u2264 n \u2264 100,000\n - n is an integer.\n - 1 \u2264 ai \u2264 100,000\n - ai is an integer.\n\n-----Input-----\nFirst line of input contains a single integer t, denoting the number of test cases.\nFirst line of test case contains a string s.\n\n-----Output-----\nPrint the number of occurrences of the character in the string.\nYour output is considered correct if its absolute or relative error from our answer is at most 10^{-4}.\n\n-----Sample Input-----\n3\nabcde\nabde\nabd\n\n-----Sample Output-----\n3\n2\n1\n\nExplanation:\nIn the first test case, 3 characters, i.e., a, b, c are present in the string.\nIn the second test case, 2 characters, i.e., a and b, are present in the string.\nIn the third test case, 1 character, i.e., a, is present in the string.\n\"\"\"\n\n\"\"\"\n8) Given a string, print all possible substrings of the string.\n\n-----Constraints-----\n - 1 \u2264 n \u2264 100,000\n - n is an integer.\n - 1 \u2264 ai \u2264 100,000\n - ai is an integer.\n\n-----Input-----\nFirst line of input contains a single integer t, denoting the number of test cases.\nFirst line of test case contains a string s.\n\n-----Output-----\nPrint the substrings of the string, separated by a space.\nYour output is considered correct if its absolute or relative error from our answer is at most 10^{-3}.\n\n-----Sample Input-----\n2\ngeeksgeeks\n\n-----Sample Output-----\ngeeksge\ngeksge\ngeksg\ngeeksge\ngeksge\ngeek\n\nExplanation:\nIn the first test case, geeksgeeks contains two substrings: geeksgeeks and geeksge.\nIn the second test case, geeksgeeks contains two substrings: geeksgeeks and geksge.\n\"\"\"\n\n\"\"\"\n9) Given a string, print the substrings of the string, such that each character of the substring is an even-indexed character of the string.\n\n-----Constraints-----\n - 1 \u2264 n \u2264 100,000\n - n is an integer.\n - 1 \u2264 ai \u2264 100,000\n - ai is an integer.\n\n-----Input-----\nFirst line of input contains a single integer t, denoting the number of test cases.\nFirst line of test case contains a string s.\n\n-----Output-----\nPrint the substrings of the string, such that each character of the substring is an even-indexed character of the string, separated by a space.\nYour output is considered correct if its absolute or relative error from our answer is at most 10^{-3}.\n\n-----Sample Input-----\n3\ncodeleet\nabc\nabec\n\n-----Sample Output-----\nc o d e l e t\na b c\na b e c\n\"\"\"\n\n\"\"\"\n10) Given a number n. Find the sum of the numbers in the range from 1"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3) == \"1.0\"\n\"\"\"\n\nl = int(input())\n\nmax_volume = 0\n\nfor d1 in range(1, l+1):\n    for d2 in range(1, l+1):\n        for d3 in range(1, l+1):\n            if d1+d2+d3 == l:\n                volume = d1*d2*d3\n                if volume > max_volume:\n                    max_volume = volume\n\nprint(max_volume)\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\n\"\"\"\n\nL = int(input())"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\n\nprint(solution(\"3\"))\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '1.000000000000'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\nassert solution(\"9\") == \"3.000000000000\"\nassert solution(\"5\") == \"2.000000000000\"\nassert solution(\"7\") == \"3.500000000000\"\nassert solution(\"6\") == \"4.000000000000\"\n\nprint(\"Teste unit\u00e1rio passou para: \", solution(\"3\"))"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == \"1.000000000000\"\n\"\"\"\n\nl = int(input())\na = l // 3\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3) == 1.000000000000\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n') == '1.000000000000'\nassert solution('4\\n') == '3.000000000000'\nassert solution('5\\n') == '6.000000000000'\n\"\"\"\n\nimport sys\n\ndimensions = [float(x) for x in sys.stdin.readline().strip().split('\\n')]"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == 'Hello World'\nassert solution('2') == '7'\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"5\"\nassert solution(\"5\") == \"5\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == 'Hello World'\nassert solution('2') == '3'\n'''\n\nimport sys\nimport os\nimport time\nimport math\nimport heapq\nfrom collections import Counter, deque, defaultdict\nfrom itertools import combinations, permutations, combinations_with_replacement, groupby\nfrom bisect import bisect_left, bisect_right\nfrom functools import reduce\nfrom math import gcd, factorial, sqrt, log, sin, cos, tan, degrees, radians, ceil, floor\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom fractions import Fraction\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 'Hello World'\nassert solution('2') == '8'\nassert solution('3') == '6'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n') == 'Hello World\\n'\nassert solution('2\\n1\\n1\\n2\\n') == '3\\n'\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"5\"\n\"\"\"\n\nN = int(input())"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"Hello World\"\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"Hello World\\n\"\n\"\"\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"3333\"\nassert solution(\"3 4\") == \"4444\"\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3') == '3333'\n\"\"\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"3333\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3') == '3333'"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"3333\"\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '4 3'\n) == '3333'\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"3333\"\nassert solution(\"5 2\") == \"55\"\nassert solution(\"3 4\") == \"44\"\n\"\"\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3') == '3333'\nassert solution('4 4') == '4444'\nassert solution('9 9') == '9999'\nassert solution('1 2') == '212'\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3') == '3333'\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('a') == 'b'\n\nassert solution('c') == 'd'\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"x\") == \"z\"\nassert solution(\"q\") == \"q\"\nassert solution(\"z\") == \"z\"\nassert solution(\"b\") == \"c\"\n\nprint(solution(\"a\"))\nprint(solution(\"x\"))\nprint(solution(\"q\"))\nprint(solution(\"z\"))\nprint(solution(\"b\"))\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"a\"\n) == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('a') == 'b'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('a') == 'b'\n\"\"\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"a\") == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a') == 'b'\nassert solution('c') == 'd'\n\"\"\"\n\nimport unittest\nimport sys\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"a\") == \"b\"\n\"\"\"\n\n\"\"\"\nimport sys\n\ns = stdin.readline().strip()\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a') == 'b'\n\n'''\n\nimport unittest\nimport subprocess\nimport sys\nimport io\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_a(self):\n        _ = subprocess.Popen(['python3','solution.py'], stdout = subprocess.PIPE, stdin = subprocess.PIPE, stderr = subprocess.STDOUT)\n        out, err = _.communicate(input = 'a'.encode('utf-8'))\n        expected = 'b'.encode('utf-8')\n        self.assertEqual(out, expected)"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('order atc') == 'atcoder'\nassert solution('coder atc') == 'atcoder'\nassert solution('coder atcc') == 'atccoder'\n\"\"\"\n\nimport unittest\nimport sys"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('oder atc') == 'atcoder'\n\"\"\"\n\nS, T = stdin.split()\nprint(T + S)\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('oder atc') == 'atcoder'\nassert solution('abc') == 'abcabc'\n\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"oder atc\") == \"atcoder\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('lintcode') == 'lintcode'\n\nassert solution('aabcc') == 'aaabc'\nassert solution('abc') == 'abcabc'\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('oder', 'atc') == 'atcoder'\nassert solution('banana', 'banan') == 'bananabanan'\nassert solution('b', 'a') == 'ab'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\n\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('oder atc') == 'atcoder'\n\"\"\"\n\nS = input()\nT = input()\n\nprint(T + S)\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\nprint(solution(\"oder atc\"), \"atcoder\")\n\"\"\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 5 7 8 2\") == \"0\"\nassert solution(\"6\\n5 1 2 4 6 3\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 5 7 8 2\") == \"0\"\n\"\"\""
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\n1\\n10\\"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 5 7 8 2') == '0'\nassert solution('6\\n5 1 2 4 6 3') == '0'\nassert solution('2\\n1000000 1000000') == '1000000'\n\"\"\""
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 1 2 4 6 3\\n\") == \"0\"\nassert solution(\"6 5 4 3 2 1\\n\") == \"1\"\nassert solution(\"1000000 1000000\\n\") == \"1000000\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('5\\n1 5 7 8 2') == 0\nassert solution('6\\n5 1 2 4 6 3') == 0\nassert solution('2\\n1000000 1000000') == 1000000\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1 2 3 3 3') == '0'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '1'\nassert solution('1 1 2 3 3 3') == '0'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '1'\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 2 4 6 3\") == '0'\nassert solution(\"6 5 1 2 4 6 3\") == '0'\nassert solution(\"1000000 1000000\") == '1000000'\nassert solution(\"2 3 4 5 6 7 8\") == '0'\nassert solution(\"3 3 3 3 3 3 3 3\") == '0'\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 2 4 6 3\") == \"0\"\nassert solution(\"6 5 1 2 4 6 3\") == \"0\"\nassert solution(\"1 1000000000\") == \"1\"\nassert solution(\"1 1000000000 2 1000000000\") == \"0\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1\\n2') == '2'\nassert solution('1\\n2\\n3') == '0'\nassert solution('1\\n2\\n3\\n4') == '0'\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2 3 3\") == 5\n\"\"\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 2 3 3\\n7 10 50 12 1 8') == '5'\n\nassert solution('1 1 100 99\\n100') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(print(input()))\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2 3 1\\n7 10 50 12 1 8\\n') == '6'\nassert solution('1 1 100 99\\n100\\n') == '1'\n\"\"\""
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 3\\n7 10 50 12 1 8\\n') == '5'\nassert solution('1 1 100 99\\n100\\n') == '1'\nassert solution('1 1 100 99\\n100\\n') == '1'\n\"\"\"\n\nimport unittest\n\nfrom collections import deque\nfrom typing import Dict, List, Deque, Tuple\n\nPoint = Tuple[int, int]\nPointSet = Dict[Point, int]"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\") == \"5\"\nassert solution(\"1 1 100 99\\n100\") == \"1\"\nassert solution(\"7 4 2 1\\n1 3 5 4 2 7 6\") == \"6\"\n\"\"\"\n\nn, a, b, k = [int(x) for x in input().split()]\nh = [int(x) for x in input().split()]\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\\n\") == \"5\"\nassert solution(\"1 1 100 99\\n100\\n\") == \"1\"\nassert solution(\"7 4 2 1\\n1 3 5 4 2 7 6\\n\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 4 2 1\\n1 3 5 4 2 7 6') == '6'\n\"\"\"\n\nfrom collections import deque\n\nn, a, b, k = map(int, stdin.readline().split())\nh = list(map(int, stdin.readline().split()))\n\nhp = sum(h)"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\") == \"5\"\nassert solution(\"1 1 100 99\\n100\") == \"1\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3\\n3 2 0 6 10 12\\n\") == 3\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n0 1 2 3\") == \"0\\n0 1 2 3\"\nassert solution(\"4 2\\n3 4 2\") == \"3\\n3 4 2\"\n\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'abc'\nassert solution('abcde') == 'abcde'\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2 0 6 10 12\\n') == '3'\nassert solution('3 2 0 6 10 12\\n') == '3'\nassert solution('3 2 0 6 10 12\\n') == '3'"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 0 6 10 12\") == '3'\nassert solution(\"4 2 0 6 10 12\") == '3'\nassert solution(\"6 2 0 6 10 12\") == '3'\nassert solution(\"1 1 1 1 1\") == '0'\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3') == '0'\nassert solution('3 1') == '1'\nassert solution('5 7') == '3'\nassert solution('6 3') == '0'\nassert solution('5 7') == '3'\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 3\\n3 2 0 6 10 12\") == '3'\n\n\"\"\"\n\nfrom typing import List\n\nfrom helpers import input_parser\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2\\n0 1 2 3') == '0'\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n0 1 2 3\") == \"0\\n0 1 2 3\"\nassert solution(\"6 3\\n3 2 0 6 10 12\") == \"3\\n3 2 0 7 10 14\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 0 6 10 12\") == \"3\"\nassert solution(\"4 2 0 6 10 12\") == \"0\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3') == '8'\n\"\"\""
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5') == '20'"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 1 3 2\\n3 5\\n4 2\\n2 5\") == \"20\"\n\"\"\""
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(solution_input_1) == solution_expected_1\nassert solution(solution_input_2) == solution_expected_2\nassert solution(solution_input_3) == solution_expected_3\nassert solution(solution_input_4) == solution_expected_4\nassert solution(solution_input_5) == solution_expected_5\n\nprint('The local tests are done. Now use the solution() function '\n      'to make sure it works on the testsuite.')\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 0 2 0\") == \"8\"\n\"\"\"\nimport sys\nfrom collections import Counter, defaultdict, deque\nfrom itertools import combinations, groupby, permutations, product\nfrom math import factorial\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3''') == \"8\"\nassert solution('''5 3\n4 2 1 3 2\n3 5\n4 2\n2 5''') == \"20\"\n\n\"\"\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n1\\n10000 10000 10000 10000\") == \"YES\\nNO\\nYES\\nNO\"\nassert solution(\"4\\n1 1 1 1 1\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n1\\n10000 10000 10000 10000\") == \"NO\\nNO\\nNO\\nNO\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\") == \"YES\"\nassert solution(\"4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n1 10 10\\n2\\n10 5 2 10 1 1 2 5\") == \"YES\"\nassert solution(\"1\\n1 10 10\\n2\\n10 5 2 10 1 1 2 5\") == \"YES\"\nassert solution(\"1\\n10000 10000 10000 10000\\n2\\n10 5 1 10 5 1 1 1\") == \"NO\"\nassert solution(\"1\\n1 1 1 1 1 1 1 1\\n1\") == \"YES\"\nassert solution(\"1\\n1 1 1 1 1 1 1 1\\n1\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == \"YES\"\nassert solution(\"4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == \"NO\"\n\"\"\"\n\n\"\"\"\nQ3. Mizzi's Anniversaries\n\n\nComplexity:\n    Time: O(N*log(N))\n    Space: O(N)\n    \n\"\"\""
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2\\n1 2 3 4\\n2\\n1 1 1 1 1') == 'YES'\nassert solution('1\\n1\\n1 1 1 1 1') == 'YES'\nassert solution('1\\n1\\n1 1 1 1 1') == 'NO'\nassert solution('4\\n1\\n1 1 1 1 1') == 'YES'\nassert solution('4\\n2\\n1 1 1 1 1') == 'YES'\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\") == 'YES\\nYES\\nNO\\nYES\\nYES'\nassert solution(\"5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\") == 'NO\\nNO\\nNO\\nYES\\nYES'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 1 1 1\\n2\\n2 1 1 1 1 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\") == 'YES\\nYES\\nNO\\nYES\\nYES'\n\"\"\"\n\nimport sys\nfrom math import gcd\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_data) == expected_result\n\"\"\"\n\nfrom math import sqrt\n\nfrom itertools import combinations"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1''') == 'YES\\nYES\\nNO\\nYES\\nYES'\n\nassert solution('''5\n1\n1 1 10 10\n2\n10 5 2 10 1 1 2 5\n2\n10 5 1 10 5 1 1 1\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000''') == 'YES\\nNO\\nNO\\nNO\\nNO'\n\n\"\"\"\n\n\"\"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n1\\n10000 10000 10000 10000') == 'YES\\nNO\\nYES\\nYES'\nassert solution('4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000') == 'NO\\nNO\\nNO\\nNO'\nassert solution('3\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000') == 'YES\\nYES\\nNO'\nassert solution('2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000') == 'NO'\nassert solution('4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10000 10000 1 1 1\\n1\\n10000 10000 10000 10000') == 'NO'\n\nprint(solution(\"4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n1\\n10000 10000 10000 10000\"))\n\n\"\"\"\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if len(set(l))!= 1:\n        print(\"NO\")\n    elif l[0] * l[1] == n * l[2] * l[3]:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n3 5 3\n1 2 1\n2 3 9\n2 3 9\n''') == '9'\nassert solution('''\n6 10 3\n1 4 4\n4 2 5\n2 3 2\n3 1 1\n4 5 8\n4 5 8\n5 3 1\n2 3 1\n5 6 5\n''') == '5'\n\nassert solution('''\n7 10 3\n1 2 4\n2 3 2\n3 1 4\n1 3 4\n4 2 3\n2 1 1\n5 5 1\n5 6 9\n''') == '2'\n\nassert solution('''\n6 10 3\n3 4 5\n5 1 4\n1 2 1\n4 3 1\n5 4 4\n1 4 1\n4 3 5\n5 4 1\n4 6 4\n''') == '5'\n\nassert solution('''\n4 4 3\n1 2 1\n2 3 1\n3 1 1\n1 3 1\n''') == '2'\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\\n0 1 2\\n0 2 1\\n\") == \"2\"\nassert solution(\"4 4 0\\n0 1 2\\n0 2 1\\n0 3 1\\n\") == \"0\"\nassert solution(\"4 4 2\\n0 1 2\\n0 2 1\\n0 3 1\\n\") == \"1\"\n\n'''\nimport sys\nfrom heapq import heappush, heappop"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\") == \"3\"\n\nassert solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\") == \"9\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 2\\n1 2 1\\n3 4 2\\n1 2 5\\n4 1 4\\n1 2 3\\n3 2 3\") == \"3\"\n\"\"\"\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n\n    def addEdge(self, u, v, w):\n        self.graph[u].append([v,w])\n\n    def topologicalSortUtil(self, v, visited, stack):\n        visited.add(v)\n\n        for neighbour in self.graph[v]:\n            if neighbour[0] not in visited:\n                self.topologicalSortUtil(neighbour[0], visited, stack)\n\n        stack.insert(0, v)\n\n    def topologicalSort(self):\n        visited = set()\n        stack = []\n\n        for vertex in list(self.graph):\n            if vertex not in visited:\n                self.topologicalSortUtil(vertex, visited, stack)\n\n        print(stack)\n\n    def findShortestPath(self, s, d):\n        visited = set()\n        stack = []\n\n        self.topologicalSortUtil(s, visited, stack)\n\n        dist = [float(\"inf\")] * self.V\n        dist[s] = 0\n        print(dist)\n\n        while stack:\n            i = stack.pop(0)\n\n            for neighbour in self.graph[i]:\n                if neighbour[0] in visited:\n                    continue\n\n                if dist[neighbour[0]] > dist[i] + neighbour[1]:\n                    dist[neighbour[0]] = dist[i] + neighbour[1]\n\n            visited.add(i)\n\n        return dist[d]"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n') == '3'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''6 10 5\n2 5 1\n5 3 9\n6 2 2\n1 3 1\n5 1 8\n6 5 10\n1 6 5\n6 4 6\n3 6 2\n3 4 5''') == '3'\n\n'''\n\u0417\u0430\u0434\u0430\u0447\u0430 \u00ab\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b\u00bb\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435\n\u041f\u043e\u043b\u0443\u0447\u0438\u0432 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u044d\u0442\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438 \u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u043d\u0430 2 \u0442\u0430\u043a\u0438\u0435, \u0447\u0442\u043e \u0441\u0443\u043c\u043c\u0430 \u0438\u0445 \u0434\u0435\u043b\u0435\u043d\u0438\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0447\u0438\u0441\u043b\u043e 3. \u041f\u043e\u043b\u043d\u044b\u0439 \u043f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e, \u0444\u0430\u0439\u043b \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043c\u043e\u0436\u043d\u043e \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435.\n\n\u0417\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u0435\n\u0414\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u044b \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043a\u043b\u044e\u0447\u0438 \u2014 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0434\u0435\u043b\u0438\u043c\u044b\u0445 \u043d\u0430 2 \u0447\u0438\u0441\u0435\u043b \u0438 \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u2014 \u0441\u0430\u043c\u0438 \u0447\u0438\u0441\u043b\u0430.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430 2, \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0442\u044c\u0441\u044f. \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u2014 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043a\u043e\u043c\u044b\u043c\u0438.\n\n3 4 2 3\n3\n5\n3\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b\n\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435 \u0438\u0441\u043a\u043e\u043c\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438 \u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0435\u0439\u0441\u044f \u0441\u043e \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0438\u0437 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043d\u0430 2.\n\n\n6\n\n1\n\n3\n\n2\n\n3\n\n2\n\n3\n\n2\n\n3\n\n3\n\n4\n\n5\n\n6\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n100\n\n101\n\n102\n\n103\n\n104\n\n105\n\n106\n\n107\n\n108\n\n109\n\n110\n\n111\n\n112\n\n113\n\n114\n\n115\n\n116\n\n117\n\n118\n\n119\n\n120\n\n121\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 1\\n2 3 1\\n1 4 2\") == \"2\"\nassert solution(\"5 2 5\\n1 3 3\\n1 2 1\") == \"2\"\nassert solution(\"5 2 5\\n1 3 9\\n1 2 2\") == \"3\"\nassert solution(\"5 3 8\\n1 3 3\\n2 3 2\\n1 4 6\") == \"4\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10 3\") == 3\nassert solution(\"6 10 6\") == 6\nassert solution(\"7 15 18\") == 9\nassert solution(\"7 15 17\") == 9\n\"\"\"\nimport sys\nimport heapq\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''6 10 5\n2 5 1\n5 3 9\n6 2 2\n1 3 1\n5 1 8\n6 5 10\n1 6 5\n6 4 6\n3 6 2\n3 4 5''') == 3\n\nassert solution('''7 15 18\n2 6 3\n5 7 4\n6 5 4\n3 6 9\n6 7 7\n1 6 4\n7 1 6\n7 2 1\n4 3 2\n3 2 8\n5 3 6\n2 5 5\n3 7 9\n4 1 8\n2 1 1''') == 9\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10 1\") == \"1\"\nassert solution(\"6 10 5\") == \"3\"\nassert solution(\"7 15 18\") == \"9\"\n\"\"\"\n\nn, m, k = list(map(int, input().split()))\ng = [[] for _ in range(n)]\nfor _ in range(m):\n    u, v, w = list(map(int, input().split()))\n    g[u - 1].append((v - 1, w))\n    g[v - 1].append((u - 1, w))\n\nINF = 10000000000\nd = [INF] * n\nd[0] = 0\nq = []\nheapq.heappush(q, (0, 0))\nwhile q:\n    _, u = heapq.heappop(q)\n    for v, w in g[u]:\n        if d[v] > d[u] + w:\n            d[v] = d[u] + w\n            heapq.heappush(q, (d[v], v))\n\nprint(d[k - 1])\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n\nprint(\"OK\")\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\\n1 1 1 1 1 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\\n2 2 1 1 2 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\""
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1 3 4 2\\n\") == \"3 1\\n1 1 1 1 1\"\nassert solution(\"6\\n1 5 12 13 2 15\\n\") == \"7 2\\n2 2 1 1 2 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\\n\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\n\n-----Solution-----\n\nThis one was a nice one. I was first trying to convert the string to list and then calculate the number of teams and the total diversity, but it didn't worked. I was trying to sort the list first and then divide the list into groups with different length and I was not able to sort the list.\n\nI got a hint on Codility that the input is not empty, so I wasn't able to sort the list.\n\nI decided to solve this problem with some sort of brute force, so it was clear that I have to do the brute force first.\n\nThe idea is to find the solution that has the least total diversity.\n\n1) Find all the combinations of different lengths.\n2) Check if all the combinations have the same total diversity. If yes, return the solution.\n3) Find the combination with the least total diversity.\n4) Return the solution, the length of the shortest combination, the difference between the maximum and minimum values in the list and the number of the combination."
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 1 3 4 2\\n') == '3 1\\n1 1 1 1 1\\n'\nassert solution('6\\n1 2 5 129 185 581 1041 1909 1580 8150\\n') == '7486 3\\n3 3 3 2 2 2 2 1 1 1\\n'\nassert solution('10\\n1 2 5 129 185 581 1041 1909 1580 8150\\n') == '7486 3\\n3 3 3 2 2 2 2 1 1 1\\n'"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 1 3 4 2') == '3 1'\nassert solution('6\\n1 5 12 13 2 15') == '7 2'\nassert solution('10\\n1 2 5 129 185 581 1041 1909 1580 8150') == '7486 3'\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == '3 1'\nassert solution(\"6\\n1 5 12 13 2 15\") == '7 2'\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == '7486 3'\nprint('The solution is correct!')\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 1 3 4 2') == '3 1\\n1 1 1 1 1 1'\nassert solution('6\\n1 5 12 13 2 15') == '7 2\\n2 2 1 1 2 1'\nassert solution('10\\n1 2 5 129 185 581 1041 1909 1580 8150') == '7486 3\\n3 3 3 2 2 2 2 1 1 1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n') == '1'\nassert solution('8\\n') == '3'\nassert solution('9\\n') == '2'\nassert solution('10\\n') == '3'\n\"\"\""
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n5009') == '1\\n5000 9'\nassert solution('5\\n7\\n9876') == '1\\n1'\nassert solution('1\\n10000') == '1\\n10000'\nassert solution('2\\n10\\n10') == '2\\n1'\nassert solution('1\\n10') == '1\\n1'\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1') == '1'\nassert solution('3\\n1') == '1'\nassert solution('4\\n9') == '2'\nassert solution('4\\n9') == '2'\nassert solution('4\\n9') == '2'\n\"\"\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n5\n5009\n7\n9876\n10000\n10\n\"\"\") == \"\"\"\n2\n5000 9\n1\n7 \n4\n800 70 6 9000 \n1\n10000 \n1\n10\n\"\"\"\n\nprint(solution(\"\"\"\n5\n5009\n7\n9876\n10000\n10\n\"\"\"))\nassert solution(\"\"\"\n5\n5009\n7\n9876\n10000\n10\n\"\"\") == \"\"\"\n2\n5000 9\n1\n7 \n4\n800 70 6 9000 \n1\n10000 \n1\n10\n\"\"\""
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n5009') == '2\\n5000 9'\nassert solution('3\\n7') == '1\\n1'\nassert solution('2\\n9876') == '1\\n1'\nassert solution('2\\n10000') == '1\\n1'\nassert solution('1\\n10') == '1\\n1'\n\"\"\"\n\nimport sys\nimport functools\nimport math\n\nDEBUG = False\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5009\") == \"2\\n5000 9\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n5\\n\") == \"1\\n5002\"\n\"\"\"\n\nimport collections\nfrom typing import List\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n5009\\n7\\n9876\\n10000\\n10\") == \"2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\"\nassert solution(\"1\\n1\") == \"1\\n1\"\nassert solution(\"2\\n1\\n2\") == \"1\\n2\"\nassert solution(\"3\\n1\\n2\\n3\") == \"1\\n2\"\nassert solution(\"4\\n1\\n2\\n3\\n4\") == \"2\\n1\\n2\\n1\\n4\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1\n11\n22\n10001\n5000\n\"\"\") == \"\"\"\n1\n5000 1\n22\n2\n10001 2\n1\n5000\n1\n1\n1\n5009\n1\n\"\"\"\n\n\"\"\"\n[+]Temporal marker            :  Wed, 21:01 | Feb 19, 20\n[+]Temporal marker untethered :  Wed, 21:17 | Feb 19, 20\n[+]Comments                  : *Implemented for 100% and solving problems correctly\n                                *Ran out of time\n                                *Liked the solution\n                                *Once I had the solution, I was curious if I could solve the problem by hand\n                                *Solved the problem by hand and was surprised that I did not know how to solve it\n                                *Thanks to this solution, I have practiced using a phone's dial pad\n                                *And I am glad that I could use the solution to solve this problem\n                                *As a reward for solving this problem, I am giving myself this title: problem solver\n                                *Solved the problem in 15 minutes, the first time I was able to solve a problem with this solution\n                                *Solved the problem in 10 minutes, the second time I was able to solve a problem with this solution\n                                *Solved the problem in 10 minutes, the third time I was able to solve a problem with this solution\n                                *Solved the problem in 10 minutes, the forth time I was able to solve a problem with this solution\n                                *Solved the problem in 10 minutes, the fifth time I was able to solve a problem with this solution\n[+]Tread speed               :  Paced\n[+]Level                     :  Easy\n[+]LINK                      :  https://www.interviewbit.com/courses/programming/topics/design-of-algorithms/\n[+] Supplement Sources       : N/A\n\"\"\""
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2') == '1\\n1'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5009\\n7\\n9876\\n10000\\n10\\n\") == '2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10'\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\\n3\\n2 3 1\") == \"1 1 1 1 1\"\nassert solution(\"1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"1 1 1 1 1\"\nassert solution(\"1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\") == \"1 3 3 3 3\"\n\"\"\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"1 1 1 1 1\"\n\"\"\"\n\n\"\"\"\nGiven:\n\nq = number of queries\nn = number of kids\np = list of kids\n\nFor each query:\n    Find the kid which is getting the book, say kid k, who is getting the book at day i, say day i.\n    For each day i, find the kid who is getting the book at day i, say day i.\n    Find the number of days it takes for the book to return to that kid, say d\n    Print the answer of each query\n\nInput:\n3\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n\nOutput:\n1 1 1 1 1\n3 3 3\n2 3 3 2 1 3\n1\n2 2 2 2\n4 4 4 1 4\n\nSOLUTION:\n\n1) Make a list of the kids\n\n2) Make a dictionary for each kid.\n    - key = kid\n    - value = [day, next_day]\n\n3) Make a dictionary for each book.\n    - key = book\n    - value = [day, next_day]\n\n4) Run through each query\n    - run through each book\n        - run through each kid\n            - record the day the book is returned to him\n\n5) Return the dictionary with the days\n\"\"\""
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n5 1 2 4 3\\n\") == \"1 1 1 1 1\"\nassert solution(\"4\\n1 2 3 4\\n3\\n2 3 1\\n5\\n5 1 2 4 3\\n\") == \"3 3 3\"\nassert solution(\"4\\n1 2 3 4\\n3\\n2 3 1\\n5\\n5 1 2 4 3\\n\") == \"2 3 3 2 1 3\"\n\"\"\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 1 2\") == \"1 1 1 1\"\nassert solution(\"5\\n4 6 2 1 5 3\") == \"3 3 3\"\nassert solution(\"6\\n4 6 2 1 5 3\") == \"2 3 3 2 1 3\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nQ = int(input())\nfor _ in range(Q):\n    n = int(input())\n    p = list(map(int, input().split()))\n    d = [0] * n\n    for i in range(n - 1):\n        j = i\n        while j < n and p[j]!= i + 1:\n            d[p[j] - 1] += 1\n            j += 1\n    for i in range(n):\n        print(d[i], end=\" \")\n    print()\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 1 2 4') == '1 1 1 1'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3') == '1 1 1 1 1'\nassert solution('6 8\\n1 2 3 4 5 6 7 8\\n4\\n1 2 4 3 5 6\\n6\\n2 3 4 5 6 7 8\\n7\\n1 2 3 4 5 6 7 8\\n8\\n2 3 4 5 6 7 8 9') == '1 1 1 1 1 3 3 3'\n\"\"\"\n\nimport sys\n\ndebug = False\ndata = sys.stdin.read().strip().split(\"\\n\")"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 4 1 2\\n1\\n1\\n4\\n3 4 1 2') == '1 1 1 1'\nassert solution('2\\n2 3 1\\n1\\n1\\n2\\n2\\n1') == '3 3 3 2 2 2'\n\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(200_000)"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4'\n\"\"\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3 1 2\\n1 3 4') == '1 1 1 1', 'example1'\nassert solution('6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3') == '1 1 1 1 1', 'example2'\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str([\n    5,\n    [1, 2, 3, 4, 5],\n    3,\n    [1, 2, 2],\n    4,\n    [1, 1, 1, 1]\n])) == [3, 2, 1]\n\"\"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5\\n3\\n1 2 2') == '3'\nassert solution('1 2 3 4 5\\n2\\n1 2') == '2'\nassert solution('1 2 3 4 5\\n1\\n1 1 1 1') == '1'\nassert solution('1 2 3 4 5\\n5\\n1 1 1 1 1') == '1'\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n3\") == \"2\"\nassert solution(\"1\\n4\") == \"1\"\nassert solution(\"2\\n5\") == \"3\"\n\nprint(\"All tests passed.\")\n\"\"\""
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '1'\nassert solution('2\\n2') == '1'\nassert solution('3\\n3') == '3'\nassert solution('4\\n3') == '3'\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\\n2\\n1 1 1 1\") == \"2\"\nassert solution(\"3\\n5\\n1 2 3 4 5\\n3\\n1 2 2\") == \"1\"\n\"\"\"\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 3 4\\n3\\n1 2 2') == '1'\nassert solution('4\\n1 2 3 4\\n3\\n1 1 1 1') == '1'\n\"\"\"\nimport sys\nimport math\nimport collections"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\\n2\\n1 1 1 1\") == \"1\\n1\\n1\"\nassert solution(\"3\\n1 2 3\\n2\\n1 1 1\") == \"1\\n1\\n1\"\nassert solution(\"3\\n1 2 3\\n2\\n1 2 2\") == \"1\\n2\\n2\"\n\"\"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1') == '3\\n2\\n1'\nassert solution('5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1') == '5\\n5\\n2'\nassert solution('5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1') == '2\\n2\\n2'\n\"\"\"\n\n\nfrom sys import stdin\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1\") == \"3\\n2\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\\n\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n\") == \"5 4 0 5 3 3 9 0 2 5\"\n\n\"\"\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\") == \"5 4 0 5 3 3 9 0 2 5\"\n\n\"\"\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\\n\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n\") == \"5 4 0 5 3 3 9 0 2 5\"\n\"\"\""
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n\"\"\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 4 2 1 5 4 3 7 1 2 5\") == '5 4 0 5 3 3 9 0 2 5'\nassert solution(\"10 4\") == '0 0 1 2'\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5') == '5 4 0 5 3 3 9 0 2 5'\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n\n\"\"\""
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n\") == \"5 4 0 5 3 3 9 0 2 5\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n\") == \"5 4 0 5 3 3 9 0 2 5\"\n\"\"\""
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n1 2\\n\") == \"0 0 1\"\nassert solution(\"2 2\\n1 2\\n4 3\\n\") == \"0 0 1 2\""
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\") == \"5 4 0 5 3 3 9 0 2 5\""
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\n\"\"\"\n\n\"\"\"\nPython\n\nclass Solution:\n    def solution(self, stdin):\n        n, k = list(map(int, stdin.split(' ')))\n        p = list(map(int, stdin.split('\\n')[1].split(' ')))\n        q = list(map(int, stdin.split('\\n')[2].split(' ')))\n        if len(p)!= len(q):\n            return \"NO\"\n\n        def is_sorted(arr):\n            if arr == sorted(arr):\n                return True\n            else:\n                return False\n        # first, check if the sorted strings exist\n        if is_sorted(p) and is_sorted(q):\n            # now check if the sorted strings have same letters\n            if set(p) == set(q):\n                pass\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n\nassert Solution().solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\n\"\"\"\n\"\"\"\nC++"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"YES\"\nassert solution(\"3 1\") == \"NO\"\nassert solution(\"4 4\") == \"NO\"\nassert solution(\"3 2\") == \"YES\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2\\n1 2 3\\n1 3 2') == 'abb'\nassert solution('4 1\\n3 4 1\\n2 3 4') == 'NO'\nassert solution('3 2\\n1 2 3\\n1 3 2\\n2 3 1') == 'NO'\nassert solution('3 3\\n1 2 3\\n1 3 2\\n2 3 1') == 'NO'\nassert solution('3 2\\n1 2 3\\n1 3 2\\n3 2 1') == 'NO'\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n1 2 3\\n1 3 2') == 'YES\\nabb'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\nassert solution(\"3 2\\n1 2 3\\n2 1 3\") == \"NO\"\nassert solution(\"3 2\\n1 2 3\\n1 2 3\") == \"YES\\nabc\"\nassert solution(\"3 2\\n1 2 3\\n2 3 1\") == \"YES\\nabb\"\nassert solution(\"3 2\\n1 3 2\\n1 2 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'NO'\nassert solution('2 1') == 'NO'\nassert solution('1 2') == 'NO'\nassert solution('1 2 3') == 'NO'\nassert solution('3 1 2') == 'NO'\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == output()\n\n-----Test input-----\n\n3 2\n1 2 3\n1 3 2\n\n3 3\n1 2 3\n1 3 2\n1 2 3\n\n3 3\n1 2 3\n2 3 1\n1 3 2\n\n3 2\n1 2 3\n2 1 3\n\n3 3\n1 2 3\n3 2 1\n1 3 2\n\n-----Example output-----\nYES\nabc\nab\n\n\"\"\"\n\nn, k = list(map(int, input().split()))\n\np = list(map(int, input().split()))\nq = list(map(int, input().split()))\n\narr = [chr(i) for i in range(97, 97 + k)]\n\nprint(\"YES\" if sorted(arr) == sorted(arr[p[i]-1:p[i]]+arr[p[i]:p[i]+1]+arr[p[i]-1:p[i]] for i in range(n)) and sorted(arr) == sorted(arr[q[i]-1:q[i]]+arr[q[i]:q[i]+1]+arr[q[i]-1:q[i]] for i in range(n)) else \"NO\")\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == \"abb\"\n\"\"\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n1 2 3\\n1 3 2') == 'abb'\n\n\n-----Explanation-----\n\nstring = 'abb'\n\nIt is possible to restore the original string if you write all symbols of the string in the permutation order.\n\nFor example, if the permutation is p = [2, 1, 3] then a string abb is correct if:\n\ns[p[0]] = 'a'\ns[p[1]] = 'b'\ns[p[2]] = 'b'\n\ns[p[0]] <= s[p[1]]\ns[p[1]] <= s[p[2]]\n\ns[p[0]] <= s[p[2]]\n\nThere are no pairs of indices (i, j) such that:\n\ns[p[i]] > s[p[j]]\n\n---"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n10 20 10\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\nassert solution(\"2\\n1\") == \"2\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n20 10 20\\n') == '43'\nassert solution('4\\n10 10 10 10\\n') == '64'\nassert solution('6\\n5 4 5 4 4 5\\n') == '69'\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n20 10 20\\n') == '43\\n1 3 2'\nassert solution('4\\n10 10 10 10\\n') == '64\\n2 1 4 3'\nassert solution('6\\n5 4 5 4 4 5\\n') == '69\\n6 1 3 5 2 4'\nassert solution('2\\n1 4\\n') == '3\\n2 1'\n\n\"\"\""
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n20 10 20\\n') == '43'\nassert solution('4\\n10 10 10 10\\n') == '64'\nassert solution('6\\n5 4 5 4 4 5\\n') == '69'\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n20 10 20\\n\") == \"43\\n1 3 2\"\nassert solution(\"4\\n10 10 10 10\\n\") == \"64\\n2 1 4 3\"\nassert solution(\"6\\n5 4 5 4 4 5\\n\") == \"69\\n6 1 3 5 2 4\"\nassert solution(\"2\\n1 4\\n\") == \"3\\n2 1\""
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n10 10 10 10\") == \"64\\n2 1 4 3\"\n\n\"\"\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n20 10 20') == 43\nassert solution('4\\n10 10 10 10') == 64\nassert solution('6\\n5 4 5 4 4 5') == 69\nassert solution('2\\n1 4') == 3\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n4 2 5 1 3') == '3'\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 5 1 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 5 1 3') == '3'\n\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2 5 1 3\") == '3'\n\"\"\"\n\n\n\"\"\"\nThe key is to notice that for any pair (i, j),\n if P_i > P_j, then P_j > P_i.\n In other words, increasing elements can not be contained in increasing-order sequences.\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 5 1 3\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 5 1 3\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 5 1 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input) == expected_output\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == '3'\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3 3 3') == '1'\n\"\"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 3 3') == 1\n\"\"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\nassert solution('3\\n3 3 3 3') == '0'\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 3 3 3\") == 1\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\n\"\"\"\n\nN = int(input())\na = list(map(int, input().split()))\nfreq = {}\nfor i in a:\n    if i not in freq:\n        freq[i] = 0\n    freq[i] += 1\nfor i in freq:\n    if freq[i] > i:\n        print(freq[i] - i)\n        break\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 3 3 3') == '1'"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\n\n\"\"\""
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('2 3') == '1'\n'''\n\n'''\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\nprint(solution(\"0 2 3 4 5\"))"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 2 3 4 5') == '1'\nassert solution('2 0 1 4 5') == '0'\nassert solution('0 0 3 4 5') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 2 3 4 5') == '1'\nprint(solution('0 2 3 4 5'))\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 2 3 4 5') == '1'\nprint('Test passes.')\n\n-----\nExplanation\nIn this case, Snuke assigned 0 to x_1, so we should print 1.\n\n-- Python cases --\nInput:\n0\nOutput:\n1\n\nInput:\n0 1 2 3 4 5\nOutput:\n2\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 2 3 4 5') == '1'\n\"\"\"\nimport re\n\n_, *args = input()\n\np = re.compile(r'([a-z])[0]')\n\nfor i, c in enumerate(args):\n    if p.match(c):\n        print(i + 1)\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 2 3 4 5') == '1'\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4 5') == '1'\n\"\"\"\n\nstdin = input()\nnumbers = stdin.split(' ')\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])\n\nprint(numbers.index(0) + 1)\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\") == \"0\"\nprint(solution(\"3 5\"))\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\n') == 0\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open('input.txt', 'r').read()) == str(0)\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\") == 0\n\n\"\"\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n\") == \"0\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5') == 0\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n\") == \"0\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\") == \"0\"\n\"\"\"\n\nfrom itertools import product\n\nh, w = input().split()\nH, W = int(h), int(w)\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\n3 2') == '0'\nprint(solution('4 5\\n3 2'), end='')\n\nassert solution('3 4\\n2 1') == '2'\nprint(solution('3 4\\n2 1'), end='')\n\nassert solution('5 5\\n5 5') == '0'\nprint(solution('5 5\\n5 5'), end='')\n\nassert solution('1 1\\n1 1') == '0'\nprint(solution('1 1\\n1 1'), end='')\n\nassert solution('1 2\\n1 1') == '2'\nprint(solution('1 2\\n1 1'), end='')"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n1 10 100''') == 'Yes'\nassert solution('''2\n2 4 6''') == 'No'\nassert solution('''3\n1 10 100''') == 'Yes'\nassert solution('''2\n1 10 100''') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 10 100\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == 'Yes'\n\n-------\n\n>>> def solution(stdin):\n    sequence = stdin.strip().split('\\n')\n    for num in sequence:\n        num = int(num)\n        if num % 4 == 0:\n            continue\n        if num % 4!= 0:\n            return 'No'\n    return 'Yes'\n\nassert solution('') == 'Yes'\nassert solution('1\\n2') == 'No'\nassert solution('2\\n2') == 'No'\nassert solution('1\\n10 100') == 'No'\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 10 100\\n\") == \"Yes\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10 100\") == \"Yes\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n 10 100\") == \"Yes\"\nassert solution(\"3\\n 1 10 100\") == \"Yes\"\nassert solution(\"3\\n 10 100 1\") == \"No\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 10 100\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 10 100') == 'Yes'\nassert solution('3 100 10') == 'Yes'\nassert solution('3 100 100') == 'No'\nassert solution('10 100 10') == 'Yes'\nassert solution('100 10 100') == 'No'\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(s) == 'Yes'\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 10 100\\n\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\n\nassert solution('abc') == 'No'\nassert solution('abcd') == 'No'\n\nassert solution('abcc') == 'No'\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"yx\"\n) == \"Yes\"\nassert solution(\n    \"axy\"\n) == \"Yes\"\nassert solution(\n    \"abc\"\n) == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"xy\") == \"Yes\"\nassert solution(\"yx\") == \"Yes\"\nassert solution(\"xy\") < \"yxa\"\n\n----\nx = \"xy\"\ny = \"yxa\"\n\nl1 = list(x)\nl2 = list(y)\n\nfor i, j in zip(l1, l2):\n    if i < j:\n        print(\"Yes\")\n        break\nelse:\n    print(\"No\")\n\n----\nprint(\"Yes\")\nprint(\"Yes\")\nprint(\"No\")\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\n\"\"\""
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('atcoder') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcd\") == \"Yes\"\nassert solution(\"abca\") == \"Yes\"\nassert solution(\"abcde\") == \"No\"\nassert solution(\"abcc\") == \"No\"\nassert solution(\"abccd\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('ab') == 'ab'\nassert solution('abb') == 'abba'\nassert solution('abc') == 'abc'\nassert solution('aabc') == 'abca'\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"atcoder\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"atcoder\") == \"No\"\nassert solution(\"abc\") == \"No\"\n\n------"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 1') == 'YES'\nassert solution('2 2 1') == 'NO'\nassert solution('2 1 1') == 'NO'\nassert solution('2 1 2') == 'YES'\nassert solution('1 3 3') == 'YES'\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_1) == \"YES\"\nassert solution(test_2) == \"NO\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 5 1') == 'YES'\n\"\"\"\n\na, b, c = map(int, stdin.readline().split(' '))\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 5 1') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 5 1\\n') == 'YES'\nassert solution('4 2 1\\n') == 'NO'\nassert solution('2 2 5\\n') == 'NO'\nassert solution('7 1 1\\n') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5 1\") == 'YES'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n\n\"\"\"\n\nA, B, C = (int(i) for i in stdin.split())"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5 1\\n\") == \"YES\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == 1\nassert solution(\"1 1\") == 1\nassert solution(\"10 10\") == 100\nassert solution(\"100 100\") == 10000\nassert solution(\"123 123\") == 123123\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '2 2'\n) == '1'\nassert solution(\n    '1 2'\n) == '1'\nassert solution(\n    '3 2'\n) == '2'\nassert solution(\n    '2 2'\n) == '1'\n\"\"\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"3 4\") == \"9\"\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"4 4\") == \"8\"\nassert solution(\"5 5\") == \"20\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == '6'\nassert solution(\"4 5\") == '6'\nassert solution(\"100 100\") == '10000'\n\"\"\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('4 6') == '36'\nassert solution('4 2') == '4'\nassert solution('2 2') == '1'\nassert solution('100 100') == '10000'\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2') == '1'\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '3'\nassert solution('1 2 3\\n4 5 6') == '3'\n\n-----Explanation-----\nInput:\n13 3 1\n\nOutput:\n3\n\nThe seats:\n+---+---+---+---+\n|   |   |   |   |\n+---+---+---+---+\n|   |   |   |   |\n+---+---+---+---+\n|   |   |   |   |\n+---+---+---+---+\n|   |   |   |   |\n+---+---+---+---+\n\nCan accommodate all three.\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13 3 1') == '3'\n\"\"\"\nfrom typing import List\n\nX, Y, Z = list(map(int, input().split(' ')))\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13 3 1') == '3'\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('13 3 1\\n') == '3'\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3 1\") == \"3\"\nassert solution(\"2 3 1\") == \"3\"\nassert solution(\"3 3 1\") == \"1\"\nassert solution(\"4 3 1\") == \"1\"\nassert solution(\"5 3 1\") == \"1\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13 3 1\") == 3\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('13 3 1') == '3'\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"13 3 1\\n\") == \"3\"\nassert solution(\"10 9 3\\n\") == \"3\"\nassert solution(\"1 1 1\\n\") == \"1\"\nassert solution(\"1 10 1\\n\") == \"1\"\nassert solution(\"1 10 10\\n\") == \"1\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 2\\n\") == \"3\"\nassert solution(\"6 3 3\\n\") == \"2\"\nassert solution(\"7 3 2\\n\") == \"3\"\nassert solution(\"8 3 2\\n\") == \"4\"\nassert solution(\"10 5 3\\n\") == \"3\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13 3 1') == '3'\n\"\"\""
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5\") == 2\n\"\"\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == \"2\"\nprint(\"Success!\")\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5\") == 2\n\"\"\""
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\n1 3\n1 3\n4 2\n0 4\n5 5\n\"\"\") == \"2\"\n\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4') == 2\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5') == '2'\n\"\"\"\nimport sys"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5\\n') == '2'\n\n\"\"\""
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == \"2\"\n\"\"\"\n\nfrom collections import defaultdict\nimport sys\n\ninputs = sys.stdin.readlines()\n\npoints = defaultdict(list)\nfor i in range(len(inputs)):\n    if i % 2 == 0:\n        points[int(inputs[i].split(\" \")[0])].append((int(inputs[i].split(\" \")[1]), int(inputs[i].split(\" \")[2])))\n\nprint(points)\n\ns = set()\nfor i in points.values():\n    s = s.union(set(i))\n\nprint(s)\n\nres = 0\nfor i in points.values():\n    for j in i:\n        if j[0] < j[1]:\n            res += 1\n\nprint(res)"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4\\n0 3') == '7'\n\"\"\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"2 4\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4') == '7'\n\"\"\"\n\nN, T = map(int, input().split(' '))\nts = list(map(int, input().split(' ')))"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\n-----Solution-----\n\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u043a\u043b\u044e\u0447 - \u0447\u0438\u0441\u043b\u043e \u043e\u0442 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 - \u0447\u0438\u0441\u043b\u043e \u043e\u0442 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f, \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441\u0447\u0435\u0442\u0447\u0438\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043e\u0442\u043c\u0435\u0447\u0430\u0435\u043c \u043a\u0430\u043a \u0438\u043d\u0434\u0435\u043a\u0441 \u043a\u043b\u044e\u0447\u0430.\n\u0418\u0442\u0435\u0440\u0438\u0440\u0443\u0435\u043c\u0441\u044f \u043f\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 N \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f.\n\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u0430 \u0441\u0442\u0430\u0432\u0438\u043c \u043d\u0430 \u0432\u0442\u043e\u0440\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u0441\u043f\u0438\u0441\u043a\u0430,\n\u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u043f\u0438\u0441\u043a\u0430.\n\u0414\u0430\u043b\u0435\u0435 \u043f\u043e\u0434\u0443\u043c\u0430\u0435\u043c, \u043a\u0430\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043c\u044b \u0437\u0430\u043d\u0435\u0441\u0435\u043c \u0432 \u0441\u0447\u0435\u0442\u0447\u0438\u043a.\n\u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 abs \u043c\u044b \u043e\u0442\u0440\u0435\u0437\u0430\u0435\u043c \u0432\u0442\u043e\u0440\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 \u043f\u0435\u0440\u0432\u043e\u0433\u043e,\n\u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0434\u0435\u043b\u0430\u0435\u043c \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435 \u0438 \u043f\u0440\u0438\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.\n\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u0443 \u0432\u0440\u0435\u043c\u044f, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 t_i.\n\u0422\u0430\u043a \u0436\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u0441\u0447\u0435\u0442\u0447\u0438\u043a \u043e\u0442 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.\n\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438."
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 3\\n0 2\") == '4'\n\"\"\"\nfrom dataclasses import dataclass\n\n@dataclass\nclass Interval:\n    start: int\n    end: int"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n2 4\n0 3\n\n\"\"\") == '7'\n\n-----"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4\\n0 3') == '7'\nassert solution('2 2\\n0 0') == '0'\n\nsolution(*input().strip().split('\\n'))\n\"\"\"\n\nN, T = input().strip().split('\\n')\nT = int(T)"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 3\\n') == '7'\nassert solution('2 4\\n') == '7'\nassert solution('2 1\\n') == '2'\nassert solution('2 1\\n2 1\\n') == '4'\nassert solution('1 1\\n') == '1'\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\""
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\n3\\n2\\n1\\n2\\"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1''') == '1'\n\nassert solution('''10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n''') == '0'\n\nassert solution('''8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1''') == '1'\n\nassert solution('''10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n''') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n1\\n2\\n3\\n?2\\nL4\\n?1\\nL5\\n?1\\n\") == \"1\\n1\\n2\"\nassert solution(\"10\\n100\\nR100000\\nR123\\nL101\\n?123\\nL10\\nR115\\n?100\\nR110\\n?115\\n\") == \"0\\n2\\n1\""
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\\n1\\n2\"\n\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\\n2\\n1\"\n\"\"\"\nimport sys\nfrom bisect import bisect"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n\") == '1\\n1\\n2'\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n\") == '0\\n2\\n1'\n\n\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(expected)\n\n\"\"\"\n\n\"\"\"\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1\n\n\"\"\"\n\nimport sys\nimport functools\n\nclass Solution:\n    def solution(self, input: str) -> None:\n        input = sys.stdin.read()\n        n = int(input)\n        \n        print(n)\n        \n        for i in range(n):\n            cmd, n = input().split()\n            n = int(n)\n            \n            if cmd == \"L\":\n                print(n-1)\n            elif cmd == \"R\":\n                print(n+1)\n            else:\n                print(min(n+1, 2*n+2))\n        \n        #print(i)\n            \n    "
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n1\\n2\\n3\\n?2\\nL4\\n?1\\nL5\\n?1\\n\") == '1\\n1\\n2'\nassert solution(\"10\\n100\\nR100000\\nR123\\nL101\\n?123\\nL10\\nR115\\n?100\\nR110\\n?115\\n\") == '0\\n2\\n1'\nassert solution(\"10\\n100\\nR100000\\nR123\\nL101\\n?123\\nL10\\nR115\\n?100\\nR110\\n?115\\n\") == '0\\n2\\n1'\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1''') == '1\\n1\\n2'\nassert solution('''10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n''') == '0\\n2\\n1'\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n\") == '1\\n1\\n2'\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n\") == '0\\n2\\n1'\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n1\\n2\\n3\\n?2\\nL4\\n?1\\nL5\\n?1\\n\") == \"1\\n1\\n2\"\n\nassert solution(\"10\\n100\\n100000\\n123\\nL101\\n?123\\nL10\\nR115\\n?100\\nR110\\n?115\\n\") == \"0\\n2\\n1\"\n\n\"\"\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\\n\") == \"0\\n4\\n6\\n6\\n-1\\n6\\n72\"\n\"\"\""
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n10\\n16\\n26\\n36\\n46\\n') == '0\\n2\\n3\\n4\\n5\\n4\\n'\nassert solution('1\\n9\\n5\\n5\\n10\\n') == '0\\n1\\n0\\n1\\n1\\n1'\nassert solution('2\\n24\\n16\\n32\\n12\\n48\\n') == '1\\n1\\n2\\n2\\n2\\n2\\n'\nassert solution('3\\n50\\n20\\n40\\n5\\n100\\n') == '3\\n2\\n3\\n1\\n0\\n1'\n\n\"\"\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"30\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == \"6\\n4\\n6\\n6\\n-1\\n6\\n72\"\n\"\"\"\n\nq = int(input())\n\nfor i in range(q):\n    n = int(input())\n    i = 1\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        elif n % 3 == 0:\n            n = n // 3\n        elif n % 5 == 0:\n            n = n // 5\n        else:\n            n = -1\n        i += 1\n    print(i - 1)\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000') == '0\\n4\\n6\\n6\\n-1\\n6\\n72'\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == '0\\n4\\n6\\n6\\n-1\\n6\\n6720'\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2\\n3\\n5\") == \"2\"\nassert solution(\"7\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == \"6\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n2 1\\n2 3') == '2\\n1\\n1'\nassert solution('5 2\\n2 1\\n2 3') == '-1\\n1\\n1'\nassert solution('5 4\\n2 1\\n2 3') == '-1\\n1\\n1'\nassert solution('5 5\\n2 1\\n2 3') == '-1\\n1\\n1'"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n5\\n1\\n1\\n3\\n5\\n6\\n6\\n1\\n3\\n5\") == \"1\\n2\\n3\\n4\\n1\\n1\\n1\\n1\\n1\\n1\"\nassert solution(\"4\\n4\\n4\\n4\\n1\\n1\\n1\\n1\\n1\") == \"-1\\n-1\\n-1\\n-1\\n1\\n1\\n1\\n1\\n1\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\"\nassert solution(\"7\\n5\\n1\\n1\\n3\\n5\\n6\\n6\\n1\\n3\\n5\") == \"1\\n2\\n3\\n4\\n1\\n1\\n1\\n1\\n1\\n1\"\nassert solution(\"3\\n3\\n3\\n3\\n1\\n1\\n1\\n1\\n1\") == \"-1\\n-1\\n-1\\n-1\\n1\\n1\\n1\\n1\\n1\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000\") == \"0\\n4\\n6\\n6\\n-1\\n6\\n72\\n\", \"Wrong solution\"\nprint(\"Success\")\n\n\"\"\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000') == '4'\nassert solution('2\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000') == '-1'\nassert solution('2\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000') == '-1'\nassert solution('2\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000') == '-1'\nassert solution('2\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000') == '-1'\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1 3\") == \"YES\"\nassert solution(\"4\\n1 1 2 1\") == \"NO\"\nassert solution(\"4\\n11 11\") == \"YES\"\nassert solution(\"1\\n100\") == \"YES\"\nassert solution(\"2\\n10 100\") == \"YES\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\") == \"NO\"\nassert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"1\\n11 11\\n1\\n100\") == \"YES\"\n\nprint(solution(input()))"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\n''') == 'YES\\nNO\\nYES\\n'\n\nassert solution('''\n4\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\n''') == 'YES\\nNO\\nYES\\n'\n\nassert solution('''\n4\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\n''') == 'YES\\nNO\\nYES\\n'\n\nassert solution('''\n3\n2\n2 2\n2\n1\n1 1\n2\n1\n1\n''') == 'YES\\nNO\\nYES\\n'\n\nassert solution('''\n3\n2\n2 2\n2\n1\n1 1\n1\n1\n''') == 'YES\\nNO\\nYES\\n'"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_cases[0]) == \"YES\"\nassert solution(test_cases[1]) == \"NO\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_cases[0]) == \"NO\"\nassert solution(test_cases[1]) == \"YES\"\nassert solution(test_cases[2]) == \"YES\"\nassert solution(test_cases[3]) == \"YES\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"\n\n\"\"\"\n\nimport sys\nimport os\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"NO\"\nassert solution(\"5\\n1 1 3 1\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"2\\n100\\n0\\n100\") == \"NO\"\nassert solution(\"3\\n11\\n1\\n100\") == \"YES\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 1 3') == 'YES'\nassert solution('4\\n1 1 2 1') == 'NO'\nassert solution('1\\n11 11') == 'YES'\nassert solution('2\\n100 100') == 'YES'\nassert solution('2\\n100 100') == 'YES'\n\"\"\"\nimport unittest\nimport sys\n\n\nclass Test_Tetris(unittest.TestCase):\n    def test_solution_1(self):\n        "
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n\"\"\"\n\nimport sys\n\nt = int(sys.stdin.readline())\n\nfor i in range(t):\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n\n    if all(x <= 0 for x in a):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 1 3\\n3\\n1 1 2 1\") == \"YES\"\nassert solution(\"2\\n1 1 3\\n4\\n1 1 2 1\") == \"NO\"\nassert solution(\"2\\n11 11\\n1\\n100\") == \"YES\"\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solution(self, stdin: List[str]) -> str:\n        pass\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\", \"bacabaa\") == 4\nassert solution(\"zcabd\", \"dbacz\") == 0\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abacaba') == '4'\nassert solution('zcabd') == '0'\nassert solution('bacabaa') == '4'"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacaba\", \"bacabaa\") == 4\nassert solution(\"zcabd\", \"dbacz\") == 0\nassert solution(\"aaabb\", \"bbbaa\") == 2\nassert solution(\"abacaba\", \"bacabaa\") == 4\nassert solution(\"aab\", \"baa\") == 1\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a=\"abacaba\", b=\"bacabaa\") == 4\nassert solution(a=\"zcabd\", b=\"dbacz\") == 0\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\nassert solution('abacaba') == 'bacabaa'\nassert solution('zcabd') == 'dbacz'\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abacaba') == '4'\nassert solution('zcabd') == '0'\nassert solution('dbacz') == '0'\n\"\"\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected\n\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List\n\n\nclass Solution:\n    def __init__(self, stdin: List[str]):\n        self.n = int(stdin[0])\n        self.a = stdin[1]\n        self.b = stdin[2]\n        self.ans = float(\"inf\")\n        self.a_counter = Counter(self.a)\n        self.b_counter = Counter(self.b)\n        self.a_len = len(self.a_counter)\n        self.b_len = len(self.b_counter)\n\n    def run(self) -> str:\n        self.b_counter = Counter(self.b)\n        self.a_counter[self.b[0]] -= 1\n        self.b_counter[self.a[0]] -= 1\n        if self.a_counter[self.b[0]] >= 0:\n            self.a_counter[self.b[0]] -= 1\n        if self.b_counter[self.a[0]] >= 0:\n            self.b_counter[self.a[0]] -= 1\n        if self.b_counter[self.b[0]] >= 0:\n            self.a_counter[self.b[0]] -= 1\n        if self.a_counter[self.b[0]] >= 0:\n            self.b_counter[self.a[0]] -= 1\n        if self.a_counter[self.b[0]] >= 0:\n            self.a_counter[self.b[0]] -= 1\n        self.a_counter[self.a[0]] += 1\n        self.b_counter[self.b[0]] += 1\n        self.a_counter[self.b[0]] += 1\n        self.b_counter[self.a[0]] += 1\n\n        self.a_counter[self.a[0]] += 1\n        self.b_counter[self.b[0]] += 1\n\n        if self.a_counter[self.a[0]] >= 0 and self.b_counter[self.b[0]] >= 0:\n            self.ans = min(self.ans, 2 * self.a_len)\n        if self.a_counter[self.a[0]] >= 0 and self.b_counter[self.b[0]] < 0:\n            self.ans = min(self.ans, self.a_len)\n        if self.a_counter[self.a[0]] < 0 and self.b_counter[self.b[0]] >= 0:\n            self.ans = min(self.ans, self.b_len)\n        if self.a_counter[self.a[0]] < 0 and self.b_counter[self.b[0]] < 0:\n            self.ans = min(self.ans, abs(self.a_counter[self.b[0]]) + abs(self.b_counter[self.a[0]]))\n        return str(self.ans)\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abacaba', 'bacabaa') == 4\nassert solution('zcabd', 'dbacz') == 0\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('zcabd') == '0'\nassert solution('dbacz') == '0'\nassert solution('abcde') == '5'\nassert solution('abcefgh') == '8'\nassert solution('abcdefgh') == '8'\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abacaba') == 4\nassert solution('bacabaa') == 0\nassert solution('zcabd') == 0\nassert solution('dbacz') == 4\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == '8 -17 2999999997 0 1'\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\nprint(solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\"))\n\n\"\"\"\n\nimport sys\nfrom typing import List\n\nT = int(sys.stdin.readline())\nfor t in range(T):\n    a, b, k = map(int, sys.stdin.readline().split())\n    s = 0\n    for i in range(k):\n        s += a-b\n    print(s)\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 2\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\") == \"0 -1 -1\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 1 10\\n7 2 9\\n3 2 1\") == \"7\\n28\"\n\"\"\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n198\\n-17\\n2999999997\\n0\\n1\") == '8\\n198\\n-17\\n2999999997\\n0\\n1'\nassert solution(\"5\\n2\\n3\\n100 1 4\\n1\\n10 5\") == '8\\n198\\n-17\\n2999999997\\n0\\n1'\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7\\n7 7') == '0\\n0'\nassert solution('2\\n2 2') == '1\\n0'\nassert solution('1\\n1 1') == '-1\\n0'\n\"\"\"\n\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \\\n    \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\n\n\"\"\""
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999''') == '8 198 -17 2999999997 0 1'\n\n\"\"\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000') == '1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000\\n\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089\"\nprint(\"Test pass.\")\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('5\\n12345') == '3'\nassert solution('12\\n312') == '10'\nassert solution('17\\n495970') == '0'\nassert solution('8\\n214512') == '5'\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1\\n2\\n3\") == \"3\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1\") == \"1\"\nassert solution(\"5\\n1\") == \"1\"\nassert solution(\"5\\n2\") == \"3\"\nassert solution(\"4\\n2\") == \"3\"\nassert solution(\"5\\n3\") == \"7\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n6') == '9'\nassert solution('1\\n1') == '1'\nassert solution('1\\n2') == '3'\nassert solution('1\\n6') == '9'\nassert solution('1\\n13') == '13'\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n\"\"\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2\\n1\\n2\\n3\\n2\\n4') == '6'\nassert solution('4\\n1\\n2\\n2\\n1\\n2\\n3\\n2\\n4') == '7'\n\"\"\"\nimport math"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1\") == \"2\"\nassert solution(\"4\\n2\") == \"3\"\nassert solution(\"5\\n6\") == \"7\"\nassert solution(\"5\\n1\") == \"2\"\nassert solution(\"5\\n2\") == \"3\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1') == '1'\nassert solution('4\\n2') == '1'\nassert solution('4\\n6') == '3'\nassert solution('4\\n13') == '9'\nassert solution('4\\n14') == '9'\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10') == '7077177177999999999'\nassert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10') == '7077177177999999999'\nassert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10') == '7077177177999999999'\nassert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10') == '7077177177999999999'\nassert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10') == '7077177177999999999'\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70\\n77\\n177177\\n999999999\\n55\\n10\""
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10') == '707717717799999999999'\nassert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10') == '707717717799999999999'\nassert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10') == '707717717799999999999'\nassert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10') == '707717717799999999999'\nassert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10') == '707717717799999999999'\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 8 5 3\") == \"70\"\nassert solution(\"12 8 8 7 2\") == \"77\"\nassert solution(\"12343 43 4543 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 10 8 5 3\") == 70\nassert solution(\"12 8 8 7 2\") == 77\nassert solution(\"12343 43 4543 39 123212\") == 177177\nassert solution(\"1000000000 1000000000 1 1 1\") == 999999999999999999\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == 999999999999999999\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70 77 177177 999999999955 10\"\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70 77 177177 999999999955 10\"\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70 77 177177 999999999955 10\"\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70 77 177177 999999999955 10\"\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70 77 177177 999999999955 10\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"707717727999\"\n\n\"\"\""
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == '70\\n77\\n177177\\n999999999\\n55\\n10'"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 10 8 5 3\") == \"70\"\nassert solution(\"12 8 8 7 2\") == \"77\"\nassert solution(\"12343 43 4543 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10''') == '70'\n\nassert solution('''10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10''') == '77'\n\nassert solution('''10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10''') == '177177'\n\nassert solution('''10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10''') == '999999999000000000'\n\nassert solution('''10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10''') == '999999999'"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('123') == '321'\nassert solution('456') == '654'\n\"\"\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n10 10\") == \"1\"\nassert solution(\"2 4\\n7 4\") == \"2\"\nassert solution(\"9 3\\n\") == \"2\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----\n2\n2 3\n2 3\n\n2\n1 2\n1 2\n\n1\n1 2\n1 2\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"7 4\") == \"2\"\nassert solution(\"9 3\") == \"1\""
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"7 4\") == \"2\"\nassert solution(\"9 3\") == \"1\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n10 10') == '1'\nassert solution('2 4\\n7 4') == '2'\nassert solution('2 4\\n1 1') == '0'\nassert solution('2 4\\n10 10') == '2'\nassert solution('2 4\\n5 5') == '1'"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n10 10\") == \"1\"\nassert solution(\"2 4\\n7 4\") == \"0\"\nassert solution(\"9 3\\n\") == \"2\"\nassert solution(\"2 4\\n7 4\") == \"2\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n10 10\") == \"1\"\nassert solution(\"2 4\\n7 4\") == \"2\"\nassert solution(\"9 3\\n2 4\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\\n\") == \"1\\n0\\n2\\n2\\n1\"\nassert solution(\"2 3\\n10 10\\n2 4\\n7 4\\n9 3\\n\") == \"1\\n0\\n2\\n2\\n1\"\n\"\"\"\n\nimport sys\n\nT = int(input())\n\nfor i in range(T):\n    a, b = [int(x) for x in input().split()]\n    ans = 0\n    ans += (a % 2)\n    if a < b:\n        ans += abs(b - a) // 2\n    else:\n        ans += abs(a - b) // 2\n\n    print(ans)\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n2 3\n10 10\n2 4\n7 4\n9 3\n''') == '''1\n0\n2\n2\n1\n'''\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n1\n2\n3\n4\n5\n''') == '1'\nassert solution('''\n6\n9\n8\n7\n10\n11\n''') == '1'\nassert solution('''\n4\n9\n8\n7\n10\n11\n''') == '2'\nassert solution('''\n13\n8\n9\n10\n5\n12\n''') == '2'\nassert solution('''\n9\n5\n8\n7\n10\n11\n''') == '0'\n"
    }
]