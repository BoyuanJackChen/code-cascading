[
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8''') == '5\n        1 8 6\nassert solution('''8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8''') == '1 8 6'\nassert solution('''8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8''') == '1 8 6'\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\""
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\nassert solution(\"3\\n1 2\\n2 3\") == \"0\\n1 3 2\"\nassert solution(\"3\\n1 2\\n2 3\") == \"0\\n1 3 2\"\nassert solution(\"3\\n1 2\\n2 3\") == \"0\\n1 3 2\"\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\"\"\""
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '1'\nassert solution('1 2\\n2 3') == '1'\nassert solution('1 2\\n2 3\\n3 4') == '1'\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2\\n2 3\\n3 4\\n4 5') == '5'\nassert solution('4\\n1 2\\n2 3\\n3 4') == '2 3 4'\nassert solution('5\\n1 2\\n2 3\\n4 4\\n5 5') == '2 3 4 5'\nassert solution('8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n5 7\\n6 8') == '5 7 6'\n\"\"\""
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n''') == '5'\n\nassert solution('''\n8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n''') == '1 8 6'\nassert solution('''\n4\n1 2\n2 3\n3 4\n''') == '1 4'\n\nassert solution('''\n6\n1 2\n2 3\n2 4\n3 5\n''') == '1 5'\nassert solution('''\n4\n1 2\n3 2\n3 4\n''') == '1 4'\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\nassert solution(\"8\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\") == \"5\\n1 8 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n\") == \"5\\n1 8 6\"\nassert solution(\"4\\n1 2\\n2 3\\n3 4\\n4 5\\n4 6\\n3 7\\n3 8\\n\") == \"5\\n1 8 6\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n2 3\\n2 1\\n1 3\\n1 2\") == \"5\\n1 3\\n\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10\\n10 2 8 1 2 4 1 20 4 5') == '20 8'\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n1 2 3 4 5''') == '1 2 5 3 4'\n\n\"\"\"\n\nn = int(stdin.readline())\nlist = list(map(int, stdin.readline().split()))\n\nx = [1, 1]\ny = [1, 1]\n\nfor i in range(n):\n    if list[i] == x[0] or list[i] == x[1]:\n        x[0] = list[i]\n        x.append(list[i])\n    elif list[i] == y[0] or list[i] == y[1]:\n        y[0] = list[i]\n        y.append(list[i])\n    else:\n        print(list[i], end=' ')\n\nprint(*x[1:])\nprint(*y[1:])"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '2 1'\nassert solution('2 2') == '2 2'\nassert solution('2 1') == '2 1'\nassert solution('10 1 2 1 2 1 3 2 1 2 2 3 1 4 1 5 1 6 2 1 1 2') == '12 5 6 1 4 2 3'\n'''\n\nimport math\nimport sys"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1\\n') == '1 1'\nassert solution('4\\n1 2\\n') == '1 2'\nassert solution('7\\n1 1\\n') == '1 1'\nassert solution('8\\n1 1\\n') == '1 2'\nassert solution('4\\n1 2\\n') == '1 2'\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1, 2, 4, 1, 2, 3, 6\") == \"4, 6, 1, 1, 2, 3, 2\"\nassert solution(\"1, 2, 3, 3, 4, 5, 6\") == \"1, 2, 3, 4, 5, 6\"\nassert solution(\"1, 1, 2, 4, 6, 3, 2\") == \"4, 6, 1, 1, 2, 3, 2\"\n\nSolution\n\"\"\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\n10 2 8 1 2 4 1 20 4 5\") == \"20 8\"\n\"\"\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2 8 1 2 4 1 20 4 5\") == \"20 8\""
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(print())"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 3') == '4 2'\n\"\"\""
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == \"56\"\n\"\"\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == 24\n\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\") == 56\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == '24'\n\"\"\"\n\nn, m, k = [int(x) for x in stdin.readline().split(' ')]\n\na = [[int(x) for x in stdin.readline().split(' ')] for _ in range(n)]\na.sort(key=lambda x: sum(x) % k, reverse=True)\n\nans = 0\nfor i in range(min(m // k, n)):\n    ans += sum(a[i][:2 * k])\n\nprint(ans)\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == '24'\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n\"\"\""
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n\") == 24\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\\n\") == 56\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n\") == \"24\"\nassert solution(\"5 5 4\\n1 2 4 2 1\\n3 5 1 2 4\\n1 5 7 1 2\\n3 8 7 1 2\\n8 4 7 1 6\\n\") == \"56\""
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\") == \"24\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4') == '24'\n\"\"\"\n\nn, m, k = map(int, stdin.readline().split())\n\nmat = []\n\nfor _ in range(n):\n    mat.append(list(map(int, stdin.readline().split())))\n\nresult = 0\n\nfor i in range(n):\n    for j in range(m):\n        if i < j:\n            for k in range(m - j):\n                result = max(result, mat[i][j + k] * mat[i][j + k + 1])\n                if result % k == 0:\n                    break\n                else:\n                    result = 0\n\nprint(result)\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 4 3 2\\n\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\\n\") == \"6\\nLRLRRR\"\nassert solution(\"3\\n2 2 2\\n\") == \"1\\nR\"\nassert solution(\"4\\n1 2 4 3\\n\") == \"4\\nLLRR\"\n\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nLRLRRR\"\nassert solution(\"3\\n2 2 2\") == \"1\\nR\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRR\"\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 4 3 2\\n\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\\n\") == \"6\\nLRLRRR\"\nassert solution(\"3\\n2 2 2\\n\") == \"1\\nR\"\nassert solution(\"4\\n1 2 4 3\\n\") == \"4\\nLLRR\"\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nRRRR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nRRLRRR\"\nassert solution(\"3\\n2 2 2\") == \"1\\nR\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRR\"\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input_string) == answer_string\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 4 3 2\\n\") == \"4\\nLRRR\", \"The only difference between problems C1 and C2 is that all values in input of problem C1 are distinct (this condition may be false for problem C2)\"\n\nassert solution(\"7\\n1 3 5 6 5 4 2\\n\") == \"6\\nLRLRRR\", \"You can solve this problem by creating a set of integers you have to take elements from, and then you can take all the numbers in the sequence from the set with max length (like in the problem C1)\"\n\nassert solution(\"3\\n2 2 2\\n\") == \"1\\nR\", \"You can solve this problem by creating a set of integers you have to take elements from, and then you can take all the numbers in the sequence from the set with max length (like in the problem C1)\"\n\nassert solution(\"4\\n1 2 4 3\\n\") == \"4\\nLLRR\", \"The only difference between problems C1 and C2 is that all values in input of problem C1 are distinct (this condition may be false for problem C2)\"\n\n\"\"\"\n\nimport sys\nimport collections\n\nclass Solution:\n    def __init__(self):\n        self.input = sys.stdin.readline().rstrip()\n        self.nums = list(map(int, self.input.split()))\n\n    def solution(self) -> None:\n        q = collections.deque()\n        q.append(self.nums.pop())\n        while len(self.nums) > 0:\n            curr = self.nums.pop()\n            while q and curr <= q[-1]:\n                q.pop()\n            q.append(curr)\n\n        # print(q)\n        while len(q) > 0:\n            print(q.popleft(), end=\"\")\n\n\nsol = Solution()\nsol.solution()\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 4 3 2') == '4\\nLRRR'"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 4 3 2') == '4\\nLRRR'\nassert solution('7\\n1 3 5 6 5 4 2') == '6\\nLRLRRR'\nassert solution('3\\n2 2 2') == '1\\nR'\nassert solution('4\\n1 2 4 3') == '4\\nLLRR'\n\"\"\"\nimport heapq"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 4 3 2\") == \"4\\nR\"\nassert solution(\"7\\n1 3 5 6 5 4 2\") == \"6\\nLRLRRR\"\nassert solution(\"3\\n2 2 2\") == \"1\\nR\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRR\"\n\"\"\"\n\n\"\"\"\n\ubb38\uc81c \ud574\uacb0\ubc29\ubc95\n1. \ubaa8\ub4e0 \uc6d0\uc18c\uac00 \uc5f0\uc18d\ud574\uc57c \ud55c\ub2e4.\n2. \uc21c\uc11c\ub3c4 \uc870\uac74\uc744 \uc798 \uccb4\ud06c\ud558\uc790.\n3. \uac00\uc7a5 \uae34 \uc99d\uac00\ud558\ub294 \ubd80\ubd84 \uc218\uc5f4\uc744 \ucc3e\ub294 \ubb38\uc81c\n\n\uc544\uc774\ub514\uc5b4\n1. \uac00\uc7a5 \uae34 \uc99d\uac00\ud558\ub294 \ubd80\ubd84 \uc218\uc5f4\uc744 \ucc3e\ub294\ub2e4.\n2. \uc99d\uac00\ud558\ub294 \ubd80\ubd84 \uc218\uc5f4\uc5d0\uc11c \ucd5c\ub313\uac12\uc744 \uad6c\ud55c\ub2e4.\n3. \uc21c\uc11c\ub3c4\uc5d0\uc11c \ucd5c\ub313\uac12\uc774 \ub098\uc624\ub294\uc9c0 \ud655\uc778\ud55c\ub2e4.\n\n\uc810\ud654\uc2dd\ni\ubc88\uc9f8 \uc6d0\uc18c\uc5d0 \ub300\ud55c \uac12\uc740 \ud55c\ucabd\uc5d0\uc11c \ucd5c\ub300\uac12\ub4e4 \uc911\uc5d0\uc11c \ucd5c\ub313\uac12\uc744 \uac00\uc9c4\ub2e4.\n\ud2b9\uc815 \uc6d0\uc18c\uc5d0 \ub300\ud55c \uac12\uc744 \ucd5c\ub300\uac12 \uc911 \ucd5c\uc18c\uac12\uc774 \uc544\ub2cc \uacbd\uc6b0\uc5d0\ub294 \ucd5c\ub300\uac12 \uc911 \ucd5c\uc18c\uac12\uc744 \uac00\uc9c4\ub2e4.\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 4 3 2') == '4\\nR R R', 'Wrong output'\nassert solution('7\\n1 3 5 6 5 4 2') == '6\\nL R R R', 'Wrong output'\nassert solution('3\\n2 2 2') == '1\\nR', 'Wrong output'\nassert solution('4\\n1 2 4 3') == '4\\nL R R', 'Wrong output'\n\"\"\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(a) == d\n\"\"\"\n\nn = int(input().strip())\na = list(map(int, input().strip().split()))\n\nd = max(a)\n\nprint(d) if d <= 0 else print(d - max(a.count(d), a.count(-d)))\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 3 7\") == 3\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 5 2 5\") == 3\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6\\n1 4 4 7 4 1') == '3'\nassert solution('5\\n2 2 5 2 5') == '3'\nassert solution('4\\n1 3 3 7') == '-1'\nassert solution('2\\n2 8') == '3'\n\"\"\"\n\nn = int(input())\nnumbers = list(map(int, input().split()))\n\nD = 0\n\nmin_value = min(numbers)\n\nfor value in numbers:\n    D += abs(value - min_value)"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_0) == test_0_result\nassert solution(test_1) == test_1_result\nassert solution(test_2) == test_2_result\nassert solution(test_3) == test_3_result\nassert solution(test_4) == test_4_result\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 4 4 7 4 1\") == 3\n\n\"\"\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 4 4 7 4 1\") == \"3\"\nassert solution(\"5\\n2 2 5 2 5\") == \"3\"\nassert solution(\"4\\n1 3 3 7\") == \"3\"\nassert solution(\"2\\n2 8\") == \"3\"\nassert solution(\"4\\n2 8\") == \"3\"\n\nprint(\"Successfully solved.\")\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\n\nassert solution('0 1 2 3') == '1'\n\nassert solution('1 1 1 1 1') == '1'\n\nassert solution('1 2 3 4 5') == '-1'\n\nassert solution('2 2 1 2 5') == '3'"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 5 2 5\") == \"3\"\nassert solution(\"1 3 3 7\") == \"-1\"\nassert solution(\"4 8 1 1\") == \"0\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"3 5 3 4 1\") == \"0\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 1000000 1000000\") == \"YES\"\nassert solution(\"0 0 499999 1000000\") == \"YES\"\nassert solution(\"500000 0 1000000 1000000\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\") == \"YES\"\n\nassert solution(\"3 1 7 6\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\") == \"YES\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\nassert solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\") == \"YES\"\n\n\n\"\"\""
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\\n500000 0 1000000 1000000\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 3 5\\n3 1 5 5') == 'NO'\nassert solution('0 0 4 6\\n0 0 7 4') == 'YES'\nassert solution('0 0 1000000 1000000\\n500000 0 1000000 1000000') == 'YES'\nassert solution('5 2 10 5\\n3 1 7 6') == 'YES'\nassert solution('0 0 499999 1000000\\n0 0 1000000 1000000') == 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == \"NO\"\n\nassert solution(\"2 2 4 4\") == \"NO\"\nassert solution(\"1 1 3 5\") == \"YES\"\nassert solution(\"3 1 5 5\") == \"YES\"\n\nassert solution(\"5 2 10 5\") == \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 0 4 6\\n0 0 7 4\\n500000 0 1000000 1000000\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 4 4\\n1 1 3 5\\n3 1 5 5\") == \"NO\"\nassert solution(\"3 3 7 5\\n0 0 4 6\\n0 0 7 4\") == \"YES\"\nassert solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\") == \"YES\"\n\n\nimport sys\n\na, b, c, d = (int(s) for s in sys.stdin.read().split())"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 4 6\") == \"YES\"\nassert solution(\"0 0 7 4\") == \"YES\"\nassert solution(\"3 1 7 6\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\nassert solution(\"5 2 10 5\") == \"YES\"\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1098') == '20'\n\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1098\") == 20\n\n\"\"\""
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1098') == 20\nassert solution('10') == 19\nassert solution('1') == 1\nassert solution('12') == 4\nassert solution('23') == 6\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1098\") == 20\n\"\"\""
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1098\") == 20\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1098\") == 20\nassert solution(\"10\") == 19\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1098\") == 20\n\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1098\") == 20\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1098\") == 20\n\"\"\""
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('0 0 1 2 3') == '0 1 2 3 4'\n\"\"\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 0 0 2 4\") == \"5 3 1 2 4\"\n\nassert solution(\"7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\n\nassert solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\n\nassert solution(\"5 0 0 2 4\") == \"5 3 1 2 4\"\n\nassert solution(\"7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\""
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\n\"\"\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n5 0 0 2 4') == '5 3 1 2 4'\nassert solution('7\\n7 0 0 1 4 0 6') == '7 3 2 1 4 5 6'\nassert solution('5\\n2 1 0 0 0') == '2 1 4 5 3'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n5 0 0 2 4\\n') == '5 3 1 2 4'\nassert solution('7\\n7 0 0 1 4 0 6\\n') == '7 3 2 1 4 5 6'\nassert solution('7\\n7 4 0 3 0 5 1\\n') == '7 4 2 3 6 5 1'\n\"\"\""
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\nassert solution(\"7\\n7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7\\n7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\nassert solution(\"5\\n2 1 0 0 0\") == \"2 1 4 5 3\"\nassert solution(\"7\\n0 1 0 0 0 0\") == \"0 1 6 2 5 4 3\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 0 0 2 4\") == \"5 3 1 2 4\"\n\nassert solution(\"7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\nassert solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\"\nassert solution(\"7 0 0 1 4 0 6\") == \"7 3 2 1 4 5 6\"\n\nprint(\"Test finished.\")\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n5 0 0 2 4\") == \"5 3 1 2 4\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n5 0 0 2 4') == '5 3 1 2 4'\nassert solution('7\\n7 4 0 3 0 5 1') == '7 3 2 1 4 5 6'\nassert solution('7\\n7 0 0 1 4 0 6') == '7 3 2 1 4 5 6'\nassert solution('5\\n2 1 0 0 0') == '2 1 4 5 3'\n\"\"\""
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 1') == 'YES\\n2 1 1 2 1'\nassert solution('5 2\\n2 1 1 2 1') == 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\""
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n1 2 2 3') == 'YES\\n1 1 2 2'\nassert solution('5 2\\n3 2 1 2 1') == 'YES\\n2 1 1 2 1'\nassert solution('5 2\\n2 1 1 2 1') == 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n2 1 1 2 1\\n2 1 1 1 2\") == \"NO\"\nassert solution(\"5 3\\n1 2 2 3\\n2 1 1 2\\n2 2 1 3\") == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n2 1 1 2 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == \"NO\"\nassert solution('1 1 2 2') == \"YES\\n1 1 2 2\"\nassert solution('2 1 1 2 1') == \"NO\"\nassert solution('2 1 1 1 1') == \"YES\\n2 2 1 1 1\"\nassert solution('5 2 1 2 1') == \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 1\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n2 1 1 2 3\") == \"NO\"\n\"\"\"\n\nn, k = map(int, input().split())\n\na = list(map(int, input().split()))\n\na = sorted(a)\n\nans = []\n\nfor i in range(k):\n    if i + 1 in a:\n        if i + 1 not in ans:\n            ans.append(i + 1)\n            continue\n        else:\n            continue\n    else:\n        if i + 1 not in ans:\n            ans.append(i + 1)\n            continue\n        else:\n            continue"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2 2 3\") == \"YES\\n1 1 2 2\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"YES\\n2 1 1 2 1\"\nassert solution(\"5 2\\n2 1 1 2 1\") == \"NO\"\nassert solution(\"5 2\\n3 2 1 2 3\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11 5 2\\n11010100101') == '1'\nassert solution('11 5 1\\n11010100101') == '3'\n\nassert solution('11 5 2\\n110101001010') == '1'\nassert solution('11 5 2\\n110101001010') == '1'\n\nassert solution('11 5 2\\n110101001010') == '1'\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 5 2\", \"11010100101\") == \"1\"\nassert solution(\"11 5 1\", \"11010100101\") == \"3\""
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11 5 2\\n11010100101') == '1'\nassert solution('11 5 1\\n11010100101') == '3'"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == '1'\nassert solution(\"11 5 1\\n11010100101\") == '3'\nassert solution(\"11 5 1\\n11010110110\") == '5'\n\"\"\"\nfrom typing import List\n\nfrom icontract import require, ensure\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 5 2', '11010100101') == '1'\nassert solution('11 5 1', '11010100101') == '3'\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11 5 2\") == \"1\"\nassert solution(\"11 5 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n\"\"\"\n\nn, x, y = [int(x) for x in input().split(' ')]\nn = str(n)\ndec = input()"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11 5 2\\n11010100101') == '1'\nassert solution('11 5 1\\n11010100101') == '3'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 5 2\\n11010100101\") == \"1\"\nassert solution(\"11 5 1\\n11010100101\") == \"3\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"YES\"\nassert solution(\"4\\n1 2 3 2\") == \"NO\"\nassert solution(\"4\\n1 2 2 3\") == \"YES\"\nassert solution(\"4\\n1 2 3 2\") == \"NO\"\nassert solution(\"4\\n1 1 1 1\") == \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 1\\n3\") == 'YES'\nassert solution(\"1 2 2 3 2\\n3\") == 'YES'\nassert solution(\"1 2 3\\n3\") == 'NO'\nassert solution(\"1 2 2 1\\n3\") == 'YES'\nassert solution(\"1 2 2 1\\n3\") == 'YES'\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 1 2\\n4\\n1 2 2 1\") == \"NO\"\nassert solution(\"5\\n1 1 2 2 3 3\\n5\\n1 1 2 2 3 3\") == \"NO\"\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"NO\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\") == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 1\") == \"YES\"\nassert solution(\"5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 1 2\") == \"NO\"\nassert solution(\"4\\n1 2 2 1\") == \"YES\"\nassert solution(\"10\\n1 1 2 2 3 3 4 4 5 5\") == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n') == 'YES\\nYES\\nNO\\nYES\\nNO'\nassert solution('4\\n1 2 3 2 1\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n') == 'NO\\nNO\\nYES\\nYES\\nNO'\nassert solution('4\\n1 2 3 2 1\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n') == 'NO\\nNO\\nNO\\nNO\\nNO'\nassert solution('4\\n1 2 3 2 1\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5\\n') == 'NO\\nNO\\nNO\\nNO\\nNO'"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"3\\n1 1 2\\n4\\n1 2 2 1\") == \"YES\"\nassert solution(\"3\\n1 1 2\\n4\\n1 2 2 1\") == \"NO\"\nassert solution(\"3\\n1 1 2\\n4\\n1 2 2 1\") == \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5') == 'YES\\nYES\\nNO\\nYES\\nNO'\nassert solution('5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\\n3\\n1 1 2\\n4\\n1 2 2 1\\n10\\n1 1 2 2 3 3 4 4 5 5') == 'YES\\nYES\\nNO\\nYES\\nNO'\n\"\"\""
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"YES\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\nassert solution(\"5\\n3\\n1 2 1\\n5\\n1 2 2 3 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1337') == '1553'\nassert solution('11111') == '99999'\nassert solution('33') == '33'\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\n\"\"\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"9 8 7 6 5 4 3 2 1\") == \"99999\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1337\") == \"1553\"\nprint('OK!')\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1337\") == \"1557\"\nassert solution(\"5\\n11111\") == \"99999\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1337') == '1557'\nassert solution('5\\n11111') == '99999'\nassert solution('2\\n33') == '33'\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3 4 2 1\") == \"12341234\"\nassert solution(\"4 2 2 3 3 2 3 2 3\") == \"23333333\"\nassert solution(\"8 3 2 1 8 7 6 5 4 3\") == \"99999777777777777777\"\nassert solution(\"8 3 2 1 8 7 6 5 4 3\") == \"99999777777777777777\"\nassert solution(\"8 3 2 1 8 7 6 5 4 3\") == \"99999777777777777777\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1337') == '1557'\nassert solution('5\\n11111') == '99999'\nassert solution('2\\n33') == '33'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1337\") == \"1553\"\nassert solution(\"11111\") == \"99999\"\nassert solution(\"9 8 7 6 5 4 3 2 1\") == \"99999\"\nassert solution(\"1 2 5 4 6 6 3 1 9\") == \"1557\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\n1337\n1 2 5 4 6 6 3 1 9\n''') == '1557'\n\nassert solution('''5\n11111\n9 8 7 6 5 4 3 2 1\n''') == '99999'\n\nassert solution('''2\n33\n1 1 1 1 1 1 1 1 1\n''') == '33'\n\nassert solution('''1\n9\n1\n''') == '9'\n\nassert solution('''3\n11111\n9 8 7 6 5 4 3 2 1\n''') == '99999'"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\\n\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\\n8\\n6 24 48\"\nprint(solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\\n\"))"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 4\") == \"2 1 2\"\nassert solution(\"2 3 5\") == \"2 1 3\"\nassert solution(\"2 3 6\") == \"2 1 4\"\nassert solution(\"2 3 7\") == \"2 2 2\"\n\nassert solution(\"3 3 6\") == \"1 1 3\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"1\"\nassert solution(\"123 321 456\") == \"1\"\nassert solution(\"5 10 15\") == \"1\"\nassert solution(\"15 18 21\") == \"1\"\nassert solution(\"100 100 101\") == \"1\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == \"1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38\"\nprint(solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\"))\n\n\"\"\""
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 3 15') == 4\n\"\"\""
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\") == '1\\n1 1 3\\n102\\n114 228 456\\n4\\n4 8 16\\n6\\n18 18 18\\n1\\n100 100 100\\n7\\n1 22 22\\n2\\n1 19 38'\nprint(\"Ok!\")\n\n\"\"\"\n\nt = int(input())\nfor i in range(t):\n    a,b,c = list(map(int,input().split()))\n    if b%a==0 and c%b==0:\n        print(0)\n        print(a,b,c)\n    else:\n        if (b-a)%(c-b)==0:\n            print((b-a)//(c-b))\n            print(a,c,c)\n        else:\n            print((b-a)//(c-b)+1)\n            print(a,b,c)\n            \n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 3\\n\") == \"1 1 3\"\nassert solution(\"2 2 2\\n\") == \"1 1 1\"\nassert solution(\"5 10 15\\n\") == \"4 3 1\"\nassert solution(\"1 2 3\\n\") == \"1 1 3\"\nassert solution(\"5 10 15\\n\") == \"4 3 1\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 2 3\") == \"2\\n1 1 3\"\nassert solution(\"2\\n3 2 3\") == \"2\\n2 2 3\"\nassert solution(\"2\\n5 10 15\") == \"2\\n5 2 6\"\nassert solution(\"2\\n5 10 15\") == \"2\\n5 2 6\"\nassert solution(\"2\\n100 100 101\") == \"2\\n100 100 101\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 3 7\\n\") == 2\nassert solution(\"1 100000\\n\") == 0\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n\"\"\"\n\n\"\"\"\nn = int(input())\na = list(map(int, input().split()))\nprint(max(a) - min(a))\n\"\"\"\nn = int(input())\na = list(map(int, input().split()))\nprint((max(a) - min(a)) - 1)\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n\n\"\"\"\n\nfrom typing import List, Dict"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"2\"\nassert solution(\"2\\n1 100000\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2 1 3\") == \"0\"\nassert solution(\"4 1 3 7\") == \"2\"\nassert solution(\"1 100000\") == \"0\"\n\nassert solution(\"3 1 2 1 3\") == \"0\"\nassert solution(\"4 1 3 7\") == \"2\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 3 3 7') == '2'\nassert solution('2\\n1 100000') == '0'\nassert solution('1\\n100000') == '0'\n\n\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n1 100000\") == \"0\"\nassert solution(\"3\\n1 3 3 7\") == \"2\"\nassert solution(\"4\\n1 3 3 7\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"1 2 2 1 1 0\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\nassert solution(\"3 2\\n4 7 2\\n1 10 3\") == \"1 2 2 1 1 0\"\nassert solution(\"3 2\\n4 7 2\\n1 10 3\") == \"1 2 2 1 1 0\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == '1 2 3 0 3'\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == '-1'\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == '2 2 2 1 1 0 4 3 4 4'"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n\"\"\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n1 3 1\\n1 5 1') == '1 2 3 0 3'\nassert solution('3 2\\n1 3 1\\n1 2 1') == '-1'\nassert solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'\n\"\"\"\n\n\nimport sys\nimport collections\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n\n\nfrom typing import List\nfrom math import inf\nimport unittest\n\nclass Solution:\n    def find_schedule(self, stdin: str) -> str:\n        pass\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        pass"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 1\\n1 5 1\\n\") == \"1 2 3 0 3\"\nassert solution(\"1 3 1\\n1 2 1\\n\") == \"1 2 0 0 0\"\nassert solution(\"1 3 1\\n3 5 1\\n\") == \"-1\"\nassert solution(\"2 3 1\\n1 2 1\\n\") == \"-1\"\nassert solution(\"3 3 1\\n1 2 1\\n\") == \"-1\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == -1\nassert solution('5 2\\n1 3 1\\n1 5 1') == '1 2 3 0 3'\nassert solution('3 2\\n1 3 1\\n1 2 1') == '-1'\nassert solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1') == '2 2 2 1 1 0 4 3 4 4'\nassert solution('7 3\\n4 6 2\\n5 7 1\\n1 6 1\\n2 5 1\\n3 4 1') == '1 1 1 0 1 0 2 2 1 0 3'\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 2\n1 3 1\n1 5 1''') == '1 2 3 0 3'\nassert solution('''3 2\n1 3 1\n1 2 1''') == '-1'\nassert solution('''10 3\n4 7 2\n1 10 3\n8 9 1''') == '2 2 2 1 1 0 4 3 4 4'\n\n'''\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"1 2 2 1 1 0\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n1 3 1\\n1 5 1\") == \"1 2 3 0 3\"\nassert solution(\"3 2\\n1 3 1\\n1 2 1\") == \"-1\"\nassert solution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\") == \"2 2 2 1 1 0 4 3 4 4\""
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(120) == 7\nassert solution(42) == 0\nassert solution(48) == -1\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-\"\n\n\"\"\"\n\nfrom typing import Tuple, List"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"120 51840\") == \"7\"\nassert solution(\"42 42\") == \"0\"\nassert solution(\"48 72\") == \"-1\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('120 51840') == '7'\nassert solution('42 42') == '0'\nassert solution('48 72') == '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12 36') == '-1'\nassert solution('10 11') == '0'\nassert solution('5 1') == '2'\nassert solution('1 1') == '0'\n\"\"\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aba') == 'abababa'\nassert solution('cat') == 'catcat'\nassert solution('ab') == 'abababa'\nassert solution('a') == 'aaaaaaaa'\nassert solution('aa') == 'aaaaaaaa'\n\"\"\"\n\nn, k = list(map(int, stdin.readline().split()))\nt = stdin.readline().strip()\n\nn_list = []\nfor i in range(n):\n    n_list.append(0)\nfor i in range(k):\n    n_list[i] = 1\n\nfor i in range(k, n):\n    count = 1\n    for j in range(i - k + 1, i + 1):\n        if t[j] == t[i] and n_list[j] == 0:\n            count += 1\n        else:\n            n_list[i] = count\n            break\n\ns = ''\nfor i in range(n):\n    if n_list[i] > 1:\n        for j in range(n_list[i]):\n            s += t[i]\nprint(s)\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aba\", 3) == \"abababa\"\nprint(solution(\"aba\", 3))\n\"\"\"\n\nn, k = [int(s) for s in input().split()]\n\nt = input()\ns = t * k\n\nprint(s)"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aba\") == \"ababababa\"\nassert solution(\"cat\") == \"catcat\"\n\"\"\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(TEST_STDIN_1) == TEST_OUTPUT_1\nassert solution(TEST_STDIN_2) == TEST_OUTPUT_2\nassert solution(TEST_STDIN_3) == TEST_OUTPUT_3\nassert solution(TEST_STDIN_4) == TEST_OUTPUT_4\n\"\"\""
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stub) == exp\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aba\") == \"ababababa\"\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u043d\u0438\u0435\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043d\u0435\u043f\u0443\u0441\u0442\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u0447\u0438\u0441\u043b\u043e\u043c \u0441\u0442\u0440\u043e\u043a \u0438 \u0447\u0438\u0441\u043b\u043e\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 (3\u2264n\u2264100, 3\u2264m\u2264100) \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0441\u0442\u0440\u043e\u043a \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0442 20 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432. \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0432\u0441\u0435\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0441\u0442\u0440\u043e\u043a \u043f\u043e\u0434\u0440\u044f\u0434. \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043f\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044e \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441 \u043d\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.\n\nSample Input 1:\n\n5 3\naba\n\nSample Output 1:\n\nabaabaaba\n\nSample Input 2:\n\n3 2\nabc\n\nSample Output 2:\n\nab\na\nb\n\nSample Input 3:\n\n3 4\nabc\n\nSample Output 3:\n\nabcabcabc\na\nb\nc\n\nSample Input 4:\n\n4 1\naba\n\nSample Output 4:\n\nab\na\nb\na\n\nSample Input 5:\n\n5 4\nabcd\n\nSample Output 5:\n\nabcdabcd\nab\nac\nad\nae\nab\nac\nad\nae\nab\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aba\") == \"ababababa\"\nassert solution(\"ab\") == \"abab\"\nassert solution(\"cat\") == \"catcat\"\n\"\"\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stin) == 'catcat'\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('catcat') == 'catcat'\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba\") == \"abababa\"\nassert solution(\"cat\") == \"catcat\"\n\n\nimport json"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 2 2 3\") == '1\\n1 4'\nassert solution(\"5\\n2 5 1 2 2\") == '0'\nassert solution(\"5\\n8 3 5 2\") == '2\\n1 4'\nassert solution(\"5\\n8 3 5 2\") == '2\\n1 4'\nassert solution(\"5\\n2 5 1 2\") == '0'\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 1 2 2\") == \"3\\n4 1 5\"\nassert solution(\"4\\n8 3 5 2\") == \"2\\n1 4\"\nassert solution(\"5\\n2 1 2 4 3\") == \"0\"\nassert solution(\"4\\n2 1 2 4\") == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1 2') == ''\nassert solution('1 2\\n3') == ''\nassert solution('2\\n2 3') == ''\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 1 2 2\\n\") == '3\\n1 4'\nassert solution(\"4\\n8 3 5 2\\n\") == '2\\n1 4'\nassert solution(\"5\\n2 1 2 4 3\\n\") == '0'\n\"\"\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 2 1\") == \"0\"\nassert solution(\"4 3 2 3\") == \"1 2\"\n\"\"\""
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 5 1 2 2') == '3\\n4 1 5'\nassert solution('4\\n8 3 5 2') == '2\\n1 4'\nassert solution('5\\n2 1 2 4 3') == '0'\n\n\n\"\"\""
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 1 2 4 3\") == \"0\\n4 1 5\"\nassert solution(\"5\\n2 1 2 4 3\") == \"2\\n1 4\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"0\\n1\"\nassert solution(\"7\\n1 1 1 1 1 1 1\") == \"1\\n1\"\nassert solution(\"8\\n1 1 1 1 1 1 1 1\") == \"0\\n1\"\n\"\"\""
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5 1 2 2\\n\") == \"3\"\nassert solution(\"8 3 5 2\\n\") == \"2\"\nassert solution(\"8 3 5 2 4\\n\") == \"0\"\nassert solution(\"4 3 4 1\\n\") == \"0\"\nassert solution(\"1 1 1 1\\n\") == \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 5 1 2 2\") == \"3\\n4 1 5\"\nassert solution(\"4\\n8 3 5 2\") == \"2\\n1 4\"\nassert solution(\"5\\n2 1 2 4 3\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 2 4 3\") == \"3\\n4 1 5\"\nassert solution(\"4\\n8 3 5 2\") == \"2\\n1 4\"\nassert solution(\"5\\n2 1 2 4 3\") == \"0\""
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\nasdf\\n\") == \"4\"\nassert solution(\"5 6\\aaaaa\\n\") == \"15\"\nassert solution(\"5 7\\aaaaa\\n\") == \"-1\"\nassert solution(\"10 100\\ajihiushda\\n\") == \"233\"\n\"\"\""
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5\\nasdf') == '4'\n\nassert solution('5 6\\aaaaa') == '15'\n\nassert solution('5 7\\aaaaa') == '-1'\n\nassert solution('10 100\\ajihiushda') == '233'\n\nassert solution('4 7\\baa') == '1'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\nasdf\") == \"4\"\nassert solution(\"5 6\\aaaaa\") == \"15\"\nassert solution(\"5 7\\aaaaa\") == \"-1\"\nassert solution(\"10 100\\ajihiushda\") == \"233\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 asdf\") == \"4\"\nassert solution(\"5 6 ajihiushda\") == \"15\"\nassert solution(\"5 7 ajihiushda\") == \"-1\"\nassert solution(\"10 100 ajihiushda\") == \"233\"\n\n\"\"\"\n\nn, k = map(int, input().split())\ns = input()\n\nsubs = set()\ns_len = len(s)\ncost = 0\n\nwhile len(subs) < k:\n    sub_len = 1\n    while sub_len < s_len:\n        subs.add(s[:sub_len])\n        sub_len += 1\n    s = s[1:] + s[:1]\n    s_len += 1\n    cost += n - sub_len"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 asdf\") == 4\nassert solution(\"5 6 ajihiushda\") == 15\nassert solution(\"5 7 ajihiushda\") == -1\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n\" \"asdf\") == \"4\"\nassert solution(\"5 6\\n\" \"aaaaa\") == \"15\"\nassert solution(\"5 7\\n\" \"aaaaa\") == \"-1\"\nassert solution(\"10 100\\n\" \"ajihiushda\") == \"233\"\n\"\"\""
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"asdf\", 4) == \"4\"\nassert solution(\"asdf\", 5) == \"4\"\nassert solution(\"asdf\", 6) == \"4\"\nassert solution(\"asdf\", 7) == \"4\"\nassert solution(\"asdf\", 8) == \"4\""
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"asdf\") == \"4\"\nassert solution(\"aaaaa\") == \"15\"\nassert solution(\"ajihiushda\") == \"233\"\n\"\"\""
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\nasdf') == 4\nassert solution('5 6\\aaaaa') == 15\nassert solution('5 7\\aaaaa') == -1\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n2 3\\n3 4\"\nassert solution(\"4 4 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\\n\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n2 1\\n2 3\\n3 4\\n\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\\n\") == \"YES\\n1 2\\n1 3\\n4 1\\n\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\\n\") == \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\\n4 3\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_stdin_1) == test_stdout_1\nassert solution(test_stdin_2) == test_stdout_2\nassert solution(test_stdin_3) == test_stdout_3\nassert solution(test_stdin_4) == test_stdout_4\nassert solution(test_stdin_5) == test_stdout_5\n\nprint('Test passed')\n\n\"\"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4''') == 'YES\\n2 1\\n2 3\\n3 4'\n\nassert solution('''4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4''') == 'YES\\n1 2\\n1 3\\n4 1\\n4 3'\n\nassert solution('''4 4 3\n1 2\n1 4\n2 3\n3 4''') == 'NO'\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 4\\n4 1\"\n\"\"\""
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution('4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4') == \"YES\\n1 2\\n1 3\\n4 1\\n3 4\"\nassert solution('4 4 3\\n1 2\\n1 4\\n2 3\\n3 4') == \"NO\"\nassert solution('4 4 3\\n1 2\\n1 4\\n2 3\\n3 4') == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n2 1\\n2 3\\n3 4\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n4 1\\n4 3\"\nassert solution(\"4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"NO\"\nassert solution(\"4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:10') == '11:11'\nassert solution('01:02') == '02:02'\nassert solution('03:02') == '03:02'\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\n\"\"\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10:00 11:00\") == \"10:30\"\nassert solution(\"11:10 11:12\") == \"11:11\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:10\") == \"11:11\"\nassert solution(\"01:02\") == \"02:02\"\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10:00') == '10:30'\nassert solution('11:00') == '11:30'\nassert solution('11:10') == '11:11'\n\nassert solution('01:02') == '02:02'\n\"\"\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10:00 11:00') == '10:30'\nassert solution('11:10 11:12') == '11:11'\nassert solution('01:02 03:02') == '02:02'\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10:00\\n11:00') == '10:30'\nassert solution('11:10\\n11:12') == '11:11'\nassert solution('01:02\\n03:02') == '02:02'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\n\"\"\""
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\nimport unittest\nimport math\n\n\nclass Solution:\n    def solve(self, h1, m1, h2, m2):\n        return str(h1 + h2) + \":\" + str(math.ceil(m1 + m2 / 2))\n\n\nclass TestSolution(unittest.TestCase):\n\n    def setUp(self):\n        self.solution = Solution()\n\n    def test_one(self):\n        self.assertEqual(\n            self.solution.solve(10, 0, 11, 0),\n            \"10:30\")\n\n    def test_two(self):\n        self.assertEqual(\n            self.solution.solve(11, 10, 11, 12),\n            \"11:11\")\n\n    def test_three(self):\n        self.assertEqual(\n            self.solution.solve(1, 2, 2, 3),\n            \"02:02\")\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10:00\") == \"10:30\"\n\nassert solution(\"11:10\") == \"11:11\"\n\nassert solution(\"01:02\") == \"02:02\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"4\") == 2\nassert solution(\"27\") == 5\nassert solution(\"42\") == 6\n\nprint(\"Well done, you tried your hand at coding!\")"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(12) == 4\nassert solution(42) == 6\nassert solution(27) == 5\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"27\") == 5\n\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"4\") == 2\nassert solution(\"27\") == 5\nassert solution(\"42\") == 6\n\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"27\") == \"5\"\nassert solution(\"42\") == \"6\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '2'\nassert solution('27') == '5'\nassert solution('42') == '6'\nprint('Success')\n\n--------------------------------------------"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"27\") == 5\nassert solution(\"42\") == 6\nassert solution(\"2\") == 1\nassert solution(\"64\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('42') == 6\n\"\"\""
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"4\") == 2\nassert solution(\"27\") == 5\nassert solution(\"42\") == 6\n\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"4\") == 2\nassert solution(\"27\") == 5\nassert solution(\"42\") == 6\nassert solution(\"32\") == 8\n\nprint(\"PASSED\")"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\""
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == '1'\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == '2'\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == '0'\nassert solution(\"2\\n3 10\\n1 5\") == '7'\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 3\\n2 6\\n0 4\\n3 3') == '1'\nassert solution('5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4') == '2'\nassert solution('3\\n4 5\\n1 2\\n9 20') == '0'\nassert solution('2\\n3 10\\n1 5') == '7'\nassert solution('2\\n3 10\\n1 5') == '7'"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\n1 3\n2 6\n0 4\n3 3\"\"\") == \"1\"\n\nassert solution(\"\"\"5\n2 6\n1 3\n0 4\n1 20\n0 4\n\"\"\") == \"2\"\n\nassert solution(\"\"\"3\n4 5\n1 2\n9 20\n\n\"\"\") == \"0\"\n\nassert solution(\"\"\"2\n3 10\n1 5\n\n\"\"\") == \"7\"\n\n\"\"\"\nThe intersection of a sequence of segments is a set of points (not necessarily having integer coordinates) that lie within every segment from the sequence.\n\nThe length of the intersection is the length of the resulting segment or $0$ in case the intersection is an empty set.\n\nFor example, the intersection of segments $[1;5]$ and $[3;10]$ is $[3;5]$ (length $2$), the intersection of segments $[1;5]$ and $[5;7]$ is $[5;5]$ (length $0$) and the intersection of segments $[1;5]$ and $[6;6]$ is an empty set (length $0$).\n\nYour task is to remove exactly one segment from the given sequence in such a way that the intersection of the remaining $(n - 1)$ segments has the maximal possible length.\n\n---\nInput\n\nThe first line contains a single integer $n$ ($2 \\le n \\le 3 \\cdot 10^5$) \u2014 the number of segments in the sequence.\n\nEach of the next $n$ lines contains two integers $l_i$ and $r_i$ ($0 \\le l_i \\le r_i \\le 10^9$) \u2014 the description of the $i$-th segment.\n\n---\nOutput\n\nPrint a single integer \u2014 the maximal possible length of the intersection of $(n - 1)$ remaining segments after you remove exactly one segment from the sequence.\n\n---\nConstraints\n\n2 <= n <= 3 * 10^5\n\n---\nExamples\nInput\n3\n1 3\n2 6\n0 4\n3 3\n\nOutput\n1\n\nInput\n4\n2 6\n1 3\n0 4\n1 20\n0 4\n\nOutput\n2\n\nInput\n5\n4 5\n1 2\n9 20\n\nOutput\n0\n\nInput\n3\n4 5\n1 2\n9 20\n\nOutput\n0\n\nInput\n2\n3 10\n1 5\n\nOutput\n7\n\"\"\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\\n\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\\n\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\\n\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\\n\") == \"7\"\n\"\"\"\nfrom collections import defaultdict\nfrom itertools import permutations"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 3\\n2 6\\n0 4\\n3 3') == '1'\nassert solution('5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4') == '2'\nassert solution('3\\n4 5\\n1 2\\n9 20') == '0'\nassert solution('2\\n3 10\\n1 5\\n') == '7'\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 5\\n\") == \"1\\n\"\nassert solution(\"4 5\\n1 2\\n9 20\\n\") == \"2\\n\"\nassert solution(\"3 10\\n1 5\\n\") == \"0\\n\"\nassert solution(\"2 6\\n1 3\\n0 4\\n1 20\\n0 4\\n\") == \"1\\n\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n4\n1 3\n2 6\n0 4\n3 3\n\"\"\") == \"1\"\nassert solution(\"\"\"\n5\n2 6\n1 3\n0 4\n1 20\n0 4\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3\n4 5\n1 2\n9 20\n\"\"\") == \"0\"\nassert solution(\"\"\"\n2\n3 10\n1 5\n\"\"\") == \"7\"\nassert solution(\"\"\"\n3\n4 5\n1 2\n9 20\n\"\"\") == \"0\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\") == \"1\"\nassert solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\") == \"2\"\nassert solution(\"3\\n4 5\\n1 2\\n9 20\") == \"0\"\nassert solution(\"2\\n3 10\\n1 5\") == \"7\"\n\"\"\""
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5 4 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n5 4 3\") == \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 1 1 2 5\") == \"YES\"\nassert solution(\"3 4 5\") == \"NO\"\nassert solution(\"10 10\") == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2 1') == 'YES'\nassert solution('2 1 1 2 5') == 'YES'\nassert solution('10 10') == 'YES'\nassert solution('4 5 3') == 'NO'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1 1 2 5') == 'YES'\nassert solution('3 4 5') == 'NO'\nassert solution('10 10') == 'YES'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"1\\n10\") == \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == 'YES'\nassert solution(\"3\\n4 5 3\") == 'NO'\nassert solution(\"2\\n10 10\") == 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"2\\n10 10\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n1 1\") == \"YES\"\nassert solution(\"3\\n4 5 3\") == \"NO\"\nassert solution(\"5\\n2 1 1 2 5\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1 2 5\\n\") == \"YES\"\nassert solution(\"4 5 3\\n\") == \"NO\"\nassert solution(\"2 10\\n\") == \"YES\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"asdf\") == \"4\"\nassert solution(\"aaaaa\") == \"15\"\nassert solution(\"ajihiushda\") == \"233\"\n\n\"\"\"\n\nn, k = [int(x) for x in input().split()]\ns = input()"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\nasdf\") == \"4\"\nassert solution(\"5 6\\aaaaa\") == \"15\"\nassert solution(\"5 7\\aaaaa\") == \"-1\"\nassert solution(\"10 100\\ajihiushda\") == \"233\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ajihiushda') == 233\n\n\"\"\"\n\nfrom collections import Counter\nimport math"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"asdf\") == 4\n\"\"\"\n\nfrom sys import stdin\nn,k = list(map(int,stdin.readline().split()))\ns = stdin.readline().strip()\n\ncost = [0 for _ in range(n)]\n\nfor i in range(n):\n    if i<k:\n        cost[i] = n - i\n    elif i>=n-k+1:\n        cost[i] = i - n + k + 1\n    else:\n        cost[i] = i - n + k + 1\n        for j in range(1,k):\n            if s[i+j]!= s[i]:\n                cost[i] += 1\n\nprint(min(cost))\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"asdf\") == 4\nassert solution(\"aaaaa\") == 15\nassert solution(\"ajihiushda\") == 233\n\n\n\n------INPUT------\n\n7 8\nbac\n\n--------OUTPUT-------\n\n15\n\n--------INPUT--------\n\n7 9\nabc\n\n--------OUTPUT--------\n\n6\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"asdf\") == \"4\"\nassert solution(\"aaaaa\") == \"15\"\nassert solution(\"ajihiushda\") == \"233\"\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ajihiushda') == 233\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\nasdf') == '4'\nassert solution('5 6\\naaaaa') == '15'\nassert solution('5 7\\naaaaa') == '-1'\nassert solution('10 100\\najihiushda') == '233'\n\"\"\"\n\nn, k = [int(i) for i in input().split()]\ns = input()\n\nsums = 0\nsets = set()\nfor i in range(n):\n    for j in range(i + 1, n + 1):\n        sets.add(s[i:j])\n\nfor s in sets:\n    sums += len(s)"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aa') == 'aa'\nassert solution('aab') == 'aba'\nassert solution('aabb') == 'abb'\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\najihiushda') == '233'\nassert solution('5 6\\naaaaa') == '15'\nassert solution('5 7\\naaaaa') == '-1'\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '2 1 1'\n) == '4'\nassert solution(\n    '3 2 2'\n) == '7'\nassert solution(\n    '1 100 1'\n) == '3'\nassert solution(\n    '30 20 10'\n) == '39'\nassert solution(\n    '2 100 10'\n) == '7'\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1\") == '4'\nassert solution(\"3 2 2\") == '7'\nassert solution(\"1 100 1\") == '3'"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 1\") == \"4\"\nassert solution(\"30 20 10\") == \"39\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1\") == '4'\nassert solution(\"3 2 2\") == '7'\nassert solution(\"1 100 1\") == '3'\nassert solution(\"30 20 10\") == '39'\nassert solution(\"1 1 1\") == '1'\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('1 100 1') == '3'\nassert solution('30 20 10') == '39'\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 100 1\") == \"3\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"30 20 10\") == \"39\"\nassert solution(\"3 2 2\") == \"7\"\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.readline().split()\na, b, c = int(stdin[0]), int(stdin[1]), int(stdin[2])\n\nfor i in range(7):\n    if i == 3 or i == 6:\n        continue\n    if a % 2 == 0:\n        if b % 2 == 0:\n            if c % 2 == 0:\n                a += 1\n                b += 1\n                c += 1\n            else:\n                a += 1\n                b += 1\n        else:\n            if c % 2 == 0:\n                a += 1\n                b += 1\n            else:\n                a += 1\n                c += 1\n    else:\n        if b % 2 == 0:\n            if c % 2 == 0:\n                a += 1\n                b += 1\n            else:\n                a += 1\n                c += 1\n        else:\n            if c % 2 == 0:\n                a += 1\n                c += 1\n            else:\n                a += 1\n                b += 1\n\nprint(a)\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1\") == \"4\"\nassert solution(\"3 2 2\") == \"7\"\nassert solution(\"1 100 1\") == \"3\"\nassert solution(\"30 20 10\") == \"39\"\n\"\"\"\n\nstdin = input().split()\n\nfood_items = [int(x) for x in stdin]\n\nfood_items.sort()\nprint(food_items[-3])\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4') == 'YES'\nassert solution('1 2') == 'NO'\nassert solution('5 6') == 'YES'\nassert solution('5 7') == 'NO'\nassert solution('7 4') == 'YES'\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2') == 'YES'\n\nassert solution('4 5\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2') == 'NO'\n\nassert solution('3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2') == 'YES'\n\nassert solution('4 5\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n1 2') == 'NO'\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\") == \"YES\"\nassert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n2 2\\n2 2\\n1 100\\n10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_case_1) == \"YES\"\nassert solution(test_case_2) == \"NO\"\nassert solution(test_case_3) == \"YES\"\nassert solution(test_case_4) == \"NO\"\nassert solution(test_case_5) == \"YES\"\n\"\"\""
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"NO\"\n\n\"\"\"\nimport sys\nimport numpy"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 6') == 'NO'\nassert solution('5 7') == 'YES'\nassert solution('7 4') == 'NO'\nassert solution('7 8') == 'YES'\nassert solution('8 9') == 'YES'\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\\n2 5\\n1 1\\n1 1\\n1 2\\n3 4\\n1 2\\n1 1\\n1 1\\n2 2\") == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n5 6\") == \"NO\"\nassert solution(\"1 1\\n2 2\") == \"YES\"\nassert solution(\"1 2\\n1 1\") == \"YES\"\nassert solution(\"1 100\\n10 10\") == \"YES\"\nassert solution(\"10 10\\n10 10\") == \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(input())\n\"\"\"\n\nt = int(input())\n\nfor i in range(t):\n    n, m = list(map(int, input().split()))\n    tile = [[int(j) for j in input().split()] for _ in range(n)]\n    tile = [list(x) for x in zip(*tile)]\n    tile_flag = True\n    for row in tile:\n        if sorted(row)!= row:\n            tile_flag = False\n            break\n    if tile_flag:\n        for i in range(m):\n            row = []\n            for j in range(m):\n                row.append(tile[i][j])\n            if sorted(row)!= row:\n                tile_flag = False\n                break\n    if tile_flag:\n        row_flag = True\n        for i in range(m):\n            if sorted(tile[i])!= tile[i]:\n                row_flag = False\n                break\n        if row_flag:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\") == \"YES\"\nassert solution(\"2 2\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == 0\nassert solution(\"5\") == 1\nassert solution(\"6\") == 1\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '0'\nassert solution('5') == '1'\nassert solution('6') == '1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == '1'\nassert solution('3') == '0'\nassert solution('6') == '1'\nassert solution('1') == '0'\nassert solution('2') == '0'\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"0\"\nassert solution(\"1 3 4\") == \"1\"\nassert solution(\"1 3 5\") == \"1\""
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"3\") == \"0\"\n\"\"\"\n\nn = int(stdin.readline())\n\nmin_ans = abs(sum(set(range(1, n + 1))) - sum(set(range(n + 1, 2 * n + 1))))\nprint(min_ans)"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(3) == 0\nassert solution(5) == 1\nassert solution(6) == 1\n\"\"\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"()))()\") == 5\n\nassert solution(\"(((()))())\") == 4\n\nassert solution(\"(((()))\") == 4\n\nassert solution(\"(((())))\") == 4\n\nassert solution(\"((()))())\") == 4"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n5\n()))()\n''') == '5'\nassert solution('''\n3\n(((\n''') == '4'\nassert solution('''\n2\n(((\n''') == '0'\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"()))()\") == \"5\"\nassert solution(\"(((()))())\") == \"4\"\nassert solution(\"(()(()))()\") == \"4\"\nassert solution(\"()((())())\") == \"4\"\nassert solution(\"((((())))\") == \"0\""
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"(()))()\") == 5\nassert solution(\"(()()))()\") == 0\n\"\"\""
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"()()\") == \"6\"\nassert solution(\"())(()\") == \"8\"\nassert solution(\"(()())\") == \"12\"\nassert solution(\"(()())(()(()()))\") == \"24\"\nassert solution(\"(((()))()(()()))\") == \"52\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"(((()))())\") == \"5\"\nassert solution(\"(()())\") == \"4\"\nassert solution(\"(((()))\") == \"0\"\nassert solution(\"()((())\") == \"0\"\nassert solution(\"()((()))\") == \"4\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"()))()\") == 5\nassert solution(\"(()())\") == 4\nassert solution(\"(()))()\") == 4\nassert solution(\"((()()))\") == 4\n\nassert solution(\"(()))()\") == 4\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n5\n()))()\n''') == '5'\n\nassert solution('''\n3\n(((\n''') == '4'\n\nassert solution('''\n2\n(((\n''') == '0'\n\nassert solution('''\n1\n(\n''') == '0'\n\nassert solution('''\n3\n(()\n''') == '4'"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('()))()') == '5'\nassert solution('(()()))()') == '5'\nassert solution('(()()))()') == '4'\nassert solution('((()()))()') == '4'\nassert solution('((()()))()') == '4'\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('()))()') == '5'\nassert solution('(()())') == '4'\nassert solution('((()))') == '0'\n\nassert solution('(((((((((((((((((((((((((((((((((((())))))') == '9'\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5071') == 4\nassert solution('705') == 1\nassert solution('1241367') == -1\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5071\") == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5071\") == 4\nassert solution(\"705\") == 1\nassert solution(\"1241367\") == -1\n\n----"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5071') == 4\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('705') == 1\nassert solution('5071') == 4\nassert solution('1241367') == -1\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n\"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5071\") == \"4\"\nassert solution(\"705\") == \"1\"\nassert solution(\"1241367\") == \"-1\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5071') == 4\nassert solution('705') == 1\nassert solution('1241367') == -1\n\n\"\"\"\nfrom collections import Counter\nfrom typing import List"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacbecfd\") == 2\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abcd') == 1\nassert solution('a') == 1\nassert solution('abcde') == 1\nassert solution('abacde') == 2\nassert solution('aabcccccaaa') == 2\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('abac') == '1 1 2 1 2 1'\nassert solution('abcdedc') == '1 2 1 2 1 2 1'\nassert solution('abcded') == '1 1 1 1 1 2 3'\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abacbecfd') == 2\nassert solution('aaabbcbb') == 2\nassert solution('abcdedc') == 3\nassert solution('abcde') == 1\nassert solution('aabbc') == 1\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abracadabra\") == \"2 2 1 1 3 1\"\n\"\"\""
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('abcd') == '1 1 1 1 1'\n\nassert solution('') == ''\nassert solution('a') == '1 1 1 1 1'\n\nassert solution('') == ''\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abacbecfd') == '2'\nassert solution('aaabbcbb') == '2'\nassert solution('abcdedc') == '3'\nassert solution('abcde') == '1'\n\"\"\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abacbecfd') == '2'\nassert solution('aaabbcbb') == '2'\nassert solution('abcde') == '1'\nassert solution('abcdedc') == '3'\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('aaabbcbb') == '1 2 1 2 1 2 1 2 1'\nassert solution('abacbecfd') == '1 2 1 2 1 2 1 2 1'\nassert solution('abcdedc') == '1 1 1 1 1 2 3'\n\nassert solution('abba') == '1 2 1 2'\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcd\") == \"1 1 1 1 2 3\"\nassert solution(\"abcde\") == \"1 1 1 1 1\"\nassert solution(\"aaa\") == \"1 1 1 1\"\nassert solution(\"abacd\") == \"1 1 2 1 1 1\"\n\n\"\"\""
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"ba\") == \"YES\"\nassert solution(\"a\") == \"YES\"\nassert solution(\"qwerty\") == \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aba\") == \"YES\"\nassert solution(\"aba\") == \"YES\"\nassert solution(\"aba\") == \"YES\"\nassert solution(\"aba\") == \"YES\"\nassert solution(\"aba\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"a\") == \"YES\\na\"\nassert solution(\"aba\") == \"YES\\na\\nb\\na\"\nassert solution(\"abacaba\") == \"YES\\na\\nb\\na\\na\\nb\\na\\na\\nb\\na\"\nassert solution(\"qwerty\") == \"YES\\nq\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\nq\\nw\\nr\\nw\\nr\\"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a\") == \"YES\"\nassert solution(\"a\") == \"YES\"\nassert solution(\"abacaba\") == \"YES\"\nassert solution(\"ba\") == \"YES\"\nassert solution(\"aba\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\na\\naba\\nabacaba\\nba\\na\\na\") == \"YES\\na\\nba\\na\\naba\\naba\\nabacaba\\n\"\nassert solution(\"3\\nqwerty\\nqwerty\\nqwerty\") == \"YES\\nqwerty\\nqwerty\\nqwerty\\n\"\nassert solution(\"5\\na\\nabacaba\\nba\\na\\na\") == \"NO\\n\"\n\"\"\""
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"qwerty\") == \"YES\"\nassert solution(\"qwerty\") == \"qwerty\"\nassert solution(\"qwerty\") == \"YES\"\nassert solution(\"qwerty\") == \"YES\"\nassert solution(\"qwerty\") == \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == \"YES\\nabacaba\"\nassert solution(\"aba\") == \"YES\\na\"\nassert solution(\"ab\") == \"YES\\nab\"\nassert solution(\"a\") == \"YES\\na\"\nassert solution(\"aa\") == \"YES\\naa\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\na\\naba\\nabacaba\\nba\\naba\\nabab\\n\") == \"YES\\na\\nba\\naba\\naba\\nabacaba\\n\"\nassert solution(\"1\\na\\nabacaba\\n\") == \"YES\\na\\nabacaba\\n\"\nassert solution(\"2\\na\\naba\\nabacaba\\n\") == \"NO\\n\"\nassert solution(\"3\\na\\naba\\nabacaba\\n\") == \"NO\\n\"\nassert solution(\"5\\na\\naba\\nabacaba\\nba\\naba\\nabab\\n\") == \"NO\\n\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == \"YES\"\nassert solution(\"qwerty\") == \"YES\"\nassert solution(\"qwerty\") == \"YES\"\n\"\"\"\n\nfrom itertools import zip_longest\n\nn = int(input())\narr = list(input() for _ in range(n))\n\narr = list(zip(*arr))\narr = list(map(list, arr))\n\nfor i in range(n):\n    for j in range(n):\n        if j > 0:\n            arr[i].append(arr[i][j-1])\n    arr[i].sort()\n    for j in range(n):\n        arr[i][j] = arr[i][j][1]\n\nprint(\"YES\" if arr[0] == arr[1] == arr[2] == arr[3] else \"NO\")\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\""
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 4\") == \"5\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"5 100\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n3 1 2 1 3') == '0'\nassert solution('5 100\\n12 34 55 43 21') == '5'"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 2\n3 1 2 1 3''') == '0'\nassert solution('''5 100\n12 34 55 43 21''') == '5'\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n3 1 2 1 3') == '0'\nassert solution('5 100\\n12 34 55 43 21') == '5'\nassert solution('8 4\\n4 2 3 1 5 1 6 4') == '5'\nassert solution('8 4\\n3 1 2 1 3') == '0'\nassert solution('7 4\\n5 1 4 3 2') == '5'\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 4\\n4 2 3 1 5 1 6 4\") == \"5\"\nassert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 4\") == \"5\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"5 100\") == \"5\"\n\n\"\"\"\n\n\nfrom itertools import accumulate, count\nimport math\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n3 1 2 1 3\") == \"0\"\nassert solution(\"5 100\\n12 34 55 43 21\") == \"5\"\n\"\"\""
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == expected_result"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 3 1 5 1 6 4\") == 5\nassert solution(\"5 2 3 1 2 3\") == 0\nassert solution(\"5 100 12 34 55 43 21\") == 5\n\n\"\"\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n\nprint('Success')"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 9\\n') == '14'\nassert solution('506 2708\\n') == '3218'\nassert solution('4 4\\n') == '12'\nassert solution('3 6\\n') == '12'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\n\n\"\"\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4') == '12'\nassert solution('3 9') == '14'\nassert solution('9 3') == '14'\nassert solution('3 6') == '12'\nassert solution('506 2708') == '3218'"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '4 4'\n) == '12'\n\nassert solution(\n    '3 9'\n) == '14'\n\nassert solution(\n    '9 3'\n) == '14'\n\nassert solution(\n    '506 2708'\n) == '3218'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"3 9\") == \"14\"\nassert solution(\"9 3\") == \"14\"\nassert solution(\"3 6\") == \"12\"\nassert solution(\"506 2708\") == \"3218\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4') == 12\nassert solution('3 9') == 14\nassert solution('9 3') == 14\nassert solution('3 6') == 12\nassert solution('506 2708') == 3218\n\n\n\n\n\n\n\n\n\nIn a large and deep forest, the area around the entrance of the forest is covered with a thick forest wall.\n\nThere are trees in a forest, and each of the trees has a number.\n\nThe first line of input contains the number of trees in the forest.\n\nThe next line contains the number of trees (that are numbered from 1 to the number of trees) that are covered by a thick forest wall.\n\nThe next line contains the coordinates of the beginning position of the wall in the forest, and the next line contains the coordinates of the end position of the wall in the forest.\n\nThe number of the tree is the number of the positions of the tree in the forest, counted from 1.\n\nThere is no tree in the forest at the beginning or at the end of the wall.\n\nIf the beginning position is equal to the end position, there is no wall.\n\nPrint the coordinates of the tree that is located in the middle of the wall.\n\nYou can assume that the input data is valid.\n\nFor example, if the number of trees is 15, then the input data is valid if:\n\n15\n6\n1 4\n3 9\n\nNote: The first line of input contains the number of trees in the forest, and the next three lines contain the coordinates of the beginning position of the wall and the end position of the wall.\n\nIf there is a solution, then the coordinates of the tree in the middle of the wall are:\n\n(2,5)\n\nIf there is no solution, then the coordinates of the tree in the middle of the wall are:\n\n(2,6)\n\nYou must print the coordinates as a string.\n\n\n-----Input-----\n\n3\n\n1\n\n2\n\n3\n\n1\n\n1\n\n2\n\nOutput\n\n2 4\n\n1 2\n\n\n\n-----Note-----\n\nThe first example corresponds to the picture above.\n\nThere are no trees in the forest.\n\nThe second example corresponds to the picture above.\n\nThe tree with number 1 is located in the middle of the wall.\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\nassert solution(\"aaabbcbb\") == \"YES\\n01011011\"\nassert solution(\"abcdedc\") == \"NO\\n\"\nassert solution(\"abcde\") == \"YES\\n00000\"\nassert solution(\"bcdef\") == \"NO\\n\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abacbecfd') == 'YES\\n001010101'\nassert solution('aaabbcbb') == 'YES\\n01011011'\nassert solution('abcde') == 'YES\\n00000'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacbecfd\") == \"NO\"\nassert solution(\"aaabbcbb\") == \"YES\"\nassert solution(\"abcdedc\") == \"NO\"\nassert solution(\"abcde\") == \"YES\"\n\nprint(\"All test cases passed.\")"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcde\") == \"YES\"\nassert solution(\"abcdec\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacbecfd\") == 'YES\\n001010101'\nassert solution(\"aaabbcbb\") == 'YES\\n01011011'\nassert solution(\"abcdedc\") == 'NO'\nassert solution(\"abcde\") == 'YES\\n00000'\nassert solution(\"aaaaaaa\") == 'YES\\n11111'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abacbecfd') == 'YES\\n001010101'\nassert solution('aaabbcbb') == 'YES\\n01011011'\nassert solution('abcde') == 'NO\\n00000'\nassert solution('abcdef') == 'NO\\n00000'\n\nprint(solution(input()))\n\nimport sys; sys.stdin.readline().split()"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\nassert solution(\"aaabbcbb\") == \"YES\\n01011011\"\nassert solution(\"abcde\") == \"YES\\n00000\""
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'YES\\n00000'\nassert solution('abacbe') == 'NO\\n'\nassert solution('abacbecfd') == 'YES\\n001010101'\nassert solution('abcdeeef') == 'NO\\n'\n\n\"\"\"\n\nfrom collections import Counter\nfrom typing import Callable, List, Optional, Tuple\n\nfrom termcolor import colored\n\nSTR_LEN = int\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcd\") == \"100101011011101110111\"\nassert solution(\"ade\") == \"101101101110110111010\"\nassert solution(\"abce\") == \"10010101101110111010\"\nassert solution(\"abcdef\") == \"10010101101110111010\"\nassert solution(\"bae\") == \"10010101101110111010\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacbecfd\") == \"YES\\n001010101\"\n\"\"\""
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"25\"\n\"\"\""
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2') == '25'\nassert solution('1 1') == '-1'\n\n\"\"\"\n\nfrom math import ceil, floor\nimport math\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"5 3\") == \"-1\"\nassert solution(\"2 2\") == \"25\"\nassert solution(\"10 3\") == \"-1\"\nassert solution(\"6 5\") == \"30\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2') == '25'\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"25\"\nassert solution(\"2 1\") == \"-1\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"25\"\n\"\"\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('1 2') == '2'\nassert solution('2 1') == '2'\nassert solution('2 2') == '-1'\nassert solution('3 5') == '12'\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 2') == '2'\nassert solution('3 2') == '-1'\nassert solution('3 3') == '-1'\nassert solution('4 2') == '7'\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == '25'\nassert solution(\"1 1\") == '-1'\nassert solution(\"100 100\") == '100'\nassert solution(\"1 10\") == '-1'\nassert solution(\"5 9\") == '5'\n\n\"\"\"\nimport math"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n') == '25'\nassert solution('4 3\\n') == '-1'\nassert solution('8 5\\n') == '16'\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('26 6') == 'YES\\n1 2 4 5 6 8'\nassert solution('8 3') == 'NO\\n'\nassert solution('1 1') == 'YES\\n1'\nassert solution('9 4') == 'NO\\n'\nassert solution('999 999') == 'NO\\n'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"26 6\") == \"YES\\n1 2 4 5 6 8\"\nassert solution(\"8 3\") == \"NO\\n\"\nassert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"9 4\") == \"NO\\n\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('26 6\\n') == 'YES\\n1 2 4 5 6 8', 'Wrong Answer'\nassert solution('8 3\\n') == 'NO\\n', 'Wrong Answer'\nassert solution('1 1\\n') == 'YES\\n1\\n', 'Wrong Answer'\nassert solution('9 4\\n') == 'NO\\n', 'Wrong Answer'\nprint('Test passed')\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\") == \"NO\"\nassert solution(\"10 7\") == \"YES\"\nassert solution(\"8 5\") == \"YES\"\nassert solution(\"8 5\") == \"YES\"\nassert solution(\"3 3\") == \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"26 6\") == \"YES\\n1 2 4 5 6 8\"\nassert solution(\"8 3\") == \"NO\\n\"\nassert solution(\"1 1\") == \"YES\\n1\\n\"\n\"\"\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"26 6\") == \"YES\\n1 2 4 5 6 8\"\nassert solution(\"8 3\") == \"NO\"\nassert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"9 4\") == \"NO\"\nassert solution(\"10 4\") == \"NO\"\n\nprint(solution(\"26 6\"))\nprint(solution(\"8 3\"))\nprint(solution(\"1 1\"))\nprint(solution(\"9 4\"))\nprint(solution(\"10 4\"))\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"26 6\") == \"YES\\n1 2 4 5 6 8\"\nassert solution(\"8 3\") == \"NO\\n\"\nassert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"9 4\") == \"NO\\n\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"26 6\") == \"YES\\n1 2 4 5 6 8\"\nassert solution(\"8 3\") == \"NO\\n\"\nassert solution(\"1 1\") == \"YES\\n1\"\nassert solution(\"9 4\") == \"NO\\n\""
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"26 6\") == \"YES\\n1 2 4 5 6 8\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9') == 'YES'\nassert solution('1 1') == 'YES'\nassert solution('1') == 'YES'\nassert solution('1 2') == 'NO'\nassert solution('1 2 1') == 'NO'\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == '3'\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == '5'"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3, 4) == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == '3'\nassert solution('5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45') == '5'\n\"\"\"\nimport sys\n\nfrom collections import namedtuple\n\n\nPoint = namedtuple('Point', 'x y')\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\"\nprint('The local tests are done.')\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"3\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3, 4) == 3\nassert solution(5, 20) == 5\n\"\"\""
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 3\n\"\"\"\n\n\"\"\"\n\n[1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\\n\") == 3\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6\\n10 -2\\n8 -1\") == \"3\"\nassert solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\") == \"5\"\nprint(solution(\"5 20\\n45 -6\\n34 -15\\n10 34\\n1 27\\n40 -45\"))"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution('3\\n1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'NO'\nassert solution('1\\n10') == 'YES\\n10'\nassert solution('1\\n5') == 'YES\\n1 5'\n\n\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\nassert solution(\"1\\n1\") == \"YES\\n1 1\"\nassert solution(\"1\\n3\") == \"YES\\n1 3 1\"\n\"\"\""
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\n\n\"\"\"\n\nimport collections\nimport re\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1') == 'YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1'\nassert solution('1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('1 1 1 1 1 3 3 3 3') == 'NO'\nassert solution('1 1 1 1 1 3 3 3 3') == 'YES\\n1 3 1\\n3 1 3'\nassert solution('1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'NO'\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 1 1 1 1 3 3 3 3\\n') == 'YES\\n1 3 1\\n3 1 3\\n1 3 1'\nassert solution('3\\n1 1 1 1 1 3 3 3 3\\n') == 'YES\\n1 3 1\\n3 1 3\\n1 3 1'\nassert solution('4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\\n') == 'NO'\nassert solution('1\\n10\\n') == 'YES\\n10 \n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\\n\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3 3\\n\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\\n\") == \"NO\"\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 1 1 1 1 3 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"3\\n1 1 1 1 1 3 3 3\") == \"YES\\n1 3 1\\n3 1 3\"\nassert solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\") == \"NO\"\nassert solution(\"1\\n10\") == \"YES\\n10\"\n\n\"\"\""
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'NO'\nassert solution('1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1') == 'YES'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') == 'NO'\nassert solution('1 2 2 1') == 'YES'\nassert solution('1 2 1 2') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\") == \"YES\\n1 2 2 1\\n8 2 2 8\\n8 2 2 8\\n1 2 2 1\"\n\n-----Notes-----\n\n'''\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 'YES'\nassert solution('3 5\\n4 -5\\n4 -2\\n1 3\\n') == 'YES'\nassert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n') == 'YES'\nassert solution('3 10\\n10 0\\n10 -10\\n30 0\\n') == 'NO'\nassert solution('4 10\\n5 2\\n5 -3\\n2 1\\n4 -2\\n') == 'NO'\n\"\"\""
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2') == 'YES'\nassert solution('3 10\\n10 0\\n10 -10\\n30 0') == 'NO'\n\n\"\"\""
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\nassert solution(\"4 10\\n10 0\\n10 -10\\n30 0\\n\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == 'YES'\nassert solution('3 5\\n4 -5\\n4 -2\\n1 3\\n') == 'YES'\nassert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n') == 'YES'\nassert solution('3 10\\n10 0\\n10 -10\\n30 0\\n') == 'NO'\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n4 6\\n10 -2\\n8 -1\") == \"YES\"\nassert solution(\"3 5\\n4 -5\\n4 -2\\n1 3\\n\") == \"YES\"\nassert solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\") == \"YES\"\nassert solution(\"3 10\\n10 0\\n10 -10\\n30 0\") == \"NO\"\nassert solution(\"3 4\\n10 -2\\n10 -10\\n30 0\") == \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n') == 'YES'\nassert solution('3 10\\n10 0\\n10 -10\\n30 0\\n') == 'NO'\nassert solution('3 4\\n4 6\\n10 -2\\n8 -1\\n') == 'YES'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4\\n4 6\\n10 -2\\n8 -1') == \"YES\"\nassert solution('3 5\\n4 -5\\n4 -2\\n1 3\\n') == \"YES\"\nassert solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n') == \"YES\"\nassert solution('3 10\\n10 0\\n10 -10\\n30 0\\n') == \"NO\"\nassert solution('4 10\\n5 2\\n5 -3\\n2 1\\n4 -2\\n') == \"NO\"\n\n\"\"\"\nfrom typing import List\nimport sys\nimport numpy as np\n\nlines = sys.stdin.readlines()\nn, r = map(int, lines[0].split())\nprojects = np.array([list(map(int, line.split())) for line in lines[1:]])\nprojects = projects[projects[:, 1] < 0]\nprojects = projects[projects[:, 1] > 0]\nprojects = projects[projects[:, 0] <= r]"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3 2\\n1 2 1\\n\") == \"YES\\n0 1 0 2 2 0 3 \"\nassert solution(\"10 1 11\\n1\\n\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1 \"\nassert solution(\"10 1 5\\n2\\n\") == \"YES\\n0 0 0 0 1 1 0 0 0 0 0 \"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\n\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\n\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n\n\"\"\""
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3 2\\n1 2 1\\n\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\\n\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\\n\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 3 2\\n1 2 1') == 'YES\\n0 1 0 2 2 0 3'\nassert solution('10 1 11\\n1') == 'YES\\n0 0 0 0 0 0 0 0 0 1'\nassert solution('10 1 5\\n2') == 'YES\\n0 0 0 0 1 1 0 0 0 0'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 3 2\\n1 2 1\\n') == 'YES\\n0 1 0 2 2 0 3\\n'\nassert solution('10 1 11\\n1\\n') == 'YES\\n0 0 0 0 0 0 0 0 0 1\\n'\nassert solution('10 1 5\\n2\\n') == 'YES\\n0 0 0 0 1 1 0 0 0 0\\n'\nassert solution('10 1 5\\n1\\n') == 'YES\\n0 0 0 0 1 1 0 0 0 0\\n'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 1 5\\n2\\n\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\\n\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\nassert solution(\"10 1 5\\n1\") == \"YES\\n0 0 0 0 0 0 1 1 0 0\"\nassert solution(\"10 1 5\\n3\") == \"YES\\n0 0 0 0 0 0 0 0 0 0 1\"\n\n\"\"\"\nimport sys\n\nfrom collections import Counter, defaultdict\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\""
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 3 2\\n1 2 1\") == \"YES\\n0 1 0 2 2 0 3\"\nassert solution(\"10 1 11\\n1\") == \"YES\\n0 0 0 0 0 0 0 0 0 1\"\nassert solution(\"10 1 5\\n2\") == \"YES\\n0 0 0 0 1 1 0 0 0 0\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"7 3 2\\n1 2 1\"\n) == 'YES\\n0 1 0 2 2 0 3 '\n\nassert solution(\n    \"10 1 11\\n1\"\n) == 'YES\\n0 0 0 0 0 0 0 0 0 1 '\n\nassert solution(\n    \"10 1 5\\n2\"\n) == 'YES\\n0 0 0 0 1 1 0 0 0 0 '\n\nassert solution(\n    \"10 1 5\\n3\"\n) == 'YES\\n0 0 0 0 1 1 0 0 0 0 '\n\nassert solution(\n    \"3 1 2\\n2\\n1\"\n) == 'NO'"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"tst\") == 3\nassert solution(\"tt\") == 2\nassert solution(\"et\") == 2\nassert solution(\"se\") == 2\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n\"\"\"\n\ns = \"bbaba\"\nt = \"bb\"\n\nassert len(s) >= len(t)\n\nsubstrings = []\n\nfor i in range(len(s) - len(t) + 1):\n    substrings.append(s[i:i + len(t)])\n\nprint(substrings)\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"test\") == 1\nassert solution(\"tst\") == 1\nassert solution(\"tt\") == 1\nassert solution(\"et\") == 1\nassert solution(\"tset\") == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"test\") == 3\nassert solution(\"\") == 0\nassert solution(\"tt\") == 2\nassert solution(\"aaa\") == 0\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1500)\n\ns = input()\nt = input()\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bbaba\") == 3\nassert solution(\"bb\") == 1\nassert solution(\"ab\") == 0\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('test') == 3\nassert solution('tst') == 2\nassert solution('tt') == 0\nassert solution('et') == 1\nassert solution('se') == 2\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"test\") == 1\nassert solution(\"tst\") == 2\nassert solution(\"tt\") == 2\nassert solution(\"et\") == 3\nassert solution(\"\") == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('bbaba') == 3\nassert solution('baaba') == 2\nassert solution('abcde') == 0\nassert solution('asdfasdf') == 3\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"test\") == 4\n\n\"\"\""
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('asdfasdf') == 3\nassert solution('asd') == 0\nassert solution('ab') == 0\nassert solution('bbaba') == 3\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1.200000) == \"3 2\"\nassert solution(2.572479) == \"10 3\"\nassert solution(4.024922) == \"9 9\"\n\n\n-----Explanation-----\n\nThe possible solutions are: 3 2, 6 1, and 9 2.\n\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\n\"\"\"\n\nfrom math import ceil, log10, floor"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n\n\"\"\"\n\nfrom math import ceil, log10"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\""
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1.20000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\n\"\"\"\nimport math"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2.572479') == '10 3'\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(0.0)) == '1 1'\nassert solution(str(0.05)) == '1 1'\nassert solution(str(0.09)) == '1 1'\nassert solution(str(0.10)) == '1 1'\nassert solution(str(0.13)) == '1 1'\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\nassert solution('4.024922') == '9 9'\nprint('PASSED')\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1.200000\") == \"3 2\"\nassert solution(\"2.572479\") == \"10 3\"\nassert solution(\"4.024922\") == \"9 9\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1.200000') == '3 2'\nassert solution('2.572479') == '10 3'\n\nimport json\n\nassert json.loads(solution('1.200000')) == '3 2'\nassert json.loads(solution('2.572479')) == '10 3'\n'''"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"8 5 2\") == \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 3 3\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\n\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3 3\") == 'YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6'\nassert solution(\"6 2 3\") == 'NO'\nassert solution(\"8 5 3\") == 'YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3 3\\n\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\"\nassert solution(\"6 2 3\\n\") == \"NO\\n\"\nassert solution(\"10 4 3\\n\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\nassert solution(\"8 5 3\\n\") == \"YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''6 3 3''') == 'YES'\nassert solution('''6 2 3''') == 'NO'\nassert solution('''10 4 3''') == 'YES'\nassert solution('''8 5 3''') == 'YES'\nassert solution('''10 2 3''') == 'NO'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''6 3 3''') == 'YES'\nassert solution('''6 2 3''') == 'NO'"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 3\") == \"YES\"\nassert solution(\"10 4 3\") == \"YES\"\nassert solution(\"8 5 3\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"10 4 3\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 5 3\") == \"YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\"\nassert solution(\"6 3 3\") == \"YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 5 3\\n') == 'YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n'\nassert solution('10 4 3\\n') == 'YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\\n'\nassert solution('6 3 3\\n') == 'NO\\n'\nassert solution('6 2 3\\n') == 'NO\\n'\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"101010\") == \"110010\"\nassert solution(\"111001\") == \"111010\"\nassert solution(\"101100\") == \"111010\"\nassert solution(\"101101\") == \"111010\"\n\"\"\"\n\n\"\"\"\n-----Binary Search. Find the smallest index i such that arr[i]!= arr[i + 1].\n\n-----Algorithm-----\n\nLet a = arr[0] and b = arr[1].\n\nIf arr[i] = a, then arr[j] = b for all j = i + 1, i + 2,..., n - 1.\nIf arr[i] = b, then arr[j] = a for all j = i + 1, i + 2,..., n - 1.\n\nThis means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n.\n\nIf arr[i] = a, then arr[j] = b for all j = i + 1, i + 2,..., n - 1, i + n.\nIf arr[i] = b, then arr[j] = a for all j = i + 1, i + 2,..., n - 1, i + n.\n\nThis means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 1.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 2.\n\nThis means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 3.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 4.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 5.\n\nThis means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 6.\n\nThis means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 7.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 8.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 9.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 10.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 11.\n\nThis means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 12.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 13.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 14.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 15.\n\nThis means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 16.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 17.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 18.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 19.\n\nThis means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 20.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 21.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 22.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 23.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 24.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 25.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 26.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 27.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 28.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 29.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 30.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 31.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 32.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 33.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 34.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 35.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 36.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 37.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-decreasing sequence of length n + 38.\n\nThis also means that if we choose a particular element arr[j], then it is impossible to build a non-"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 1\") == \"1100\"\nassert solution(\"3 3 3\") == \"101100\"\nassert solution(\"5 3 6\") == \"01010100\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 1') == '101100'\nassert solution('3 3 2') == '110010'\nassert solution('5 3 6') == '01010100'"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 1') == '101'\nassert solution('3 3 1') == '111001'\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"01010\") == \"1100\"\nassert solution(\"111001\") == \"101100\"\nassert solution(\"11100010\") == \"11101010\"\nassert solution(\"11100101010\") == \"1111101010\"\nassert solution(\"1110010101011010\") == \"11111111101010\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101010\") == \"1100\"\nassert solution(\"101110\") == \"110110\"\nassert solution(\"1110110\") == \"1111110\"\n\"\"\"\n\nimport re\n\na, b, x = list(map(int, re.findall(r'\\d+', input())))"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('01010') == '110010'\nassert solution('111001') == '101100'\nassert solution('111011') == '110111'\nassert solution('111010') == '101110'\nassert solution('111010') == '101110'"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"01010\") == \"1100\"\nassert solution(\"111001\") == \"101100\"\n\n\"\"\"\n\nfrom itertools import product\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2 1') == '1100'\nassert solution('3 3 3') == '101100'\nassert solution('5 3 6') == '01010100'\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 1') == '1100'\nassert solution('3 3 3') == '101100'\n\n\"\"\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ab\") == \"cacb\"\nassert solution(\"ca\") == \"acbb\"\nassert solution(\"bb\") == \"cbca\"\n\"\"\""
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"cb\"\nassert solution(\"bb\") == \"bc\"\n\nassert solution(\"ca\") == \"cb\"\nassert solution(\"bc\") == \"cb\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ab\") == \"cba\"\nassert solution(\"ca\") == \"bcac\"\nassert solution(\"bb\") == \"cb\"\nassert solution(\"ac\") == \"c\"\n\nassert solution(\"abcd\") == \"cbad\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ab\") == \"YES\"\nassert solution(\"ac\") == \"YES\"\nassert solution(\"bb\") == \"YES\"\nassert solution(\"ba\") == \"NO\"\nassert solution(\"bc\") == \"YES\"\n\nprint(solution(\"ab\"))\nprint(solution(\"ac\"))\nprint(solution(\"bb\"))\nprint(solution(\"ba\"))\nprint(solution(\"bc\"))\n\"\"\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ab\") == \"acb\"\nassert solution(\"ca\") == \"bbca\"\n\n\"\"\""
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"bb\"\nassert solution(\"bb\") == \"ac\"\n\"\"\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ab\") == \"abc\"\n\"\"\"\n\na = int(input())\nb = input()\nc = input()"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"bb\"\nassert solution(\"bb\") == \"bb\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bc\") == \"cb\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ab\") == \"ac\"\nassert solution(\"ca\") == \"bb\"\nassert solution(\"bb\") == \"ac\"\nassert solution(\"aa\") == \"c\"\nassert solution(\"ba\") == \"b\"\n\n\"\"\"\nfrom collections import Counter\nimport math\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ab') == 'ac'\nassert solution('ca') == 'bbac'\nassert solution('bb') == 'bbac'\n\nassert solution('ab') == 'ac'\nassert solution('ca') == 'bbac'\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 2\\n') == '3 1 2'\nassert solution('5\\n1 1 1 1\\n') == '1 2 3 4 5'\n\"\"\""
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"5 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"4 -1 2\") == \"1 2 3 4\"\nassert solution(\"1 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"7 4 1 1 1 1 1 1\") == \"1 2 3 4 5 6 7\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"5 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"5 1 1 1\") == \"1 2 3 4 5\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 2') == '3 1 2'\nassert solution('4 2 1') == '1 2 3 4'\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '2 1'\nassert solution('1 2 3') == '3 2 1'\nassert solution('1 2 3 4') == '4 3 2 1'\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == \"3 1 2\"\nassert solution(\"5 1 2\") == \"3 1 2\"\nassert solution(\"5 1 -1\") == \"3 1 2\"\nassert solution(\"5 2 -1 1\") == \"3 1 2\"\nassert solution(\"5 -1 2 1\") == \"3 1 2\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 2') == '3 1 2'\nassert solution('5 1 1 1') == '1 2 3 4 5'\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1 2\\n\") == \"3 1 2\"\nassert solution(\"5\\n1 1 1 1\\n\") == \"1 2 3 4 5\"\nassert solution(\"4\\n1 2 2\\n\") == \"-1\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"3 1 2\"\nassert solution(\"5\\n1 2 2\") == \"1 2 3 4 5\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n-2 1\") == \"3 1 2\"\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"4\\n-1 2 2\") == \"-1\"\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\""
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 2 3 3\") == \"1\"\nassert solution(\"5 2 2 3 3\") == \"2\"\n\n\"\"\"\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\\n\") == \"1\"\nassert solution(\"2 2 2 3 3\\n\") == \"2\"\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"1\"\nassert solution(\"2 2 2 3 3\") == \"2\"\nassert solution(\"2 2 2 3 3\", \"1 1 1 1\") == \"0\"\n\nassert solution(\"1 2 3 4 5\") == \"3\"\nassert solution(\"1 1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 2 2 3 3\") == \"2\"\nassert solution(\"1\\n2\") == \"0\"\nassert solution(\"2\\n1 1\") == \"0\"\n\"\"\"\nimport math"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 3') == '1'\nassert solution('5\\n2 2 2 3 3') == '2'"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n2 2 2 3 3\n''') == '2'\n\nassert solution('''3\n1 2 3\n''') == '1'\n\nassert solution('''4\n1 1 1 1\n''') == '0'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3\\n3 3 3') == '1'\nassert solution('1 1 1\\n2 2 2') == '0'\nassert solution('1 2 3\\n3 1 3') == '1'\nassert solution('1 1 1\\n2 2 2') == '2'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\") == '1'\nassert solution(\"5\\n2 2 2 3 3\") == '2'\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 3') == '1'\n\nassert solution('5\\n2 2 2 3 3') == '2'\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 2 2 3 3\") == '2'\nassert solution(\"3\\n1 2 3\") == '1'\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == '5'\n\n-------------------\n1\n10\n\n2\n-------------------\n3\n10\n\n4\n-------------------\n5\n10\n\n5\n-------------------\n6\n10\n\n5\n-------------------\n7\n10\n\n6\n-------------------\n8\n10\n\n7\n-------------------\n9\n10\n\n8\n-------------------\n10\n10\n\n9\n-------------------\n11\n10\n\n10\n-------------------\n12\n10\n\n10\n\n-----------\n-------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n------------\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10') == '5'\nassert solution('1') == '0'\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == '5'\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"5\"\nassert solution(\"20\") == \"10\"\nassert solution(\"30\") == \"15\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == '5'\nassert solution('10') == '5'\nassert solution('101') == '4'\nassert solution('100100') == '4'\nassert solution('101101') == '4'\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\"\n\nimport os\nimport sys\nimport math\nfrom functools import reduce"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"5\"\n\"\"\""
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 0 0\") == \"0 0\"\nassert solution(\"1 1 1\") == \"0 1\"\nassert solution(\"2 2 2\") == \"0 1\"\nassert solution(\"2 1 2\") == \"0 0\"\nassert solution(\"1 1 1\") == \"0 1\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 0 3\\n3 0 0\") == \"3 3\"\nassert solution(\"6\\n0 0 5\\n0 0 5\") == \"0 1\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"119 226\"\n\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"15\\n5 5 5\\n5 5 5\") == \"0 15\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n0 1 1\\n1 1 0') == '0 1'\nassert solution('3\\n0 0 3\\n3 0 0') == '3 3'\nassert solution('686\\n479 178 29\\n11 145 530') == '22 334'\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import combinations\nfrom typing import List, Dict\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 1 2') == '1 2'\nassert solution('2\\n1 1 0') == '0 1'\nassert solution('686\\n479 178 29') == '22 334'\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 0 0\") == \"0 0\"\nassert solution(\"1 1 1\") == \"0 1\"\nassert solution(\"3 5 5\") == \"0 1\"\nassert solution(\"686 418 29\") == \"22 334\"\nassert solution(\"319 10 53 256\") == \"119 226\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"15\\n5 5 5\\n5 5 5\") == \"0 15\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"3 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n0 1 1\\n1 1 0\") == \"0 1\"\nassert solution(\"3\\n0 0 3\\n3 0 0\") == \"3 3\"\nassert solution(\"686\\n479 178 29\\n11 145 530\") == \"22 334\"\n\n\"\"\"\n\nimport math\nimport sys\n\nsys.stdin = open('input.txt')\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1 1\") == \"0 1\"\nassert solution(\"1 1 0\") == \"0 1\"\nassert solution(\"15 5 5\") == \"0 15\"\nassert solution(\"5 5 5\") == \"0 15\"\nassert solution(\"3 0 3\") == \"3 3\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == \"3\"\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == \"2\"\nassert solution('4\\n1 1 1 1') == \"4\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"4 1 2 2 1 5 3\") == \"3\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"4\\n1 1 1 1\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(len(list(set(list(map(int, input().split())))))\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\\n\") == '3\\n7 7\\n2 3\\n4 5'\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\n\"\"\"\n\na = int(input())\nnumbers = list(map(int, input().split()))\n\ncounts = [0] * a\n\nfor i in range(a):\n    counts[i] = numbers.count(numbers[i])\n\ncounts.sort()\n\nresult = 0\nfor i in range(len(counts)):\n    if counts[i] > 1:\n        result += 1\n        for j in range(i + 1, len(counts)):\n            if counts[i] == counts[j]:\n                result += 1\n                break\nprint(result)"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\\n4 5\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\\n2 2\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\\n1 1\\n2 2\\n3 3\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\nassert solution('7 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = [0] * n\ncurr = 0\ns = 0\n\nfor i in range(n):\n    s += a[i]\n    curr += 1\n    d[i] = curr\n\ns = [s] * n\ncurr = 0\n\nfor i in range(n):\n    s[i] -= a[i]\n    curr -= 1\n    d[i] -= curr\n\nm = -1\nfor i in range(n):\n    for j in range(i + 1, n):\n        if (d[i] + d[j]) % 2 == 0 and s[i] == s[j]:\n            m = max(m, j - i)\n\nprint(m)\nfor i in range(m, n):\n    print(i, i + 1)\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1\\n2 2\"\nassert solution(\"3\\n1 2 3\") == \"1\\n1 1\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\n\"\"\"\n\nimport sys\nfrom typing import List\n\nN: int = int(sys.stdin.readline())\nA: List[int] = list(map(int, sys.stdin.readline().split()))\n\na = {a[i] + i for i in range(N)}\nb = {b - i for b in a for i in range(b + 1, b + 1 + N)}\nprint(max(len(a), len(b)))\nprint(' '.join(map(str, (a.union(b)).sorted())))"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3') == 'YES'\nassert solution('3 1 2') == 'NO'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == 'YES'\nassert solution('1 2 3 4') == 'NO'\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 2') == 'NO'\nassert solution('3 1 2 3') == 'YES'\n\nprint(solution(stdin.strip()))\n\"\"\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 2') == \"NO\"\nassert solution('3 3 1 2') == \"YES\"\n\"\"\""
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 2\") == \"YES\"\nassert solution(\"3 1 2\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 3 1 2\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 2\") == \"NO\"\nassert solution(\"3 1 2 3\") == \"YES\"\nassert solution(\"1 2 3\") == \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n3 1 2\") == \"NO\"\nassert solution(\"4\\n1 2 3 4\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"YES\"\nassert solution(\"3\\n2 1 3\") == \"NO\"\nassert solution(\"5\\n4 2 1 3 5\") == \"YES\"\n\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nclass Stack:\n    def __init__(self):\n        self.stk = deque()\n    def push(self, ele):\n        self.stk.append(ele)\n    def pop(self):\n        return self.stk.pop()\n    def top(self):\n        return self.stk[-1]\n    def empty(self):\n        return len(self.stk) == 0\n    def __len__(self):\n        return len(self.stk)"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"3\\n3 1 2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2\") == \"YES\"\nassert solution(\"4 3 1\") == \"NO\"\nassert solution(\"6 3 7 8 4 2\") == \"YES\""
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcfe\"\nassert solution(\"abdcef\") == \"abdcfe\"\nassert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abcd\") == \"accd\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcd\") == \"0\"\nassert solution(\"accd\") == \"0\"\nassert solution(\"abcd\") == \"0\"\nassert solution(\"accd\") == \"0\"\nassert solution(\"abcdef\") == \"4\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcdef\", \"abdfec\") == \"4 5 4 5\"\nassert solution(\"abcd\", \"accd\") == \"-\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abcd\") == \"0\"\nassert solution(\"abdc\") == \"-1\"\nassert solution(\"abcdef\") == \"4\"\nassert solution(\"abdfec\") == \"3 5 4 5\"\n\"\"\"\n\nn = int(input())\ns = input()\nt = input()"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abdfec\") == \"abdcef\"\n\nassert solution(\"abcd\") == \"accd\"\nassert solution(\"accd\") == \"accd\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abcdef\") == \"abdcef\"\nassert solution(\"abcd\") == \"abcd\"\nassert solution(\"aaa\") == \"aaa\"\n\"\"\""
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abcdef') == 'abdcef'\nassert solution('abdfec') == 'abdcfe'\nassert solution('a') == 'a'\nassert solution('aa') == 'aa'\nassert solution('a' * 100) == 'a' * 100\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abcd\") == -1\nassert solution(\"accd\") == -1\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcd\", \"acbd\") == 1\nassert solution(\"abcdef\", \"abefd\") == 4\nassert solution(\"abcdef\", \"acbdef\") == 4\nassert solution(\"abcd\", \"acbd\") == -1\nassert solution(\"abcd\", \"cdab\") == 2\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcd\", \"accd\") == -1\nassert solution(\"abcd\", \"abcdd\") == 0\nassert solution(\"abcd\", \"abcddd\") == 1\nassert solution(\"abcd\", \"abbdccddd\") == 5\nassert solution(\"abcde\", \"abdce\") == 4\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba\") == \"SP\"\nassert solution(\"abab\") == \"PSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"ac\") == \"PS\"\n\n\nimport unittest\n\nclass TestMethods(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"aba\"), \"SP\")\n        self."
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba\") == \"SPPSPSPS\"\nassert solution(\n    \"3\\na\\naa\\naa\\na\") == \"PPSS\"\nassert solution(\n    \"2\\na\\nc\") == \"PS\""
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ba\") == 'SPPSPSPS'\nassert solution(\"a\") == 'PS'\nassert solution(\"abab\") == 'SPPSPSPS'\nassert solution(\"a\") == 'PS'\nassert solution(\"aba\") == 'PPSS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\na\\nac\\n') == 'PS'\nassert solution('4\\naa\\naa\\na\\na\\n') == 'SPSP'\nassert solution('5\\nba\\nabab\\na\\naba\\nbaba\\nab\\naba\\nbaba\\nab') == 'PSPSPSPS'\nassert solution('2\\nba\\na\\n') == 'PS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aba\") == \"SPS\"\nassert solution(\"ac\") == \"SP\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"abc\") == \"PPS\"\nassert solution(\"ba\") == \"SPPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ba') == 'SPPSPSPS'\nassert solution('a') == 'PPSS'\nassert solution('abab') == 'PPSS'\nassert solution('a') == 'PS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aba\") == \"PS\"\nassert solution(\"baba\") == \"PSS\"\nassert solution(\"aaaaa\") == \"SPS\"\nassert solution(\"a\") == \"P\"\nassert solution(\"abc\") == \"PS\"\n\n-----\n\"\"\"\n\ns = input()\ns1 = set()\ns2 = set()\n\nfor i in range(len(s)):\n    s1.add(s[:i + 1])\n    s2.add(s[i:])\n\nc1 = 0\nc2 = 0\n\nfor i in s1:\n    for j in s2:\n        if i in j:\n            c1 += 1\n        if j in i:\n            c2 += 1"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aba\") == \"PPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"abab\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"ba\") == \"SPPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ba\") == 'SPPSPSPS'\nassert solution(\"a\") == 'PPSS'\nassert solution(\"abab\") == 'PSPSPSPS'\nassert solution(\"a\") == 'PS'\nassert solution(\"aba\") == 'PSPS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aba\") == \"PS\"\nassert solution(\"abab\") == \"SPPSPSPS\"\nassert solution(\"a\") == \"PS\"\nassert solution(\"baba\") == \"SPSPSPS\"\nassert solution(\"aa\") == \"PPSS\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 6 8 10') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('2 1 3 1 5') == '2'\nassert solution('1 2 3 4 5 6 7 8 9') == '3'\nassert solution('8 5 4 3 2 1') == '7'\n\n\"\"\"\n\nimport math\n\nfrom sys import stdin\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 4 6 8 10') == 1\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 4 6 8 10') == 1\n\"\"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4 6 8 10\") == \"1\"\n\"\"\"\n\na = input()\na = list(map(int, a.split()))\n\na.sort()"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '3'\nassert solution('1 2 3 4') == '2'\nassert solution('1 2 3 4 5') == '2'\n\"\"\"\n\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\n\"\"\"\n\ninput_as_list = [int(i) for i in input().split(\" \")]\n\nmax_val = max(input_as_list)\n\nprint(input_as_list.index(max_val) + 1)\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5') == '1'\nassert solution('1 2 3 4 5 6') == '1'\nassert solution('1 2 3 4 5 6 7 8 9 10 11') == '3'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100') == '1'\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline()\nn = list(map(int, input.split()))"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 6 8 10\") == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10\\n1 1 0 1 1 0 1 0 1 0') == '2'\nassert solution('5\\n1 1 0 0 0') == '0'\nassert solution('4\\n1 1 1 1') == '0'\n\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"0\"\nassert solution(\"7\\n1 1 1 1 1 1 0 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == 2\nassert solution(\"5\\n1 1 0 0 0\") == 0\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n\"\"\"\n\n\"\"\"\n\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u0434\u043e \u0441\u0431\u0438\u0442\u044c \u0441\u0442\u043e\u043b\u0435\u0442\u0435\u0439 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043e\u043d\u0438 \u043d\u0435 \u0431\u044b\u043b\u0438 \u0432\u043e\u0434\u043e\u0439?\n\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $n$ (1 $\\le n \\le$ 1000) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u043e\u043b\u0435\u0442\u0435\u0439. \u041a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 $n$ \u0441\u0442\u0440\u043e\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $m$ (1 $\\le m \\le$ $n$) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0441\u0431\u0438\u0442\u044b \u0441\u0442\u043e\u043b\u0435\u0442\u044c\u044f\u043c\u0438.\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u2014 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u043e\u043b\u0435\u0442\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u043e\u0441\u0441\u0442\u0438\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u043d\u0438\u043a\u0442\u043e \u043d\u0435 \u0431\u044b\u043b \u0432\u043e\u0434\u043e\u0439.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\n\u0412\u0432\u043e\u0434                                           \u0412\u044b\u0432\u043e\u0434\n6\n1 3 3 2 2 3 1\n4                                               2\n\n\n\u0412\u0432\u043e\u0434                                           \u0412\u044b\u0432\u043e\u0434\n6\n1 3 3 2 2 3 1\n1                                               1\n\n\n\u0412\u0432\u043e\u0434                                           \u0412\u044b\u0432\u043e\u0434\n1\n1                                               0\n\"\"\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 1 1 0 1 1 0 1 0 1 0\") == \"2\"\nassert solution(\"5 1 1 0 0 0\") == \"0\"\nassert solution(\"4 1 1 1\") == \"0\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"0\"\nassert solution(\"5\\n1 1 0 0 0\") == \"0\"\nassert solution(\"8\\n1 1 1 1 1 1 1 1 1\") == \"2\"\n\"\"\"\n\n\"\"\"\nInput:\n4\n1 1 1 1\n\nOutput:\n0\n\nInput:\n5\n1 1 1 1\n\nOutput:\n0\n\"\"\"\n\nn = int(input())\n\na = input().split()\n\nl = [int(x) for x in a]\n\nm = 0\n\nfor i in range(1, n):\n    if l[i] == 1 and l[i-1] == 1 and l[i+1] == 1:\n        m = i\n        break\n\nprint(m)\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(10) == 2\nassert solution(5) == 0\n\"\"\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\\n\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\\n\") == \"0\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('1 1 0 0 0') == 0\nassert solution('1 1 1 1') == 0\nassert solution('1 1 0 0 1 1 0 1 0') == 2\nassert solution('1 1 1 1') == 0\n\n-----\n\"\"\"\nfrom typing import Tuple\n\nimport numpy as np\n\nN = int(input())\nA = np.array(input().split(), dtype=np.int)"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n1 1 0 1 1 0 1 0 1 0\\n\") == \"2\"\nassert solution(\"5\\n1 1 0 0 0\\n\") == \"0\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n6 90 12 18 30 18') == '4'\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 3 4\\n') == '1'\nassert solution('4\\n1 2 3 4\\n') == '2'\nassert solution('6\\n6 90 12 18 30 18\\n') == '4'\n\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5\\n1 2 3 4 5') == 1\nassert solution('4 2\\n1 2 3 4 5') == 2\nassert solution('4 10\\n1 2 3 4 5') == 0\nassert solution('4 10\\n1 2 3 3 3') == 3\nassert solution('4 10\\n2 4 6 8 10') == 0\n\"\"\"\n\nfrom math import gcd\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5\") == '2'\nassert solution(\"2 6 8 10 12\") == '2'\nassert solution(\"1 1 1 1 1 1\") == '5'\nassert solution(\"6 90 12 18 30 18\") == '4'\n\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3') == '1'\nassert solution('2\\n4\\n6') == '2'\nassert solution('4\\n6\\n10\\n12') == '2'\nassert solution('10\\n12\\n18\\n30') == '4'\nassert solution('6\\n90\\n12\\n18\\n30\\n18') == '4'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 4 5') == 2\nassert solution('6\\n6 90 12 18 30 18') == 4\n\n\n\n###\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\\n\"\nassert solution(\"3\\n2 4 6\") == \"2\\n\"\n\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2 3 4 5') == '1'\nassert solution('6\\n6 90 12 18 30 18') == '4'\nassert solution('4\\n1 2 3 4') == '1'\nassert solution('7\\n1 1 1 1 1 1') == '6'\nassert solution('7\\n1 1 1 1 1 1') == '6'\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3 4 5') == '1'\nassert solution('6\\n6 90 12 18 30 18') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 4\") == '2'\n\"\"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n1 2 4 3 3 2\") == 2\nassert solution(\"1\\n100\") == 1\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6\\n1 2 4 3 3 2') == '2'\n\"\"\""
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n1 2 4 3 3 2\") == 2\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2 1\") == \"2\"\nassert solution(\"5 2 1 2 1\") == \"1\"\nassert solution(\"4 2 4 2\") == \"3\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 4 3 3 2\") == \"2\"\nassert solution(\"1 1 1 1 1 1\") == \"0\"\nassert solution(\"1 2 4 3 3 2\") == \"2\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 2 4 3 3 2\") == '2'\nassert solution(\"1\\n100\") == '1'\nassert solution(\"4\\n1 2 4 3\") == '1'\n\"\"\""
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 4 3 3 2') == '2'\nassert solution('1 2 4 3 3 2') == '2'\nassert solution('1 2 4 3 3 2') == '2'\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n1 2 4 3 3 2') == 2\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 3 2\") == \"2\"\nassert solution(\"1 1 2 3 3 3 2\") == \"3\"\nassert solution(\"1 1 1 1 2 2 2\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 3 2\") == 2\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nimport collections\ncounter = collections.Counter(a)\n\nprint(len(counter))\n\ncounter = sorted(counter.items(), key = lambda x: x[1])\nprint(counter[0][1])\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''6 2\n0 1 1 0 0 1\n''') == '3'\n\nassert solution('''5 3\n0 0 0 0 0\n''') == '-1'\n\nassert solution('''5 10\n0 0 0 0 0\n''') == '2'\n\nassert solution('''10 3\n0 0 0 0 0 0 0 0 0 0 1\n''') == '3'\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n0 1 1 0 0 1\") == '3'\nassert solution(\"5 3\\n0 0 1 1 0 1 0 0 0 1\") == '2'\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == '-1'\nassert solution(\"6 2\\n0 1 1 0 0 1\") == '3'\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == 3\nassert solution(\"5 10\\n0 0 0 0 0\") == -1\nassert solution(\"5 3\\n1 0 0 0 1\") == 2\n\"\"\"\n\nn, r = list(map(int, input().split()))\nhouse = list(map(int, input().split()))\nheaters = []\nfor i in range(n):\n    if house[i] == 1:\n        heaters.append(i)"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == \"3\"\nassert solution(\"5 3\\n0 0 0 0 1\") == \"2\"\nassert solution(\"5 10\\n0 0 0 0 0\") == \"-1\"\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == \"3\"\nassert solution(\"10 10\\n0 0 0 0 0 0\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == \"3\"\nassert solution(\"5 3\\n0 0 0 0 1\") == \"2\"\nassert solution(\"5 10\\n0 0 0 0 0\") == \"-1\"\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == \"3\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2\\n0 1 1 0 0 1\") == \"3\"\nassert solution(\"5 3\\n0 0 0 0 1\") == \"2\"\nassert solution(\"5 10\\n0 0 0 0 0\") == \"-1\"\nassert solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == \"3\""
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n0 0 1 1 0\") == '2'\nassert solution(\"5 3\\n0 0 1 1 0 1\") == '1'\nassert solution(\"5 10\\n0 0 1 1 0 1 0 0 0 1\") == '3'\nassert solution(\"5 10\\n0 0 0 0 0 0\") == '-1'\nassert solution(\"6 2\\n0 1 1 0 0 1\") == '3'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 2\\n0 1 1 0 0 1') == 3\nassert solution('5 3\\n0 0 0 0 1') == 2\nassert solution('5 10\\n0 0 0 0 0') == -1\nassert solution('10 3\\n0 0 1 1 0 1 0 0 0 1') == 3\n\"\"\""
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n0 0 1 1') == '2'\nassert solution('7 5\\n0 0 0 0 0 1 1') == '1'\nassert solution('7 10\\n0 0 0 0 0 0 0 0 1') == '-1'\nassert solution('6 2\\n1 0 1') == '3'\nassert solution('1 1\\n0') == '-1'\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n0 1 1 0') == '3'\nassert solution('6 2\\n0 1 1 0 0 1') == '3'\nassert solution('5 10\\n0 0 0 0 0 0') == '-1'\nassert solution('10 3\\n0 0 0 0 0 0 0 0 0 0 1') == '3'\nassert solution('1 1\\n0') == '1'\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '3'\n\"\"\"\n\nN = int(input())\n\ncount = 0\n\nfor A in range(1, N):\n    for B in range(1, N):\n        C = N - A - B\n        if C > 0:\n            count += 1\n\nprint(count)"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '3'\nassert solution('5') == '10'\n\"\"\"\n\nN = int(input())\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3) == 3\n\"\"\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n') == '3'\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '3'\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n') == '3'\n\"\"\"\n\nn = int(input())\n\nres = 0\nfor A in range(1, n):\n    for B in range(1, n):\n        C = n - A - B\n        if A * B == C:\n            res += 1\nprint(res)"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n') == '3\\n'\nassert solution('5\\n') == '4\\n'\nassert solution('8\\n') == '9\\n'\nassert solution('10\\n') == '8\\n'\n\"\"\"\n\nimport sys\nfrom functools import lru_cache\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"5\"\nassert solution(\"10\") == \"7\"\n\"\"\"\n\nfrom typing import Iterator"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n') == 3\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('((()))') == 1\n\"\"\"\n\nn = int(input())\ns = input()\ncount = 0"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"(((())\") == 3\nassert solution(\"))((((((\") == 0\nassert solution(\"()()()\") == 0\nassert solution(\"()())()\") == 1\nassert solution(\"))(\") == 0\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"(((()))\") == 0\nassert solution(\"()())()\") == 1\nassert solution(\"((()))\") == 0\nassert solution(\"((()))()\") == 0\nassert solution(\"(((()))())\") == 2\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"(((())\") == 3\nassert solution(\"())(())(\") == 2\nassert solution(\"))(((((\") == 0\n\"\"\"\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"(((()))\") == 3\nassert solution(\"()()()\") == 0\nassert solution(\"((()))\") == 3\nassert solution(\"(()())\") == 3\nassert solution(\"((()))(\") == 3\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"(((())))(((()()))\") == 1\nassert solution(\"(())(())((()(()())))(((()))())\") == 1\n\"\"\"\n\nn = int(stdin.readline())\nbracket_seq = stdin.readline().strip()\nopen_bracket_indexes = []\n\nfor i in range(n):\n    if bracket_seq[i] == \"(\":\n        open_bracket_indexes.append(i)\n\nfor i in range(n - 1, -1, -1):\n    if bracket_seq[i] == \")\":\n        open_bracket_indexes.append(i)"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"(((())\") == 3\nassert solution(\"()()())\") == 0\nassert solution(\"(()())()\") == 1\nassert solution(\"(()((((((((((((()))()()))())())(()))(()))())))))(((((())((())(())())())((()))()))((()(((())))((()))(())()))(((()))()))(())\") == 27\nassert solution(\"((((())(((((((((((((((((((((((((((((((((()))))))(())))(((((()))()()))))))))))))))))))(())(())))(((()(()((((()())()())(((()((()()((((())((((()))(())())()((((())()))(((()))(()))()((((((()))(()(((((((((((((()))))))))))))))))))))())((()(())()((((()()(()((()((((((()(()((((((((((((((((()((())))((((((((()))()()(())()(()(()(((((((((()))(()))()(()(((((((((((((()((()(((((((((((((((((((((((((()))))))(()))((()(())()((()((((((((((((()()()()(((()(()(()(()(()(((()(((((((((((((((((()((()(()(((((((((((((((((((((((((((((((()()()((()(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"()()\") == 3\nassert solution(\"(((\") == 2\nassert solution(\")(\") == 1\nassert solution(\"))\") == 1\n\nassert solution(\"()()\") == 3\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"()()\") == 1\nassert solution(\"(()())\") == 0\nassert solution(\"((()())())\") == 2\nassert solution(\"((()())())\") == 2\nassert solution(\"(()(()))(())\") == 3\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"((()))\") == 0\nassert solution(\"(())((()())())\") == 2\nassert solution(\"()((())())\") == 2\nassert solution(\"((()))(\") == 1\nassert solution(\"((())\") == 2\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bbaba\", \"bb\") == 3\nassert solution(\"baaba\", \"ab\") == 2\nassert solution(\"abcde\", \"abcde\") == 0\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('bbaba') == 3\nassert solution('aaab') == 2\n\"\"\""
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('bbaba') == 3\nassert solution('baaba') == 2\nassert solution('abcde') == 0\n\n\"\"\""
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"test\") == 3\n\nassert solution(\"tst\") == 2\n\nassert solution(\"tt\") == 0\n\nassert solution(\"et\") == 0\n\nassert solution(\"\") == 0"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"test\") == \"t\"\nassert solution(\"testtt\") == \"tt\"\nassert solution(\"ttest\") == \"tt\"\nassert solution(\"testttest\") == \"t\"\nassert solution(\"ttesttest\") == \"tt\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"test\") == 3\n\nprint(solution(\"test\"))\n\nassert solution(\"tst\") == 1\n\nprint(solution(\"tt\"))\n\nassert solution(\"et\") == 1\n\nprint(solution(\"se\"))\n\nassert solution(\"contest\") == 0\n\nprint(solution(\"asdfasdf\"))\n\nassert solution(\"fasd\") == 3\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('test') =='stt'\nassert solution('tst') =='stt'\nassert solution('tt') == 't'\nassert solution('et') == 'te'\nassert solution('a') == 'a'\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"test\") == \"t\"\nassert solution(\"bbaba\") == \"3\"\nassert solution(\"abcde\") == \"0\"\nassert solution(\"asdfasdf\") == \"3\"\nassert solution(\"qqqqq\") == \"1\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"test\") == 2\n\n\"\"\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"test\") == 4\nassert solution(\"abcd\") == 1\nassert solution(\"\") == 0\nassert solution(\"aaaa\") == 5\nassert solution(\"aabaaaa\") == 5\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 1 1\") == \"2\"\n\"\"\"\n\na, b, c, d = [int(i) for i in stdin.split(\" \")]"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 1 1') == '2'\nassert solution('1 2 1 1') == '2'\nassert solution('1 2 1 1') == '2'\nassert solution('1 2 1 1') == '2'\nassert solution('1 2 1 1') == '2'\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 1 1\") == \"2\"\nprint(\"PASSED\")\n\n----\n\nGiven are integers a,b,c and d.\nIf x and y are integers and a \\leq x \\leq b and c\\leq y \\leq d hold, what is the maximum possible value of x \\times y?\n\n-----Constraints-----\n - -10^9 \\leq a \\leq b \\leq 10^9\n - -10^9 \\leq c \\leq d \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\na b c d\n\n-----Output-----\nPrint the answer.\n\n-----Sample Input-----\n1 2 1 1\n\n-----Sample Output-----\n2\n\nIf x = 1 and y = 1 then x \\times y = 1.\nIf x = 2 and y = 1 then x \\times y = 2.\nTherefore, the answer is 2.\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"1 2 3 4\") == \"6\"\nassert solution(\"100000 1 1 1\") == \"1\"\nassert solution(\"9 1000000000 9 1000000000\") == \"9999999999\"\nassert solution(\"0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\nprint(\"Success!\")\n\"\"\"\n\n\"\"\"\nGiven a list of integers, find and print the number of elements that are even and the number of elements that are odd.\n\n-----Constraints-----\n - The list contains only numbers.\n - -10^9 \\leq a \\leq b \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nnumbers separated by whitespaces\n\n-----Output-----\nPrint the number of elements that are even and the number of elements that are odd.\n\n-----Sample Input-----\n4 3 7 1 9\n\n-----Sample Output-----\nNumber of even numbers: 3\nNumber of odd numbers: 4\n\nIf the list contains only even numbers, then the number of even numbers is the number of elements in the list.\nIf the list contains only odd numbers, then the number of odd numbers is the number of elements in the list.\nOtherwise, the number of even numbers is the number of elements in the list."
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 1 1\") == 2\n\"\"\"\n\na,b,c,d=map(int,input().split())\nx,y=1,1\nwhile x*y<a:\n    if x*y>b:\n        x=b\n    else:\n        x=x*2\nwhile x*y<c:\n    if x*y>d:\n        y=d\n    else:\n        y=y*2\nprint(x*y)"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 1 1\") == 2\nassert solution(\"1 1 1 1\") == 1\nassert solution(\"1 1 1 1\") == 1\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 1 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 1 1') == 2\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n9 1 4 4 6 7') == '2'\nassert solution('8\\n1 2 3 4 5 6 7 8') == '0'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '1'\nassert solution('6\\n9 1 4 4 6 7') == '2'\nassert solution('12\\n1 2 3 4 5 6 7 8 9 10 11 12') == '2'\n\n\"\"\"\n\n\"\"\"\nSolution Approach:\nThe key observation here is that if a problem is an AR, then the next problem must be an ABC.\n\nSo we can use binary search to find the first problem that is an AR.\nFor each problem we examine, we must have that d_i >= d_j for all j \\neq i, because a problem must be an AR if and only if it is greater than all its neighbors.\nThus, at each step, we can calculate the minimum of d_i and d_j and the maximum of d_i and d_j, and put these into a tuple, and we can perform binary search on this tuple to find the answer.\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 1 4 4 6 7\") == \"2\"\nassert solution(\"6 1 5 4 7\") == \"2\"\n\n-----"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n9 1 4 4 6 7\") == 2\n\"\"\"\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 1 2 2\\n') == '2'\nassert solution('6\\n1 1 2 2 3 3\\n') == '2'\n\nimport sys"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == '2'\n\n\"\"\"\nfrom functools import lru_cache"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 1 4 4 6 7\\n\") == \"2\"\n\"\"\"\n\n\n\nimport math\nimport sys\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input_1) == solution_1\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n9 1 4 4 6 7') == '2'\n\n---\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 1 4 4 6 7\") == '2'\n\"\"\"\n\n\"\"\"\nN = 6\n\n\"\"\"\n\"\"\"\nN = 6"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n9 1 4 4 6 7\") == 2\n\"\"\""
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 24 21 23\") == 3\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List\n\n\nclass Solution:\n    def __init__(self, n: int, h: int, l: int, r: int) -> None:\n        self.n, self.h, self.l, self.r = n, h, l, r\n        self.a = list(map(int, stdin.strip().split(\" \")))\n        self.good_times = 0\n\n    def max_good_times(self) -> int:\n        i = 0\n        for num_sleeps in Counter(self.a).values():\n            self.good_times += min(num_sleeps, self.h - i)\n            i += num_sleeps\n\n        return self.good_times\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 24 21 23\") == 3\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"7 24 21 23\"\n) == \"3\"\n\n\"\"\"\n\nimport sys\nimport math\n\n\nclass Solution:\n    def __init__(self, stdin: str):\n        self.n, self.h, self.l, self.r = [int(x) for x in stdin.split(' ')]\n        self.a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n        self.m = 0\n        self.d = self.h - self.l\n        self.f = self.h - 1\n\n    def process(self, t, c):\n        if t < self.l:\n            t = self.l\n        elif t > self.r:\n            t = self.r\n        elif t == self.l:\n            t = self.l + 1\n        elif t == self.r:\n            t = self.r + 1\n        elif t % 1 == 0:\n            t = int(t)\n        if t == self.f:\n            return self.m\n        self.m = max(self.m, c)\n        t += 1\n        return self.process(t, c + 1)\n\n    def solve(self):\n        return self.process(0, 0)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\n\"\"\""
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\n\n\n---\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 24 21 23\\n16 17 14 20 20 11 22\") == \"3\"\n\"\"\""
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 24 21 23\\n16 17 14 20 20 11 22') == '3'\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 24 21 23\") == \"3\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"10\n1 2 5 6 7 10 21 23 24 49\"\"\") == \"4\"\nassert solution(\"\"\"5\n2 10 50 110 250\"\"\") == \"1\"\nassert solution(\"\"\"6\n4 7 12 100 150 199\"\"\") == \"3\"\n\n\"\"\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\\n\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\n1 2 5 6 7 10 21 23 24 49\\n') == '4'\n\"\"\""
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == 4\nassert solution(\"5\\n2 10 50 110 250\") == 1\nassert solution(\"6\\n4 7 12 100 150 199\") == 3\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\nprint(\"Ok!\")\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\""
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n1 2 5 6 7 10 21 23 24 49\") == \"4\"\nassert solution(\"5\\n2 10 50 110 250\") == \"1\"\nassert solution(\"6\\n4 7 12 100 150 199\") == \"3\"\n\nprint('The code ran Correctly')\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 4 8 3 6\") == \"1 2\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 4 8 3 6\\n') == '1 2'\n\nassert solution('5\\n2 4 8 3 6\\n') == '1 2'\n\nassert solution('6\\n2 5 10 1 10 2\\n') == '1 4'\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 11 3 7\") == \"2 4\"\nprint(solution(\"5 2 11 3 7\"))\n\n\"\"\"\n\nimport sys\nfrom math import gcd"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    5\n    2 4 8 3 6\n    \"\"\"\n) == \"\"\"\n    1 2\n    \"\"\"\n\nassert solution(\n    \"\"\"\n    6\n    2 5 10 1 10 2\n    \"\"\"\n) == \"\"\"\n    1 4\n    \"\"\"\n)"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5\\n2 4 8 3 6') == '1 2'\nassert solution('6\\n2 5 10 1 10 2') == '1 4'\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 4 8 3 6') == '1 2'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\""
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 4 8 3 6\") == \"1 2\"\nassert solution(\"5\\n5 2 11 3 7\") == \"2 4\"\nassert solution(\"6\\n2 5 10 1 10 2\") == \"1 4\"\n\"\"\""
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 8 3 6\") == \"1 2\"\nassert solution(\"5 2 11 3 7\") == \"2 4\"\nassert solution(\"6 2 11 3 7\") == \"1 4\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2 4 8 3 6') == '1 2'\nassert solution('6\\n2 5 10 1 10 2') == '1 4'\n\n'''"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('121') == '021'\nassert solution('211200') == '211220'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('2112010') == '120120'\nassert solution('110011') == '110110'\nassert solution('1001001011101') == '101100101110'\nassert solution
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11112\") == \"11120\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('121') == '021'\nassert solution('111111') == '111112'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('121') == '021'\n\nassert solution('110110') == '110120'\n\nassert solution('101010') == '101020'\n\nassert solution('110111') == '110120'\n\nassert solution('111011') == '1110120'"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"121\") == \"021\"\n\n\"\"\""
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('10') == '1010'\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1101011111') == '1101011110'\nassert solution
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"121\") == \"021\"\n\"\"\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12010\") == \"120120\"\nassert solution(\"1110111110\") == \"1110111021\"\nassert solution(\"1110\") == \"11101110\"\nassert solution(\"101\") == \"11101110\"\nassert solution(\"110\") == \"11101110\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n2 3\") == \"2\"\nassert solution(\"2 1\\n2\") == \"1\"\n\"\"\"\n\nimport os\n\n__location__ = os.path.realpath(os.path.join(os.getcwd(), os.path.dirname(__file__)))\n\nwith open(os.path.join(__location__, \"input.txt\")) as input_file:\n    cases = input_file.readlines()\n\nfor index, case in enumerate(cases):\n    cases[index] = list(map(int, case.split(\" \")))"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n6 1\n3\n''') == '4'\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1\\n3\\n\") == \"4\"\nassert solution(\"4 2\\n3\\n\") == \"2\"\nassert solution(\"10 10\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n\") == \"9\"\nassert solution(\"6 2\\n4\\n3\\n5\\n1\\n2\\n\") == \"4\"\nassert solution(\"2 1\\n2\\n\") == \"2\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\\n3\\n\") == \"4\"\nassert solution(\"6 1\\n3\\n\") == \"4\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1\\n0') == '3'\n\nassert solution('6 1\\n3') == '4'\nassert solution('6 1\\n3\\n4\\n2') == '0'\n\nassert solution('6 1\\n3\\n4\\n2\\n5\\n1') == '0'\n\nassert solution('6 1\\n3\\n5\\n2\\n4\\n1') == '4'"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1\\n3\") == \"2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n6 1\n3\n\"\"\"\n) == \"4\"\n\n\"\"\"\nhttps://www.codewars.com/kata/56b92a89be24231da8000001/train/python\n\nIn this simple assignment you are given a number and have to make it negative. But maybe the number is already negative?\n\nExample:\n\nmake_negative(1);  # return -1\nmake_negative(-5); # return -5\nmake_negative(0);  # return 0\nNotes:\n\nThe number can be negative already, in which case no change is required.\nZero (0) is not checked for any specific sign. Negative zeros make no mathematical sense.\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1\\n1\\n') == '4'\nassert solution('6 1\\n1\\n2\\n3\\n4\\n5\\n6') == '4'"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n3\") == \"4\"\nassert solution(\"4 1\\n1\\n2\") == \"2\"\nassert solution(\"6 1\\n3\\n5\\n6\") == \"0\"\n\n\"\"\"\n\n\nfrom collections import deque\nfrom functools import lru_cache\nfrom sys import stdin\n\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n3\") == \"4\\n\", \"Actual: %s\" % solution(\"3 1\\n3\")\nassert solution(\"6 2\\n1\\n2\\n3\\n4\\n5\") == \"2\\n\", \"Actual: %s\" % solution(\"6 2\\n1\\n2\\n3\\n4\\n5\")\nassert solution(\"4 3\\n3\\n4\\n5\\n1\") == \"1\\n\", \"Actual: %s\" % solution(\"4 3\\n3\\n4\\n5\\n1\")\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 2 4') == '2'\nassert solution('11 8 16') == '5'\nassert solution('123 5 6') == '4'\nassert solution('1 2 3') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\n---"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 2 4') == 2\n\"\"\"\n\nimport sys\n\nX, K, D = [int(i) for i in sys.stdin.readline().split()]"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 2 4\\n') == '2'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 2 4\\n') == '2'\nassert solution('-1 -2 -3\\n') == '1'\nassert solution('1 10 2\\n') == '-9'\nassert solution('1 100 2\\n') == '99'\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 2 4') == '2'\n\"\"\"\n\nX, K, D = map(int, input().split())\nans = 0\n\nfor i in range(X + 1):\n    if i * D - X < 0:\n        ans = abs(i * D - X)\n    elif K <= 0:\n        break\n    else:\n        ans = max(ans, abs(i * D - X))\n\nprint(ans)\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 3\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 2 4\") == 2\n\"\"\"\n\nimport sys\n\nX, K, D = map(int, sys.stdin.readline().split())\n\nprint(min(abs(X-D), abs(X+D)))\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 2 4') == '2'\nprint(solution('6 2 4'))\n\"\"\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2 4\") == \"2\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('571576') == 3\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11\") == 2\nassert solution(\"14\") == 0\nassert solution(\"61441\") == 10\nassert solution(\"571576\") == 3\n\"\"\"\n\n\"\"\"\nn = int(input())"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(2) == 0\nassert solution(61441) == 2\nassert solution(571576) == 10\n\"\"\"\n\nimport math"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(11) == 2\nassert solution(14) == 0\nassert solution(61441) == 10\nassert solution(571576) == 3\nprint('All tests passed.')\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11') == 2\nassert solution('61441') == 10\nassert solution('2128506') == 3\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"11\") == \"2\"\nassert solution(\"14\") == \"0\"\nassert solution(\"61441\") == \"2\"\nassert solution(\"2128506\") == \"3\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11\") == 2\nassert solution(\"14\") == 0\nassert solution(\"61441\") == 2\nassert solution(\"571576\") == 10\nprint(\"All tests passed.\")\n\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\") == 2\nassert solution(\"14\") == 0\nassert solution(\"61441\") == 2\nassert solution(\"2128506\") == 3\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11') == '2'\nassert solution('14') == '0'\nassert solution('61441') == '2'\nassert solution('571576') == '10'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(11) == 2\nassert solution(14) == 0\nassert solution(61441) == 10\nassert solution(571576) == 3\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == 27\n\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == 27\n'''\n\nn = int(input())"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == 27\n----\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == 3\n\"\"\"\n\na = int(input())\nprint((a-1)*a + 1)\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3) == 27\n\"\"\"\n\na = int(input())\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == 27\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 1\nprint(solution('1'))\n\nassert solution('3') == 4\nprint(solution('2'))\n\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == 27\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == 27\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == 27\n------------------------------------------------------------------------------------------------------------------------\nYou are given an array of N integers, A1, A2,\u2026, AN. Return maximum value of f(i, j) for all 1 \u2264 i, j \u2264 N.\nf(i, j) is defined as |A[i] - A[j]| + |i - j|, where |x| denotes absolute value of x.\n\nFor example,\n\nA=[1, 3, -1]\n\nf(1, 1) = f(2, 2) = f(3, 3) = 0\nf(1, 2) = f(2, 1) = |1 - 3| + |1 - 2| = 3\nf(1, 3) = f(3, 1) = |1 - (-1)| + |1 - 3| = 4\nf(2, 3) = f(3, 2) = |3 - (-1)| + |2 - 3| = 5\n\nSo, we return 5.\n\nCan you solve this in O(n^2) time?\n\nInput Format\n\nThe first and only line of the input contains space separated integers N and A1, A2, \u2026, AN.\n\nOutput Format\n\nPrint a single integer denoting the maximum value of f(i, j).\n\nConstraints\n\n1 \u2264 N \u2264 10^3\n-10^9 \u2264 A[i] \u2264 10^9\n\nExample:\n\nInput:\n5 -4 1 5 9\n\nOutput:\n19\n\nExplanation:\nAt i=1, j=2, f(1, 2) = |-4 - 1| + |1 - 2| = 3\nAt i=2, j=1, f(2, 1) = |1 - 5| + |2 - 1| = 3\nAt i=2, j=3, f(2, 3) = |1 - 5| + |2 - 3| = 4\nAt i=3, j=2, f(3, 2) = |9 - 5| + |3 - 2| = 5\nAt i=3, j=4, f(3, 4) = |9 - 5| + |3 - 4| = 6\nAt i=4, j=3, f(4, 3) = |5 - 9| + |4 - 3| = 7\nAt i=4, j=5, f(4, 5) = |5 - 9| + |4 - 5| = 8\nAt i=5, j=4, f(5, 4) = |5 - 9| + |5 - 4| = 9\nSo, the maximum value of f(i, j) for all 1 \u2264 i, j \u2264 5 is 19.\n------------------------------------------------------------------------------------------------------------------------\nYou are given an array A of N integers. You have to answer Q queries of the form\n\n- For each 1 \u2264 i \u2264 N, find the index of the smallest element in the array A greater than A[i]\n- For each 1 \u2264 i \u2264 N, find the index of the largest element in the array A less than A[i].\n\nThe answers to these questions must be returned in an array.\n\nInput Format\n\nThe first line contains N and Q.\nThe next N lines each contain an integer, A[i].\nThe next Q lines each contain the value of the query.\n\nConstraints\n1 \u2264 N \u2264 10^5\n1 \u2264 Q \u2264 10^5\n-10^9 \u2264 A[i] \u2264 10^9\n\nOutput Format\n\nReturn an array with each value corresponding to the answer of each query in order.\n\nSample Input\n5 3\n2 -1 2 1 3\n-2 -1 2 1 3\n-2 -1 2 1 3\n2 -1 2 1 3\n1 -1 2 1 3\n\nSample Output\n[2, 1, 4, 3, 1]\n[2, 2, 1, 2, 1]\n[2, 3, 2, 1, 2]\n[3, 3, 2, 1, 2]\n[3, 2, 2, 1, 2]\n------------------------------------------------------------------------------------------------------------------------\nYou are given an array of N integers, A1, A2,\u2026, AN. Return maximum value of f(i, j) for all 1 \u2264 i, j \u2264 N.\nf(i, j) is defined as |A[i] - A[j]| + |i - j|, where |x| denotes absolute value of x.\n\nFor example,\n\nA=[1, 3, -1]\n\nf(1, 1) = f(2, 2) = f(3, 3) = 0\nf(1, 2) = f(2, 1) = |1 - 3| + |1 - 2| = 3\nf(1, 3) = f(3, 1) = |1 - (-1)| + |1 - 3| = 4\nf(2, 3) = f(3, 2) = |3 - (-1)| + |2 - 3| = 5\n\nSo, we return 5.\n\nCan you solve this in O(n^2) time?\n\nInput Format\n\nThe first and only line of the input contains space separated integers N and A1, A2, \u2026, AN.\n\nOutput Format\n\nPrint a single integer denoting the maximum value of f(i, j) for all 1 \u2264 i, j \u2264 N.\n\nConstraints\n\n1 \u2264 N \u2264 10^3\n-10^9 \u2264 A[i] \u2264 10^9\n\nSample Input\n5 -4 1 5 9\n\nSample Output\n19\n------------------------------------------------------------------------------------------------------------------------\nYou are given an array of N integers, A1, A2,\u2026, AN. Return maximum value of f(i, j) for all 1 \u2264 i, j \u2264 N.\nf(i, j) is defined as |A[i] - A[j]| + |i - j|, where |x| denotes absolute value of x.\n\nFor example,\n\nA=[1, 3, -1]\n\nf(1, 1) = f(2, 2) = f(3, 3) = 0\nf(1, 2) = f(2, 1) = |1 - 3| + |1 - 2| = 3\nf(1, 3) = f(3, 1) = |1 - (-1)| + |1 - 3| = 4\nf(2, 3) = f(3, 2) = |3 - (-1)| + |2 - 3| = 5\n\nSo, we return 5.\n\nCan you solve this in O(n^2) time?\n\nInput Format\n\nThe first and only line of the input contains space separated integers N and A1, A2, \u2026, AN.\n\nOutput Format\n\nPrint a single integer denoting the maximum value of f(i, j) for all 1 \u2264 i, j \u2264 N.\n\nConstraints\n\n1 \u2264 N \u2264 10^3\n-10^9 \u2264 A[i] \u2264 10^9\n\nSample Input\n5 -4 1 5 9\n\nSample Output\n19\n------------------------------------------------------------------------------------------------------------------------\nYou are given an array of N integers, A1, A2,\u2026, AN. Return maximum value of f(i, j) for all 1 \u2264 i, j \u2264 N.\nf(i, j) is defined as |A[i] - A[j]| + |i - j|, where |x| denotes absolute value of x.\n\nFor example,\n\nA=[1, 3, -1]\n\nf(1, 1) = f(2, 2) = f(3, 3) = 0\nf(1, 2) = f(2, 1) = |1 - 3| + |1 - 2| = 3\nf(1, 3) = f(3, 1) = |1 - (-1)| + |1 - 3| = 4\nf(2, 3) = f(3, 2) = |3 - (-1)| + |2 - 3| = 5\n\nSo, we return 5.\n\nCan you solve this in O(n^2) time?\n\nInput Format\n\nThe first and only line of the input contains space separated integers N and A1, A2, \u2026, AN.\n\nOutput Format\n\nPrint a single integer denoting the maximum value of f(i, j) for all 1 \u2264 i, j \u2264 N.\n\nConstraints\n\n1 \u2264 N \u2264 10^3\n-10^9 \u2264 A[i] \u2264 10^9\n\nSample Input\n5 -4 1 5 9\n\nSample Output\n19\n------------------------------------------------------------------------------------------------------------------------\nYou are given an array of N integers, A1, A2,\u2026, AN. Return maximum value of f(i, j) for all 1 \u2264 i, j \u2264 N.\nf(i, j) is defined as |"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('13') == 1\nassert solution('927') == 1\nassert solution('48') == 0"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"13\") == \"1\"\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('13') == '1'\nassert solution('927') == '1'\nassert solution('48') == '0'"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"927\") == 1\nassert solution(\"13\") == 1\nassert solution(\"48\") == 0\nassert solution(\"1\") == 1\n\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('927') == '1'\nassert solution('928') == '1'\nassert solution('929') == '0'\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/54bf1c2cd5b56cc47f0007a1/train/python\n\nIn this Kata, you will be given an array of numbers in which two numbers occur once and the rest occur only twice.\nYour task will be to return the sum of the numbers that occur only once.\n\nFor example, repeats([4,5,7,5,4,8]) = 15 because only the numbers 7 and 8 occur once, and their sum is 15.\n\nMore examples in the test cases.\n\nGood luck!\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('13') == '1'\nassert solution('48') == '0'\nassert solution('1') == '0'\n\n'''"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13') == 1\n\nassert solution('927') == 1\n\nassert solution('48') == 0\n\nassert solution('5') == 0\n\nassert solution('928') == 1\n\"\"\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"0\"\nassert solution(\"13\") == \"1\"\nassert solution(\"927\") == \"1\"\nassert solution(\"48\") == \"0\""
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5 3 1') == 4\n\"\"\""
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == ''\nassert solution('1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2 3 4 5 6 7 8 90 1 2"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5 3 1') == 4\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5 3 1\") == \"4\"\n\"\"\"\n\nimport numpy as np\n\nn = int(input())\na = list(map(int, input().split()))\nb = np.array(a)"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_0) == test_0_result\nassert solution(test_1) == test_1_result\nassert solution(test_2) == test_2_result\nassert solution(test_3) == test_3_result\n\n-----Explanation-----\n\nExample case 1:\n\nThe base 3 is a magic number that can be divided by 4 to give 3^4,\nwhere 4 is the base of the number.\n\nExample case 2:\n\nThe base 3 is a magic number that can be divided by 4 to give 3^4,\nwhere 4 is the base of the number.\n\nExample case 3:\n\nThe base 3 is a magic number that can be divided by 4 to give 3^4,\nwhere 4 is the base of the number.\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 5 1') == 4\nassert solution('7 9 9 7') == 5\nassert solution('5 4 7 8 3') == 5\nassert solution('1 9 9 9 9') == 1\n\n'''"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '3'\nassert solution('2 2 1') == '3'\nassert solution('2 1 1') == '1'\nassert solution('3 3 3') == '1'\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4 5 6 7 8 9 10 11') == '5'\nassert solution('3 5 7 9 11 13 15 17 19 21 23 25') == '6'\nassert solution('7 19 23 33 37 41') == '8'\nassert solution('5 9 13 17 21 25') == '6'\n\n'''"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 5 3 1') == 4"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 5 3 1') == 4\nassert solution('4 5 3 1') == 4\nassert solution('5 5 3 1') == 4\n\nprint(solution(input()))\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733\\n\") == \"2\\n8\\n1\\n999999733\\n1\"\nassert solution(\"7 8\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733\\n\") == \"2\\n8\\n1\\n999999733\\n1\"\n\nprint(\"Success\")\n'''\n\n'''\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 7') == '2'\nassert solution('8 1') == '8'\nassert solution('6 10') == '1'\nassert solution('999999733 999999732') == '999999733'\nassert solution('999999733 999999733') == '1'\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 7') == '2'\nassert solution('8 1') == '8'\nassert solution('6 10') == '1'\nassert solution('999999733 999999732') == '999999733'\nassert solution('999999733 999999733') == '1'\n\"\"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\") == \"2\\n8\\n1\\n999999733\\n1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 7\\n8 1\\n6 10\\n999999733 999999732\\n999999733 999999733\") == \"2\\n8\\n1\\n999999733\\n1\"\n\n\n\n\"\"\"\nimport math\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 7') == '2'\nassert solution('8 1') == '8'\nassert solution('6 10') == '1'\nassert solution('999999733 999999732') == '999999733'\nassert solution('999999733 999999733') == '1'\n\n\"\"\"\n\n\nfrom __future__ import annotations\n\nimport math"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 7\\n8 1\\n6 10\\n999999733 999999732') == '2\\n8\\n1\\n999999733\\n1'\nassert solution('8 1\\n8 1') == '8\\n1'\nassert solution('6 10\\n999999733 999999732') == '1\\n999999733'\n\n'''\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8 7\\n8 1\\n6 10\\n999999733 999999733\\n999999733 999999733\") == \"2 8 1\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 7\") == \"2\"\nassert solution(\"8 1\") == \"8\"\nassert solution(\"6 10\") == \"1\"\nassert solution(\"999999733 999999732\") == \"999999733\"\nassert solution(\"999999733 999999733\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    stdin=\n    \"2 2\\n\"\n    \"2 1 2\\n\"\n) == \"1\"\n\nassert solution(\n    stdin=\n    \"2 2\\n\"\n    \"1 2\\n\"\n) == \"0\"\n\nassert solution(\n    stdin=\n    \"5 5\\n\"\n    \"2 1 2\\n\"\n    \"1 2\\n\"\n    \"2 3\\n\"\n    \"3 4\\n\"\n    \"4 5\\n\"\n) == \"5\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == 1\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == '1'\n\"\"\""
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n2 1 2\\n1 2\\n0 1\\n') == '1'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 1 2\\n1 2\\n0 1\") == \"1\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 9 0\") == \"5.000000000000\"\n\"\"\"\n\nA, B, H, M = list(map(int, input().split()))"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '3 4 9 0'\n) == '5.00000000000000000000'\n\"\"\"\nimport math"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 9 0\") == \"5.0\"\n\"\"\"\n\n\"\"\"\nimport math\nA,B,H,M = [int(i) for i in stdin.split(\" \")]\n\nprint(math.sqrt((A**2 + B**2)/(H*60 + M)))\n\"\"\"\n\nimport math\nA,B,H,M = [int(i) for i in input().split(\" \")]\n\nprint(math.sqrt((A**2 + B**2)/(H*60 + M)))"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\n\"\"\""
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 9 0') == '5.0'\n\n\"\"\"\nimport math"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 9 0') == '5.00000000000000000000'\n\"\"\"\nimport math\nimport sys\n\na, b, h, m = [int(i) for i in sys.stdin.readline().strip().split()]\n\ntotal_seconds = m * 60 + h * 3600 + b * 3600 * 24\n\ncenter_a = a / 2\ncenter_b = b / 2\n\nx_distance = abs(center_a * math.sin(2 * math.pi / total_seconds) - center_b * math.cos(2 * math.pi / total_seconds))\ny_distance = abs(center_a * math.cos(2 * math.pi / total_seconds) - center_b * math.sin(2 * math.pi / total_seconds))\n\nprint(round(x_distance, 9), round(y_distance, 9))\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000000000\"\n\n\"\"\"\n\nimport sys\n\nA, B, H, M = [float(i) for i in sys.stdin.readline().strip().split(\" \")]\n\nprint((B - A) * (H * 12 + M) / 360)\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 9 0\") == \"5.0\"\n\"\"\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 9 0\") == \"5.00000000000000\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\") == \"5\"\nassert solution(\"6 3\") == \"9\"\nassert solution(\"100000 100000\") == \"9998\"\nassert solution(\"7 3\") == \"8\"\n\n\"\"\"\n\nimport collections\nfrom typing import List, Set, Dict\n\nimport math\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 4\\n1 4 5 60 4') == '8'\nassert solution('3 1\\n1 1 1') == '6'\nassert solution('15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3') == '97'\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == \"8\"\nassert solution(\"3 1\\n1 1 1\") == \"6\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 5') == 8\nassert solution('1 4 5 60 4') == 8\n\"\"\"\n\nimport sys\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == \"8\"\nassert solution(\"3 1\\n1 1 1\") == \"6\"\nassert solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"97\"\n\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == \"8\"\nassert solution(\"3 1\\n1 1 1\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"5 4\"\n) == \"8\"\nassert solution(\n    \"3 1\"\n) == \"6\"\nassert solution(\n    \"15 2\"\n) == \"97\"\n\"\"\""
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\") == \"8\"\nassert solution(\"3 1\") == \"6\"\nassert solution(\"15 2\") == \"97\"\n\n\n\"\"\"\nfrom collections import Counter\n\nn, m = [int(_) for _ in stdin.readline().split()]\na = [int(_) for _ in stdin.readline().split()]\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n1 4 5 60 4\") == \"8\"\nassert solution(\"3 1\\n1 1 1\") == \"6\"\nassert solution(\"15 2\\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\") == \"97\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 4 5 60 4') == 8\n\"\"\""
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\"\"\"\n) == \"6\\n2\\n1 4\"\nassert solution(\n    \"\"\"5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\"\"\"\n) == \"7\\n2\\n3 2\"\nassert solution(\n    \"\"\"1 0\n1000000\"\"\"\n) == \"0\\n0\"\n\nassert solution(\n    \"\"\"4 4\n1 4\n4 3\n2 3\n2 2\"\"\"\n) == \"5\\n2\\n1 3\"\nassert solution(\n    \"\"\"5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\"\"\"\n) == \"6\\n2\\n1 4\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\nassert solution(\"2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1000000\\n\") == \"0\\n0\"\nprint(\"Successfully solved\")\n\"\"\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 -2 3 1 2\\n1 3\\n4 5\\n2 5\") == \"7\\n2\\n1 4\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n\n\"\"\""
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n1 4'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\") == \"7\\n2\\n1 4\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\") == \"7\\n2\\n3 2\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\") == \"7\\n2\\n3 2\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n1 4\\n'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2\\n'\nassert solution('1 0\\n1000000') == '0\\n0\\n'\n\nprint(\"The local tests are done. Click on 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n1 4'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\n\"\"\""
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n1 4\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n') == '6\\n2\\n1 4\\n'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2\\n'\nassert solution('1 0\\n1000000\\n') == '0\\n0\\n'\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n1 4'\n\"\"\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('fced') == 'Yes'\nassert solution('xyz') == 'Yes'\nassert solution('r') == 'Yes'\nassert solution('dabcef') == 'Yes'\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"dabcef\") == \"Yes\"\nassert solution(\"fced\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\nassert solution(\"aa\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('fced') == 'Yes'\nassert solution('xyz') == 'Yes'\nassert solution('r') == 'Yes'\nassert solution('dabcef') == 'Yes'\nassert solution('az') == 'No'\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"Yes\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"fced\\nxyz\\nr\\ndabcef\\naz\\naa\\nbad\\nbabc\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\n\"\"\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"fced\") == \"Yes\"\nassert solution(\"xyz\") == \"Yes\"\nassert solution(\"r\") == \"Yes\"\nassert solution(\"dabcef\") == \"No\"\nassert solution(\"az\") == \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abc\") == \"Yes\"\nassert solution(\"abab\") == \"No\"\nassert solution(\"abcdd\") == \"No\"\nassert solution(\"abcd\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('fced') == 'Yes'\nassert solution('xyz') == 'Yes'\nassert solution('r') == 'Yes'\nassert solution('dabcef') == 'Yes'\nassert solution('az') == 'No'\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"fced\\nxyz\\nr\\ndabcef\\naz\\naa\\nbad\\nbabc\") == \"Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\"\n\n\"\"\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5') == '7\\n2\\n4 1'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4') == '7\\n2\\n3 2'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4') == '7\\n2\\n3 2'\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n1 2\\n2 3\\n3 4\\n5 6\\n2 2\\n3 4\\n5 4\\n1 2\\n4 3') == '7\\n0\\n2 1\\n4 2'\nassert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5') == '6\\n2\\n4 1'\nassert solution('1 0\\n1000000') == '0\\n0'\n\n\"\"\"\n\nimport sys\n\nclass Segment:\n    def __init__(self, l: int, r: int):\n        self.l = l\n        self.r = r"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"7\\n2\\n4 1\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\nassert solution(\"3 3\\n2 3\\n2 3\") == \"0\\n1\"\nassert solution(\"3 3\\n2 5\\n2 3\") == \"0\\n1\"\nassert solution(\"3 4\\n2 5\\n2 3\") == \"0\\n1\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n2 3\\n3 4\") == \"4 1\"\nassert solution(\"7 1\\n3 4\\n5 6\\n1 2\\n2 4\\n1 4\") == \"7 1\"\nassert solution(\"10 1\\n2 9\\n1 10\") == \"10 1\"\nassert solution(\"9 10\\n2 8\\n3 7\\n4 6\\n1 5\") == \"9 10\"\nassert solution(\"5 10\\n2 9\\n3 8\\n1 7\\n4 6\") == \"5 10\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n4 1\"\nassert solution(\"3 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\"\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\n\n\"\"\"\n\n\"\"\"\n1. https://leetcode.com/problems/maximum-difference-between-increasing-elements/solution/\n2. https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/discuss/109534/JavaC%2B%2BPython-Greedy-and-Dynamic-Programming-solutions\n3. https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/discuss/109509/Python-and-DP-solution-with-explanation\n4. https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/discuss/109499/Python-DP-solution-with-explanation\n5. https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/discuss/109534/JavaC%2B%2BPython-Greedy-and-Dynamic-Programming-solutions\n\"\"\"\n\n\"\"\"\nThe solution in the first answer comes from the fact that we want to maximize the difference btw the minimum and the maximum number of an array. \n\nThe maximum difference can be achieved if we start the array from the minimum value of the array and then we shift the array right, by increasing the values from the beginning to the end. \n\nNow we just need to figure out, which value from the rightmost part of the array is the biggest, so we can add 1 to the value of the maximum number of the array. \n\nThere is a really simple and optimal way to find this value \u2014 just sort the array and then pick the last element of the sorted array. \n\nThe complexity of this solution is O(NlogN). \n\"\"\"\n\nimport sys"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\""
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('1 1000000000') == '1'\nassert solution('1 0') == '0'\nassert solution('3 5') == '3'\nassert solution('1 1000000000') == '1'\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\\n') == '7\\n2\\n4 1'\nassert solution('5 4\\n2 -2 3 1 2\\n3 5\\n3 4\\n2 4\\n2 5\\n') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000\\n') == '0\\n0'\n\nimport math"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3\") == \"6\\n2\\n4 1\"\nassert solution(\"5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5\") == \"7\\n2\\n3 2\"\nassert solution(\"1 0\\n1000000\") == \"0\\n0\""
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1 5 4 3') == '4', \"Case #1\"\nassert solution('3 1 5 6 7 4') == '7', \"Case #2\"\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\nassert solution('7\\n1 3 5 6 7 4 2') == '7'\nassert solution('3\\n1 2 3') == '3'\nassert solution('4\\n1 2 4 3') == '4'\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 5 4 3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\nlst = []\nl = []\nfor i in range(len(a)):\n    if len(lst) == 0:\n        lst.append(a[i])\n        l.append(1)\n        continue\n    if a[i] == lst[-1]:\n        l.append(l[-1])\n    elif a[i] > lst[-1]:\n        lst.append(a[i])\n        l.append(l[-1] + 1)\n    else:\n        while a[i] < lst[-1]:\n            lst.pop()\n            l.pop()\n            if len(lst) == 0:\n                break\n        if len(lst) > 0 and a[i] > lst[-1]:\n            lst.append(a[i])\n            l.append(l[-1] + 1)\n        else:\n            lst.append(a[i])\n            l.append(l[-1])\n    \nans = max(l)\nres = []\nfor i in range(ans):\n    if len(lst) <= i:\n        break\n    if l[i] == ans:\n        res.append('L' if i == 0 else 'R')\n\nprint(ans)\nprint(''.join(res))\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\\nLRRR\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\\nLRLRLLL\"\nassert solution(\"3\\n1 2 3\") == \"3\\nLLL\"\nassert solution(\"4\\n1 2 4 3\") == \"4\\nLLRL\"\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4\\nLRRR', 'Test 1'\nassert solution('7\\n1 3 5 6 7 4 2') == '7\\nLRLRLLL', 'Test 2'\nassert solution('3\\n1 2 3') == '3\\nLLL', 'Test 3'\nassert solution('4\\n1 2 4 3') == '4\\nLLRL', 'Test 4'\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\nassert solution(\"7\\n1 3 5 6 7 4 2\") == \"7\"\nassert solution(\"3\\n1 2 3\") == \"3\"\nassert solution(\"4\\n1 2 4 3\") == \"4\"\n\n\n\"\"\"\nfrom math import ceil\nfrom typing import List, Tuple"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\nassert solution('7\\n1 3 5 6 7 4 2') == '7'\nassert solution('3\\n1 2 3') == '3'\n\"\"\"\n\nimport heapq"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(open('input.txt').read()) == open('output.txt').read()\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\n\"\"\"\n\n\"\"\"\n\u0421\u041b\u041e\u0412\u0410\u0420\u042c\n\n\u0420\u0430\u0437\u043c\u0435\u0440 \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043b\u044e\u0431\u044b\u043c, \u043c\u044b \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u043b\u0443\u0447\u0430\u0438:\n\n1. \u0421\u043b\u043e\u0432\u0430\u0440\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n2. \u0412\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\n3. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0430\u0440\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043e\u0434\u0438\u043d \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438\u043c\u0435\u0435\u0442 \u0442\u0438\u043f string, \u0430 \u0434\u0440\u0443\u0433\u043e\u0439 - int\n4. \u0412\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u043c\u0435\u044e\u0442 \u0442\u0438\u043f int\n\n\u0412\u044b\u0432\u043e\u0434:\n\u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044f\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u0421\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u043d\u0430\u0447\u0430\u043b\u0430\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u041d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044f\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\nSample Input:\n{1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6'}\n\nSample Output:\n6\n\n\"\"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 5 3 4\") == \"4\"\nassert solution(\"1 2 5 3 4\") == \"4\"\nassert solution(\"1 2 5 3 4\") == \"4\"\nassert solution(\"1 2 5 3 4\") == \"4\"\nassert solution(\"1 2 5 3 4\") == \"4\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 5 3 4') == '4'\n\"\"\"\n\nimport sys\nimport math\nimport time\nfrom collections import deque\nfrom typing import List, NamedTuple, Dict\n\n\nclass Solution:\n    def __init__(self) -> None:\n        self.cached: Dict[int, int] = {}\n        self.cached[0] = 0\n        self.cached[1] = 1\n\n    def solution(self, stdin: str) -> str:\n        nums = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n        cache: Dict[int, int] = {}\n        for i in nums:\n            if i not in cache:\n                cache[i] = self.cached[i]\n        cache[nums[-1]] = 1\n        for i in range(len(nums) - 2, -1, -1):\n            cache[nums[i]] = max(cache[nums[i]], self.cached[nums[i + 1]] + 1)\n        return cache[nums[0]]\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 5 3 4\") == \"4\"\nassert solution(\"6 5 4 3 2 4 3\") == \"2\"\n\"\"\"\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430 \u00ab\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u043e\u043b\u0430\u0442\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u00bb\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435\n\u0414\u0430\u043d \u0444\u0430\u0439\u043b \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u044c\u0438 \u0441 \u043d\u043e\u0432\u043e\u0441\u0442\u044f\u043c\u0438 (\u043a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0430\u0442\u044c\u044f \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0438 \u043a\u043e\u043d\u0446\u043e\u043c \u0441\u0442\u0430\u0442\u044c\u0438 \u0441 \u043f\u043e\u043c\u0435\u0442\u043a\u043e\u0439 \u00ab...\u00bb). \u0422\u0435\u043a\u0441\u0442 \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 (\u0441\u0438\u043c\u0432\u043e\u043b \u00ab\\n\u00bb) \u0438 \u0437\u043d\u0430\u043a\u0438 \u043f\u0443\u0441\u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430 (\u0441\u0438\u043c\u0432\u043e\u043b \u00ab\\t\u00bb) \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\n\n\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u0439\u0442\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0434\u043b\u0438\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0442\u0435\u043a\u0441\u0442\u0435, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u0438\u0434\u0430. \u0414\u0432\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043d\u0430\u0439\u0442\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0434\u043b\u0438\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0438: \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0430 \u043f\u043e\u0442\u043e\u043c \u0442\u0430\u043a\u0436\u0435 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0435\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f.\n\n\u041f\u0435\u0440\u0432\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u044d\u0442\u043e \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0432 \u0441\u043f\u0438\u0441\u043e\u043a, \u0430 \u0437\u0430\u0442\u0435\u043c \u043d\u0430\u0439\u0442\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441\u043f\u0438\u0441\u043a\u0430. \u0412\u0442\u043e\u0440\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f \u0434\u043b\u0438\u043d\u044b \u0441\u0442\u0440\u043e\u043a\u0438. \u041e\u0431\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u043f\u0435\u0440\u0432\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430, \u0430 \u0437\u0430\u0442\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0432\u0435\u0442\u043a\u0443 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438 \u043f\u043e\u0438\u0441\u043a\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b.\n\n\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 2 \u043d\u0435 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0441\u044f \u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0435\u0442\u043a\u0438 else \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438. \u0414\u043b\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0432 \u043e\u0434\u0438\u043d \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0431\u043b\u043e\u043a \u043a\u043e\u043c\u0430\u043d\u0434 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044e if.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0444\u0430\u0439\u043b \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u044c\u0438 \u0441 \u043d\u043e\u0432\u043e\u0441\u0442\u044f\u043c\u0438 (\u043a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0430\u0442\u044c\u044f \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0438 \u043a\u043e\u043d\u0446\u043e\u043c \u0441\u0442\u0430\u0442\u044c\u0438 \u0441 \u043f\u043e\u043c\u0435\u0442\u043a\u043e\u0439 \u00ab...\u00bb). \u0422\u0435\u043a\u0441\u0442 \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 (\u0441\u0438\u043c\u0432\u043e\u043b \u00ab\\n\u00bb) \u0438 \u0437\u043d\u0430\u043a\u0438 \u043f\u0443\u0441\u0442\u043e\u0433\u043e \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430 (\u0441\u0438\u043c\u0432\u043e\u043b \u00ab\\t\u00bb) \u0432 \u043a\u043e\u043d\u0446\u0435 \u0441\u0442\u0440\u043e\u043a\u0438.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u2014 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0434\u043b\u0438\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0442\u0435\u043a\u0441\u0442\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\n\u0422\u0435\u0441\u0442 1\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\nHello World\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n11\n\n\u0422\u0435\u0441\u0442 2\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\nFirst\nSecond\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n4\n\n\u0422\u0435\u0441\u0442 3\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 5 3 4') == 4\nassert solution('2\\n1 2') == 2\nassert solution('7\\n6 5 4 3 2 4 3') == 2\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 5 3 4') == 4\n\nassert solution('2\\n1 2') == 2\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n 1 2 3 4\") == \"4\"\nassert solution(\"2\\n 1 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 5 3 4') == 4\nassert solution('1 2 5 3 6 4') == 4\nassert solution('1 2 5 3 6 5 4') == 4\nassert solution('1 2 5 3 6 5 4 7') == 4\nassert solution('1 2 5 3 6 5 4 7 8') == 4\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == '4'\nassert solution('1 2 5 3 4') == '4'\nassert solution('1 2 5 3 6 4') == '4'\n\"\"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 5 3 4\") == \"4\"\nassert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"7\\n6 5 4 3 2 4 3\") == \"2\"\n\nprint(solution(\"5\\n1 2 5 3 4\")) # 4\nprint(solution(\"2\\n1 2\")) # 2\nprint(solution(\"7\\n6 5 4 3 2 4 3\")) # 2"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 2 5 3 4') == 4\nassert solution('2\\n1 2') == 2\nassert solution('7\\n6 5 4 3 2 4 3') == 2\nassert solution('5\\n1 2 5 3 4') == 4\nassert solution('5\\n1 5 2 4 3') == 3\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == '1'\nassert solution(\"5 3\\n1 2 3 3 3\") == '0'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 2 4 5\") == 1\n\"\"\"\nimport math"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 2 4 5\") == \"1\"\n\nassert solution(\"1 2 3 4 5\") == \"2\"\n\nassert solution(\"1 2 3 4 5\") == \"2\"\n\nassert solution(\"1 2 3 3 3\") == \"0\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 1 2 2 4 5\") == \"1\"\nassert solution(\"5 3 1 2 3 3\") == \"0\"\nassert solution(\"1 2 3 4 5\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3\\n1 2 2 4 5') == '1'\nassert solution('5 3\\n1 2 2 4 5') == '1'\n\"\"\""
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 2 4 5') == 1"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 2 4 5\\n3 3 3 3\") == \"2\"\nassert solution(\"1 2 2 4 5\\n3 3 3 3\") == \"0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == 1\nassert solution(\"5 3\\n1 2 3 3 3\") == 0\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3\") == \"6\"\nassert solution(\"4 3\") == \"0\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 3 4') == '4'\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3, 4, 5) == 4\nassert solution(8, 3, 4) == 4\n\"\"\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 3 4') == '4'\n\"\"\"\n\n\nfrom math import factorial\nfrom collections import Counter\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3 4\\n\") == 4\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3 4\") == \"4\"\n\"\"\"\n\nimport math\n\nn, a, b = map(int, input().split())\n\nprint(math.floor(a/(a+b)))\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3 4') == '4'\n\"\"\"\n\n\"\"\"\nYou are given two non-empty arrays A and B consisting of N integers. Arrays A and B represent N voracious fish in a river, ordered downstream along the flow of the river.\n\nThe fish are numbered from 0 to N \u2212 1. If P and Q are two fish, then fish P is initially upstream of fish Q. Initially, each fish has a unique position.\n\nFish number P is represented by A[P] and B[P]. Array A contains the sizes of the fish. All its elements are unique. Array B contains the directions of the fish. It contains only 0s and/or 1s, where:\n\n0 represents a fish flowing upstream,\n1 represents a fish flowing downstream.\nIf two fish move in opposite directions and there are no other (living) fish between them, they will eventually meet each other. Then only one fish can stay alive \u2212 the larger fish eats the smaller one. More precisely, we say that two fish P and Q meet each other when P < Q, B[P] = 1 and B[Q] = 0, and there are no living fish between them. After they meet:\n\nIf A[P] > A[Q] then P eats Q, and P will still be flowing downstream,\nIf A[Q] > A[P] then Q eats P, and Q will still be flowing upstream.\nWe assume that all the fish are flowing at the same speed. That is, fish moving in the same direction never meet. The goal is to calculate the number of fish that will stay alive.\n\nFor example, consider arrays A and B such that:\n  A[0] = 4    B[0] = 0\n  A[1] = 3    B[1] = 1\n  A[2] = 2    B[2] = 0\n  A[3] = 1    B[3] = 0\n  A[4] = 5    B[4] = 0\nInitially all the fish are alive and all except fish number 1 are moving upstream. Fish number 1 meets fish number 2 and eats it, then it meets fish number 3 and eats it too. Finally, it meets fish number 4 and is eaten by it. The remaining two fish, number 0 and 4, never meet and therefore stay alive.\n\nWrite a function:\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 2\\n') == 4\n\n-----Explanation-----\nbbrbrrrrb\nThe first four balls are all blue.\n\"\"\"\n\n\"\"\"\nInput: n, a, b\nOutput: blue balls in first n balls\n\nPrecondition: 1 <= n <= 10^18\n- 0 < a, b < 10^18\n\nTakahashi has many red balls and blue balls.\nNow, he will place them in a row.\nInitially, there is no ball placed.\nTakahashi, who is very patient, will do the following operation 10^{100} times:\n- Place A blue balls at the end of the row of balls already placed. Then, place B red balls at the end of the row.\n\nThe probability of each operation is the same, 1/2\nP(A) = P(B) = 1/2\n\nHow many blue balls will be there among the first N balls in the row of balls made this way?\nThe answer is the sum of A's and B's.\n\nInput: n, a, b\nOutput: blue balls in first n balls\n\n1. enumerate(range(n))\n2. blue[i] = a\n3. red[i] = b\n\nblue_count = 0\nfor i in range(n):\n    blue_count += a if i % 2 == 0 else b\n\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3 4') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '8 3 4'\n    ) == '4'\nassert solution(\n    '10 6 10'\n    ) == '6'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2') == '48'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n8\\n8 2 12 6 4 24 16 3\") == \"48\"\n\"\"\"\nimport math"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\"\"\"\n\n\nfrom math import sqrt, ceil\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 12 6 4 24 16 3\\n1\\n2\") == \"48\\n4\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8 12 6 4 24 16 3\\n1\\n2\") == \"48\\n4\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == '48\\n4'\nprint('OK!')\n\n---------------\n\nt=int(input())\nfor i in range(t):\n    n=int(input())\n    l=list(map(int,input().split()))\n    count=0\n    for i in range(1,n):\n        if n%i==0:\n            count+=1\n    if count>=n-2:\n        print(-1)\n    else:\n        print(n)\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\") == \"48\"\nassert solution(\"1\\n2\") == \"2\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n8\\n8 2 12 6 4 24 16 3\") == \"48\"\nprint(solution(\"3\\n9\\n7\\n12\\n24\\n16\\n48\\n3\\n16\\n5\\n8\\n7\\n1\"))"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n8 2 12 6 4 24 16 3\\n\") == '48'\n\"\"\"\nimport sys"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2\n8\n2 4 6 8 10 12 14 16 18 20\n1\n2\n''') == '48\\n4\\n'\nprint('Test passed\\n')\n\nassert solution('''3\n8\n4 9 12 16 20 24 25\n1\n2\n''') == '-1\\n'\nprint('Test passed\\n')\n\nassert solution('''3\n8\n4 9 12 16 20 24 25\n1\n2\n''') == '-1\\n'\nprint('Test passed\\n')\n\nassert solution('''5\n8\n2 4 6 8 10 12 16\n1\n2\n''') == '-1\\n'\nprint('Test passed\\n')\n\nassert solution('''5\n8\n2 4 6 8 10 12 16\n1\n2\n''') == '-1\\n'\nprint('Test passed\\n')"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5 5 5 6 6\") == \"2\\n5 6\"\n\"\"\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 4 4 2') == '3 1'\nassert solution('4 2 4 4') == '3 2'\nassert solution('6 6 6 6 6') == '1 6'\nassert solution('1 5 5 1 6 1') == '3 2'\nassert solution('5 2 4 4 2') == '2 4'\n\"\"\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 6 6 6 6') == '1'\nassert solution('1 5 5 1 6 1') == '3'\nassert solution('2 4 2 4 4') == '2'\nassert solution('5 6 6 6 6') == '1'"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 6 6 6 6\\n2 4 2 4 4\") == \"1 6\\n5 6 1\"\nassert solution(\"5\\n2 4 2 4 4\") == \"1\\n2 4\"\n\"\"\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 5 5 1 6 1\") == \"3 1 6\"\nassert solution(\"2 4 2 4 4\") == \"2 4\"\nassert solution(\"5 6 6 6 6\") == \"1 6\"\n\nassert solution(\"1 5 5 1 6 1\") == \"3 1 6\"\nassert solution(\"2 4 2 4 4\") == \"2 4\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n'6\\n1 5 5 1 6 1\\n'\n) == '3\\n5 6 1'\n\nassert solution(\n'5\\n2 4 2 4 4\\n'\n) == '2\\n2 4'\n\nassert solution(\n'5\\n6 6 6 6 6\\n'\n) == '1\\n6'\n\nassert solution(\n'5\\n6 6 6 6 6\\n'\n) == '1\\n6'\n\nassert solution(\n'5\\n6 6 6 6 6\\n'\n) == '1\\n6'"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 6 6 6 6') == '1 6'\nassert solution('2 4 2 4 4') == '2 4'\nassert solution('5 6 6 6 6') == '1 6'\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3 4\\n') == '2\\n2 3 4'\nassert solution('7\\n1 2 3 4 5 6 7\\n') == '1\\n2 3 4 5 6 7'\nassert solution('6\\n2 1 2 1 2 1\\n') == '2\\n2 1'\nassert solution('5\\n2 2 2 2 2\\n') == '1\\n2'\nassert solution('5\\n6 6 6 6 6\\n') == '1\\n6'\n\n'''"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 5 5 1 6 1\\n\") == \"3\\n5 6 1\"\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 1\nassert solution('1 2 2 3 3') == 2\nassert solution('1 1 2 3 3') == 1\nassert solution('1 1 2 2') == 1\nassert solution('1 1 2 3 4 4') == 2\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(432) == 435\nassert solution(99) == 103\nassert solution(237) == 237\nassert solution(42) == 44\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"432\") == \"435\"\n\"\"\""
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\""
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\nassert solution(\"50\") == \"50\"\n\nprint(\"Success\")\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\""
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"aa\") == \"a\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('ab') == 'a'\nassert solution('a') == 'a'\nassert solution('aa') == 'a'\nassert solution('aab') == 'ab'\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_cases[0][0]) == test_cases[0][1]\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\n\n\"\"\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin=\"abac\") == 'aac'\nassert solution(stdin=\"abc\") == 'b'\nassert solution(stdin=\"abba\") == 'aba'\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"sdfhj\") == \"dfhs\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"ab\") == \"b\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abac\") == \"aac\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"abba\") == \"aba\"\nassert solution(\"ecoosdcefr\") == \"codeforces\"\nassert solution(\"a\") == \"a\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == 'b'\nprint(solution('2'))\n\"\"\"\n\nn = int(input().strip())\nname_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'ag', 'ah', 'ai', 'aj', 'ak', 'al', 'am', 'an', 'ao', 'ap', 'aq', 'ar', 'as', 'at', 'au', 'av', 'aw', 'ax', 'ay', 'az', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'bg', 'bh', 'bi', 'bj', 'bk', 'bl', 'bm', 'bn', 'bo', 'bp', 'bq', 'br', 'bs', 'bt', 'bu', 'bv', 'bw', 'bx', 'by', 'bz', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'cg', 'ch', 'ci', 'cj', 'ck', 'cl', 'cm', 'cn', 'co', 'cp', 'cq', 'cr', 'cs', 'ct', 'cu', 'cv', 'cw', 'cx', 'cy', 'cz', 'da', 'db', 'dc', 'dd', 'de', 'df', 'dg', 'dh', 'di', 'dj', 'dk', 'dl', 'dm', 'dn', 'do', 'dp', 'dq', 'dr', 'ds', 'dt', 'du', 'dv', 'dw', 'dx', 'dy', 'dz']\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"b\"\nassert solution(\"1000000000000001\") == \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n\"\"\"\n\nN = int(stdin.readline())"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"b\"\nassert solution(\"25\") == \"z\"\n\"\"\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"b\"\nprint(solution(\"2\"))\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"b\"\nprint(solution(\"2\"))\n\"\"\""
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n') == 'a'\nassert solution('27\\n') == 'aa'\nassert solution('703\\n') == 'aaa'\n\"\"\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12') == 'b'\nassert solution('4') == 'aaaa'\n\"\"\""
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(s) == \"b\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == 'b'\n\"\"\"\n\nimport sys\nimport math\nimport re\nfrom collections import OrderedDict"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"to be or not to be\") == '12'\nassert solution(\"a ab a a b ab a a b c\") == '13'\nassert solution(\"aa bb aa aa bb bb\") == '11'\n\n\n\"\"\"\nimport math\nfrom typing import List"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\nassert solution(\"abb ab ab\") == 6\n\"\"\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"to be or not to be\") == \"TB or not TB\"\nassert solution(\"a ab a a b ab a a b c\") == \"a AAAB AAAB c\"\nassert solution(\"aa bb aa aa bb bb\") == \"AB aa AB bb\"\nassert solution(\"aa aa bb aa aa bb bb\") == \"AB aa AB bb\"\nassert solution(\"aa aa aa bb bb bb\") == \"AB aa AB bb\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"to be or not to be\") == 'TB or not TB'\nassert solution(\"a ab a a b ab a a b c\") == 'a AAAB AAAB c'\nassert solution(\"aa bb aa aa bb bb\") == 'AB aa AB bb'\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"to be or not to be\") == \"TBONTB\"\nassert solution(\"a ab a a b ab a a b c\") == \"AAABAABAABc\"\nassert solution(\"aa bb aa aa bb bb\") == \"AABBAABAAB\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\nto be or not to be\") == \"12\\n\"\nassert solution(\"10\\na ab a a b ab a a b c\") == \"13\\n\"\nassert solution(\"6\\naa bb aa aa bb bb\") == \"11\\n\""
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"to be or not to be\") == 12\nassert solution(\"a ab a a b ab a a b c\") == 13\nassert solution(\"aa bb aa aa bb bb\") == 11\nassert solution(\"aa bb aa aa bb bb\") == 11\nassert solution(\"aa bb aa aa bb bb\") == 11\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('to be or not to be') == 12\nassert solution('a ab a a b ab a a b c') == 13\nassert solution('aa bb aa aa bb bb') == 11\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"to be or not to be\") == \"TB or not TB\"\nassert solution(\"a ab a a b ab a a b c\") == \"a AAAB AAAB c\"\nassert solution(\"aa bb aa aa bb bb\") == \"AB aa AB bb\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\\n2 2\"\n\n\"\"\""
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\\n2 2\"\n\nprint('The code ran Correctly')\n\n\"\"\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\\n\") == \"1\\n5\"\nassert solution(\"4 2\\n1 2000 2000 2\\n\") == \"4000\\n2 2\"\n\nprint(\"The local tests are done. Something?\")\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2\\n') == '20'\nassert solution('5 1\\n1 1 1 1 1\\n') == '1'\nassert solution('4 2\\n1 2000 2000 2\\n') == '4000'\nassert solution('10 10\\n9 9 9 9 9 9 9 9 9 9 9\\n') == '100'\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2\\n') == '20\\n3 2 3'\nassert solution('5 1\\n1 1 1 1 1\\n') == '1\\n5'\nassert solution('4 2\\n1 2000 2000 2\\n') == '4000\\n2 2'\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\"\nassert solution(\"4 2\\n1 2000 2000 2\") == \"4000\"\n\"\"\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\\n3 2 3\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\\n5\""
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n8 3\n5 4 2 6 5 1 9 2\n''') == '20'\n\nassert solution('''\n8 3\n1 2000 2000 2\n''') == '4000'\n\nassert solution('''\n5 1\n1 1 1 1 1\n''') == '1'\n\nassert solution('''\n4 2\n1 2000 2\n''') == '4000'\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3\\n5 4 2 6 5 1 9 2\\n') == '20\\n3 2 3'\nassert solution('5 1\\n1 1 1 1 1\\n') == '1\\n5'\nassert solution('4 2\\n1 2000 2000 2\\n') == '4000\\n2 2'\n\n\"\"\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 3\\n5 4 2 6 5 1 9 2\") == \"20\"\nassert solution(\"5 1\\n1 1 1 1 1\") == \"1\"\nassert solution(\"4 2\\n1 2000 2\") == \"4000\"\n\"\"\""
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 -5 3 2') == '1'\nassert solution('5\\n4 -2 3 -9 2') == '0'\nassert solution('9\\n-1 1 -1 1 -1 1 1 -1 -1') == '6'\nassert solution('8\\n16 -5 -11 -15 10 5 4 -4') == '3'\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(100010)\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -2 3 -9 2\") == \"1\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"3\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 -5 3 2\") == \"1\"\nassert solution(\"5 -2 3 -9 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\""
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 -5 3 2\") == '1'\nassert solution(\"5 -2 3 -9 2\") == '0'\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == '6'\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == '3'\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 -2 3 -9 2') == '1'\nassert solution('5 -2 3 -9 2') == '0'\nassert solution('9 -1 1 -1 1 -1 1 1 -1 -1') == '6'\nassert solution('8 -5 -11 -15 10 5 4 -4') == '3'\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -2 3 -9 2\") == \"1\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n\"\"\"\nimport sys\nimport os\nimport time\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 -2 3 -9 2') == '0'\nassert solution('5 -2 3 -9 2') == '0'\nassert solution('9 -1 1 -1 1 -1 1 1 -1 -1') == '6'\nassert solution('8 -5 -11 -15 10 5 4 -4') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"1\"\nassert solution(\"5 -2 3 -9 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -2 3 -9 2\") == \"1\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 -2 3 -9 2\") == \"0\"\nassert solution(\"5 -2 3 -9 2\") == \"0\"\nassert solution(\"9 -1 1 -1 1 -1 1 1 -1 -1\") == \"6\"\nassert solution(\"8 -5 -11 -15 10 5 4 -4\") == \"3\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1') == '0'\nassert solution('2 2') == '1'\nassert solution('1 100') == '0'\nassert solution('1 100') == '0'\n\nassert solution('5 5') == '0'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 100\") == \"0\"\nassert solution(\"4 1\") == \"2\"\nassert solution(\"4 2\") == \"10\"\nassert solution(\"4 3\") == \"3\"\nassert solution(\"4 4\") == \"1\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == \"0\\n2\\n10\\n1000000000\\n2000000000\"\n\"\"\""
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == '0\\n2\\n10\\n1000000000\\n2000000000'\nassert solution(\"6\\n100 1\\n2 2\\n3 3\\n4 4\\n5 5\\n2 1000000000\\n1000000000 1000000000\") == '0\\n2\\n10\\n1000000000\\n2000000000'\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3\\n2 3\") == \"0\"\nassert solution(\"5 10\") == \"3\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"1 100\") == \"0\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3\") == \"0\\n2\\n1\"\nassert solution(\"1 100\") == \"0\\n2\\n1\"\nassert solution(\"2 2\") == \"0\\n0\\n0\\n0\"\nassert solution(\"5 5\") == \"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\"\nassert solution(\"1 1000000000\") == \"0\\n2\\n1\\n2\\n4\\n7\\n9\\n16\\n32\\n64\\n128\\n255\\n511\\n1024\\n2048\\n4096\\n8192\\n16384\\n32768\\n65536\\n131072\\n262144\\n524288\\n1048576\\n2097152\\n4194304\\n8388608\\n16777216\\n33554432\\n67108864\\n134217728\\n268435456\\n536870912\\n1099511627776\\n2199023255552\\n4398046511104\\n8796093022208\\n17592186044416\\n35184372088832\\n70368744177664\\n140737488355328\\n281474976710656\\n562949953421312\\n1125899906842624\\n2251799813685248\\n4503599627370496\\n9007199254740992\\n18014398509481984\\n36028797018963968\\n72057594037927936\\n144115188075855872\\n288230376151711744\\n576460752303423488\\n1152921504606846976\\n2305843009213693952\\n4611686018427387904\\n9223372036854775808\\n\"\nprint('Success')\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 100\\n1 2 3 4\") == \"4\\n1\\n2\\n3\\n4\\n\"\n\"\"\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 10\") == \"0\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"1 100\") == \"0\"\n\nassert solution(\"5 2\") == \"2\"\nassert solution(\"5 10\") == \"2\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution([\"1 100\", \"2 2\", \"5 5\", \"2 1000000000\", \"1000000000 1000000000\"]) == [0, 2, 10, 1000000000, 2000000000]\n\n\"\"\""
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 6\") == \"5\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"1 100\") == \"0\"\nassert solution(\"2 1000000000\") == \"2\"\nassert solution(\"1 1000000000\") == \"2000000000\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101') == '4'\n\"\"\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"101\") == \"4\"\nassert solution(\"101\") == \"4\"\nassert solution(\"101\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"101\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''101\n''') == '4'\n\"\"\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"101\") == '4'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"101\") == \"4\"\nprint(\"All tests passed.\")\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('101') == '4'\n\"\"\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('101') == 4\n\"\"\"\n\nK = int(stdin.readline())\ni = 1\n\nwhile True:\n    if i % K == 0:\n        print(i)\n        break\n    i += 1\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 3 1\") == \"4\"\nassert solution(\"5 5 1 2 3 4\") == \"1\"\nassert solution(\"15 8 1 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\nassert solution(\"1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"1\""
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5 4\n2 4 5 3 1\"\"\") == \"4\"\n\n\"\"\"\n20.10.2020\nGiven a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).\n\nNote: The solution set must not contain duplicate subsets.\n\nExample:\n\nInput: [1,2,2]\nOutput:\n[\n  [2],\n  [1],\n  [1,2,2],\n  [2,2],\n  [1,2],\n  []\n]\n\"\"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\nassert solution(\"5 5\\n1 2 3 4 5\") == \"1\"\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\") == \"1\"\nassert solution(\"5 4\") == \"1\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"15 8\") == \"48\"\n\"\"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 4\n2 4 5 3 1''') == '4'\nassert solution('''5 5\n1 2 3 4 5''') == '1'\nassert solution('''15 8\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9''') == '48'\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"1\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"15 8\") == \"48\"\n\"\"\"\nimport itertools"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\n\nassert solution(\"5 5\\n1 2 3 4 5\") == \"1\"\n\nassert solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\") == \"48\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 4\n2 4 5 3 1''') == '4'\nassert solution('''5 5\n1 2 3 4 5''') == '1'\nassert solution('''15 8\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9''') == '48'\n\"\"\"\n\nimport sys\nfrom math import ceil, log2\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 4\\n2 4 5 3 1') == '4'\nassert solution('5 5\\n1 2 3 4 5') == '1'\nassert solution('15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9') == '48'"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n2 4 5 3 1\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\n\"\"\"\n\n\n\nimport sys\nimport math"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n1 3 4 2 1 4 2') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n\n\"\"\""
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '-1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, m = map(int, stdin.split())\n        cups = list(map(int, stdin.split()))\n        dp = [0] * (n + 1)\n        for i in range(n):\n            dp[i + 1] = max(dp[i], cups[i] - 1)\n        for i in range(n - 1, 0, -1):\n            dp[i] = max(dp[i], dp[i + 1] + cups[i] - i)\n        return dp[1] if dp[n] >= m else '-1'\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 8\n2 3 1 1 2\n''') == '4'\nassert solution('''7 10\n5 5 5 5 5\n''') == '2'\nassert solution('''5 15\n5 5 5 5 5\n''') == '-1'\nassert solution('''5 26\n5 5 5 5 5\n''') == '-1'\nassert solution('''5 16\n5 5 5 5 5\n''') == '2'\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8\") == \"3\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 15\") == \"2\"\nassert solution(\"5 26\") == \"-1\"\nassert solution(\"5 1 2 1 3 4 2\") == \"3\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 10\\n5 5 5 5 5\\n\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == \"-1\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"5 8\\n2 3 1 1 2\"\n) == \"4\"\nassert solution(\n    \"7 10\\n1 3 4 2 1 4 2\"\n) == \"2\"\nassert solution(\n    \"5 15\\n5 5 5 5 5\"\n) == \"-1\"\nassert solution(\n    \"5 26\\n5 5 5 5 5\"\n) == \"2\"\nassert solution(\n    \"5 16\\n5 5 5 5 5\"\n) == \"1\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\\n\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\\n\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == \"-1\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8\") == \"2\"\nassert solution(\"7 10\") == \"2\"\nassert solution(\"5 15\") == \"2\"\nassert solution(\"5 26\") == \"2\"\n\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 3\") == \"2\"\nassert solution(\"1 3 2\") == \"1\"\nassert solution(\"3 1 2\") == \"1\"\nassert solution(\"4 1 3\") == \"0\"\nassert solution(\"5 1 3\") == \"1\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 21 14 10') == '3'\nassert solution('500 500') == '0'\nassert solution('1 3 6 9 12') == '1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 21 14 10\") == 3\nassert solution(\"2 500 500\") == 0\nassert solution(\"3 14 5 1\") == -1\nassert solution(\"5 1 3 6 9 12\") == 1\n\n\"\"\"\n\nfrom typing import List\nimport math\n\nclass ArithmeticSequence:\n    def __init__(self, sequence: List[int], operations: List[int]):\n        self.sequence = sequence\n        self.operations = operations\n    def compute_differences(self) -> List[int]:\n        result = []\n        for i in range(len(self.sequence)):\n            result.append(self.sequence[i + 1] - self.sequence[i])\n        return result\n    def compute_operations(self) -> List[int]:\n        result = []\n        for i in range(len(self.operations)):\n            if self.operations[i] == 0:\n                result.append(0)\n            elif self.operations[i] == 1:\n                result.append(1)\n            elif self.operations[i] == 2:\n                result.append(-1)\n        return result\n    def compute_result(self) -> int:\n        differences = self.compute_differences()\n        operations = self.compute_operations()\n        result = []\n        for i in range(len(differences)):\n            if math.fabs(differences[i]) > 1:\n                result.append(0)\n            else:\n                if operations[i] == -1:\n                    result.append(1)\n                elif operations[i] == 1:\n                    result.append(0)\n                elif operations[i] == 0:\n                    result.append(1)\n        return len(result)"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n24 21 14 10') == '3'\nassert solution('5\\n1 3 6 9 12') == '1'\nassert solution('5\\n14 5 1') == '-1'\nassert solution('2\\n500 500') == '0'\nassert solution('3\\n14 5 1') == '-1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 24 21 14 10') == '3'\nassert solution('5 500 500') == '0'\nassert solution('3 14 5 1') == '-1'\nassert solution('5 1 3 6 9 12') == '1'\n\nimport sys; input = lambda: sys.stdin.readline().rstrip(); assert sys.version_info >= (3, 0)\nfrom math import gcd\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4\n14 5 1\n''') == '3'\n\nassert solution('''5\n1 3 6 9 12\n''') == '0'\n\nassert solution('''2\n500 500\n''') == '0'\n\nassert solution('''5\n1 3 6 9 12\n''') == '-1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n24 21 14 10') == '3'\nassert solution('5\\n500 500') == '0'\nassert solution('5\\n1 3 6 9 12') == '-1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n24 21 14 10\\n\") == '3'\nassert solution(\"2\\n500 500\\n\") == '0'\nassert solution(\"3\\n14 5 1\\n\") == '-1'\nassert solution(\"5\\n1 3 6 9 12\\n\") == '1'\n\n\n    \n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(solution(str(input())))\n\"\"\"\nimport itertools\nimport operator\nfrom typing import List\n\nimport pytest\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"24 21 14 10\") == 3\n\"\"\"\nimport sys\nfrom collections import deque\nfrom itertools import islice\nfrom typing import List, NamedTuple, Deque, Iterator, Dict, Set\n\nimport pytest\n\n\nclass ArithmeticProgressions(NamedTuple):\n    arr: List[int]\n    to_change: List[int]\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\") == \"5\"\nassert solution(\"6 1\\n36 4 1 25 9 16\") == \"2\"\nassert solution(\"4 4\\n1 10 100 1000\") == \"4\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 10 100 1000\") == \"4\"\nassert solution(\"6 1\\n36 4 1 25 9 16\") == \"2\""
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n1 2 15 15 15') == '5'\nassert solution('6 1\\n36 4 1 25 9 16') == '2'\nassert solution('4 4\\n1 10 100 1000') == '4'"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n1 2 15 15 15\\n') == '5\\n'\nassert solution('4 4\\n1 10 100 1000\\n') == '4\\n'\nassert solution('5 4\\n1 10 100 1000\\n') == '4\\n'\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 10 100 1000\") == \"4\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n\n======="
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\\n\") == \"5\\n\"\n\"\"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 2 15 15 15\\n\") == \"5\"\nassert solution(\"6 1\\n36 4 1 25 9 16\\n\") == \"2\"\nassert solution(\"4 4\\n1 10 100 1000\\n\") == \"4\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 10 100 1000\") == \"4\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 10 3 6\\n8 10 3 6\") == '8'\n\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 10 7\\n8 10 3 6') == '8'\nassert solution('1 1 1\\n1') == '1'\nassert solution('3 3 5\\n4 4 4\\n4') == '5'\nassert solution('1 1 1\\n1') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == '8'\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\nfrom math import ceil\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 10 7\\n8 10 3 6\\n') == '8'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\\n\") == \"8\"\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 10 7\\n8 10 3 6\\n') == '8'\nprint('Test Successful')\n\n\"\"\"\n\nn, k, m = [int(x) for x in stdin.split()]\na = [int(x) for x in stdin.split()]\n\nA = [0] + a\n\ndp = [float('inf') for x in range(k+1)]\ndp[0] = 0\n\nfor i in range(1, k+1):\n    for j in range(1, n+1):\n        if i - A[j] >= 0:\n            dp[i] = min(dp[i], dp[i-A[j]] + 1)"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == 8\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 10 7\\n8 10 3 6\") == \"8\"\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n\n\"\"\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n\n\"\"\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\\n\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\\n\"\nassert solution(\"2 3 3\\n1\\n1\\n1\") == \"No\\nNo\\nNo\\n\"\nassert solution(\"2 2 2\\n1\\n2\") == \"No\\nNo\\nNo\\n\"\nassert solution(\"2 2 2\\n2\\n1\") == \"No\\nNo\\nNo\\n\"\nassert solution(\"2 2 2\\n1\\n2\\n2\") == \"No\\nNo\\nNo\\n\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''6 3 4\n3\n1\n3\n2''') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n\nassert solution('''4 3 4\n1\n3\n2\n3''') == 'No\\nNo\\nYes\\nNo'\n\nassert solution('''5 2 4\n1\n2\n3\n4\n5''') == 'No\\nNo\\nNo\\nYes\\nNo'\n\nassert solution('''6 3 4\n1\n1\n1\n1\n2\n3''') == 'No\\nYes\\nYes\\nNo\\nNo\\nNo'\n\nassert solution('''4 3 4\n1\n2\n2\n2''') == 'No\\nYes\\nYes\\nNo'\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo\\n'\nassert solution('4 3 4\\n2\\n3\\n1\\n') == 'No\\nNo\\nNo\\nNo\\nYes\\n'\nassert solution('6 3 4\\n3\\n3\\n3\\n2\\n1\\n') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\n'\nassert solution('6 3 4\\n4\\n4\\n1\\n') == 'No\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\n'\n\n\"\"\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 2\\n3\\n1\\n3\\n2\") == \"No\\nNo\\nYes\\nNo\\nNo\"\n\"\"\"\n\nimport sys\n\nN, K, Q = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == \"No\\nNo\\nYes\\nNo\\nNo\"\n\n-----\n\n\"\"\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 4\\n3\\n1\\n3\\n2\") == \"No\\nNo\\nYes\\nNo\\nNo\\nNo\"\n\"\"\"\n\nn, k, q = map(int, input().split())\nscores = [k] * n\nfor _ in range(q):\n    scores[int(input())-1] -= 1\nfor i in range(n):\n    if scores[i] <= 0:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == \"YES\\n010\\n0000\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n0 0 0\\n1 0 1\\n1 1 0\\n\") == \"YES\\n010\\n0000\"\nassert solution(\"2 2\\n1 1\\n0 1\\n\") == \"NO\\n\"\nassert solution(\"4 4\\n1 1 1 1\\n0 1 1 1\\n0 0 1 1\\n1 1 1 1\\n\") == \"NO\\n1011\\n1110\"\nassert solution(\"2 2\\n1 1\\n0 1\\n\") == \"YES\\n10\\n101\"\n\n\"\"\""
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'NO'\nassert solution('2 2\\n1 1') == 'YES\\n00'\nassert solution('3 4\\n0 0 0 1') == 'YES\\n010\\n0000'\n\nassert solution('3 3\\n0 0 0\\n1 0 1\\n1 1 0') == 'NO\\n010\\n0000'\nassert solution('3 3\\n0 0 0\\n1 0 0\\n1 1 0') == 'YES\\n010\\n00'\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2\\n1 1\\n0 1') == 'YES\\n010\\n101'\nassert solution('3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1') == 'YES\\n010\\n0000'\nassert solution('3 3\\n0 0 0\\n1 0 1\\n1 1 0') == 'NO'"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n1 1 0 1 1\\n0 1 0 1 1\\n0 1 0 1 1\\n0 1 0 1 1\") == \"YES\\n010\\n0000\\n\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == 'YES\\n00\\n10'\nassert solution(\"3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1\") == 'YES\\n010\\n0000'\n\"\"\""
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\nassert solution(\"3 4\\n0 0 0\\n1 0 1\\n1 1 1\\n\") == \"YES\\n010\\n0000\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\nn, m = [int(x) for x in sys.stdin.readline().split()]\n\nmatrix = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 1\\n0 1\") == \"YES\\n00\\n10\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n1 1\\n0 1') == 'YES\\n00\\n10'\nassert solution('3 4\\n0 0 0\\n1 0 1\\n1 1 0\\n') == 'YES\\n010\\n0000'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n1 1\\n0 1') == 'YES\\n010'\nassert solution('3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1') == 'YES\\n010\\n0000'\nassert solution('3 4\\n0 0 0 1\\n0 0 0 0\\n1 1 1 1') == 'YES\\n010\\n0011'\nassert solution('3 3\\n0 0 0\\n1 0 1\\n1 1 0') == 'NO'\nassert solution('1 1\\n0 1') == 'NO'\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"373\") == \"Yes\"\nassert solution(\"121\") == \"No\"\nassert solution(\"436\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('373') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"673\") == \"Yes\"\nassert solution(\"0\") == \"No\"\nassert solution(\"121\") == \"No\"\n\nprint(solution(\"121\"))\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"121312\") == \"Yes\"\nassert solution(\"14641\") == \"No\"\nassert solution(\"55555\") == \"Yes\"\n\nprint(solution(\"121312\"))\nprint(solution(\"14641\"))\nprint(solution(\"55555\"))\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('373') == 'Yes'\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('121') == 'Yes'\nassert solution('123') == 'Yes'\nassert solution('4532') == 'No'\nassert solution('0123') == 'Yes'\nassert solution('0') == 'Yes'\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"436\") == \"Yes\"\nassert solution(\"123344\") == \"No\"\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12\") == \"Yes\"\nassert solution(\"34\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('314') == 'Yes'\nassert solution('1314') == 'Yes'\nassert solution('11234') == 'No'\nassert solution('223450') == 'Yes'\nassert solution('12') == 'No'\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('253') == 'Yes'\nassert solution('121') == 'No'\nassert solution('436') == 'Yes'\n\"\"\""
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 1\\n0 1 0 1\\n\") == \"3\"\nassert solution(\"3 2 1\\n1 0 0 1\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n\n\"\"\""
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == '5'\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == '3'\nassert solution(\"2 2 1\\n1 0\") == '1'\n\"\"\"\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\ns.insert(0, 0)\n\ntotal = n\nb = b\na = a\nans = 0\nfor i in range(1, n + 1):\n    if s[i] == 0:\n        ans += 1\n        if a > 0:\n            a -= 1\n        else:\n            b -= 1\n    else:\n        ans += 1\n        if b > 0:\n            b -= 1\n        else:\n            a -= 1\n    if b == 0 and a == 0:\n        break\n\nprint(ans)\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == '5'\nassert solution('6 2 1\\n1 0 0 1 0 1') == '3'\n\"\"\""
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 1\\n0 1 0 1 0') == 5\n\"\"\"\n\nn, b, a = [int(x) for x in stdin.split()]\ns = [int(x) for x in stdin.split('\\n')[1].split(' ')]\nb, a, res = b, a, 0\n\nfor i in range(len(s)):\n    if s[i] == 1:\n        res += 1\n    else:\n        res += 1\n        b += 1\n        a += 1\n    if b > 0 and a > 0:\n        a -= 1\n        b -= 1\n        res += 1\n\nprint(res)\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == 5\n\"\"\"\n\n\nn, b, a = [int(s) for s in stdin.split()]\ns = [int(s) for s in stdin.split()]"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\") == \"3\"\n\"\"\"\n\nimport sys\nimport os\nfrom math import inf\n\nimport pytest\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 1\\n0 1 0 1 0\\n\") == \"5\"\nassert solution(\"6 2 1\\n1 0 0 1 0 1\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2 1\\n1 0 0 1 0 1\") == 3\n\"\"\""
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\n\nassert solution('2+2') == '-46'\n\nassert solution('112-37') == '375'\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == 4\nassert solution('2+2') == -46\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\ns = sys.stdin.readline()"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\n\"\"\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\""
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\n\"\"\""
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"-\"46\nassert solution(\"112-37\") == \"375\"\nassert solution(\"5-3-4-2-1\") == \"0\"\n\nprint(\"Test passed\")\n\"\"\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2+2\") == \"-46\"\nassert solution(\"112-37\") == \"375\"\nprint(\"You are good to go!\")"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8-7+6-5+4-3+2-1-0\") == \"4\"\nassert solution(\"2+2\") == \"46\"\nassert solution(\"112-37\") == \"375\"\n\n---\n\nThe problem seems to be slightly related to finding a shortest path in the graph of the arithmetic expression. One can build the graph of the expression, and then use the Graph problem (if you want to read about it, just skip this problem) to solve it. If the graph is connected, then there will be only one way to evaluate the expression (i.e. the shortest path).\n\nAs you can see, there is a mistake in the solution. It seems that the variable can be any value - even negative. This makes the problem a bit more complicated. The program should check if the expression is valid, and if it is, return the result.\n\n\n-----Test Data-----\n\nYou can check the correct implementation of your program on the following test data.\n\nThe first test case: the expression is valid and the answer is 24.\n\nThe second test case: the expression is invalid. The result should be an empty string.\n\nThe third test case: the expression is invalid. The result should be an empty string.\n\nThe fourth test case: the expression is invalid. The result should be an empty string.\n\nThe fifth test case: the expression is invalid. The result should be an empty string.\n\nThe sixth test case: the expression is invalid. The result should be an empty string.\n\nThe seventh test case: the expression is invalid. The result should be an empty string.\n\nThe eighth test case: the expression is invalid. The result should be an empty string.\n\nThe ninth test case: the expression is invalid. The result should be an empty string.\n\nThe tenth test case: the expression is invalid. The result should be an empty string.\n\nThe eleventh test case: the expression is invalid. The result should be an empty string.\n\nThe twelfth test case: the expression is invalid. The result should be an empty string.\n\nThe thirteenth test case: the expression is invalid. The result should be an empty string.\n\nThe fourteenth test case: the expression is invalid. The result should be an empty string.\n\nThe fifteenth test case: the expression is invalid. The result should be an empty string.\n\nThe sixteenth test case: the expression is invalid. The result should be an empty string.\n\nThe seventeenth test case: the expression is invalid. The result should be an empty string.\n\nThe eighteenth test case: the expression is invalid. The result should be an empty string.\n\nThe nineteenth test case: the expression is invalid. The result should be an empty string.\n\nThe twentieth test case: the expression is invalid. The result should be an empty string.\n\nThe twenty-first test case: the expression is invalid. The result should be an empty string.\n\nThe twenty-second test case: the expression is invalid. The result should be an empty string.\n\nThe twenty-third test case: the expression is invalid. The result should be an empty string.\n\nThe twenty-fourth test case: the expression is invalid. The result should be an empty string.\n\nThe twenty-fifth test case: the expression is invalid. The result should be an empty string.\n\nThe twenty-sixth test case: the expression is invalid. The result should be an empty string.\n\nThe twenty-seventh test case: the expression is invalid. The result should be an empty string.\n\nThe twenty-eighth test case: the expression is invalid. The result should be an empty string.\n\nThe twenty-ninth test case: the expression is invalid. The result should be an empty string.\n\nThe thirtieth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-first test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-second test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-third test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-fourth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-fifth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-sixth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-seventh test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-eighth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-ninth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-tenth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-eleventh test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-twelfth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-thirteenth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-fourteenth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-fifteenth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-sixteenth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-seventeenth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-eighteenth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-nineteenth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-twentieth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-twenty-first test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-twenty-second test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-twenty-third test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-twenty-fourth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-twenty-fifth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-twenty-sixth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-twenty-seventh test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-twenty-eighth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-twenty-ninth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-thirtieth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-thirty-first test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-thirty-second test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-thirty-third test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-thirty-fourth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-thirty-fifth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-thirty-sixth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-thirty-seventh test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-thirty-eighth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-thirty-ninth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-thirty-tenth test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-thirty-eleventh test case: the expression is invalid. The result should be an empty string.\n\nThe thirty-thirty"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\n\n\"\"\""
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\n\"\"\"\n\nn, k = list(map(int, input().split()))\nm = k\nfor i in range(n):\n    m = min(m, int(input()))\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"13 4\") == \"NO\"\nassert solution(\"4 3\") == \"YES\"\nassert solution(\"4 3\") == \"YES\""
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"YES\"\nassert solution(\"4 1\") == \"YES\"\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"10 5\") == \"NO\"\nassert solution(\"13 4\") == \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1 2\\n2 3\\n3 2\\n1"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n\") == \"YES\\n3 1\\n1 3\\n3 2\\n2 3\\n\"\nassert solution(\"10 4\\n\") == \"YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n\"\nassert solution(\"13 4\\n\") == \"NO\\n\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected_output\n\nprint(solution(stdin))\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 3\n\n''') == 'YES'\nassert solution('''10 4\n\n''') == 'YES'\nassert solution('''13 4\n\n''') == 'NO'\nassert solution('''4 2\n\n''') == 'YES'\nassert solution('''10 2\n\n''') == 'NO'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'NO'\nassert solution('4 3') == 'YES'\nassert solution('4 4') == 'NO'\nassert solution('10 4') == 'YES'\nassert solution('13 4') == 'YES'\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == 18\n\nfrom dataclasses import dataclass\nfrom enum import Enum\nfrom itertools import permutations\nfrom typing import List, Optional\nfrom uuid import UUID, uuid4\n\nfrom pydantic import BaseModel, Field\n\nMAX_ROWS = 10\nMAX_COLUMNS = 10\n\n\nclass Action(str, Enum):\n    UP = \"UP\"\n    DOWN = \"DOWN\"\n    LEFT = \"LEFT\"\n    RIGHT = \"RIGHT\"\n    NONE = \"NONE\"\n\n\nclass State(BaseModel):\n    tiles: List[List[str]] = Field(..., max_items=MAX_ROWS, min_items=0)\n    player_position: List[int] = Field(..., max_items=MAX_COLUMNS, min_items=0)\n    previous_states: List[UUID] = Field(default_factory=list)\n\n    def __eq__(self, other: \"State\") -> bool:\n        return self.player_position == other.player_position\n\n    def __hash__(self) -> int:\n        return hash((tuple(self.player_position), tuple(tuple(row) for row in self.tiles)))\n\n\nclass ActionSchema(BaseModel):\n    action: Action\n    current_state_uuid: Optional[UUID]\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 1\\n1 1 2 2 1\") == \"6\"\nassert solution(\"3 2 1\\n1 2 2\") == \"2\"\nassert solution(\"3 2 1\\n1 1 1\") == \"3\"\nassert solution(\"3 1 1\\n100 100 100\") == \"100\"\nassert solution(\"3 2 1\\n1 2 1\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\\n\") == \"18\"\n\n-------TEST-------\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1 2\\n1 2 3') == '6'\nassert solution('6 5 3\\n1 2 3 4 5 6') == '18'\nassert solution('4 1 2\\n1 1 1') == '1'\nassert solution('4 1 3\\n1 2 3') == '-1'\nassert solution('4 1 5\\n1 2 5') == '5'\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 2 3\n5 1 3 10 1''') == '18'\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"-1\"\nassert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\n\"\"\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 100 1 1') == '100'\n\"\"\"\n\nn, k, x = map(int, input().split())\narr = list(map(int, input().split()))\n\narr.sort()\n\na = arr[:k]\nb = arr[k:]\n\na = a[::-1]\nb = b[::-1]\n\nans = 0\n\nfor i in range(x):\n    if i < k:\n        ans += a[i]\n    else:\n        ans += b[i-k]\n\nprint(ans)\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"10\"\nassert solution(\"1 2 3 4 5\") == \"15\"\nassert solution(\"1 2 3 4 5 6\") == \"21\"\nassert solution(\"1 2 3 4 5 6 7\") == \"28\"\nassert solution(\"1 2 3 4 5 6 7 8\") == \"39\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1 3 10 1\") == \"18\"\n\"\"\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 3\\n5 1 3 10 1') == '18'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '-1'\nassert solution('4 3 1\\n1 100 1 1') == '100'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"111111111\") == 17\nassert solution(\"111111110\") == 16\nassert solution(\"111111101\") == 17\nassert solution(\"11111111\") == 24\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"01100\") == 3\nassert solution(\"101010\") == 1\nassert solution(\"10111110\") == 6\nassert solution(\"10000\") == 4\nassert solution(\"011110\") == 1\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0110111\") == \"21\"\n\nassert solution(\"1100111\") == \"3\"\n\nassert solution(\"10111010\") == \"3\"\n\nassert solution(\"01101110\") == \"6\"\n\nassert solution(\"10111010\") == \"15\""
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"1111111111\") == 5\nassert solution(\"10101010\") == 8\nassert solution(\"11001100\") == 6\nassert solution(\"10011110\") == 10\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('00100') == 3\nassert solution('11110') == 4\nassert solution('11010') == 5\nassert solution('11110') == 4\nassert solution('11010') == 5\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('111000') == 4\nassert solution('11011011111') == 6\nassert solution('111011111101') == 6\n\"\"\""
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10001\") == \"1\"\nassert solution(\"11111\") == \"2\"\nassert solution(\"10110\") == \"3\"\nassert solution(\"01110\") == \"4\"\nassert solution(\"111110\") == \"5\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"11110\") == 5\nassert solution(\"01010\") == 5\nassert solution(\"10101010\") == 20\nassert solution(\"111111010\") == 21\n\nSolution:\n-----\n\nn, k = [int(x) for x in stdin.split()]\nl = [int(x) for x in stdin.split()[1]]\n\nres = 0\ni = 0\nwhile i < n:\n    if l[i] == 0:\n        i = max(i, i - k + 1)\n    elif i + k - 1 < n:\n        res += k\n        i = min(i + k, n)\n    else:\n        res += 1\n        i += 1\nprint(res)\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"00100\") == 3\nassert solution(\"10110\") == 2\nassert solution(\"1011110111010\") == 8\nassert solution(\"1011110111010\") == 8\nassert solution(\"1011110111010\") == 8\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('00100') == 3\nassert solution('01110') == 2\nassert solution('10010') == 3\nassert solution('111110') == 5\nassert solution('11100010') == 2\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"azzel\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\nassert solution('aaaa') == 'No'\nassert solution('ab') == 'No'\nassert solution('abacaba') == 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"azze\") == \"No\"\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'No'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"azzel\") == \"Yes\"\n\"\"\"\n\nfrom math import log, ceil\nfrom collections import Counter\nfrom typing import Union, Tuple, List, Set, FrozenSet\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"abab\") == \"No\"\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\nassert solution('kitten') == 'No'\nassert solution('ababa') == 'Yes'\nassert solution('abab') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('azzel') == 'Yes'\nassert solution('apple') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('azzel') == 'apple'\nassert solution('apple') == 'azzel'\nassert solution('zzzzz') == 'zzzzz'\nassert solution('z') == 'z'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"azzel\") == \"Yes\"\nassert solution(\"apple\") == \"Yes\"\nassert solution(\"aa\") == \"No\"\nassert solution(\"aab\") == \"Yes\"\nassert solution(\"aabb\") == \"No\"\n\"\"\"\n\nimport sys\n\nsys.stdin = open('input.txt')\n\ns = input()\nt = input()"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\") == \"YES\"\nassert solution(\"2 1 2\") == \"YES\"\nassert solution(\"3 1 3\") == \"NO\"\nassert solution(\"3 2 3\") == \"YES\"\nassert solution(\"2 1 2 1\") == \"YES\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 100 200 300 300\") == \"14\", \"Too much money\"\nassert solution(\"3 100 300 300\") == \"3\", \"Not enough money\"\nassert solution(\"2 100 200 200\") == \"0\", \"Empty list\"\n\"\"\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 15\") == \"15\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"10 10\") == \"10\"\nassert solution(\"100 100\") == \"100\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 2 5 1\") == \"8\"\nassert solution(\"10 2 5 4 6\") == \"9\"\nassert solution(\"4 3 4 1\") == \"6\"\nassert solution(\"1 10 2 2\") == \"8\"\nassert solution(\"1 1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 50 10 20 100 50 30 100 20\") == \"250\"\nassert solution(\"100 50 30 100 20\") == \"150\"\nassert solution
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 1 2 2 3 2 3 4\") == \"5\"\nassert solution(\"4 2 2 4 2\") == \"6\"\nassert solution(\"4 2 2 4 2\") == \"8\"\nassert solution(\"4 2 2 4 2\") == \"8\"\nassert solution(\"4 2 2 4 2\") == \"8\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1\n2\n2\n3\n4\n5\n4\n3\n2\n1\n5\n3\n2\n''') == '15'\nassert solution('''1\n3\n1\n3\n1\n5\n6\n2\n3\n3\n2\n5\n5\n1\n2\n1\n4\n3\n3\n''') == '8'\nassert solution('''1\n3\n1\n4\n1\n5\n6\n2\n3\n3\n2\n5\n5\n1\n2\n1\n4\n3\n3\n''') == '12'\n\nprint(solution(open('test.txt', 'r').read()))\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 5 4\") == \"9\"\nassert solution(\"6 5 3\") == \"4\"\nassert solution(\"6 5 3 2\") == \"6\"\nassert solution(\"6 5 3 2 1\") == \"5\"\nassert solution(\"6 5 4\") == \"4\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 10\") == \"4\"\nassert solution(\"3 3 10\") == \"10\"\nassert solution(\"2 3 10\") == \"10\"\nassert solution(\"2 4 100\") == \"100\"\nassert solution(\"3 3 10\") == \"10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 5\\n3 2 4\") == \"5 4\"\nassert solution(\"1 3 5\\n3 2 4\\n5 1 1\") == \"4 4\"\nassert solution(\"1 3 5\\n3 2 4\\n5 1 1\\n1 1 2\") == \"6 3\"\n\"\"\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 700\\n3 500\\n5 800') == '3'\n\"\"\"\n\nimport sys\n\nfrom collections import Counter"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 700\\n3 500\\n5 800') == '3'\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 300\\n3 300\\n4 300\") == \"3\"\nassert solution(\"5 300\\n4 300\\n3 300\\n2 300\") == \"4\"\nassert solution(\"1 300\\n2 300\\n3 300\\n4 300\") == \"0\"\n\"\"\"\n\nimport os\nimport sys\nimport unittest\n\n\nclass Test_Approach(unittest.TestCase):\n\n    def test_solution(self):\n        pass\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\nassert solution(\"1 100\\n1 1\") == \"0\"\nassert solution(\"1 10\\n1 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 700\") == \"3\"\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 700\\n3 500\\n5 800') == '3'\nassert solution('2 400\\n3 200\\n5 400') == '1'\nassert solution('2 300\\n3 200\\n5 400') == '0'\n\"\"\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == \"3\"\nassert solution(\"4 1000\\n3 200\\n5 400\\n3 300\\n7 400\") == \"4\"\n\"\"\"\n\n\"\"\"\nCreated on Fri Mar  5 22:35:51 2021\n\n@author: antonio\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 700\\n3 500\\n5 800\") == 3\n\"\"\"\nimport sys\n\n\"\"\"\nThis solution is based on this post:\nhttps://leetcode.com/problems/minimum-number-of-operations-to-reach-target-score/discuss/1013266/Python-or-Thinking-Process-or-DFS\n\"\"\"\n\nclass DFS:\n    def __init__(self):\n        self.G = 0\n        self.ans = None\n        self.curr_score = 0\n        self.perfect_bonus = 0\n        self.visited = set()\n    \n    def dfs(self, target, curr_score, perfect_bonus):\n        if self.ans:\n            return\n        \n        if curr_score >= target:\n            self.ans = self.perfect_bonus + curr_score - target\n            return\n        \n        if curr_score + perfect_bonus >= target:\n            self.ans = 1\n            return\n        \n        for i, score in enumerate(self.p):\n            if self.curr_score + score not in self.visited:\n                self.visited.add(self.curr_score + score)\n                self.dfs(target, self.curr_score + score, self.perfect_bonus + (i+1) * 100)"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 700\\n3 500\\n5 800') == '3'\n\"\"\""
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8 4 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9 2 3 4 2 2 3 2 2 4\") == \"3\"\n\"\"\"\nimport sys\nfrom typing import List\n\nfrom icontract import require, ensure, DBC\n\n\nclass UnweightedAdjacencyList(DBC):\n    def __init__(self) -> None:\n        self.adjacency: List[List[int]] = []\n\n    def connect(self, first_node: int, second_node: int) -> None:\n        require(first_node >= 0)\n        require(second_node >= 0)\n\n        if first_node > len(self.adjacency) - 1:\n            self.adjacency.extend([[] for _ in range(first_node - len(self.adjacency) + 1)])\n\n        self.adjacency[first_node].append(second_node)\n\n    def disconnect(self, first_node: int, second_node: int) -> None:\n        require(first_node >= 0)\n        require(second_node >= 0)\n\n        try:\n            self.adjacency[first_node].remove(second_node)\n        except ValueError:\n            pass\n\n    def query(self, first_node: int) -> List[int]:\n        require(first_node >= 0)\n\n        if first_node >= len(self.adjacency):\n            return []\n\n        return self.adjacency[first_node]\n\n\n@ensure(lambda result, answer: len(result) == len(answer))\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"7\\n5 5 4 5 5 5 6\\n\") == '2'\nassert solution(\n\"8\\n4 8 8 7 8 4 4 5\\n\") == '2'\nassert solution(\n\"9\\n2 3 4 2 2 3 2 2 4\\n\") == '3'\n\"\"\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\""
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6') == '2'\nassert solution('8\\n4 8 8 7 8 4 4 5') == '2'\nassert solution('9\\n2 3 4 2 2 3 2 2 4') == '3'\n\n\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n5\\n4\\n4\\n3\\n3\\n2\\n2\\n1') == '2'\nassert solution('7\\n5\\n4\\n5\\n5\\n6') == '2'\nassert solution('8\\n4\\n8\\n8\\n7\\n7\\n7\\n7\\n5') == '3'\n\"\"\""
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6') == '2'\nassert solution('8\\n4 8 8 7 8 4 4 5') == '2'\nassert solution('9\\n2 3 4 2 2 3 2 2 4') == '3'\n\"\"\"\n\nfrom math import ceil, log2\nfrom typing import Dict, List, Tuple, Union, Any\n\nclass Node:\n    def __init__(self, value: int, weight: int):\n        self.value = value\n        self.weight = weight\n        self.children: Dict[int, Node] = {}\n        self.children_count = 0\n    \n    def __repr__(self):\n        return f'<Node(value={self.value}, weight={self.weight}, children_count={self.children_count})>'\n\nclass Tanya:\n    def __init__(self, max_weight: int, values: List[int]):\n        self.max_weight = max_weight\n        self.values = values\n\n        self.nodes: Dict[int, Node] = {}\n        self.tree: List[Node] = []\n    \n    def build_tree(self, current_weight: int, parent: Union[None, Node] = None, first: bool = True) -> None:\n        if len(self.values) == 0:\n            return\n        \n        current_value, current_weight = self.values.pop(0)\n        current_node = Node(value=current_value, weight=current_weight)\n        self.nodes[current_value] = current_node\n        \n        if parent is not None:\n            parent.children[current_value] = current_node\n            parent.children_count += 1\n        \n        if current_weight <= self.max_weight:\n            self.tree.append(current_node)\n        \n        if current_weight < self.max_weight and len(self.values) > 0:\n            self.build_tree(current_weight + current_value, parent=current_node, first=False)\n        else:\n            if len(self.values) > 0:\n                self.build_tree(current_weight, parent=current_node, first=False)\n        \n    def find_good_candies(self) -> int:\n        self.build_tree(0)\n        \n        good_candies = 0\n        \n        for node in self.tree:\n            odd_sum = 0\n            even_sum = 0\n            \n            for child in node.children.values():\n                child_sum = child.children_count * child.weight\n                odd_sum += child_sum % 2\n                even_sum += child_sum\n            \n            if even_sum % 2 == 0:\n                good_candies += 1\n        \n        return good_candies"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n5 5 4 5 5 5 6') == '2'\nassert solution('8\\n4 8 8 7 8 4 4 5') == '2'\nassert solution('9\\n2 3 4 2 2 3 2 2 4') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5 4 5 5 6\") == 2\nassert solution(\"8 8 7 8 8 4 4 5\") == 2\nassert solution(\"9 2 3 4 2 2 3 2 2 4\") == 3\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n5 5 4 5 5 5 6\") == \"2\"\nassert solution(\"8\\n4 8 8 7 8 4 4 5\") == \"2\"\nassert solution(\"9\\n2 3 4 2 2 3 2 2 4\") == \"3\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1 3 10 1\\n5 1 3 10 1\") == \"18\"\nassert solution(\"4 1 5\\n10 30 30 70 10 10\") == \"-1\""
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 1 3 10 1') == '18'\nassert solution('6 1 5') == '-1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 1 3 10 1') == '18'\n\"\"\"\n\nn, k, x = map(int, input().split(' '))\n\nl = list(map(int, input().split(' ')))\n\nw = [0] * n\n\nfor i in range(1, n):\n    w[i] = max(w[i-1], l[i-1])\n\ns = 0\nm = 0\n\nfor i in range(n):\n    if i+k < n:\n        s = s + l[i]\n        m = max(m, s)\n    else:\n        s = s - w[i] + l[i]\n        m = max(m, s)"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2 2\\n1 10 20\\n3 3 2\\n100 100 100\\n1 1 1\\n') == '180', 'wrong answer'\nassert solution('6 4 2\\n1 1 2 3 1 2\\n2 2 2 2 2 2') == '11', 'wrong answer'\nassert solution('5 1 5\\n10 10 10 10 10 10\\n') == '-1', 'wrong answer'\nassert solution('4 3 4\\n1 1 1 1\\n2 2 2 2\\n3 3 3 3') == '-1', 'wrong answer'\nassert solution('3 1 3\\n1 1 1\\n2 2 2') == '-1', 'wrong answer'\nprint('Test passed')"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 1 2\\n10 30 30 10 10\") == \"100\"\nprint('The code ran Correctly')"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 3\\n1 100 1 1\\n\") == \"100\"\n\"\"\"\n\nn, k, x = [int(n) for n in input().split()]\nb = [int(n) for n in input().split()]"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 3\\n5 1 3 10 1\") == \"18\"\nassert solution(\"6 1 5\\n10 30 30 70 10 10\") == \"-1\"\nassert solution(\"4 3 1\\n1 100 1 1\") == \"100\"\n\n\"\"\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 2 3\n5 1 3 10 1''') == '18'\nassert solution('''6 1 5\n10 30 30 70 10 10''') == '-1'\nassert solution('''4 3 1\n1 100 1 1''') == '100'\nassert solution('''4 3 1\n10 30 30 10 10''') == '-1'\nassert solution('''4 2 3\n1 100 1 1''') == '100'\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"5 1 3\n5 1 3 10 1\"\"\") == \"18\"\nassert solution(\"\"\"4 3 1\n1 100 1 1\"\"\") == \"100\"\nassert solution(\"\"\"5 2 3\n5 1 3 10 1\"\"\") == -1\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == \"No\"\nassert solution('5') == \"No\"\nassert solution('11') == \"Yes\"\n'''\n\nimport math\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11\") == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11\\n') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\u201811\\n\u2019) == \u2018Yes\u2019\n\"\"\"\n\nimport itertools\n\nN = int(stdin.readline())\ncakes = 4\ndoughnuts = 7\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11\") == \"Yes\"\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == 'No'\nassert solution('11') == 'Yes'\nassert solution('12') == 'Yes'\nassert solution('13') == 'Yes'\nassert solution('14') == 'Yes'\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(11) == 'Yes'\nassert solution(10) == 'No'\nassert solution(0) == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n') == 'No'\nassert solution('3\\n') == 'Yes'\nassert solution('6\\n') == 'Yes'\nassert solution('7\\n') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11') == 'Yes'\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '11'\n) == 'Yes'\nassert solution(\n    '16'\n) == 'Yes'\nassert solution(\n    '32'\n) == 'Yes'\nassert solution(\n    '46'\n) == 'Yes'\nassert solution(\n    '72'\n) == 'No'\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == '2 2 6'\n\"\"\"\n\n\nfrom __future__ import annotations\nfrom itertools import accumulate\nimport itertools\nimport re\nfrom collections import deque"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\nassert solution(\"4\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\n\"\"\"\n\n\nimport sys\nfrom typing import List\nfrom math import sqrt\n\n\nclass Solution:\n    def __init__(self, stdin: str):\n        self.coordinates = []\n        self.heights = []\n        for line in stdin.split(\"\\n\")[1:]:\n            tokens = line.split()\n            if tokens[0] == \":\":\n                break\n            self.coordinates.append((int(tokens[0]), int(tokens[1])))\n            self.heights.append(int(tokens[2]))\n        self.coordinates = list(set(self.coordinates))\n        self.heights = list(set(self.heights))\n        self.coordinates.sort()\n        self.heights.sort()\n\n    def get_dist(self, x1, y1, x2, y2) -> int:\n        return sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\n    def find_center(self) -> List[int]:\n        X = 0\n        Y = 0\n        H = 0\n        for i in range(len(self.coordinates)):\n            for j in range(len(self.heights)):\n                h = self.heights[j]\n                x = self.coordinates[i][0]\n                y = self.coordinates[i][1]\n                if h == 0:\n                    continue\n                if self.get_dist(x, y, X, Y) < h:\n                    X = x\n                    Y = y\n                    H = h\n        return [X, Y, H]\n\n    def run(self) -> str:\n        return \" \".join(map(str, self.find_center()))\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5') == '2 2 6'\n\n\"\"\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\n\n\"\"\"\nIn Ancient Kingdom of Snuke, there was a pyramid to strengthen the authority of Takahashi, the president of AtCoder Inc.\n\nThe pyramid had center coordinates (C_X, C_Y) and height H. The altitude of coordinates (X, Y) is max(H - |X - C_X| - |Y - C_Y|, 0).  \nAoki, an explorer, conducted a survey to identify the center coordinates and height of this pyramid. As a result, he obtained the following information:  \n - C_X, C_Y was integers between 0 and 100 (inclusive), and H was an integer not less than 1.  \n - Additionally, he obtained N pieces of information. The i-th of them is: \"the altitude of point (x_i, y_i) is h_i.\"  \nThis was enough to identify the center coordinates and the height of the pyramid. Find these values with the clues above.  \n\n-----Constraints-----\n - N is an integer between 1 and 100 (inclusive).\n - x_i and y_i are integers between 0 and 100 (inclusive).\n - h_i is an integer between 0 and 10^9 (inclusive).\n - The N coordinates (x_1, y_1), (x_2, y_2), (x_3, y_3),..., (x_N, y_N) are all different.\n - The center coordinates and the height of the pyramid can be uniquely identified.\n\n-----Input-----\nInput is given from Standard Input in the following format:  \nN\nx_1 y_1 h_1\nx_2 y_2 h_2\nx_3 y_3 h_3\n:\nx_N y_N h_N\n\n-----Output-----\nPrint values C_X, C_Y and H representing the center coordinates and the height of the pyramid in one line, with spaces in between.  \n\n-----Sample Input-----\n4\n2 3 5\n2 1 5\n1 2 5\n3 2 5\n\n-----Sample Output-----\n2 2 6\n\nIn this case, the center coordinates and the height can be identified as (2, 2) and 6.\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\nfrom typing import List\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_leaf = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def add_word(self, word: str) -> None:\n        current_node = self.root\n        for character in word:\n            if character not in current_node.children:\n                current_node.children[character] = TrieNode()\n            current_node = current_node.children[character]\n        current_node.is_leaf = True\n\n    def print_words_with_prefix(self, prefix: str) -> None:\n        current_node = self.root\n        for character in prefix:\n            if character not in current_node.children:\n                return\n            current_node = current_node.children[character]\n        self._print_words_recursive(current_node, prefix)\n\n    def _print_words_recursive(self, current_node: TrieNode, prefix: str) -> None:\n        if current_node.is_leaf:\n            print(prefix)\n        for child in current_node.children.values():\n            self._print_words_recursive(child, prefix + child.char)\n\nclass Point:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        N = int(stdin.split(\"\\n\")[0])\n        points: List[Point] = []\n        trie: Trie = Trie()\n\n        for _ in range(N):\n            x, y, h = tuple(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n            points.append(Point(x, y))\n            trie.add_word(str(h))\n\n        for point in points:\n            trie.print_words_with_prefix(str(point.x) + str(point.y))\n        return \"\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n\") == \"2 2 6\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\") == \"2 2 6\"\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"redcoder\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('redcoder') == 1\nassert solution('hello') == 0\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"redcoder\") == 1\nassert solution(\"palindrome\") == 0\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"redcoder\") == 1\nassert solution(\"abcde\") == 1\nassert solution(\"abcdd\") == 2\nassert solution(\"abcdc\") == 2\nassert solution(\"abcdcda\") == 3\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"racecar\") == 1\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abcbcd') == '5'\nassert solution('aabb') == '1'\n\"\"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"redcoder\") == 1\nassert solution(\"abcde\") == 1\n\"\"\""
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"redcoder\") == 1\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == 'Yes'\nassert solution('11') == 'No'\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"Yes\"\n\"\"\"\n\n\"\"\"\nPROBLEM 1\n\nGiven a string, find all the 10-letter-long sequences (substrings) that occur more than once in a given string.\n\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\n') == 'Yes'\nassert solution('5\\n') == 'No'\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10') == 'Yes'\nassert solution('6') == 'No'\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10') == 'Yes'\nassert solution('12') == 'No'\n\"\"\"\n\n\"\"\"\nYou can also read the input using the following code:\nn = int(stdin.readline())\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\n') == 'Yes'\nassert solution('11\\n') == 'No'\nassert solution('13\\n') == 'Yes'\nassert solution('27\\n') == 'No'\nassert solution('27\\n') == 'Yes'\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == 'Yes'\nassert solution('7') == 'Yes'\nassert solution('10') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"Yes\"\nassert solution(\"10\") == \"No\"\nassert solution(\"4\") == \"No\"\nassert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n6\") == \"Yes\"\nassert solution(\"3\\n8\") == \"Yes\"\nassert solution(\"4\\n9\") == \"Yes\"\nassert solution(\"10\\n8\") == \"No\"\nassert solution(\"8\\n7\") == \"Yes\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == 'Yes'\nassert solution('5') == 'Yes'\nassert solution('7') == 'No'\nassert solution('11') == 'No'\nassert solution('9') == 'Yes'\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\narr = list(map(int, sys.stdin.readline().rstrip().split()))"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4 9 7 5') == '5'\nprint(solution('4 4 9 7 5'))\n\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4 9 7 5\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4 9 7 5\\n') == '5'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\"\n\nfrom typing import List\nfrom functools import reduce\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4 9 7 5\") == 5\n\"\"\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('4 4 9 7 5') == '5'\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n4 4 9 7 5') == '5\\n'\nassert solution('1\\n4 5') == '5\\n'\nassert solution('10\\n3 4 6 2 5 8 7 9') == '6\\n'\nassert solution('6\\n3 4 5 7 6 4') == '1\\n'\n\"\"\""
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4 9 7 5\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5\\n\") == \"10\\n\"\nassert solution(\"2 6\\n\") == \"-1\\n\"\nassert solution(\"5 3\\n\") == \"-1\\n\"\n\"\"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5') == '10'\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5') == '10'\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 5') == '10'\nassert solution('1 9') == '-1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1,1) == 1\nassert solution(1,2) == 2\nassert solution(1,3) == 4\nassert solution(1,4) == 6\nassert solution(1,5) == 10\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 5') == '10'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n\ninput()\na, b = map(int, input().split())\n\ntry:\n    print(a * b)\nexcept:\n    print(-1)\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 5''') == '10'\n'''\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n\"\"\"\n\nn_m = input().split()\nn, m = int(n_m[0]), int(n_m[1])\n\ncoordinates = input().split()\ncoordinates = list(map(int, coordinates))\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n\"\"\"\n\n\"\"\"\nNeed to learn how to use collections.Counter()\n\nclass Solution:\n    def minMoves(self, N, X: List[int]) -> int:\n        \n        counter = collections.Counter(X)\n        \n        return sum([counter[x] * (counter[x] - 1) // 2 for x in counter])\n\"\"\"\n\n\n\nclass Solution:\n    def minMoves(self, N, X: List[int]) -> int:\n        # X.sort()\n        \n        # moves = 0\n        # for i in range(N):\n        #     moves += i - X[i]\n        # return moves\n        \n        X.sort()\n        moves = 0\n        for i in range(N):\n            moves += X[i] - i\n        return moves\n\n\nimport collections\n\nclass Solution1:\n    def minMoves(self, N, X: List[int]) -> int:\n        counter = collections.Counter(X)\n        moves = 0\n        for x in counter:\n            moves += x * (counter[x] - 1) // 2\n        return moves\n\n\n\nclass Solution2:\n    def minMoves(self, N, X: List[int]) -> int:\n        \n        count = collections.Counter(X)\n        \n        return sum([count[x] * (count[x] - 1) // 2 for x in count])"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 1 2 3\\n') == '2'\n\n---\n### Q3. [Math](https://codeforces.com/problemset/problem/903/A)\n\n- Dividing a number into factors is a classical problem. The smallest factor is the number itself, the second smallest factor is the number itself minus 1 and so on.\n- For example, the numbers 12 and 6 have the factors 2 and 3, so they are divisible by 2 and 3.\n- It is easy to see that 12 and 7 are not divisible by any smaller number than 7.\n- In other words, no number is divisible by a number greater than its square root.\n- The number 12 is the smallest number that is divisible by all numbers between 1 and its square root, which is 6.\n- As for numbers greater than or equal to 12, we can simply test whether they are divisible by any number between 4 and the square root of 12.\n- However, we don't have to test every single number from 4 to the square root, since the smallest number divisible by a number greater than the square root is necessarily greater than or equal to the square root.\n- For example, the smallest number divisible by 12 is 12, which is already tested in the previous case.\n- The next smallest number divisible by 12 is 24, which is greater than the square root of 12.\n- Similarly, for numbers greater than or equal to 24, we can simply test whether they are divisible by any number between 4 and the square root of 24.\n- The smallest number divisible by a number greater than or equal to 24 is 36, which is greater than the square root of 24.\n- However, we don't have to test every single number from 4 to the square root of 24, since the smallest number divisible by a number greater than the square root is necessarily greater than or equal to the square root.\n- For example, the smallest number divisible by 36 is 48, which is greater than the square root of 36.\n- Similarly, for numbers greater than or equal to 48, we can simply test whether they are divisible by any number between 4 and the square root of 48.\n- The smallest number divisible by a number greater than or equal to 48 is 72, which is greater than the square root of 48.\n- Similarly, for numbers greater than or equal to 72, we can simply test whether they are divisible by any number between 4 and the square root of 72.\n- The smallest number divisible by a number greater than or equal to 72 is 100, which is greater than the square root of 72.\n- Clearly, we only need to test the numbers from 4 to the square root of the largest number that is divisible by any number greater than or equal to 36.\n- To determine the largest number, we can use the formula \n  \n    2^a * 3^b * 5^c * 7^d * 11^e * 13^f * 17^g * 19^h * 23^i * 29^j * 31^k * 37^l * 41^m * 43^n * 47^o * 53^p * 59^q * 61^r * 67^s * 71^t * 73^u * 79^v * 83^w * 89^x * 97^y * 101^z\n\n- The number of digits in this expression is the sum of digits of all the factors of the largest number.\n- Therefore, we can determine the largest number by counting the number of digits of all numbers between 4 and the square root of the largest number.\n\n> **TASK** Find the number of digits in the largest number of the expression described above.\n\n![](https://i.imgur.com/kWVLkS2.png)\n\n>  **EXAMPLE** For the expression 2^a * 3^b * 5^c * 7^d * 11^e * 13^f * 17^g * 19^h * 23^i * 29^j * 31^k * 37^l * 41^m * 43^n * 47^o * 53^p * 59^q * 61^r * 67^s * 71^t * 73^u * 79^v * 83^w * 89^x * 97^y * 101^z\n> ![](https://i.imgur.com/2RJ8LDE.png)\n> ![](https://i.imgur.com/akkN2cE.png)\n> ![](https://i.imgur.com/af6j0mP.png)\n> ![](https://i.imgur.com/9R63cQE.png)\n> ![](https://i.imgur.com/8fX9yfU.png)\n> ![](https://i.imgur.com/nhk9s0U.png)\n> ![](https://i.imgur.com/QH0oibE.png)\n> ![](https://i.imgur.com/dHZBxZW.png)\n> ![](https://i.imgur.com/o0fH6YU.png)\n> ![](https://i.imgur.com/1Cvlw5n.png)\n> ![](https://i.imgur.com/x5KLjM3.png)\n> ![](https://i.imgur.com/j4D5mXS.png)\n> ![](https://i.imgur.com/C6n2LJU.png)\n> ![](https://i.imgur.com/hJIRKFL.png)\n> ![](https://i.imgur.com/lDfEShS.png)\n> ![](https://i.imgur.com/SL7JyRo.png)\n> ![](https://i.imgur.com/yOw7KdH.png)\n> ![](https://i.imgur.com/w9nsIqO.png)\n> ![](https://i.imgur.com/UuDEoXV.png)\n> ![](https://i.imgur.com/DVp8j0R.png)\n> ![](https://i.imgur.com/DV8WjJ9.png)\n> ![](https://i.imgur.com/iCeyoQk.png)\n> ![](https://i.imgur.com/A8NtTbg.png)\n> ![](https://i.imgur.com/zJt1m2L.png)\n> ![](https://i.imgur.com/nRvjxn4.png)\n> ![](https://i.imgur.com/TocNkag.png)\n> ![](https://i.imgur.com/Kqq5K8Q.png)\n> ![](https://i.imgur.com/W7fvh7X.png)\n\n---\n### Q4. [Arrays](https://codeforces.com/problemset/problem/935/B)\n\nGiven the integer array `A` of length `N`, consider the following `"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 5\\n10 12 1 2 14') == '5'"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n10 12 1 2 14\") == \"5\"\nassert solution(\"2 5\\n1 1 1 1 1\") == \"0\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"2\\n1110\\n1011\"\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1\\n101001\\n111010\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"2\\n111100\\n110110\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"1\\n101001\\n111010\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3 2\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\"\nassert solution(\"5 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == \"1\"\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == \"2\"\n\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\\n1011\"\n\nprint(solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\"))\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == \"2\\n1110\\n1011\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n\") == '1\\n101001'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == '2\\n1110\\n1011'\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == '1\\n101001\\n'\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == '2\\n111100\\n110110'\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\") == '2\\n1110\\n1011'\n\nassert solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\") == '1\\n101001\\n'\n\nassert solution(\"5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\") == '2\\n111100\\n110110'\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n') == '2\\n1110\\n1011\\n'\n\nassert solution('5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n') == '2\\n111100\\n110110\\n'"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    4 4 3\n    1 2\n    2 3\n    1 4\n    4 3\n    \"\"\"\n    ) == \"2\"\nassert solution(\n    \"\"\"\n    4 6 3\n    1 2\n    2 3\n    1 4\n    4 3\n    2 4\n    1 3\n    \"\"\"\n    ) == \"1\"\nassert solution(\n    \"\"\"\n    5 6 2\n    1 2\n    1 3\n    2 4\n    2 5\n    3 4\n    3 5\n    \"\"\"\n    ) == \"2\"\nassert solution(\n    \"\"\"\n    5 6 1\n    1 2\n    1 3\n    2 4\n    2 5\n    3 4\n    3 5\n    \"\"\"\n    ) == \"1\"\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3') == '101001'\nassert solution('5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5') == '111100'\nassert solution('4 4 3\\n1 2\\n2 3\\n1 4\\n4 3') == '101001'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n2 1 1 2 5''') == 'YES'\nassert solution('''3\n4 5 3''') == 'YES'\nassert solution('''2\n10 10''') == 'YES'\nassert solution('''3\n1 2 3''') == 'NO'\n\n\n\n-----\nInput\n5\n2 1 1 2 5\n\nOutput\nYES\n\n\n-----\nInput\n3\n4 5 3\n\nOutput\nYES\n\n-----\nInput\n2\n10 10\n\nOutput\nYES\n\n\n-----\nInput\n3\n1 2 3\n\nOutput\nNO\n\n-----\nInput\n3\n1 2 3\n\nOutput\nNO\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 1 2 5\") == \"YES\"\nassert solution(\"3 1 1 2 3\") == \"YES\"\nassert solution(\"2 10 10\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 1 2 5\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"2\\n10 10\") == \"YES\"\nassert solution(\"3\\n1 2 3\") == \"NO\"\nassert solution(\"4\\n5 5 3\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1 1 2 5') == 'YES'\nassert solution('3 4 2 6') == 'NO'\nassert solution('1 2 3') == 'YES'\nassert solution('10 10') == 'YES'\nassert solution('1 2 3 4 5') == 'NO'\n\nprint(solution(input()))\n\n-----Problem-----\n\nAva's family is building the Great Vova Wall (named by Vova himself). Vova's parents, grandparents, grand-grandparents contributed to it. Now it's totally up to Vova to put the finishing touches.\n\nThe current state of the wall can be respresented by a sequence $a$ of $n$ integers, with $a_i$ being the height of the $i$-th part of the wall.\n\nVova can only use $2 \\times 1$ bricks to put in the wall (he has infinite supply of them, however).\n\nVova can put bricks horizontally on the neighboring parts of the wall of equal height. It means that if for some $i$ the current height of part $i$ is the same as for part $i + 1$, then Vova can put a brick there and thus increase both heights by 1. Obviously, Vova can't put bricks in such a way that its parts turn out to be off the borders (to the left of part $1$ of the wall or to the right of part $n$ of it).\n\nThe next paragraph is specific to the version 1 of the problem.\n\nVova can also put bricks vertically. That means increasing height of any part of the wall by 2.\n\nVova is a perfectionist, so he considers the wall completed when:\n\n  all parts of the wall has the same height;  the wall has no empty spaces inside it. \n\nCan Vova complete the wall using any amount of bricks (possibly zero)?\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of parts in the wall.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the initial heights of the parts of the wall.\n\n\n-----Output-----\n\nPrint \"YES\" if Vova can complete the wall using any amount of bricks (possibly zero).\n\nPrint \"NO\" otherwise.\n\n\n-----Examples-----\nInput\n5\n2 1 1 2 5\n\nOutput\nYES\n\nInput\n3\n4 5 3\n\nOutput\nYES\n\nInput\n2\n10 10\n\nOutput\nYES\n\nInput\n3\n1 2 3\n\nOutput\nNO\n\nInput\n4\n10 9 3 6\n\nOutput\nNO\n\nInput\n5\n1 1 1 1 1\n\nOutput\nNO\n\n\n-----Note-----\n\nIn the first example Vova can put a brick on parts 2 and 3 to make the wall $[2, 2, 2, 2, 5]$ and then put 3 bricks on parts 1 and 2 and 3 bricks on parts 3 and 4 to make it $[5, 5, 5, 5, 5]$.\n\nIn the second example Vova can put a brick vertically on part 3 to make the wall $[4, 5, 5]$, then horizontally on parts 2 and 3 to make it $[4, 6, 6]$ and then vertically on part 1 to make it $[6, 6, 6]$.\n\nIn the third example the wall is already complete."
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n1 2 3') == 'YES'\nassert solution('2\\n10 10') == 'YES'\nassert solution('3\\n1 2 3') == 'NO'\nassert solution('3\\n1 2 4') == 'NO'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 1 1 2 5\") == \"YES\"\nassert solution(\"3 4 5\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1 1 2 5\\n') == 'YES'\nassert solution('3 5 4\\n') == 'YES'\nassert solution('3 5 3\\n') == 'NO'\nassert solution('3 5 2\\n') == 'NO'\nassert solution('3 5 1\\n') == 'NO'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n2 1 1 2 5\\n3\") == \"YES\"\nassert solution(\"3\\n4 5 3\\n\") == \"YES\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\n\"\"\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nprint(solution(\"1000 6\\n-100 -200 -300 125 77 -4\"))\nprint(solution(\"1000000000000 5\\n-1 0 0 0 0\"))\nprint(solution(\"10 4\\n-3 -6 5 4\"))"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == \"9\"\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == \"4999999999996\"\n\"\"\"\n\nfrom sys import stdin\n\nH, n = map(int, stdin.readline().split())\nD = [int(d) for d in stdin.readline().split()]\n\nhp = H\ni = 0\nwhile hp > 0:\n    if hp <= 0:\n        break\n    hp += D[i]\n    i += 1\n    if i == n:\n        i = 0"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"1000 6\",\n\"-100 -200 -300 125 77 -4\") == \"9\"\n\nassert solution(\n\"1000000000000 5\",\n\"-1 0 0 0 0\") == \"4999999999996\"\n\"\"\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\nassert solution('1000000000000 5\\n-1 0 0 0 0') == '4999999999996'\n\"\"\""
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 4\\n-3 -6 5 4') == '-1'\n\"\"\"\nimport sys"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000 6\\n-100 -200 -300 125 77 -4') == '9'\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 6\\n-100 -200 -300 125 77 -4\") == '9'\nassert solution(\"1000000000000 5\\n-1 0 0 0 0\") == '4999999999996'\n\"\"\"\n\nfrom math import log10\nH, N = [int(x) for x in input().split(' ')]\nrounds = [int(x) for x in input().split(' ')]"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('BBAABBBA') == 'BB'\n\"\"\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BA\") == \"BA\"\nassert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(    \"ABACABA\"\n    ) == \"AB\"\nassert solution(    \"ZZZAA\"\n    ) == \"ZZ\"\n\n\"\"\""
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ZZZAA\") == \"ZZ\"\nassert solution(\"ABACABA\") == \"AB\"\nassert solution(\"AZ\") == \"AZ\"\n\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABCBA') == 'AB'\nassert solution('ZZZAA') == 'ZZ'\n\"\"\""
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BBAABBBA\") == \"BB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\nassert solution(\"AABBBBBA\") == \"AB\"\nassert solution(\"BAABBBBA\") == \"AB\"\nassert solution(\"AAABBBBA\") == \"AB\"\n\"\"\""
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\n\"\"\"\nfrom collections import defaultdict\nimport sys"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\""
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('AA') == 'A'\nassert solution('ABBA') == 'AB'\nassert solution('AZZ') == 'Z'\nassert solution('AZAB') == 'AZ'\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABACABA') == 'AB'\n\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('codeforces') == 'es'\nassert solution('yes') == 'es'\nassert solution('b') == 'a'\n\nassert solution('codeforces') == 'es'\nassert solution('yes') == 'es'\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"where\") == \"here\"\nassert solution(\"a\") == \"\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('codeforces') == 'es'\nassert solution('yes') == 'es'\nassert solution('b') == 'a'\nassert solution('ab') == 1\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"test\") == \"2\"\nassert solution(\"west\") == \"2\"\nassert solution(\"codeforces\") == \"9\"\nassert solution(\"yes\") == \"7\"\nassert solution(\"b\") == \"1\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"test\") == \"est\"\nassert solution(\"where\") == \"here\"\nassert solution(\"ab\") == 1\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(codeforces) == 'es'\nassert solution(test) == 'est'\nassert solution(yes) == 'es'\n\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"where\") == \"here\"\nassert solution(\"a\") == \"\"\nassert solution(\"codeforces\") == \"es\"\nassert solution(\"yes\") == \"es\"\nassert solution(\"b\") == \"a\"\n\n\"\"\""
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('test') == 'est'\nassert solution('west') == 'est'\nassert solution('codeforces') == 'codeforces'\nassert solution('yes') == 'es'\nassert solution('b') == 'b'\n\n\"\"\"\n\ns = input()\nt = input()\n\ndp = [[0] * (len(t)+1) for _ in range(len(s)+1)]\n\nfor i in range(1, len(s)+1):\n    for j in range(1, len(t)+1):\n        if s[i-1] == t[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(dp[-1][-1])"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"ces\"\nassert solution(\"test\") == \"est\"\nassert solution(\"yes\") == \"yes\"\n\"\"\"\n\ns = input()\nt = input()\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"test\") == \"2\"\nassert solution(\"west\") == \"2\"\nassert solution(\"codeforces\") == \"8\"\nassert solution(\"yes\") == \"1\"\nassert solution(\"b\") == \"1\"\n\n\"\"\"\nimport sys\n\nfrom typing import List\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\n---\nIf x_i is the current position, then the next position is obtained by the following formula:\ny = x + d\nwhere d is some integer.\n\n---\nIf the city is located at the rightmost point on the number line, then the next city will be the city located at the leftmost point.\n\n---\nIf the city is located at the leftmost point on the number line, then the next city will be the city located at the rightmost point.\n\n---\nIf the city is located at the middle point on the number line, then the next city will be the city located at the leftmost point or at the rightmost point, depending on whether the current city is located at the leftmost point or the rightmost point."
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n1 7 11') == '2'\nassert solution('4 3\\n1 1 2 2') == '0'\nassert solution('5 3\\n3 1 4 1 5') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 3\n1 7 11\n''') == '2'\nprint(\"PASSED\")\n\n-----Explanation-----\nLet's set D to a positive value to visit all the cities.\nAfter that, perform Move 1 twice.\nNow, you are at coordinates 3 and 7.\nThe coordinates of the cities are 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300''')\nassert solution('''3 3\n1 7 11\n''') == '2'\nprint(\"PASSED\")\n\nassert solution('''3 3\n1 7 2\n''') == '1'\nprint(\"PASSED\")\n\nassert solution('''3 3\n1 7 11\n''') == '2'\nprint(\"PASSED\")\n\nassert solution('''3 3\n1 7 11\n''') == '2'\nprint(\"PASSED\")\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3 3\n1 7 11\n\"\"\") == \"2\"\n\n\"\"\"\n3. The Fibonacci numbers are the numbers in the following integer sequence (Fn):\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,...\nsuch as\nF(n) = F(n-1) + F(n-2) with F(0) = 0 and F(1) = 1.\nGiven a number, say prod (for product), we search two Fibonacci numbers F(n) and F(n+1) verifying\nF(n) * F(n+1) = prod.\nYour function productFib takes an integer (prod) and returns an array:\n[F(n), F(n+1), true] or {F(n), F(n+1), 1} or (F(n), F(n+1), True)\ndepending on the language if F(n) * F(n+1) = prod.\nIf you don't find two consecutive F(m) verifying F(m) * F(m+1) = prodyou will return\n[F(m), F(m+1), false] or {F(n), F(n+1), 0} or (F(n), F(n+1), False)\nF(m) being the smallest one such as F(m) * F(m+1) > prod.\nSome Examples of Return:\nproductFib(714) # should return [21, 34, true], \n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\n\"\"\""
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n\"\"\"\n\nfrom typing import List\n\nfrom shared.helper import get_input"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 7 11\\n\") == \"2\"\n\"\"\"\n\nfrom math import inf\n\nN, X = list(map(int, input().split()))\ndist = list(map(int, input().split()))\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 7 11\") == \"2\"\nassert solution(\"3 5\\n1 2 3 4 5\") == \"4\"\n\"\"\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\nassert solution(\"mam\") == \"No\"\nassert solution(\"mom\") == \"No\"\nassert solution(\"m\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('akasaka') == 'Yes'\nassert solution('akasaka') == 'Yes'\nassert solution('akasaka') == 'Yes'"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aba\") == \"Yes\"\nassert solution(\"aab\") == \"Yes\"\nassert solution(\"aab\") == \"Yes\"\nassert solution(\"abab\") == \"No\"\n\nassert solution(\"aba\") == \"Yes\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\nassert solution(\"abbba\") == \"Yes\"\nassert solution(\"abbaaa\") == \"No\"\nassert solution(\"abbbaa\") == \"Yes\"\nassert solution(\"aabbba\") == \"No\"\n\nimport re\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\nassert solution(\"koko\") == \"No\"\n\"\"\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"akasaka\") == \"Yes\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('akasaka') == 'Yes'\nassert solution('ababa') == 'No'\nassert solution('madam') == 'Yes'\nassert solution('madman') == 'No'\nassert solution('kkkk') == 'Yes'\n\n\"\"\"\n\nimport re\nimport sys\n\npattern = re.compile(r\"^[a-z]+$\")\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('akasaka') == 'Yes'\nassert solution('asdffgsdfg') == 'No'\nassert solution('aaa') == 'Yes'\nassert solution('aaa') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"akasaka\") == 'Yes'\nassert solution(\"asasasa\") == 'Yes'\nassert solution(\"asasa\") == 'No'\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aba') == 'Yes'\nassert solution('azaza') == 'Yes'\nassert solution('a') == 'Yes'\nassert solution('aa') == 'Yes'\nassert solution('ab') == 'No'\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"\n\na, b = map(float, input().split())\nprint(int(a * b))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n--------\n\n\n>>>\n\nWe have 198 \\times 1.10 = 217.8. After truncating the fractional part, we have the answer: 217.\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom collections import deque\nfrom typing import List, Deque\n\nimport math\nimport re\n\nREGEX_INTEGER = r\"(?P<value>\\d+)\"\nREGEX_DECIMAL = r\"(?P<decimal>\\d+\\.\\d+)\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"\n\nfrom typing import List, Tuple\nfrom decimal import Decimal\n\nA, B = map(Decimal, input().split())\n\nprint(int(round(A * B, 0)))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('198 1.10') == '217'\n\n\"\"\"\n\na, b = input().split()\n\na = int(a)\nb = float(b)\n\nprint(int(a * b))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('198 1.10') == '217'\n\"\"\"\n\nimport unittest\nimport math"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"198 1.10\") == \"217\"\n\"\"\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n1\\n2\\n3\\n2000000000\\n763243547\\n') == '3\\n0\\n0\\n1\\n999999999\\n381621773'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n7\") == \"3\"\nassert solution(\"2\\n6\") == \"1\"\nassert solution(\"3\\n5\") == \"0\"\nassert solution(\"4\\n3\") == \"1\"\nassert solution(\"5\\n2\") == \"0\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2000000000\") == \"999999999\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n2000000000\\n763243547\") == \"3\\n0\\n0\\n1\\n999999999\\n381621773\"\n\"\"\"\n\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1\\n1\\n2\") == 2\nassert solution(\"7\\n2000000000\\n763243547\") == 1\nassert solution(\"3\\n3\\n2\") == 0\nassert solution(\"1\\n999999999\") == 999999999\nassert solution(\"2\\n6\\n4\\n3\") == 0\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n6\") == '0'\nassert solution(\"2\\n1\") == '0'\nassert solution(\"7\\n1\") == '1'\nassert solution(\"1\\n2\") == '0'\nassert solution(\"1\\n3\") == '0'\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\") == \"3\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2000000000\") == \"999999999\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2\") == \"2\"\nassert solution(\"7\\n3\") == \"0\"\nassert solution(\"1\\n2\") == \"1\"\nassert solution(\"4\\n2\") == \"0\"\nassert solution(\"4\\n2\") == \"0\""
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3\") == '0'\nassert solution(\"2\\n4\") == '0'\nassert solution(\"7\\n3\") == '1'\nassert solution(\"2000000000\\n763243547\") == '999999999'\n\"\"\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7') == '3'\nassert solution('1') == '0'\nassert solution('2') == '0'\nassert solution('3') == '1'\nassert solution('2000000000') == '999999999'\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1') == '3'\nassert solution('5 4 5\\n1 2\\n2 3\\n3 4\\n4 1') == '1'\nassert solution('1 2\\n1 3') == '0'"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == '3'\n\"\"\"\n\nimport sys\nimport io"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n2 3\") == \"0\"\nassert solution(\"1 2\\n2 5\") == \"2\"\nassert solution(\"1 2\\n2 5\\n3 4\\n4 1\\n5 6\") == \"1\"\nassert solution(\"4 4\\n1 2\\n3 4\\n4 1\") == \"0\"\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 1\\n5 6\") == \"0\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1') == '3'\n\nassert solution('5 4 5\\n1 2\\n2 3\\n3 4\\n4 1') == '1'\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1') == '3'\nassert solution('5 4 5\\n1 2\\n2 3\\n3 4\\n4 1') == '1'\nassert solution('5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n1 5') == '0'\nassert solution('5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1') == '2'\n\n\"\"\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n\") == \"1\"\nassert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\\n\") == \"3\""
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\") == \"3\"\nassert solution(\"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\") == \"1\"\nassert solution(\"5 5 5\\n1 2\\n2 3\\n3 4\\n4 1\\n5 4\") == \"0\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 2 4 1\") == 4\nassert solution(\"6\\n1 1 1 4 4 4\") == 5\n\"\"\"\nimport collections\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n3 2 4 1') == '4'\nassert solution('6\\n1 1 1 4 4 4') == '5'\n\n\"\"\"\n\n\nfrom math import gcd\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 4 1\") == \"4\"\nassert solution(\"6 1 1 4 4 4\") == \"5\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1 1 4 4 4\") == \"5\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 4 1\") == \"4\"\nassert solution(\"6 1 1 4 4 4\") == \"5\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\n\"\"\""
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3 2 4 1') == '4'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('8\\n8 8 8 8 8 8 8') == '1'"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 4 1\") == 4\nassert solution(\"1 1 1 4 4 4\") == 5\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 4 1\") == \"4\"\nassert solution(\"1 1 1 4 4 4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 2 4 1\") == \"4\"\nassert solution(\"6\\n1 1 1 4 4 4\") == \"5\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 3\n1 32\n2 63\n1 12''') == '000001000002\\n000002000001\\n000001000001'\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\"\n\n\"\"\""
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\n1 32\\n2 63\\n1 12') == '000001000002\\n000002000001\\n000001000001'\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 5\\n2 8') == '000002000001\\n000001000002\\n000001000001'\n\"\"\"\n\nimport sys\n\nfrom typing import List\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n1 32\\n2 63') == '000001000002\\n000002000001'\nprint('Test passed.')"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\nassert solution(\"5 9\\n1 4\\n1 6\\n2 7\\n2 8\\n3 9\\n3 10\\n3 11\\n4 12\\n5 1\") == \"001000100011\\n01101101011\\n10111111011\\n10111111011\\n11001110111\\n11011110111\"\nassert solution(\"1 1\\n1 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\") == \"000001000002\\n000002000001\"\n\"\"\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3\\n1 32\\n2 63\\n1 12\") == \"000001000002\\n000002000001\\n000001000001\"\n\"\"\"\nimport unittest\n\nclass TestDay06(unittest.TestCase):\n    def test_solution(self):\n        from src.atcoder.chapter1.solution import solution\n        test_case = \"2 3\\n1 32\\n2 63\\n1 12\"\n        self.assertEqual(solution(test_case), \"000001000002\\n000002000001\\n000001000001\")"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 10 8 40\") == \"2\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 10 8 40\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 10 8 40\\n\") == \"2\"\n\"\"\"\n\nfrom collections import Counter\nimport math\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 10 8 40\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 10 8 40\\n\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 10 8 40\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n4\n2 10 8 40\n''') == 2\n\"\"\""
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 10 8 40\\n\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 10 8 40\\n\") == 2\n\"\"\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 10 8 40') == '2'\n\"\"\"\nimport sys\n\nDEBUG = False"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('?(___*___):-___>__.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^.^."
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"?(_-_/___*__):-___>__. \") == \"0010\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__. \") == \"false\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______. \") == \"0250341\"\n\n\"\"\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"?(____/___+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\") == \"0250341\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__.\") == \"0010\"\nassert solution(\"?(____/___-___):-__>__,_____<__.\") == \"false\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"?(_-_/___*__):-___>__.\\n\") == \"0010\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__.\\n\") == \"false\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n\") == \"0250341\"\n\"\"\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''?(_-_/___*__):-___>__.\n''') == '0010'\n\nassert solution('''?(__-_+_/_____):-__>__,_____<__.\n''') == 'false'\n\nassert solution('''?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\n''') == '0250341'\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"?(_-)_)\") == \"1110\"\nassert solution(\"?(+__+_/____):-__<_,__<__\") == \"false\"\nassert solution(\"?(____+____+____)_-__<__:__<__:__<__:__<__\") == \"0250341\"\n\"\"\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"?(__+___+__-___):-___>__.\") == \"0250341\"\nassert solution(\"?(_-_/___*__):-___>__.\") == \"0010\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__.1\") == \"false\"\nassert solution(\"?(______________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\") == \"0250341\"\n\n\"\"\""
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"?(_-_/___*__):-___>__.\") == \"0010\"\nassert solution(\"?(__-_+_/_____):-__>__,_____<__.\") == \"false\"\nassert solution(\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\") == \"0250341\"\n\n\"\"\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"?(____/_____):-____<_____\") == \"0250341\"\nassert solution(\"?(_____+______):-_____<____,___\") == \"0250341\"\nassert solution(\"?(________):-________<___,___\") == \"0250341\"\nassert solution(\"?(_______-_+_):-_______<_,_,_\") == \"01010\"\nassert solution(\"?(_______/_____):-_______<_,_,_\") == \"01010\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"?(__-_+_/_____):-__>__,_____<__.\") == \"0250341\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 11\\n2 1 5\\n7 10 0\\n12 6 4\") == \"3\"\nassert solution(\"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"5\"\nassert solution(\"3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"0\"\nassert solution(\"3 3 1\\n2 1 5\\n7 10 0\\n12 6 4\") == \"3\"\nassert solution(\"3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 11') == '3'\n\nassert solution('3 4 2') == '5'\n\nassert solution('3 4 1000000000000000000') == '0'\n\nassert solution('3 4 1') == '5'\n\nassert solution('3 4 0') == '5'"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 11') == '3'\nassert solution('3 4 2') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 11\\n2 1 5\\n7 10 0\\n12 6 4\") == \"3\"\nassert solution(\"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"5\"\nassert solution(\"3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"0\""
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5 2 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n') == '5'\nassert solution('5 2 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n') == '0'\nassert solution('') == ''\nassert solution('') == ''\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\nassert solution(\"3 4 1000000000000000000\") == \"0\"\nassert solution(\"1 3 3 3\") == \"5\"\nassert solution(\"0 3 3 2\") == \"5\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 11\") == \"3\"\nassert solution(\"3 4 2\") == \"5\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 11\") == 3\n\nassert solution(\"3 4 2\") == 5\n\nassert solution(\"3 4 1000000000000000000\") == 0\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"5\"\nassert solution(\"3 3 11\\n2 1 5\\n7 10 0\\n12 6 4\") == \"3\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 11\\n2 1 5\\n7 10 0\\n12 6 4\") == \"3\"\nassert solution(\"3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"5\"\nassert solution(\"3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\") == \"0\"\n\n\"\"\"\n\nimport unittest\n\nINPUT_1 = \"\"\"3 3 11\n2 1 5\n7 10 0\n12 6 4\"\"\"\n\nINPUT_2 = \"\"\"3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1\"\"\"\n\nINPUT_3 = \"\"\"3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"thisisexampletwo\") == \"thisisexampletwo\"\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('codeforces') == 'codeforces'\nassert solution('rorcesfedoc') == 'rorcesfedoc'\nassert solution('rocesfedoc') == 'rorcesfedoc'\nassert solution('rocesfedoc') == 'rorcesfedoc'\n'''\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"thisisexampletwo\") == \"plmaetwoxesisiht\"\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"plmaetwoxesisiht\") == \"thisisexampletwo\"\nassert solution(\"z\") == \"z\"\n\n\n\n'''\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n\"\"\"\nimport math\n\nn = int(input())\nt = input()"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"orcesfedoc\") == \"rocesfedoc\"\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\n'''\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('codeforces') =='secrofedoc'\nassert solution('rocesfedoc') == 'rocesfedoc'\n\"\"\"\n\n\n\nfrom math import sqrt\nimport unittest"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"orcesfedoc\") == \"rocesfedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"thisisexampletwo\") == \"thisisexampletwo\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"secrofedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\"\nassert solution(\"rocesfedoc\") == \"rocesfedoc\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\nprint(solution(input()))"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\n\"\"\"\n\na, b = map(int, input().split())\nprint(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\nassert solution('1 1') == '2'\nassert solution('1 2') == '3'\nassert solution('1 2 3') == '6'\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 14\") == \"19\"\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 14') == '19'\n\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\nassert solution('3 5') == '8'\n\"\"\"\n\na, b = map(int, input().split())\nprint(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\nassert solution('4 4') == '10'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 14') == '19'\nassert solution('381 492') == '873'\n\"\"\"\nimport sys"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('++>') == '>'\nassert solution('<[<->-]<') == '-<'\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('+11') == '1+0+1+1'\nassert solution('-11') == '1-1-1-1'\nassert solution('11') == '1+1'\nassert solution('10') == '1'\n\n\"\"\"\n\n\nfrom collections import deque\nfrom itertools import chain\nfrom typing import Deque, Iterator, List\n\n\nclass Cell:\n    def __init__(self, value: int):\n        self.value = value\n        self.increment = 1\n\n    def __add__(self, other):\n        self.value += other\n        return self\n\n    def __sub__(self, other):\n        self.value -= other\n        return self\n\n    def __str__(self):\n        return f'{self.value}'\n\n\nclass BrainfuckInterpreter:\n    def __init__(self):\n        self.memory: List[Cell] = [Cell(0) for _ in range(30000)]\n        self.console_input: Iterator[str] = deque(chain([',', ''], iter([input()])))\n        self.console_output: Deque[str] = deque()\n\n    def __validate_step(self, step: int) -> None:\n        if step < 0:\n            raise ValueError(f'Step must be greater than 0, got {step}')\n        elif step > 50000000:\n            raise ValueError(f'Too many steps, maximum is 50000000, got {step}')\n\n    def __validate_value(self, value: int) -> None:\n        if value < 0:\n            raise ValueError(f'Value must be greater than 0, got {value}')\n        elif value > 255:\n            raise ValueError(f'Value must be less than 256, got {value}')\n\n    def __is_digit(self, s: str) -> bool:\n        try:\n            int(s)\n            return True\n        except ValueError:\n            return False\n\n    def execute(self, program: str) -> str:\n        self.__validate_step(len(program))\n        self.console_input = deque(chain([',', ''], iter([program])))\n        self.console_output = deque()\n        cell_ptr = 0\n        while True:\n            if cell_ptr > len(self.memory) - 1:\n                break\n            self.__validate_value(self.memory[cell_ptr].value)\n            command = self.console_input.popleft()\n            if command == '+':\n                self.memory[cell_ptr] += Cell(1)\n            elif command == '-':\n                self.memory[cell_ptr] -= Cell(1)\n            elif command == '>':\n                cell_ptr += Cell(1)\n            elif command == '<':\n                cell_ptr -= Cell(1)\n            elif command == '.':\n                self.console_output.append(self.memory[cell_ptr].__str__())\n            elif command == '[':\n                if self.memory[cell_ptr].value!= 0:\n                    current_ptr = self.memory[cell_ptr].value\n                    while True:\n                        if current_ptr < 0:\n                            raise ValueError(f'Negative cell pointer, this must never happen')\n                        if current_ptr > len(self.memory) - 1:\n                            break\n                        current_ptr = self.memory[current_ptr].value\n                    self.console_input.appendleft(self.console_input.pop())\n                    if self.__is_digit(self.console_input[0]):\n                        self.console_input.popleft()\n                    else:\n                        self.console_input.appendleft(self.console_input.pop())\n            elif command == ']':\n                if self.memory[cell_ptr].value == 0:\n                    current_ptr = self.memory[cell_ptr].value\n                    while True:\n                        if current_ptr < 0:\n                            raise ValueError(f'Negative cell pointer, this must never happen')\n                        if current_ptr > len(self.memory) - 1:\n                            break\n                        current_ptr = self.memory[current_ptr].value\n                    self.console_input.appendleft(self.console_input.pop())\n                    if self.__is_digit(self.console_input[0]):\n                        self.console_input.popleft()\n                    else:\n                        self.console_input.appendleft(self.console_input.pop())\n        return ''.join(self.console_output)\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\"\"\"\n\nimport operator as op\n\noperations = {\n    \"+\": op.add,\n    \"-\": op.sub,\n}\n\n\nclass Brainfuck:\n    def __init__(self):\n        self.cells = [0]\n        self.console_input = \"\"\n\n    def execute_program(self, program):\n        self.cells = [0]\n        self.console_input = \"\"\n        self.console = [0]\n        self.pointer = 0\n\n        for c in program:\n            self.execute_instruction(c)\n\n    def execute_instruction(self, c):\n        if c == \">\":\n            self.move_pointer_right()\n        elif c == \"<\":\n            self.move_pointer_left()\n        elif c == \"+\":\n            self.increase_cell()\n        elif c == \"-\":\n            self.decrease_cell()\n        elif c == \".\":\n            print(chr(self.console[self.pointer]), end=\"\")\n        elif c == \",\":\n            self.console[self.pointer] = ord(self.console_input[0])\n            self.console_input = self.console_input[1:]\n        elif c == \"[\":\n            if self.cells[self.pointer] == 0:\n                self.read_and_decrement()\n                self.move_right()\n                self.execute_instruction(self.console[self.pointer])\n                self.move_left()\n                self.move_left()\n            else:\n                self.read_and_increment()\n                self.move_right()\n        elif c == \"]\":\n            if self.cells[self.pointer]!= 0:\n                self.move_left()\n                self.move_left()\n                self.execute_instruction(self.console[self.pointer])\n                self.move_right()\n                self.read_and_increment()\n            else:\n                self.move_left()\n        else:\n            raise Exception(\"Unknown instruction \" + c)\n\n    def move_pointer_right(self):\n        self.pointer += 1\n        self.pointer = self.pointer % len(self.cells)\n\n    def move_pointer_left(self):\n        self.pointer -= 1\n        self.pointer = self.pointer % len(self.cells)\n\n    def read_and_decrement(self):\n        self.cells[self.pointer] = self.cells[self.pointer] - 1\n        self.cells[self.pointer] %= 256\n\n    def read_and_increment(self):\n        self.cells[self.pointer] = self.cells[self.pointer] + 1\n        self.cells[self.pointer] %= 256\n\n    def increase_cell(self):\n        self.cells[self.pointer] = self.cells[self.pointer] + 1\n        self.cells[self.pointer] %= 256\n\n    def decrease_cell(self):\n        self.cells[self.pointer] = self.cells[self.pointer] - 1\n        self.cells[self.pointer] %= 256\n\n    def move_right(self):\n        self.cells.append(0)\n\n    def move_left(self):\n        self.cells = self.cells[:-1]\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1+2\") == \"+++\\n\"\nassert solution(\"9-7\") == \"+++++++++>\\n\"\nassert solution(\"2+3\") == \"++>\\n\"\nassert solution(\"9-7\") == \"+++++++++>\\n\""
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\nassert solution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2+3') == '++>'\n\nassert solution('9-7') == '+++++++++>'\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9-7\") == \"+>++++++>\\n<[<->-]<\\n++++++++++++++++++++++++++++++++++++++++++++++++.\\n\"\n\"\"\"\n\n\nimport re"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2+3') == '++>'\nassert solution('9-7') == '+++++++++>'\n\"\"\"\n\nimport math\n\nMAX_POWER = 16\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2+3\n3+2\n''') == '<[<+>-]<'\nassert solution('''9-7\n3-2\n''') == '+++++++++>'\n\n\n\n\"\"\"\n\n\nclass Brainfuck:\n    def __init__(self, data: str) -> None:\n        self.data = data\n        self.cells = [0] * 30000\n        self.pointer = 0\n        self.code = ''\n\n    def evaluate(self) -> int:\n        \"\"\"\n        Evaluate expression\n        \"\"\"\n        stack = []\n        for char in self.data:\n            if char == '+':\n                stack.append(stack.pop() + stack.pop())\n            elif char == '-':\n                stack.append(-stack.pop() + stack.pop())\n            elif char == '>':\n                self.pointer += 1\n            elif char == '<':\n                self.pointer -= 1\n            elif char == '.':\n                print(chr(stack.pop()), end='')\n            elif char == ',':\n                stack.append(ord(input()[0]))\n            elif char == '[':\n                if stack.pop():\n                    self.evaluate()\n                    continue\n            elif char == ']':\n                if not stack.pop():\n                    self.evaluate()\n                    continue\n        return stack.pop()\n\n\nbf = Brainfuck(input())\nprint(bf.evaluate())\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"112123123412345$\\dots$\") == '0'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"112233445566778899010\") == \"9\"\nassert solution(\"112233445566778899011011121314151617181920\") == \"9\"\nassert solution(\"112233445566778899010\") == \"9\"\nassert solution(\"112233445566778899011011121314151617181920\") == \"9\"\nassert solution(\"112233445566778899010\") == \"9\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11212341234512345612345671234567812345678912345678910\") == \"11111111111111111111111011011011011101111011111111111101101101111111\"\n\"\"\"\n\nimport sys\n\nn = int(input())\nk_list = []\nfor _ in range(n):\n    k_list.append(int(input()))\n\nseq = 1\n\nwhile seq:\n    for k in k_list:\n        print(seq)\n        seq = seq // 10\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('56 25') == '0 2'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"112123123412345\") == \"1\"\nassert solution(\"11212312341234512345\") == \"2\"\nassert solution(\"1121231234123451234512345\") == \"0\"\n\"\"\""
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"1\"\nassert solution(\"11112222333$\\dots$\") == \"2\"\nassert solution(\"1111222233344$\\dots$\") == \"2\"\nassert solution(\"11112222333444$\\dots$\") == \"2\"\nassert solution(\"1111222233344445$\\dots$\") == \"2\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('112123123412345$\\dots$') == '1'\nassert solution('11112222333445$\\dots$') == '5'\nassert solution('1111222233344555$\\dots$') == '5'\nassert solution('111122223334455556666$\\dots$') == '6'\n\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1\\n3\\n20\\n38\\n56\") == \"1\\n2\\n5\\n2\\n0\"\nassert solution(\"4\\n2132\\n506\\n999999999999999999\\n1000000000000000000\") == \"8\\n2\\n4\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345$\\dots$\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"575\") == 4\nassert solution(\"1\") == 0\nassert solution(\"2\") == 0\nassert solution(\"5\") == 1\nassert solution(\"10\") == 1\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('575') == 4\nassert solution('1') == 0\nassert solution('1000') == 7\n\"\"\"\n\nN = int(stdin.readline())\n\ncount = 0\nfor num in range(1, N + 1):\n    if num % 10!= 7 and num % 10!= 5 and num % 10!= 3:\n        continue\n    s = str(num)\n    if '7' in s or '5' in s or '3' in s:\n        continue\n    count += 1\n\nprint(count)\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 2\nassert solution(4) == 3\nassert solution(5) == 2\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('575') == 4\nassert solution('1') == 0\nassert solution('8') == 0\nassert solution('13') == 0\n\"\"\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"575\") == 4\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"575\") == 4\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('575') == 4\nassert solution('0') == 0\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"575\") == 4\n\"\"\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n') == '1'\nassert solution('7\\n') == '1'\nassert solution('9\\n') == '0'\nassert solution('10\\n') == '1'\nassert solution('11\\n') == '2'\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('575') == '4'\nassert solution('10') == '1'\nassert solution('314') == '0'\nassert solution('357') == '1'\nassert solution('877') == '4'\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0110\") == 1\nassert solution(\"1010\") == 1\nassert solution(\"101110\") == 2\nassert solution(\"01110\") == 2\nassert solution(\"10111010\") == 3\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1110110\") == 4\nassert solution(\"101010\") == 0\nassert solution(\"1110110\") == 4\n\nassert solution(\"1110110\") == 4\nassert solution(\"101010\") == 0\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('000') == 1\nassert solution('110') == 1\nassert solution('011') == 2\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"010101010\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"001010\") == 1\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"111\") == \"1\"\nassert solution(\"000\") == \"0\"\nassert solution(\"110\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"000\") == 1\nprint(solution(\"100100100\"))\n\n\n-------Comments-------\n- In fact, we can just repaint the tile with 0 and 1 with different colors.\n- The first solution is quite simple.\n- The second solution is quite clever.\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('010') == 1\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1111') == 0\nassert solution('101010') == 1\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100100\") == 2\nassert solution(\"100010\") == 2\nassert solution(\"010110\") == 1\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 7 9 10 31\") == \"APPROVED\"\nassert solution(\"4 6 8 9 13\") == \"APPROVED\"\nassert solution(\"1 4 7 9 11\") == \"DENIED\"\nassert solution(\"2 3 4 5 6\") == \"DENIED\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 7 9 10 31\") == \"APPROVED\"\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 7 9 10 31\") == \"APPROVED\"\n\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 5\") == \"APPROVED\"\nassert solution(\"6 6 6\") == \"DENIED\"\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n6 7 9 10 31') == 'APPROVED'\n\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_input) == test_output\n\n------Problem------\nIn the Kingdom of AtCoder, the currency is YEN. The government has set up a special bank named Bank AtCoder. The government has decided to provide a special interest rate of 15% for bank customers. All of the money in the kingdom is used for the bank. If the money is less than 0 yen, then the citizen whose money is used is fired from the bank.\n\nThe government also decides to grant bank customers a special interest rate of 5%. The interest is calculated using the following formula:\ninterest = amount * rate * 0.01\nYour task is to calculate the interest of the government for each citizen.\n\n-----Input Format-----\nThe first line contains an integer N, the number of bank customers.\n\nThe next line contains N space-separated integers A_1, A_2,..., A_N.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq A_i \\leq 10000\n\n-----Output Format-----\nPrint N space-separated integers. These integers should be the interest of the government for the N bank customers.\n\n-----Sample Input-----\n5\n10000 10000 10000 10000\n\n-----Sample Output-----\n0 0 0 0\n\nThe government granted interest of 0 for the 5 bank customers.\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n6 7 9 10 31\") == \"APPROVED\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('RRRULULD') == 'No'\n\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RUDRUDL\") == \"No\"\nassert solution(\"RUDLLUDR\") == \"No\"\nassert solution(\"LDRRLURUULRUUDRL\") == \"Yes\"\nassert solution(\"UDUDLLR\") == \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('RUDLUDR') == 'Yes'\nassert solution('LDRRRDDR') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\nassert solution(\"RUDRDULU\") == \"No\"\nassert solution(\"LDRULRUDRDULURLDDLU\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('RUDLUDR') == 'Yes'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('RUDLUDR') == \"Yes\"\n\"\"\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('RUDLUDR') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RUDLUDR\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 3 5\\n1 1 1 1\") == \"7\"\n\"\"\"\nfrom typing import Callable\nimport unittest\n\nclass SolutionTestCase(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"4 2 3 5\\n1 1 1 1\"), \"7\")\n\nunittest.main()"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n5\n3\n2\n4\n3\n5\n''') == '7'\nassert solution('''\n10\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n''') == '10'\nassert solution('''\n1\n1\n1\n1\n1\n''') == '1'\nassert solution('''\n1\n1\n1\n1\n1\n''') == '1'\n\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2\\n4\\n3\\n5') == '7'\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n3\\n2\\n4\\n3\\n5') == '7'\nassert solution('5\\n3\\n2\\n4\\n3\\n5\\n') == '7'\nassert solution('7\\n1\\n2\\n3\\n4\\n5\\n6\\n') == '7'\nassert solution('8\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n') == '8'\nassert solution('1\\n3\\n2\\n4\\n3\\n5\\n') == '9'"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2 4 3 5\") == \"7\"\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2 4 3 5\") == \"7\"\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('123\\n34\\n45') == '12\\n34\\n56'\n\n'''\n\nimport sys\nimport numpy as np\n\nclass Solution:\n    def solution(self, N, A, B, C, D, E):\n        if N == 0:\n            return 0\n\n        transportation_system = [np.array([1] + [0]*(A+B+C+D+E+1)) for _ in range(6)]\n        for i in range(1, 6):\n            transportation_system[i][1] = 1\n\n        for i in range(2, 6):\n            for j in range(i-1, A+B+C+D+E+1):\n                for k in range(i-1, j):\n                    transportation_system[i][j] = min(transportation_system[i][j], transportation_system[i-1][k] + 1)\n\n        # for row in transportation_system:\n        #     print(row)\n\n        return int(np.min(transportation_system[N]))\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n3\\n2\\n4\\n3\\n5') == '7'\n\"\"\"\n\nn = int(stdin.readline())\n\na, b, c, d, e = map(int, stdin.readline().split())\n\nleft = 1\nright = n\nwhile left < right:\n    mid = left + (right - left) // 2\n    t = mid\n    transport = [0, 0, 0, 0, 0]\n    \n    transport[0] = min(t // a, d // a)\n    t %= a\n    transport[1] = min(t // b, d // b)\n    t %= b\n    transport[2] = min(t // c, d // c)\n    t %= c\n    transport[3] = min(t // d, d // d)\n    t %= d\n    transport[4] = min(t // e, d // e)\n    t %= e\n    transport[5] = t // e\n    \n    if sum(transport) <= mid:\n        left = mid + 1\n    else:\n        right = mid\n\nprint(left)\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 2 4 3 5') == '7'\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3 2 4 3 5') == '7'\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n') == 2\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n') == 2\n\n-----"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == 2\n\"\"\"\nimport math\nimport sys\n\nfrom typing import List, Set, Dict\n\n\nclass Solution:\n    def solve(self, n: int) -> int:\n        # time complexity: O(N)\n        # space complexity: O(1)\n        N = n\n        # N is an integer.\n        # Write your code below this row.\n\n        # build up count of 1s\n        one_cnt = [0] * 10\n        for i in range(N):\n            one_cnt[int(stdin[i])] += 1\n        \n        # how many valid sequences?\n        ans = 0\n        for i in range(1, 10):\n            if one_cnt[i] == 0:\n                continue\n            if one_cnt[0]!= 0:\n                # 0 is not allowed\n                # one_cnt[0] == 0\n                break\n            if one_cnt[9] == 0:\n                # 9 is not allowed\n                # one_cnt[9] == 0\n                break\n\n            # add all the possible combinations, modulo 10^9 + 7\n            # use double break statement to reduce unnecessary looping\n            ans += int(math.factorial(N) / math.factorial(N - i)) // math.factorial(i)\n            if ans >= 10**9 + 7:\n                ans = ans % (10**9 + 7)\n        \n        return ans\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == 2\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2') == 2\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n') == 6\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2\\n') == '5'\n\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '1'\n\"\"\"\n\nimport sys\n\nN = int(input())"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n2\n''') == 2\n\n-----\n2\n0 9\n\n-----\n2\n9 0\n\n-----\n1\n1\n\n-----\n0\n'''\n) == 2"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == 2\n\"\"\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20\") == \"23\"\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20\") == \"23\"\nprint(\"Passed\")\n\n\"\"\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(2) == 3\nassert solution(3) == 5\nassert solution(4) == 7\nassert solution(5) == 11\nassert solution(6) == 13\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20') == '23'\nassert solution('1') == '2'\n\"\"\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20\") == \"23\"\nprint(\"All Tests Passed\")\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(20) == 23\n\n\"\"\"\n\n\n\n\"\"\"\nclass Solution:\n    def solution(self, X: int) -> int:\n        # Your code goes here\n        y = int(X) + 1\n        primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]\n        for i in primes:\n            if y % i == 0:\n                y += 1\n        return y\n\"\"\"\nclass Solution:\n    def solution(self, X: int) -> int:\n        if X <= 0:\n            return False\n        else:\n            if X == 1:\n                return 2\n            else:\n                for n in range(2, X):\n                    if n % 2!= 0 and n % 3!= 0 and n % 5!= 0 and n % 7!= 0 and n % 11!= 0 and n % 13!= 0 and n % 17!= 0 and n % 19!= 0 and n % 23!= 0 and n % 29!= 0 and n % 31!= 0 and n % 37!= 0 and n % 41!= 0 and n % 43!= 0 and n % 47!= 0 and n % 53!= 0:\n                        return n\n                    else:\n                        pass\n                else:\n                    return n + 1\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(2) == 3\nassert solution(3) == 5\nassert solution(20) == 23\nassert solution(30) == 29\nassert solution(10 ** 6) == 10 ** 6 + 1\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20') == '23'\nassert solution('8') == '7'\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7') == '7'\nassert solution('20') == '23'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(20) == 23\n\n-----Test Case-----\npython3 -m unittest solution.py\npython3 -m unittest solution.py -v\n\n-----Log-----\n2021-04-01 00:46:23,956 - INFO - Test Case #1 passed.\n2021-04-01 00:46:24,929 - INFO - Test Case #2 passed.\n2021-04-01 00:46:24,930 - INFO - Test Case #3 passed.\n2021-04-01 00:46:24,933 - INFO - Test Case #4 passed.\n2021-04-01 00:46:24,934 - INFO - Test Case #5 passed.\n2021-04-01 00:46:24,935 - INFO - Test Case #6 passed.\n2021-04-01 00:46:24,935 - INFO - Test Case #7 passed.\n2021-04-01 00:46:24,938 - INFO - Test Case #8 passed.\n2021-04-01 00:46:24,939 - INFO - Test Case #9 passed.\n2021-04-01 00:46:24,939 - INFO - Test Case #10 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #11 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #12 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #13 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #14 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #15 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #16 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #17 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #18 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #19 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #20 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #21 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #22 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #23 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #24 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #25 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #26 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #27 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #28 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #29 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #30 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #31 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #32 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #33 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #34 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #35 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #36 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #37 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #38 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #39 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #40 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #41 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #42 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #43 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #44 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #45 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #46 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #47 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #48 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #49 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #50 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #51 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #52 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #53 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #54 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #55 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #56 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #57 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #58 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #59 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #60 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #61 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #62 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #63 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #64 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #65 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #66 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #67 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #68 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #69 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #70 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #71 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #72 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #73 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #74 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #75 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #76 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #77 passed.\n2021-04-01 00:46:24,940 - INFO - Test Case #78 passed.\n2021-04-01 00:46:24,940 -"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n3 1 3 2''') == 1\nassert solution('''4\n1 2 3 4''') == 0\nassert solution('''5\n1 2 3 4 5''') == 0\nassert solution('''5\n1 1 1 1 1''') == 1\nassert solution('''6\n1 2 2 2 2 2''') == 1\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 3 2\") == \"1\"\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\nassert solution(\"6\\n2 2 3 2 3 2\") == \"0\"\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 1 3 2') == '1'\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\"\n\nimport itertools\n\nn = int(input())\na = list(map(int, input().split()))\n\na_diff = set(a[i] - a[i + 2] for i in range(len(a) - 2))\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 1 3 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\nassert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\") == \"23\"\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == \"23\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n\"\"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80') == '23'\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 100 90 80\") == \"23\"\n\n\"\"\"\nfrom collections import namedtuple, Counter\nimport string\nimport itertools\n\nMagic = namedtuple('Magic', ['cost', 'name'])\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"./sample.in\") == \"23\"\n\"\"\""
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 100 200 300\") == \"20\"\nassert solution(\"4 100 300 200\") == \"20\"\n\"\"\"\nfrom math import ceil"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\nassert solution(\"ZMNAGUEDSJYLBOPHRQICWFXTVK\") == \"ABCXYZ\"\n\"\"\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\nassert solution('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nassert solution('ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ'"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\ns = sys.stdin.readline()\n\nresult = ''\n\nfor c in s:\n    result += chr(ord(c) + N)\n\nprint(result)\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\nassert solution(\"AABCZ\") == \"AABCZ\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABCXYZ') == 'CDEZAB'\nprint(solution('ABCXYZ'))\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABCXYZ\") == \"CDEZAB\"\n\"\"\"\n\n\"\"\"\n### Solution\n\nThe solution is simple: use the built-in ord() function to get ASCII code of each letter, then use that to compute the offset and finally use chr() to convert ASCII code to character.\n\"\"\""
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n5 2 3 3 2\n''') == '3 4 2'\nassert solution('''1\n2750131 199999\n''') == '199999'\n'''\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n\"\"\""
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n\"\"\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\n\"\"\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 2 3 2 4\") == '3 4 2'\n\"\"\""
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '1'\nassert solution('2\\n1 2') == '2 1'\nassert solution('3\\n1 2 3') == '3 1 2'\nassert solution('4\\n1 2 3 4') == '1 2 3 4'\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\n\"\"\"\nimport sys\nfrom itertools import permutations"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n3 6') == '6'\nassert solution('1\\n2\\n3\\n4') == '4'\nassert solution('1\\n2\\n3\\n1\\n2\\n3\\n4') == '4'\nassert solution('1\\n2\\n2\\n1\\n1\\n2\\n4') == '2'\nassert solution('1\\n3\\n3\\n1\\n1\\n3\\n4') == '3'\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 2 3 2 4\") == \"3 4 2\"\n\"\"\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5 2 3 2 4') == '3 4 2'\nassert solution('1') == '999999'\n\"\"\"\n\nimport math\nfrom functools import reduce\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"111111\"\nassert solution(\"5 1\") == \"22112\"\nassert solution(\"7 1\") == \"112112\"\nassert solution(\"7 2\") == \"2212\"\nassert solution(\"7 3\") == \"1121\""
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\nassert solution(\"5 3\") == \"1121\"\nassert solution(\"7 2\") == \"1122\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 3 5 4\") == \"11111\"\nassert solution(\"7 2 1 3 5 4 6\") == \"1121122\"\nassert solution(\"2 4 5 3 1\") == \"21112\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\n\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2') == '11111'\nassert solution('5 1') == '21112'\nassert solution('7 1') == '1121122'\n\"\"\"\nfrom collections import Counter\nfrom itertools import chain"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"111111\"\nassert solution(\"5 1\") == \"22112\"\nassert solution(\"7 1\") == \"111222\"\nassert solution(\"5 1\") == \"21112\"\n\"\"\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\nassert solution(\"7 2\") == \"22111\"\nassert solution(\"7 3\") == \"112221\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"11111\"\nassert solution(\"5 1\") == \"21112\"\nassert solution(\"7 1\") == \"1121122\"\nassert solution(\"7 2\") == \"22112\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 2 1 2 3\") == 2\nassert solution(\"1\\n1\") == 0\nassert solution(\"3\\n1 2 3\") == 3\nassert solution(\"5\\n1 2 3 4 2\") == 3\n\"\"\""
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1 2 3'\nassert solution('1 2 1 2 3') == '1 2 1 2 3'\nassert solution('1 2 3 4 5') == '1 2 3 4 5'\nassert solution('1 2 1 2 3') == '1 2 1 2 3'\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n') == '2'\nassert solution('1 2 1 2 3\\n') == '2'\nassert solution('1 2 1 2 3\\n') == '2'\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == \"2\"\n\nassert solution(\"2\\n1 2\") == \"2\"\n\nassert solution(\"4\\n1 3 3 7\") == \"4\"\n\nassert solution(\"4\\n1 3 3 7\") == \"4\"\n\"\"\""
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"5\n1 2 1 2 3\"\"\") == \"2\"\nassert solution(\"\"\"5\n1 2 1 2 3\"\"\") == \"2\"\nassert solution(\"\"\"2\n1 3 3 7\"\"\") == \"4\"\nassert solution(\"\"\"4\n1 3 3 7\"\"\") == \"4\"\n\n\"\"\"\na = [1, 2, 1, 2, 3]\n\nmonotonic = 0\nfor i in range(0, len(a)):\n    if i > 0 and a[i - 1] < a[i]:\n        for j in range(0, i):\n            if a[j] == a[i]:\n                monotonic = monotonic + 1\n        break\n\nprint(monotonic)\n\"\"\""
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == \"2\"\nassert solution(\"2\\n1 2\\n1 2\") == \"2\"\nassert solution(\"4\\n1 3 3 7\") == \"4\"\nassert solution(\"5\\n1 2 1 2 3\") == \"2\"\nassert solution(\"2\\n1 2\") == \"2\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2 1 2 3\") == 2\nassert solution(\"5\\n1 2 1 2 3\") == 4\nassert solution(\"3\\n1 2 1\") == 3\nassert solution(\"4\\n1 3 3 7\") == 4\nassert solution(\"4\\n100 1\") == 2\n\nprint(solution(\"4\\n100 1\"))\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 3 7\") == \"4\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == 2\n\"\"\""
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 1 2 3\") == \"2\"\nassert solution(\"4\\n1 3 3 7\") == \"4\"\nassert solution(\"2\\n100 1\") == \"2\"\nassert solution(\"4\\n1 3 3 7\") == \"4\"\n\n\"\"\"\n\nfrom collections import Counter\n\nn = int(input())\na = list(map(int, input().split()))\n\na_counter = Counter(a)\na_counter_list = list(a_counter.items())\na_counter_list = list(sorted(a_counter_list, key=lambda x: x[0]))\n\npre = 0\ncount = 1\n\nfor i in range(n):\n    if a_counter_list[i][0] == a_counter_list[i][1]:\n        continue\n    elif a_counter_list[i][0] < a_counter_list[i][1]:\n        count = count * a_counter_list[i][1]\n    elif a_counter_list[i][0] > a_counter_list[i][1]:\n        count = count * a_counter_list[i][0]\n\nprint(count % 998244353)\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 1 1 1023') == '0'\nassert solution('4 7 1 5 4 9') == '1'\n\n\"\"\""
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n4 7 1 5 4 9\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\") == \"2\"\nassert solution(\"1\\n16\") == \"1\"\nassert solution(\"4\\n1 1 1 1023\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 7 1 5 4 9\\n') == '1'\n\"\"\"\n\nfrom __future__ import annotations\nfrom typing import List, Set, Dict, Tuple\nfrom collections import deque\nfrom functools import lru_cache"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 7 1 5 4 9\\n\") == \"1\"\nassert solution(\"1 2 3 4 5\\n\") == \"2\"\nassert solution(\"16\\n\") == \"1\"\nassert solution(\"1 1 1 1023\\n\") == \"0\"\nassert solution(\"4 7 1 5 4 9\\n\") == \"1\""
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('16') == '1'\nassert solution('1 1 1 1023') == '0'\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"6\n4 7 1 5 4 9\"\"\") == \"1\"\nassert solution(\"\"\"5\n1 2 3 4 5\"\"\") == \"2\"\nassert solution(\"\"\"1\n16\"\"\") == \"1\"\nassert solution(\"\"\"4\n1 1 1 1023\"\"\") == \"0\"\nassert solution(\"\"\"4\n1 1 1 1023\n5 2 7 2 4\n8 1 2 2 8\n10 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n5 2 7 2 8\n10 2 7 2 8\n8 2 7 2 8\n7 2 7 2 8\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 4 5') == '2'\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 7 1 5 4 9') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('16') == '1'\nassert solution('1 1 1 1023') == '0'\nassert solution('7 39 89 25 89') == '2'\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 7 1 5 4 9\\n') == '1'\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 7 1 5 4 9') == 1\nassert solution('1 2 3 4 5') == 2\nassert solution('1 1 1 1023') == 1\nassert solution('16') == 1\nassert solution('1 1 1 1023') == 1\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"01110\") == 5\nassert solution(\"101110\") == 3\nassert solution(\"11110\") == 1\nassert solution(\"11110\") == 1\n\n\"\"\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11110') == 3\nassert solution('111010') == 4"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0011') == '4'\nassert solution('10111') == '4'\nassert solution('1111') == '4'\nassert solution('1010101101111011') == '10'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11110\") == 3\nassert solution(\"11010\") == 2\nassert solution(\"11000\") == 0\nassert solution(\"11111\") == 4\nassert solution(\"11110\") == 3\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0011') == 4\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11\") == 3\nassert solution(\"11110\") == 0\nassert solution(\"101110\") == 3\n\"\"\""
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11011100') == '4'\nassert solution('01111110') == '1'\nassert solution('100111110') == '0'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n0011\n''') == '4'\nassert solution('''\n1011\n''') == '1'\nassert solution('''\n1111\n''') == '3'\nassert solution('''\n0011\n0111\n''') == '3'\nassert solution('''\n1110\n1010\n''') == '2'\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '00110011'\n) == 4\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == 2\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == 2\nassert solution(\"4 2\\n1 3\\n1 4\") == 2\nassert solution(\"4 2\\n3 4\\n1 3\\n1 4\") == 1\n\"\"\"\n\nfrom sys import stdin\n\nMAX_N = 5 * 10 ** 5\nMAX_M = 5 * 10 ** 5\n\nstdin = open('./input.txt', 'r')\ninput = stdin.readline\n\ncache = [[-1 for _ in range(MAX_N)] for _ in range(MAX_M)]\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == 2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n'4 2\\n1 3\\n2 4'\n) == 2\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == '2'\n\"\"\"\nimport sys"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\n-----\n5 4\n3 4\n1 2\n1 3\n1 4\n2 3\n\n-----\n3 2\n1 3\n1 4\n2 3\n\n-----\n'''\n\nfrom collections import Counter"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == 2\n\"\"\"\n\n\"\"\"\nThe following is a solution on codewars\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 3\\n2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n1 3\\n2 4') == '2'"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 2 1\") == \"2\"\nassert solution(\"4\\n1 2 2 3\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n1 2 2 1''') == '2'\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 2 1\") == 2\n\"\"\"\nimport sys\nfrom collections import Counter\n\nN = int(sys.stdin.readline().strip())\n_l = [int(i) for i in sys.stdin.readline().strip().split()]\n_l = Counter(_l)"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 2 1\\n') == '2'\n\"\"\"\n\n\nclass Solution:\n    def solution(self, input: str) -> str:\n        N = int(input.split()[0])\n        heights = [int(h) for h in input.split('\\n')[1].split()]\n        res = 0\n        for l, r in zip(heights[:len(heights) // 2], heights[len(heights) // 2:]):\n            res += max(l, r) - l\n            res += max(l, r) - r\n        return str(res)\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 2 1\\n\") == 2\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 2 1') == '2'\n\"\"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 2 1\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 2 1') == '2'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 2 1') == 2\n\"\"\"\n\nimport sys\nfrom typing import List, Set, Tuple, Union\n\nState = List[int]"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(1000000)"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3 5\n2 1 -3\"\"\") == '3'\nassert solution(\"\"\"2 4\n-1 1\"\"\") == '4'\nassert solution(\"\"\"4 10\n2 4 1 2\"\"\") == '2'"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"4 10\") == \"8\"\nassert solution(\"2 10\") == \"0\"\nassert solution(\"10 1\") == \"1\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5\\n2 1 -3') == '3'\nassert solution('2 4\\n-1 1') == '4'\nassert solution('4 10\\n2 4 1 2') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 5\n2 1 -3\n''') == '3'\n\nassert solution('''2 4\n-1 1\n''') == '4'\n\nassert solution('''4 10\n2 4 1 2\n''') == '2'\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n2 1 -3\") == \"3\"\nassert solution(\"2 4\\n-1 1\") == \"4\"\nassert solution(\"4 10\\n2 4 1 2\") == \"2\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 10\") == \"6\"\nassert solution(\"2 4 1 2\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"4 10\") == \"2\"\nassert solution(\"10 10\") == \"0\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n2 1 -3\") == \"3\"\n\nassert solution(\"3 10\\n2 4 1 2\") == \"2\"\n\nassert solution(\"4 10\\n2 4 1 2\") == \"0\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 1 2\") == 2\n\"\"\"\n\nfrom collections import Counter, defaultdict\nfrom typing import Iterable, DefaultDict\n\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        n, w = list(map(int, stdin.split(' ')))\n        seq = list(map(int, stdin.split('\\n')[1:]))\n        cnt = Counter(seq)\n        memo = defaultdict(int)\n        memo[0] = 1\n        for k in range(1, w + 1):\n            tmp = Counter()\n            for k2, v2 in cnt.items():\n                tmp[k2 + v2] += memo[k2]\n                tmp[k2 - v2] += memo[k2]\n            memo = tmp\n        return memo[w]\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 8 6 3 12 9') == '9 3 6 12 4 8'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\n\"\"\""
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 8 6 3 12 9') == '9 3 6 12 4 8'\n\nassert solution('42 28 84 126') == '126 42 84 28'\n\nassert solution('1000000000000000000 3000000000000000000') == '3000000000000000000 1000000000000000000'\n\n\n\"\"\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\n\"\"\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n\n\n\"\"\"\n\nn = int(input())\nl = list(map(int, input().split()))\n\npoly = [1] * n\nprev = 1\nfor i in range(n):\n    for j in range(i):\n        poly[j] = poly[j] * 3\n    poly[i] = poly[i] * 2\n\nans = []\nfor i in range(n):\n    print(poly[l[i] - 1], end=\" \")\n    ans.append(poly[l[i] - 1])\n\nprint()\nprint(*ans)\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8 6 3 12 9\\n\") == \"9 3 6 12 4 8\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\n\n\n\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\nassert solution(\"42 28 84 126\") == \"126 42 84 28\"\nassert solution(\"1000000000000000000 3000000000000000000\") == \"3000000000000000000 1000000000000000000\"\n\n\"\"\"\n\nfrom math import ceil, log10"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8 6 3 12 9\") == \"9 3 6 12 4 8\"\n\n'''"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8 6 3 12 9\") == '9 3 6 12 4 8'\nassert solution(\"42 28 84 126\") == '126 42 84 28'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 4 7 10 12\") == '3'\nassert solution(\"-1 2 5 8 11\") == '1'\n\"\"\"\nfrom math import log, ceil"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\\n8\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 1 2\") == \"3\"\nassert solution(\"5 5 7 1 4 8 11\") == \"4\"\nassert solution(\"2 3 5 5 7 11\") == \"2\"\nassert solution(\"6 6 7 9 8 10\") == \"3\"\nassert solution(\"7 7 7 7 7 7 7\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\\n8\""
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\nassert solution(\"5\\n-1 2 5 8 11\") == \"1\\n8\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 4 7 10 12\") == \"3\", \"Wrong output\"\nassert solution(\"5 -1 2 5 8 11\") == \"1\", \"Wrong output\"\n\"\"\""
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n3 5 4 7 10 12') == '3\\n7 3 5'\nassert solution('5\\n-1 2 5 8 11') == '1\\n8'\n\n\"\"\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n3 5 4 7 10 12\") == \"3\\n7 3 5\"\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6\\n3 5 4 7 10 12') == '3\\n7 3 5'\n\nassert solution('5\\n-1 2 5 8 11') == '1\\n8'\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6\n3 5 4 7 10 12\n''') == '3'\n\nassert solution('''5\n-1 2 5 8 11\n''') == '1'\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\nassert solution(\"2 3 4\") == \"0 0\"\nassert solution(\"5 4 5\") == \"0 0\"\nassert solution(\"1 1 1\") == \"0 0\"\n\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '0 2'\nassert solution('2 1 3') == '0 2'\nassert solution('1 1 3') == '0 2'\nassert solution('2 1 3') == '0 2'\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 3') == '0 2'\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 3\\n') == '0 2'\n\"\"\""
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3 3') == '0 2'\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 3\") == \"0 2\"\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 3\\n\") == '0 2'\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 3') == '0 2'\n\"\"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 3') == '0 2'\nassert solution('3 2 1') == '1 0'\nassert solution('1 0 1') == '0 1'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101\\n102\\n103') == '3'\nprint('Success')\n\"\"\"\n\n\"\"\"\ninputs = []\nfor i in range(0, 10):\n    inputs.append(int(input()))\n\nprint(inputs)\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '10'\n) == '1'\nassert solution(\n    '100'\n) == '2'\nassert solution(\n    '101'\n) == '3'\nassert solution(\n    '103'\n) == '3'\nassert solution(\n    '10^18'\n) == '18'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('101') == '1'\nassert solution('102') == '2'\nassert solution('103') == '3'\nassert solution('104') == '4'\nassert solution('105') == '5'\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"103\") == \"3\"\nassert solution(\"101\") == \"1\"\nassert solution(\"100\") == \"0\"\nassert solution(\"12\") == \"1\"\nassert solution(\"15\") == \"2\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nimport math"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"103\") == \"3\"\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('101') == '1'\nassert solution('101010') == '2'\nassert solution('10101010') == '10'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"103\") == \"3\"\n\"\"\"\n\n\"\"\"\nAssume that interest is paid annually. \nAnd if the balance is not reached after the number of years given, \nthe interest paid is also not paid.\n\"\"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(101) == \"3\"\nassert solution(103) == \"3\"\nassert solution(104) == \"4\"\n\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"./sample_input.txt\") == \"3\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"9\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n') == '9'\nassert solution('3\\n') == '12'\nassert solution('4\\n') == '20'\nassert solution('5\\n') == '32'\nassert solution('6\\n') == '50'\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == '9'\nprint(solution(input()))"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"9\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"12\"\nassert solution(\"5\") == \"31\"\nassert solution(\"20\") == \"1728\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '2'\n) == '9'\nassert solution(\n    '1'\n) == '1'\nassert solution(\n    '3'\n) == '4'\nassert solution(\n    '4'\n) == '7'\nassert solution(\n    '5'\n) == '6'\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '24'\nassert solution('2') == '9'\n\n\"\"\"\nimport math"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"4\") == \"24\"\n\"\"\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(2) == 9\n\"\"\"\nfrom functools import reduce\nfrom operator import add\nimport ast"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == '9'\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n3 4 6\") == \"10\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"3 4 6\\n\"\n) == \"10\"\n\n----"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 6\\n\") == \"10\"\n\"\"\"\n\n\"\"\"\nimport stdio\nimport sys\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n3 4 6\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n3 4 6\") == 10\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(3000)\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n3 4 6\") == 10\n\n---"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 6\\n') == '10'\n\"\"\"\n\n\"\"\"\n\n5\n1 1 2 3 4 5\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nx = 0\nf = 0\nfor i in range(n):\n    x = (a[i] + x) % a[i]\n    if x == 0:\n        f += a[i]\nprint(f)"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 6\") == \"10\"\n\n------\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 6\") == \"10\"\n\"\"\"\nfrom __future__ import print_function"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n3 4 6''') == 10\nassert solution('''4\n4 7 7\n''') == 19\nassert solution('''10\n1 2 3 4 5 6 7 8 9 10''') == 55\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n\") == \"Yes\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'No'\nassert solution('2\\n1 1') == 'Yes'\nassert solution('4\\n1 1\\n2 2') == 'Yes'\nassert solution('4\\n1 1\\n2 2\\n3 3') == 'No'\n\"\"\"\n\n\"\"\"\n\u0421\u0444\u043e\u0440\u043c\u0443\u043b\u0438\u0440\u0443\u0439\u0442\u0435 \u0438 \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0433\u043e \u0432\u0432\u043e\u0434\u0430 \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u0438 \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0443\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u0443\u043c\u043c\u0443 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0447\u0438\u0441\u0435\u043b.\n\nSample Input 1:\n\n5\n1\n2\n3\n4\n5\n0\nSample Output 1:\n\n15\nSample Input 2:\n\n0\nSample Output 2:\n\n0\n\"\"\"\n\n\"\"\"\n\u0421\u0444\u043e\u0440\u043c\u0443\u043b\u0438\u0440\u0443\u0439\u0442\u0435 \u0438 \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u0441 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u0432\u0435\u0434\u0451\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c:\n\u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u043c\u0435\u043d\u044c\u0448\u0435 10, \u0442\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u044d\u0442\u043e \u0447\u0438\u0441\u043b\u043e;\n\u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u0431\u043e\u043b\u044c\u0448\u0435 100, \u0442\u043e \u043f\u0440\u0435\u043a\u0440\u0430\u0449\u0430\u0435\u043c \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u0430;\n\u0432 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u044d\u0442\u043e \u0447\u0438\u0441\u043b\u043e \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u043d\u0430 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\nSample Input 1:\n\n12\n4\n23\n16\n20\nSample Output 1:\n\n12\n23\n16\nSample Input 2:\n\n101\n102\n103\nSample Output 2:\n\nSample Input 3:\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nSample Output 3:\n\nSample Input 4:\n\n1\n101\n102\nSample Output 4:\n\nSample Input 5:\n\n1\n101\n102\nSample Output 5:\n\n\"\"\"\n\n\"\"\"\n\u0421\u0444\u043e\u0440\u043c\u0443\u043b\u0438\u0440\u0443\u0439\u0442\u0435 \u0438 \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0442\u0440\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u0432\u0435\u0434\u0435\u043d \u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0432\u043e \u0432\u0441\u0435\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\u0445 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u0430 \u043f\u043e \u043e\u0434\u043d\u043e\u0439 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435.\n\nSample Input 1:\n\n12\n34\n3\n\nSample Output 1:\n\n46\nSample Input 2:\n\n12\n3\n\nSample Output 2:\n\n9\nSample Input 3:\n\n\nSample Output 3:\n\nSample Input 4:\n\nSample Output 4:\n\nSample Input 5:\n\nSample Output 5:\n\n\"\"\"\n\n\"\"\"\n\u0421\u0444\u043e\u0440\u043c\u0443\u043b\u0438\u0440\u0443\u0439\u0442\u0435 \u0438 \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0442\u0440\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u0432\u0435\u0434\u0435\u043d\u0430 \u043f\u0443\u0441\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u043e\u0439. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0432\u043e \u0432\u0441\u0435\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\u0445 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u0430 \u043f\u043e \u043e\u0434\u043d\u043e\u0439 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435.\n\nSample Input 1:\n\n12\n34\n3\n\nSample Output 1:\n\n46\nSample Input 2:\n\n12\n3\n\nSample Output 2:\n\n9\nSample Input 3:\n\nSample Output 3:\n\nSample Input 4:\n\nSample Output 4:\n\nSample Input 5:\n\nSample Output 5:\n\n\"\"\"\n\n\"\"\"\n\u0421\u0444\u043e\u0440\u043c\u0443\u043b\u0438\u0440\u0443\u0439\u0442\u0435 \u0438 \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 \u0447\u0438\u0441\u0435\u043b, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u0432\u0435\u0434\u0435\u043d\u0430 \u043f\u0443\u0441\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430. \u041f\u0440\u0438 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u0438 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u044f\u0442\u043e\u0439, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0443\u043c\u043c\u0443 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0438 \u0437\u0430\u0442\u0435\u043c \u043d\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0432\u043e \u0432\u0441\u0435\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\u0445 \u043f\u043e\u0441"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n3 3\\n4 4\\n3 2\\n1 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\n\"\"\"\nimport sys\n\ns = sys.stdin.readline().strip()\nn = int(s)\n\ns = sys.stdin.readline().strip()\na = list(map(int, s.split()))\n\ncount = 0\nfor i in range(n-2):\n    if a[i] == a[i+1] and a[i+1] == a[i+2]:\n        count += 1"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == \"Yes\"\nprint(solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\"))\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n1 2\\n6 6\\n4 4\\n3 3\") == 'Yes'\nassert solution(\"5\\n1 2\\n3 3\\n4 4\\n5 5\") == 'No'\nassert solution(\"2\\n1 1\\n1 1\") == 'Yes'\nassert solution(\"2\\n2 2\") == 'No'\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2') == 'Yes'\n\"\"\"\nfrom itertools import zip_longest\nfrom collections import Counter\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1\\n6 6') == \"Yes\"\nassert solution('5 1\\n6 6\\n4 4\\n3 3\\n3 2') == \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == 4\n\"\"\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2') == '4'\n\"\"\"\n\nfrom math import pi\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"4\"\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\") == 4\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"4\"\n\"\"\"\n\nr = int(input())\nprint(int(r*r*2))\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"4\"\n'''\n\nimport math\n\nr = int(input())\n\nprint(math.floor(2*math.pi*r*r/math.pi))\n\n\n\n'''\nNotes:\n\n1. The floor function returns the largest integer not greater than its argument.\n\n2. The double slash is an operator that performs floor division.\n\n3. The double slash is an operator that performs floor division.\n\n4. The * operator is used to multiply a value by an integer.\n\n5. The exponent operator is written as **.\n\n6. The modulo operator is written as %.\n\n7. The modulo operator returns the value of the first operand modulo the second operand.\n\n8. The division operator is written as /.\n\n9. The division operator returns the value of the first operand divided by the second operand.\n\n10. The modulo operator returns the remainder after integer division.\n\n11. The value of the result is an integer if the result of the division is zero.\n\n12. The division operator uses truncation, not floating point, to perform integer division.\n\n13. If the result of the division is zero, the modulo operator returns zero.\n\n14. If the result of the division is nonzero, the modulo operator returns the value of the remainder of the integer division.\n\n15. If the result of the division is a negative number, the result of the modulo operator is the reverse of the result of the division operator.\n\n16. The difference between the division operator and the modulo operator is that the modulo operator returns a nonnegative value.\n\n17. The modulo operator returns the value of the first operand modulo the second operand.\n\n18. The modulo operator is written as %.\n\n19. The modulo operator returns the value of the first operand modulo the second operand.\n\n20. The modulo operator returns the value of the first operand modulo the second operand.\n\n21. The modulo operator is written as %.\n\n22. The modulo operator returns the value of the first operand modulo the second operand.\n\n23. The modulo operator is written as %.\n\n24. The modulo operator returns the value of the first operand modulo the second operand.\n\n25. The modulo operator is written as %.\n\n26. The modulo operator returns the value of the first operand modulo the second operand.\n\n27. The modulo operator is written as %.\n\n28. The modulo operator returns the value of the first operand modulo the second operand.\n\n29. The modulo operator is written as %.\n\n30. The modulo operator returns the value of the first operand modulo the second operand.\n\n31. The modulo operator is written as %.\n\n32. The modulo operator returns the value of the first operand modulo the second operand.\n\n33. The modulo operator is written as %.\n\n34. The modulo operator returns the value of the first operand modulo the second operand.\n\n35. The modulo operator is written as %.\n\n36. The modulo operator returns the value of the first operand modulo the second operand.\n\n37. The modulo operator is written as %.\n\n38. The modulo operator returns the value of the first operand modulo the second operand.\n\n39. The modulo operator is written as %.\n\n40. The modulo operator returns the value of the first operand modulo the second operand.\n\n41. The modulo operator is written as %.\n\n42. The modulo operator returns the value of the first operand modulo the second operand.\n\n43. The modulo operator is written as %.\n\n44. The modulo operator returns the value of the first operand modulo the second operand.\n\n45. The modulo operator is written as %.\n\n46. The modulo operator returns the value of the first operand modulo the second operand.\n\n47. The modulo operator is written as %.\n\n48. The modulo operator returns the value of the first operand modulo the second operand.\n\n49. The modulo operator is written as %.\n\n50. The modulo operator returns the value of the first operand modulo the second operand.\n\n51. The modulo operator is written as %.\n\n52. The modulo operator returns the value of the first operand modulo the second operand.\n\n53. The modulo operator is written as %.\n\n54. The modulo operator returns the value of the first operand modulo the second operand.\n\n55. The modulo operator is written as %.\n\n56. The modulo operator returns the value of the first operand modulo the second operand.\n\n57. The modulo operator is written as %.\n\n58. The modulo operator returns the value of the first operand modulo the second operand.\n\n59. The modulo operator is written as %.\n\n60. The modulo operator returns the value of the first operand modulo the second operand.\n\n61. The modulo operator is written as %.\n\n62. The modulo operator returns the value of the first operand modulo the second operand.\n\n63. The modulo operator is written as %.\n\n64. The modulo operator returns the value of the first operand modulo the second operand.\n\n65. The modulo operator is written as %.\n\n66. The modulo operator returns the value of the first operand modulo the second operand.\n\n67. The modulo operator is written as %.\n\n68. The modulo operator returns the value of the first operand modulo the second operand.\n\n69. The modulo operator is written as %.\n\n70. The modulo operator returns the value of the first operand modulo the second operand.\n\n71. The modulo operator is written as %.\n\n72. The modulo operator returns the value of the first operand modulo the second operand.\n\n73. The modulo operator is written as %.\n\n74. The modulo operator returns the value of the first operand modulo the second operand.\n\n75. The modulo operator is written as %.\n\n76. The modulo operator returns the value of the first operand modulo the second operand.\n\n77. The modulo operator is written as %.\n\n78. The modulo operator returns the value of the first operand modulo the second operand.\n\n79. The modulo operator is written as %.\n\n80. The modulo operator returns the value of the first operand modulo the second operand.\n\n81. The modulo operator is written as %.\n\n82. The modulo operator returns the value of the first operand modulo the second operand.\n\n83. The modulo operator is written as %.\n\n84. The modulo operator returns the value of the first operand modulo the second operand.\n\n85. The modulo operator is written as %.\n\n86. The modulo operator returns the value of the first operand modulo the second operand.\n\n87. The modulo operator is written as %.\n\n88. The modulo operator returns the value of the first operand modulo the second operand.\n\n89. The modulo operator is written as %.\n\n90. The modulo operator returns the value of the first operand modulo the second operand.\n\n91. The modulo operator is written as %.\n\n92. The modulo operator returns the value of the first operand modulo the second operand.\n\n93. The modulo operator is written as %.\n\n94. The modulo operator returns the value of the first operand modulo the second operand.\n\n95. The modulo operator is written as %.\n\n96. The modulo operator returns the value of the first operand modulo the second operand.\n\n97. The modulo operator is written as %.\n\n98. The mod"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == '4'\n\"\"\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(5) == 6\nassert solution(100) == \"INPUT ERROR\"\n\"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == 4\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n') == 1\nassert solution('2\\n') == 2\nassert solution('3\\n') == 4\nassert solution('5\\n') == 16\n\"\"\"\n\nfrom math import pi"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 8 5 1\\n\") == \"Yes\"\nassert solution(\"4 8 5 1\\n\") == \"No\"\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\nassert solution('4\\n1 1 1 1') == 'No'\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 8 5 1\") == \"Yes\"\n\"\"\"\n\nn = int(input())\nnums = [int(i) for i in input().split()]\n\nmax_num = max(nums)\nmin_num = sum(nums) - max_num"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 8 5 1') == 'Yes'\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 8 5 1') == \"Yes\"\nassert solution('4 9 5 1') == \"No\"\n\"\"\"\n\nN, *sides = [int(x) for x in input().split()]\nside_sums = sum(sides[1:])"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 8 5 1\\n\") == \"Yes\"\n\n---\n\"\"\"\n\nfrom unittest import TestCase\n\n\nclass TestConvexPolygon(TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"4 8 5 1\\n\"), \"Yes\")\n\n    def test_solution2(self):\n        self.assertEqual(solution(\"4 7 5 1\\n\"), \"No\")\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8 5 1\") == \"Yes\"\nassert solution(\"4 10 5 6\") == \"No\"\n\"\"\""
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 8 5 1\") == \"Yes\"\nassert solution(\"5 3 8 5 1\") == \"No\"\nassert solution(\"5 3 3 5 1\") == \"Yes\"\nassert solution(\"4 3 1 5 1\") == \"No\"\nassert solution(\"5 5 5 5 1\") == \"Yes\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == '702'\n\n---Solution---\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 7\\n3 2\\n1 7\") == \"702\"\nprint(\"Passed\")\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 7\\n3 2\\n1 7\") == \"702\"\nassert solution(\"5 5\\n1 7\\n3 2\\n1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 7\\n3 2\\n1 7\") == \"702\"\n\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\"\n\nimport sys\n\ns = sys.stdin.read().split('\\n')\ns = s[:-1]\nn = list(map(int, s[0].split()))\nn = n[0]\nm = list(map(int, s[1].split()))\nm = m[0]\n\nminn = 0\nfor i in range(1, n+1):\n    if i == 1:\n        minn = i\n    elif i == m:\n        minn = i\nprint(minn)\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0438\u0449\u0435\u0442 \u0441\u0440\u0435\u0434\u0438 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u043c\u0443 \u043e\u0442\u0440\u0435\u0437\u043a\u0443 [155110; 155210], \u0447\u0438\u0441\u043b\u0430, \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u0440\u043e\u0432\u043d\u043e \u0448\u0435\u0441\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0446\u0438\u0444\u0440, \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f. \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0430\u043a\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0438\u0437 \u043d\u0438\u0445. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043b\u044e\u0431\u043e\u0435 \u0438\u0437 \u043d\u0438\u0445.\n\n-----\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0430 Python-----\nimport sys\n\nnumbers = []\n\nfor i in range(155110, 155210):\n    if len(set(str(i))) == 6:\n        numbers.append(i)"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 7\\n3 2\\n1 7\") == \"702\"\n\"\"\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 7\\n3 2\\n1 7') == '702'\nassert solution('2 2\\n1 7\\n1 7') == '-1'\nassert solution('2 3\\n1 7\\n1 7') == '-1'\nassert solution('3 5\\n1 7\\n1 7\\n3 2\\n1 7') == '-1'\n\n\"\"\"\n\nfrom typing import Iterator, List, Dict, Tuple"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2') == '702'\nassert solution('3 3') == '-1'\nassert solution('1 7') == '702'\n\"\"\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2') == '9'\n\"\"\"\n\n\"\"\"\nGiven an integer N and an integer K. Find the number of triples (a,b,c) such that:\na,b and c are positive integers not greater than N and\na+b, b+c and c+a are all multiples of K.\nThe order of a,b,c does not matter.\n\nInput Format:\nThe first line of input contains T, the number of test cases.\nEach of the next T lines contains two space-separated integers N and K.\n\nConstraints:\n1 <= T <= 100\n1 <= N, K <= 2 * 10^5\n\nOutput Format:\nFor each test case, print the number of such triples, separated by newline.\n\nSample Input:\n3\n3 2\n5 1\n8 3\n\nSample Output:\n6\n1\n0\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3') == '9'\n\"\"\"\n\nimport sys\n\nN, K = map(int, input().split())\n\ncount = 0\n\nfor a in range(1, N):\n    for b in range(1, N):\n        if (a + b) % K == 0 and (b + a) % K == 0:\n            count += 1\n\nprint(count)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2') == '9'\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('3 2') == '9'\n\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2') == '9'\n\n\"\"\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2') == '9'\n\"\"\"\n\nfrom typing import Tuple, Set\n\nMAX_INT: int = 2_000_000_000\nMAX_K: int = 2_000_000_000\n\nPOWERS_DICT: dict = {i: pow(i, i) for i in range(MAX_K)}\nPOWERS_SET: Set = set(POWERS_DICT.values())\n\nN, K = list(map(int, stdin.split()))\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == 1\n\"\"\"\n\nfrom collections import Counter\nimport re"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == 9\n\"\"\""
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"9\"\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"-9\") == \"1011\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('-9') == '1011'\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9') == '1011'\nassert solution('-9') == '1011'\nassert solution('923') == '10111'\nassert solution('-923') == '10111'\nassert solution('-925') == '11101'\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10001010\") == \"1010\"\nassert solution(\"10\") == \"1010\"\nassert solution(\"-11\") == \"1111111111111111111111111011\"\n\"\"\"\nimport math\n\nn = int(input())"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('-9') == '1011'"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('-9') == '1011'\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('-9') == '1011'\n\"\"\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"-9\") == \"1011\"\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"-9\") == \"1011\"\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('-9') == '1011'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\\n\") == \"12\"\n\n---Problem---\nN \u500b\u306e\u58f2\u308a\u4e0a\u3052\u5e97\u304c\u3042\u308a\u307e\u3059\u3002\n\u5404\u5e97\u306f N \u4eba\u306e\u58f2\u308a\u4e0a\u3052\u5e97\u304c\u3042\u308a\u307e\u3059\u3002\nTakahashi \u306f\u3001\u58f2\u308a\u4e0a\u3052\u5e97\u306b\u3068\u3063\u3066 1 \u5186\u3042\u305f\u308a\u3067 M \u30ea\u30dd\u30f3\u30c9\u3092\u8cfc\u5165\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\u305d\u308c\u305e\u308c\u306e\u58f2\u308a\u4e0a\u3052\u5e97\u306b\u3068\u3063\u3066\u58f2\u308a\u4e0a\u3052\u3055\u308c\u308b\u8cfc\u5165\u91cf\u306e\u6700\u5927\u5024\u306f\u3001\u81ea\u5206\u304c\u6301\u3063\u3066\u3044\u308b M \u30ea\u30dd\u30f3\u30c9\u3088\u308a\u3082\u4f4e\u304f\u306a\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nTakahashi \u306f\u58f2\u308a\u4e0a\u3052\u5e97\u3092\u8cb7\u3063\u305f\u3068\u304d\u306b\u3001\u58f2\u308a\u4e0a\u3052\u3055\u308c\u308b\u8cfc\u5165\u91cf\u306e\u6700\u5927\u5024\u304c K \u30ea\u30dd\u30f3\u30c9\u4ee5\u4e0b\u306b\u306a\u308b\u3068\u304d\u3001\u305d\u306e\u5e97\u3092\u8cb7\u3046\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\u306a\u304a\u3001\u58f2\u308a\u4e0a\u3052\u3055\u308c\u308b\u8cfc\u5165\u91cf\u306e\u6700\u5927\u5024\u304c K \u30ea\u30dd\u30f3\u30c9\u4ee5\u4e0a\u306b\u306a\u308b\u5834\u5408\u3001\u305d\u306e\u5e97\u3067\u3082\u58f2\u308a\u4e0a\u3052\u3055\u308c\u308b\u6700\u5927\u8cfc\u5165\u91cf\u306e\u6700\u5c0f\u5024\u306f K \u30ea\u30dd\u30f3\u30c9\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\u58f2\u308a\u4e0a\u3052\u3055\u308c\u308b\u8cfc\u5165\u91cf\u306e\u6700\u5927\u5024\u306f\u3001\u81ea\u5206\u304c\u6301\u3063\u3066\u3044\u308b M \u30ea\u30dd\u30f3\u30c9\u3088\u308a\u3082\u4f4e\u304f\u306a\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nTakahashi \u304c\u58f2\u308a\u4e0a\u3052\u5e97\u3092\u8cb7\u3044\u305f\u6642\u306b\u3001\u58f2\u308a\u4e0a\u3052\u3055\u308c\u308b\u8cfc\u5165\u91cf\u306e\u6700\u5927\u5024\u304c\u6700\u5927\u3067\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u306a\u3089\u3001\u3053\u306e\u5e97\u3067\u58f2\u308a\u4e0a\u3052\u3055\u308c\u308b\u6700\u5927\u8cfc\u5165\u91cf\u306e\u6700\u5c0f\u5024\u306f\u3001K \u30ea\u30dd\u30f3\u30c9\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\nTakahashi \u304c\u58f2\u308a\u4e0a\u3052\u5e97\u3092\u8cb7\u3063\u305f\u6642\u306b\u3001\u58f2\u308a\u4e0a\u3052\u3055\u308c\u308b\u8cfc\u5165\u91cf\u306e\u6700\u5927\u5024\u304c\u6700\u5927\u3067\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u306a\u3089\u3001\u3053\u306e\u5e97\u3067\u3082\u58f2\u308a\u4e0a\u3052\u3055\u308c\u308b\u6700\u5927\u8cfc\u5165\u91cf\u306e\u6700\u5c0f\u5024\u306f\u3001K \u30ea\u30dd\u30f3\u30c9\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u3088\u3046\u306a\u72b6\u6cc1\u306b\u306a\u3063\u305f\u3089\u3001Takahashi \u306f\u58f2\u308a\u4e0a\u3052\u5e97\u3092\u8cb7\u3063\u305f\u3068\u304d\u306b\u58f2\u308a\u4e0a\u3052\u3055\u308c\u308b\u8cfc\u5165\u91cf\u306e\u6700\u5927\u5024\u304c\u6700\u5927\u3067\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u306a\u3089\u3001\u3053\u306e\u5e97\u3067\u3082\u58f2\u308a\u4e0a\u3052\u3055\u308c\u308b\u6700\u5927\u8cfc\u5165\u91cf\u306e\u6700\u5c0f\u5024\u306f\u3001K \u30ea\u30dd\u30f3\u30c9\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\nTakahashi \u304c\u58f2\u308a\u4e0a\u3052\u5e97\u3092\u8cb7\u3063\u305f\u6642\u306b\u3001\u58f2\u308a\u4e0a\u3052\u3055\u308c\u308b\u8cfc\u5165\u91cf\u306e\u6700\u5927\u5024\u304c\u6700\u5927\u3067\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u306a\u3089\u3001\u3053\u306e\u5e97\u3067\u3082\u58f2\u308a\u4e0a\u3052\u3055\u308c\u308b\u6700\u5927\u8cfc\u5165\u91cf\u306e\u6700\u5c0f\u5024\u306f\u3001K \u30ea\u30dd\u30f3\u30c9\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\nTakahashi \u304c\u58f2\u308a\u4e0a\u3052\u5e97\u3092\u8cb7\u3063\u305f\u6642\u306b\u3001\u58f2\u308a\u4e0a\u3052\u3055\u308c\u308b\u8cfc\u5165\u91cf\u306e\u6700\u5927\u5024\u304c\u6700\u5927\u3067\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u306a\u3089\u3001\u3053\u306e\u5e97\u3067\u3082\u58f2\u308a\u4e0a\u3052\u3055\u308c\u308b\u6700\u5927\u8cfc\u5165\u91cf\u306e\u6700\u5c0f\u5024\u306f\u3001K \u30ea\u30dd\u30f3\u30c9\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\nTakahashi \u304c\u58f2\u308a\u4e0a\u3052\u5e97\u3092\u8cb7\u3063\u305f\u6642\u306b\u3001\u58f2\u308a\u4e0a\u3052\u3055\u308c\u308b\u8cfc\u5165\u91cf\u306e\u6700\u5927\u5024\u304c\u6700\u5927\u3067\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u306a\u3089\u3001\u3053\u306e\u5e97\u3067\u3082\u58f2\u308a\u4e0a\u3052\u3055\u308c\u308b\u6700\u5927\u8cfc\u5165\u91cf\u306e\u6700\u5c0f\u5024\u306f\u3001K \u30ea\u30dd\u30f3\u30c9\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\u58f2\u308a\u4e0a\u3052\u3055\u308c\u308b\u8cfc\u5165\u91cf\u306e\u6700\u5927\u5024\u306f\u3001\u81ea\u5206\u304c\u6301\u3063\u3066\u3044\u308b M \u30ea\u30dd\u30f3\u30c9\u3088\u308a\u3082\u4f4e\u304f\u306a\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u306e\u3088\u3046\u306b\u3001\u81ea\u5206\u304c\u6301\u3063\u3066\u3044\u308b M \u30ea\u30dd\u30f3\u30c9\u3088\u308a\u3082\u4f4e\u304f\u306a\u308b\u8cfc\u5165\u91cf\u306e\u6700\u5927\u5024\u306f\u3001\u81ea\u5206\u304c\u6301\u3063\u3066\u3044\u308b M \u30ea\u30dd\u30f3\u30c9\u3088\u308a\u3082\u4f4e\u304f\u306a\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u6700\u5927\u8cfc\u5165\u91cf\u306e\u6700\u5c0f\u5024\u306b\u306a\u308a\u307e\u3059\u3002\n\u58f2\u308a\u4e0a\u3052\u3055\u308c\u308b\u8cfc\u5165\u91cf\u306e\u6700\u5927\u5024\u306f\u3001\u81ea\u5206\u304c\u6301\u3063\u3066\u3044\u308b M \u30ea\u30dd\u30f3\u30c9\u3088\u308a\u3082\u4f4e\u304f\u306a\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u6700\u5927\u8cfc\u5165\u91cf\u306e\u6700\u5c0f\u5024\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u6761\u4ef6\n1. 2 \\leq N \\leq 10^5\n2. 1 \\leq A_i \\leq 10^9\n3. 1 \\leq B_i \\leq 10^5\n4. 1 \\leq M \\leq 10^5\n5. M \\leq B_i\n6. 1 \\leq K \\leq 10^5\n7. K \\leq 10^5\n8. N \\leq M\n9. \u58f2\u308a\u4e0a\u3052\u5e97\u306e\u6570\u306f 1 \u518a\u3042\u308b\u3057\u3001\u3042\u308b\u5e97\u304b\u3089\u58f2\u308a\u4e0a\u3052\u308b\u5e97\u306e\u6570\u306f 1 \u518a\u3042\u308b\u3057\n10. K \u30ea\u30dd\u30f3\u30c9\u4ee5\u4e0b\u306e\u6700\u5927\u8cfc\u5165\u91cf\u306f K \u30ea\u30dd\u30f3\u30c9\u4ee5\u4e0b\n11. K \u30ea\u30dd\u30f3\u30c9\u4ee5\u4e0b\u306e\u6700\u5927\u8cfc\u5165\u91cf\u306f K \u30ea\u30dd\u30f3\u30c9\u4ee5\u4e0b\n12. N \u4eba\u306e\u58f2\u308a\u4e0a\u3052\u5e97\u306e\u4e2d\u3067\u6700\u5927\u8cfc\u5165\u91cf\u306e\u6700\u5c0f\u5024\u306f K "
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 9\\n2 4\") == \"12\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n2 4\") == \"12\"\n\"\"\"\nimport sys\n\n\nclass BinarySearchTreeNode:\n    def __init__(self, key, value, left=None, right=None, parent=None):\n        self.key = key\n        self.value = value\n        self.left = left\n        self.right = right\n        self.parent = parent\n\n    def insert(self, key, value):\n        if key < self.key:\n            if self.left is None:\n                self.left = BinarySearchTreeNode(key, value)\n                return self.left\n            else:\n                return self.left.insert(key, value)\n        elif key > self.key:\n            if self.right is None:\n                self.right = BinarySearchTreeNode(key, value)\n                return self.right\n            else:\n                return self.right.insert(key, value)\n\n    def find(self, key):\n        if key < self.key:\n            if self.left is None:\n                return None\n            else:\n                return self.left.find(key)\n        elif key > self.key:\n            if self.right is None:\n                return None\n            else:\n                return self.right.find(key)\n        else:\n            return self\n\n    def delete(self, key):\n        if key < self.key:\n            if self.left is None:\n                return None\n            else:\n                return self.left.delete(key)\n        elif key > self.key:\n            if self.right is None:\n                return None\n            else:\n                return self.right.delete(key)\n        else:\n            if self.left is None and self.right is None:\n                if self.parent is not None:\n                    if self.parent.left == self:\n                        self.parent.left = None\n                    else:\n                        self.parent.right = None\n                    return self.parent\n                else:\n                    return None\n            elif self.right is None:\n                self.key = self.left.key\n                self.value = self.left.value\n                self.left = self.left.left\n                return self\n            elif self.left is None:\n                self.key = self.right.key\n                self.value = self.right.value\n                self.right = self.right.right\n                return self\n            else:\n                successor = self.right.findMin()\n                self.key = successor.key\n                self.value = successor.value\n                self.delete(successor.key)\n                return self\n\n    def findMin(self):\n        if self.left is None:\n            return self\n        else:\n            return self.left.findMin()\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == '12'\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 9\\n2 4\") == \"12\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1_000_000)\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\n\ncans = []\nprice = []\nfor _ in range(N):\n    cans.append(int(input()))\n    price.append(int(input()))"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input_str) == output_str"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 9\\n2 4\") == \"12\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 5\\n4 9\\n2 4') == '12'\n\"\"\"\n\nfrom sys import stdin\n\ninputs = stdin.readlines()\n\nn, m = map(int, inputs[0].split())\ndrink_list = [list(map(int, line.split())) for line in inputs[1:]]\n\ncandidates = []\nfor i in range(n):\n    start, end = 0, m\n    for j in range(drink_list[i][0]):\n        end -= drink_list[i][1]\n    candidates.append((start, end))\n\ncandidates.sort(key=lambda x: x[1])\n\ntotal = 0\nfor i in range(n):\n    start, end = candidates[i]\n    total += start * drink_list[i][0]\n    if total > m:\n        print(i, candidates[i][1], candidates[i][0])\n        break\n    total += end * drink_list[i][0]\n\nprint(total)\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n4 9\\n2 4\") == \"12\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n2 4\") == \"12\"\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def solution(self, stdin: str):\n        \n        data = stdin.split()\n        \n        N = int(data[0])\n        M = int(data[1])\n\n        data = stdin.split()\n\n        A = []\n        B = []\n\n        for i in range(N):\n            A.append(int(data[i*2]))\n            B.append(int(data[i*2+1]))\n\n        A.sort(reverse=True)\n        B.sort(reverse=True)\n\n        count = 0\n        for i in range(N):\n            if count >= M:\n                break\n\n            count += B[i]\n\n        return count*A[i]\n        "
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == '2'\nassert solution(\"5\\n7 3 4 1 2\") == '0'"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n10 4 8 7 3\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 4 8 7 3\") == 2\n\"\"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5\n10 4 8 7 3''') == '2'\nassert solution('''2\n3 5\n''') == '1'\n'''"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3\\n1\\n1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n10 4 8 7 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2 2 3 4 5\\n') == '1'\nassert solution('1 2 2 3 4 5') == '2'\nassert solution('1 2 3 4 5\\n') == '2'\nassert solution('1 2 3 3 3\\n') == '0'\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"2\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\\n\") == '1'\nassert solution(\"5 3\\n1 2 3 4 5\\n\") == '2'\n\nsolution(stdin)"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n1 2 2 4 5') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2 2 4 5\") == \"1\"\nassert solution(\"5 3\\n1 2 3 3 3\") == \"0\"\n\n\n\"\"\"\n\n\nimport unittest\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''1 2 2 4 5''') == 1\nassert solution('''1 2 3 4 5''') == 2\nassert solution('''1 2 3 3 3''') == 0"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5 3\n1 2 2 4 5\n''') == '1'\n\"\"\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"2 2 2 4 5\") == \"2\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"2 2 2 4 5\") == \"2\"\nassert solution(\"1 2 3 4 5\") == \"1\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 2 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 3 3 3\") == \"0\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 3 5 4\") == \"2\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1\") == \"1\"\nassert solution(\"5 1\") == \"3\"\nassert solution(\"5 2\") == \"1\"\nassert solution(\"5 2\") == \"1\"\nassert solution(\"6 2\") == \"2\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 2 2 4 2 3') == '3'\n\nassert solution('6 5\\n1 2 2 4 2 3') == '3'\nassert solution('7 5\\n3 3 2 1 1 1 3') == '4'\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 5\\n1 2 2 4 2 3') == '3'\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"6 5\n1 2 2 4 2 3\n\"\"\"\n) == 3\n\nassert solution(\n\"\"\"7 5\n3 3 2 1 1 1 3\n\"\"\"\n) == 4\n\nassert solution(\n\"\"\"6 7\n1 1 1 1 1 1 2\n\"\"\"\n) == 1\n\nassert solution(\n\"\"\"6 6\n1 1 1 1 1 2 2\n\"\"\"\n) == 0\n\nassert solution(\n\"\"\"6 7\n1 2 2 3 2 3 3\n\"\"\"\n) == 2"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 2 4 2 3\\n\") == 3\n\"\"\"\n\nfrom sys import stdin\n\nn, k = map(int, stdin.readline().split())\nl = list(map(int, stdin.readline().split()))\n\nl.sort()\nmin_v, max_v = l[0], l[-1]\n\nprint(min_v - 1) if l[0] - 1 >= k else print(max_v + 1)\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n2 3 1 4') == '1'\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n7 5\n3 3 2 1 1 1 3\n''') == '4'"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 1 3\") == \"4\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n1 2 2 4 2 3') == '3'\n\"\"\""
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 2 4 2 3\\n\") == 3\n\"\"\""
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n1 2 2 4 2 3\") == \"3\"\nassert solution(\"6 5\\n1 2 2 4 2 3\") == \"4\"\nassert solution(\"7 5\\n3 3 2 1 1 1 3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\\n') == '10\\n9\\n1000\\n42000000000000'\n\"\"\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 1 1\\n1\\n1 1\\n1 1 1 1\\n1 1 1\\n1 1 1 1 1 1\\n\") == \"5\\n1\\n1\\n1\\n1\\n\"\n\n\"\"\"\n\nfrom functools import lru_cache"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"10\"\n\nassert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"9\"\n\nassert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"1000\"\n\nassert solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\") == \"42000000000000\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(expected_output)\n\n\"\"\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88') == '10\\n9\\n1000\\n42000000000000'\nprint(solution(input()))\n\n\n-----Test 2-----\n\nInput\n2\n1 2 3\n4 3 2\n\nOutput\n1\n1\n\"\"\"\n\nimport sys\nfrom collections import defaultdict, deque\nfrom typing import DefaultDict, Deque, List, Set, Tuple\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88''') == '10\\n9\\n1000\\n42000000000000'\n\"\"\"\n\n\nfrom sys import stdin\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88') == '10\\n9\\n1000\\n42000000000000'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 3\") == \"8\"\nassert solution(\"2 3 2\") == \"8\"\nassert solution(\"2 2 4\") == \"4\"\nassert solution(\"1 2 3\") == \"10\"\n\n\"\"\"\n\nimport sys\nimport random\nfrom typing import List, Dict, Optional\n\nfrom utils import timeit, measure\n\nDEBUG = False\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88') == '10\\n9\\n1000\\n42000000000000'\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\") == \"2\"\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 6\\n3 4 5') == '2'\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 6\\n3 4 5') == '2'\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 6\\n3 4 5') == '2'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 6\\n3 4 5\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6\\n3 4 5\") == \"2\"\nassert solution(\"1 1\\n10 10\") == \"0\"\nassert solution(\"1 10\\n10 10\") == \"1\"\n\"\"\"\nimport sys\n\nfrom typing import List\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 6\\n3 4 5') == '2'\n\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 6\\n3 4 5') == '2'\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6\\n3 4 5\") == 2\n\n\"\"\""
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 5\") == 2"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\nhoge\nenglish\nhoge\nenigma''') == 'No'\nassert solution('''4\nhoge\nenglish\nhoge\nenigma''') == 'No'\nassert solution('''4\nhoge\nenigma\nhoge\nhoge''') == 'Yes'\nassert solution('''4\nenigma\nenigma\nhoge\nhoge''') == 'Yes'\nassert solution('''4\nhoge\nenigma\nhoge\nenigma''') == 'Yes'\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\nassert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\nassert solution(\"4\\nhoge\\nenglish\\nenigma\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\nhoge\\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == 'No'\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\nhoge\nenglish\nhoge\nenigma''') == 'No'\n\nassert solution('''4\nhoge\nenglish\nhoge\nenigma''') == 'Yes'\nassert solution('''2\ntakahashi\ntakahashi''') == 'Yes'\n'''"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\nhoge\\ngoogle') == 'Yes'\nassert solution('2\\nhoge\\ngoogle') == 'No'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('hoge\\ne\\nenglish\\n\\nhoge\\nenigma') == 'No'\nassert solution('hoge\\nenglish\\nhoge\\nenigma') == 'Yes'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"hoge\\nenglish\\nhoge\\nenigma\") == \"No\"\n\"\"\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\nhoge\\nenglish\\nhoge\\nenigma') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nhoge\\nenglish\\nhoge\\nenigma\") == \"No\"\nassert solution(\"4\\ngrade\\nghost\\ngrade\\ngradient\") == \"No\"\nassert solution(\"4\\nabcde\\nabcdee\\nabcdee\\nabcdeee\\nabcdeeee\") == \"No\"\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\\n\") == '6'\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == 6\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"100 100\") == \"0\"\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n\") == \"6\"\n\"\"\"\n\n\"\"\"\nAt the party, each guest will receive one or more snack pieces.\nTakahashi predicts that the number of guests at this party will be A or B.\nFind the minimum number of pieces that can be evenly distributed to the guests in both of the cases predicted.\nWe assume that a piece cannot be divided and distributed to multiple guests.\n\n-----Constraints-----\n - 1 \\leq A, B \\leq 10^5\n - A \\neq B\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nPrint the minimum number of pieces that can be evenly distributed to the guests in both of the cases predicted.\n\n-----Sample Input-----\n2 3\n\n-----Sample Output-----\n6\n\nWhen we have six snack pieces, each guest can take three pieces if we have two guests, and each guest can take two if we have three guests.\n\"\"\"\n\n\"\"\"\nSolution 1:\n    Accepted\n    28 ms, faster than 86.34% of Python3 online submissions for Minimize Candy.\n    14.2 MB, less than 99.93% of Python3 online submissions for Minimize Candy.\n\"\"\"\nimport sys\n\nA, B = [int(x) for x in sys.stdin.readline().split()]\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '2 3'\n) == '6'\n\"\"\"\n\na, b = map(int, input().split())\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n') == '6'\n\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n') == '6'\n\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3') == 6\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1\") == \"6\"\nassert solution(\"2 3\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('A B\\n2 3') == '6'\nassert solution('2 3\\n3 3') == '3'\nassert solution('2 3\\n4 5') == '2'\nassert solution('4 3\\n4 5') == '1'\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(sardine) == xxxxxxxx\nprint(solution(sardine))\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\n-------------------"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\""
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"sardine\") == \"xxxxxxx\"\n\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('sardine') == 'xxxxxxx'\n\"\"\"\n\n\"\"\"\nSOLUTION 1\n\n- There are 5 solutions (see https://leetcode.com/discuss/interview-question/346762/)\n- Use a generator to get all possible combinations\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n1 2 1 1 3''') == 'Yes'\nassert solution('''5\n4 3 2 1 3''') == 'No'\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\n\"\"\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"Yes\"\nassert solution(\"3\\n3 2 3\") == \"No\"\nassert solution(\"1\\n1\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 1 3\") == \"Yes\"\nassert solution(\"5 1 1 1 1 1\") == \"No\"\nassert solution(\"1 3 2 1 1\") == \"Yes\"\nassert solution(\"1 2 1 1 2\") == \"No\"\nassert solution(\"1 2 1 3 1\") == \"No\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\nassert solution('5\\n3 1 4 2 1') == 'Yes'\nassert solution('5\\n1 2 1 2 1') == 'No'\nassert solution('5\\n1 1 1 2 1') == 'No'\nassert solution('5\\n1 1 1 1 3') == 'No'\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == \"Yes\"\nassert solution(test_input_2) == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 1 1 3') == 'Yes'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1 1 1 3') == 'Yes'\n\n------Problem------\nImplement a queue using stacks.\n\n-----Constraints-----\n - Implement the queue using two stacks.\n - Time Complexity should be O(1).\n - Space Complexity should be O(N).\n\n-----Input-----\nThe first line of input contains an integer, T, denoting the no of test cases. The first line of each test case is N, the number of elements which will be pushed into the queue.\n\nThe second line of each test case contains N space separated integers denoting the elements which are pushed into the queue.\n\n-----Output-----\nPrint the queue elements in the reverse order.\n\n-----Sample Input-----\n1\n6\n1 2 3 4 5 6\n\n-----Sample Output-----\n6 5 4 3 2 1"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == '1'\n\n------Hints------\n- Solve the problem for a single integer C and a vector of N integers in O(N) time.\n\"\"\"\n\nfrom functools import reduce\nfrom typing import List, Union, Tuple\n\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        \"\"\"\n        :param stdin: Input\n        :return: Output\n        \"\"\"\n        (n, m, c), *data = stdin.split()\n        data = [int(i) for i in data]\n        (b, *rest) = data\n\n        return str(sum(\n            reduce(lambda x, y: x + y, [b * i for i in data], 0) + c\n            for data in [[i for i in range(1, m + 1)] for _ in range(0, int(n))]\n        ) or 0)\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == '1'\n\n------"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\\n') == '1'\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1') == 1\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\nprint(\"Simple tests\")\nprint(solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\"))\nprint(solution(\"4 5 -10\\n1 2 3\\n3 2 1\\n1 2 2\\n2 4 2\"))\n\n-----\ncomplexity: O(n log m)\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2 1\\n1 2 2') == 1\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == '1'\n\"\"\"\n\nfrom itertools import product\nfrom typing import List"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2') == '1'\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"2 3 -10\\n\"\n\"1 2 3\\n\"\n\"3 2 1\\n\"\n\"1 2 2\\n\"\n) == \"1\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\nassert solution('1000') == '1000'\n\nassert solution('100') == '100'\n\nassert solution('1') == '1000'\n\nassert solution('10') == '10'"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == '1000'\nassert solution(\"2\") == '2000'\nassert solution(\"3\") == '3000'\nassert solution(\"4\") == '4000'\nassert solution(\"10\") == '10000'\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1900') == 100\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1234) == 23\nassert solution(3528) == 45\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1900\") == 100\n\"\"\""
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1900\") == \"100\"\nprint(\"Test pass.\")\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20\") == 2\n\"\"\"\n\nN = int(input())\nprint(N % 100)\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1000') == '0'\nassert solution('2000') == '100'\nassert solution('10000') == '1000'\n\n\"\"\"\n\nimport unittest\nfrom math import floor"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"19\") == \"100\"\n\"\"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000\") == \"1000\"\nassert solution(\"1900\") == \"100\"\nassert solution(\"5000\") == \"2500\"\nassert solution(\"5000\") == \"250\"\nassert solution(\"7000\") == \"1000\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n3 5 2\\n4 5') == 9\n\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5 2\\n4 5\\n\") == 9\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n3 5 2\\n4 5') == '9'\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3 5 2\\n4 5\") == \"9\"\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 1 1\\n1 1 1\") == \"3\"\nassert solution(\"4\\n1 1 1\\n1 1 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n3 5\\n\") == \"9\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nA = list(map(int, sys.stdin.readline().strip().split()))\nB = list(map(int, sys.stdin.readline().strip().split()))"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n5 1\\n3 2\") == 9\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n3 5 2\\n4 5') == '9'\n\"\"\"\nimport os"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 5 2\\n4 5\") == \"9\"\nprint(\"Teste unit\u00e1rio passou!\")\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\n3 5\\n') == '9'\n\"\"\"\n\nimport unittest\nfrom unittest.mock import patch\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\"\n\nimport math\n\nfrom collections import Counter\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'No War'\n\n----\n\nOur world is one-dimensional, and ruled by two empires called Empire A and Empire B.\nThe capital of Empire A is located at coordinate X, and that of Empire B is located at coordinate Y.\nOne day, Empire A becomes inclined to put the cities at coordinates x_1, x_2,..., x_N under its control, and Empire B becomes inclined to put the cities at coordinates y_1, y_2,..., y_M under its control.\nIf there exists an integer Z that satisfies all of the following three conditions, they will come to an agreement, but otherwise war will break out.\n - X < Z \\leq Y\n - x_1, x_2,..., x_N < Z\n - y_1, y_2,..., y_M \\geq Z\nDetermine if war will break out.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N, M \\leq 100\n - -100 \\leq X < Y \\leq 100\n - -100 \\leq x_i, y_i \\leq 100\n - x_1, x_2,..., x_N \\neq X\n - x_i are all different.\n - y_1, y_2,..., y_M \\neq Y\n - y_i are all different.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M X Y\nx_1 x_2... x_N\ny_1 y_2... y_M\n\n-----Output-----\nIf war will break out, print War; otherwise, print No War.\n\n-----Sample Input-----\n3 2 10 20\n8 15 13\n16 22\n\n-----Sample Output-----\nWar\n\nThe choice Z = 16 satisfies all of the three conditions as follows, thus they will come to an agreement.\n - X = 10 < 16 \\leq 20 = Y\n - 8, 15, 13 < 16\n - 16, 22 \\geq 16"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\nassert solution(\"3 2 10 20\\n15 15 15\\n16 22\") == \"War\"\n\n\"\"\"\n\nfrom typing import List, Dict\nimport math\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\nassert solution(\"4 2 10 20\\n8 15 13\\n16 22\") == \"War\"\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\nassert solution(\"3 2 10 20\\n8 15 13\\n1 16\") == \"War\"\n\"\"\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2 10 20\\n8 15 13\\n16 22') == 'No War'\n\"\"\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\\n\") == \"No War\"\n\"\"\"\n\nimport collections\nimport sys\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 10 20\") == \"No War\"\n\"\"\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 10 20\\n8 15 13\\n16 22\") == \"No War\"\n\"\"\""
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n4\\n3\\n4\\n5\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4\\n3\\n4"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\": 2\\n: 3\") == '6'\nassert solution(\": 1\\n: 3\") == '9'\nassert solution(\": 1\\n: 4\") == '10'\nassert solution(\": 1\\n: 4\") == '10'\nassert solution(\": 1\\n: 4\") == '10'\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n2\\n3\\n') == '6'\nassert solution('3\\n3\\n5\\n') == '10'\n\"\"\""
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\nassert solution(\"2\\n5\\n1\") == \"5\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1\\n2\\n3\") == \"6\"\n\"\"\"\n\n\"\"\"\nhttps://www.hackerrank.com/challenges/clocks/problem\n\n\"\"\""
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3\\n4\\n1\\n6\\n7') == '5'\n\"\"\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2\\n3\\n\") == \"6\"\nprint(\"Teste unit\u00e1rio OK\")\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2\\n3\") == \"5\"\nassert solution(\"2\\n4\\n5\") == \"3\"\n\"\"\"\n\nimport os\nimport sys\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2\\n3\") == \"6\"\n\"\"\"\n\nfrom sys import stdin\n\nN, *t = [int(line.strip()) for line in stdin.readlines()]\n\nt = sorted(t)\n\nmax_i = t[-1]\nmin_i = t[0]\n\nt = [max_i - min_i] + t\n\nprint(sum(t))"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n2\\n3\") == \"6\"\nprint(\"Test PASSED\")"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 4') == 0\nassert solution('2\\n1 2') == 0\nassert solution('5\\n1 2 3 4 5') == 0\n\"\"\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 2 3') == '0'\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\\n\") == \"0\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"3\\n1 2 3\"\n) == '0'\nassert solution(\n    \"2\\n1 2\"\n) == '1'\nassert solution(\n    \"2\\n2 1\"\n) == '1'\nassert solution(\n    \"2\\n3 1\"\n) == '2'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 4\") == \"0\"\n\"\"\"\nimport os\nfrom math import gcd\nfrom typing import List\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3\\n') == '0'\n\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '0'\nassert solution('''\n2\n1 2\n''') == '1'\nassert solution('''\n4\n1 2 3 4\n''') == '0'\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"0\"\nassert solution(\"2\\n1 2\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\\n\") == \"6\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n3 2 1\\n1 2 3\\n4 5 6\") == '6'\n\"\"\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3,3) == 6\n\nassert solution(4,3) == 0\n\nassert solution(3,4) == 2\n\nassert solution(2,2) == 0\nassert solution(1,1) == 0"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n\") == \"6\"\nassert solution(\"4 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\\n\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == \"2\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"4 3\\n1 2 3\\n4 5 6\\n7 8 9\\n10 11 12\") == \"0\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\\n\") == \"0\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 2 3\\n4 5 6\\n\") == \"6\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\na = [[int(x) for x in stdin.readline().split()] for _ in range(n)]\nb = [[a[i][j] for i in range(n - 1, -1, -1)] for j in range(m)]\n\nres = 0\nfor i in range(n):\n    for j in range(m):\n        res += a[i][j] * m - i * m - j\n        a[i][j] = m * n - i * m - j\n\nprint(res + b[0][0])"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\n\"\"\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"0\"\nassert solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\") == \"2\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(3, 3, [1, 2, 3, 4, 5, 6], [4, 5, 6, 7, 8, 9]) == 6\nassert solution(4, 3, [1, 2, 3, 4, 5, 6], [5, 10, 7, 8, 9, 11]) == 2\nassert solution(3, 4, [1, 2, 3, 4, 5, 6], [5, 10, 7, 8, 9, 11]) == 0\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n\n\n\"\"\"\nimport math\n\nn = int(input())\ns = list(map(int, input().split()))\n\ns_max = max(s)\nn_max = int(math.sqrt(2*n))\n\ns_unique = set(s)\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 10 2 3 14 5\") == \"5\"\nassert solution(\"2 100\") == \"99\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''6\n5 10 2 3 14 5\n''') == '5'\n\nassert solution('''2\n1 100\n''') == '99'\n\n\"\"\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\n\"\"\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\n\nassert solution(\"2\\n1 100\") == \"99\"\n\"\"\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\nassert solution(\"6\\n2 1 3 6 4 5\") == \"4\"\nassert solution(\"4\\n2 1 1 1\") == \"0\"\nassert solution(\"2\\n1 100\") == \"99\""
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 10 2 3 14 5') == '5'\nassert solution('4 10 2 3 14 5') == '5'\nassert solution('6 10 2 3 14 5') == '5'\nassert solution('4 10 2 3 14 5') == '5'\nassert solution('6 10 2 3 14 5') == '5'\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"6\\n5 10 2 3 14 5\"\n) == \"5\"\nassert solution(\n    \"2\\n1 100\"\n) == \"99\"\n\nassert solution(\n    \"10\\n1 100\"\n) == \"99\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n5 10 2 3 14 5\") == \"5\"\nassert solution(\"2\\n1 100\") == \"99\"\nprint('The local tests are done. Try Solution online tets!');\n\"\"\"\n\nn = int(input())\nA = [int(i) for i in input().split()]"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n0 1 0 1\") == '2'\nassert solution(\"4\\n1 0 1 1\") == '2'\nassert solution(\"4\\n0 1 1 1\") == '0'\nassert solution(\"5\\n0 0 0 1 1\") == '2'\nassert solution(\"5\\n1 1 1 1 1\") == '0'\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\"\n\nassert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\\n\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\\n\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\\n\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\\n\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 0 1 0 1\\n') == '2'\nassert solution('6\\n0 1 0 1 1 0\\n') == '2'\nassert solution('7\\n1 0 1 1 1 0 1\\n') == '3'\nassert solution('3\\n0 0 0\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 0 1 0 1\\n') == '2'\nassert solution('6\\n0 1 0 1 1 0\\n') == '2'\nassert solution('7\\n1 0 1 1 1 0 1\\n') == '3'\nassert solution('3\\n0 0 0\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 0 1 0 1\\n') == '2'\nassert solution('6\\n0 1 0 1 1 0\\n') == '2'\nassert solution('7\\n1 0 1 1 1 0 1\\n') == '3'\nassert solution('3\\n0 0 0\\n') == '0'\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 0 1 0 1\\n\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\\n\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\\n\") == \"3\"\nassert solution(\"3\\n0 0 0\\n\") == \"0\""
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n0 0 0') == '0'\nassert solution('4\\n1 0 1 0 1') == '2'\nassert solution('5\\n1 0 1 1 1 0') == '2'\n\nassert solution('6\\n0 1 0 1 1 0') == '2'\nassert solution('7\\n1 0 1 1 1 0 1') == '3'\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 0 1 0 1\") == \"2\"\nassert solution(\"6\\n0 1 0 1 1 0\") == \"2\"\nassert solution(\"7\\n1 0 1 1 1 0 1\") == \"3\"\nassert solution(\"3\\n0 0 0\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n0 0 0') == '0'\nassert solution('5\\n1 0 1 0 1') == '2'\nassert solution('6\\n1 0 1 1 1 0') == '2'\nassert solution('7\\n1 0 1 1 1 0 1') == '3'\nassert solution('7\\n0 0 0') == '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"7\") == \"0\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"7\") == \"0\"\nassert solution(\"16\") == \"4\"\n\"\"\""
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') == 0\nassert solution('7') == 0\n\"\"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"8\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '1'\nassert solution('3') == '2'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('7') == '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(8) == 0\nassert solution(10) == 4\nassert solution(12) == 6\nassert solution(15) == 0\nassert solution(17) == 0\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('1234') == 4\nassert solution('-1234') == -4\nassert solution('0') == 0\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == 3\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\nbrie hard\\ncamembert soft\\nfeta hard\\ngoat soft\\nmuenster soft\\nasiago hard\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stndin) == '4'"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\n\"\n\"asiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\\n\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(example) == \"parmesan\"\nassert solution(example2) == \"edam\"\nassert solution(example3) == \"feta\"\n\"\"\"\n\nfrom typing import List\n\nfrom collections import Counter"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n\nn = int(input())\n\nlista_cheeses = []\n\nfor i in range(n):\n    cheese = input().split(' ')\n    lista_cheeses.append(cheese)\n\nlista_cheeses.sort(key=lambda x: x[0])\nlista_cheeses.sort(key=lambda x: x[1])\n\nfor i in lista_cheeses:\n    print(i[0])\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\n\"\n\"brie soft\\n\"\n\"camembert soft\\n\"\n\"feta soft\\n\"\n\"goat soft\\n\"\n\"muenster soft\\n\"\n\"asiago hard\\n\"\n\"cheddar hard\\n\"\n\"gouda hard\\n\"\n\"swiss hard\") == '3'\n\nassert solution(\"6\\n\"\n\"parmesan hard\\n\"\n\"emmental hard\\n\"\n\"edam hard\\n\"\n\"colby hard\\n\"\n\"gruyere hard\\n\"\n\"asiago hard\") == '4'\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\\n\"\n\"brie soft\\n\"\n\"camembert soft\\n\"\n\"feta soft\\n\"\n\"goat soft\\n\"\n\"muenster soft\\n\"\n\"asiago hard\\n\"\n\"cheddar hard\\n\"\n\"gouda hard\\n\"\n\"swiss hard\") == 3\nassert solution(\"6\\n\"\n\"parmesan hard\\n\"\n\"emmental hard\\n\"\n\"edam hard\\n\"\n\"colby hard\\n\"\n\"gruyere hard\\n\"\n\"asiago hard\\n\") == 4\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard') == 3\nassert solution('6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard') == 4\nprint(\"You are awesome!\")"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 1 1\\n3 2 1 1') == '1 0 0 2'\n\"\"\""
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\n\nassert solution('7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1') == '0 0 0 1 0 2 4'"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\nassert solution('7\\n2 5 1 5 3 4 3') == '0 0 0 1 0 2 4'\n\"\"\"\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\n\nassert solution('7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1') == '0 0 0 1 0 2 4'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\") == \"0 0 0 1 0 2 4\"\n\n-----------------------------------------\n\n\u0417\u0430\u0434\u0430\u0447\u0430 1\n\u0412\u0430\u043c \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f \u0432 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0434\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u044b\u0445 \u0437\u043d\u0430\u043a\u043e\u0432.\n\n\u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044e if.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e N (1 <= N <= 10 000) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f. \u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 N \u0441\u0442\u0440\u043e\u043a \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0438 \u043e\u0434\u043d\u043e \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0435\u0433\u043e \u0447\u0438\u0441\u043b\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0447\u0438\u0441\u043b\u043e N \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e \u0441\u043b\u043e\u0432\u043e\u043c \"one\" \u0438 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u2014 \"two\").\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u0412\u0430\u0448\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f \u0432 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0434\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u044b\u0445 \u0437\u043d\u0430\u043a\u043e\u0432.\n\nSample Input 1:\n\n3\none\ntwo\nthree\nSample Output 1:\n\none   two   three\n0   0   0\n0   0   0\n0   0   0\nSample Input 2:\n\n4\none\ntwo\nthree\nfour\nSample Output 2:\n\none   two   three   four\n0   0   0   0   0\n0   0   0   0   0\n0   0   0   0   0\n0   0   0   0   0\nSample Input 3:\n\n6\none\ntwo\nthree\nfour\nfive\nsix\nSample Output 3:\n\none   two   three   four   five   six\n0   0   0   0   0   0   0\n0   0   0   0   0   0   0\n0   0   0   0   0   0   0\n0   0   0   0   0   0   0\n0   0   0   0   0   0   0\n0   0   0   0   0   0   0"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 1 2 3') == '0 1 2 3'\nassert solution('7\\n2 5 1 5 3 4 3') == '0 0 0 1 0 2 4'\nassert solution('1\\n1') == '0'\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n0 1 2 1\\n3 2 1 1\") == \"1 0 0 2\"\nassert solution(\"7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\") == \"0 0 0 1 0 2 4\""
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n0 1 2 1\\n3 2 1 1') == '1 0 0 2'\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"4\\n0 1 2 1\\n3 2 1 1\"\n) == \"1 0 0 2\"\nassert solution(\n    \"7\\n2 5 1 5 3 4 3\"\n) == \"0 0 0 1 0 2 4\"\nassert solution(\n    \"7\\n2 5 1 5 3 4 3\"\n) == \"0 0 0 1 0 2 4\"\n\nprint(\n    \"All test cases passed.\"\n)\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0\") == \"1\"\nassert solution(\"1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('101010') == '1'\nassert solution('011011') == '0'\n\"\"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 1 0\") == \"0\"\n\n-------------\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 1 1 0\") == \"0\"\nassert solution(\"0 0 0 1\") == \"1\"\nassert solution(\"0 1 1 0 1 1\") == \"0\"\nassert solution(\"0 1 1 1 0 1 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 1 1 0') == 0\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1110111010\") == \"1\"\n\n---\n\n>>> \n\"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 1 1 0\") == \"0\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0\") == \"0\"\n\nprint(\"Success\")\n\"\"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1110111\") == \"1\"\nassert solution(\"1110111\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 1 1 0') == '0'\nassert solution('0 0 1 1') == '1'\nassert solution('1 1 0 1') == '0'\nassert solution('1 1 0 1 1') == '1'\nassert solution('0 0 0 0') == '0'\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0\") == 0\nassert solution(\"1\") == 1\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1000 15 80\") == 'Yes'\n\"\"\"\n\nimport math\n\nD, T, S = [int(x) for x in stdin.split()]\nprint(\"Yes\" if (D/S) <= T else \"No\")\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\"\"\"\n\n\nfrom math import ceil\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\nimport math\nD, T, S = map(int, input().split())\nprint(\"Yes\" if math.ceil(T / S) <= D else \"No\")\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1000 15 80') == 'Yes'\nassert solution('5000 100 10') == 'No'\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1000 15 80') == 'Yes'\n\"\"\"\n\nimport sys\n\nD, T, S = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 15 80\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\nassert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n\"\"\"\n\n################################################################################################################################\n\n\n\"\"\"\nYou are given a list of N lines, each of which contains 2 integers A_i and B_i (A_i \\leq B_i).\nThe task is to check whether there are three distinct numbers in the list whose sum is zero.\n\"\"\"\n\n################################################################################################################################\n\n\n\"\"\"\nYou are given a list of N integers, A_1, A_2, \\ldots, A_N.\nThe task is to find the maximum value of A_i A_j, i!= j, such that 1 <= i, j <= N.\n\"\"\"\n\n################################################################################################################################\n\n\n\"\"\"\nYou are given a list of N integers, A_1, A_2, \\ldots, A_N.\nThe task is to find the maximum value of A_i A_j, i!= j, such that 1 <= i, j <= N.\n\"\"\"\n\n################################################################################################################################\n\n\n\"\"\"\nYou are given a list of N integers, A_1, A_2, \\ldots, A_N.\nThe task is to find the maximum value of A_i A_j, i!= j, such that 1 <= i, j <= N.\n\"\"\"\n\n################################################################################################################################\n\n\n\"\"\"\nYou are given a list of N integers, A_1, A_2, \\ldots, A_N.\nThe task is to find the maximum value of A_i A_j, i!= j, such that 1 <= i, j <= N.\n\"\"\"\n\n################################################################################################################################\n\n\n\"\"\"\nYou are given a list of N integers, A_1, A_2, \\ldots, A_N.\nThe task is to find the maximum value of A_i A_j, i!= j, such that 1 <= i, j <= N.\n\"\"\"\n\n################################################################################################################################\n\n\n\"\"\"\nYou are given a list of N integers, A_1, A_2, \\ldots, A_N.\nThe task is to find the maximum value of A_i A_j, i!= j, such that 1 <= i, j <= N.\n\"\"\"\n\n################################################################################################################################\n\n\n\"\"\"\nYou are given a list of N integers, A_1, A_2, \\ldots, A_N.\nThe task is to find the maximum value of A_i A_j, i!= j, such that 1 <= i, j <= N.\n\"\"\"\n\n################################################################################################################################\n\n\n\"\"\"\nYou are given a list of N integers, A_1, A_2, \\ldots, A_N.\nThe task is to find the maximum value of A_i A_j, i!= j, such that 1 <= i, j <= N.\n\"\"\"\n\n################################################################################################################################\n\n\n\"\"\"\nYou are given a list of N integers, A_1, A_2, \\ldots, A_N.\nThe task is to find the maximum value of A_i A_j, i!= j, such that 1 <= i, j <= N.\n\"\"\"\n\n################################################################################################################################\n\n\n\"\"\"\nYou are given a list of N integers, A_1, A_2, \\ldots, A_N.\nThe task is to find the maximum value of A_i A_j, i!= j, such that 1 <= i, j <= N.\n\"\"\"\n\n################################################################################################################################\n\n\n\"\"\"\nYou are given a list of N integers, A_1, A_2, \\ldots, A_N.\nThe task is to find the maximum value of A_i A_j, i!= j, such that 1 <= i, j <= N.\n\"\"\"\n\n################################################################################################################################\n\n\n\"\"\"\nYou are given a list of N integers, A_1, A_2, \\ldots, A_N.\nThe task is to find the maximum value of A_i A_j, i!= j, such that 1 <= i, j <= N.\n\"\"\"\n\n################################################################################################################################\n\n\n\"\"\"\nYou are given a list of N integers, A_1, A_2, \\ldots, A_N.\nThe task is to find the maximum value of A_i A_j, i!= j, such that 1 <= i, j <= N.\n\"\"\"\n\n################################################################################################################################\n\n\n\"\"\"\nYou are given a list of N integers, A_1, A_2, \\ldots, A_N.\nThe task is to find the maximum value of A_i A_j, i!= j, such that 1 <= i, j <= N.\n\"\"\"\n\n################################################################################################################################\n\n\n\"\"\"\nYou are given a list of N integers, A_1, A_2, \\ldots, A_N.\nThe task is to find the maximum value of A_i A_j, i!= j, such that 1 <= i, j <= N.\n\"\"\"\n\n################################################################################################################################\n\n\n\"\"\"\nYou are given a list of N integers, A_1, A_2, \\ldots, A_N.\nThe task is to find the maximum value of A_i A_j, i!= j, such that 1 <= i, j <= N.\n\"\"\"\n\n################################################################################################################################\n\n\n\"\"\"\nYou are given a list of N integers, A_1, A_2, \\ldots, A_N.\nThe task is to find the maximum value of A_i A_j, i!= j, such that 1 <= i, j <= N.\n\"\"\"\n\n################################################################################################################################\n\n\n\"\"\"\nYou are given a list of N integers, A_1, A_2, \\ldots, A_N.\nThe task is to find the maximum value of A_i A_j, i!= j, such that 1 <= i, j <= N.\n\"\"\"\n\n################################################################################################################################\n\n\n\"\"\"\nYou are given a list of N integers, A_1, A_2, \\ldots, A_N.\nThe task is to find the maximum value of A_i A_j, i!= j, such that 1 <= i, j <= N.\n\"\"\"\n\n################################################################################################################################\n\n\n\"\"\"\nYou are given a list of N integers, A_1, A_2, \\ldots, A_N.\nThe task is to find the maximum value of A_i A_j, i!= j, such that 1 <= i, j <= N.\n\"\"\"\n\n################################################################################################################################\n\n\n\"\"\"\nYou are given a list of N integers, A_1, A_2, \\ldots, A_N.\nThe task is to find the maximum value of A_i A_j, i!= j, such that 1 <= i"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n\"\"\"\nimport re\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''84 97 66''') == 'Yes'\nassert solution('''79 89 11''') == 'Yes'\nassert solution('''61 59 7''') == 'Yes'\nassert solution('''7''') == 'Yes'\nassert solution('''89''') == 'Yes'\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"84 97 66\\n\"\n    \"79 89 11\\n\"\n    \"61 59 7\\n\"\n    \"7\\n\"\n    \"89\\n\"\n    \"7\\n\"\n    \"87\\n\"\n    \"79\\n\"\n    \"24\\n\"\n    \"84\\n\"\n    \"30\") == \"Yes\"\n\nassert solution(\"84 97 66\\n\"\n    \"79 89 11\\n\"\n    \"61 59 7\\n\"\n    \"7\\n\"\n    \"87\\n\"\n    \"79\\n\"\n    \"24\\n\"\n    \"84\\n\"\n    \"30\") == \"No\"\n\n----\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"84 97 66\\n\"\n    \"79 89 11\\n\"\n    \"61 59 7\\n\"\n    \"7\\n\"\n    \"89\\n\"\n    \"7\\n\"\n    \"87\\n\"\n    \"79\\n\"\n    \"24\\n\"\n    \"84\\n\"\n    \"30\\n\"\n) == \"Yes\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2\\n3 4') == '0'\nassert solution('1 2\\n4 4') == '-1'\nassert solution('1 2\\n1 2') == '0'\nassert solution('2 4\\n4 3\\n5 2\\n1 3\\n2 3') == '4'\nassert solution('4 2\\n2 1\\n3 1') == '3'\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"41 2\\n5 6\") == 30\n\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1\\n1 2 3 4') == '2'\nassert solution('2 1\\n2 3') == '-1'\nassert solution('4 2\\n1 2 3 4') == '3'\nassert solution('4 1\\n1') == '0'\nassert solution('4 1\\n5') == '0'\n\n---Problem 2---\nA robot moves in a plane starting from the original point (0,0). The robot can move toward UP, DOWN, LEFT and RIGHT with a given steps. The trace of robot movement is shown as the following:\nUP 5\nDOWN 3\nLEFT 3\nRIGHT 2\nThe numbers after the direction are steps. Please write a program to compute the distance from current position after a sequence of movement and original point. If the distance is a float, then just print the nearest integer.\nExample:\nIf the following tuples are given as input to the program:\nUP 5\nDOWN 3\nLEFT 3\nRIGHT 2\nThen, the output of the program should be:\n2\n\n-----Constraints-----\n - The input is taken from Standard Input in the following format:\n - The first line represents UP, DOWN, LEFT and RIGHT.\n - The second line represents the steps the robot will take.\n\n-----Input-----\nUP 5\nDOWN 3\nLEFT 3\nRIGHT 2\n\n-----Output-----\n2\n\n-----Sample Input-----\nUP 5\nDOWN 3\nLEFT 3\nRIGHT 2\n\n-----Sample Output-----\n2\n\nFor example, if the following tuples are given as input to the program:\nUP 5\nDOWN 3\nLEFT 3\nRIGHT 2\nThen, the output of the program should be:\n2"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2\\n3 4\") == \"5\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n1 2\\n3 4\\n5 6\\n\") == \"30\"\nassert solution(\"4 3\\n5 6\\n1 2\\n3 4\\n\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n5 6') == 30\n\n-------"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n1 2\") == \"3\"\nassert solution(\"4 3\\n1 2 3\") == \"4\"\nassert solution(\"4 3\\n1 2 3\\n1 3\") == \"4\"\nassert solution(\"4 3\\n1 2 3\\n1 3\\n1 3\") == \"4\"\nassert solution(\"4 3\\n1 2 3\\n1 3\\n1 3\\n1 3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n4 3\\n1 4\\n4 1\\n2 4') == '4'\nassert solution('3 3\\n1 2\\n2 3') == '-1'\nassert solution('4 2\\n3 1\\n2 3') == '3'\n\"\"\"\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\nassignments = sys.stdin.readline().split()\nassignments = list(map(int, assignments))"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('41 2\\n5 6') == '30'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 4\\n5 6') == '30'\nassert solution('3 2\\n1 2') == '-1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 2\\n\") == \"5\"\nassert solution(\"0 1\\n\") == \"1\"\nassert solution(\"1 2\\n\") == \"2\"\nassert solution(\"2 0\\n\") == \"1\"\n\"\"\"\nfrom collections import deque\nfrom collections import Counter\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 5\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 5\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 10\") == \"5\"\nassert solution(\"0 5\") == \"5\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"2 4\") == \"10\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n') == '2'\nassert solution('0 1\\n') == '1'\nassert solution('1 3\\n') == '5'\nassert solution('2 1\\n') == '3'\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1 0\n2 1\n3 1\n4 1\n5 1\n6 1\n7 1\n8 1\n9 1\n10 1\n11 1\n12 1\n13 1\n14 1\n15 1\n16 1\n17 1\n18 1\n19 1\n20 1\n21 1\n22 1\n23 1\n24 1\n25 1\n26 1\n27 1\n28 1\n29 1\n30 1\n31 1\n32 1\n33 1\n34 1\n35 1\n36 1\n37 1\n38 1\n39 1\n40 1\n41 1\n42 1\n43 1\n44 1\n45 1\n46 1\n47 1\n48 1\n49 1\n50 1\n51 1\n52 1\n53 1\n54 1\n55 1\n56 1\n57 1\n58 1\n59 1\n60 1\n61 1\n62 1\n63 1\n64 1\n65 1\n66 1\n67 1\n68 1\n69 1\n70 1\n71 1\n72 1\n73 1\n74 1\n75 1\n76 1\n77 1\n78 1\n79 1\n80 1\n81 1\n82 1\n83 1\n84 1\n85 1\n86 1\n87 1\n88 1\n89 1\n90 1\n91 1\n92 1\n93 1\n94 1\n95 1\n96 1\n97 1\n98 1\n99 1\n100 1\n101 1\n102 1\n103 1\n104 1\n105 1\n106 1\n107 1\n108 1\n109 1\n110 1\n111 1\n112 1\n113 1\n114 1\n115 1\n116 1\n117 1\n118 1\n119 1\n120 1\n121 1\n122 1\n123 1\n124 1\n125 1\n126 1\n127 1\n128 1\n129 1\n130 1\n131 1\n132 1\n133 1\n134 1\n135 1\n136 1\n137 1\n138 1\n139 1\n140 1\n141 1\n142 1\n143 1\n144 1\n145 1\n146 1\n147 1\n148 1\n149 1\n150 1\n151 1\n152 1\n153 1\n154 1\n155 1\n156 1\n157 1\n158 1\n159 1\n160 1\n161 1\n162 1\n163 1\n164 1\n165 1\n166 1\n167 1\n168 1\n169 1\n170 1\n171 1\n172 1\n173 1\n174 1\n175 1\n176 1\n177 1\n178 1\n179 1\n180 1\n181 1\n182 1\n183 1\n184 1\n185 1\n186 1\n187 1\n188 1\n189 1\n190 1\n191 1\n192 1\n193 1\n194 1\n195 1\n196 1\n197 1\n198 1\n199 1\n200 1\n201 1\n202 1\n203 1\n204 1\n205 1\n206 1\n207 1\n208 1\n209 1\n210 1\n211 1\n212 1\n213 1\n214 1\n215 1\n216 1\n217 1\n218 1\n219 1\n220 1\n221 1\n222 1\n223 1\n224 1\n225 1\n226 1\n227 1\n228 1\n229 1\n230 1\n231 1\n232 1\n233 1\n234 1\n235 1\n236 1\n237 1\n238 1\n239 1\n240 1\n241 1\n242 1\n243 1\n244 1\n245 1\n246 1\n247 1\n248 1\n249 1\n250 1\n251 1\n252 1\n253 1\n254 1\n255 1\n256 1\n257 1\n258 1\n259 1\n260 1\n261 1\n262 1\n263 1\n264 1\n265 1\n266 1\n267 1\n268 1\n269 1\n270 1\n271 1\n272 1\n273 1\n274 1\n275 1\n276 1\n277 1\n278 1\n279 1\n280 1\n281 1\n282 1\n283 1\n284 1\n285 1\n286 1\n287 1\n288 1\n289 1\n290 1\n291 1\n292 1\n293 1\n294 1\n295 1\n296 1\n297 1\n298 1\n299 1\n300 1\n301 1\n302 1\n303 1\n304 1\n305 1\n306 1\n307 1\n308 1\n309 1\n310 1\n311 1\n312 1\n313 1\n314 1\n315 1\n316 1\n317 1\n318 1\n319 1\n320 1\n321 1\n322 1\n323 1\n324 1\n325 1\n326 1\n327 1\n328 1\n329 1\n330 1\n331 1\n332 1\n333 1\n334 1\n335 1\n336 1\n337 1\n338 1\n339 1\n340 1\n341 1\n342 1\n343 1\n344 1\n345 1\n346 1\n347 1\n348 1\n349 1\n350 1\n351 1\n352 1\n353 1\n354 1\n355 1\n356 1\n357 1\n358 1\n359 1\n360 1\n361 1\n362 1\n363 1\n364 1\n365 1\n366 1\n367 1\n368 1\n369 1\n370 1\n371 1\n372 1\n373 1\n374 1\n375 1\n376 1\n377 1\n378 1\n379 1\n380 1\n381 1\n382 1\n383 1\n384 1\n385 1\n386 1\n387 1\n388 1\n389 1\n390 1\n391 1\n392 1\n393 1\n394 1\n395 1\n396 1\n397 1\n398 1\n399 1\n400 1\n401 1\n402 1\n403 1\n404 1\n405 1\n406 1\n407 1\n408 1\n409 1\n410 1\n411 1\n412 1\n413 1\n414 1\n415 1\n416 1\n417 1\n418 1\n419 1\n420 1\n421 1\n422 1\n423 1\n424 1\n425 1\n426 1\n427 1\n428 1\n429 1\n430 1\n431 1\n432 1\n433 1\n434 1\n435 1\n436 1\n437 1\n438 1\n439 1\n440 1\n441 1\n442 1\n443 1\n444 1\n445 1\n446 1\n447 1\n448 1\n449 1\n450 1\n451 1\n452 1\n453 1\n454 1\n455 1\n456 1\n457 1\n458 1\n459 1\n460 1\n461 1\n462 1\n463 1\n464 1\n465 1\n466 1\n467 1\n468 1\n469 1\n470 1\n471 1\n472 1\n473 1\n474 1\n475 1\n476 1\n477 1\n478 1\n479 1\n480 1\n481 1\n482 1\n483 1\n484 1\n485 1\n486 1\n487 1\n488 1\n489 1\n490 1\n491 1\n492 1\n493 1\n494 1\n495 1\n496 1\n497 1\n498 1\n499 1\n500 1\n501 1\n502 1\n503 1\n504 1\n505 1\n506 1\n507 1\n508 1\n509 1\n510 1\n511 1\n512 1\n513 1\n514 1\n515 1\n516 1\n517 1\n518 1\n519 1\n520 1\n521 1\n522 1\n523 1\n524 1\n525 1\n526 1\n527 1\n528 1\n529 1\n530 1\n531 1\n532 1\n533 1\n534 1\n535 1\n536 1\n537 1\n538 1\n539 1\n540 1\n541 1\n542 1\n543 1\n544 1\n545 1\n546 1\n547 1\n548 1\n549 1\n550 1\n551 1\n552 1\n553 1\n554 1\n555 1\n556 1\n557 1\n558 1\n559 1\n560 1\n561 1\n562 1\n563 1\n564 1\n565 1\n566 1\n567 1\n568 1\n569 1\n570 1\n571 1\n572 1\n573 1\n574 1\n575 1\n576 1\n577 1\n578 1\n579 1\n580 1\n581 1\n582 1\n583 1\n584 1\n585 1\n586 1\n587 1\n588"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 5\\n') == '5'\nassert solution('0 2\\n') == '2'\nassert solution('1 100\\n') == '1'\nassert solution('2 10\\n') == '6'\nassert solution('2 3\\n') == '3'\n\nprint('Test pass.')"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 5') == '5'\nassert solution('1 3') == '6'\nassert solution('2 6') == '110'\nassert solution('1 10') == '121'\nassert solution('2 10') == '230'\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 2\\n') == '5'\n\"\"\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_cases[0]) == '2'\n\"\"\"\n\nn = int(stdin.readline())\narr = list(map(int, stdin.readline().split()))\n\na = max(arr)\narr = [i for i in arr if i!= a]\n\nfor i in range(2, min(a, 10**9+1)):\n    if all(i % j == 0 for j in arr):\n        break\n\nprint(i)\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 6 8\") == \"2\"\nassert solution(\"1 2 3 4\") == \"1\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 6 8') == 2\nassert solution('1 1 1') == 1\nassert solution('2 4 6') == 2\nassert solution('4 5 6') == 2\nassert solution('2 4 9') == 4\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 2 3\") == \"1\"\nassert solution(\"4\\n1 2 3 4\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 6 8\") == \"2\"\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n7 6 8\n''') == '2'\nassert solution('''4\n7 6 5 4\n''') == '1'\n\"\"\""
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n7 6 8\") == 2\n\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\n\ncount = 0\n\nfor i in range(len(arr)):\n    count = count + 1\n    tmp = list(set(arr))\n    tmp.remove(arr[i])\n    for j in range(len(tmp)):\n        if arr[i] % tmp[j] == 0:\n            count = count + 1\n            break\n\nprint(count)\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 6 8') == 2\n\"\"\"\n\nn = int(input())\nA = list(map(int, input().split()))\nB = [i for i in range(1, 10 ** 9 + 1)]"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n7 6 8\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 6 8') == 2\n\"\"\"\nimport numpy as np\nimport sys\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n2 3 1''') == '''3\n1 2 3'''\n\n-----\n3\n1 2 3\n\n-----\n3\n2 3 1''') == '''3\n1 2 3'''\n\n-----\n5\n1 3 1 3 1\n\n-----\n5\n1 3 2 3 1\n\n'''"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 1\") == \"3 1 2\"\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2 3 1') == '3 1 2'\n\"\"\"\n\n\n\"\"\"\n\u6709\u4e00\u500b\u6578\u5b57\u8cc7\u6599:\n    \u9577\u5ea6\u4e0d\u8d85\u904e50\n    \u8cc7\u6599\u5167\u5bb9\u4e0d\u91cd\u8907\n    \u8cc7\u6599\u5167\u5bb9: 1,2,3,4,5\n\"\"\"\n\n\n\"\"\"\n\u8acb\u5beb\u51fa\u4e00\u7a0b\u5f0f\uff0c\u8b93\u4f7f\u7528\u8005\u8f38\u5165\u4e00\u500b\u6578\u5b57N\uff0c\u4e26\u5229\u7528 N \u500b\u6a19\u7c64\u4f86\u7d66\u51fa\u6578\u5b57\u8cc7\u6599\uff0c\u4e26\u4e14\u8f38\u51fa\u7d50\u679c\u3002\n\n-----Constraints-----\n -  1 \\le N \\le 10^5 \n -  1 \\le A_i \\le N \n -  A_i \\neq A_j  (i \\neq j)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\ldots A_N\n\n-----Output-----\nPrint the student numbers of the students in the order the students entered the classroom.\n\n-----Sample Input-----\n3\n2 3 1\n\n-----Sample Output-----\n3 1 2\n\"\"\"\n\n\"\"\"\nN = int(input())\ndata = list(map(int, input().split()))\n\nprint(data[0], end = \" \")\nfor i in range(1, N):\n    if data[i] < data[i-1]:\n        print(data[i], end = \" \")\n\n\"\"\"\n\n\"\"\"\n\u6709\u5169\u500b\u8cc7\u6599\n    \u9577\u5ea6\u4e0d\u8d85\u904e50\n    \u8cc7\u6599\u5167\u5bb9\u4e0d\u91cd\u8907\n    \u8cc7\u6599\u5167\u5bb9: 1,2,3,4,5,6\n\"\"\"\n\n\"\"\"\n\u8acb\u5beb\u51fa\u4e00\u7a0b\u5f0f\uff0c\u8b93\u4f7f\u7528\u8005\u8f38\u5165\u5169\u500b\u6578\u5b57\uff0c\u4e26\u5229\u7528\u5169\u500b\u6a19\u7c64\u4f86\u7d66\u51fa\u6578\u5b57\u8cc7\u6599\uff0c\u4e26\u4e14\u8f38\u51fa\u7d50\u679c\u3002\n\n-----Constraints-----\n -  1 \\le N \\le 10^5 \n -  1 \\le A_i \\le N \n -  A_i \\neq A_j  (i \\neq j)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\ldots A_N\n\n-----Output-----\nPrint the student numbers of the students in the order the students entered the classroom.\n\n-----Sample Input-----\n6\n2 3 1\n4 6\n\n-----Sample Output-----\n3 1 2 4 6\n\"\"\"\n\n\"\"\"\nN = int(input())\ndata1 = list(map(int, input().split()))\ndata2 = list(map(int, input().split()))\n\nprint(*sorted(set(data1).intersection(set(data2)), key = data1.index))\n\"\"\"\n\n\"\"\"\n\u6709\u5169\u500b\u8cc7\u6599\n    \u9577\u5ea6\u4e0d\u8d85\u904e50\n    \u8cc7\u6599\u5167\u5bb9\u4e0d\u91cd\u8907\n    \u8cc7\u6599\u5167\u5bb9: 1,2,3,4,5,6\n\"\"\"\n\n\"\"\"\n\u8acb\u5beb\u51fa\u4e00\u7a0b\u5f0f\uff0c\u8b93\u4f7f\u7528\u8005\u8f38\u5165\u5169\u500b\u6578\u5b57\uff0c\u4e26\u5229\u7528\u5169\u500b\u6a19\u7c64\u4f86\u7d66\u51fa\u6578\u5b57\u8cc7\u6599\uff0c\u4e26\u4e14\u8f38\u51fa\u7d50\u679c\u3002\n\n-----Constraints-----\n -  1 \\le N \\le 10^5 \n -  1 \\le A_i \\le N \n -  A_i \\neq A_j  (i \\neq j)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\ldots A_N\n\n-----Output-----\nPrint the student numbers of the students in the order the students entered the classroom.\n\n-----Sample Input-----\n6\n2 3 1\n4 6\n\n-----Sample Output-----\n3 1 2 4 6\n\"\"\"\n\n\"\"\"\n\u6709\u5169\u500b\u8cc7\u6599\n    \u9577\u5ea6\u4e0d\u8d85\u904e50\n    \u8cc7\u6599\u5167\u5bb9\u4e0d\u91cd\u8907\n    \u8cc7\u6599\u5167\u5bb9: 1,2,3,4,5,6,7,8\n\"\"\"\n\n\"\"\"\n\u8acb\u5beb\u51fa\u4e00\u7a0b\u5f0f\uff0c\u8b93\u4f7f\u7528\u8005\u8f38\u5165\u5169\u500b\u6578\u5b57\uff0c\u4e26\u5229\u7528\u5169\u500b\u6a19\u7c64\u4f86\u7d66\u51fa\u6578\u5b57\u8cc7\u6599\uff0c\u4e26\u4e14\u8f38\u51fa\u7d50\u679c\u3002\n\n-----Constraints-----\n -  1 \\le N \\le 10^5 \n -  1 \\le A_i \\le N \n -  A_i \\neq A_j  (i \\neq j)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\ldots A_N\n\n-----Output-----\nPrint the student numbers of the students in the order the students entered the classroom.\n\n-----Sample Input-----\n8\n2 3 1\n4 6\n\n-----Sample Output-----\n3 1 2 4 6\n\"\"\"\n\n\"\"\"\n\u6709\u5169\u500b\u8cc7\u6599\n    \u9577\u5ea6\u4e0d\u8d85\u904e50\n    \u8cc7\u6599\u5167\u5bb9\u4e0d\u91cd\u8907\n    \u8cc7\u6599\u5167\u5bb9: 1,2,3,4,5,6,7,8\n\"\"\"\n\n\"\"\"\n\u8acb\u5beb\u51fa\u4e00\u7a0b\u5f0f\uff0c\u8b93\u4f7f\u7528\u8005\u8f38\u5165\u5169\u500b\u6578\u5b57\uff0c\u4e26\u5229\u7528\u5169\u500b\u6a19\u7c64\u4f86\u7d66\u51fa\u6578\u5b57\u8cc7\u6599\uff0c\u4e26\u4e14\u8f38\u51fa\u7d50\u679c\u3002\n\n-----Constraints-----\n -  1 \\le N \\le 10^5 \n -  1 \\le A_i \\le N \n -  A_i \\neq A_j  (i \\neq j)\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\ldots A_N\n\n-----Output-----\nPrint the student numbers of the students in the order the students entered the classroom.\n\n-----Sample Input-----\n8\n2 3 1\n4 6\n\n-----Sample Output-----\n3 1 2 4 6\n\"\"\"\n\n\"\"\"\n\u6709\u5169\u500b\u8cc7\u6599\n    \u9577\u5ea6\u4e0d\u8d85\u904e"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n2 3 1') == '3 1 2'\n\"\"\"\n\nN = int(input())\nA = [int(x) for x in input().split(' ')]\nans = [None] * N\n\nfor i in range(N - 1):\n    j = i + 1\n    while j < N and A[j] < A[j - 1]:\n        j += 1\n    ans[j - 1] = A[i]\n\nprint(' '.join(map(str, ans)))"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n2 3 1') == '3 1 2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\") == \"3 1 2\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 1\") == \"3 1 2\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2\\n\") == \"3 1 2\"\nprint(\"PASSED\")\n\n---------------\n|  NOTES  |\n---------------\n\n\"\"\""
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 1') == '3 1 2'\n\nassert solution('3 1 2') == '3 1 2'\n\nassert solution('3 2 1') == '1 2 3'\n\nassert solution('3 1 1') == '1 1 1'\n\nassert solution('10 6 3') == '10 6 3'"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n2 3 1') == '3 1 2'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\nSolution\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\"\"\"\n\nA, B, X = map(int, stdin.split())\nans = 0\nfor n in range(1, 10 ** 9):\n    if A * n + B * len(str(n)) <= X:\n        ans = n\nprint(ans)\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 7 100') == '9'\n\n\"\"\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"10 100 10\") == \"0\"\nassert solution(\"10 10 10\") == \"0\"\nassert solution(\"10 100 10\") == \"9\"\nassert solution(\"10 100 10\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\"\"\"\n\nA, B, X = map(int, input().split())\n\ncnt = 0\nfor i in range(1, 10 ** 9 + 1):\n    cnt += 1\n    if A * cnt + B * len(str(i)) > X:\n        print(i - 1)\n        break\nelse:\n    print(0)"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 7 100\") == \"9\"\nassert solution(\"100 10 4\") == \"0\"\nassert solution(\"6 5 6\") == \"0\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(10) + \" \" + str(7) + \" \" + str(100)) == \"9\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 7 100\") == \"9\"\n\"\"\"\n\nA, B, X = map(int, stdin.split())\n\nn = 0\nwhile X >= 0:\n    if X % A == 0:\n        n = X // A\n        break\n    else:\n        X -= B\n        n += 1"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\"\"\"\nimport sys\n\nn, k = [int(i) for i in sys.stdin.readline().split()]\nh = [int(i) for i in sys.stdin.readline().split()]\n\ncount = 0\nfor i in h:\n    if i >= k:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == 2\n\"\"\"\nfrom sys import stdin\n\nN, K = [int(i) for i in stdin.readline().rstrip().split()]\nfriends = [int(i) for i in stdin.readline().rstrip().split()]\n\nprint(sum([1 for f in friends if f > K]))\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\n\n\"\"\"\n\nN, K = list(map(int, input().split()))\nh = list(map(int, input().split()))\ncount = 0\nfor i in h:\n    if i >= K:\n        count += 1\nprint(count)\n\n\"\"\"\nN friends of Takahashi has come to a theme park.\nTo ride the most popular roller coaster in the park, you must be at least K centimeters tall.\nThe i-th friend is h_i centimeters tall.\nHow many of the Takahashi's friends can ride the roller coaster?\n\n-----Constraints-----\n -  1 \\le N \\le 10^5 \n -  1 \\le K \\le 500 \n -  1 \\le h_i \\le 500\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nh_1 h_2 \\ldots h_N\n\n-----Output-----\nPrint the number of people among the Takahashi's friends who can ride the roller coaster.\n\n-----Sample Input-----\n4 150\n150 140 100 200\n\n-----Sample Output-----\n2\n\nTwo of them can ride the roller coaster: the first and fourth friends.\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 150\\n150 140 100 200') == 2\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\nprint('Passed')\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 150\\n150 140 100 200\") == \"2\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 150\\n150 140 100 200') == '2'\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 1\\n5 4 2 1\") == \"Yes\"\nassert solution(\"5 1\\n5 4 2\\n5 4 2 1\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == \"Yes\"\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\na.sort()\n\ncount = 0\nfor i in range(n):\n    count += a[i]\n    if count >= 1/4*m:\n        break"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\nassert solution('6 2\\n5 2 4 3 1 2') == 'No'\n\"\"\"\n\nn, m = map(int, input().split())\nnums = list(map(int, input().split()))\n\ntotal = sum(nums)\ncandidates = list(filter(lambda x: x > total / (4 * m), nums))"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"4 1\\n5 4 2 1\"\n) == \"Yes\"\nassert solution(\n    \"5 1\\n1 2 3 4 5\"\n) == \"Yes\"\nassert solution(\n    \"6 2\\n1 2 1 3 1 2\"\n) == \"No\"\n\n'''\n\nn,m = input().split()\nA = [int(i) for i in input().split()]\nprint('Yes' if A.count(max(A))*int(m) >= sum(A)//4 else 'No')\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 1\\n5 4 2 1\") == 'Yes'\nassert solution(\"4 2\\n5 4 2 1\") == 'No'\nassert solution(\"7 3\\n1 2 3 4 5 6 7\") == 'Yes'\nassert solution(\"7 3\\n1 2 3 4 6 7\") == 'No'\n\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1\\n5 4 2 1') == 'Yes'\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3 2\\n..#\\n###') == '5'\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2 3 2\n..#\n###''') == \"5\"\nassert solution('''3 3 2\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == 5\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List\n\nfrom utils import read_input\nfrom utils import write_output\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 2\\n..#\\n###') == '5'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == 5\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('.#.#\\n..#.') == 2\nassert solution('#..#\\n.###') == 5\nassert solution('#.##\\n##..') == 3\nassert solution('#.#\\n#..#\\n##..') == 6\nassert solution('#.#\\n#.##\\n#.#.') == 7\n\n\"\"\""
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('.#.\\n###\\n') == '5'\nassert solution('###\\n#.\\n#.') == '2'\n\"\"\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"\nprint(solution(stdin))\n\n-----------------------\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 2\\n..#\\n###\") == \"5\"\nprint(\"All tests passed.\")\n\n----\n5\n8 5 2\n.##\n.##\n.#.\n.#.\n.#.\n\n9 4 2\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 2\\n..#\\n###') == '5'\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2020 2040\") == \"2\"\nassert solution(\"2016 2017\") == \"29\"\nassert solution(\"2018 2019\") == \"0\"\nassert solution(\"2016 2016\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"\n\nfrom __future__ import print_function\n\nl, r = list(map(int, stdin.readline().split()))\n\nprint((l * r) % 2019)\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2020 2040') == '2'\n\n----Problem----\nYou are given two integers L and R. Find the maximum possible value of (i x j) % 2019, where i and j are numbers between L and R (both included).\n\nInput\nThe first line contains an integer T, the number of test cases.\nThe next T lines contains an integer L and R.\n\nOutput\nPrint the maximum possible value of (i x j) % 2019, where i and j are numbers between L and R (both included).\n\nExample\nInput:\n2\n1 100\n4 10\n\nOutput:\n184\n15\n\n----Test cases----\nTest case 1\nInput:\n2\n1 100\n4 10\nOutput:\n184\n15\n\nTest case 2\nInput:\n1\n10000 10000\nOutput:\n1019\n\n\"\"\""
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2020 2040') == 2\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution("
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"\n\nfrom sys import stdin\nimport math"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\\\"2020 2040\\\") == \\\"2\\\"\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2020 2040\") == \"2\"\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('AtCoder') == 'AC'\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('AtCoder') == 'AC'\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\nassert solution(\"ABC\") == \"AC\"\nassert solution(\"AcC\") == \"AC\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('AtCoder') == 'AC'\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('AtCoder') == 'AC'\nassert solution('AtCoder'.lower()) == 'WA'\nassert solution('AAtCoder'.lower()) == 'AC'\nassert solution('AAtCoder'.upper()) == 'WA'\n\n----\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('AtCoder') == 'AC'\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('AtCoder') == 'AC'\nassert solution('Atcoder') == 'WA'\nassert solution('AtCODER') == 'WA'\nassert solution('ATCODER') == 'AC'\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AtCoder\") == \"AC\"\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"1234\") == \"4\"\nassert solution(\"9\") == \"9\"\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1214\") == \"2\"\nassert solution(\"1243\") == \"3\"\nassert solution(\"132\") == \"2\"\nassert solution(\"1234\") == \"2\"\nassert solution(\"123\") == \"2\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1214\") == '2'\nassert solution(\"1324\") == '2'\nassert solution(\"1333224444\") == '2'\nassert solution(\"133333333322224444444444444444\") == '2'\nassert solution(\"133333333322222444444444444444\") == '2'\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1214') == '2'\n\nprint(solution('1214'))"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1214') == '2'\n\nprint(solution('1214'))\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1214') == '2'\nassert solution('1324') == '2'\nassert solution('1333224444') == '2'\nassert solution('133333333322224444444444444444') == '2'\n\"\"\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1214') == '2'\nassert solution('1324') == '3'\nassert solution('1100') == '0'\nassert solution('1111') == '1'\nassert solution('1214') == '2'\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1214') == '2'\nassert solution('1234') == '4'\nassert solution('1235') == '5'\nassert solution('1236') == '6'\nassert solution('1237') == '7'\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1214') == '2'\nassert solution('1224') == '2'\nassert solution('1324') == '2'\nassert solution('1234') == '2'\nassert solution('1244') == '2'\n\nprint('Passed')\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1214') == '2'\nassert solution('1221') == '1'"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 3 2') == 'YES'\n\"\"\"\n\n\n\"\"\"\nFrom the input, obtain a sequence of numbers.\nSort the numbers in ascending order.\nThen, obtain the next permutation of the sequence of numbers (i.e., if the input was {4, 1, 3, 2}, then the next permutation is {1, 2, 3, 4}) and print YES if the former is sorted in ascending order. Otherwise, print NO.\n\n-----Constraints-----\n- The length of the input is an integer in the range [1, 50].\n- The input contains only non-negative integers.\n- The input is guaranteed to be a permutation of {1, 2,..., N} where N is the length of the input.\n\n-----Input-----\nYou are given an input string s of length N.\n\n-----Output-----\nPrint YES if it is possible to sort the input in ascending order, and NO otherwise.\n\n-----Sample Input-----\n3\n4 1 3 2\n\n-----Sample Output-----\nYES\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 3 4 1') == 'YES'\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 3 1\") == \"YES\"\nassert solution(\"1 2 3 4 5\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'YES'\nassert solution('1 2 3 4 5') == 'NO'\nassert solution('5 2 3 4 1') == 'YES'\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3 4 1\") == \"YES\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"201920181\") == 4\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3121\") == \"2\"\nassert solution(\"6\") == \"1\"\nassert solution(\"1000000000000000000000000000000000\") == \"33\"\nassert solution(\"201920181\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3121') == 2\nassert solution('6') == 1\nassert solution('1000000000000000000000000000000000') == 33\nassert solution('201920181') == 4\nprint('Test pass.')\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"201920181\") == 4\nassert solution(\"1000000000000000000000000000000000\") == 33\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('201920181') == '4'\nassert solution('1000000000000000000000000000000000') == '33'\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'\nassert solution('201920181') == '4'\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('201920181') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'\nassert solution('201920181') == '4'\n\"\"\"\n\nfrom collections import deque\nfrom typing import Deque, Dict, List, Tuple\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3121\") == 2\nassert solution(\"6\") == 1\nassert solution(\"201920181\") == 4\n\n\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3121') == '2'\nassert solution('6') == '1'\nassert solution('1000000000000000000000000000000000') == '33'\nassert solution('201920181') == '4'\n\"\"\"\n\n\"\"\"\n3121\n\n3|1|21\n\n6\n\n1|0|1|9|201|81\n\n201920181\n\n2|0|1|9|201|81\n\n3|0|1|9|201|81\n\n6|0|1|9|201|81\n\n9|0|1|9|201|81\n\n12|0|1|9|201|81\n\n15|0|1|9|201|81\n\n18|0|1|9|201|81\n\n21|0|1|9|201|81\n\n24|0|1|9|201|81\n\n27|0|1|9|201|81\n\n30|0|1|9|201|81\n\n33|0|1|9|201|81\n\n36|0|1|9|201|81\n\n39|0|1|9|201|81\n\n42|0|1|9|201|81\n\n45|0|1|9|201|81\n\n48|0|1|9|201|81\n\n51|0|1|9|201|81\n\n54|0|1|9|201|81\n\n57|0|1|9|201|81\n\n60|0|1|9|201|81\n\n63|0|1|9|201|81\n\n66|0|1|9|201|81\n\n69|0|1|9|201|81\n\n72|0|1|9|201|81\n\n75|0|1|9|201|81\n\n78|0|1|9|201|81\n\n81\n\n3|0|1|9|201|81\n\n6|0|1|9|201|81\n\n9|0|1|9|201|81\n\n12|0|1|9|201|81\n\n15|0|1|9|201|81\n\n18|0|1|9|201|81\n\n21|0|1|9|201|81\n\n24|0|1|9|201|81\n\n27|0|1|9|201|81\n\n30|0|1|9|201|81\n\n33|0|1|9|201|81\n\n36|0|1|9|201|81\n\n39|0|1|9|201|81\n\n42|0|1|9|201|81\n\n45|0|1|9|201|81\n\n48|0|1|9|201|81\n\n51|0|1|9|201|81\n\n54|0|1|9|201|81\n\n57|0|1|9|201|81\n\n60|0|1|9|201|81\n\n63|0|1|9|201|81\n\n66|0|1|9|201|81\n\n69|0|1|9|201|81\n\n72|0|1|9|201|81\n\n75|0|1|9|201|81\n\n78|0|1|9|201|81\n\n81\n\n3|0|1|9|201|81\n\n6|0|1|9|201|81\n\n9|0|1|9|201|81\n\n12|0|1|9|201|81\n\n15|0|1|9|201|81\n\n18|0|1|9|201|81\n\n21|0|1|9|201|81\n\n24|0|1|9|201|81\n\n27|0|1|9|201|81\n\n30|0|1|9|201|81\n\n33|0|1|9|201|81\n\n36|0|1|9|201|81\n\n39|0|1|9|201|81\n\n42|0|1|9|201|81\n\n45|0|1|9|201|81\n\n48|0|1|9|201|81\n\n51|0|1|9|201|81\n\n54|0|1|9|201|81\n\n57|0|1|9|201|81\n\n60|0|1|9|201|81\n\n63|0|1|9|201|81\n\n66|0|1|9|201|81\n\n69|0|1|9|201|81\n\n72|0|1|9|201|81\n\n75|0|1|9|201|81\n\n78|0|1|9|201|81\n\n81\n\n3|0|1|9|201|81\n\n6|0|1|9|201|81\n\n9|0|1|9|201|81\n\n12|0|1|9|201|81\n\n15|0|1|9|201|81\n\n18|0|1|9|201|81\n\n21|0|1|9|201|81\n\n24|0|1|9|201|81\n\n27|0|1|9|201|81\n\n30|0|1|9|201|81\n\n33|0|1|9|201|81\n\n36|0|1|9|201|81\n\n39|0|1|9|201|81\n\n42|0|1|9|201|81\n\n45|0|1|9|201|81\n\n48|0|1|9|201|81\n\n51|0|1|9|201|81\n\n54|0|1|9|201|81\n\n57|0|1|9|201|81\n\n60|0|1|9|201|81\n\n63|0|1|9|201|81\n\n66|0|1|9|201|81\n\n69|0|1|9|201|81\n\n72|0|1|9|201|81\n\n75|0|1|9|201"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n2 4 7 11 3\\n1 2 3 4\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\") == \"3\"\nassert solution(\"3\\n13 37 39\\n1 2 3\") == \"2\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5\n1 2 3 4 5\n2 4 7 11 3\n\"\"\") == '2'\nassert solution(\"\"\"\n3\n13 37 39\n1 2 3\n\"\"\") == '2'\nassert solution(\"\"\"\n4\n0 0 0 0\n1 2 3 4\n\"\"\") == '0'\nassert solution(\"\"\"\n3\n1 2 -1\n-6 -12 6\n\"\"\") == '3'\n\"\"\""
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(read()) == result"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == 2\nassert solution(\"3\\n13 37 39\\n1 2 3\") == 2\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == 0\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\") == 3\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\\n2 4 7 11 3\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\n\n\"\"\"\nimport math\nfrom sys import stdin\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\") == \"3\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\") == \"3\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\\n\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\\n\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\\n\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\\n\") == \"3\""
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"3\\n1 2 3\\n-6 -12 6\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\") == \"3\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2 4 7 11 3\") == \"2\"\nassert solution(\"3\\n13 37 39\\n1 2 3\") == \"2\"\nassert solution(\"4\\n0 0 0 0\\n1 2 3 4\") == \"0\"\nassert solution(\"3\\n1 2 -1\\n-6 -12 6\") == \"3\""
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"code?????? test\") == \"10\"\nassert solution(\"code?????? test\") == \"10\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"codeforces\") == 5\nassert solution(\"dodivthree\") == 7\nassert solution(\"bambarbia\") == 0\nassert solution(\"hellocode\") == 0\n\"\"\""
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('bambarbia') == '0'\nassert solution('hellocode') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"codeforces\") == 5\nassert solution(\"dodivthree\") == 7\nassert solution(\"bambarbia\") == 0\nassert solution(\"hellocode\") == 0\n\n\"\"\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('hellocode') == '0'\n\"\"\"\nimport copy"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('bambarbia') == '0'\n\"\"\""
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == output\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"hellocode\") == \"0\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"test???\") == \"10\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('codeforces') == '5'\nassert solution('dodivthree') == '7 8'\nassert solution('bambarbia') == '0'\nassert solution('hellocode') == '10'\n\nprint('The local tests are done. The input:')\nprint(stdin)\nprint('The output:')\nprint(solution(stdin))\nprint('The answer:')\nprint(answer)\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"5\"\nassert solution(\"dodivthree\") == \"7 8\"\nassert solution(\"bambarbia\") == \"0\"\nassert solution(\"hellocode\") == \"10\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == '3\\n7 7\\n2 3\\n4 5'\n\"\"\""
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == \"3\\n7 7\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n4 4\"\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"4 1 2 2 1 5 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 1 1 1') == '4'\nassert solution('7\\n4 1 2 2 1 5 3') == '3'\nassert solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\nassert solution('4\\n1 1 1 1') == '4'\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 1 2 2 1 5 3') == '3'\nassert solution('11 -5 -4 -3 -2 -1 0 1 2 3 4 5') == '2'\nassert solution('7 1 2 2 1 5 3') == '3'\n\"\"\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n4 1 2 2 1 5 3') == '3'\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\n\nd = {}\nfor i, x in enumerate(a):\n    if x in d:\n        d[x].append(i)\n    else:\n        d[x] = [i]\n\nres = 0\nfor i in range(n):\n    if len(d[a[i]]) <= 1:\n        continue\n    for j in range(1, len(d[a[i]])):\n        if a[d[a[i]][j] + 1] - a[d[a[i]][j - 1]] > 1:\n            res += 1\nprint(res)\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n4 1 2 2 1 5 3\") == '3'\nassert solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\") == '2'\nassert solution(\"4\\n1 1 1 1\") == '4'\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"7\\n4 1 2 2 1 5 3\"\n) == 3\n\"\"\""
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == \"3\"\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\"\nassert solution(\"7 1 2 2 1 5 3\") == \"3\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2 2 1 5 3\") == '3'\nassert solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\") == '2'\nassert solution(\"7\") == '1'\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\n3 7 19 3 3') == '0'\nassert solution('4 2\\n2 78 4 10') == '12'\nassert solution('6 11\\n45 1 10 12 11 7') == '7'\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n6 11\n45 1 10 12 11 7\n\"\"\") == \"7\"\n\nassert solution(\"\"\"\n4 2\n2 78 4 10\n\"\"\") == \"12\"\n\nassert solution(\"\"\"\n5 2\n3 7 19 3 3\n\"\"\") == \"0\"\n\n\"\"\"\n\nThe third test does not contain a solution.\n\n\"\"\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n2 78 4 10') == 12\nassert solution('5 2\\n3 7 19 3 3') == 0\nassert solution('5 2\\n3 7 19 3 10') == 12\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == \"12\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\"\nassert solution(\"5 2\\n3 7 19 3 3\") == \"0\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 7 19 3 3\") == \"0\"\nassert solution(\"4 2\\n2 78 4 10\") == \"12\""
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n2 78 4 10\") == 12\nassert solution(\"5 2\\n3 7 19 3 3\") == 0\nassert solution(\"6 11\\n45 1 10 12 11 7\") == 7\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n2 78 4 10') == '12'\nassert solution('5 2\\n3 7 19 3 3') == '0'\n\nsolution(stdin)\n\n\n\n'''"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 11\\n45 1 10 12 11 7\") == 7\nassert solution(\"4 2\\n2 78 4 10\") == 12\nassert solution(\"5 2\\n3 7 19 3 3\") == 0\n\"\"\"\n\nn, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\ncounter = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if (a[i] * a[j]) % k == 0:\n            counter += 1\n\nprint(counter)\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 11\\n45 1 10 12 11 7\") == 7\n\"\"\"\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\") == 9\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 5\") == \"9\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\nB = list(map(int, sys.stdin.readline().strip().split()))\n\nA = B\n\nfor i in range(n - 1):\n    A[i] = max(A[i], A[i + 1])\n\nprint(sum(A))"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 3\") == '9'\nassert solution(\"6 2 9\") == '18'\nassert solution(\"7 7 7\") == '49'\nassert solution(\"3 2 1\") == '4'\nassert solution(\"5 5 1\") == '14'\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 5\") == \"9\"\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n3\n2 5\n''') == '9'\nassert solution('''\n2\n2 3\n''') == '3'\n\nassert solution('''\n5\n3 1 4 2 5\n''') == '15'\nassert solution('''\n4\n6 4 3 7\n''') == '21'\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n3 5 4 2 2 4\") == \"9\"\nassert solution(\"7\\n3 5 4 1 1 2\") == \"9\"\nassert solution(\"8\\n3 5 4 1 1 2 3\") == \"12\"\nassert solution(\"9\\n3 5 4 1 1 2 3 4\") == \"16\"\n\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2 5\\n') == '9'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5\\n5\") == \"14\"\nassert solution(\"3\\n2\\n5\") == \"9\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2 5') == '9'\nassert solution('2\\n5') == '9'\nassert solution('4\\n5 5 5') == '16'\nassert solution('5\\n2 1 5 3 1') == '13'\nassert solution('7\\n5 1 4 1 1 1 1') == '15'\n\nprint('Test passed')\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 5\") == \"9\"\n\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\"\nimport unittest\nfrom collections import defaultdict\nfrom typing import Iterator, List\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == 110"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10') == '110'\n\n\"\"\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\nprint(solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\"))\n\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == \"110\"\n\"\"\"\n\n\"\"\"\nApproach:\n1. Initialize a variable dp to 0\n2. Iterate through the input list:\n    2.1 If the a_i < b_i:\n        2.1.1. Increment the dp by c_i\n        2.1.2. Reset the dp to 0\n    2.2 Else:\n        2.2.1. Increment the dp by c_i\n3. Return dp\n\"\"\"\n\nn, m, q = map(int, input().split())\n\ndp = 0\n\nfor _ in range(q):\n    a, b, c, d = map(int, input().split())\n    \n    if a > b:\n        dp += c\n    else:\n        dp += c\n\nprint(dp)\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10\") == 110\n\"\"\"\n\nimport sys\n\nimport bisect\nfrom collections import defaultdict\nfrom itertools import permutations\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 4 6 3\\n') == '5'\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 4 6 3\\n\") == \"5\"\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\nmax_ = 0\n\nfor i in range(n):\n    for j in range(n):\n        if i == j:\n            continue\n        max_ = max(max_, abs(a[i] - a[j]))\n\nprint(max_)\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 4 6 3\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\n\"\"\"\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 4 6 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 4 6 3') == '5'\n\"\"\"\n\nfrom collections import namedtuple\n\nPoint = namedtuple('Point', 'x y')\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == ''\nassert solution('3 4 -1 -1') == '3'\nassert solution('2 3 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\""
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 0\\n0 1\\n0 2') == '2.2761423749'\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n\nN = int(input())\ncoordinates = [tuple(map(int, input().split())) for _ in range(N)]\n\ncoordinates.sort()\nlengths = []\nfor i in range(N):\n    lengths.append(sum(map(lambda x: abs(x[0]-x[1]), combinations(coordinates, i+1))))\nprint(sum(lengths)/len(lengths))\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.0\"\nassert solution(\"2\\n0 0\\n1 0\") == \"1.0\"\nassert solution(\"4\\n0 0\\n1 1\\n0 1\\n1 0\") == \"2.0\"\n\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n\n\nimport math\nfrom typing import Tuple\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.2761423749\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.0\\n\", \"Example #1\"\nassert solution(\"2\\n0 0\\n0 0\") == \"1.4142135623730951\\n\", \"Example #2\"\n\n\"\"\"\n\nimport math\nfrom typing import List"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 0\\n1 0\\n0 1\") == \"2.276142\"\n\"\"\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n0 0') == '1'\nassert solution('2\\n0 0\\n1 0') == '2'\nassert solution('3\\n0 0\\n1 0\\n0 1') == '2.0'\nassert solution('4\\n0 0\\n1 0\\n0 1\\n0 0') == '2.0'\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 0\\n0 1\\n0 0\") == \"2.2761423749\"\n\"\"\"\nfrom math import sqrt\nfrom collections import namedtuple\nfrom typing import List\nCoord = namedtuple('Coord', 'x y')"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('12 4') == '4'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12 4\") == \"4\"\nassert solution(\"13 4\") == \"5\"\nassert solution(\"3 2\") == \"1\"\n\nprint(\"All tests passed.\")\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(2, 4) == 1\nprint(solution(\"2 4\"))\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(12, 4) == 4\nassert solution(5, 5) == 0\nassert solution(3, 3) == 0\nassert solution(5, 2) == 2\n\"\"\"\n\nfrom sys import stdin\n\nA, B = [int(x) for x in stdin.readline().split()]\nprint(A * (B - 1) // 2)\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12 4\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12 4\") == \"4\"\n\n-------\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12 4\") == \"4\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12 4\\n\") == \"4\"\nassert solution(\"5 4\\n\") == \"0\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12 4\") == 4\n\"\"\"\n\na, b = map(int, stdin.readlines())\nprint(b - a)\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10000\") == \"3\"\nprint(solution(\"10000\"))"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n') == '1\\n'\nassert solution('2\\n') == '1\\n'\nassert solution('3\\n') == '2\\n'\nassert solution('4\\n') == '1\\n'\nassert solution('10000\\n') == '3\\n'"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3,11) == 2\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10\\n10000') == 3\n\"\"\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == 4\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n100\\n1000\\n5\\n101\\n20\\n1010\\n100\\n1011\\n101101\\n1011010\\n1011011\\n10111010\\n10111011\\n10111100\\n10111101\\n1011111010\\n1011111011\\n1011111100\\n1011111101\\n1011112010\\n1011112011\\n1011112100\\n1011112101\\n1011113010\\n1011113011\\n1011113100\\n1011113101\\n1011111101010\\n1011111101011\\n1011111101100\\n1011111101101\\n10111111111010\\n10111111111011\\n10111111111100\\n10111111111101\\n101111111101010\\n101111111101011\\n101111111101100\\n101111111101101\\n1011111111111010\\n1011111111111011\\n1011111111111100\\n1011111111111101\\n101111111111111010\\n10111111111111111\") == 3\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(100) == '100'\nassert solution(101) == '101'\nassert solution(12) == '12'\n\"\"\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10000\") == \"3\"\n\"\"\"\n\n\n\"\"\"\nSolution 1\n\"\"\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5') == \"1 1\"\nassert solution('10') == \"1 1\"\nassert solution('100') == \"1 100\"\nassert solution('101') == \"1 100\"\n\"\"\"\nimport math"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1234\") == \"4\"\nassert solution(\"12345\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n3 1 2 3 4\\n2 3 2\") == \"1\"\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4\\n2 1 3\\n3 1 2 3\\n2 3 2') == '1'\n\"\"\"\nimport stdio\nimport sys\n\nn, m = map(int, stdio.readline().split())\nK = []\nA = []\nfor i in range(n):\n    K_i = int(stdio.readline())\n    A_i = list(map(int, stdio.readline().split()))\n    K.append(K_i)\n    A.append(A_i)\n\nstdio.writeln(sum([sum([1 for i in range(K_i) if A[j][i] == a] + [0 for j in range(m) if A[j][i]!= a]) for j in range(n) for a in range(1, m+1)]) - n)\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input) == output\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_stdin_1) == test_expected_1\nassert solution(test_stdin_2) == test_expected_2\n\n\"\"\"\n\ntest_stdin_1 = \"\"\"\n3 4\n2 1 3\n3 1 2 3\n2 3 2\n\"\"\"\n\ntest_stdin_2 = \"\"\"\n3 3\n2 1 3\n3 1 2 3\n2 3 2\n\"\"\"\n\ntest_expected_1 = 1\n\ntest_expected_2 = 5\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n2 1 3\\n3 1 2 3\") == \"1\"\n\"\"\"\n\n\"\"\"\n- 1 \u2264 N, M \u2264 30\n- 1 \u2264 K_i \u2264 M\n- 1 \u2264 A_{ij} \u2264 M\n- For each i (1 \u2264 i \u2264 N), A_{i1}, A_{i2},..., A_{iK_i} are distinct\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4\\n2 1 3\\n3 1 2 3') == '1'\n\n---\n<h2>SOLUTION</h2>"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4\\n2 1 3\\n3 1 2 3') == '1'\nassert solution('3 4\\n3 1 2 3\\n2 3 2') == '3'\n\"\"\"\n\nimport sys\n\ndata = list(map(int, sys.stdin.readline().split()))\n\nn = data[0]\nm = data[1]\n\nlikes = [0] * m\n\nfor i in range(n):\n    likes[list(map(int, sys.stdin.readline().split()))[1] - 1] = set(list(map(int, sys.stdin.readline().split()))[2:])\n\nprint(len(set(likes)))\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1 3\\n3 1 2 3\\n2 3 2\\n') == 1\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == '0.5'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"0.5\"\n\"\"\"\n\nimport math\n\nstdin = input()"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '0.5'\n\"\"\"\n\nimport numpy as np\nimport random\nimport math\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '0.5'\nassert solution('6') == '0.5'\nassert solution('100') == '0.5'\nassert solution('100') == '0.5'\nassert solution('100') == '0.5'\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"0.5\"\nprint(solution(\"4\"))\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"0.5\"\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '0.5'\n\"\"\"\n\nfrom fractions import Fraction\n\nn = int(input())"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n') == '0.5'\nassert solution('4\\n3\\n2\\n1\\n4\\n') == '0.0'\nassert solution('4\\n4\\n3\\n2\\n1\\n') == '0.0'\n\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n') == '0.5'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprint(1 / n)\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\n------Solution------\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == 2\nassert solution(\"3\\n1\\n2 1\\n2\\n1 1\\n1\\n2 0\\n\") == 2\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == '2'\n\nprint(solution(stdin))\n\n----\n\n5\n1\n1 1\n1\n1 1\n1\n1 1\n\n----\n6\n1\n1 1\n1\n1 1\n1\n1 1\n1\n\n----\n7\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n\n----\n8\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n\n----\n9\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n\n----\n10\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n\n----\n11\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n\n----\n12\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n\n----\n13\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n\n----\n14\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n\n----\n15\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"3\n1\n2 1\n1\n1 1\n1\n2 0\n\"\"\") == \"2\"\nassert solution(\"\"\"5\n2\n1 1\n2 1\n1\n1 1\n1\n0 1\n\"\"\") == \"3\"\nassert solution(\"\"\"15\n8\n2 2\n5 5\n1\n4 6\n1\n2 0\n6 9\n1\n2 0\n7 8\n2 5\n1\n0 1\n2\n3 2\n1\n2 3\n3\n4 4\n4\n2 2\n4 5\n2\n0 1\n1\n2 2\n5 5\n1\n2 3\n6 8\n1\n4 0\n5\n3 2\n4\n2 4\n1\n0 1\n3\n3 2\n2\n0 1\n1\n1 2\n2\n2 2\n4 4\n2\n0 1\n5\n2 2\n5\n2 2\n1\n0 1\n4\n1\n0 1\n3\n1 1\n2\n3 2\n4\n4 1\n2\n1 1\n4\n1\n2 2\n2\n1 0\n4\n2 0\n2\n0 1\n2\n1 1\n4\n1\n1 1\n3\n1 0\n2\n2 0\n4\n4 1\n0\n4 1\n0\n1 0\n3\n1 1\n2\n3 2\n4\n2 2\n4\n0 1\n3\n2 1\n4\n2\n1 1\n4\n2\n0 1\n3\n1 1\n1\n0 1\n0\n1\n4\n2\n2 2\n1\n0 1\n4\n2\n1 0\n3\n1 0\n1\n1 1\n1\n1 1\n1\n2 2\n1\n1 1\n4\n1\n0 1\n0\n0\n\"\"\") == \"3\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n\") == 2\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"3\n1\n2 1\n1\n1 1\n1\n2 0\n\"\"\") == \"2\"\nprint(\"PASSED\")\n\n-----------------------------------------------------"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\\n') == '2'\n\"\"\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n2 1\\n1\\n1 1\\n1\\n2 0\") == \"2\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n0 3 2\\n1 3 1\\n0 1 1\\n0 1 1\\n3 2 3\\n2 0 3\\n0 1 1\\n1 3 1\\n1 1 1\\n2 2 3\\n2 1 1') == '2'\nassert solution('5\\n1 4 2\\n0 5 2\\n0 2 1\\n2 5 3\\n3 0 3\\n4 3 3\\n2 0 3\\n0 2 1\\n1 5 1\\n4 3 1') == '3'\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"dnifififnifnnifnif\") == \"dni...nifn...nifn...\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nassert solution(\"hello\") == \"hello\"\n\"\"\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"nikoandsolstice\") == \"nikoand...\"\nprint(solution(\"nikoandsolstice\"))\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('nikoandsolstice') == 'nikoand...'\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('apple') == 'apples'\nassert solution('banana') == 'bananas'\nassert solution('grape') == 'grapes'\nassert solution('pineapple') == 'pineapples'\nassert solution('orange') == 'oranges'\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('apple') == 'apples'\nassert solution('banana') == 'bananas'\nassert solution('grape') == 'grapes'\nassert solution('orange') == 'oranges'\nassert solution('watermelon') == 'watermelons'\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('apple') == 'apples'\nassert solution('banana') == 'bananas'\nassert solution('orange') == 'oranges'\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"apple\") == \"apples\"\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('apple') == 'apples'\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"apple\") == \"apples\"\nassert solution(\"pineapple\") == \"pineapples\"\nassert solution(\"pizza\") == \"pizzas\"\n\n\"\"\"\nimport re"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('apple') == 'apples'\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(Taknese('apple')) == 'apples'\n\"\"\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('apple') == 'apples'\nassert solution('donut') == 'donuts'\nassert solution('pizza') == 'pizzas'\nassert solution('waffle') == 'waffles'\nassert solution('plum') == 'plums'\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('apple') == 'apples'\nassert solution('atcoder') == 'atcodes'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\\n\") == \"1\"\nassert solution(\"3 2\\n2\\n1 1\\n1\\n3\\n\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\n-----TEST-----\nimport sys\nimport unittest\nimport io\nfrom unittest.mock import patch\nfrom collections import deque\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdin, stdout = sys.stdin, sys.stdout\n        sys.stdin, sys.stdout = stdin, stdout\n        with patch('sys.stdin', io.StringIO(input)):\n            with patch('sys.stdout', new=io.StringIO()) as fake_out:\n                solution()\n                self.assertEqual(fake_out.getvalue(), output)\n        sys.stdin, sys.stdout = stdin, stdout\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3 2\n2\n1 3\n1\n3\"\"\"\n        output = \"\"\"1\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"2 2\n2\n1 3\n1\n3\"\"\"\n        output = \"\"\"0\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"5 3\n2\n1 3\n1\n3\n2\"\"\"\n        output = \"\"\"3\"\"\"\n        self.assertIO(input, output)"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 2\n2\n1 3\n1\n3''') == '1'\n\nassert solution('''3 2\n2\n1 3\n1\n3''') == '2'\n\nassert solution('''3 2\n2\n1 1\n1\n3''') == '0'\n\nassert solution('''3 2\n2\n1 3\n1\n3''') == '2'\n\nassert solution('''3 2\n2\n1 2\n1\n3''') == '1'"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == '1'\n\"\"\"\n\nfrom collections import defaultdict\n\nN, K = map(int, input().split())\nd = defaultdict(set)\nfor i in range(K):\n    d[input()].add(i + 1)\n\nvictims = set()\nfor i in range(N):\n    victims.update(d[input()])\n\nprint(len(victims))\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n2\\n1 3\\n1\\n3\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n3 2\n2\n1 3\n1\n3\n''') == '1'\n\n-----Explanation-----\nThe following explanation is written in Japanese.\n\u3053\u306e\u4e2d\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u554f\u984c\u3092\u89e3\u3044\u3066\u3044\u307e\u3059\u3002\n\n\u4e00\u3064\u306e\u7814\u7a76\u5ba4\u306b\u306f\uff0cN\u4eba\u306e\u7814\u7a76\u8005\u304c\u3044\u307e\u3059\u3002\n\u3053\u308c\u3089\u306e\u7814\u7a76\u8005\u304c\u3001\u6307\u5b9a\u3055\u308c\u305f\u7814\u7a76\u306b\u3064\u3044\u3066\u4f55\u56de\u305a\u3064\u547c\u3070\u308c\u3066\u3044\u308b\u304b\u77e5\u308a\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u7814\u7a76\u5ba4\u3067\u306f\u3001K\u500b\u306e\u5546\u54c1\u304c\u552e\u304b\u308c\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u3089\u306e\u5546\u54c1\u3092\u552e\u304b\u308c\u3066\u3044\u308b\u4eba\u306f\u3001\u5404\u81ea\u3001k\u4eba\u306b\u5225\u306e\u5546\u54c1\u3092\u552e\u304b\u308c\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3042\u308b\u7814\u7a76\u5ba4\u3067\u306f\u3001\u3042\u308b\u7814\u7a76\u8005\u304c\u5404\u81ea\u3001d_i\u56de\u306e\u3088\u3046\u306b\u5546\u54c1\u3092\u552e\u3048\u3066\u3044\u308b\u3068\u3057\u307e\u3059\u3002\n\n\u3053\u308c\u3089\u306e\u7814\u7a76\u8005\u306f\u3001\u3042\u306a\u305f\u304c\u4ee5\u4e0b\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3068\u601d\u3044\u307e\u3059\u3002\n\n- \u4ed6\u306e\u7814\u7a76\u5ba4\u306e\u5546\u54c1\u304c\u81ea\u5206\u304c\u552e\u3048\u3066\u3044\u308b\u5546\u54c1\u3067\u306a\u3044\n- \u81ea\u5206\u304c\u552e\u3044\u305f\u5546\u54c1\u3092\u552e\u3048\u3066\u3044\u308b\u4eba\u3068\u4ed6\u306e\u7814\u7a76\u5ba4\u306e\u5546\u54c1\u304c\u540c\u3058\u3067\u3042\u308b\n\n\u3042\u306a\u305f\u304c\u4ee5\u4e0b\u306e\u554f\u984c\u3092\u89e3\u3044\u3066\u3044\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u554f\u984c\u3092\u89e3\u3044\u3066\u3044\u308b\u3068\u3044\u3046\u610f\u5473\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u51fa\u529b\u3092\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n1 \u3064\u306e\u554f\u984c\u306b\u3064\u3044\u3066 N \u500b\u306e\u884c\u304c\u73fe\u308c\u308b\u3068\u3044\u3046\u610f\u5473\u3067\u3001\n\u5165\u529b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nN K\nd_1\nA_{1, 1} \\cdots A_{1, d_1}\n\\vdots\nd_K\nA_{K, 1} \\cdots A_{K, d_K}\n\n\u3068\u3044\u3046\u610f\u5473\u3067\u3059\u3002\n\"\"\"\nimport sys"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n2\\n1 3\\n1\\n3') == '1'\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\nprint(solution(\"aabbbbaaca\"))"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\nassert solution(\"aaaaaaaaa\") == \"1\"\nassert solution(\"aabbbbaacca\") == \"6\"\n\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aabbbbaaca') == '5'\nprint(solution(stdin))\n\nSolution.\n\"\"\"\n\nimport string\nimport sys"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aabbbbaaca\") == 5\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aabbbbaaca\") == 5\n\"\"\"\n\n\"\"\"\nGiven an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.\n\nFor example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.\n\nYou can modify the input array in-place.\n\"\"\"\n\n\"\"\"\nSpace complexity: O(n)\nTime complexity: O(n)\n\nIterate through the list and add all values from 1 to the length of the list to a hash table. We know the difference of the index and the value will be the first missing positive integer.\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aabbbbaaca\") == 5\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('aabbbbaaca') == '5'"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aabbbbaaca\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abaca') == '5'\nassert solution('aabbbbaaca') == '5'\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n5 2 4') == '3'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n5 2 4\") == '3'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3, 5, 2, 4) == 3\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n5 2 4\") == \"3\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n5 2 4') == '3'\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n5 2 4\") == '3'\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n5 2 4') == '3'\n\n\"\"\"\n\n\n\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1 1 3') == '2'\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1 1 3\") == 2\n\"\"\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\nassert solution(\"3 3 4 5\") == \"7\"\n\nimport os\nimport sys"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1 1 3') == '2'\n\"\"\"\n\nfrom math import inf\n\na, b, c, k = map(int, input().split())"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 1 3\") == \"2\"\nassert solution(\"2 1 1 3\") == \"2\"\nassert solution(\"1 1 1 3\") == \"0\"\nassert solution(\"2 1 1 3\") == \"2\"\nassert solution(\"1 1 1 3\") == \"0\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"2 2 3 3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\"\"\"\n\nimport sys\n\na, b, c, k = [int(x) for x in sys.stdin.readline().split()]"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 1 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 8') == 'Yes'\nassert solution('7 7') == 'No'\nassert solution('2 2') == 'No'\nassert solution('1 1') == 'No'\nassert solution('6 4') == 'Yes'\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 8\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 8\\n') == 'Yes'\nassert solution('4 5\\n') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 8') == 'Yes'\n\"\"\"\n\nfrom math import factorial\n\nfrom input_parser import parse\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'Yes'\nassert solution('5 4') == 'No'\nassert solution('10 8') == 'No'\nassert solution('100 4') == 'Yes'\nassert solution('100 6') == 'Yes'\n\nprint('Success')\n'''"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 8\\n') == 'Yes'\n\n-----TODO-----\n- Implement the algorithm.\n\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3') == 'No'\nassert solution('5 5') == 'Yes'\nassert solution('2 4') == 'Yes'\nassert solution('6 8') == 'No'\nassert solution('1 2') == 'Yes'\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 8\") == 'Yes'\nassert solution(\"4 5\") == 'No'\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 8') == 'Yes'\nassert solution('1 1') == 'Yes'\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n1 2\\n1 3\\n2 3\\n') == '2'\nassert solution('4 2\\n1 4\\n2 2\\n2 3\\n') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2\\n1 3\\n2 3\\n\") == \"2\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"4 2\\n1 2\\n1 3\\n1 4\\n2 4\") == \"4\"\nassert solution(\"8 8\\n1 2\\n1 3\\n1 4\\n1 5\\n2 5\\n2 6\\n2 7\\n3 7\\n4 7\\n5 7\") == \"7\"\nassert solution(\"5 4\\n1 2\\n1 3\\n1 4\\n1 5\\n2 5\") == \"5\"\nassert solution(\"5 5\\n1 2\\n1 3\\n1 4\\n1 5\\n2 5\") == \"0\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\\n\") == \"2\"\n\"\"\"\n\nimport sys\nimport functools\n\nsys.setrecursionlimit(10 ** 6)\n\nN, M = list(map(int, input().split()))\nedges = [list(map(int, input().split())) for _ in range(M)]\n\ngraph = {}\nfor n in range(1, N + 1):\n    graph[n] = set()\n\nfor u, v in edges:\n    graph[u].add(v)\n    graph[v].add(u)\n\n@functools.lru_cache(None)\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\\n\") == \"2\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n1 2\\n1 3\\n2 3\\n') == '2'\n\"\"\"\nimport sys\nfrom math import factorial"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 3\\n4 4\") == \"0\""
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 2\\n1 3\\n2 3\") == \"2\"\n\n-----"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"3 3\n1 2\n1 3\n2 3\n\"\"\") == \"2\"\n\n\"\"\"\nimport collections\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n1 2\\n1 3\\n2 3\\n4 4\") == \"2\"\nassert solution(\"4 2\\n1 2\\n1 3\\n2 3\\n4 4\") == \"0\"\nassert solution(\"4 3\\n1 2\\n1 3\\n2 3\\n4 4\") == \"2\"\nassert solution(\"4 4\\n1 2\\n1 3\\n2 3\\n4 4\") == \"1\"\nassert solution(\"5 5\\n1 2\\n1 3\\n2 3\\n4 5\\n5 4\") == \"1\"\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nfrom typing import DefaultDict\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"18\"\nassert solution(\"5 3\") == \"16\"\nassert solution(\"5 4\") == \"15\"\nassert solution(\"5 5\") == \"15\"\n\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2') == '18'\nassert solution('4 1') == '5'\nassert solution('8 7') == '4'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"10\"\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    def minimumAbsoluteDifference(self, N: int, L: List[int]) -> int:\n        sorted_L = sorted(L)\n        min_diff = abs(sorted_L[0] - sorted_L[1])\n        for i in range(1, len(sorted_L) - 1):\n            diff = abs(sorted_L[i] - sorted_L[i + 1])\n            if diff < min_diff:\n                min_diff = diff\n        return min_diff\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"18\"\n\"\"\"\n\nfrom math import inf\nfrom typing import List\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"18\"\n\n-------\n\nApproach 1: Brute Force\n-------\n\nN, L = map(int, stdin.split())\n\napples = sorted(map(int, stdin.split()))\n\nmin_diff = float(\"inf\")\n\nfor i in range(N-1):\n    remaining = apples[i:]\n    remaining = sorted(remaining, key=lambda x: abs(x-L))\n    diff = sum(remaining[1:])\n    if min_diff > diff:\n        min_diff = diff\n\nreturn min_diff"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n1 2 3 4\") == \"6\"\nassert solution(\"4 1\\n-1 2 3 4\") == \"0\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2') == '18'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n2 3 4 5 6\\n\") == \"18\"\n\"\"\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == '18'\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n1 2 3 4 5\\n\") == \"18\"\n\nimport sys\n\nstdin = sys.stdin.read()\nN, L = [int(i) for i in stdin.split(\"\\n\")]\nassert N <= 200 and N >= 2\nassert -100 <= L <= 100\n\napples = [int(i) for i in stdin.split(\"\\n\")[1].split(\" \")]\nassert len(apples) == N\n\nmin_sum = abs(sum(apples))\n\nfor i in range(N):\n    apples[i] = apples[i] - L\n\nmin_abs_sum = abs(sum(apples))\n\nprint(min_sum)\nprint(min_abs_sum)"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"15\") == \"60\"\n\n\"\"\"\n\nimport sys\n\nclass Solution:\n    # @param A : integer\n    # @return an integer\n    def solve(self, A):\n        sum = 0\n        for i in range(1, A+1):\n            if i % 3 == 0 and i % 5 == 0:\n                sum += 'FizzBuzz'\n            elif i % 3 == 0:\n                sum += 'Fizz'\n            elif i % 5 == 0:\n                sum += 'Buzz'\n            else:\n                sum += i\n        return sum"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('15') == '60'\n\"\"\"\n\nn = int(input().strip())\n\nnum = []\nfor i in range(1,n+1):\n    if i % 15 == 0:\n        num.append('FizzBuzz')\n    elif i % 3 == 0:\n        num.append('Fizz')\n    elif i % 5 == 0:\n        num.append('Buzz')\n    else:\n        num.append(i)\n\nprint(sum(num))"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n15') == \"60\"\n\"\"\""
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2') == '12'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('10') == '55'\nassert solution('15') == '60'\n\nassert solution('1') == '1'\nassert solution('2') == '2'\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"15\") == \"60\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3) == 6\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('15') == '60'\nassert solution('1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"15\") == \"60\"\n\n------\n5\n\n------\n1\n\n------\n7\n\n------\n8\n\n------\n11\n\n------\n13\n\n------\n14\n\n------\n15\n\n------\n16\n\n------\n17\n\n------\n18\n\n------\n19\n\n------\n20\n\n------\n21\n\n------\n22\n\n------\n23\n\n------\n24\n\n------\n25\n\n------\n26\n\n------\n27\n\n------\n28\n\n------\n29\n\n------\n30\n\n------\n31\n\n------\n32\n\n------\n33\n\n------\n34\n\n------\n35\n\n------\n36\n\n------\n37\n\n------\n38\n\n------\n39\n\n------\n40\n\n------\n41\n\n------\n42\n\n------\n43\n\n------\n44\n\n------\n45\n\n------\n46\n\n------\n47\n\n------\n48\n\n------\n49\n\n------\n50\n\n------\n51\n\n------\n52\n\n------\n53\n\n------\n54\n\n------\n55\n\n------\n56\n\n------\n57\n\n------\n58\n\n------\n59\n\n------\n60\n\n------\n61\n\n------\n62\n\n------\n63\n\n------\n64\n\n------\n65\n\n------\n66\n\n------\n67\n\n------\n68\n\n------\n69\n\n------\n70\n\n------\n71\n\n------\n72\n\n------\n73\n\n------\n74\n\n------\n75\n\n------\n76\n\n------\n77\n\n------\n78\n\n------\n79\n\n------\n80\n\n------\n81\n\n------\n82\n\n------\n83\n\n------\n84\n\n------\n85\n\n------\n86\n\n------\n87\n\n------\n88\n\n------\n89\n\n------\n90\n\n------\n91\n\n------\n92\n\n------\n93\n\n------\n94\n\n------\n95\n\n------\n96\n\n------\n97\n\n------\n98\n\n------\n99\n\n------\n100\n\n------\n101\n\n------\n102\n\n------\n103\n\n------\n104\n\n------\n105\n\n------\n106\n\n------\n107\n\n------\n108\n\n------\n109\n\n------\n110\n\n------\n111\n\n------\n112\n\n------\n113\n\n------\n114\n\n------\n115\n\n------\n116\n\n------\n117\n\n------\n118\n\n------\n119\n\n------\n120\n\n------\n121\n\n------\n122\n\n------\n123\n\n------\n124\n\n------\n125\n\n------\n126\n\n------\n127\n\n------\n128\n\n------\n129\n\n------\n130\n\n------\n131\n\n------\n132\n\n------\n133\n\n------\n134\n\n------\n135\n\n------\n136\n\n------\n137\n\n------\n138\n\n------\n139\n\n------\n140\n\n------\n141\n\n------\n142\n\n------\n143\n\n------\n144\n\n------\n145\n\n------\n146\n\n------\n147\n\n------\n148\n\n------\n149\n\n------\n150\n\n------\n151\n\n------\n152\n\n------\n153\n\n------\n154\n\n------\n155\n\n------\n156\n\n------\n157\n\n------\n158\n\n------\n159\n\n------\n160\n\n------\n161\n\n------\n162\n\n------\n163\n\n------\n164\n\n------\n165\n\n------\n166\n\n------\n167\n\n------\n168\n\n------\n169\n\n------\n170\n\n------\n171\n\n------\n172\n\n------\n173\n\n------\n174\n\n------\n175\n\n------\n176\n\n------\n177\n\n------\n178\n\n------\n179\n\n------\n180\n\n------\n181\n\n------\n182\n\n------\n183\n\n------\n184\n\n------\n185\n\n------\n186\n\n------\n187\n\n------\n188\n\n------\n189\n\n------\n190\n\n------\n191\n\n------\n192\n\n------\n193\n\n------\n194\n\n------\n195\n\n------\n196\n\n------\n197\n\n------\n198\n\n------\n199\n\n------\n200\n\n------\n201\n\n------\n202\n\n------\n203\n\n------\n204\n\n------\n205\n\n------\n206\n\n------\n207\n\n------\n208\n\n------\n209\n\n------\n210\n\n------\n211\n\n------\n212\n\n------\n213\n\n------\n214\n\n------\n215\n\n------\n216\n\n------\n217\n\n------\n218\n\n------\n219\n\n------\n220\n\n------\n221\n\n------\n222\n\n------\n223\n\n------\n224\n\n------\n225\n\n------\n226\n\n------\n227\n\n------\n228\n\n------\n229\n\n------\n230\n\n------\n231\n\n------\n232\n\n------\n233\n\n------\n234\n\n------\n235\n\n------\n236\n\n------\n237\n\n------\n238\n\n------\n239\n\n------\n240\n\n------\n241\n\n------\n242\n\n------\n243\n\n------\n244\n\n------\n245\n\n------\n246\n\n------\n247\n\n------\n248\n\n------\n249\n\n------\n250\n\n------\n251\n\n------\n252\n\n------\n253\n\n------\n254\n\n------\n255\n\n------\n256\n\n------\n257\n\n------\n258\n\n------\n259\n\n------\n260\n\n------\n261\n\n------\n262\n\n------\n263\n\n------\n264\n\n------\n265\n\n------\n266\n\n------\n267\n\n------\n268\n\n------\n269\n\n------\n270\n\n------\n271\n\n------\n272\n\n------\n273\n\n------\n274\n\n------\n275\n\n------\n276\n\n------\n277\n\n------\n278\n\n------\n279\n\n------\n280\n\n------\n281\n\n------\n282\n\n------\n283\n\n------\n284\n\n------\n285\n\n------\n286\n\n------\n287\n\n------\n288\n\n------\n289\n\n------\n290\n\n------\n291\n\n------\n292\n\n------\n293\n\n------\n294\n\n------\n295\n\n------\n296\n\n------\n297\n\n------\n298\n\n------\n299\n\n------\n300\n\n------\n301\n\n------\n302\n\n------\n303\n\n------\n304\n\n------\n305\n\n------\n306\n\n------\n307\n\n------\n308\n\n------\n309\n\n------\n310\n\n------\n311\n\n------\n312\n\n------\n313\n\n------\n314\n\n------\n315\n\n------\n316\n\n------\n317\n\n------\n318\n\n------\n319\n\n------\n320\n\n------\n321\n\n------\n322\n\n------\n323\n\n------\n324\n\n------\n325\n\n------\n326\n\n------\n327\n\n------\n328\n\n------\n329\n\n------\n330\n\n------\n331\n\n------\n332\n\n------\n333\n\n------\n334\n\n------\n335\n\n------\n336\n\n------\n337\n\n------\n338\n\n------\n339\n\n------\n340\n\n------\n341\n\n------\n342\n\n------\n343\n\n------\n344\n\n------\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(15) == 60\n\"\"\"\nimport sys\n\nn = int(input())\n\nfizzBuzz = [0, 'Fizz', 'Buzz', 'Fizz', '7', '8', '11', 'Fizz', '13', '14', 'FizzBuzz']\n\nresult = 0\nfor i in range(1, n+1):\n    if i % 3 == 0 and i % 5 == 0:\n        result += fizzBuzz.index('FizzBuzz')\n    elif i % 3 == 0:\n        result += fizzBuzz.index('Fizz')\n    elif i % 5 == 0:\n        result += fizzBuzz.index('Buzz')\n    else:\n        result += i\n\nprint(result)\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 7 10 6 5') == '8'\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"\n\"\"\"\nfrom itertools import combinations"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"\n\nX, N = [int(i) for i in input().split()]\n\nA = set([int(i) for i in input().split()])\n\nans = float(\"inf\")\nfor i in range(X+1):\n    if i in A:\n        continue\n    ans = min(ans, abs(X-i))\n\nprint(ans)\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 7 10 6 5') == '8'\n\"\"\"\n\nfrom sys import stdin\n\nX, N = map(int, stdin.readline().split())\nA = [int(i) for i in stdin.readline().split()]\n\nA.sort()"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 5\\n4 7 10 6 5\") == \"8\"\n\"\"\"\n\nfrom sys import stdin\n\nX, N = [int(x) for x in stdin.readline().split()]\nA = [int(x) for x in stdin.readline().split()]\n\nres = [abs(X - i) for i in A]\nprint(A[res.index(min(res))])\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 7 10 6 5\") == \"8\"\n\"\"\"\n\nimport sys\n\nX, N = map(int, sys.stdin.readline().strip().split())\n\nseq = list(map(int, sys.stdin.readline().strip().split()))\n\nsys.stdout.write(str(min(abs(x - X) for x in seq if x not in seq[:seq.index(X)] + seq[seq.index(X) + 1:])) + \"\\n\")\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 5\\n4 7 10 6 5') == '8'\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 7 10 6 5\\n') == '8'\n\"\"\"\n\n\"\"\"\nConcept:\nThe problem is to find the element in the list not in the given sequence with the minimum difference from the given number.\n\nApproach:\n    (1) Sort the given sequence in ascending order\n    (2) Do a binary search on the sorted list\n    (3) Once found the element, do a linear search to find the nearest element\n    (4) Return the minimum difference\n\"\"\"\n\nfrom typing import List, Tuple\nimport sys\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n2 1') == '1'\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n2 1\") == '1'\nassert solution(\"4 3\\n2 1\") == '3'\nassert solution(\"5 4\\n2 1\") == '6'\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 2\n2 1\n''') == '1'\n\"\"\"\n\nH, W = [int(num) for num in stdin.split()]\ns = 0\n\nfor row in range(H):\n    for col in range(W):\n        s += 1\n\nprint(s)\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\"\n\nimport sys\n\nH, W = map(int, input().split())\nfor h in range(H):\n    for w in range(W):\n        print(h)\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n2 1\") == '1'\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\nassert solution(\"2 1\\n2 1\") == \"1\"\nassert solution(\"1 1\\n1 1\") == \"0\"\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2\\n2 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 1\") == \"1\"\nassert solution(\"3 3\\n1 1\") == \"0\"\nassert solution(\"4 4\\n1 1\") == \"1\"\nassert solution(\"2 3\\n2 2\") == \"0\"\nassert solution(\"5 5\\n1 1\") == \"1\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n2 1\") == \"1\"\nassert solution(\"3 3\\n3 3\") == \"4\"\nassert solution(\"3 2\\n2 1\") == \"1\"\nassert solution(\"3 2\\n3 2\") == \"1\"\nassert solution(\"5 5\\n3 2\") == \"0\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n2 1') == '1'\n\"\"\"\n\nH, W = [int(x) for x in stdin.split('\\n')[0].split()]\nh, w = [int(x) for x in stdin.split('\\n')[1].split()]\n\nprint(H*W - h*w)\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == '6'\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\nassert solution('7 2\\n3 7 5 1 10 3 20') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-1\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == '6'\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 7 4 1 10 3 20') == '6'\nassert solution('7 2 3 7 5 1 10 3 20') == '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 1\") == \"6\"\nassert solution(\"7 2\") == \"-1\"\nassert solution(\"7 3\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"5 1\") == \"-1\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 4\\n3 7 5 1 10 3 20') == '6'\n\"\"\"\n\n\nfrom typing import List, Tuple, Set\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 4\\n3 7 5 1 10 3 20\") == \"6\"\nassert solution(\"7 2\\n3 7 5 1 10 3 20\") == \"-1\"\n\"\"\""
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"5\"\nassert solution(\"7 2\") == \"-1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........') == '3\\n3 4 1\\n3 5 2\\n3 5 1'\n\n\"\"\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == '3'\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"....*...\\n...*..*.\\n..*....\\n...*..*.\\n....*...\\n........\") == \"3\"\nassert solution(\"....*...\\n...*..*.\\n..*....\\n...*..*.\\n....*...\\n........\") == \"3\"\nassert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"2 2 1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"3\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"3\"\nassert solution(\"3 3\\n*.*\\n.*.\\n*.*\") == \"3\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n.*.*\\n.*.\") == \"2 2 1\"\nassert solution(\"3 3\\n***\\n.*.\") == \"3 3 1\"\nassert solution(\"5 5\\n.***\\n.*.\\n.*.\\n.*.\") == \"3 2 1\"\nassert solution(\"3 3\\n.*.*\\n.*.\") == \"3 3 1\"\nassert solution(\"6 8\\n.**.\\n.*.*\\n.*.*\\n.*.*\\n.*.*\\n.*.*\") == \"3 5 1\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3\\n.*\\n.*\\n*.') == '2 2 1\\n3 3 1\\n3 4 1'\n\nassert solution('3 5\\n.*\\n.*\\n*.') == '-1'\n\nassert solution('3 2\\n*.*\\n.*.') == '3 2 1\\n3 2 1'\n\nassert solution('3 2\\n*.*\\n.*.') == '3 2 1\\n3 2 1'\n\nassert solution('1 1\\n*.') == '2 2 1\\n3 2 1'"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\".*..*..*******..**.*****.**.*.****..**..*..*..*\") == \"2\"\nassert solution(\".....*......*....*.....*....*....*....*.....*....*\") == \"7\"\nassert solution(\"*****...*...******...*...******...*...******...*\") == \"12\"\nassert solution(\"*...*...*...**...*...*...****...*...**...*...*\") == \"11\"\nassert solution(\"****...*...****...*...****...*...****...*...****\") == \"14\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n.*\\n.*\\n*.\") == \"3\"\nassert solution(\"3 3\\n.*\\n.*\\n*.\") == \"3\"\nassert solution(\"3 3\\n.*\\n.*\\n*.\") == \"3\"\nassert solution(\"3 3\\n.*\\n.*\\n*.\") == \"3\"\nassert solution(\"3 3\\n.*\\n.*\\n*.\") == \"3\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\n\n\"\"\"\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 1\\n3 5 2\\n3 5 1\") == \"3\"\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aaaa\") == \"3\"\nassert solution(\"aabc\") == \"2\"\n\n'''\nimport sys\nimport collections\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('good') == 0\nassert solution('string') == 1\nassert solution('xyyx') == 1\n\"\"\""
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aabc\") == \"ab\"\nassert solution(\"aaa\") == \"ab\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abcdef') == 'abcd'\nassert solution('abcd') == 'abcd'\nassert solution('a') == ''\nassert solution('aabbc') == 'abc'\n\"\"\""
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('aa') == 'a'\nassert solution('aaaa') == ''\nassert solution('aab') == 'a'\nassert solution('aaab') == 'a'\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"good\") == 0\nassert solution(\"string\") == 1\nassert solution(\"xyyx\") == 1\nassert solution(\"x\") == 0\n\nprint(solution(\"good\"))\nprint(solution(\"string\"))\nprint(solution(\"xyyx\"))\nprint(solution(\"x\"))\n\"\"\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('good') == '0'\nassert solution('string') =='s'\nassert solution('xyyx') == '1'\nassert solution('bad') == '2'\nassert solution('aa') == '1'\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"xzyx\") == \"xy\"\nassert solution(\"xy\") == \"\"\nassert solution(\"bad\") == \"ab\"\nassert solution(\"good\") == \"\"\n\n\"\"\""
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('good') == '0'\nassert solution('string') == '1'\nassert solution('xyyx') == '2'\nassert solution('aa') == '1'\nassert solution('aabc') == '2'\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1') == 'YES\\n10100'\nassert solution('4 4\\n1 2\\n2 3\\n3 4') == 'NO'\nassert solution('7 4\\n2 4\\n1 4\\n3 4\\n1 5\\n2 7\\n3 5') == 'YES\\n1110'\nassert solution('1 1\\n2 1') == 'NO'\n\"\"\"\nimport math\n\nN, M = map(int, input().split())\ngraph = [[False] * N for _ in range(N)]\nfor _ in range(M):\n    a, b = map(int, input().split())\n    graph[a - 1][b - 1] = True\n    graph[b - 1][a - 1] = True\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n3 1\\n4 1\") == \"YES\\n10100\"\nassert solution(\"6 4\\n1 2\\n2 3\\n3 4\\n5 6\") == \"NO\"\nassert solution(\"4 4\\n1 2\\n2 3\\n3 4\") == \"YES\\n10100\"\nassert solution(\"5 4\\n1 2\\n2 3\\n3 4\\n5 1\") == \"YES\\n10110\"\nassert solution(\"6 5\\n1 2\\n2 3\\n3 4\\n5 6\\n1 2\") == \"YES\\n10110\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == output()\n\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\\n\") == \"YES\\n10100\"\nassert solution(\"4 4\\n1 2\\n1 3\\n2 3\\n\") == \"YES\\n101010\"\nassert solution(\"5 8\\n1 3\\n2 4\\n3 5\\n4 6\\n5 7\\n6 7\\n7 1\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n\") == \"NO\"\nassert solution(\"6 6\\n1 3\\n2 4\\n3 5\\n4 6\\n5 1\\n6 1\\n\") == \"YES\\n110110\"\n\n\"\"\"\nimport sys\n\nclass Graph:\n    def __init__(self, n, m):\n        self.n = n\n        self.m = m\n        self.adj = [[] for _ in range(self.n)]\n        for _ in range(m):\n            u, v = map(int, sys.stdin.readline().split())\n            self.adj[u - 1].append(v)\n            self.adj[v - 1].append(u)"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1') == 'YES\\n10100'\nassert solution('8 9\\n1 2\\n2 1\\n3 2\\n4 3\\n5 4\\n6 3\\n7 6\\n8 5\\n9 7') == 'NO'\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == 'YES\\n10100'\nassert solution(\"5 4\\n1 5\\n2 1\\n1 4\") == 'NO'\nassert solution(\"5 5\\n1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == 'YES\\n10100'\nassert solution(\"5 5\\n1 4\\n2 1\\n1 4\\n3 1\\n6 1\") == 'YES\\n10100'\nassert solution(\"5 5\\n1 4\\n2 1\\n1 4\\n3 1\\n6 1\") == 'YES\\n10100'\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 4\\n2 1\\n3 2\\n6 2\\n\") == \"10100\"\n\n\n\n\"\"\"\n\nimport sys\n\n\nclass DirectedGraph:\n    def __init__(self, n_vertices: int, n_edges: int) -> None:\n        self.n_vertices = n_vertices\n        self.n_edges = n_edges\n        self.dgraph = [[] for _ in range(n_vertices)]\n        self.n_incoming = [0] * n_vertices\n\n    def add_edge(self, u: int, v: int) -> None:\n        self.dgraph[v].append(u)\n        self.n_incoming[u] += 1\n\n    def __str__(self):\n        return str(self.dgraph)\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 2\\n1 3\\n2 3\\n2 4\\n1 4\\n4') == 'NO'\nassert solution('4 4\\n1 2\\n3 4\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n4') == 'YES'\nassert solution('3 4\\n1 2\\n1 3\\n2 3\\n2 4\\n1 4\\n2 4\\n3 4\\n4') == 'NO'\nassert solution('5 4\\n1 2\\n2 3\\n2 4\\n1 5\\n2 5\\n3 5\\n4') == 'NO'\nassert solution('7 7\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n4 7\\n4 8\\n5 8\\n6 9\\n7 9\\n7 10\\n6 10\\n7 11\\n7 12\\n6 12\\n7 13\\n7 14\\n6 14\\n7 15\\n7 16\\n6 16\\n7 17\\n7 18\\n6 18\\n7 19\\n7 20\\n6 20\\n7 21\\n7 22\\n6 22\\n7 23\\n7 24\\n6 24\\n7 25\\n7 26\\n6 26\\n7 27\\n7 28\\n6 28\\n7 29\\n7 30\\n6 30\\n7 31\\n7 32\\n6 32\\n7 33\\n7 34\\n6 34\\n7 35\\n7 36\\n6 36\\n7 37\\n7 38\\n6 38\\n7 39\\n7 40\\n6 40\\n7 41\\n7 42\\n6 42\\n7 43\\n7 44\\n6 44\\n7 45\\n7 46\\n6 46\\n7 47\\n7 48\\n6 48\\n7 49\\n7 50\\n6 50\\n7 51\\n7 52\\n6 52\\n7 53\\n7 54\\n6 54\\n7 55\\n7 56\\n6 56\\n7 57\\n7 58\\n6 58\\n7 59\\n7 60\\n6 60\\n7 61\\n7 62\\n6 62\\n7 63\\n7 64\\n6 64\\n7 65\\n7 66\\n6 66\\n7 67\\n7 68\\n6 68\\n7 69\\n7 70\\n6 70\\n7 71\\n7 72\\n6 72\\n7 73\\n7 74\\n6 74\\n7 75\\n7 76\\n6 76\\n7 77\\n7 78\\n6 78\\n7 79\\n7 80\\n6 80\\n7 81\\n7 82\\n6 82\\n7 83\\n7 84\\n6 84\\n7 85\\n7 86\\n6 86\\n7 87\\n7 88\\n6 88\\n7 89\\n7 90\\n6 90\\n7 91\\n7 92\\n6 92\\n7 93\\n7 94\\n6 94\\n7 95\\n7 96\\n6 96\\n7 97\\n7 98\\n6 98\\n7 99\\n7 100\\n6 100\\n7 101\\n7 102\\n6 102\\n7 103\\n7 104\\n6 104\\n7 105\\n7 106\\n6 106\\n7 107\\n7 108\\n6 108\\n7 109\\n7 110\\n6 110\\n7 111\\n7 112\\n6 112\\n7 113\\n7 114\\n6 114\\n7 115\\n7 116\\n6 116\\n7 117\\n7 118\\n6 118\\n7 119\\n7 120\\n6 120\\n7 121\\n7 122\\n6 122\\n7 123\\n7 124\\n6 124\\n7 125\\n7 126\\n6 126\\n7 127\\n7 128\\n6 128\\n7 129\\n7 130\\n6 130\\n7 131\\n7 132\\n6 132\\n7 133\\n7 134\\n6 134\\n7 135\\n7 136\\n6 136\\n7 137\\n7 138\\n6 138\\n7 139\\n7 140\\n6 140\\n7 141\\n7 142\\n6 142\\n7 143\\n7 144\\n6 144\\n7 145\\n7 146\\n6 146\\n7 147\\n7 148\\n6 148\\n7 149\\n7 150\\n6 150\\n7 151\\n7 152\\n6 152\\n7 153\\n7 154\\n6 154\\n7 155\\n7 156\\n6 156\\n7 157\\n7 158\\n6 158\\n7 159\\n7 160\\n6 160\\n7 161\\n7 162\\n6 162\\n7 163\\n7 164\\n6 164\\n7 165\\n7 166\\n6 166\\n7 167\\n7 168\\n6 168\\n7 169\\n7 170\\n6 170\\n7 171\\n7 172\\n6 172\\n7 173\\n7 174\\n6 174\\n7 175\\n7 176\\n6 176\\n7 177\\n7 178\\n6 178\\n7 179\\n7 180\\n6 180\\n7 181\\n7 182\\n6 182\\n7 183\\n7 184\\n6 184\\n7 185\\n7 186\\n6 186\\n7 187\\n7 188\\n6 188\\n7 189\\n7 190\\n6 190\\n7 191\\n7 192\\n6 192\\n7 193\\n7 194\\n6 194\\n7 195\\n7 196\\n6 196\\n7 197\\n7 198\\n6 198\\n7 199\\n7 200\\n6 200\\n7 201\\n7 202\\n6 202\\n7 203\\n7 204\\n6 204\\n7 205\\n7 206\\n6 206\\n7 207\\n7 208\\n6 208\\n7 209\\n7 210\\n6 210\\n7 211\\n7 212\\n6 212\\n7 213\\n7 214\\n6 214\\n7 215\\n7 216\\n6 216\\n7 217\\n7 218\\n6 218\\n7 219\\n7 220\\n6 220\\n7 221\\n7 222\\n6 222\\n7 223\\n7 224\\n6 224\\n7 225\\n7 226\\n6 226\\n7 227\\"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5\\n2 1\\n1 4\\n3 1\\n6 1\") == \"YES\\n10100\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"3 5\n2 2\n1 2\n5 5\n\"\"\") == \"\"\"2\n3 4\"\"\"\nassert solution(\"\"\"1 7\n1 7\n\"\"\") == \"\"\"0\"\"\"\n\"\"\"\n\nassert solution(\"\"\"1 7\n1 7\n\"\"\") == \"\"\"0\"\"\"\n\"\"\"\n\nassert solution(\"\"\"2 2\n1 2\n1 2\n5 5\n\"\"\") == \"\"\"1\"\"\"\n\"\"\"\n\nassert solution(\"\"\"1 7\n1 7\n\"\"\") == \"\"\"0\"\"\"\n\"\"\""
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 0\nassert solution('1\\n2') == 0\nassert solution('1\\n2\\n1\\n1') == 0\nassert solution('1\\n2\\n1\\n3') == 0\nassert solution('1\\n2\\n1\\n2') == 1\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 0\nassert solution('2 2 1 2') == 1\nassert solution('7 7') == 0\nassert solution('1 2 1 2 5') == 2\nassert solution('1 1') == 0\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\nassert solution(\"1 7\\n1 7\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\n\n---"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n2 2\\n1 2\\n5 5\") == '0\\n3 4'\nassert solution(\"2 3\\n1 2\\n5 5\") == '0\\n2 4'\nassert solution(\"1 2\\n1 2\") == '0\\n0'\n\"\"\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\nassert solution(\"2 3\\n1 2\\n1 2\") == \"0\"\nassert solution(\"3 4\\n3 4\\n3 4\") == \"0\"\nassert solution(\"1 1\\n2 2\\n1 1\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\n\"\"\"\n\nn, m = map(int, input().split())\nsegments = []\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    segments.append([l, r])\n\nsegments.sort(key=lambda x: x[0])\n\ncount = 0\ns = []\nfor i in range(m):\n    if i not in s:\n        count += 1\n        s.append(i)\n\nprint(count)\nprint(*s, sep=\"\\n\")\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n2 2\\n1 2\\n5 5\") == \"2\\n3 4\"\nassert solution(\"1 7\\n1 7\") == \"0\"\n\nassert solution(\"2 1\\n2 1\") == \"1\"\nassert solution(\"2 1\\n1 1\") == \"0\"\n\nassert solution(\"2 1\\n1 1\\n2 2\") == \"0\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5\\n2 2\\n1 2\\n5 5') == '2\\n3 4'\nassert solution('1 7\\n1 7') == '0'\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 9 2 3') == 2\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 9 2 3''') == 2\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 9 2 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4 9 2 3''') == 2\nassert solution('''4 9 2 10''') == 0\n'''\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 9 2 3') == 2\n\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 9 2 3\") == 2\n\"\"\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 9 2 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 9 2 3') == '2'\n\n\"\"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 9 2 3') == 2\n\n\"\"\"\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 9 2 3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123456789\") == 'Yes'\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\n\"\"\"\n\nfrom typing import Union\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(123456789) == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"123456789\") == 'Yes'\nassert solution(\"1234\") == 'No'\nassert solution(\"1235\") == 'Yes'\nassert solution(\"12345\") == 'No'\nassert solution(\"123445\") == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123456789\") == \"Yes\"\nassert solution(\"12346789\") == \"No\"\n\n\"\"\"\nfrom typing import Dict"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(123456789) == \"Yes\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\n---\nSolution:"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"123456789\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('127') == '4'\nassert solution('3') == '1'\nassert solution('999999999') == '-1'\nassert solution('99999999999999999') == '-1'\nassert solution('999999999999999999999999999') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"127\") == '4'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('127') == '4'\nassert solution('1') == '0'\nassert solution('2') == '1'\nassert solution('3') == '2'\nassert solution('4') == '3'\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('127') == '4'\nassert solution('200') == '8'\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"127\") == \"4\"\n\n-------"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"127\") == \"4\"\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('127') == '4'\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"kyoto\") == \"tokyo\"\nassert solution(\"tokyo\") == \"kyoto\"\n\n\"\"\"\n\n\"\"\"\nGiven a string, find the number of times it can be rotated to obtain a string having same characters.\nInput:\nABCD\nOutput: 2\nExplanation: All rotations are:\nABCD\nBCAD\nCABD\nDBCA\nYou can rotate the string twice to get the same letters.\n\nInput:\nACAD\nOutput: 3\nExplanation: All rotations are:\nACAD\nACDA\nADCA\nADAC\nADCA\nADAC\n\"\"\"\n\n\"\"\"\nGiven an array of positive integers representing coin denominations and a single non-negative integer representing a target amount of money, write a function that returns the number of ways to make change for that target amount using the given coin denominations. Your function should return 0 if it's not possible to form the target amount using the given coin denominations.\n\nSample input: 7, [1,5]\nSample output: 2\nExplanation: There are two ways to make 7 cents:\n1. 1+1+1+1+1+1+1\n2. 1+1+1+5\n\"\"\"\n\n\"\"\"\nGiven a number n, find all primes less than n. Then we have the following solution:\n\nLet S be the list of all primes less than n.\nS has n-1 elements.\nOutput all numbers in the list that are the sum of two elements in S.\n\"\"\"\n\n\"\"\"\nGiven a string, find the longest palindromic subsequence in that string.\n\nExample:\nInput: \"bbbab\"\nOutput: 4\nExplanation: One possible longest palindromic subsequence could be \"bbbb\".\n\n\"\"\"\n\n\"\"\"\nGiven a string of even length, determine whether it can be obtained by rotating a palindromic sequence.\n\nExample:\nInput: \"cbbd\"\nOutput: true\nExplanation:\nOne possible longest palindromic subsequence could be \"bb\".\n\"\"\"\n\n\"\"\"\nGiven a string, return the number of ways that the string can be split into two non-empty palindrome substrings.\n\nNote: A palindrome string may not necessarily be limited to just dictionary words.\n\nEXAMPLE\n\"ababbb\" --> 3\n\"abcdde\" --> 1\n\"tactcoa\" --> 2\n\"\"\"\n\n\"\"\"\nGiven a string and an integer K, find and print all the substrings of size K with K distinct characters in lexicographical order.\n\nInput Format:\nThe first line contains the string,.\nThe second line contains integer, the length of each substring.\n\nOutput Format:\nPrint the  substrings of size  in lexicographical order each on a new line.\n\nSample Input:\naba\n2\nSample Output:\nab\nba\nExplanation:\nSubstrings in lexicographical order are:\n\"a\"\n\"b\"\n\"a\"\n\"b\"\n\"ab\"\n\"ba\"\n\"a\"\n\"b\"\n\"aa\"\n\"ba\"\n\"ab\"\n\"ba\"\n\"aa\"\n\"b\"\n\"aba\"\n\"aba\"\n\"baa\"\n\"b\"\n\"a\"\n\"a\"\n\"b\"\n\"aba\"\nExplanation:\n\"a\" is repeated twice, but it's still only one distinct character.\n\"ab\" occurs once, and it's repeated twice.\n\"aba\" occurs twice.\n\"b\" occurs three times.\n\"ba\" occurs twice.\n\"a\" occurs twice.\n\"aa\" occurs twice.\n\"b\" occurs three times.\n\"ba\" occurs twice.\n\"ab\" occurs once.\n\"aba\" occurs twice.\nSo, the total number of substrings with exactly  distinct characters is\n\n\"\"\"\n\n\"\"\"\nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nNote: For the purpose of this problem, we define empty string as valid palindrome.\n\nExample 1:\nInput: \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\" is a palindrome.\n\nExample 2:\nInput: \"race a car\"\nOutput: false\nExplanation: \"raceacar\" is not a palindrome.\n\"\"\"\n\n\"\"\"\nGiven a string S, check if the letters can be rearranged so that two characters that are adjacent to each other are not the same.\n\nIf possible, output any possible result.  If not possible, return the empty string.\n\nExample 1:\nInput: S = \"aab\"\nOutput: \"aba\"\n\nExample 2:\nInput: S = \"aaab\"\nOutput: \"\"\n\n\"\"\"\n\n\"\"\"\nGiven a string, return the string made of its first two chars, so the String is now one char smaller.  If the string is less than length 2, return an empty string.\n\nExample:\nInput: \"Hello\"\nOutput: \"He\"\n\nInput: \"abcdefg\"\nOutput: \"ab\"\n\"\"\"\n\n\"\"\"\nGiven a string of odd length greater than 7, return a string made of the middle three chars of a given String.\n\nIf the middle three chars are same, return a string made of the middle two chars.\n\nNote: The String length will be always greater than 7.\n\nExample:\nInput: \"abcdefgh\"\nOutput: \"bde\"\n\nInput: \"aabbccdd\"\nOutput: \"bbd\"\n\"\"\"\n\n\"\"\"\nGiven a string, find the number of times a substring length 2 appears in the string and return the number of times it appears.\n\nSubstring length 2 is defined as two same adjacent characters.\n\nExample:\nInput: \"hixxhi\"\nOutput: 1\nExplanation: The substring \"hix\" appears once in the string.\n\"\"\"\n\n\"\"\"\nGiven a string of even length, return the first half. So the string \"WooHoo\" yields \"Wo\".\n\nExample:\n\nInput: \"WooHoo\"\nOutput: \"Woo\"\n\"\"\"\n\n\"\"\"\nGiven a list of numbers, find the smallest missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the list. The list can contain duplicates and negative numbers as well.\n\nFor example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.\n\nYou can modify the input array in-place.\n\"\"\"\n\n\"\"\"\nGiven a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nNote: For the purpose of this problem, we define empty string as valid palindrome.\n\nExample 1:\n\nInput: \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\" is a palindrome.\n\nExample 2:\n\nInput: \"race a car\"\nOutput: false\nExplanation: \"raceacar\" is not a palindrome.\n\"\"\"\n\n\"\"\"\nGiven a string and a pattern, find out if the string contains any permutation of the pattern.\n\nPermutation is defined as the re-arranging of the characters of the string. For example, \u201cabc\u201d has the following six permutations:\n\nabc\nacb\nbac\nbca\ncab\ncba\nIf a string has \u2018n\u2019 distinct characters, it will have n!n! permutations.\n\nExample 1:\n\nInput: String=\"oidbcaf\", Pattern=\"abc\"\nOutput: true\nExplanation: The string contains \"bca\" which is a permutation of the given pattern.\n\nExample 2:\n\nInput"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('kyoto') == 'tokyo'\nassert solution('tokyo') == 'kyoto'\n\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(s1) == s2\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('kyoto') == 'tokyo'\nassert solution('tokyo') == 'kyoto'\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"kyoto\") == \"tokyo\"\nassert solution(\"tokyo\") == \"kyoto\"\nassert solution(\"alphabet\") == \"yxlpobet\"\nassert solution(\"alphabeta\") == \"yxlpobet\"\nassert solution(\"abcd\") == \"dcba\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Kyoto\") == \"Tokyo\"\nassert solution(\"Tokyo\") == \"Kyoto\"\n\"\"\"\n\nfrom typing import List, Dict, Tuple, Set\nfrom collections import defaultdict\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABAB\") == \"Yes\"\nassert solution(\"BABA\") == \"Yes\"\nassert solution(\"ACAC\") == \"Yes\"\nassert solution(\"BACAB\") == \"No\"\nassert solution(\"BCBC\") == \"Yes\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abc\") == \"cab\"\nassert solution(\"\") == \"\"\nassert solution(\"ab\") == \"ba\"\nassert solution(\"abcdef\") == \"cdefab\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"zabcdefghijklmnopqrstuvwxy\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('tokyo') == 'kyoto'\nassert solution('kyoto') == 'tokyo'\n\n\"\"\"\n\n\"\"\"\nTop 100 Interview Questions\n\nReturn the sum of the numbers in the array, except ignore sections of numbers starting with a 6 and extending to the next 9 (every 6 will be followed by at least one 9). Return 0 for no numbers.\n\nsum67([1, 2, 2]) \u2192 5\nsum67([1, 2, 2, 6, 99, 99, 7]) \u2192 5\nsum67([1, 1, 6, 7, 2]) \u2192 4\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a\") == \"a\"\nassert solution(\"b\") == \"b\"\nassert solution(\"ab\") == \"ba\"\nassert solution(\"ba\") == \"ab\"\nassert solution(\"aab\") == \"bba\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"cabacc\") == \"1\"\n\n\"\"\"\nimport re\nimport sys\n\nclass StringSlicer:\n    def __init__(self, text):\n        self.text = text\n        self.text_sliced = []\n\n    def slice(self, substring):\n        pattern = substring + '$'\n        p = re.compile(pattern)\n        match = p.search(self.text)\n        if match:\n            start, end = match.span()\n            self.text_sliced.append(self.text[start:end])\n\n    def run(self):\n        substrings = sys.stdin.readlines()\n        for substring in substrings:\n            self.slice(substring.strip())"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"cabacc\") == 1\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"cabacc\") == 1\nprint(\"Passed\")"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"cabacc\", \"abc\") == \"1\"\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('cabacc') == 1\n\"\"\"\n\nS, T = input().split()"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('cabacc') == '1'\n\"\"\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abca\") == \"2\"\nassert solution(\"cabacc\") == \"1\"\n\"\"\""
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abc\") == 0\nassert solution(\"abcac\") == 1\nassert solution(\"abcab\") == 1\nassert solution(\"abcabd\") == 2\nassert solution(\"abcad\") == 2\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"cabacc\") == \"1\"\n\"\"\"\n\nfrom itertools import zip_longest"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('cabacc') == '1'\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 12 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 12 2\\n') == 2\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5 7\") == \"2\"\nassert solution(\"8 2 10\") == \"2\"\nassert solution(\"2 2 10\") == \"2\"\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u0439\u0442\u0438 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u0435\u043b\u0438\u0442 \u043d\u0430 3 \u0447\u0438\u0441\u043b\u0430 \u0441 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0443\u043c\u043c\u043e\u0439 \u0435\u0433\u043e \u0446\u0438\u0444\u0440\n\n-----Input-----\n-\n\n-----Output-----\n-\n\n----Constraints----\n-\n\"\"\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 12 2') == '2'\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 12 2') == '2'\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 12 2\\n') == '2'\nprint('Test passed')\n\n------Solution------\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 12 2\") == \"2\"\nprint('Hooray!')\n\n\"\"\"\n\n\"\"\"\nGiven two positive integers A and B, the task is to find a positive integer K, if exists, such that:\nA % K = B % K\nK is the smallest possible value.\n\nInput Format\nThe input contains T lines, each line contains two positive integers A and B.\n\nConstraints\n1 <= T <= 100\n1 <= A,B <= 10^9\n\nOutput Format\nPrint the smallest positive integer K, if exists otherwise print \"-1\".\n\nSample Input 0\n3\n1 3\n4 5\n7 12\nSample Output 0\n3\n4\n7\nExplanation 0\nFor example if A = 1 and B = 3, then the smallest positive integer K is 3, because 3 divides both A and B and K is the smallest possible value.\nSimilarly other cases follow.\n\"\"\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1 1') == '1'\nassert solution('8 12 2') == '2'\nassert solution('8 12 3') == '4'\nassert solution('8 12 4') == '4'\nassert solution('8 12 5') == '8'\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 12 2') == '2'\nassert solution('1 1 1') == '1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8 15\") == \"1\"\n\"\"\"\n\na, b, k = input().split()\na, b, k = int(a), int(b), int(k)"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20\") == \"19\"\nprint(solution(\"1024\"), \"2020\")\nprint(solution(\"5\"), \"5\")\nprint(solution(\"1\"), \"1\")\nprint(solution(\"0\"), \"0\")\nprint(solution(\"-1\"), \"0\")\nprint(solution(\"-1024\"), \"0\")\nprint(solution(\"10\"), \"19\")\nprint(solution(\"10.10\"), \"19\")\nprint(solution(\"10.010\"), \"19\")\n\"\"\"\n\nimport math"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"512\") == \"2040\"\nassert solution(\"1024\") == \"2020\"\n\"\"\"\n\nX = int(input())\n\npoints = 0\n\nfor i in range(1,6):\n    if X >= i * 500:\n        points += i * 500 // 5\n        X -= i * 500\n    else:\n        points += X // 5\n        break\n    \n    if X >= 5:\n        points += 1\n        X -= 5\n    else:\n        break\n\nprint(points)"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('512') == '2024'\nassert solution('1024') == '2020'\n\"\"\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20\") == \"2020\"\nassert solution(\"1024\") == \"2048\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input) == output\n\n\"\"\"\n\nX = int(input())\n\nmaxHappiness = 0\n\ncoins = {\n    \"500-yen\": 0,\n    \"100-yen\": 0,\n    \"50-yen\": 0,\n    \"10-yen\": 0,\n    \"5-yen\": 0,\n    \"1-yen\": 0,\n}\n\nfor _ in range(0, X, 500):\n    for coin in coins.keys():\n        coins[coin] += 1\n    maxHappiness += 1\n\nfor _ in range(0, X, 100):\n    for coin in coins.keys():\n        if coin in (\"500-yen\", \"1-yen\"):\n            coins[coin] += 1\n    maxHappiness += 1\n\nfor _ in range(0, X, 50):\n    for coin in coins.keys():\n        if coin in (\"100-yen\", \"1-yen\"):\n            coins[coin] += 1\n    maxHappiness += 1\n\nfor _ in range(0, X, 10):\n    for coin in coins.keys():\n        if coin in (\"50-yen\", \"1-yen\"):\n            coins[coin] += 1\n    maxHappiness += 1\n\nfor _ in range(0, X, 5):\n    for coin in coins.keys():\n        if coin in (\"10-yen\", \"5-yen\"):\n            coins[coin] += 1\n    maxHappiness += 1\n\nfor _ in range(0, X, 1):\n    for coin in coins.keys():\n        if coin in (\"1-yen\",):\n            coins[coin] += 1\n    maxHappiness += 1\n\nprint(maxHappiness)\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000\") == \"2020\"\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1024\") == \"2020\"\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('4') == '10'\nassert solution('13') == '30'\n\n\"\"\"\n\nx = input()\n\nmoney = [500, 100, 50, 10, 5, 1]\nhappiness = [1000, 100, 50, 10, 5, 1]\n\nhappiness_points = 0\n\nfor i in range(len(money)):\n    happiness_points += int(x) // money[i] * happiness[i]\n    x = int(x) % money[i]\n\nprint(happiness_points)\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1024') == '2020'\n\"\"\"\n\n\nfrom math import ceil\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 4\") == \"5\"\nassert solution(\"2 6\") == \"4\"\n\n\"\"\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n1 1\\n') == '1'\nassert solution('5\\n1 1 2 2 5\\n') == '7'\nassert solution('3\\n1 3 2\\n') == '3'\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n4\") == \"5\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 4\\n') == '5'\n\"\"\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 4\") == \"5\"\nassert solution(\"2 3\") == \"4\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n1 4\") == \"5\"\n\n\"\"\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\\n4\") == \"5\"\nassert solution(\"2\\n4 5\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3 4 1 2\") == '8'\n\n\"\"\""
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n3\n1 2 3\n''') == '4'\n\nassert solution('''\n4\n3 2 2 1\n''') == '5'\n\nassert solution('''\n1\n1\n''') == '0'\n\nassert solution('''\n1\n100\n''') == '50'\n\nassert solution('''\n3\n1 1 1\n''') == '1'"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1 4') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 10') == '3'\nprint(solution(stdin.strip()))\n\"\"\"\n\nimport sys\nimport numpy as np\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 10\") == \"3\"\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 10') == '3'\n\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2') == ''\nassert solution('3 2') == '1'\nassert solution('1 10') == '3'\nassert solution('3 10') == '2'\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 10') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 10') == '3'\n\"\"\"\n\na, b = map(int, stdin.readline().split())\nprint(b // a)\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 10') == '3'\n\n\"\"\""
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 10') == '3'\n\"\"\"\nimport sys\n\nA, B = map(int, sys.stdin.readline().split())\n\nprint(B // (A - 1) + 1)\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 10\") == \"3\"\n\"\"\"\n\nimport sys\n\nA, B = map(int, sys.stdin.readline().split())\nprint(A - B + 1)"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 10\") == \"3\"\n\n-----\nimport math\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('CSS') == '2'\nassert solution('CSR') == '2'"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('CSS') == 2\n\"\"\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"CSS\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == 2\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('CSS') == '2'\nassert solution('CSR') == '0'"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('CSS') == 2\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('CSS') == 2\nassert solution('CSR') == 2\nassert solution('CSC') == 1\nassert solution('CSSC') == 1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"CSS\") == \"2\"\nassert solution(\"CSR\") == \"2\"\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"CSS\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"CSS\") == 2\n\"\"\"\n\nS = input()\nT = input()\n\ncorrect = 0\nfor i in range(len(S)):\n    if S[i] == T[i]:\n        correct += 1\n\nprint(correct)\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 3 5 4 2\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n 1 3 5 2\") == 2\n\"\"\"\nimport sys"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 3 5 4 2\") == \"2\"\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 3 5 4 2\") == \"2\"\n\"\"\"\n\n\"\"\"\nTEST 1\nInput:\n5\n1 3 5 4 2\nOutput:\n2\n\nTEST 2\nInput:\n5\n4 1 3 2 5\nOutput:\n0\n\nTEST 3\nInput:\n2\n1 2\nOutput:\n0\n\nTEST 4\nInput:\n3\n1 2 3\nOutput:\n0\n\nTEST 5\nInput:\n3\n2 1 3\nOutput:\n1\n\"\"\""
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 3 5 4 2') == 2\n\"\"\"\n\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3 5 4 2\") == \"2\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 3 5 4 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 3 5 4 2') == '2'\n\"\"\""
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"6.040\"\n\n\"\"\"\n\nfrom __future__ import annotations\n\nimport os\nfrom typing import Dict, List, Optional, Union\n\nfrom a2.datalayer.data_source.base_data_source import BaseDataSource\nfrom a2.util.point_2d import Point2D\nfrom a2.util.point_3d import Point3D\n\n\nclass DataSource(BaseDataSource):\n    \"\"\"\n    A data source for this dataset.\n    \"\"\"\n\n    def __init__(self) -> None:\n        self.__points: Dict[str, Point3D] = dict()\n\n    def __len__(self) -> int:\n        return len(self.__points)\n\n    def __iter__(self) -> Iterator[Point3D]:\n        return iter(self.__points.values())\n\n    def clear(self) -> None:\n        self.__points.clear()\n\n    def add_points(self, points: Union[List[Point2D], str]) -> None:\n        \"\"\"\n        Adds points to the dataset.\n        \"\"\"\n        if isinstance(points, str):\n            points = points.strip().split(\"\\n\")\n\n        for point in points:\n            if len(point.split()) == 3:\n                x, y, z = point.strip().split()\n                self.__points[f\"{x} {y}\"] = Point3D(float(x), float(y), float(z))\n            else:\n                raise ValueError(f\"Incorrect input: {point}\")\n\n    def get_points(self) -> List[Point3D]:\n        \"\"\"\n        Returns the list of all points in this data set.\n        \"\"\"\n        return list(self.__points.values())\n\n    def get_point(self, point: Point2D) -> Optional[Point3D]:\n        \"\"\"\n        Returns the point on the plane corresponding to the specified\n        point on a plane.\n        \"\"\"\n        point_str = f\"{point.x} {point.y}\"\n        return self.__points.get(point_str)\n\n    def get_points_in_range(\n        self, point: Point3D, radius: float\n    ) -> List[Point3D]:\n        \"\"\"\n        Returns all points in this data set within the specified circle.\n        \"\"\"\n        in_range: List[Point3D] = []\n\n        for point_3d in self.__points.values():\n            if point_3d.is_in_range_of(point, radius):\n                in_range.append(point_3d)\n\n        return in_range\n\n    def get_closest_points(self, point: Point3D, num_closest: int) -> List[Point3D]:\n        \"\"\"\n        Returns the closest points to the specified point in this data set.\n        \"\"\"\n        points: List[Point3D] = []\n\n        for point_3d in self.__points.values():\n            points.append(point_3d.distance_to(point))\n\n        points.sort(key=lambda point: point.distance_to(point))\n\n        return points[:num_closest]\n\n    def get_closest_point(self, point: Point3D, num_closest: int) -> List[Point3D]:\n        \"\"\"\n        Returns the closest point to the specified point in this data set.\n        \"\"\"\n        points: List[Point3D] = []\n\n        for point_3d in self.__points.values():\n            points.append(point_3d.distance_to(point))\n\n        points.sort(key=lambda point: point.distance_to(point))\n\n        return points[:num_closest]\n\n    def get_points_in_z_range(\n        self,\n        point: Point3D,\n        min_z: float,\n        max_z: float,\n        z_exact: bool = False,\n    ) -> List[Point3D]:\n        \"\"\"\n        Returns all points in this data set within the specified\n        z-range (both ends included).\n        \"\"\"\n        in_z_range: List[Point3D] = []\n\n        for point_3d in self.__points.values():\n            if (\n                (point_3d.z >= min_z and point_3d.z <= max_z)\n                or (z_exact and point_3d.z == min_z)\n                or (z_exact and point_3d.z == max_z)\n            ):\n                in_z_range.append(point_3d)\n\n        return in_z_range\n\n    def get_points_in_range_of_line(\n        self, point: Point3D, line: Point3D, radius: float\n    ) -> List[Point3D]:\n        \"\"\"\n        Returns all points in this data set within the specified\n        radius of the specified line.\n        \"\"\"\n        in_range: List[Point3D] = []\n\n        for point_3d in self.__points.values():\n            if point_3d.is_in_range_of_line(line, radius):\n                in_range.append(point_3d)\n\n        return in_range\n\n    def get_points_in_range_of_circle(\n        self, point: Point3D, circle: Point3D, radius: float\n    ) -> List[Point3D]:\n        \"\"\"\n        Returns all points in this data set within the specified\n        radius of the specified circle.\n        \"\"\"\n        in_range: List[Point3D"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"5.480\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.040\"\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == \"6.720\"\n\"\"\""
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str1) == str2\nprint(solution(str1))\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == \"5.480\"\nassert solution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\") == \"6.720\"\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == \"6.040\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\n-2.14 2.06\n-1.14 2.04\n-2.16 1.46\n-2.14 0.70\n-1.42 0.40\n-0.94 -0.48\n-1.42 -1.28\n-2.16 -1.62\") == \"5.410\"\nassert solution(\"5\n2.26 1.44\n2.28 0.64\n2.30 -0.30\n1.58 0.66\n3.24 0.66\") == \"5.620\"\nassert solution(\"8\n6.98 2.06\n6.40 1.12\n5.98 0.24\n5.54 -0.60\n7.16 0.30\n7.82 1.24\n8.34 0.24\n8.74 -0.76\") == \"5.480\"\nassert solution(\"5\n10.44 2.06\n10.90 0.80\n11.48 -0.48\n12.06 0.76\n12.54 2.06\") == \"6.040\"\nassert solution(\"8\n16.94 2.42\n15.72 2.38\n14.82 1.58\n14.88 0.50\n15.76 -0.16\n16.86 -0.20\n17.00 0.88\n16.40 0.92\") == \"6.040\"\n\"\"\"\n\n\"\"\"\nimport math\nimport re\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n\nn = int(input())\ndata = []\nfor _ in range(n):\n    data.append(list(map(float, input().split())))\ndata = sorted(data, key=lambda x: x[1])\n\nleft = data[0][1]\nright = data[-1][1]\n\nres = float(0)\nfor i in range(n):\n    res += data[i][0]\nres /= n\nprint(res)\n\nprint(left, right)\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == '5.410'\nassert solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\") == '5.620'\nassert solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\") == '6.040'\nassert solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\") == '6.720'\nassert solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\") == '6.720'\n\n-----\nSolution:\n\n\"\"\"\n\nimport ast\n\nlist_str = ast.literal_eval(input())\nn = len(list_str)\nsum = 0\nfor i in range(0, n):\n    for j in range(0, n):\n        if j!= i:\n            if list_str[i][0] - list_str[j][0]!= 0:\n                sum += (list_str[i][1] - list_str[j][1]) / (list_str[i][0] - list_str[j][0])\nprint('%.2f' % sum)\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62') == '5.410'\nassert solution('5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66') == '5.620'\nassert solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76') == '5.480'\nassert solution('5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06') == '6.040'\nassert solution('8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92') == '6.720'\n\n\"\"\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\") == '5.410'\n\n\"\"\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62') == '5.410'\nassert solution('5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66') == '5.620'\nassert solution('8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76') == '5.480'\nassert solution('5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06') == '6.040'\nassert solution('8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92') == '6.720'\nprint('Success')\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == '4'\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\") == '-1'\nassert solution(\"5 26\\n5 5 5 5 5\") == '-1'"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '-1'\nassert solution('5 26\\n5 5 5 5 5') == '-1'\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\\n\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\\n\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\\n\") == \"1\"\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\\n\") == \"1\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == '4'\nassert solution(\"7 10\\n5 5 5 5 5\") == '2'\nassert solution(\"5 15\\n5 5 5 5 5\") == '-1'\nassert solution(\"5 26\\n5 5 5 5 5\") == '-1'\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 16\\n5 5 5 5 5\") == \"1\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 8\\n2 3 1 1 2') == '4'\nassert solution('7 10\\n5 5 5 5 5') == '2'\nassert solution('5 15\\n5 5 5 5 5') == '-1'\nassert solution('5 26\\n5 5 5 5 5') == '2'\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 3\\n5 5 5 5\") == \"1\"\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nn, m = map(int, sys.stdin.readline().strip().split())\na = list(map(int, sys.stdin.readline().strip().split()))\na.sort()\n\nqueue = deque(a)\nres = 0\nfor i in range(m):\n    if queue[0] > i:\n        res += 1\n        queue.popleft()\n    else:\n        if len(queue) > 1:\n            queue.popleft()\n            queue.popleft()\n        else:\n            queue.popleft()\n            break"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"7 10\\n1 3 4 2 1 4 2\") == \"2\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"2\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 8\\n2 3 1 1 2\") == \"4\"\nassert solution(\"5 15\\n5 5 5 5 5\") == \"2\"\nassert solution(\"5 26\\n5 5 5 5 5\") == \"-1\"\nassert solution(\"7 10\\n5 5 5 5 5\\n5 5 5 5 5\") == \"1\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input) == expected_result"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''7 3\n1 2 3 2 4 3 1\n''') == '1 2 3'\nassert solution('''10 4\n1 3 1 3 10 3 7 7 12 3\n''') == '7 3 1 3'\nassert solution('''15 2\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\n''') == '1 1'\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3') == '1 2 3'\nassert solution('10 4') == '1 3 1 3'\nassert solution('15 2') == '1 1'"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\") == '1 2 3'\nassert solution(\"10 4\") == '7 3 1 3'\nassert solution(\"15 2\") == '1 1'"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == '1 2 3'\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == '7 3 1 3'\nassert solution(\"15 2\\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\") == '1 1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\") == \"1 2 3\"\nassert solution(\"10 4\") == \"7 3 1 3\"\nassert solution(\"15 2\") == \"1 1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\n\"\"\""
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\\n1 2 3 2 4 3 1\") == \"1 2 3\"\nassert solution(\"10 4\\n1 3 1 3 10 3 7 7 12 3\") == \"7 3 1 3\"\n\"\"\"\n\nimport sys\n\nn, k = list(map(int, sys.stdin.readline().split()))\ns = list(map(int, sys.stdin.readline().split()))\nt = [0] * k\nm = -1\n\nfor i, x in enumerate(s):\n    for j in range(x):\n        if t[j] == 0:\n            t[j] = i\n            if len(set(t)) == k:\n                m = max(m, len(t))\n\nprint(*t) if m >= 0 else print(-1)\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"7 3\n1 2 3 2 4 3 1\n\"\"\") == \"1 2 3\"\nassert solution(\"\"\"10 4\n1 3 1 3 10 3 7 7 12 3\n\"\"\") == \"7 3 1 3\"\nassert solution(\"\"\"15 2\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\n\"\"\") == \"1 1\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 2 4 3 1') == '1 2 3'\nassert solution('1 2 1 2 1 2 1 1 2 1 2 1 1 1 1') == '1 1'"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(1, 2, 3) == [1, 2, 3], 'wrong result'\nassert solution(7, 3, 2) == [1, 2, 3], 'wrong result'\n\"\"\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 1\\n3\") == \"3\"\nassert solution(\"6 1\\n2\") == \"0\"\nassert solution(\"4 2\\n1 2 3 4\\n10 3 7 3\") == \"5\"\nassert solution(\"4 2\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"4 2\\n1 2 3 4\\n10 3 7 3\") == \"5\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == '5'\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == '0'\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == '3'\nassert solution(\"4 1\\n1 2 3 4\") == '0'\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == '5'\nassert solution('2 4\\n1 2 3 4\\n10 3 7 3') == '0'\nassert solution('6 1\\n3\\n6\\n2\\n5\\n1\\n4') == '3'\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\") == \"3\"\n\"\"\"\n\nimport itertools\nimport operator\nfrom typing import List\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\\n\") == \"3\""
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n9 9\\n10 8\\n5 3\\n4 3') == '5'\nassert solution('2 4\\n1 2 3 4\\n10 3 7 3') == '0'\nassert solution('6 1\\n3\\n6\\n2\\n5\\n1\\n4') == '3'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\") == \"3\""
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\nassert solution(\"2 4\\n1 2 3 4\\n10 3 7 3\") == \"0\"\nassert solution(\"6 1\\n3\\n6\\n2\\n5\\n1\\n4\") == \"3\""
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n9 9\\n10 8\\n5 3\\n4 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abc') == 'abc'\nassert solution('abx') == 'ab'\nassert solution('abcx') == 'abc'\nassert solution('abcxx') == 'abc'\nassert solution('abcxxx') == 'abc'\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('xxxx') == 0\nassert solution('xx') == 1\nassert solution('xxx') == 1\nassert solution('xii') == 2\nassert solution('xxxx') == 0\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"xxxiixxx\") == \"1\"\nassert solution(\"xxxxxii\") == \"0\"\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"xxxiii\") == 1\nassert solution(\"xxoxx\") == 0\nassert solution(\"xxxxxxxxxx\") == 8\nassert solution(\"xxxxxxxxx\") == 0\nassert solution(\"xxxxxx\") == 0\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"xxxiii\") == 1\nassert solution(\"xxoxx\") == 0\nassert solution(\"xxxxxxxxxx\") == 8\n\n\n\n-----Tests-----\n\nInputs:\n(string)stdin\n3\nxxxiii\n\nOutputs:\n(int)1\n\nInputs:\n(string)stdin\n5\nxxoxx\n\nOutputs:\n(int)0\n\nInputs:\n(string)stdin\n10\nxxxxxxxxxx\n\nOutputs:\n(int)8\n'''\n\n\n\n\nimport os\nimport sys\n\n\nclass Solution:\n\n    def __init__(self):\n        pass\n\n    def solution(self, stdin):\n        # input\n        n = int(stdin[0])\n\n        # code\n        count = 0\n        if 'xxx' in stdin[1]:\n            count = len(stdin[1])\n            while 'xxx' in stdin[1]:\n                count += 1\n                stdin[1] = stdin[1].replace('xxx', '', 1)\n\n        # output\n        print(count)\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"xxxiii\") == 1\nassert solution(\"xxoxx\") == 0\nassert solution(\"xxxxxxxxxx\") == 8\nassert solution(\"xxxxx\") == 4\nassert solution(\"xx\") == 0\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('xxxiix') == '0'\nassert solution('xxxxii') == '0'\nassert solution('xoxxii') == '2'\nassert solution('xiiix') == '0'\nassert solution('xxiii') == '1'\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 0\nassert solution('i') == 0\nassert solution('ii') == 1\nassert solution('xxx') == 1\nassert solution('x') == 0\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"xxxxx\") == \"0\"\nassert solution(\"xyzz\") == \"2\"\nassert solution(\"xxxxx\") == \"0\"\nassert solution(\"xxxx\") == \"3\"\nassert solution(\"xxxx\") == \"0\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == 48\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '48'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '48'\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n') == '3\\n'\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n\") == \"15\\n\"\nassert solution(\"5\\n\") == \"15\\n\"\nassert solution(\"5\\n\") == \"15\\n\"\nassert solution(\"5\\n\") == \"15\\n\"\nassert solution(\"5\\n\") == \"15\\n\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"48\"\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n') == '42'\nassert solution('6\\n') == '84'\nassert solution('10\\n') == '1296'\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '48'\n\"\"\"\nimport sys"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == 48\n\"\"\"\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"48\"\nprint(solution(\"4\"))\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5') == 'unsafe'\nprint('OK!')\n'''\nimport sys\n\ns, w = (int(i) for i in sys.stdin.readline().split())"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n\nIn the example, there are four sheep and five wolves. The number of wolves is not less than that of sheep, so they will attack them.\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4 5''') == 'unsafe'\n\"\"\"\n\nS, W = input().split()\nS, W = int(S), int(W)"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input_string) == output_string\n\"\"\"\n\nimport sys\n\nS, W = [int(x) for x in sys.stdin.readline().split()]"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\nassert solution(\"1 1\") == \"safe\"\n\n\"\"\"\n\nfrom typing import List, TextIO"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\") == 'unsafe'\n\nsolution(input())\n\n---\n4.4.3\nThe right type of input\nThe game will be modified so that the input is read from a file with the following format:\n\nThe first line contains the number of sheep N and the number of wolves W, separated by a space.\nThe next N lines contain the position of each sheep S_i, where S_i is the position of sheep i.\nThe next W lines contain the position of each wolf S_j, where S_j is the position of wolf j.\n\nFor example,\nthe first line of the file may be\n4 5\n\nthe next 4 lines contain the position of each sheep:\n0 1\n3 2\n5 4\n7 6\n\nthe next 5 lines contain the position of each wolf:\n3 2\n5 1\n1 3\n0 4\n2 6\n\nThe program should output the line that is safe, i.e., if the sheep are safe or if the wolves are not able to attack any sheep, then the line is safe, otherwise it is unsafe.\n\n-----Constraints-----\n - 1 \\leq N, W \\leq 100\n - 1 \\leq S_i \\leq 1000000\n - 1 \\leq S_j \\leq 1000000\n\n-----Input-----\nThe first line of input contains N and W, separated by a space.\nThe next N lines contain the position of each sheep S_i, where S_i is the position of sheep i.\nThe next W lines contain the position of each wolf S_j, where S_j is the position of wolf j.\n\n-----Output-----\nPrint the line that is safe, i.e., if the sheep are safe or if the wolves are not able to attack any sheep, then the line is safe, otherwise it is unsafe.\n\n-----Sample Input-----\n5 5\n0 1\n3 2\n5 4\n7 6\n1 3\n2 4\n3 5\n4 6\n\n-----Sample Output-----\nsafe\n\n5.2.4\n\nThe right type of output\nThe game will be modified so that the output is written to a file with the following format:\n\nThe first line contains the number of sheep N and the number of wolves W, separated by a space.\nThe next N lines contain the position of each sheep S_i, where S_i is the position of sheep i.\nThe next W lines contain the position of each wolf S_j, where S_j is the position of wolf j.\n\nFor example,\nthe first line of the output file may be\n4 5\n\nthe next 4 lines contain the position of each sheep:\n0 1\n3 2\n5 4\n7 6\n\nthe next 5 lines contain the position of each wolf:\n3 2\n5 1\n1 3\n0 4\n2 6\n\nThe program should output the line that is safe, i.e., if the sheep are safe or if the wolves are not able to attack any sheep, then the line is safe, otherwise it is unsafe.\n\n-----Constraints-----\n - 1 \\leq N, W \\leq 100\n - 1 \\leq S_i \\leq 1000000\n - 1 \\leq S_j \\leq 1000000\n\n-----Input-----\nThe first line of input contains N and W, separated by a space.\nThe next N lines contain the position of each sheep S_i, where S_i is the position of sheep i.\nThe next W lines contain the position of each wolf S_j, where S_j is the position of wolf j.\n\n-----Output-----\nPrint the line that is safe, i.e., if the sheep are safe or if the wolves are not able to attack any sheep, then the line is safe, otherwise it is unsafe.\n\n-----Sample Input-----\n4 5\n0 1\n3 2\n5 4\n7 6\n1 3\n2 4\n3 5\n4 6\n\n-----Sample Output-----\nsafe\n\n5.2.5\n\nThe right type of input\nThe game will be modified so that the input is read from a file with the following format:\n\nThe first line contains the number of sheep N and the number of wolves W, separated by a space.\nThe next N lines contain the position of each sheep S_i, where S_i is the position of sheep i.\nThe next W lines contain the position of each wolf S_j, where S_j is the position of wolf j.\n\nFor example,\nthe first line of the file may be\n4 5\n\nthe next 4 lines contain the position of each sheep:\n0 1\n3 2\n5 4\n7 6\n\nthe next 5 lines contain the position of each wolf:\n3 2\n5 1\n1 3\n0 4\n2 6\n\nThe program should output the line that is safe, i.e., if the sheep are safe or if the wolves are not able to attack any sheep, then the line is safe, otherwise it is unsafe.\n\n-----Constraints-----\n - 1 \\leq N, W \\leq 100\n - 1 \\leq S_i \\leq 1000000\n - 1 \\leq S_j \\leq 1000000\n\n-----Input-----\nThe first line of input contains N and W, separated by a space.\nThe next N lines contain the position of each sheep S_i, where S_i is the position of sheep i.\nThe next W lines contain the position of each wolf S_j, where S_j is the position of wolf j.\n\n-----Output-----\nPrint the line that is safe, i.e., if the sheep are safe or if the wolves are not able to attack any sheep, then the line is safe, otherwise it is unsafe.\n\n-----Sample Input-----\n4 5\n0 1\n3 2\n5 4\n7 6\n1 3\n2 4\n3 5\n4 6\n\n-----Sample Output-----\nsafe\n\n5.2.6\n\nThe right type of output\nThe game will be modified so that the output is written to a file with the following format:\n\nThe first line contains the number of sheep N and the number of wolves W, separated by a space.\nThe next N lines contain the position of each sheep S_i, where S_i is the position of sheep i.\nThe next W lines contain the position of each wolf S_j, where S_j is the position of wolf j.\n\nFor example,\nthe first line of the output file may be\n4 5\n\nthe next 4 lines contain the position of each sheep:\n0 1\n3 2\n5 4\n7 6\n\nthe next 5 lines contain the position of each wolf:\n3 2\n5 1\n1 3\n0 4\n2 6\n\nThe program should output the line that is safe, i.e., if the sheep are safe or if the wolves are not able to attack any sheep, then the line is safe, otherwise it is unsafe.\n\n-----Constraints-----\n - 1 \\leq N, W \\leq 100\n - 1 \\leq S_i \\leq 1000000\n - 1 \\leq S_j \\leq 1000000\n\n-----Input-----\nThe first line of input contains N and W, separated by a space.\nThe next N lines contain the position of each sheep S_i, where S_i is the position of sheep i.\nThe next W lines contain the position of each wolf S_j, where S_j is the position of wolf j.\n\n-----Output-----\nPrint the line that is safe, i.e., if the sheep are safe or if the wolves are not able to attack any sheep, then the line is safe, otherwise it is unsafe.\n\n-----Sample Input-----\n4 5\n0 1\n3 2\n5 4\n7 6\n1 3\n2 4\n3 5\n4 6\n\n-----Sample Output-----\nsafe\n\n5.2.7\n\nThe right type of input\nThe game will be modified so that the input is read from a file with the following format:\n\nThe first line contains the number of sheep N and the number of wolves W, separated by a space.\nThe next N lines contain the position of each sheep S_i, where S_i is the position of sheep i.\nThe next W lines contain the position of each wolf S_j, where S_j is the position of wolf j.\n\nFor"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\") == \"unsafe\"\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5') == 'unsafe'\n\"\"\"\n\nimport sys\n\nS, W = list(map(int, sys.stdin.readline().strip().split()))"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5') == 'unsafe'\n\n\"\"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5') == 'unsafe'\n\n---------------------------------------\n\nimport sys\n\ninput = sys.stdin.readline\n\ns, w = [int(i) for i in input().split()]"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\"\n\nimport sys\n\nA, B, C = [int(x) for x in sys.stdin.readline().strip().split()]"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3\\n4 5 6') == '6'\n\n\"\"\"\n\nimport sys\nimport math\n\nA, B, C = map(int, sys.stdin.readline().split())\n\ns = (A + B + C) / 2\n\narea = math.sqrt(s * (s - A) * (s - B) * (s - C))\n\nprint(int(round(area)))\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 4 5''') == 6\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 5\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 4 5') == '6'\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 5\") == \"6\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 5\") == \"6\"\n\"\"\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 5\") == \"6\"\nassert solution(\"8 7 9\") == \"18\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 11 4\\n') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 11 4\\n\") == \"4\"\nassert solution(\"20 18 10\\n\") == \"4\"\nassert solution(\"20 18 10\\n\") == \"8\"\nassert solution(\"20 18 10\\n\") == \"8\"\nassert solution(\"20 18 10\\n\") == \"8\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 11 4\\n') == '4'\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 11 4') == 4\nassert solution('1 9 5') == 0\nassert solution('10 100 100') == 1\nassert solution('10 10 10') == 10\n\n'''\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 11 4\") == \"4\"\nprint(\"Test PASSED\")\n\n------------------------\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 11 4\") == \"4\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 10 10') == '9'\nassert solution('1 1 1') == '0'\nassert solution('2 1 1') == '1'\nassert solution('10 10 10') == '9'\nassert solution('1 2 1') == '1'\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 11 4') == '4'"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 11 4') == '4'\n\"\"\""
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 11 4\\n') == '4'\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n\") == \"1\"\nassert solution(\"2 1\\n\") == \"2\"\nassert solution(\"2 5\\n\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 5\\n') == 10\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 5') == '10'\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(2, 5) == 10\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"2 3\\n\"\n) == \"6\"\nprint(solution(\n    \"2 5\\n\"\n))\nassert solution(\n    \"5 5\\n\"\n) == \"25\"\nprint(solution(\n    \"10 10\\n\"\n))\nassert solution(\n    \"1000 1\\n\"\n) == \"1000\"\nprint(solution(\n    \"100 100\\n\"\n))\nassert solution(\n    \"100 100\\n\"\n) == \"10000\"\nprint(solution(\n    \"100 100\\n\"\n))\nassert solution(\n    \"100 100\\n\"\n) == \"10000\"\nprint(solution(\n    \"100 100\\n\"\n))\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\") == 10\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 5\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n\") == \"1\"\nassert solution(\"2 3\\n\") == \"6\"\nassert solution(\"3 4\\n\") == \"12\"\nassert solution(\"10 100\\n\") == \"1000\"\nassert solution(\"4 5\\n\") == \"20\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 5') == '10'\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5 7') == 10\n\"\"\"\nimport math\nA, B, T = [int(n) for n in stdin.readlines()]\nprint((T+0.5)//(A+B))"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"3 5 7\"\n) == \"10\"\n\n---------------------\nimport sys\n\nA, B, T = [int(x) for x in input().split()]\n\nfirst_biscuit = A + (2 * A * B)\nsecond_biscuit = 2 * A * (B + (3 * A))\n\nprint(first_biscuit + second_biscuit)\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 7\") == \"10\"\nprint(solution(\"3 5 7\"))"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 7') == '10'\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3, 5, 7) == 10\n\"\"\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\"\n\na, b, t = map(int, stdin.readline().split())\nsum = a\ni = 1\nwhile True:\n    sum += a * i\n    i += 1\n    if sum >= t + 0.5:\n        break\nprint(sum)"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 7\") == \"10\"\n\"\"\"\n\nA, B, T = [int(s) for s in stdin.split(\" \")]\n\nsum = B\nfor i in range(3, T + 1):\n    sum += A * (i - 2)\n\nprint(sum)\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(4, 5, 7) == 10\nassert solution(3, 5, 6) == 8\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == \"NG\"\nassert solution('K A B') == \"NG\"\nassert solution('5 3') == \"NG\"\nassert solution('7 20') == \"OK\"\nassert solution('10 30') == \"OK\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n1 2\") == \"OK\"\nassert solution(\"7 3\\n1 3\") == \"NG\"\nassert solution(\"2 1\\n2 2\") == \"OK\"\nassert solution(\"1 1\\n2 2\") == \"NG\"\nassert solution(\"1 1\\n1 2\") == \"OK\"\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100 200\") == \"NG\"\nassert solution(\"5 67\") == \"OK\"\n\n\"\"\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 500 600\\n\") == \"OK\"\nprint(solution(\"7 500 600\\n\"))\n\n-----Explanation-----\nIn this example, the solution to the problem is known to be a multiple of 7, so the only valid carry distances are multiples of 7.\n\nThe maximum carry distance is 7 * 6 = 42, which is larger than the range of possible carry distances, so the answer is \"NG\".\n\"\"\"\n\nimport sys\n\nK, A, B = map(int, sys.stdin.readline().strip().split(' '))"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 500 600') == 'OK'\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n1 2') == 'NG'\nassert solution('8 5\\n1 2') == 'OK'\nassert solution('6 4\\n1 2') == 'OK'\nassert solution('4 3\\n1 2') == 'OK'\nassert solution('3 4\\n1 2') == 'NG'\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100 200\") == \"NG\"\nassert solution(\"100 201\") == \"OK\"\nassert solution(\"200 300\") == \"OK\"\n\n-----Explanation-----\nThe following 5 multiples of 7 are:\n300, 337, 366, 395, 414, 434, 463, 498, 517, 536, 564, 593, 621, 638, 668, 706, 724, 742, 771, 790, 819, 837, 866, 894, 922, 941, 969, 998\n100 is not between 500 and 600, so the answer is NG.\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n500 600') == 'OK'\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\n7 17') == 'NG'\nassert solution('7 17\\n4 500') == 'OK'\n\"\"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 500 600\") == 'OK'\nassert solution(\"5 457\") == 'NG'\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n\"\"\"\n\nT, X = map(int, input().split())\nprint(f\"{T*X}\")\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2') == '2.5'\n\"\"\"\n\nt, x = map(int, input().split())\nprint(t / x)\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 3\\n') == '2.6666666667'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 3\\n') == '2.6666666667'\n\"\"\"\n\nimport sys\n\nt, x = map(int, sys.stdin.readline().split())\n\nprint((x * t) / (x - 1))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n\"\"\"\n\nt, x = map(int, input().split())\n\nprint(\"{:.7f}\".format(t/x))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"8.0\"\nassert solution(\"2 1\") == \"2.0\"\nassert solution(\"2 3\") == \"5.0\"\n\"\"\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"2.3333333333\"\nassert solution(\"6 10\") == \"2.5\"\nassert solution(\"2 4\") == \"2.5\"\nassert solution(\"8 3\") == \"2.6666666667\"\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 3\") == \"2.6666666667\"\n\"\"\"\nimport math\n\nt, x = list(map(int, stdin.split()))\n\nresult = t * math.log(x) / math.log(x * t)\nprint(result)\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(input()) == output()\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 4 3') == '1'\nassert solution('2 1 5') == '1'\n\"\"\"\n\nimport unittest\n\nfrom collections import deque\nfrom typing import Dict, Deque\n\n\nclass Buffer:\n\n    def __init__(self, size: int, buffer_size: int) -> None:\n        self.size = size\n        self.buffer_size = buffer_size\n        self.buffer: Deque[int] = deque([])\n\n    def is_full(self) -> bool:\n        return len(self.buffer) == self.buffer_size\n\n    def is_empty(self) -> bool:\n        return len(self.buffer) == 0\n\n    def add(self, data: int) -> None:\n        if self.is_full():\n            self.buffer.popleft()\n        self.buffer.append(data)\n\n    def get_current(self) -> int:\n        return self.buffer[-1]\n\n\nclass TestCase(unittest.TestCase):\n\n    def test_buffer(self) -> None:\n        buffer = Buffer(5, 2)\n        buffer.add(4)\n        buffer.add(6)\n        self.assertEqual(4, buffer.get_current())\n        buffer.add(7)\n        buffer.add(8)\n        self.assertEqual(7, buffer.get_current())\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 4 3') == '1'\nassert solution('6 4 5') == '0'\nassert solution('4 4 4') == '0'\nassert solution('7 5 8') == '1'\nassert solution('8 8 4') == '0'\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''6 4 3''') == '1'\nassert solution('''1 1 1''') == '0'\nassert solution('''4 0 2''') == '4'\nassert solution('''3 1 4''') == '1'\n'''\n'''\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 3\") == \"1\"\nassert solution(\"6 4 3\") == \"0\"\nassert solution(\"5 5 5\") == \"0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\"\n\n\"\"\"\nTest Input 1\n6 4 3\n\nTest Input 2\n4 5 7\n\"\"\"\n\n\"\"\"\nTest Output 1\n1\n\nTest Output 2\n0\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5 3\\n') == '1'\n\n\"\"\"\n\nimport sys\n\na, b, c = map(int, sys.stdin.readlines())\n\nwater = min(a, b) - c\n\nprint(water)\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 4 3\") == \"1\"\nassert solution(\"2 5 4\") == \"2\"\nassert solution(\"9 2 2\") == \"0\"\nassert solution(\"2 1 2\") == \"0\"\nassert solution(\"10 5 20\") == \"10\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 4 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '6 4 3'\n) == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == 1\nassert solution('2 3 1') == 2\nassert solution('3 1 2') == 0\nassert solution('5 5 6') == 0\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\n\"\"\"\n\n\nfrom math import factorial as f\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 3 2\\n3 1 2') == '3'\nassert solution('5\\n1 3 2\\n3 1 4') == '3'\nassert solution('5\\n1 3 2\\n3 1 4\\n5 1 3\\n5 1 4\\n5 2 4') == '3'\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == '3'\nassert solution(\"5\\n1 4 2 5 3\\n2 5 4 1 3\") == '3'\nassert solution(\"8\\n1 2 7 8 3 4 5 6 9\\n8 2 1 7 6 9 3 4 5\") == '6'\nassert solution(\"7\\n1 2 3 4 5 6 7 8\\n8 1 2 3 6 5 7 4\") == '9'\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n1 3 2\n3 1 2''') == '3'\nassert solution('''2\n3 1 2\n2 1 3''') == '1'\nassert solution('''4\n1 3 2 4\n4 1 2 3''') == '0'\nassert solution('''8\n1 7 2 4 3 5 6 8\n8 1 7 2 5 4 3 6''') == '6'\nassert solution('''8\n1 3 4 5 6 7 8\n8 1 3 4 5 6 7''') == '5'\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n3\n1 3 2\n3 1 2\n\"\"\") == '3'"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 4\\n1 3 2') == '2'\nassert solution('3 2 4\\n1 3 2') == '3'\nassert solution('4 2 4\\n1 3 2') == '0'\n\n\"\"\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\n\n\"\"\"\n\nfrom itertools import permutations\nimport sys"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 3 2\\n3 1 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ATCODER\") == 3\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ATCODER\") == 3\n\n---\nAACDCCB\n\n---\n6"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ATCODER\") == \"3\"\nprint(solution(\"ATCODER\"))\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ATCODER') == 'ATC'\n\"\"\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\nTAC\nCAT\nCAT\nTAT\nAT\nAT\nAC\nTAT\nGAC\n\"\"\"\n) == 'TAT'\n\nassert solution(\n\"\"\"\nGAT\nGT\nG\nG\nT\n\"\"\"\n) == 'GT'\n\"\"\"\n---\n\nThe solution is only 1 line of code:\n\nreturn max(\n    (\n        max(len(s) for s in a)\n        for a in\n        (\n            (s for s in stdin.split('\\n'))\n            if s\n            else ['']\n        )\n    )\n)\n\n\"\"\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ATCODER') == 3\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ATCODER\") == 3\nassert solution(\"TCAAT\") == 2\nassert solution(\"AAACCCAAATTT\") == 5\nassert solution(\"GAGACCAAAGG\") == 5\nassert solution(\"ATGATGATG\") == 0\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ATCODER\") == 3\nassert solution(\"ATC\") == 3\n\"\"\""
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ATCODER\") == 3\n\"\"\"\n\n\n\n\"\"\"\nWrite 5 lines of code to test the correctness of solution:\nYou are given a string S consisting of uppercase English letters. Find the length of the longest ACGT string that is a substring (see Notes) of S.\nHere, a ACGT string is a string that contains no characters other than A, C, G and T.\n\n-----Notes-----\nA substring of a string T is a string obtained by removing zero or more characters from the beginning and the end of T.\nFor example, the substrings of ATCODER include TCO, AT, CODER, ATCODER and  (the empty string), but not AC.\n\n-----Constraints-----\n - S is a string of length between 1 and 10 (inclusive).\n - Each character in S is an uppercase English letter.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the length of the longest ACGT string that is a substring of S.\n\n-----Sample Input-----\nATCODER\n\n-----Sample Output-----\n3\n\nAmong the ACGT strings that are substrings of ATCODER, the longest one is ATC.\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ATCODER') == 3\n\n\"\"\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11') == '9'\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11') == '9'\n\"\"\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(11) == 9\n\"\"\"\n\n\"\"\"\nI think the \"correct\" solution is to check all odd lengths:\n\nhttps://stackoverflow.com/questions/27137516/how-do-i-check-if-a-number-is-odd-in-python\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11') == \"9\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11') == \"9\"\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11') == '9'\nassert solution('10') == '0'\n\"\"\"\n\nfrom stdin_list_importer import stdin_list"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"11\n\"\"\"\n    ) == \"9\"\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11\") == \"9\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11\") == \"9\""
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\") == \"9\"\n\"\"\"\nfrom math import sqrt\nfrom sys import stdin\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"cupofcoffee\") == \"hottea\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"cdefghijklmnopqrstuvwxyzab\"\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\u2018cupofcoffee\u2019) == \u2018hottcufeo\u2019\nassert solution(\u2018cupofhottea\u2019) == \u2018hotteacupf\u2019\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('cupofcoffee') == '4'\nassert solution('cupofhottea') == '4'\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abracadabra') == 5\nassert solution('hbffjkm') == 3\nassert solution('chffyhjkhm') == 4\nassert solution('asd') == 2"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('cupofcoffee') == '4'\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"cupofcoffee\") == \"hottea\"\nassert solution(\"cupofhottea\") == \"cupofcoffee\"\nassert solution(\"cupofflippedcoffee\") == \"coffee\"\nassert solution(\"cupofcoffeeflipped\") == \"hottea\"\n\"\"\"\n\nS, T = [input().strip() for _ in range(2)]\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"cupofcoffee\") == \"hotteacupofcoffee\"\nassert solution(\"cupofhottea\") == \"hotteahotteahottea\"\n\"\"\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('cupofcoffee') == 'cupofhottea'\n\"\"\"\nimport numpy as np\nimport sys\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('cupofcoffee') == 'cupofhottea'\n\"\"\"\n\nimport sys\nimport fileinput"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 7\\n\") == \"5 6 7 8 9\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 7') == '5 6 7 8 9'\nprint(solution('3 7'))\n'''"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3') == '3 5 6 7 8 9'\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 7\") == \"5 6 7 8 9\"\nassert solution(\"5 2\") == \"2 3 4 5\"\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"4 3 5\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 7') == '5 6 7 8 9'\nassert solution('6 6') == '6'\nassert solution('7 7') == '7'\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 7') == '5 6 7 8 9'"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 7') == '5 6 7 8 9'\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"25\") == \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('25') == 'No'\nassert solution('10') == 'Yes'\n\"\"\"\n\nx = int(stdin.readline())\nprint('Yes' if x >= 30 else 'No')\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('25') == 'No'\nassert solution('-20') == 'No'\nassert solution('-5') == 'No'\nassert solution('30') == 'Yes'\nassert solution('0') == 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('25') == 'No'\nassert solution('-35') == 'No'\nassert solution('30') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('30') == 'Yes'\nassert solution('25') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '25\\n'\n) == 'No'\n\"\"\"\n\nx = int(input())\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"30\") == \"Yes\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"25\") == \"No\"\nassert solution(\"30\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('25') == 'No'\nassert solution('32') == 'Yes'\nassert solution('28') == 'No'\n\"\"\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'No'\nassert solution('35') == 'No'\nassert solution('30') == 'Yes'\n\"\"\""
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == '1'\n\"\"\"\n\n\nfrom collections import Counter\n\nclass Solution:\n    def distance(self, point: list) -> int:\n        distance = 0\n        for i in range(1, len(point)):\n            distance += (point[i] - point[i - 1]) ** 2\n        return distance ** 0.5\n\n    def solution(self, stdin: str) -> str:\n        lines = stdin.split(\"\\n\")\n        n = int(lines[0].split(\" \")[0])\n        d = int(lines[0].split(\" \")[1])\n        points = [[float(x) for x in line.split(\" \")] for line in lines[1:-1]]\n        points_counter = Counter([self.distance(point) for point in points])\n        return str(points_counter[int(d ** 0.5)])\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n1 2\\n4 4\\n7 8') == '1'\n\n\"\"\"\n\nfrom math import sqrt\nfrom typing import Dict\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 2\\n3 4\") == '2'\nassert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == '1'\n\"\"\""
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\n\"\"\"\n\n\"\"\"\nfrom collections import deque\nfrom typing import Deque"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == '1'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n\"\"\"\n\nimport math\n\nn, d = list(map(int, stdin.readline().split()))\n\ncoordinates = []\n\nfor _ in range(n):\n    coordinates.append(list(map(int, stdin.readline().split())))\n\nprint(math.ceil(n * (n - 1) / 2))\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n1 2\\n5 5\\n-2 8') == '1'\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n1 2\\n1 2\\n\") == \"1\"\nassert solution(\"2 2\\n1 1\\n1 1\\n\") == \"0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n1 2\\n5 5\\n-2 8\") == \"1\"\n\"\"\""
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 2\\n5 5\\n-2 8\") == \"1\"\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nlines = [line.split() for line in open(sys.argv[1]).read().splitlines()]\nn, d = [int(x) for x in lines[0]]\n\ncoordinates = [tuple(int(x) for x in line) for line in lines[1:]]"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3776\") == \"Bad\"\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\nassert solution(\"1111\") == \"Bad\"\nassert solution(\"1221\") == \"Bad\"\n\n\"\"\"\n\n\nimport ast\nimport sys\nimport re\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1234') == 'Good'\nassert solution('1324') == 'Good'\nassert solution('4567') == 'Bad'\n\n\"\"\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3776\") == 'Bad'\nassert solution(\"1111\") == 'Bad'\nassert solution(\"1234\") == 'Good'\n\"\"\"\n\nimport unittest\n\n\nclass Solution:\n    def solution(self, S: str) -> str:\n        return 'Bad' if len(set(S[0:-1])) > 1 and S[0] == S[1] else 'Good'\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        assert Solution().solution('3776') == 'Bad'\n        assert Solution().solution('1111') == 'Bad'\n        "
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\nassert solution(\"1233\") == \"Good\"\nassert solution(\"8888\") == \"Bad\"\nassert solution(\"5555\") == \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3776) == \"Bad\"\nassert solution(1234) == \"Good\"\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3776') == \"Bad\"\nassert solution('1234') == \"Good\"\nassert solution('2341') == \"Bad\"\nassert solution('2342') == \"Good\"\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"4444\") == \"Good\"\nassert solution(\"1234\") == \"Bad\"\nassert solution(\"1241\") == \"Good\"\nassert solution(\"1245\") == \"Bad\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3776\") == \"Bad\"\nassert solution(\"1234\") == \"Good\"\nassert solution(\"1234\") == \"Good\"\nassert solution(\"2344\") == \"Bad\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1234') == 'Bad'\nassert solution('1114') == 'Good'\nassert solution('1241') == 'Bad'\nassert solution('1242') == 'Good'\nassert solution('4321') == 'Bad'\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n3 4') == '3.5'\nassert solution('3\\n1 2 3') == '3'\nassert solution('2\\n5 6') == '5.5'\nassert solution('1\\n3') == '2'\nassert solution('2\\n1 1') == '1'\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4') == '3.5'\nassert solution('4 5') == '4.5'\nassert solution('5 4') == '5.5'\nassert solution('6 5') == '6.5'\nassert solution('7 6') == '7.5'\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n3 4\") == \"3.5\"\nassert solution(\"1\\n3 4\") == \"3.5\"\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == \"3.5\"\nassert solution(\"2 3\") == \"3.5\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"3.5\"\nassert solution(\"3 4\") == \"3.5\"\nassert solution(\"1 100\") == \"100\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"2 1\") == \"2\"\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n2\n3 4\n\"\"\") == \"3.5\"\n\nassert solution(\n\"\"\"\n3\n1 2 3\n\"\"\") == \"2\"\n\nassert solution(\n\"\"\"\n2\n3 4\n\"\"\") == \"3.5\"\n\nassert solution(\n\"\"\"\n3\n1 2 3\n\"\"\") == \"2\"\n\nassert solution(\n\"\"\"\n2\n3 5\n\"\"\") == \"5.0\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n3 4') == '3.5'\nassert solution('3\\n1 2 3') == '2.5'\nassert solution('4\\n5 6 7 8') == '6.5'\nassert solution('5\\n9 9 9 9 9') == '10.0'\n\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3 2 1') == '4.0'\n\"\"\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n3 1 2\\n2 5 4\\n3 6') == 14\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14\nassert solution(\"3 1 2\\n2 5 4\\n3 6\\n4\") == 14\n\n------------------------------------------------\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n1 2\n2 5\n3 6''') == \"14\"\n\nassert solution('''2\n5 4\n2 5\n3 6''') == \"12\"\n\nassert solution('''4\n4 2\n2 5 4\n2 5\n3 6''') == \"16\"\n\nassert solution('''5\n4 3\n2 5 4 6\n2 5\n3 6 8''') == \"18\"\n\nassert solution('''4\n4 2\n2 5 4\n2 5\n3 6''') == \"12\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n3 1 2\\n2 5 4\\n3 6') == 14\n\"\"\"\n\nN = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nA = A + [0]\nB = B + [0]\nC = C + [0]\n\ntakahashi_score = 0\n\nfor i in range(N):\n    takahashi_score += A[i] * B[i]\n    if i!= N - 1:\n        takahashi_score += C[i]\n\nprint(takahashi_score)\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2\\n2 5 4\") == '14'\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == \"14\"\nprint(solution(\"3 1 2\\n2 5 4\\n3 6\"))\n\"\"\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\\n2 5 4\\n3 6\") == 14\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ZABCDBABCQ') == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nAAAA\") == 3\nassert solution(\"5\\nZABCDBABCQ\") == 2\n\n\"\"\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ZABCDBABCQ') == 2\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(TEST_STDIN) == TEST_SOLUTION\nprint(solution(INPUT))\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ZABCDBABCQ') == 2\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ZABCDBABCQ\") == 2\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABCDBABCQ\") == 2\n\n------\n7.7. Find the number of occurrences of the substring in S.\nWrite a program which computes the number of occurrences of the substring in S.\n\n-----Constraints-----\n - 3 \\leq S.length \\leq 1000\n - 1 \\leq S.length \\leq 1000\n - S consists of uppercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint number of occurrences of the substring in S.\n\n-----Sample Input-----\nABCDQWERT\n\n-----Sample Output-----\n3\n\n------\n7.8. Compute the number of occurrences of substring in S.\nWrite a program which computes the number of occurrences of the substring in S.\n\n-----Constraints-----\n - 3 \\leq S.length \\leq 1000\n - 1 \\leq S.length \\leq 1000\n - S consists of uppercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint number of occurrences of the substring in S.\n\n-----Sample Input-----\nABCDQWERT\n\n-----Sample Output-----\n0\n\n------\n7.9. Compute the number of occurrences of substrings in S.\nWrite a program which computes the number of occurrences of substrings in S.\n\n-----Constraints-----\n - 3 \\leq S.length \\leq 1000\n - 1 \\leq S.length \\leq 1000\n - S consists of uppercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint number of occurrences of substrings in S.\n\n-----Sample Input-----\nABCDQWERT\n\n-----Sample Output-----\n3\n\n------\n7.10. Compute the number of occurrences of substring in S.\nWrite a program which computes the number of occurrences of substrings in S.\n\n-----Constraints-----\n - 3 \\leq S.length \\leq 1000\n - 1 \\leq S.length \\leq 1000\n - S consists of uppercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint number of occurrences of substrings in S.\n\n-----Sample Input-----\nABCDQWERT\n\n-----Sample Output-----\n3\n\n------\n7.11. Compute the number of occurrences of substrings in S.\nWrite a program which computes the number of occurrences of substrings in S.\n\n-----Constraints-----\n - 3 \\leq S.length \\leq 1000\n - 1 \\leq S.length \\leq 1000\n - S consists of uppercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint number of occurrences of substrings in S.\n\n-----Sample Input-----\nABCDQWERT\n\n-----Sample Output-----\n0\n\n------\n7.12. Compute the number of occurrences of substrings in S.\nWrite a program which computes the number of occurrences of substrings in S.\n\n-----Constraints-----\n - 3 \\leq S.length \\leq 1000\n - 1 \\leq S.length \\leq 1000\n - S consists of uppercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint number of occurrences of substrings in S.\n\n-----Sample Input-----\nABCDQWERT\n\n-----Sample Output-----\n4\n\n------\n7.13. Compute the number of occurrences of substrings in S.\nWrite a program which computes the number of occurrences of substrings in S.\n\n-----Constraints-----\n - 3 \\leq S.length \\leq 1000\n - 1 \\leq S.length \\leq 1000\n - S consists of uppercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint number of occurrences of substrings in S.\n\n-----Sample Input-----\nABCDQWERT\n\n-----Sample Output-----\n0\n\n------\n7.14. Compute the number of occurrences of substrings in S.\nWrite a program which computes the number of occurrences of substrings in S.\n\n-----Constraints-----\n - 3 \\leq S.length \\leq 1000\n - 1 \\leq S.length \\leq 1000\n - S consists of uppercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint number of occurrences of substrings in S.\n\n-----Sample Input-----\nABCDQWERT\n\n-----Sample Output-----\n7\n\n------\n7.15. Compute the number of occurrences of substrings in S.\nWrite a program which computes the number of occurrences of substrings in S.\n\n-----Constraints-----\n - 3 \\leq S.length \\leq 1000\n - 1 \\leq S.length \\leq 1000\n - S consists of uppercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint number of occurrences of substrings in S.\n\n-----Sample Input-----\nABCDQWERT\n\n-----Sample Output-----\n1\n\n------\n7.16. Compute the number of occurrences of substrings in S.\nWrite a program which computes the number of occurrences of substrings in S.\n\n-----Constraints-----\n - 3 \\leq S.length \\leq 1000\n - 1 \\leq S.length \\leq 1000\n - S consists of uppercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint number of occurrences of substrings in S.\n\n-----Sample Input-----\nABCDQWERT\n\n-----Sample Output-----\n3\n\n------\n7.17. Compute the number of occurrences of substrings in S.\nWrite a program which computes the number of occurrences of substrings in S.\n\n-----Constraints-----\n - 3 \\leq S.length \\leq 1000\n - 1 \\leq S.length \\leq 1000\n - S consists of uppercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint number of occurrences of substrings in S.\n\n-----Sample Input-----\nABCDQWERT\n\n-----Sample Output-----\n1\n\n------\n7.18. Compute the number of occurrences of substrings in S.\nWrite a program which computes the number of occurrences of substrings in S.\n\n-----Constraints-----\n - 3 \\leq S.length \\leq 1000\n - 1 \\leq S.length \\leq 1000\n - S consists of uppercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint number of occurrences of substrings in S.\n\n-----Sample Input-----\nABCDQWERT\n\n-----Sample Output-----\n0\n\n------\n7.19. Compute the number of occurrences of substrings in S.\nWrite a program which computes the number of occurrences of substrings in S.\n\n-----Constraints-----\n - 3 \\leq S.length \\leq 1000\n - 1 \\leq S.length \\leq 1000\n - S consists of uppercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint number of occurrences of substrings in S.\n\n-----Sample Input-----\nABCDQWERT\n\n-----Sample Output-----\n7\n\n------\n7.20. Compute the number of occurrences of substrings in S.\nWrite a program which computes the number of occurrences of substrings in S.\n\n-----Constraints-----\n - 3 \\leq S.length \\leq 1000\n - 1 \\leq S.length \\leq 1000\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\nABC\\nBCD\\n') == '1'\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10\\nZABCDBABCQ') == 2\n\"\"\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nABC\\nABCABCABCABC\") == 3\nassert solution(\"4\\nABC\\nABCABCABCABC\") == 2\n\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\":\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\n\") == '2'\n\n----\n1. \u041d\u0430 \u043f\u0440\u044f\u043c\u0443\u044e \u043e\u0442 \u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0430 \u0434\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0443\u0437\u043d\u0430\u044e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0435\u0433\u043e \u0434\u0440\u0443\u0437\u0435\u0439, \u0447\u0442\u043e \u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0435\u0433\u043e \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u0440\u0443\u0437\u0435\u0439 \u0438 \u0443\u0437\u043d\u0430\u0442\u044c \u0438\u043c\u044f \u0435\u0433\u043e \u043b\u044e\u0431\u0438\u043c\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u0430.\n\n\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043c\u044f \u0434\u0432\u0443\u0445 \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0430, \u0430 \u0437\u0430\u0442\u0435\u043c \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0440\u0443\u0437\u0435\u0439, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043e\u043d\u0438 \u0440\u0430\u0437\u0434\u043e\u043b\u0436\u0430\u0442\u0441\u044f \u0438 \u0438\u043c\u0435\u043d\u0430 \u043b\u044e\u0431\u0438\u043c\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u0430.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\u041a\u043e\u043d\u0442\u0430\u043a\u0442:\n \u0412\u0430\u0441\u044f\n \u0412\u0430\u0441\u044f\n\u0414\u0440\u0443\u0437\u044c\u044f:\n \u042f\u0440\u043e\u0441\u043b\u0430\u0432\n \u0412\u0430\u0441\u044f\n \u041c\u0430\u0440\u0433\u0430\u0440\u0438\u0442\u0430\n\u041b\u044e\u0431\u0438\u043c\u044b\u0439 \u0434\u0440\u0443\u0433:\n \u042f\u0440\u043e\u0441\u043b\u0430\u0432\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0440\u0443\u0437\u0435\u0439:\n 2\n \u0418\u043c\u044f \u043b\u044e\u0431\u0438\u043c\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u0430:\n \u041c\u0430\u0440\u0433\u0430\u0440\u0438\u0442\u0430\n\n\u041f\u0440\u0438\u043c\u0435\u0440 2:\n\u041a\u043e\u043d\u0442\u0430\u043a\u0442:\n \u0412\u0430\u0441\u044f\n \u0412\u0430\u0441\u044f\n\u0414\u0440\u0443\u0437\u044c\u044f:\n \u042f\u0440\u043e\u0441\u043b\u0430\u0432\n \u041c\u0430\u0440\u0433\u0430\u0440\u0438\u0442\u0430\n\u041b\u044e\u0431\u0438\u043c\u044b\u0439 \u0434\u0440\u0443\u0433:\n \u042f\u0440\u043e\u0441\u043b\u0430\u0432\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0440\u0443\u0437\u0435\u0439:\n 1\n \u0418\u043c\u044f \u043b\u044e\u0431\u0438\u043c\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u0430:\n \u0412\u0430\u0441\u044f\n\n\u041f\u0440\u0438\u043c\u0435\u0440 3:\n\u041a\u043e\u043d\u0442\u0430\u043a\u0442:\n \u041d\u0430\u0441\u0442\u044f\n \u041d\u0430\u0441\u0442\u044f\n\u0414\u0440\u0443\u0437\u044c\u044f:\n \u0412\u0430\u0441\u044f\n \u041f\u0435\u0442\u044f\n\u041b\u044e\u0431\u0438\u043c\u044b\u0439 \u0434\u0440\u0443\u0433:\n \u0412\u0430\u0441\u044f\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0440\u0443\u0437\u0435\u0439:\n 0\n\u0418\u043c\u044f \u043b\u044e\u0431\u0438\u043c\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u0430:\n \u041d\u0435\u0442 \u0441\u0440\u0435\u0434\u0438 \u0434\u0440\u0443\u0437\u0435\u0439 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0430\n\n\u041f\u0440\u0438\u043c\u0435\u0440 4:\n\u041a\u043e\u043d\u0442\u0430\u043a\u0442:\n \u041d\u0430\u0441\u0442\u044f\n \u041d\u0430\u0441\u0442\u044f\n\u0414\u0440\u0443\u0437\u044c\u044f:\n \u0412\u0430\u0441\u044f\n \u041f\u0435\u0442\u044f\n\u041b\u044e\u0431\u0438\u043c\u044b\u0439 \u0434\u0440\u0443\u0433:\n \u0412\u0430\u0441\u044f\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0440\u0443\u0437\u0435\u0439:\n 3\n \u0418\u043c\u044f \u043b\u044e\u0431\u0438\u043c\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u0430:\n \u0412\u0430\u0441\u044f\n \u041f\u0435\u0442\u044f\n \u041d\u0430\u0441\u0442\u044f\n\n\u041f\u0440\u0438\u043c\u0435\u0440 5:\n\u041a\u043e\u043d\u0442\u0430\u043a\u0442:\n \u041f\u0435\u0442\u044f\n \u041f\u0435\u0442\u044f\n\u0414\u0440\u0443\u0437\u044c\u044f:\n \u0412\u0430\u0441\u044f\n \u041b\u0435\u043d\u0430\n\u041b\u044e\u0431\u0438\u043c\u044b\u0439 \u0434\u0440\u0443\u0433:\n \u0412\u0430\u0441\u044f\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0440\u0443\u0437\u0435\u0439:\n 1\n \u0418\u043c\u044f \u043b\u044e\u0431\u0438\u043c\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u0430:\n \u0412\u0430\u0441\u044f\n\n\u041f\u0440\u0438\u043c\u0435\u0440 6:\n\u041a\u043e\u043d\u0442\u0430\u043a\u0442:\n \u041f\u0435\u0442\u044f\n \u041f\u0435\u0442\u044f\n\u0414\u0440\u0443\u0437\u044c\u044f:\n \u0412\u0430\u0441\u044f\n \u041b\u0435\u043d\u0430\n\u041b\u044e\u0431\u0438\u043c\u044b\u0439 \u0434\u0440\u0443\u0433:\n \u0412\u0430\u0441\u044f\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0440\u0443\u0437\u0435\u0439:\n 0\n\u0418\u043c\u044f \u043b\u044e\u0431\u0438\u043c\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u0430:\n \u041d\u0435\u0442 \u0441\u0440\u0435\u0434\u0438 \u0434\u0440\u0443\u0437\u0435\u0439 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0430\n\n\u041f\u0440\u0438\u043c\u0435\u0440 7:\n\u041a\u043e\u043d\u0442\u0430\u043a\u0442:\n \u0412\u0430\u0441\u044f\n \u0412\u0430\u0441\u044f\n\u0414\u0440\u0443\u0437\u044c\u044f:\n \u041d\u0430\u0441\u0442\u044f\n \u041d\u0430\u0441\u0442\u044f\n\u041b\u044e\u0431\u0438\u043c\u044b\u0439 \u0434\u0440\u0443\u0433:\n \u0412\u0430\u0441\u044f\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0440\u0443\u0437\u0435\u0439:\n 2\n \u0418\u043c\u044f \u043b\u044e\u0431\u0438\u043c\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u0430:\n \u0412\u0430\u0441\u044f\n \u041d\u0430\u0441\u0442\u044f\n\n\u041f\u0440\u0438\u043c\u0435\u0440 8:\n\u041a\u043e\u043d\u0442\u0430\u043a\u0442:\n \u042f\u0440\u043e\u0441\u043b\u0430\u0432\n \u042f\u0440\u043e\u0441\u043b\u0430\u0432\n\u0414\u0440\u0443\u0437\u044c\u044f:\n \u041d\u0430\u0441\u0442\u044f\n \u041b\u0435\u043d\u0430\n\u041b\u044e\u0431\u0438\u043c\u044b\u0439 \u0434\u0440\u0443\u0433:\n \u042f\u0440\u043e\u0441\u043b\u0430\u0432\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0440\u0443\u0437\u0435\u0439:\n 0\n\u0418\u043c\u044f \u043b\u044e\u0431\u0438\u043c\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u0430:\n \u041d\u0435\u0442 \u0441\u0440\u0435\u0434\u0438 \u0434\u0440\u0443\u0437\u0435\u0439 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0430\n\n-----\n2. \u041d\u0430 \u043f\u0440\u044f\u043c\u0443\u044e \u043e\u0442 \u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0430 \u0434\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0443\u0437\u043d\u0430\u044e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0435\u0433\u043e \u0434\u0440\u0443\u0437\u0435\u0439"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == 2\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\n\"\"\"\n\n\"\"\"\nThe idea is to generate all permutations of the input.\n\nFor each permutation we have to check whether it contains M, A, R, H.\n\nTo check for all M, A, R, H, we can use Counter(perm) == Counter(\"MARCH\")\n\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"MASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\nfrom math import factorial\nfrom collections import Counter"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\nprint(\"Passed\")\n\n\"\"\"\nimport copy\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI') == '2'\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '0'\nassert solution('MASHIKE') == '1'\nassert solution('MASHIKE:') == '0'\nassert solution('MASHIKE:MASHIKE:MASHIKE:MASHIKE') == '4'\nassert solution('MASHIKE:MASHIKE:MASHIKE:MASHIKE:MASHIKE') == '6'\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\") == \"2\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\nMASHIKE\\nRUMOI\\nOBIRA\\n\") == '2'\n\n\"\"\"\n\nimport numpy as np\n\nn = int(stdin.readline())\na = []\nfor i in range(n):\n    a.append(stdin.readline().rstrip())"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"Yes\"\n\n-----Test Case-----\nYou are given a string S.\nYou have to print the longest palindromic substring.\n\nYou don't need to print the entire substring.\nYou just need to print the length of the longest palindromic substring.\n\nInput Format\n\nFirst line contains T, the number of test cases.\nNext T lines contain a string each.\n\nConstraints\n\n1 \\leq T \\leq 100\n\nOutput Format\n\nPrint the length of the longest palindromic substring in a separate line for each test case.\n\nSample Input 0\n\n2\nabcdcba\nabcbac\n\nSample Output 0\n\n7\n5\n\nExplanation 0\n\nLongest palindromic substring for the first test case is \"abcdcba\".\nLongest palindromic substring for the second test case is \"abcbac\".\n\n-----Sample Input 1-----\n3\nabba\nabcd\nbaaaa\n\n-----Sample Output 1-----\n4\n3\n4\n\n------Explanation 1-----\nFor the first test case, the longest palindromic substring is \"abba\".\nFor the second test case, the longest palindromic substring is \"abcd\".\nFor the third test case, the longest palindromic substring is \"baaaa\".\n'''\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\n1 2\\n1 3\\n2 3') == 'Yes'\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"Yes\"\n\n---\nSolution:\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3') == 'Yes'\nassert solution('5 2') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n1 1\\n0 0\\n2 2\") == 'Yes'\nassert solution(\"2 3\\n1 1\\n0 0\") == 'No'\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n2 2\\n3 3\\n2 2\\n1 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 1\\n2 2\\n3 3\") == \"Yes\"\n----------------------------\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nprint(\"Yes\" if N == M else \"No\")"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\n1 2\\n2 3\\n3 1') == 'Yes'\nassert solution('2 1\\n3 3\\n2 2') == 'No'\n\n'''\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"2 5\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('sippuu') == 'Yes'"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aabbcc\") == \"Yes\"\nassert solution(\"aabbcc\") == \"No\"\nassert solution(\"aabbcc\") == \"Yes\"\nassert solution(\"abcdef\") == \"No\"\nassert solution(\"aabbcc\") == \"Yes\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('sippuu') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"aabbcc\") == \"No\"\nassert solution(\"sippuuu\") == \"Yes\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(sippuu) == 'Yes'"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"sippuu\") == 'Yes'\nassert solution(\"iogog\") == 'No'\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('sippuu') == 'Yes'\nassert solution('zippuu') == 'No'\nassert solution('zippus') == 'No'\n\"\"\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"sippuu\") == \"Yes\"\nassert solution(\"sippuuuu\") == \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('sippuu') == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50\\n') == '4'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"\n\"\"\"\n\nfrom collections import defaultdict\n\nN, T = map(int, input().split())\ncosts, times = [], []\nfor _ in range(N):\n    c, t = map(int, input().split())\n    costs.append(c)\n    times.append(t)\n\ndic = defaultdict(list)\nfor i in range(N):\n    dic[times[i]].append((costs[i], i))\n\ndic = {k: sorted(v, key=lambda x: x[0]) for k, v in dic.items()}\n\nres = []\ntimes = sorted(dic.keys())\nfor time in times:\n    if time > T:\n        break\n    if len(dic[time]) == 0:\n        res.append(T)\n    else:\n        res.append(dic[time][0][0])\n\nprint(min(res))\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('1 2\\n') == ''\nassert solution('3 4\\n') == ''\nassert solution('3 4\\n1 3\\n4 2\\n2 1\\n') == 'TLE'\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50') == '4'\n\"\"\""
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\\n\") == \"4\"\nassert solution(\"3 80\\n7 60\\n1 80\\n4 50\\n\") == \"TLE\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 60\\n1 80\\n4 50\\n\") == '4'\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 70\\n7 60\\n1 80\\n4 50') == 4\n\"\"\"\n\n\"\"\"\nYou are a car-driver and you have to drive to your home (exit) after having bought N tickets. \nYou are driving very slowly and you have to make sure that you do not exceed the driving speed limit.\nYour goal is to find the shortest route from your current location to your exit. \nFor that, you can move in any direction on the grid when it is possible. \nIn each direction, you can take a step of size 1 or 2.\n\n- Example:\nYou have 5 tickets and you have to drive to exit.\n\n- The shortest route you can take is:\n    1 2 3\n    4 5 6\n    7 8 9\nHowever, you cannot take the route 1 5 2 3, because it takes more time.\n\n- The shortest route you can take is:\n    2 3 6\n    1 4 7\n    5 8 9\nIn this case, it takes time 6.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq T \\leq 1000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN T\n\n-----Output-----\nPrint the shortest route.\n\n-----Sample Input-----\n3 20\n\n-----Sample Output-----\n1 2 3 6 9 11 13 14 15 17 18 20\n\"\"\"\n\n\"\"\"\nYou are a car-driver and you have to drive to your home (exit) after having bought N tickets. \nYou are driving very slowly and you have to make sure that you do not exceed the driving speed limit.\nYour goal is to find the shortest route from your current location to your exit. \nFor that, you can move in any direction on the grid when it is possible. \nIn each direction, you can take a step of size 1 or 2.\n\n- Example:\nYou have 5 tickets and you have to drive to exit.\n\n- The shortest route you can take is:\n    1 2 3\n    4 5 6\n    7 8 9\nHowever, you cannot take the route 1 5 2 3, because it takes more time.\n\n- The shortest route you can take is:\n    2 3 6\n    1 4 7\n    5 8 9\nIn this case, it takes time 6.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq T \\leq 1000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN T\n\n-----Output-----\nPrint the shortest route.\n\n-----Sample Input-----\n3 20\n\n-----Sample Output-----\n1 2 3 6 9 11 13 14 15 17 18 20\n\"\"\"\n\n\"\"\"\nMr. X is away from home, so he has decided to use his smartwatch to search the best route to go back home, to participate in ABC.\nYou, the smartwatch, has found N routes to his home.\nIf Mr. X uses the i-th of these routes, he will get home in time t_i at cost c_i.\nFind the minimum cost of the shortest route that takes not longer than time T.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 100\n - 1 \\leq T \\leq 1000\n - 1 \\leq c_i \\leq 1000\n - 1 \\leq t_i \\leq 1000\n - The pairs (c_i, t_i) are distinct.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN T\nc_1 t_1\nc_2 t_2\n:\nc_N t_N\n\n-----Output-----\nPrint the minimum cost of the shortest route that takes not longer than time T.\nIf there is no route that takes not longer than time T, print TLE instead.\n\n-----Sample Input-----\n3 70\n7 60\n1 80\n4 50\n\n-----Sample Output-----\n4\n\n-----Explanation-----\nThe first route gets him home at cost 7.\nThe second route takes longer than time T = 70.\nThe third route gets him home at cost 4.\nThus, the cost 4 of the third route is the minimum.\n\"\"\"\n\n\"\"\"\nYou are a car-driver and you have to drive to your home (exit) after having bought N tickets. \nYou are driving very slowly and you have to make sure that you do not exceed the driving speed limit.\nYour goal is to find the shortest route from your current location to your exit. \nFor that, you can move in any direction on the grid when it is possible. \nIn each direction, you can take a step of size 1 or 2.\n\n- Example:\nYou have 5 tickets and you have to drive to exit.\n\n- The shortest route you can take is:\n    1 2 3\n    4 5 6\n    7 8 9\nHowever, you cannot take the route 1 5 2 3, because it takes more time.\n\n- The shortest route you can take is:\n    2 3 6\n    1 4 7\n    5 8 9\nIn this case, it takes time 6.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq T \\leq 1000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN T\n\n-----Output-----\nPrint the shortest route.\n\n-----Sample Input-----\n3 20\n\n-----Sample Output-----\n1 2 3 6 9 11 13 14 15 17 18 20\n\"\"\"\n\n\"\"\"\nMr. X is away from home, so he has decided to use his smartwatch to search the best route to go back home, to participate in ABC.\nYou, the smartwatch, has found N routes to his home.\nIf Mr. X uses the i-th of these routes, he will get home in time t_i at cost c_i.\nFind the minimum cost of the shortest route that takes not longer than time T.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 100\n - 1 \\leq T \\leq 1000\n - 1 \\leq c_i \\leq 1000\n - 1 \\leq t_i \\leq 1000\n - The pairs (c_i, t_i) are distinct.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN T\nc_1 t_1\nc_2 t_2\n:\nc_N t_N\n\n-----Output-----\nPrint the minimum cost of the shortest route that takes not longer than time T.\nIf there is no route that takes not longer than time T, print TLE instead.\n\n-----Sample Input-----\n3 70\n7 60\n1 80\n4 50\n\n-----Sample Output-----\n4\n\n-----Explanation-----\nThe first route gets him home at cost 7.\nThe second route takes longer than time T = 70.\nThe third route gets him home at cost 4.\nThus, the cost 4 of the third route is the minimum.\n\"\"\"\n\n\"\"\"\nYou are a car-driver and you have to drive to your home (exit) after having bought N tickets. \nYou are driving very slowly and you have to make sure that you do not exceed the driving speed limit.\nYour goal is to find the shortest route from your current location to your exit. \nFor that, you can move in any direction on the grid when it is possible. \nIn each direction, you can take a step of size 1"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"\nassert solution(\"3 80\\n7 60\\n1 80\\n4 50\") == \"TLE\"\nassert solution(\"3 80\\n7 60\\n1 80\\n4 50\\n\") == \"4\"\nassert solution(\"1 80\\n7 60\\n1 80\\n4 50\\n\") == \"TLE\"\n\"\"\"\n\nN, T = map(int, input().split())\n\nroutes = []\nfor _ in range(N):\n    routes.append(list(map(int, input().split())))\n\nroutes = sorted(routes, key=lambda x: x[0])\n\ncost = float('inf')\nfor route in routes:\n    if route[1] < T:\n        cost = min(cost, route[0])\n    else:\n        break"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1\\n2 3\\n1 2\\n10 4\\n1 1\\n') == '6'\nassert solution('5 2\\n2 3\\n1 2\\n10 4\\n1 1\\n') == 'TLE'\n\"\"\""
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 70\\n7 60\\n1 80\\n4 50\") == \"4\"\n\"\"\"\n\nn, t = map(int, input().split())\ncosts = []\ntimes = []\n\nfor _ in range(n):\n    cost, time = map(int, input().split())\n    costs.append(cost)\n    times.append(time)"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2 9') == '8'\nassert solution('4 1 1') == '4'\nassert solution('2 1 1') == '2'\nassert solution('3 2 5') == '5'\nassert solution('10 4 0') == '10'"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 9') == 8\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 9\") == \"8\"\nprint(solution(\"4 2 9\"))\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(result)\n\n\"\"\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2 9\\n') == '8'\nassert solution('3 7 1\\n') == '6'\nassert solution('6 9 5\\n') == '15'\nassert solution('2 5 3\\n') == '9'\nassert solution('2 5 2\\n') == '10'\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 9\") == 8\nassert solution(\"4 3 7\") == 7\nassert solution(\"3 5 2\") == 5\nassert solution(\"5 2 1\") == 4\n\"\"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2 9\") == 8\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2 9') == '8'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '4 2 9'\n) == '8'\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 9\\n\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n2\\n3') == '1'\nassert solution('2\\n3\\n2') == '0'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\naaaa\\nbbb\\ncccc\\ndddd\\n') == 3\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abcdefghijklmnop\") == 0\nassert solution(\"abcdghijklmnop\") == 0\nassert solution(\"abcdghijklmnopqrstuvwxyz\") == 0\nassert solution(\"abcdghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\") == 1\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\ncornistnt\\npeanutbomb\\nconstraint\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\\n\") == 1\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n1\\n2\\n') == 2\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\ncornistnt\\npeanutbomb\\nconstraint\\n') == '1'\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\nassert solution('acornistnt') == 1\nassert solution('peanutbomb') == 0\nassert solution('constraint') == 1\n\n------------------------------"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\nacornistnt\\npeanutbomb\\nconstraint\") == \"1\"\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\nacornistnt\\npeanutbomb\\nconstraint') == 1\n\"\"\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5\n1\n3\n20\n38\n56''') == '''1\n2\n5\n2\n0'''\n\nassert solution('''4\n2132\n506\n999999999\n1000000000''') == '''8\n2\n9\n8'''\n\nassert solution('''3\n1\n3\n4''') == '''0\n1\n2'''\n\nassert solution('''2\n2132\n506''') == '''8\n2'''\n\nassert solution('''1\n9999999999''') == '''9'''"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('112123123412345$\\dots$') == '0'\nassert solution('112233$\\dots$') == '0'\nassert solution('1$\\dots$') == '0'\nassert solution('12345$\\dots$') == '0'\nassert solution('112345$\\dots$') == '0'\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"54321123412341234123412341234123412345\"\nassert solution(\"1123344455555677777$\\dots
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345\"\n\n-----Explanation-----\n\nExample 1\nThe first four blocks of the sequence are described in the problem statement. There is no need to re-calculate the sequence from the beginning, so the answer is:\n\n 112123123412345\n\nExample 2\nThe second query is:\n\nThere are only 4 blocks, so the sequence is the same as in the first example.\n\nExample 3\nThe third query is:\n\nThe first and the second blocks are described in the problem statement. The last block of the sequence is described by the last four digits:\n\n 112123123412345\n\n
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"112233\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"123456\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == \"1234\"\n\"\"\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\\n3\\n20\\n38\\n56\\n1\\n2\") == \"1\\n2\\n5\\n2\\n0\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n0\\n10\\n20\\n30\\n40\\n50\\n60\\n70\\n80\\n90\\n100\\n110\\n120\\n130\\n140\\n150\\n160\\n170\\n180\\n190\\n200\\n210\\n220\\n230\\n240\\n250\\n260\\n270\\n280\\n290\\n300\\n310\\n320\\n330\\n340\\n350\\n360\\n370\\n380\\n390\\n400\\n410\\n420\\n430\\n440\\n450\\n460\\n470\\n480\\n490\\n500\") == \"2\\n5\\n2\\n0\\n1\\n8\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1\\n3\\n20\\n38\\n56\\n\") == \"1\\n2\\n5\\n2\\n0\"\n\"\"\"\n\n\n\"\"\"\nMY SOLUTION:\n\nfrom math import log10, ceil"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"112123123412345$\\dots$\") == \"112123123412345\"\n\n-----\n2\n\n3\n\n7\n\n9\n\n4\n\n\"\"\"\n\n\nimport itertools\nimport sys\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11223344556677\") == \"9\"\nassert solution(\"11223344556677889900\") == \"7\"\nassert solution(\"112233445566778899001112233445566778899001111\") == \"0\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('112123123412345') == '1'\nassert solution('11234123412345') == '0'\nassert solution('11223412341234') == '0'\nassert solution('112233412341234') == '1'\nassert solution('112233412341234') == '0'\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\\n\") == \"2\\n1 2 1 1 2\"\nassert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n\") == \"1\\n1 1 1\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2\\n\") == \"2\\n1 2 1 1 2\\n\"\nassert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n\") == \"1\\n1 1 1\\n\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\\n\") == \"3\\n1 1 2 3 2 3 1 3 1\\n\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\\n\") == \"1\\n1 1 1\\n\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\\n\") == \"1\\n1 1 2 3 2 3 1 3 1\\n\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == '3\\n1 1 2 3 2 3 1 3 1'\n\"\"\"\nfrom collections import Counter\n\nclass Edge:\n    def __init__(self, source: int, target: int, company: int):\n        self.source = source\n        self.target = target\n        self.company = company\n\nn, k = map(int, input().split())\nedges = [Edge(*map(int, input().split())) for i in range(n - 1)]\ncompany = Counter([edge.company for edge in edges])\nmax_company = max(company.values())\nans = 0\nfor i in range(1, max_company + 1):\n    edge_company = Counter([edge.company for edge in edges if i == edge.company])\n    if edge_company[i] <= k:\n        ans += 1\nprint(ans)\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9') == '3\\n1 1 2 3 2 3 1 3 1'\n\n\"\"\"\nimport heapq\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 4\\n2 3\\n2 5\") == \"1 2 1 1 2\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\") == \"3 1 1 2 3 2 3 1 3 1\"\n\nprint(\"Success\")\n\n-----INPUT-----\n\n4 2\n1 4\n4 3\n3 5\n3 6\n5 2\n\n-----OUTPUT-----\n\n2\n1 2 1 1 2 \n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '1 2'\nassert solution('1 2 3') == '1 2 3'\nassert solution('1 2 3 4') == '1 2 3 4'\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 2\\n1 4\\n4 3\\n3 5\\n3 6\\n5 2') == '2\\n1 2 1 1 2'\nassert solution('10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9') == '3\\n1 1 2 3 2 3 1 3 1'\nassert solution('4 2\\n3 1\\n1 4\\n1 2') == '1\\n1 1 1'\nassert solution('5 2\\n3 1\\n1 4\\n1 2\\n4 3') == '1\\n1 1 1'\nassert solution('7 2\\n1 6\\n1 7\\n1 8\\n1 9\\n2 4\\n3 5\\n3 6\\n4 7\\n5 8\\n5 9') == '3\\n1 2 1 2\\n1 2 1 2'\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9') == '3\\n1 1 2 3 2 3 1 3 1'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n1 4\\n4 3\\n3 5\\n3 6') == '2\\n1 2 1 1 2'\n\nprint(solution(stdin))\n\n\n-----Explanation-----\nThe graph looks like this:\n\n![Graph illustration](images/graph.png)\n\nFrom the graph, we can see that there is only one edge linking the vertex $3$ to the vertex $6$ with edge index $1$, and this is owned by the company with index $1$. There are two more edges, $1$ and $2$, linking the vertex $3$ to the vertex $5$. There is no edge linking the vertex $3$ to the vertex $4$, so the city $4$ is not good. There are no edges linking the vertex $5$ to the vertex $6$ and the city $6$ is not good.\n\nTherefore, the answer is $2$, and the cities with edge indices $1$ and $2$ are linked to company $1$ and the city with edge index $1$ is linked to company $2$. The cities with edge indices $1$ and $2$ are $1$ and $2$. The city $4$ is not good, so the cities with edge indices $1$ and $2$ are $1$ and $2$.\n\"\"\"\n\nfrom collections import defaultdict\nfrom queue import Queue"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n3 1\\n1 4\\n1 2\\n\") == \"1 2 1 1 2\"\nassert solution(\"10 2\\n10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\\n\") == \"3 1 1 1 2 3 1 1 3 1\"\nassert solution(\"5 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n3 8\\n4 9\\n\") == \"2 1 1 2 3 2 3 2 1 3\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 1 4\") == \"2 4\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\n\"\"\"\n\nfrom typing import List, Tuple, Dict\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\n\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\n\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n\n\"\"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n1 2 4 4\\n') == '2 4'\n\nassert solution('9\\n1 1 8 8 8 4 4 4 4\\n') == '3 8'\n\nassert solution('7\\n4 3 7 1 4 3 3\\n') == '3 6'\n\n\n------TEMPLATE-----"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n\"\"\"\n\nn = int(input())\nx = list(map(int, input().split()))\n\nleft = [0] * n\nright = [0] * n\nfor i in range(n):\n    if x[i] > i + 1:\n        left[i] = x[i] - i - 1\n    if x[i] < n - i:\n        right[i] = x[i] + n - i - 1\n\nprint(min(sum(left), sum(right)), max(sum(left), sum(right)))"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 4 4') == '2 4'\n\"\"\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n\"\"\""
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 4 4\") == '2 4'\n\"\"\""
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 4 4\") == \"2 4\"\nassert solution(\"9\\n1 1 8 8 8 4 4 4 4\") == \"3 8\"\nassert solution(\"7\\n4 3 7 1 4 3 3\") == \"3 6\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n\") == \"3 2 4 1 5\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3') == '3 2 4 1 5'\nassert solution('3\\n2 3\\n1 2') == '3 1 2'\nprint(solution(input()))\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\n\"\"\"\n\nclass Parent:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\nclass Node:\n    def __init__(self, parent, kid):\n        self.parent = parent\n        self.kid = kid\n\nparent_to_kid = {}\nkid_to_parent = {}\n\nparent = None\nkid = None\nfor i, line in enumerate(stdin.split('\\n')[1:]):\n    a, b = map(int, line.split())\n    parent = Parent(a, b)\n    parent_to_kid[parent] = Node(parent, i + 2)\n    kid_to_parent[i + 2] = parent"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n\") == \"3 2 4 1 5\"\nassert solution(\"3\\n2 3\\n3 1\\n1 2\\n\") == \"3 1 2\""
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\nassert solution(\"3\\n2 3\\n1 2\") == \"1 2 3\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2\\n1 3\\n2 3\\n2 4\") == \"1 3 2 4\"\n\"\"\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n1 4\\n2 4\\n1 5\\n2 3\") == \"3 2 4 1 5\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 3\\n2 3\") == \"2 1 3\"\nassert solution(\"5\\n3 2\\n4 1\\n5 2\\n1 4\") == \"2 1 4 3\"\n\n\"\"\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6\\n1 10 17 12 15 2') == '3'\nassert solution('10\\n
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 1000 10000 10 100 1000000000\\n\") == '3'\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\\n\") == '10'\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\\n\") == '1'\n\"\"\""
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\\n\") == 3\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\\n\") == 10\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == 3\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == 10\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\") == 1\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == output()"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\n1 1000 10000 10 100 1000000000') == '1'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == '10'\nassert solution('6\\n1 1 1 1 1 1') == '1'\nassert solution('10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337') == '10'\n\"\"\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == \"3\"\nassert solution(\"10\\n
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == \"3\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == \"10\"\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 1000 10000 10 100 1000000000\") == '1'\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337\") == '10'\nassert solution(\"6\\n1 1000 10000 10 100 1000000000\") == '1'\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\n\na.sort()\n\nprint(a[(n - 1) // 2])\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n1 10 17 12 15 2\") == \"3\"\nassert solution(\"10\\n1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 1337 13"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4\\n-1\\n5\\n2\\n0\\n1'\nassert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4\\n-1\\n5\\n2\\n0\\n1'\nassert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4\\n-1\\n5\\n2\\n0\\n1'\nassert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4\\n-1\\n5\\n2\\n0\\n1'\n\n\"\"\"\n\n\"\"\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5\n1 10 2 3\n5 10 6 3\n2 10 1 3\n4 10 2 1\n7 10 4 1\n\"\"\") == \"2\"\n\n\"\"\"\n[0,1,2,3,4,5,6,7,8,9]\nfor i in range(n):\n    a = int(stdin.readline())\n    for j in range(a):\n        stdin.readline()\n    k = int(stdin.readline())\n    n = int(stdin.readline())\n    b = int(stdin.readline())\n    print(k)\n    print(n)\n    print(b)\n\"\"\"\n\n\"\"\"\n\n2\n9 2 1 3\n9 2 1 3\n3 2 1 3\n4 2 1 1\n5 2 1 1\n6 2 1 1\n7 2 1 1\n8 2 1 1\n9 2 1 1\n10 2 1 1\n11 2 1 1\n12 2 1 1\n13 2 1 1\n14 2 1 1\n15 2 1 1\n16 2 1 1\n17 2 1 1\n18 2 1 1\n19 2 1 1\n20 2 1 1\n21 2 1 1\n22 2 1 1\n23 2 1 1\n24 2 1 1\n25 2 1 1\n26 2 1 1\n27 2 1 1\n28 2 1 1\n29 2 1 1\n30 2 1 1\n31 2 1 1\n32 2 1 1\n33 2 1 1\n34 2 1 1\n35 2 1 1\n36 2 1 1\n37 2 1 1\n38 2 1 1\n39 2 1 1\n40 2 1 1\n41 2 1 1\n42 2 1 1\n43 2 1 1\n44 2 1 1\n45 2 1 1\n46 2 1 1\n47 2 1 1\n48 2 1 1\n49 2 1 1\n50 2 1 1\n51 2 1 1\n52 2 1 1\n53 2 1 1\n54 2 1 1\n55 2 1 1\n56 2 1 1\n57 2 1 1\n58 2 1 1\n59 2 1 1\n60 2 1 1\n61 2 1 1\n62 2 1 1\n63 2 1 1\n64 2 1 1\n65 2 1 1\n66 2 1 1\n67 2 1 1\n68 2 1 1\n69 2 1 1\n70 2 1 1\n71 2 1 1\n72 2 1 1\n73 2 1 1\n74 2 1 1\n75 2 1 1\n76 2 1 1\n77 2 1 1\n78 2 1 1\n79 2 1 1\n80 2 1 1\n81 2 1 1\n82 2 1 1\n83 2 1 1\n84 2 1 1\n85 2 1 1\n86 2 1 1\n87 2 1 1\n88 2 1 1\n89 2 1 1\n90 2 1 1\n91 2 1 1\n92 2 1 1\n93 2 1 1\n94 2 1 1\n95 2 1 1\n96 2 1 1\n97 2 1 1\n98 2 1 1\n99 2 1 1\n100 2 1 1\n101 2 1 1\n102 2 1 1\n103 2 1 1\n104 2 1 1\n105 2 1 1\n106 2 1 1\n107 2 1 1\n108 2 1 1\n109 2 1 1\n110 2 1 1\n111 2 1 1\n112 2 1 1\n113 2 1 1\n114 2 1 1\n115 2 1 1\n116 2 1 1\n117 2 1 1\n118 2 1 1\n119 2 1 1\n120 2 1 1\n121 2 1 1\n122 2 1 1\n123 2 1 1\n124 2 1 1\n125 2 1 1\n126 2 1 1\n127 2 1 1\n128 2 1 1\n129 2 1 1\n130 2 1 1\n131 2 1 1\n132 2 1 1\n133 2 1 1\n134 2 1 1\n135 2 1 1\n136 2 1 1\n137 2 1 1\n138 2 1 1\n139 2 1 1\n140 2 1 1\n141 2 1 1\n142 2 1 1\n143 2 1 1\n144 2 1 1\n145 2 1 1\n146 2 1 1\n147 2 1 1\n148 2 1 1\n149 2 1 1\n150 2 1 1\n151 2 1 1\n152 2 1 1\n153 2 1 1\n154 2 1 1\n155 2 1 1\n156 2 1 1\n157 2 1 1\n158 2 1 1\n159 2 1 1\n160 2 1 1\n161 2 1 1\n162 2 1 1\n163 2 1 1\n164 2 1 1\n165 2 1 1\n166 2 1 1\n167 2 1 1\n168 2 1 1\n169 2 1 1\n170 2 1 1\n171 2 1 1\n172 2 1 1\n173 2 1 1\n174 2 1 1\n175 2 1 1\n176 2 1 1\n177 2 1 1\n178 2 1 1\n179 2 1 1\n180 2 1 1\n181 2 1 1\n182 2 1 1\n183 2 1 1\n184 2 1 1\n185 2 1 1\n186 2 1 1\n187 2 1 1\n188 2 1 1\n189 2 1 1\n190 2 1 1\n191 2 1 1\n192 2 1 1\n193 2 1 1\n194 2 1 1\n195 2 1 1\n196 2 1 1\n197 2 1 1\n198 2 1 1\n199 2 1 1\n200 2 1 1\n201 2 1 1\n202 2 1 1\n203 2 1 1\n204 2 1 1\n205 2 1 1\n206 2 1 1\n207 2 1 1\n208 2 1 1\n209 2 1 1\n210 2 1 1\n211 2 1 1\n212 2 1 1\n213 2 1 1\n214 2 1 1\n215 2 1 1\n216 2 1 1\n217 2 1 1\n218 2 1 1\n219 2 1 1\n220 2 1 1\n221 2 1 1\n222 2 1 1\n223 2 1 1\n224 2 1 1\n225 2 1 1\n226 2 1 1\n227 2 1 1\n228 2 1 1\n229 2 1 1\n230 2 1 1\n231 2 1 1\n232 2 1 1\n233 2 1 1\n234 2 1 1\n235 2 1 1\n236 2 1 1\n237 2"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 5 3 2\\n10 5 4 3\\n10 5 2 1\\n10 5 5 1\\n16 7 5 2\\n20 5 7 3\") == '4\\n-1\\n5\\n2\\n0\\n1'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4\\n-1\\n5\\n2\\n0\\n1'\n\"\"\"\n\n\nimport collections\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"15 5 3 2\") == \"4\"\nassert solution(\"15 5 4 3\") == \"-1\"\nassert solution(\"15 5 2 1\") == \"5\"\nassert solution(\"15 5 5 1\") == \"2\"\nassert solution(\"16 7 5 2\") == \"0\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3\") == \"4\\n-1\\n5\\n2\\n0\\n1\""
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == expected_result\n\n\n\n\"\"\"\n\nimport sys\nfrom typing import List, Any, Union, Callable\n\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_INT = lambda line: int(line)\nINPUT_FLOAT = lambda line: float(line)\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4\\n-1\\n5\\n2\\n0\\n1'\n\"\"\"\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3') == '4\\n-1\\n5\\n2\\n0\\n1'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"15 5 3 2\") == \"4\"\nassert solution(\"15 5 4 3\") == \"-1\"\nassert solution(\"15 5 2 1\") == \"5\"\nassert solution(\"15 5 5 1\") == \"2\"\nassert solution(\"16 7 5 2\") == \"0\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ac?b?c\") == '24'\nassert solution(\"???????\") == '2835'\nassert solution(\"cccbbbaaa\") == '0'\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\nassert solution(\"a?a?a\") == \"9\"\nassert solution(\"a??a\") == \"4\"\nassert solution(\"ab?a\") == \"4\"\nassert solution(\"a?a?a\") == \"9\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ac?b?c') == 24\nassert solution('???????') == 2835\nassert solution('a??c') == 46"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\nassert solution(\"a??c\") == \"2835\"\nassert solution(\"a??b?c\") == \"4\"\nassert solution(\"cab?c?c?\") == \"7\"\nassert solution(\"ac?b?c\") == \"24\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ac?b?c') == '24'\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ac?b?c\") == 24\nassert solution(\"???????\") == 2835\nassert solution(\"cccbbbaaa\") == 0\nassert solution(\"a???c\") == 46\n\nprint('The string \"cccbbbaaa\" has zero \"abc\" subsequences.')\n\nprint('The string \"???????\" has $2835$ \"abc\" subsequences.')\n\nprint('The string \"a???c\" has $46$ \"abc\" subsequences.')"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ac?b?c\") == 24\nassert solution(\"???????\") == 2835\nassert solution(\"cccbbbaaa\") == 0\n\nassert solution(\"a??c\") == 46\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(s = \"ac?b?c\") == \"24\"\nassert solution(s = \"???????\") == \"2835\"\nassert solution(s = \"cccbbbaaa\") == \"0\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ac?b?c\") == \"24\"\n\"\"\""
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ac?b?c') == '24'\nassert solution('???????') == '2835'\nassert solution('cccbbbaaa') == '0'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4 2\n1 3 3 7\n1 2 8\n1 3 10\n1 4 7\n1 5 15\n\"\"\") == \"18\"\nassert solution(\"\"\"\n5 4\n1 2 3 4 5\n1 2 8\n1 3 10\n1 4 7\n1 5 15\n\"\"\") == \"18\"\nassert solution(\"\"\"\n5 4\n1 2 3 4 5\n1 2 1\n1 3 10\n1 4 7\n1 5 15\n\"\"\") == \"16\"\n\n\"\"\""
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n1 3 3\\n2 3 5\\n2 1 1\\n') == '5'\nassert solution('4 0\\n1 3 3 7\\n') == '16'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n1 3 3\\n2 3 5\\n2 1 1\") == \"5\"\nassert solution(\"4 0\\n1 3 3 7\\n\") == \"16\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n1 3 3\\n2 3 5') == '5'\nassert solution('4 0\\n1 3 3 7') == '16'\n\"\"\"\nimport collections\n\nimport sys\nimport os\n\nsys.setrecursionlimit(5000)\n\nDEBUG = False\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 0\\n1 3 3 7\\n\") == \"16\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\\n\") == \"18\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 0\\n1 3 3 7\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 0\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\\n2 3 5\\n2 1 1\\n2 4 2\\n3 2 3\\n4 1 10\\n4 2 9\") == \"18\"\n\"\"\"\n\n\nclass Vertex:\n    def __init__(self, key: int):\n        self.key = key\n        self.neighbors = set()\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 0\\n1 3 3 7\") == \"16\"\nassert solution(\"5 4\\n1 2 3 4 5\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\") == \"18\""
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n1 3 3\\n2 3 5') == '5'\nassert solution('4 0\\n1 3 3 7') == '16'\n\n\n\n-----Hints-----\n\nhttps://www.youtube.com/watch?v=iX-KdzWdNrE\n\n\"\"\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 3 3\\n2 3 5\\n2 1 1\") == \"5\"\nassert solution(\"4 0\\n1 3 3 7\") == \"16\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == 14\n\n\"\"\"\n\nimport sys\n\nimport numpy as np\n\na, n, m = [int(i) for i in input().split()]\nl = []\nfor i in range(n):\n    l.append([int(i) for i in input().split()])\nu = []\nfor i in range(m):\n    u.append([int(i) for i in input().split()])\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\n\"\"\"\n\na, n, m = (int(i) for i in input().split())\ndata = []\nfor _ in range(n):\n    l, r = (int(i) for i in input().split())\n    data.append((l, r))\ndata.sort()\n\npos = 0\nfatigue = 0\nfor d in data:\n    # We get miniumum distance between position\n    # and next point\n    # print(d[0], d[1], pos)\n    if d[1] < pos:\n        # if we have to pick up new umbrella\n        # then we increase the fatigue and\n        # the position of umbrella\n        fatigue += d[1] - pos\n        pos = d[1]\n    else:\n        pos = d[1]"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2 1\") == \"14\"\nassert solution(\"7 2 4\") == \"14\"\nassert solution(\"7 2 0\") == \"-1\"\nassert solution(\"7 1 1\") == \"45\"\nassert solution(\"7 1 4\") == \"14\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''10 2 4\n3 7\n8 10\n0 10\n3 4\n8 1\n1 2''') == '14'\nassert solution('''10 1 1\n0 9\n0 5''') == '45'\nassert solution('''10 1 1\n0 9\n1 5''') == '-1'\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\n\"\"\"\nimport math"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_data) == test_result\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 1 1\\n0 9\\n0 5') == '45'\nassert solution('10 1 1\\n0 9\\n1 5') == '-1'\n\"\"\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\\n\") == \"45\"\n\"\"\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\") == \"14\"\nassert solution(\"10 1 1\\n0 9\\n0 5\") == \"45\"\nassert solution(\"10 1 1\\n0 9\\n1 5\") == \"-1\"\n\n\"\"\"\n\n\nimport collections\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 7 5\\n\") == \"Yes\"\nassert solution(\"4 7 4\\n\") == \"No\"\nassert solution(\"5 7 7\\n\") == \"No\"\nassert solution(\"7 7 5\\n\") == \"Yes\"\nassert solution(\"9 7 9\\n\") == \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 6 5\") == \"Yes\"\nassert solution(\"7 7 5\") == \"No\"\nassert solution(\"5 7 6\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"5 7 5\"\n) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7 5') == 'Yes'\n\"\"\"\n\nA, B, C = map(int, stdin.split(' '))\n\nprint('Yes') if C not in {A, B} or C == A == B else print('No')\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 7 5') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 7 5\\n') == \"Yes\"\n\n-----\nSolution:\n-----\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7 5\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12 5 1000 2000\") == \"1\"\n\"\"\"\nimport sys\nimport math\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\n\n----------------------\n\nInstructions\n- Read an integer representing the number of places N.\n- Read an integer representing the average temperature.\n- Read N space-separated integers representing the heights of the N places.\n\nConstraints\n- 1 \\leq N \\leq 1000\n- 0 \\leq T \\leq 50\n- -60 \\leq A \\leq T\n- 0 \\leq H_i \\leq 10^5\n\nOutput Format\n- Print an integer representing the index of the place where the palace should be built.\n\nSample Input 0\n2\n12 5\n1000 2000\n\nSample Output 0\n1\nExplanation 0\n- The average temperature of Place 1 is 12-1000 \\times 0.006=6 degrees Celsius.\n- The average temperature of Place 2 is 12-2000 \\times 0.006=0 degrees Celsius.\n- Place 1 has the closest average temperature to A=12 degrees Celsius and it is at Place 1.\n\nSample Input 1\n2\n10 5\n10 20\n\nSample Output 1\n0\nExplanation 1\n- The average temperature of Place 1 is 10-10 \\times 0.006=0 degrees Celsius.\n- The average temperature of Place 2 is 10-20 \\times 0.006=0 degrees Celsius.\n- Place 2 has the closest average temperature to A=10 degrees Celsius and it is at Place 2.\n\"\"\"\n\n\"\"\"\nThe average temperature of Place 1 is 12-1000 \\times 0.006=6 degrees Celsius.\n- The average temperature of Place 2 is 12-2000 \\times 0.006=0 degrees Celsius.\nThus, the palace should be built at Place 1.\n\"\"\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\n'''\n\nimport sys\nimport numpy as np\n\nN = int(input())\nT = int(input())\nA = int(input())\nH = list(map(int, input().split()))\n\nH = np.array(H)\nH_n = H.argsort()[0]\n\nindex = H_n + 1\nfor i in range(H_n + 1, N + 1):\n    if (T - A) * (H[i] - H[i - 1]) < (H[i - 1] - H[i]) * (T - A):\n        index = i\n        break\nprint(index)\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\\n\") == \"1\"\nprint(solution(\"2\\n12 5\\n1000 2000\\n\"), \"1\")\n\"\"\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 12 5 1000 2000\") == '1'\n\"\"\"\n\nimport sys\n\nn = int(input())\nA = int(input())\nh = list(map(int, input().split()))\n\nmin_difference = 10**9\nindex = 0\nfor i in range(n):\n    average = (A - h[i] * 0.006)\n    if average < min_difference:\n        min_difference = average\n        index = i\n\nprint(index + 1)\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n12 5\\n1000 2000') == '1'\n\"\"\"\n\nn = int(stdin.readline())\nt, a = map(int, stdin.readline().split())\n\nplaces = list(map(int, stdin.readline().split()))\n\ntemp = [t-p*0.006 for p in places]\n\nprint(places[temp.index(min(temp))])\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n12 5\\n1000 2000\\n') == '1'\n\"\"\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\n\"\"\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\nprint(solution(\"2\\n12 5\\n1000 2000\"))\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n12 5\\n1000 2000\") == \"1\"\nprint(\"PASSED\")\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"5 5\") == \"13\"\n\"\"\"\n\n\"\"\"\nDefinition of Ball:\nclass Ball:\n    def __init__(self, value, selected):\n        self.value = value\n        self.selected = selected\n\"\"\"\n\nclass Solution:\n    # @param A : integer\n    # @param B : integer\n    # @return an integer\n    def solve(self, N, M):\n        odds = 0\n        evens = 0\n        for val in range(1, N + M + 1):\n            if val % 2 == 0:\n                evens += 1\n            else:\n                odds += 1\n        return odds * evens % 10000000007"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"4 5\") == \"0\"\nassert solution(\"2 3\") == \"1\"\n\"\"\"\nimport ast\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"1\"\n\"\"\"\nfrom __future__ import print_function\n\nN, M = map(int, input().split())\nprint((M * (M + 1)) // 2 - ((N * (N + 1)) // 2) % 2)"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"1 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"0\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"2 2\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"1\"\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"1\"\n\"\"\"\n\nfrom typing import List\nimport math\n\n\nclass Number:\n    def __init__(self, value):\n        self.value = value\n\n    def __add__(self, other):\n        return self.value + other.value\n\n    def __str__(self):\n        return str(self.value)\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ACACTACG\", 3, 7) == 2\nassert solution(\"ACTACG\", 3, 7) == 0\nassert solution(\"ACACTACG\", 3, 5) == 3\n\"\"\"\n\nfrom collections import Counter\n\nN, Q = [int(i) for i in stdin.readline().split()]\nS = stdin.readline().strip()\n\ncount = Counter(S[l:r + 1] for l, r in [tuple(map(int, stdin.readline().split())) for _ in range(Q)])\n\nfor l, r in [tuple(map(int, stdin.readline().split())) for _ in range(Q)]:\n    print(count[S[l:r + 1]])\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ACACTACG') == '2'\nassert solution('CACACG') == '0'\nassert solution('GAGAACCGT') == '3'"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"CAGCCTA\") == \"0\"\nassert solution(\"ATCODER\") == \"3\"\nassert solution(\"AATCODER\") == \"4\"\n\nprint(\"All tests passed.\")\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ACACTACG', [3, 7], [2, 3], [1, 8]) == '2\\n0\\n3'\n\"\"\"\n\nimport sys\n\n_, N, Q = map(int, sys.stdin.readline().split())\nS = sys.stdin.readline().strip()\n\ncount = [0] * N\ncount[0] = 1 if S[0] == 'A' else 0\n\nfor i in range(1, N):\n    if S[i] == 'C':\n        count[i] += count[i - 1]\n    if S[i - 1] == 'A' and S[i] == 'C':\n        count[i] += count[i - 1]\n\nfor _ in range(Q):\n    l, r = map(int, sys.stdin.readline().split())\n    print(count[r - 1] - count[l - 1])\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"8 3\"\n) == \"2 0 3\"\n\n\"\"\"\n\nimport sys\nimport pdb\n\ndebug_here = False"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"ATCODER\") == \"3\"\nassert solution(\"CACACG\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ACACTACG\", 2, 3) == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ACACTACG') == '2'\nassert solution('CATACTA') == '0'\nassert solution('CGTAATC') == '3'\n\"\"\"\n\nimport sys\n\nn_q, s = [int(x) for x in sys.stdin.readline().split()]\nsubs = sys.stdin.readline().strip()"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ACACTACG\") == 2\nassert solution(\"\") == 0\nassert solution(\"A\") == 1"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ACACTACG\") == \"2\"\nassert solution(\"AACG\") == \"0\"\nassert solution(\"AAC\") == \"3\""
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n1 2 3 4\\n\") == \"3\"\nassert solution(\"5 3\\n1 2 3 4 5\\n\") == \"8\"\nassert solution(\"5 1\\n1 2 3 4 5\\n\") == \"3\"\nassert solution(\"5 5\\n1 2 3 4 5\\n\") == \"15\"\nassert solution(\"3 3\\n1 2 3\\n\") == \"2\"\n\nimport sys\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5 3\n50 100 80 120 80\"\"\") == \"210\"\nassert solution(\"\"\"5 3\n50 100 80 120 80\"\"\") == \"210\"\nassert solution(\"\"\"5 3\n50 100 80 120 80\"\"\") == \"210\"\nassert solution(\"\"\"5 3\n50 100 80 120 80\"\"\") == \"210\"\nassert solution(\"\"\"5 3\n50 100 80 120 80\"\"\") == \"210\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n50 100 80 120 80') == '210'\nprint('Test pass.')"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\nprint(\"PASSED\")\n\n-----\n6 5\n7 7 7 7 7\n\n-----\n6 6\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7 7\n\n-----\n6 7\n7 7 7 7"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == 210\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 4\n1 1 2 2\n''') == '4'\nassert solution('''5 5\n1 1 1 1 1\n''') == '1'\nassert solution('''5 3\n50 100 80 120 80\n''') == '210'\n'''\nimport math\nimport numpy as np\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3\\n50 100 80 120 80\\n') == 210\n\"\"\"\nimport math"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\") == \"210\"\n\"\"\"\n\n\n\"\"\"\nRead 5 lines of input:\nN K\np_1 p_2... p_N\n\nPrint the minimum possible total price of the fruits as an integer.\n\"\"\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n50 100 80 120 80\\n\") == \"210\"\n\"\"\"\n\ninput = open('./input.txt').readlines()\nN, K = map(int, input[0].split())\nprices = list(map(int, input[1].split()))\n\ndp = [0] * (K + 1)\ndp[0] = 0\nfor i in range(1, K + 1):\n    for j in range(N):\n        if i - prices[j] >= 0:\n            dp[i] = max(dp[i], dp[i - prices[j]] + prices[j])\n\nprint(dp[K])"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n50 100 80 120 80\\n') == '210'\n\n\"\"\"\n\nN, K = map(int, input().split(' '))\nprices = list(map(int, input().split(' ')))\nprices.sort()\n\ntotal_price = 0\nfor i in range(0, K):\n    total_price += prices[i]\n\nprint(total_price)"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(1 3 4) == 4\nassert solution(2 3 4) == 7\n\"\"\"\nimport unittest\nimport sys\n\nclass Solution:\n    def solution(self, stdin: str) -> int:\n        # 1. get input\n        A, B, C = [int(i) for i in stdin.split()]\n\n        # 2. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 3. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 4. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 5. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 6. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 7. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 8. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 9. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 10. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 11. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 12. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 13. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 14. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 15. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 16. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 17. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 18. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 19. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 20. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 21. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 22. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 23. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 24. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 25. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 26. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 27. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 28. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 29. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 30. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 31. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 32. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_time\n        B = B - min_time\n        C = C - min_time\n\n        # 33. calculate minimum travel time\n        min_time = min([A, B, C])\n        A = A - min_"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"1 3 4\"\n) == \"4\"\n\nassert solution(\n    \"1 2 3\"\n) == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3 4') == '4'\n\"\"\"\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"4 3 2\") == \"3\"\n\n---"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"4\""
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3 4\") == \"4\"\nassert solution(\"2 4 6\") == \"12\"\nassert solution(\"4 6 5\") == \"16\"\n\n---\n\nIn this problem, we have a directed graph with N nodes.\nThere are no directed cycles in the graph.\nEach edge has a non-negative cost, and it is possible to remove any edge between two nodes.\nWhat is the minimum total cost to remove all edges such that the graph is disconnected?\n\n-----Constraints-----\n - N \\leq 10^5\n - The cost of the edge between two nodes is non-negative.\n\n-----Input-----\nThe first line of input contains an integer, N, the number of nodes in the graph.\nThe next N lines of input contain two integers each, u and v, indicating that there is an edge between nodes u and v.\n\n-----Output-----\nPrint an integer indicating the minimum total cost to remove all edges such that the graph is disconnected.\n\n-----Sample Input-----\n5\n1 2\n1 3\n2 3\n3 4\n4 5\n\n-----Sample Output-----\n3"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 4\") == \"8\"\nassert solution(\"2 1 4\") == \"3\"\nassert solution(\"0 3 2\") == \"6\"\nassert solution(\"3 3 3\") == \"12\"\n\"\"\""
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n\"\"\""
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1 3 4''') == '4'\nassert solution('''1 2 4''') == '2'\nassert solution('''10 5 1''') == '10'\nassert solution('''1 10 4''') == '4'\nassert solution('''10 10 1''') == '10'\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 4\") == \"4\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 5\") == \"0\"\n\"\"\"\n\n\"\"\"\nIn this challenge, you are required to calculate and print the sum of the elements in an array, keeping in mind that some of those integers may be quite large.\n\nFunction Description\n\nComplete the aVeryBigSum function in the editor below. It must return the sum of all array elements.\n\naVeryBigSum has the following parameter(s):\n\nar: an array of integers.\nInput Format\n\nThe first line of the input consists of an integer.\nThe next line contains  space-separated integers contained in the array.\n\nOutput Format\n\nPrint the integer sum of the elements in the array.\n\nSample Input\n\n5\n1000000001 1000000002 1000000003 1000000004 1000000005\nOutput\n\n5000000015\nExplanation\n\n\nSumming all the integers from  to  (inclusive) results in.\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\") == \"0\"\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\") == \"0\"\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5') == '0'\nassert solution('5 6') == '10'\n\"\"\"\n\nx, a = [int(s) for s in input().split()]"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5\\n') == '0'\n\"\"\"\nimport sys\n\nfrom typing import Callable"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\") == \"0\"\nassert solution(\"9 3\") == \"10\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 3') == '0'\nassert solution('2 3') == '10'\n\"\"\""
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nX, A = map(int, input().split(' '))\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5') == '0'\n\n-------\n\nsolution.py\n-------\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '7 4'\n) == '1'\n\"\"\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 4') == '1'\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 4') == '1'\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 4') == '1'\nassert solution('5 5') == '0'\nassert solution('1 1') == '0'"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 4') == '1'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 4\") == '1'\n\"\"\""
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\"\n\nfrom tools import timing\n\n@timing\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 7 9\") == 'win'\n\n\"\"\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 7 9') == 'win'\n\n\"\"\"\n\n\"\"\"\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n\"\"\"\n\nA_1, A_2, A_3 = (int(n) for n in stdin.readline().split())"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 7 9\\n') == 'win'\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 7 9\") == 'win'\nassert solution(\"6 7 9\") == 'win'\nassert solution(\"6 8 9\") == 'bust'\nassert solution(\"6 9 10\") == 'win'\nassert solution(\"6 9 11\") == 'bust'\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 7 9\") == \"win\"\n\n3\n5\n7\n9\n\n'''"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 7\") == \"win\"\nassert solution(\"5 9 8\") == \"bust\"\n\n\"\"\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 7 9') == 'win'\nassert solution('1 1 1') == 'bust'\n\"\"\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 7 9') == 'win'\n\"\"\"\n\na_1, a_2, a_3 = map(int, stdin.split())"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 7 9') == 'win'\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 7 9') == 'win'\n\"\"\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == '2'\nassert solution('1') == '1'\n\"\"\""
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n\") == \"6\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == 1\nassert solution('2') == 2\nassert solution('3') == 3\nassert solution('4') == 2\nassert solution('5') == 5\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '10'\nassert solution('10') == '2'\nassert solution('2') == '1'\nassert solution('1') == '1'\n\"\"\""
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '8'\nassert solution('5') == '10'\n\n---Problem---\nThe number 3 is \"Threeish\".\nA number n is \"Threeish\" if it is divisible by 3, \nbut not divisible by 5.\nFind the sum of all the numbers less than 10^7 that are \"Threeish\".\n\n-----Solution---\nThe solution is to use the \"Threeish\" concept with modulus.\nWe want to find the numbers divisible by 3 but not by 5.\nWe could use the % operator but it is slow.\nSo we can use the trick:\n(num mod 3) * 3 + (num mod 5) * 5 = num\nSo, we can simplify it to:\n(num mod 3) * 3 = (num mod 15)\n3 * (num mod 15) = num mod 15\nThus, we just need to take care of the mod 15.\nNow, we only have to look at numbers that are divisible by 15.\n\nWhat is the number of these numbers?\nTo find it, we can use the sieve of Eratosthenes.\nWe create a boolean array of length 10^7, and mark all multiples of 3 and 5 as False.\nThen, we can traverse the array and mark all multiples of 15 as True.\nThen, we can loop over the array and mark all multiples of 15 that are not marked as True as True.\nThis is exactly the same as the number of numbers divisible by 3 but not by 5.\nThe numbers divisible by 3 but not by 5 are marked as False.\nTherefore, we just need to sum the numbers that are marked as True."
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"6\"\nassert solution(\"10\") == \"20\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '6'\nassert solution('5') == '10'\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '6'\n\"\"\""
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"6\"\n\nprint(solution(\"3\"))"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 2\") == \"2\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6 2\\n') == '2'\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == 2\nassert solution(\"1 2\") == 1\nassert solution(\"2 1\") == 2\nassert solution(\"6 2\") == 2\nassert solution(\"7 5\") == 3\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n3 3\\n4 2\\n5 4\\n2 4\") == \"1\"\nassert solution(\"6 3\\n3 3\\n4 3\\n5 3\\n2 3\") == \"2\"\n\"\"\"\n\nimport sys\n\nN, D = map(int, sys.stdin.readline().split())\ntrees = list(map(int, sys.stdin.readline().split()))\n\ntotal_sum = 0\nfor i in range(len(trees)):\n    if i + D > len(trees) - 1:\n        break\n    trees_sum = sum(trees[i: i + D + 1])\n    total_sum += trees_sum\n\nprint(total_sum // D)\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 2\") == \"2\"\n\n\"\"\"\n\nimport unittest\nimport unittest.mock\nimport itertools\nimport math\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n4 5') == '2'\nassert solution('3 2\\n3 4') == '2'\nassert solution('3 5\\n3 2') == '1'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2\") == \"2\"\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"6 2\") == \"2\"\nassert solution(\"10 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"2\"\n\n-----------------------"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('4 2') == '1'\nassert solution('2 1') == '1'\nassert solution('7 3') == '4'\nassert solution('10 4') == '3'\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"16\") == 'pon'\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('16') == 'pon'\nassert solution('22') == 'hon'\nassert solution('37') == 'bon'\nassert solution('99') == 'hon'\nassert solution('101') == 'hon'\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('16') == 'pon'\n\n-------------------------"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('16') == 'pon'\n\nassert solution('5') == 'bon'\n\n\"\"\"\n\n\"\"\"\n\ud83c\uddea\ud83c\uddf7 T\u00fcrk\u00e7e: \nIroha'da kulakoyu \u00c7ok s\u0131cak!\n\n\ud83c\uddf0\ud83c\uddff T\u00fcrkc\u0259: \nIrohada kulakoyu \u00e7ok \u015f\u0259\u0131rc\u0259k!\n\n\ud83c\uddf9\ud83c\uddf2 T\u00fcrkc\u0259r\u0259: \nIrohada kulakoyu \u00e7ok s\u0131rcak!\n\n\ud83c\uddfa\ud83c\uddff O\u02bbzbeklar\u0131: \nIrohada kulakoyu \u00e7ok \u015f\u0131rcak!\n\n\ud83c\uddf0\ud83c\uddec O\u02bbzbek\u0131r\u0131: \nIrohada kulakoyu \u00e7ok s\u0131rcak!\n\"\"\"\n\n\"\"\"\n\ud83c\uddea\ud83c\uddf7 T\u00fcrkc\u0259: \nIrohada kulakoyu \u00e7ok \u015f\u0131rcak!\n\n\ud83c\uddf0\ud83c\uddff T\u00fcrkc\u0259: \nIrohada kulakoyu \u00e7ok s\u0131rcak!\n\n\ud83c\uddf9\ud83c\uddf2 T\u00fcrkc\u0259r\u0259: \nIrohada kulakoyu \u00e7ok s\u0131rcak!\n\n\ud83c\uddfa\ud83c\uddff O\u02bbzbeklar\u0131: \nIrohada kulakoyu \u00e7ok \u015f\u0131rcak!\n\n\ud83c\uddf0\ud83c\uddec O\u02bbzbek\u0131r\u0131: \nIrohada kulakoyu \u00e7ok s\u0131rcak!\n\"\"\"\n\n\"\"\"\n\ud83c\uddea\ud83c\uddf7 T\u00fcrkc\u0259: \nIrohada kulakoyu \u00e7ok \u015f\u0131rcak!\n\n\ud83c\uddf0\ud83c\uddff T\u00fcrkc\u0259: \nIrohada kulakoyu \u00e7ok s\u0131rcak!\n\n\ud83c\uddf9\ud83c\uddf2 T\u00fcrkc\u0259r\u0259: \nIrohada kulakoyu \u00e7ok s\u0131rcak!\n\n\ud83c\uddfa\ud83c\uddff O\u02bbzbeklar\u0131: \nIrohada kulakoyu \u00e7ok \u015f\u0131rcak!\n\n\ud83c\uddf0\ud83c\uddec O\u02bbzbek\u0131r\u0131: \nIrohada kulakoyu \u00e7ok s\u0131rcak!\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"16\") == \"pon\"\n\n\"\"\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('16') == \"pon\"\nassert solution('321') == \"hon\"\nassert solution('901') == \"bon\"\nassert solution('1000') == \"pon\"\nassert solution('9999') == \"hon\"\n\"\"\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"13\") == \"hon\"\n\"\"\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('16') == 'pon'\nassert solution('42') == 'hon'\nassert solution('9') == 'bon'"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('16') == 'pon'\nassert solution('21') == 'hon'\nassert solution('25') == 'hon'\nassert solution('101') == 'pon'\nassert solution('123') == 'bon'\n\"\"\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"16\") == \"pon\"\nassert solution(\"4\") == \"hon\"\nassert solution(\"3\") == \"bon\"\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 3\") == \"25\"\nassert solution(\"4 1 3\") == \"14\"\nassert solution(\"5 7 3\") == \"42\"\n\"\"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('4 3 1 2') == '20'\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(sum(map(int, input().split())))\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n1 2 3''') == '11'\n\nassert solution('''5\n1 3 2 3 1''') == '20'\n\nassert solution('''4\n1 1 2 1''') == '7'\n\n\"\"\"\nThe solution is to use a two dimensional array to represent the health restored.\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1 2') == 11\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 0\nassert solution('a') == 0\nassert solution('12') == 0\nassert solution('12 34') == 0\nassert solution('123 456') == 0\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 2') == '11'\nassert solution('4 1 5') == '14'\nassert solution('6 1 7') == '24'\n\"\"\"\nfrom itertools import combinations\n\nN = int(stdin.readline())\nd = list(map(int, stdin.readline().split()))\n\nc = [d[i] * d[j] for i in range(N) for j in range(i + 1, N)]\n\nprint(sum(c))\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n3 1 2') == 11\nassert solution('2\\n3 5') == 6\nassert solution('1\\n3') == 3\n\n------Problem-----\nhttps://www.codewars.com/kata/52a3072f72482f8f1b00004a/train/python\n\"\"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n3 1 2\") == \"11\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nd_list = list(map(int, sys.stdin.readline().split()))\n\nfrom itertools import combinations\n\nres = 0\nfor (i, j) in combinations(range(N), 2):\n    res += d_list[i] * d_list[j]\n\nprint(res)\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1 2\\n\") == 11\n\"\"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n4\\n3') == '4'\nassert solution('4\\n4\\n3') == '4'\n\"\"\""
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\"\n\"\"\"\n\n\"\"\"\nThe maximum value among the three elements other than A_1, that is, A_2 = 4, A_3 = 3 and A_4 = 4, is 4.\nThe maximum value among the three elements other than A_2, that is, A_1 = 1, A_3 = 3 and A_4 = 4, is 3.\nThe maximum value among the three elements other than A_3, that is, A_1 = 1, A_2 = 4 and A_4 = 4, is 4.\n\"\"\"\n\nimport math\nfrom collections import deque"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1\\n4\\n3\") == \"4\\n3\\n4\"\n\"\"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('1\\n4\\n3') == '3'\nassert solution('3\\n1\\n4\\n3') == '4'\nassert solution('3\\n4\\n3\\n1\\n5') == '5'\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n4\\n3\\n\") == \"4\\n3\\n4\"\nassert solution(\"3\\n1\\n3\\n\") == \"4\\n3\\n4\"\n\"\"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"3\n1\n4\n3\"\"\"\n) == \"\"\"4\n3\n4\"\"\"\n\nprint(solution(stdin.strip()))"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3') == '9'\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n') == '9'\n\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"9\"\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == str\n\n-----Test-----\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\") == \"9\"\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"9\"\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n') == '9'\nassert solution('5 1\\n') == '4'\nassert solution('3 1\\n') == '3'\nassert solution('4 4\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3') == 9\n\"\"\"\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\") == 9\n\n---\nimport itertools\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\"\"\"\nimport math"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5 3\n-30 -10 10 20 50\n\"\"\") == \"40\"\n\"\"\""
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n-30 -10 10 20 50') == '40'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('-30 -10 10 20 50') == \"40\"\nprint('All tests passed.')\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n-30 -10 10 20\") == \"40\"\n\n\"\"\"\n\n\"\"\"\nSolution Approach\n\nIn a similar way to finding the number of distinct substrings, we can count the number of distinct substrings formed by the fixed number of moving left or right along the number line.\n\nWe can use the fact that, if the first candle is at position x_i, we can have the number of distinct substrings between (x_i, y_i) = n * (N - n).\n\nSince the number of distinct substrings formed by moving left or right along the line is N, the number of distinct substrings formed by moving left or right along the line must be less than or equal to N.\n\nNow, we can simply use this fact to find the minimum number of candles that need to be lit.\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\\n\") == '40'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\\n\") == \"40\"\n\n\"\"\"\n\nimport sys\nimport bisect\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n-30 -10 10 20 50\") == \"40\"\n\"\"\""
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n-30 -10 10 20 50') == '40'\n\"\"\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 13') == '2'\nassert solution('8 12') == '0'\nassert solution('8 13') == '2'\nassert solution('8 12') == '0'\nassert solution('8 14') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 13') == '2'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 13') == '2'\nassert solution('8 12') == '1'\n\nprint(solution('8 12'))\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 13\") == \"2\"\nassert solution(\"3 6\") == \"2\"\nassert solution(\"1 1\") == \"0\"\n\"\"\"\n\nimport math\n\na, b = map(int, input().split())\nsum_heights = (a * (b + a - 1)) / 2\nsum_heights = int(sum_heights)\n\nprint(sum_heights)\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 13') == '2'\n\"\"\"\n\na, b = map(int, stdin.readline().split())"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 15') == '2'\nassert solution('1 2') == '0'\nassert solution('4 5') == '0'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 13\") == \"2\"\n\"\"\"\nimport sys\n\ninput_ = sys.stdin.readlines()\n\nfor line in input_:\n    line = line.strip().split()\n    if not line[0].isdigit() or not line[1].isdigit():\n        print(\"Invalid Input!\")\n        break\n    a, b = int(line[0]), int(line[1])\n    if not 0 < a < b < 499500:\n        print(\"Invalid Input!\")\n        break"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 13\") == \"2\"\nassert solution(\"8 15\") == \"1\"\nassert solution(\"7 11\") == \"2\"\nassert solution(\"3 3\") == \"0\""
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 13') == 2\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 13') == '2'\nassert solution('8 1') == '0'\nassert solution('1 1') == '0'\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 4\\n') == '3'\nassert solution('5 4\\n') == '4'\nassert solution('100 500\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"10 4\"\n) == \"3\"\nassert solution(\n\"1 1\"\n) == \"0\"\nassert solution(\n\"1 0\"\n) == \"1\"\nassert solution(\n\"1 1\"\n) == \"1\"\nassert solution(\n\"10 8\"\n) == \"3\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 4\") == \"3\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 4\") == \"3\"\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 4\") == \"3\"\nprint(solution(\"10 4\"))\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 4') == '3'\nassert solution('15 11') == '1'\nassert solution('1 1') == '0'\nassert solution('4 2') == '2'\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(10, 4) == 3\n\"\"\"\n\nH, A = map(int, input().split())\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 4') == '3'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 4\") == \"3\"\nassert solution(\"1 1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0 75 25 100') == '50'\nassert solution('0 75 25 0') == '0'\nassert solution('75 75 75 75') == '75'\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"0 75 25 100\") == \"50\"\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\""
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 75 25 100') == '50'\n\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\""
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\nprint(solution(\"0 75 25 100\"))\n\nimport sys\n\nstdin = sys.stdin.readlines()\n\nA = int(stdin[0].strip().split()[0])\nB = int(stdin[0].strip().split()[1])\nC = int(stdin[1].strip().split()[0])\nD = int(stdin[1].strip().split()[1])\n\nprint(max(A, B) - min(C, D))"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 75 25 100') == '50'\n\"\"\""
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 75 25 100\") == \"50\"\n\"\"\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('105\\n') == '1'\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('105\\n') == '1'\n\n\"\"\"\n\n\"\"\"\n\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u044f.\n\u0415\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u0447\u0435\u0442\u043d\u043e\u0435, \u0442\u043e \u043e\u043d\u043e \u043d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0432 \u0437\u0430\u0434\u0430\u0447\u0443,\n\u0442\u0430\u043a \u043a\u0430\u043a \u0435\u0433\u043e \u043f\u043e\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u0439 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435, \u0447\u0435\u043c 8.\n\u0415\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u043d\u0435\u0447\u0435\u0442\u043d\u043e\u0435, \u0442\u043e \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u0439 \u043e\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c 8.\n\u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0447\u0435\u0442\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u043d\u0443\u0436\u043d\u043e \u0435\u0433\u043e \u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430 2.\n\u041f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0435\u0435\u0441\u044f \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c 1, \u0438\u043d\u0430\u0447\u0435 \u0447\u0438\u0441\u043b\u043e \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0447\u0435\u0442\u043d\u044b\u043c.\n\u041e\u0442\u0441\u044e\u0434\u0430 \u043e\u0442 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0431\u0443\u0434\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043a \u0441\u043f\u0438\u0441\u043a\u0443, \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043a\u0440\u0430\u0442\u043d\u043e 2.\n\u0421\u0447\u0451\u0442\u0447\u0438\u043a \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0434\u043e \u043d\u0430\u0439\u0442\u0438 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d.\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"105\") == \"1\"\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('105\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('105') == '1'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"105\") == 1\n\"\"\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('105') == 1"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"105\") == 1\nassert solution(\"2\") == 0\nassert solution(\"3\") == 1\nassert solution(\"4\") == 0\nassert solution(\"105\") == 1\n\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('105') == '1'\n\"\"\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('105') == 1\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\\n2 3\\n3 2\") == \"1\"\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\") == '1'\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 3\\n2 2 3') == '1'\n\"\"\"\nfrom math import ceil"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\") == \"1\"\n\"\"\"\n\nN, K = [int(num) for num in stdin.split(\" \")]"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\\n2 2 3\") == \"1\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3\\n2 2 3\") == 1\n\"\"\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 3') == '1'\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"1\"\n\"\"\"\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\nprint(min(n - k, k - 1))\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3\\n2 2 3') == '1'\nassert solution('4 1\\n1 2 3 4') == '0'\nassert solution('7 3\\n1 2 3 4 5 6 7') == '0'\nassert solution('7 3\\n2 3 4 5 6 7 8') == '1'\n\"\"\""
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3\\n2 2 3') == '1'\nassert solution('7 3\\n1 1 1') == '0'\nassert solution('7 3\\n2 2 2') == '0'\nassert solution('7 3\\n2 3 2') == '1'\nassert solution('7 3\\n3 2 1') == '2'\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == '2'\nassert solution('3') == ''\nassert solution('4') == ''\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('111') == '111'\nassert solution('101') == '101'\nassert solution('100') == '101'\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('111') == '111'\n\n-------\n1st submission:\nRuntime: 36 ms, faster than 55.88% of Python3 online submissions for The Earliest Announcement.\nMemory Usage: 12.8 MB, less than 100.00% of Python3 online submissions for The Earliest Announcement.\n\"\"\"\n\nimport collections\nimport itertools"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('111') == '111'\nassert solution('10') == '010'\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"111\") == \"111\""
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\""
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('111') == '111'\n\"\"\"\n\n\"\"\"\nN = input()\nn = int(N)\nwhile len(N)!= 3:\n    n += 1\n    N = str(n)\nprint(N)\n\"\"\"\n\nN = input()\nn = int(N)\nwhile len(N)!= 3:\n    n += 1\n    N = str(n)\nprint(N)"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('111') == '111'\n\"\"\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"111\") == \"111\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1000000)\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 6 3\\n') == '5'\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 6 3\") == \"5\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 1 1\") == \"0\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 6 3\") == \"5\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 6 3\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"1 6 3\\n\"\n) == \"5\"\nassert solution(\n    \"2 4 4\\n\"\n) == \"8\"\nassert solution(\n    \"1 2 4\\n\"\n) == \"7\"\n\"\"\"\n\nfrom __future__ import annotations\n\nimport sys\nfrom itertools import permutations\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\n\"\"\"\nhttps://www.geeksforgeeks.org/minimum-cost-to-make-all-the-tasks-possible/\nhttps://www.geeksforgeeks.org/minimum-cost-to-make-all-the-tasks-possible-dp-solution/\nhttps://www.geeksforgeeks.org/minimum-cost-to-make-all-the-tasks-possible-greedy-solution/\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 6 3') == '5'\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 6 3') == '5'\n\"\"\"\n\nfrom itertools import permutations"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"1 6 3\"\n) == \"5\"\n\"\"\"\nfrom typing import List\n\nfrom collections import deque"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8') == '5'\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\") == \"5\"\nassert solution(\"3\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8') == 5\n\"\"\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"4\"\nassert solution(\"8\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8') == '5'\n\"\"\"\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\") == \"5\"\n\"\"\"\n\n\"\"\"\nThe sequence a=\\{a_1,a_2,a_3,......\\} is determined as follows:\n - The first term s is given as input.\n - Let f(n) be the following function: f(n) = n/2 if n is even, and f(n) = 3n+1 if n is odd.\n - a_i = s when i = 1, and a_i = f(a_{i-1}) when i > 1.\nFind the minimum integer m such that there exists an integer n such that a_m = a_n (m > n).\n\n-----Constraints-----\n - 1 \\leq s \\leq 100\n - All values in input are integers.\n - It is guaranteed that all elements in a and the minimum m that satisfies the condition are at most 1000000.\n\n-----Input-----\nInput is given from Standard Input in the following format:\ns\n\n-----Output-----\nPrint the minimum integer m such that there exists an integer n such that a_m = a_n (m > n).\n\n-----Sample Input-----\n8\n\n-----Sample Output-----\n5\n\na=\\{8,4,2,1,4,2,1,4,2,1,......\\}. As a_5=a_2, the answer is 5.\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8') == '5'\n\n\"\"\"\n\ns = int(input())"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8') == '5'\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8') == '5'\n\"\"\""
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\") == \"5\"\nprint(solution(\"8\"))\n\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 9 10 10') == 'No'\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"10 9 0 10\") == \"Yes\"\nassert solution(\"100 100 100 100\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"10 9 5 4\") == \"No\"\nassert solution(\"100 100 1 1\") == \"No\"\nassert solution(\"100 100 1 1\") == \"No\"\nassert solution(\"100 100 100 100\") == \"Yes\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 9 10 10') == 'No'\nassert solution('10 10 10 10') == 'Yes'\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"10 9 1 10\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 9 10 10\") == \"No\"\nassert solution(\"1 1 2 2\") == \"Yes\"\nassert solution(\"100 10 10 100\") == \"No\"\nassert solution(\"100 10 1000 1000\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 9 10 10') == 'No'\n\nimport unittest\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('10 9 10 10'), 'No')"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n3\n10 2 5\n6 3 4\n\"\"\"\n) == \"5\"\n\nassert solution(\n\"\"\"\n4\n12 1 1\n2 1 1\n\"\"\"\n) == \"12\"\n\nassert solution(\n\"\"\"\n3\n5 7 8\n3 1 1\n\"\"\"\n) == \"5\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\""
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(max(int(stdin[0]), int(stdin[2])))\n\"\"\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input()) == output\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 4\\n1\\n1\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5 5 2 2\") == '6'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n10 2 5\\n6 3 4\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n10 2 5\\n6 3 4') == '5'\n\"\"\"\nfrom collections import namedtuple\nfrom typing import List, Dict, NamedTuple, Tuple, Set\n\n\nclass Solution(NamedTuple):\n    gems_count: int\n    price_for_each_gems: List[int]\n    value_for_each_gems: List[int]\n    differences: List[int]\n    differences_with_values: List[int]\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n10 2 5\n6 3 4''') == \"5\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3 4\") == \"10\"\nassert solution(\"10 2 5\") == \"5\"\n\"\"\"\n\nimport sys\nfrom typing import List, NamedTuple\nfrom collections import namedtuple\n\n\nclass Gem(NamedTuple):\n    value: int\n    cost: int\n\n\nclass Chromosome(NamedTuple):\n    gems: List[Gem]\n    cost: int\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"3 3\\n#.#\\n.#.\"\nassert solution(\"4 4\\n##.#\\n....\\n##.#\\n#.#.\") == \"3 3\\n.#\\n.#.\"\nassert solution(\"4 4\\n..#\\n..#\\n#..\\n##.\") == \"3 3\\n#.\\n.#\\n#.\"\nassert solution(\"4 4\\n#..\\n#..\\n#..\\n#.#\") == \"3 3\\n#.\\n#.\\n#.\"\nassert solution(\"4 4\\n#.#\\n#.#\\n#.#\\n#.#\") == \"3 3\\n#.\\n#.\\n#.\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2 3\n..\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"4 4\\n\"\n    \".#.#\\n\"\n    \"....\\n\"\n    \"#.##\\n\"\n    \"\") == \"###\\n###\\n.##\"\n\n\"\"\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\nassert solution(\"4 4\\n##.#\\n....\\n##.#\\n#.#.\") == \"###\\n###\\n.##\"\nassert solution(\"4 4\\n...#\\n#.#.\\n#.#.\\n.#.#\") == \"...#\\n#.#.\\n#.#.\\n.#.#\"\nassert solution(\"4 4\\n#.#.\\n#.#.\\n...#\\n#.#.\") == \"#.#.\\n#.#.\\n...#\\n#.#.\"\nassert solution(\"4 4\\n...#\\n#.#.\\n#.#.\\n#.#.\") == \"...#\\n#.#.\\n#.#.\\n#.#.\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\\n\") == \"###\\n###\\n.##\\n\"\n\"\"\"\n\nimport math\n\nH, W = [int(x) for x in stdin.split()]\nn = H + W - 1\nmax_k = math.ceil(math.log(n, 2))\n\ngrid = []\n\nfor i in range(H):\n    row = stdin.split()[1 + i]\n    if row!= \"\\n\":\n        row = list(row)\n        grid.append(row)\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(samples.txt) == samples.solution_output\n\"\"\"\n\nimport math\nimport typing"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\\n\") == \"###\\n###\\n.##\\n\"\nassert solution(\"4 4\\n##.#\\n....\\n##.#\\n#.#\\n\") == \"###\\n###\\n.##\\n\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\\n\") == \"....\\n....\\n....\\n....\\n\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\\n\") == \"....\\n....\\n....\\n....\\n\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\\n\") == \"....\\n....\\n....\\n....\\n\"\n\n----Problem----\nThe first challenge is to write a function that takes H and W as parameters and returns the number of ways in which the grid can be compressed.\n\n----Solution----\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('.#.') == '###'\nassert solution('..#') == '###'\nassert solution('...') == '###'\nassert solution('.##.') == '##.'\nassert solution('.#..') == '##.'\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n##.#\\n....\\n##.#\\n.#.#\") == \"###\\n###\\n.##\"\nassert solution(\"3 3\\n....\\n...\\n.#.\") == \"###\\n###\\n.##\"\n\"\"\"\n\nimport sys\n\nH, W = map(int, sys.stdin.readline().split())\ngrid = []\nfor i in range(H):\n    row = sys.stdin.readline().strip()\n    grid.append(row)"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n') == '6.28318530717958623200'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n') == '6.28318530717958623200'\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"6.28318530717958623200\"\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n') == '6.28318530717958623200'\nassert solution('2\\n') == '12.566370614359172953850'\n\"\"\"\n\nimport math\n\nR = float(input())"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(r'1\\n') == '6.28318530717958623200'\nassert solution(r'2\\n') == '12.566370614359172953850'\nassert solution(r'10\\n') == '62.831853071795862'\n\"\"\"\nimport math\n\nR = int(input())\nprint(2 * math.pi * R)"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n1\\n\") == \"0.0\"\nassert solution(\"1\\n2\\n\") == \"1.414214\"\nassert solution(\"1\\n3\\n\") == \"1.852174\"\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '12.566370614359172'\nassert solution('1') == '6.28318530717958623200'\nassert solution('10') == '62.831853071795862'\n'''\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n\") == \"6.28318530717958623200\"\n\"\"\""
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '6.28318530717958623200'\n\"\"\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n') == '6.28318530717958623200'\nassert solution('3\\n') == '9.424777960769389700'\nassert solution('100\\n') == '314159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127321'\nassert solution('0\\n') == '0.0'\n\"\"\"\n\nR = float(input())\n\nprint(\"{:.6f}\".format(2 * 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127321))\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\n\nsolution(\"AAABBB\") == \"No\"\n\nsolution(\"ABABBA\") == \"Yes\"\n\nsolution(\"ABABAB\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nprint(solution(\"ASSA\"))\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ASSA') == 'Yes'\nassert solution('AESS') == 'No'\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"MASS\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ASSS') == 'Yes'\nassert solution('AAAA') == 'No'\n\"\"\"\n\nimport sys\n\nsys.stdin = open('input.txt')\n\nstring = input()\n\ncount = 0\nfor i in string:\n    if i not in string[count + 1:]:\n        count += 1\n        break\n\nprint(\"Yes\" if count < len(string) else \"No\")\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\nassert solution(\"AASA\") == \"No\"\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\n\n\"\"\"\n\nimport unittest\nfrom collections import Counter"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ASSA\") == \"Yes\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ASSS') == 'Yes'\nassert solution('AABB') == 'No'\nassert solution('AAAB') == 'No'\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ASSA\") == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('-13 3') == '-10'\nassert solution('-13 -3') == '-16'\nassert solution('-13 3') == '-39'\nassert solution('-13 -3') == '-10'\nassert solution('-13 3') == '-10'\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    a, b = map(int, line.split())\n    print(-max(a+b, a-b, a*b))\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('-13 3') == '-10'\nprint('Passed')\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\"\"\"\nimport unittest\nimport sys\nimport os\nimport subprocess\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1, 2) == 3\nassert solution(3, 4) == 7\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"-13 3\") == \"0\"\n\"\"\"\n\nimport sys\n\na, b = map(int, sys.stdin.readline().strip().split())\n\nprint(-min(a + b, a - b, a * b))\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('123') == '123'\nassert solution('-123') == '-123'\nassert solution('-123123') == '-123123'\nassert solution('123-123') == '123-123'\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '3'\nassert solution('5 6') == '5'\nassert solution('1 0') == '0'\nassert solution('0 3') == '0'\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"-13 3\") == \"-10\"\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 -13\") == \"-10\"\n\"\"\"\n\nfrom operator import sub, mul"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_str) == test_res\n\n\"\"\"\n\n\"\"\"\nGiven a mountain with N summits. There are m_i mountains from east to west.\nYou have to choose m_i points from these N mountains, and put these points as the points of the inn.\nNow, there are a total of m points from the east to the west.\nEach of these m points can see the ocean if and only if:\nthere are two points from the east (from the N points) that can see the ocean, and they are from different hills.\nFor example, if you choose p_1, p_2 and p_3, then p_1 and p_3 from the same hill, or p_2 and p_3 from the same hill, can't see the ocean.\n\nFind the number of points from the east that can see the ocean.\n\n-----Constraints-----\n 1 \\leq N \\leq 20\n 1 \\leq m_i \\leq N\n 1 \\leq H_i \\leq 100\n 1 \\leq p_i \\leq N\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nm_1 m_2... m_N\n\n-----Output-----\nPrint the number of points from the east that can see the ocean.\n\n-----Sample Input-----\n5\n2 3 5 2 4\n\n-----Sample Output-----\n5\n\nYou can see the ocean from the first, fourth and fifth points from the east.\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n6 5 6 8\") == 3"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n6 5 6 8') == '3'\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\nprint(solution(\"4\\n6 5 6 8\"))\n\"\"\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n6 5 6 8\") == \"3\"\n\"\"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"3\"\nassert solution(\"4\\n2 1 3 4\") == \"1\"\nassert solution(\"4\\n6 5 6 8\") == \"3\"\n\nimport re"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 1 2 1\\n\") == \"1\\n5\\n\"\n\"\"\""
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(print())\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(r\"\"\"\n7\n1 2 3 1 2 3 4\n\"\"\") == r'2\\n3 4'\nassert solution(r\"\"\"\n7\n1 1 1 1 1 1 1\n\"\"\") == r'1\\n1 1 1 1 1 1'\nassert solution(r\"\"\"\n5\n1 2 1 2 1\n\"\"\") == r'1\\n5'\nassert solution(r\"\"\"\n5\n1 1 1 1 1\n\"\"\") == r'1\\n1 1 1 1 1'\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n1 1 1 1 2 2') == '3\\n2 2 1'\nassert solution('5\\n1 2 3 4 5') == '1\\n5'\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5\n1 2 3 4 5\n\"\"\") == \"1 2 3 4 5\"\n\nassert solution(\"\"\"\n7\n1 2 3 1 2 3 4\n\"\"\") == \"2 3 4\"\n\nassert solution(\"\"\"\n7\n1 1 1 1 1 1 1\n\"\"\") == \"1 1 1 1 1 1\"\n\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1\n1\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''7\n1 2 3 1 2 3 4''') == '2\nassert solution('''4\n1 1 1 1''') == '4\nassert solution('''5\n1 2 1 2 1''') == '3\nassert solution('''5\n1 2 1 2 1''') == '3\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n1 2 3 1 2 3 4') == '2\\n3 4'\nassert solution('4\\n1 1 1 1') == '4\\n1 1 1 1'\nassert solution('5\\n1 2 1 2 1') == '1\\n5'\nassert solution('5\\n1 2 1 2 1') == '1\\n5'\nprint('Test passed')"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\\n\") == \"2\\n3 4\\n\"\nassert solution(\"4\\n1 1 1 1\\n\") == \"4\\n1 1 1 1\\n\"\nassert solution(\"5\\n1 2 1 2 1\\n\") == \"1\\n5\\n\"\nassert solution(\"5\\n1 2 3 4 5\\n\") == \"1\\n5\\n\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1 2 3 1 2 3 4\") == '2\\n3 4'\nassert solution(\"4\\n1 1 1 1\") == '4\\n1 1 1 1'\nassert solution(\"5\\n1 2 1 2 1\") == '1\\n5'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"6\") == \"2\"\nassert solution(\"7\") == \"1\"\nassert solution(\"21\") == \"4\"\nassert solution(\"28\") == \"3\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n') == '1\\n2\\n1\\n'\nassert solution('2\\n') == '1\\n2\\n'\nassert solution('1\\n') == '1\\n'\n\n'''\n\nimport sys\nimport math"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n6\") == \"1\"\nassert solution(\"7\\n21\") == \"2\"\nassert solution(\"999999999\\n999999984\") == \"333333333\"\nassert solution(\"999999999\\n999999984\") == \"333333328\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n9\") == \"4\"\nassert solution(\"2\\n1\") == \"2\"\nassert solution(\"2\\n4\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6 6\") == \"3\"\nassert solution(\"1 1 5\") == \"1\"\nassert solution(\"7\") == \"4\"\nassert solution(\"3\") == \"2\"\nassert solution(\"9\") == \"3\"\n\"\"\""
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '1'\nassert solution('6') == '2'\nassert solution('7') == '1'\nassert solution('21') == '7'\nassert solution('28') == '4'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\") == \"1\"\nassert solution(\"6\") == \"2\"\nassert solution(\"5\") == \"1\"\nassert solution(\"21\") == \"4\"\nassert solution(\"999999999\") == \"333333333\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n'3\\n3\\n5'\n) == '1\\n2\\n2\\n'\nassert solution(\n'2\\n4\\n7'\n) == '2\\n1\\n4\\n'\nassert solution(\n'2\\n3\\n4'\n) == '1\\n2\\n3\\n'\nassert solution(\n'1\\n2\\n3'\n) == '1\\n2\\n3\\n'\nassert solution(\n'1\\n1\\n1'\n) == '1\\n1\\n1\\n'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"3\"\nassert solution(\"6\") == \"5\"\nassert solution(\"3\") == \"1\"\nassert solution(\"7\") == \"4\"\nassert solution(\"28\") == \"8\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == '1'\nassert solution('6') == '2'\nassert solution('7') == '1'\nassert solution('21') == '7'\nassert solution('28') == '4'\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('512 4') == '50'\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\nassert solution('123456789 9') == '123456789'\n\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"512 4\") == \"50\"\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"512 4\") == \"50\"\n\n\"\"\""
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('512 4') == '50'\nassert solution('1000000000 9') == '1'\nassert solution('1 2 3 4') == '1234'\n\"\"\"\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"512 4\") == \"50\"\n\"\"\"\n\nn, k = map(int, input().split())\nfor _ in range(k):\n    if n % 10 == 0:\n        n //= 10\n    else:\n        n -= 1\nprint(n)\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"512 4\") == \"50\"\nassert solution(\"1000000000 9\") == \"1\"\n\"\"\"\n\nfrom typing import List, NamedTuple\n\nclass Input(NamedTuple):\n    n: int\n    k: int\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n4 3 5 1 2 2 1') == '5\\n2 1 1 2 3'\nassert solution('5\\n4 3 5 1 2 2 1') == '5\\n2 1 1 2 3'\nassert solution('5\\n4 3 5 1 2 2 1') == '5\\n2 1 1 2 3'\nassert solution('7\\n2 2 3 2 1 2 2') == '7\\n1 2 2 2 2 3 2'\nassert solution('7\\n2 2 3 2 1 2 2') == '7\\n1 2 2 2 2 3 2'\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1') == '5\\n2 1 1 2 3'\nassert solution('5\\n3 7 5 1 5') == '2\\n5 5'\nassert solution('3\\n5 1 4') == '2\\n5 5'\nassert solution('7\\n2 2 3 2 1 2 2') == '7\\n1 2 2 2 2 3 2'\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3) == \"2 1 1 2\"\nassert solution(7) == \"5 5\"\nassert solution(5) == \"2 1 1 2 3\"\n\nassert solution(7, [4, 3, 5, 1, 2, 2, 1]) == \"5 2 1 1 2 3\"\nassert solution(5, [3, 7, 5, 1, 5]) == \"2 1 1 2 3\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1') == '5\\n2 1 1 2 3', 'Test 1'\n\nassert solution('5\\n3 7 5 1 5') == '2\\n5 5', 'Test 2'\n\nassert solution('7\\n2 2 3 2 1 2 2') == '7\\n1 2 2 2 2 3 2', 'Test 3'\n\nassert solution('5\\n5 1 4') == '2\\n4 5', 'Test 4'\n\nassert solution('7\\n1 2 2 2 2 3 2') == '7\\n1 2 2 2 2 3 2', 'Test 5'\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1') == '5\\n2 1 1 2 3'\nassert solution('5\\n3 7 5 1 5') == '2\\n5 5'\nassert solution('3\\n5 1 4') == '2\\n4 5'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 5 1 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"7 5 4\") == \"2\\n5 5\"\nassert solution(\"3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"7 5 4\") == \"2\\n5 5\"\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\narr.sort()\n\nres = 1\nres_arr = [arr[0]]\n\nfor i in range(1, n):\n    if abs(res_arr[-1] - arr[i]) <= 1:\n        res_arr.append(arr[i])\n        res += 1\n\nprint(res)\nprint(' '.join(map(str, res_arr)))\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"7\n4 3 5 1 2 2 1\n\"\"\") == '5', 'error1'\nassert solution(\"\"\"5\n3 7 5 1 5\n\"\"\") == '2 1 1 2 3', 'error2'\nassert solution(\"\"\"5\n5 1 4\n\"\"\") == '2 4 5', 'error3'\nassert solution(\"\"\"7\n2 2 3 2 1 2 2\n\"\"\") == '7', 'error4'\nassert solution(\"\"\"5\n2 2 3 2 1 2 2\n\"\"\") == '7', 'error5'\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n4 3 5 1 2 2 1\") == \"5\\n2 1 1 2 3\"\nassert solution(\"5\\n3 7 5 1 5\") == \"2\\n5 5\"\nassert solution(\"3\\n5 1 4\") == \"2\\n4 5\"\nassert solution(\"7\\n2 2 3 2 1 2 2\") == \"7\\n1 2 2 2 2 3 2\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7\\n4 3 5 1 2 2 2 1') == '5\\n2 1 1 2 3'\nassert solution('5\\n3 7 5 1 5') == '2\\n5 5'\nassert solution('3\\n5 1 4') == '2\\n4 5'"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3 5 1 2 2 1\\n') == '5\\n2 1 1 2 3'\nassert solution('7 5 4\\n') == '2\\n5 5'\n\nassert solution('3 7 5 1 5\\n') == '2\\n5 5'\nassert solution('5 1 4\\n') == '2\\n4 5'\n\nassert solution('7\\n5 5') == '2\\n5 5'\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"-1\"\n\"\"\"\n\nn, m = map(int, input().split())\narr = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    arr.append([a, b])\n\nmin_val = m\nfor i in range(n):\n    min_val = min(min_val, arr[i][0])\n    for j in range(i + 1, n):\n        min_val = min(min_val, arr[i][0] + arr[j][0])"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == '2'\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == '-1'\nassert solution(\"1 1\\n100 100\") == '1'\nassert solution(\"3 2\\n1 1\\n5 1\") == '-1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"1\"\nassert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '-1'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '2'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '-1'"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 21\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"2\"\nassert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\\n\") == \"-\"\n\n\"\"\"\nfrom sys import stdin\n\nS = list(map(int, stdin.readline().split()))\nM = int(stdin.readline())"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 21\\n10 8\\n7 4\\n3 1\\n5 4') == '2'\nassert solution('4 16\\n10 8\\n7 4\\n3 1\\n5 4') == '-1'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 16\\n10 8\\n7 4\\n3 1\\n5 4\") == \"2\"\n\"\"\"\n\na, b = map(int, input().split())\n\nn = 0\nsum = 0\nm = b\nwhile True:\n    if sum + a <= m:\n        sum += a\n        n += 1\n    else:\n        break\n    a = max(a, b)\n\nprint(n) if sum < m else print(\"-1\")\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\n\"\"\""
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 5 3\\n6 1 1\\n6 6 1\\n5 2 2') == 'tleelte\\nqwerty\\nvvvvvv\\nabcde'\n\"\"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\\n\") == \"tleelte\\nqwerty\\nvvvvvv\\nabcde\""
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 5 3\\n6 1 1\\n6 6 1\\n5 2 2') == 'tleelte\\nqwerty\\nvvvvvv\\nabcde'\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\") == \"tleelte\\nqwerty\\nvvvvvv\\nabcde\"\n\n\"\"\""
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5 3\") == \"tleelte\"\n\n-----Problem-----\n\nhttps://www.codewars.com/kata/54edbc7200b6fcec2f0000c8\n\"\"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5 3\") == \"tleel\"\n\n\"\"\"\n\nfrom typing import List, Tuple, Union, Dict, Set\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 5 3') == 'tleel'\nassert solution('6 1 1') == 'qwerty'\nassert solution('6 6 1') == 'vvvvvv'\nassert solution('5 2 2') == 'abcde'\n\n\"\"\""
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5 3\") == \"tleel\"\nassert solution(\"6 1 1\") == \"qwerty\"\nassert solution(\"6 6 1\") == \"vvvvvv\"\nassert solution(\"5 2 2\") == \"abcde\"\n\"\"\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 12 6\") == \"12\"\nassert solution(\"50 5 2\") == \"4\"\nassert solution(\"10 5 3\") == \"2\"\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('4 7 2') == '1'\nassert solution('3 5 1') == '5'\nassert solution('20 15 3') == '12'\n\n\"\"\"\n\nimport os\nfrom typing import List\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    # Time: O(T)\n    # Space: O(1)\n    def solution(self, input: str) -> str:\n        n, x, t = [int(n) for n in input.split(' ')]\n        minutes = 0\n        for minute in range(1, t + 1):\n            minutes += x\n            if minutes >= n:\n                return str(minute)\n\n        return 'impossible'"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20 12 6\\n') == 12\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 12 6\") == \"12\"\nprint(solution(\"20 12 6\"))\n\nfrom collections import defaultdict"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('20 12 6') == '12'\n\"\"\""
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20 12 6\\n') == 12\n\"\"\"\n\nfrom math import ceil\n\ninput()\n\nx = int(input())\nt = int(input())\n\nprint(ceil((x / (x + t)) * t))\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'20 12 6'\n) == '12'\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 12 6\") == \"12\"\n\"\"\"\n\n\nfrom typing import List\nfrom math import ceil, floor, gcd\nimport os, sys\n\nDEBUG = False\ndata = open(sys.argv[1]).read().split()\n\nN, X, T = data\nN, X, T = int(N), int(X), int(T)"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2\\n5') == '3'\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\") == \"2\"\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n') == 2\n\"\"\"\n\nfrom math import floor\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\") == \"2\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\") == \"2\"\nprint(\"Success!\")\n\"\"\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"10\") == \"2\"\nassert solution(\"8\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n') == 2\n\"\"\"\n\nN = int(input())\n\ngroups = 0\nstudents = 0\n\nwhile N >= 3:\n    groups += 1\n    students += N\n    N -= 2\n\nprint(groups)\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 1\nassert solution('12') == 1\nassert solution('123') == 2\nassert solution('1234') == 1\nassert solution('12345') == 1\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2') == '2'\nassert solution('1') == '1'\nassert solution('8') == '2'\nassert solution('7') == '1'\nassert solution('6') == '1'\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == \"3\"\n\n---Tests---"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3') == 3\nassert solution('5 5') == 1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4') == '6'\nassert solution('1 1\\n2 2') == '2'\nassert solution('1 3\\n3 4') == '3'\nassert solution('1 3\\n3 5') == '3'\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 3') == '3'\nassert solution('10 2') == '8'\n\nimport io, pytest\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == \"3\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"4 100\") == \"6\"\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"3\"\nassert solution(\"7 10\") == \"3\"\nassert solution(\"10 10\") == \"1\"\nassert solution(\"12 13\") == \"0\"\nassert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3\\n') == '3'\nassert solution('2 2\\n') == '2'\nassert solution('1 1\\n') == '1'\n\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''1 3\n''') == \"3\"\n\nsolution(''''1 3\n''')\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 12') == '16'\nassert solution('15 16') == '1'\nassert solution('1 1') == '0'\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == expected_result_1\nassert solution(test_input_2) == expected_result_2\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 12\\n') == '16'\nassert solution('4 4\\n') == '0'\n\"\"\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 12') == '16'\nassert solution('5 10') == '5'\nassert solution('1 1') == '0'\nassert solution('1 1') == '0'\nassert solution('1 2') == '0'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 12') == '16'\nassert solution('4 15') == '3'\n\n----\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 12') == '16'\nassert solution('2 2') == '0'\n\"\"\"\n\nA, B = [int(input()) for i in range(2)]"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 12\") == \"16\"\nassert solution(\"6 10\") == \"6\"\nassert solution(\"2 8\") == \"0\"\n\n\"\"\"\n\nA, B = input().split()\nA = int(A)\nB = int(B)"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 12\") == '16'\n\"\"\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 12\") == \"16\"\n\"\"\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 12\") == \"16\"\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\n\n\"\"\"\n\nfrom typing import List, Set\n\nS, T = input().strip().split(\"\\n\")\nS = S.strip()\nT = T.strip()"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\nassert solution(\"chokudais\") == \"No\"\nassert solution(\"z\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\n\n-------"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'No'\n\n\"\"\"\n\nS = input()\nT = input()"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\nassert solution(\"chokudai\") == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('chokudai') == 'Yes'\nassert solution('chokudaiz') == 'Yes'\n\n\"\"\"\n\nfrom collections import Counter\nimport re"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"abcdefg\") == \"No\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"chokudai\") == \"Yes\"\nassert solution(\"chokudaiz\") == \"Yes\"\nassert solution(\"muzi\") == \"No\"\nassert solution(\"abcdefg\") == \"No\"\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 16\") == \"9\"\n\"\"\"\n\nimport sys\n\nT, A, B = [int(x) for x in sys.stdin.readline().split()]\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 16') == '9'\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 16') == '9'\nassert solution('10 100') == '0'\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 16\") == \"9\"\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 16\\n\") == '9'\n\"\"\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(solution(input()))\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 16\\n\") == \"9\"\n\"\"\"\n\n\"\"\"\nGiven two distinct integers A and B. Print the integer K such that |A - K| = |B - K|.\nIf such an integer does not exist, print IMPOSSIBLE instead.\n\n-----Constraints-----\n - All values in input are integers.\n - 0 \\leq A,\\ B \\leq 10^9\n - A and B are distinct.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nPrint the integer K such that |A - K| = |B - K|.\nIf such an integer does not exist, print IMPOSSIBLE instead.\n\n-----Sample Input-----\n2 16\n\n-----Sample Output-----\n9\n\n|2 - 9| = 7 and |16 - 9| = 7, so 9 satisfies the condition.\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 16') == '9'\n\n\"\"\"\n\nimport math\n\na, b = map(int, input().split())"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 16') == '9'\n\"\"\""
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 16') == '9'\nassert solution('2 10') == 'IMPOSSIBLE'\nassert solution('7 4') == '3'\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('117') == 'Yes'\nassert solution('3') == 'No'\nassert solution('1') == 'Yes'\nassert solution('7') == 'Yes'\nassert solution('5') == 'No'\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('117') == 'Yes'\nassert solution('213') == 'No'\nassert solution('637') == 'No'"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"117\"\n) == \"Yes\"\nassert solution(\n    \"3\"\n) == \"No\"\nassert solution(\n    \"123\"\n) == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('123') == 'No'\nassert solution('7') == 'Yes'\nassert solution('01') == 'No'\nassert solution('07') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('117') == 'Yes'\n\"\"\"\n\nN = stdin\nprint(\"Yes\" if int(N) % 10 == 7 else \"No\")\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"117\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('117') == 'Yes'\nprint(solution('117'))\n\"\"\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('117') == 'Yes'\nassert solution('1234') == 'No'\n\n\"\"\"\n\nn = input()"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"17\") == \"No\"\nassert solution(\"117\") == \"Yes\"\n\"\"\"\n\nimport unittest\nfrom math import log10, floor\n\nfrom stdin import stdin\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('117') == 'Yes'\nassert solution('256') == 'No'\n\"\"\"\n\nn = input()"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('12') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12\\n\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12') == 'Yes'\nassert solution('101') == 'Yes'"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12\") == 'Yes'\nassert solution(\"101\") == 'No'\n\"\"\"\n\n\"\"\"\nLet S(n) denote the sum of the digits in the decimal notation of n.\nFor example, S(101) = 1 + 0 + 1 = 2.\nGiven an integer N, determine if S(N) divides N.\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nIf S(N) divides N, print Yes; if it does not, print No.\n\n-----Sample Input-----\n12\n\n-----Sample Output-----\nYes\n\nIn this input, N=12.\nAs S(12) = 1 + 2 = 3, S(N) divides N.\n\"\"\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101\") == \"Yes\"\nassert solution(\"12\") == \"Yes\"\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12') == 'Yes'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12') == 'Yes'\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(101) == \"Yes\"\nassert solution(12) == \"Yes\"\nassert solution(11) == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\"\n\nfrom sys import stdin\nfrom math import sqrt"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''0 0 0 1''') == '-1 1 -1 0'\nassert solution('''0 0 0 1''') == '-1 1 -1 0'\nassert solution('''1 0 0 1''') == '-1 1 0 1'\nassert solution('''0 0 1 0''') == '-1 1 1 0'\nassert solution('''1 0 0 1''') == '0 -1 1 1'\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n0 0 0 1\n\"\"\") == \"-1 1 -1 0\"\nassert solution(\n\"\"\"\n0 0 0 1\n\"\"\") == \"-1 1 -1 0\"\nassert solution(\n\"\"\"\n0 0 0 1\n\"\"\") == \"-1 1 -1 0\"\nassert solution(\n\"\"\"\n0 0 0 1\n\"\"\") == \"-1 1 -1 0\"\nassert solution(\n\"\"\"\n0 0 0 1\n\"\"\") == \"-1 1 -1 0\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('0 0 0 1') == '1 1 -1 0'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\"\"\""
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 0 1\") == \"1 1 -1 0\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nx1, y1, x2, y2 = map(int, input().split())\nx3, y3, x4, y4 = x2, y2, x1, y1"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 0 0 1') == '-1 1 -1 0'\n\n---"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 0 1\") == \"-1 1 -1 0\"\n\nimport os, sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"0 0 0 1\"\"\"\n        output = \"\"\"1 1 -1 0\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"1 1 1 1\"\"\"\n        output = \"\"\"0 0 0 1\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"2 2 2 3\"\"\"\n        output = \"\"\"1 2 1 3\"\"\"\n        self.assertIO(input, output)\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"red blue\") == \"2 4\"\nassert solution(\"blue\") == \"1\"\n\"\"\"\n\nS, T = input().split()\nA, B = map(int, input().split())\nU = input()\nprint(A - (S.count(U) + T.count(U)), B - (S.count(U) + T.count(U)))\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('red blue') == '2 4'\nprint('Success')"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n\nS, T = input().split()\nA, B = [int(i) for i in input().split()]\nU = input()\n\nprint(A - (S.count(U) - T.count(U)), B - (T.count(U) - S.count(U)))\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('red blue') == '2 4'\n\"\"\"\n\nS, T = input().split()\nA, B = [int(i) for i in input().split()]\nprint(A + B - (A + B) % 2)\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"red blue\") == \"2 4\""
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('red blue') == '2 4'\n\n\"\"\"\n\n\"\"\"\nSolution 1\nS = {S}\nT = {T}\nU = {U}\n\nA = {A}\nB = {B}\n\nn_S = S.pop()\nn_T = T.pop()\n\nassert len(S) == len(T)\nassert len(S) == 1\nassert S == {U}\nassert T == {U}\n\nA = A - {S}\nA = A - {T}\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''red blue\n3 4\nred''') == '2 4'\nassert solution('''red blue\n1 2\nblue''') == '0 2'\nassert solution('''red blue\n2 2\nred''') == '1 0'\nassert solution('''red blue\n2 1\nred''') == '0 1'\nassert solution('''red blue\n2 1\nblue''') == '1 0'\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\"\"\"\n\nS, T = input().split()\nA, B = input().split()\nS, T = int(S), int(T)\nA, B = int(A), int(B)\nU = input()\n\nprint(\"{} {}\".format(S - A + T - B, B + S - A))\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"red blue\") == \"2 4\"\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.read()\nlines = stdin.split('\\n')\n\nfor i in range(2):\n    lines[i] = lines[i].split()\n\nS = lines[0][0]\nT = lines[0][1]\nA = int(lines[1][0])\nB = int(lines[1][1])\n\nprint(A * S.count(S) + B * T.count(T))"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abcabcc') == 'No'"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abcabc\") == \"Yes\"\nassert solution(\"abc\") == \"Yes\"\nassert solution(\"abcabcab\") == \"Yes\"\nassert solution(\"abccba\") == \"No\"\nassert solution(\"abcabcabc\") == \"Yes\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str_test) == 'Yes'\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abcabc') == 'Yes'\n\"\"\"\n\n\"\"\"\n-------------\n|T| = 5\n|S| = 6\n-------------\nabcabc\n\n\"\"\""
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abcabc') == 'Yes'\nassert solution('abcabcbab') == 'No'\nassert solution('abcabcbabc') == 'Yes'\nassert solution('abcabcbabcde') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == \"Yes\"\nassert solution(\"a\") == \"Yes\"\nassert solution(\"aa\") == \"Yes\"\nassert solution(\"ab\") == \"No\"\nassert solution(\"ba\") == \"Yes\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'No'\nassert solution('ab') == 'Yes'\nassert solution('a') == 'No'\nassert solution('aba') == 'Yes'\nassert solution('abcabc') == 'Yes'\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(T) == \"Yes\"\n\"\"\"\n\nn = int(stdin.readline().rstrip())\ns = stdin.readline().rstrip()\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'No'\nassert solution('ab') == 'Yes'\nassert solution('aa') == 'Yes'\nassert solution('abb') == 'Yes'\nassert solution('abab') == 'No'\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"abcabc\"\n) == \"Yes\"\nassert solution(\n    \"abababab\"\n) == \"Yes\"\nassert solution(\n    \"abaababab\"\n) == \"Yes\"\nassert solution(\n    \"abababab\"\n) == \"No\"\nassert solution(\n    \"ababababab\"\n) == \"Yes\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2 3 4') == '1.0 1'\nassert solution('4 4 4 4') == '0.0 1'\nassert solution('1 0 5 5') == '0.5 1'\nassert solution('1 0 1 1') == '0.5 0'\nassert solution('2 2 1 1') == '1.0 0'\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n2 3 1 2\n\"\"\") == \"3.000000 0\"\n\nassert solution(\n\"\"\"\n10 100 4 10\n\"\"\") == \"23.291666 6\"\n\nassert solution(\n\"\"\"\n0 1 1 0\n\"\"\") == \"1.000000 1\"\n\nassert solution(\n\"\"\"\n0 1 1 0\n\"\"\") == \"1.000000 1\"\n\nassert solution(\n\"\"\"\n1 1 1 0\n\"\"\") == \"1.000000 1\""
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\nassert solution('4 5 1 3') == '5.241379 0'\nassert solution('3 5 3 3') == '6.000000 1'\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3 1 2') == '3.0 0'\n\"\"\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\n\"\"\""
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3 2 1') == '0', 'wrong area, when the optimal line cuts the bottom part to make the area larger'\nassert solution('3 2 1 1') == '1', 'wrong area, when there is only one way to cut the rectangle to make the area larger'\nassert solution('2 1 1 2') == '1', 'wrong area, when there is only one way to cut the rectangle to make the area larger'\n\"\"\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\nassert solution('4 3 6 1') == '5.000000 0'\nassert solution('4 5 2 4') == '4.000000 2'\n\n\"\"\"\nimport math\nimport unittest\n\n\nclass Solution:\n    def solution(self, stdin):\n        W, H, x, y = list(map(int, stdin.split()))\n        l, r = min(x, y), max(x, y)\n        r = max(r, min(W, H - y))\n        l = max(l, min(x, H - y))\n        if (W - x) * (H - y) <= (W - x) * l + (H - y) * r:\n            return r * (H - y)\n        else:\n            return W * l\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution()\n        return super().setUp()\n\n    def testSolution(self):\n        assert self.solution('2 3 1 2') == '3.000000 0'\n        assert self.solution('4 3 6 1') == '5.000000 0'\n        "
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"./tests/test_3.txt\") == \"0.000000 1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 1 2') == '3.000000 0'\n\nprint(solution('2 3 1 2'))\n\nprint(solution('2 3 1 2') == '3.000000 0')\n\n------Solution-------\n\nx,y,w,h=map(int,stdin.split())\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 1 2\\n\") == \"3.0 0\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 G W Y P Y W\") == \"Four\"\n\"\"\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nW\\nG\\nG\\nG\\nG\\nG\") == \"Four\"\n\"\"\"\n\n\"\"\"\nWrite the code for the following steps:\n\nSTEP 1:\n    Given an input line that is three integers, n, m and k, representing the number of arare, the number of white, and the number of green, respectively,\n    print \"Three\" if the bag contains the arare in three colors, or \"Four\" if the bag contains the arare in four colors.\n\nSTEP 2:\n    Given an input line that is n characters representing the colors of the arare, where the ith character is S_i, where S_i is P, W, G or Y, print \"Three\" if the bag contains the arare in three colors, or \"Four\" if the bag contains the arare in four colors.\n\n-----Constraints-----\n - n, m and k are integers in the range [0, 100].\n - There always exist i, j and k such that S_i=P, S_j=W and S_k=G.\n\n-----Input-----\nInput is given from Standard Input in the following format:\n3\nG\nG\nW\n\n-----Output-----\nThe bag contained arare in three colors, so you should print \"Three\".\n\"\"\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 G W Y P Y W') == 'Four'\nassert solution('2 G W Y P Y W') == 'Three'\nassert solution('1 W Y P Y W') == 'Four'\nassert solution('1 G W Y P Y W') == 'Four'\nassert solution('0 G W Y P Y W') == 'Four'\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"G W Y P Y W\") == \"Four\"\nassert solution(\"G W Y P Y G W\") == \"Three\"\nassert solution(\"G W Y P P W G W G W G W P Y P P\") == \"Four\"\nassert solution(\"G W G W W P Y Y P G W P P\") == \"Four\"\nassert solution(\"G W G W W P Y P G W P P P P P W G W G W G W P Y Y P G W P P P P P W G W P P P P P P P G W G W W W P Y P Y P\") == \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n5\nP P P W W\n''') == 'Three'\nassert solution('''\n10\nP P P W G Y\n''') == 'Four'\nassert solution('''\n1\nW\n''') == 'Four'\nassert solution('''\n6\nG G G Y P W\n''') == 'Four'\nassert solution('''\n6\nW Y Y G G\n''') == 'Four'\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\nG W Y P Y W''') == 'Four'\nassert solution('''4\nG W Y P Y W''') == 'Three'\n\"\"\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\nG W Y P Y W\") == \"Four\"\n\"\"\"\n\nimport unittest\n\n\nclass Test(unittest.TestCase):\n\n    def setUp(self) -> None:\n        self.expected_output = {\n            \"3\": \"Three\",\n            \"4\": \"Four\",\n        }\n\n    def test_solution(self):\n        for input_, expected_output in self.expected_output.items():\n            self.assertEqual(solution(input_), expected_output)\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"G W Y P Y W\") == \"Four\"\n\"\"\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\nG W Y P Y') == 'Four'\nassert solution('3\\nP W G') == 'Three'\n\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 G W P Y') == 'Four'\n\n-----Test Case-----\nInput:\n5\nW G G W P\n\nOutput:\nFour\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - S_i is P, W, G or Y.\n - There always exist i, j and k such that S_i=P, S_j=W and S_k=G.\n\"\"\""
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 3\\n1 2 6 10 3\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 3\\n1 2 6 10 3\\n') == 2\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 3\\n1 2 6 10 3\") == 2\nassert solution(\"6 3 2\\n2 3 1 3 4 2\") == 6\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 3\\n1 2 6 10 3\") == 2\nassert solution(\"6 3 2\\n2 3 1 3 4 2\") == 6\n\"\"\"\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 3\\n1 2 6 10 3\") == \"2\"\n\n'''\n\nfrom collections import defaultdict"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 3\\n1 2 6 10 3\\n') == '2'\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3 1 3 4 2') == '6'\nassert solution('5 3 3') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 2\\n1 2 3 4\") == \"6\"\nassert solution(\"5 3 3\\n1 2 4 2 3\") == \"2\"\nassert solution(\"5 5 6\\n1 2 6 10 3\") == \"2\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 3 2\\n2 3 1 3 4 2') == '6'\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 3 1 3 4 2\") == \"6\"\nassert solution(\"5 3 3\") == \"2\"\nassert solution(\"5 5 6\") == \"2\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4 2 6 2') == '7'\nassert solution('4 5 4 1 3') == '0'\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4 2 6 2\") == \"7\"\nassert solution(\"4 8 2 6 2\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8 2 6 2\\n4 5 4 1 3\") == \"7\"\n\"\"\""
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n4 8 2 6 2\\n4 5 4 1 3\") == '7'\nprint(solution(\"5\\n4 8 2 6 2\\n4 5 4 1 3\"))\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10000)"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 8 2 6 2\") == 7\n\"\"\""
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 8 2 6 2') == '7'\n\"\"\""
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''5\n4 8 2 6 2\n4 5 4 1 3''') == '7'\nassert solution('''4\n1 3 2 4\n1 3 2 4''') == '0'\n\"\"\""
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8 2 6 2\\n4 5 4 1 3\") == \"7\"\n\n\"\"\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 8 2 6 2\") == \"7\"\nassert solution(\"4 5 4 1 3\") == \"0\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin), end='')"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 4 5 10') == '1 1 3 5 9'\nassert solution('10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000') == '9999 9 50605065 1 5 89 5 999999999 60506055 999999999'\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 2 4 5 10\") == \"1 1 3 5 9\"\n\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\", \"1 2 3 4 5\") == \"1 1 3 4 5\"\nassert solution(\"10\", \"1 2 3 4 5\") == \"1 1 3 4 5\"\nassert solution(\"10\", \"1 2 3 4 5\") == \"1 1 3 4 5\"\nassert solution(\"10\", \"1 2 3 4 5\") == \"1 1 3 4 5\"\n\"\"\"\n\nn = int(input())\na = [int(i) for i in input().split()]\nb = []\n\nfor i in range(1, 10**9 + 1):\n    b.append(i)\n    if i % 2 == 1:\n        b[i] = i + 1\n    elif i % 2 == 0:\n        b[i] = i - 1\nprint(*b[:n])\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\nassert solution(\"10\\n10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\") == \"9999 9 50605065 1 5 89 5 999999999 60506055 999999999\"\n\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10000 10 50605065 1 5 89 5 999999999 60506056 1000000000') == '9999 9 50605065 1 5 89 5 999999999 60506055 999999999'\n\"\"\"\n\n\nimport collections\n\n\nclass BinaryIndexedTree:\n    def __init__(self, n):\n        self.bit = [0] * (n + 1)\n\n    def build(self, array):\n        for i, x in enumerate(array):\n            self.update(i + 1, x)\n\n    def update(self, i, x):\n        while i <= len(self.bit):\n            self.bit[i] += x\n            i += i & -i\n\n    def sum(self, i):\n        s = 0\n        while i:\n            s += self.bit[i]\n            i -= i & -i\n        return s\n\n\nclass Solution:\n    def solve(self, a):\n        res = []\n        n = len(a)\n        bit = BinaryIndexedTree(n)\n        bit.build(a)\n        for i in range(1, n + 1):\n            res.append(bit.sum(i))\n\n        return res\n\n\nsolution = Solution().solve\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\"\"\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\") == \"2\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 4\\n1 2\\n3 4\\n5 4\\n3 5') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\\n17 6\") == \"2\"\n\n\"\"\"\n\n\"\"\"\n1. find the number of connected components. \n2. calculate the number of vertices in each component\n3. if number of vertices in each component is greater than 2, the number of components is greater than 2.\n4. use the idea of the graph to find the number of components.\n\"\"\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 4\\n1 2\\n3 4\\n5 4\\n3 5') == '1'\nassert solution('17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4') == '2'"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\n\n\"\"\"\n\n\n\nimport sys\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"5 5\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\\n3 5\\n4 5\") == \"2\"\nassert solution(\"5 3\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\\n3 5\\n4 5\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\") == \"1\"\nassert solution(\"17 15\\n1 8\\n1 12\\n5 11\\n11 9\\n9 15\\n15 5\\n4 13\\n3 13\\n4 3\\n10 16\\n7 10\\n16 7\\n14 3\\n14 4\") == \"2\"\n\n\n\n-----Debug-----\n\nPaste input and output below\n\n\"\"\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n1 2\\n3 4\\n5 4\\n3 5\\n\") == \"1\"\n\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n2 4\\n2 5') == '1'\nassert solution('5\\n2 0 0 0 2\\n1 2\\n2 3\\n2 4\\n2 5') == '4'\nassert solution('3\\n1 1 2\\n2 3\\n1 3') == '0'\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\\n\") == '1', \"error\"\n\"\"\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 0 0 1 2\") == \"1\"\nassert solution(\"1 0 0 0 2\") == \"4\"\nassert solution(\"3 1 1 2\") == \"0\"\nassert solution(\"3 1 2\") == \"0\"\nassert solution(\"5 2 1 3 4\") == \"4\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n5\n2 0 0 1 2\n1 2\n2 3\n2 4\n2 5\n''') == '1'\nassert solution('''\n5\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n''') == '4'\nassert solution('''\n3\n1 1 2\n2 3\n1 3\n''') == '0'"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\\n') == '1'\nassert solution('5\\n2 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '4'\nassert solution('5\\n1 1 2\\n2 3\\n1 3\\n') == '0'\nassert solution('5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n') == '4'\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\") == 1\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\") == 4\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == 0\n\"\"\""
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\\n\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\\n\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\\n\") == \"0\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 0 0 1 2\\n1 2\\n2 3\\n2 4\\n2 5\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\n\"\"\"\n\nclass Node(object):\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n    def __repr__(self):\n        return f\"Node({self.val})\""
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n0 1\\n1 2\") == \"1\"\nassert solution(\"5\\n1 0 0 0 2\\n1 2\\n2 3\\n3 4\\n4 5\") == \"4\"\nassert solution(\"3\\n1 1 2\\n2 3\\n1 3\") == \"0\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"nijfvj\") == \"qvhwp\"\nassert solution(\"tvqhwp\") == \"qoztvz\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"nijfvj\") == \"qoztvz\"\nassert solution(\"asdji\") == \"alvuw\"\nassert solution(\"tvqhwp\") == \"qoztvz\"\n\n\"\"\"\n\nimport string"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('az') == 'ba'\nassert solution('bf') == 'bc'\nassert solution('abc') == 'abd'\nassert solution('ahgj') == 'afhg'\nassert solution('abcd') == 'abdh'\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\nassert solution('f') == 'f'\n\nassert solution('a') == 'a'\n\nassert solution('fjk') == 'fjk'\n\nassert solution('fjkv') == 'fjkv'"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bf\"\nassert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\n\nassert solution(\"vjgajs\") == \"gfhr\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"qoztvz\"\n\"\"\"\n\nimport sys\nimport statistics\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"az\") == \"bc\"\nassert solution(\"bf\") == \"bc\"\nassert solution(\"afogk\") == \"alvuw\"\nassert solution(\"asdji\") == \"alvuw\"\nassert solution(\"nijfvj\") == \"qoztvz\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abcfghijk\") == \"fhijk\"\nassert solution(\"abfijl\") == \"ij\"\n\"\"\""
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abcd\") == \"abcd\"\nassert solution(\"abd\") == \"bd\"\nassert solution(\"ab\") == \"ab\"\nassert solution(\"aa\") == \"a\"\nassert solution(\"a\") == \"a\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\\n\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\\n\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\\n\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\\n\") == \"YES\\n1 2 5\\n\"\nassert solution(\"5 4\\n15 13 15 15 12\\n\") == \"NO\\n\"\nassert solution(\"4 4\\n20 10 40 30\\n\") == \"YES\\n1 2 3 4\\n\"\nassert solution(\"3 3\\n2 2 3\\n\") == \"YES\\n1 2\\n\"\nassert solution(\"3 3\\n2 2 3\\n\") == \"NO\\n\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\"\n\"\"\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\\n\") == \"YES\\n1 2 5\"\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'NO'\nassert solution('\\n') == 'NO'\nassert solution('\\n\\n') == 'NO'\n\nassert solution('1\\n') == 'YES'\nassert solution('1\\n2\\n') == 'YES'\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n15 13 15 15 12') == 'YES\\n1 2 5'\nassert solution('5 4\\n15 13 15 15 12') == 'NO'\nassert solution('4 4\\n20 10 40 30') == 'YES\\n1 2 3 4'\nassert solution('1 1\\n1 1') == 'NO'\nassert solution('2 2\\n3 3') == 'YES\\n1 1'\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\nassert solution(\"4 4\\n20 10 40 30\") == \"YES\\n1 2 3 4\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n15 13 15 15 12\") == \"YES\\n1 2 5\"\nassert solution(\"5 4\\n15 13 15 15 12\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"15 13 15 15 12\") == \"NO\"\nassert solution(\"20 10 40 30\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3\\n15 13 15 15 12') == 'YES\\n1 2 5'\nassert solution('4 4\\n20 10 40 30') == 'YES\\n1 2 3 4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 9 3 8 2 4 5\") == \"YES\\n2 0 0 1 0 0 1 1\"\nassert solution(\"9 8 7 6 5 4 3 2 1\") == \"YES\\n2 1 1 1 1 1 0 1 1\"\nassert solution(\"10 4 2 5 1 8 6 7 3 9\") == \"YES\\n2 1 1 1 1 0 1 1 1\"\nassert solution(\"6 4 5 1 3 2 7 8\") == \"YES\\n1 1 1 1 1 0 1 0 1\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"9\\n4 1 3 6 8 2 9 0 10\") == \"NO\""
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''9\n5 1 3 6 8 2 9 0 10''') == 'YES\\n1 0 0 0 0 1 0 1 0'\n\nassert solution('''5\n1 2 4 0 2''') == 'NO\\n'\n\nassert solution('''5\n1 2 3 0 3''') == 'NO\\n'\n\nassert solution('''9\n5 1 3 6 8 2 9 0 10''') == 'YES\\n1 0 0 0 0 1 0 1 0'\n\nassert solution('''5\n1 2 4 0 2''') == 'NO\\n'"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 4 10 9 9\") == \"NO\"\nassert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\"\nassert solution(\"3 1 3 2\") == \"NO\"\nassert solution(\"3 1 3 2 5 6 4 7\") == \"YES\"\nassert solution(\"3 1 3 2 5 6 4 7 9\") == \"YES\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"6\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 1 1 0 1\"\nassert solution(\"5\\n5 1 3 6 8 2 9 0 10\") == \"NO\"\n\nassert solution(\"7\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 1 1 0 1\"\n\nassert solution(\"10\\n5 1 3 6 8 2 9 0 10\") == \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\n\nassert solution(\"1 2 4 0 2\") == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == 'YES\\n1 0 0 0 0 1 0 1 0'\n\n\"\"\""
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"6\\n5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\n\n\"\"\""
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9\\n5 1 3 6 8 2 9 0 10') == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution('9\\n5 1 3 6 8 2 9 0 10') == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution('9\\n5 1 3 6 8 2 9 0 10') == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution('9\\n5 1 3 6 8 2 9 0 10') == 'YES\\n1 0 0 0 0 1 0 1 0'\nassert solution('9\\n5 1 3 6 8 2 9 0 10') == 'YES\\n1 0 0 0 0 1 0 1 0'\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 3 6 8 2 9 0 10\") == \"YES\\n1 0 0 0 0 1 0 1 0\"\nassert solution(\"10 10 0 10 10 0 10 0 10\") == \"NO\"\nassert solution(\"1 2 4 3 2 1\") == \"NO\"\nassert solution(\"1 2 4 5 6 3 2 1\") == \"YES\\n1 0 0 0 1 1 1 1\"\nassert solution(\"0 1 2 3 4 5 6 7 8 9 10\") == \"YES\\n1 0 0 0 0 0 1 1 1\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2 3 7\\n100 51 51 51\\n1234 1 100 199\") == \"3\\n0\\n1134\\n0\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n\"\"\"\nfrom math import ceil\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n\"\"\""
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\\n\") == \"3\\n0\\n1134\\n0\"\n\"\"\""
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\nassert solution(\"6 7 7 8 9\\n5 2 8 2 4 9\\n7 1 2 4 5 2\\n1 2 2 4 2 4\") == \"0\\n0\\n2\\n0\"\n\n\"\"\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\\n\") == \"3\\n0\\n1134\\n0\"\n\"\"\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == '3\\n0\\n1134\\n0'\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\") == \"3\\n0\\n1134\\n0\"\n\n\"\"\"\nimport unittest\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000''') == '3\\n0\\n1134\\n0'"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\nassert solution(\"20\") == \"12164510040883200\""
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n') == '1'\nassert solution('4\\n') == '3'\nassert solution('8\\n') == '1260'\nassert solution('20\\n') == '12164510040883200'\n\nsolution(stdin.strip())\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\nassert solution(\"20\") == \"12164510040883200\"\n\"\"\""
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('5') == '15'\nassert solution('9') == '362880'\nassert solution('7') == '5040'\nassert solution('8') == '1260'\n\n'''"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(2) == 1\nassert solution(4) == 3\nassert solution(8) == 1260\nassert solution(20) == 12164510040883200\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('8') == '1260'\nassert solution('20') == '12164510040883200'\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 3\nassert solution(5) == 5\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(2) == 1\nassert solution(4) == 3\nassert solution(8) == 1260\nassert solution(20) == 12164510040883200\nprint('The local tests are done. Try to solve the problem!')\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('5') == '1'\nassert solution('2') == '1'\nassert solution('8') == '1260'\nassert solution('4') == '3'\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"8\") == \"1260\"\nassert solution(\"20\") == \"12164510040883200\"\nprint(\"Success\")\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abc\", 1) == \"bc\"\nassert solution(\"abc\", 2) == \"\"\nassert solution(\"aabb\", 1) == \"a\"\nassert solution(\"aabb\", 2) == \"\"\nassert solution(\"aabb\", 3) == \"ab\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"u\") == \"\"\nassert solution(\"a\") == \"\"\nassert solution(\"aaa\") == \"\"\nassert solution(\"aaaa\") == \"\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"u\") == \"\"\n\n\n-----Solution-----\n\na = stdin.split('\\n')\nn, k = [int(i) for i in a[0].split(' ')]\ns = a[1]\ni = 0\nwhile k > 0:\n    for c in s:\n        if c == 'a':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break\n    for c in s:\n        if c == 'b':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break\n    for c in s:\n        if c == 'c':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break\n    for c in s:\n        if c == 'd':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break\n    for c in s:\n        if c == 'e':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break\n    for c in s:\n        if c == 'f':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break\n    for c in s:\n        if c == 'g':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break\n    for c in s:\n        if c == 'h':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break\n    for c in s:\n        if c == 'i':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break\n    for c in s:\n        if c == 'j':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break\n    for c in s:\n        if c == 'k':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break\n    for c in s:\n        if c == 'l':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break\n    for c in s:\n        if c =='m':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break\n    for c in s:\n        if c == 'n':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break\n    for c in s:\n        if c == 'o':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break\n    for c in s:\n        if c == 'p':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break\n    for c in s:\n        if c == 'q':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break\n    for c in s:\n        if c == 'r':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break\n    for c in s:\n        if c =='s':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break\n    for c in s:\n        if c == 't':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break\n    for c in s:\n        if c == 'u':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break\n    for c in s:\n        if c == 'v':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break\n    for c in s:\n        if c == 'w':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break\n    for c in s:\n        if c == 'x':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break\n    for c in s:\n        if c == 'y':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break\n    for c in s:\n        if c == 'z':\n            s = s[1:]\n            i += 1\n            k -= 1\n            break"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\n\"\"\"\n\n\nn, k = map(int, input().split())\ns = list(input())\n\nfor i in range(k):\n    if 'a' in s:\n        s.remove('a')\n    elif 'b' in s:\n        s.remove('b')\n    elif 'c' in s:\n        s.remove('c')\n    elif 'd' in s:\n        s.remove('d')\n    elif 'e' in s:\n        s.remove('e')\n    elif 'f' in s:\n        s.remove('f')\n    elif 'g' in s:\n        s.remove('g')\n    elif 'h' in s:\n        s.remove('h')\n    elif 'i' in s:\n        s.remove('i')\n    elif 'j' in s:\n        s.remove('j')\n    elif 'k' in s:\n        s.remove('k')\n    elif 'l' in s:\n        s.remove('l')\n    elif'm' in s:\n        s.remove('m')\n    elif 'n' in s:\n        s.remove('n')\n    elif 'o' in s:\n        s.remove('o')\n    elif 'p' in s:\n        s.remove('p')\n    elif 'q' in s:\n        s.remove('q')\n    elif 'r' in s:\n        s.remove('r')\n    elif's' in s:\n        s.remove('s')\n    elif 't' in s:\n        s.remove('t')\n    elif 'u' in s:\n        s.remove('u')\n    elif 'v' in s:\n        s.remove('v')\n    elif 'w' in s:\n        s.remove('w')\n    elif 'x' in s:\n        s.remove('x')\n    elif 'y' in s:\n        s.remove('y')\n    elif 'z' in s:\n        s.remove('z')\n\nprint(''.join(s))\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('cccaabababaccbc') == 'cccbbabaccbc'\nassert solution('aaaaaa') == ''\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\n\"\"\"\n\nn, k = map(int, input().split())\nstring = input()\nres = \"\"\n\nfor ch in string:\n    if ch == \"a\":\n        res += \"\"\n    elif ch == \"b\":\n        res += \"\"\n    elif ch == \"c\":\n        res += \"\"\n    else:\n        res += ch\n\nprint(res[0:k])\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"u\") == \"\"\n\"\"\""
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"cccaabababaccbc\") == \"cccbbabaccbc\"\nassert solution(\"u\") == \"\"\n\n\"\"\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 5\\n2 4\\n3 2\\n1 4\\n1 4\\n2 3') == '6'\n\"\"\""
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == '2'\nassert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5') == '8'\n\"\"\"\n\nnum_types, num_offers = [int(x) for x in input().split()]\n\nk_array = [int(x) for x in input().split()]"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3') == '8'\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5') == '20'"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\") == \"8\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\") == \"8\"\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\n\"\"\""
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n\") == \"8\"\nassert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\n\nprint(solution(stdin))\n\n----\n\n\n5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n\n8\n\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n\n20\n\n---\n\n\n\nimport math\n\nn, m = [int(x) for x in input().split()]\nk = [int(x) for x in input().split()]\nd = []\nt = []\nfor _ in range(m):\n    d_, t_ = [int(x) for x in input().split()]\n    d.append(d_)\n    t.append(t_)\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\n\n\"\"\"\nimport sys\nfrom typing import List"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 1 1\\n1 1\\n1 2\\n3 3') == '3'\n\"\"\"\n\nfrom collections import deque\n\nn, m = map(int, input().split())\nk = list(map(int, input().split()))\n\nspecial_offers = []\n\nfor i in range(m):\n    d, t = map(int, input().split())\n    special_offers.append((d, t))\n\nk = deque(k)\nday = 0\nwhile k:\n    if day == special_offers[0][0] - 1:\n        if k[0] == special_offers[0][1]:\n            k.popleft()\n        else:\n            k.pop()\n        special_offers.pop(0)\n        day = 0\n    else:\n        if k[0] == special_offers[0][1]:\n            k.popleft()\n        else:\n            k.pop()\n        day += 1\n    if not k:\n        break"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\") == \"-1\"\nassert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"-1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"-1\"\n\n\"\"\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\\n\") == \"3\"\nassert solution(\"3 3\\n.*.*\\n.*.\\n*.*\\n\") == \"-1\"\n\n\n\"\"\"\n\n\"\"\"\n----------- SOLUTION -------------"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n.*\\n.*\\n.*\\n\") == \"3\"\nassert solution(\"5 5\\n.*\\n.*\\n.*\\n.*\\n\") == \"3\"\nassert solution(\"5 5\\n.*\\n.*\\n.*\\n.*\\n\") == \"3\"\nassert solution(\"5 5\\n.*\\n.*\\n.*\\n.*\\n\") == \"3\"\nassert solution(\"3 3\\n.*\\n.*\\n.*\\n\") == \"2\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........') == '3'\n\nassert solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....') == '-1'\n\nassert solution('5 5\\n.*...\\n***..\\n.*...\\n.*...') == '-1'\n\nassert solution('3 3\\n*.*\\n.*.') == '-1'\n\nassert solution('5 5\\n.*...\\n***..\\n.*...\\n.*...') == '3'"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\".**....**.**.**.**.**.**\") == \"3\"\nassert solution(\".***.***..**..**\") == \"3\"\nassert solution(\".**..**.**.**.**.***.***\") == \"2 2 1\"\nassert solution(\".**..**.**.**.**.***.***\") == \"3 3 1\"\nassert solution(\".**..**.**.**.**.***.***\") == \"3 4 1\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\"\nassert solution(\"...*...\\n.*.*..\\n...*.\\n.*.*..\\n.*...\\n.....\") == \"3\\n2 2 1\\n3 3 1\"\nassert solution(\".*.*\\n.*.*\\n.*.*\") == \"3\\n2 2 1\"\nassert solution(\"...*...\\n.*.*..\\n...*.\\n.*.*..\\n.*.*.\") == \"3\\n2 2 1\\n3 3 1\"\nassert solution(\"*.*\\n.*.*\\n.*.*\") == \"3\\n2 2 1\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\") == \"3\\n3 4 1\\n3 5 2\\n3 5 1\"\nassert solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\") == \"3\\n2 2 1\\n3 3 1\\n3 4 1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"3\\n2 2 1\\n3 3 1\"\nassert solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\") == \"3\\n2 2 1\\n3 3 1\"\n\n\n\"\"\"\n\nfrom typing import List\nfrom queue import Queue\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n.*\\n.*\\n.*\\n.') == '3\\n2 2 1\\n3 3 1\\n3 4 1'\n\nassert solution('6 8\\n.*...\\n...**\\n..****\\n...**\\n.*...\\n........') == '3\\n3 4 1\\n3 5 2\\n3 5 1'\n\nassert solution('5 5\\n.*.*\\n.*.*\\n.*.*\\n.*.*\\n.*.*') == '-1'\n\nassert solution('3 3\\n.*\\n.*\\n.*') == '-1'\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n.*\\n.*\") == \"2 2 1\"\nassert solution(\"2 3\\n.*\\n.*\") == \"3 3 1\"\nassert solution(\"2 3\\n.*\\n.*\") == \"3 4 1\"\nassert solution(\"2 3\\n.*\\n.*\") == \"3 5 2\"\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n.*\\n.*\\n*.*') == '3\\n2 2 1\\n3 3 1\\n3 4 1'\nassert solution('4 4\\n***\\n**\\n*.') == '-1'\nassert solution('1 1\\n.*') == '-1'\nassert solution('2 4\\n****\\n..*') == '-1'\nassert solution('3 3\\n*.*\\n.*.') == '-1'\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"123\") == \"No\"\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"125\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('575') == 'Yes'"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(1221) == 'Yes'\nassert solution(1232) == 'Yes'\nassert solution(1253) == 'No'\nassert solution(1293) == 'Yes'\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('575') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(s) == answer\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"10\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"575\") == \"Yes\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"575\") == \"Yes\"\nassert solution(\"10\") == \"No\"\n\"\"\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"575\") == \"Yes\"\n\"\"\"\nimport sys\n\ninput_list = list(map(int, sys.stdin.readline().strip().split()))"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 8\") == \"Alice\"\nassert solution(\"8 7\") == \"Bob\"\nassert solution(\"9 9\") == \"Draw\"\n\"\"\"\n\nimport sys\n\ncards = sys.stdin.readline().split()\na, b = int(cards[0]), int(cards[1])"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == \"Alice\"\n\"\"\"\n\nA, B = map(int, input().split())\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"8 6\"\n) == \"Alice\"\nassert solution(\n    \"4 3\"\n) == \"Bob\"\nassert solution(\n    \"2 2\"\n) == \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 6\\n') == 'Alice'\nassert solution('8 2\\n') == 'Bob'\nassert solution('1 1\\n') == 'Draw'\nassert solution('6 9\\n') == 'Draw'\nassert solution('1 1\\n') == 'Draw'\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8 6') == 'Alice'\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 6\") == \"Alice\"\nassert solution(\"3 2\") == \"Draw\"\nassert solution(\"8 6\") == \"Alice\"\nassert solution(\"7 7\") == \"Draw\"\nassert solution(\"9 3\") == \"Bob\"\n\"\"\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 6') == 'Alice'\nassert solution('1 1') == 'Draw'\n\n\"\"\"\n\nimport sys\n\nA, B = sys.stdin.readline().split()"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8 6') == 'Alice'\nassert solution('4 4') == 'Draw'\nassert solution('9 6') == 'Bob'\nassert solution('5 5') == 'Draw'"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 6') == 'Alice'\n\"\"\"\n\nfrom fractions import gcd"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 6\") == \"Alice\"\n\nYou can verify your solution using the following code:\n\nassert solution(\"8 6\") == \"Alice\"\nassert solution(\"1 1\") == \"Draw\"\nassert solution(\"2 6\") == \"Bob\"\nassert solution(\"8 1\") == \"Alice\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\nassert solution('aaaa,bbbb,cccc') == 'aaaa bbbb cccc'\nassert solution('a,a,a') == 'a a a'\nassert solution('hello,world,123,!@#$%^&*()') == 'hello world 123!@#$%^&*()'\n\"\"\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(s) == result"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\nprint(solution(\"happy,newyear,enjoy\"))\n\nhttps://www.codewars.com/kata/5d3ab2e7c0a8fd5d8d500730/train/python\n\"\"\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\"\n\n\"\"\"\nSample Input 1\nhappy,newyear,enjoy\n\nSample Output 1\nhappy newyear enjoy\n\"\"\"\n\nimport re\nimport sys\n\ns = sys.stdin.readlines()[0]\nprint(re.sub(',','', s))\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('happy,newyear,enjoy') == 'happy newyear enjoy'\n\n\"\"\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"happy,newyear,enjoy\") == \"happy newyear enjoy\"\n\"\"\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n\") == \"2\\n1\\n\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n\") == \"2\\n1\""
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin), end=\"\")"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\\n\") == \"2\\n1\"\nassert solution(\"2 2\\n2 1\\n0 0\\n-1 0\\n1 0\\n\") == \"1\\n2\"\n\n\"\"\"\n\nimport sys\n\nlines = [line.strip() for line in sys.stdin.readlines()]\nlines = [line.split(\"\\n\") for line in lines[0].split(\"\\n\\n\")]\n\nfor line in lines:\n    print(line[0])\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == '2\\n1'\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\nassert solution(\"2 2\\n2 1\\n0 0\\n-1 0\\n1 0\") == \"1\\n1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n2 0\\n0 0\\n-1 0\\n1 0') == '2\\n1'\nassert solution('3 3\\n3 0\\n0 0\\n0 0\\n0 0') == '3\\n3'\nassert solution('1 1\\n2 0') == '1'\nassert solution('1 1\\n1 0') == '1'\nassert solution('1 1\\n0 0') == '1'\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\") == \"2\\n1\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == '14'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"14\"\nprint(solution(\"2\"))\nassert solution(\"3\") == \"25\"\nprint(solution(\"3\"))\nassert solution(\"4\") == \"36\"\nprint(solution(\"4\"))\n\"\"\"\n\na = int(input())\na_squared = a ** 2\na_cubed = a ** 3\nsum_of_squared_cubed = a_squared + a_cubed\nprint(sum_of_squared_cubed)\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"14\"\nprint(\"Success\")\n\na = 2\na = a + a**2 + a**3"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '14'\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"14\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"14\"\n\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == 2\nassert solution(\"2\") == 2 + 4 + 8\nassert solution(\"3\") == 2 + 4 + 8 + 16\nassert solution(\"10\") == 2 + 4 + 8 + 16 + 32\n\"\"\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == 14\nprint(solution(stdin=input()))\n\n===========================================\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"14\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == 14\n\"\"\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.\") == \"Yes\"\nassert solution(\"3 2\\n#.\\n.#.\\n#.\\n#.\\n.\") == \"No\"\nassert solution(\"3 2\\n#.\\n#.\\n#.\\n#.#\\n.\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.') == \"Yes\"\nassert solution('5 5\\n.##.\\n#.#.\\n###.\\n.#.\\n.##') == \"Yes\"\nassert solution('7 4\\n.##.\\n#.#.\\n#..#\\n###.\\n###.\\n#.#.\\n###.') == \"No\"\nassert solution('5 5\\n.##.\\n#.#.\\n#..#\\n###.\\n###.') == \"No\"\nassert solution('9 4\\n.##.\\n#.#.\\n#..#\\n###.\\n###.\\n#.#.\\n#.#.\\n###.') == \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\") == \"Yes\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n.\") == \"Yes\"\nassert solution(\"3 2\\n#.\\n#.\\n#.\\n#\\n.\") == \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6\\n#.#\\n###\\n#.#\\n#.#\\n###\\n') == 'Yes'\nassert solution('5 3\\n#.#\\n###\\n#.#\\n#.#\\n###\\n') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2\\n.#\\n.#') == 'Yes'\nassert solution('2 3\\n#.#\\n#.#\\n#.#') == 'Yes'\nassert solution('1 1\\n#') == 'No'\nassert solution('2 3\\n#.\\n#.') == 'No'\nassert solution('2 3\\n.#\\n..') == 'No'\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n.#.') == \"Yes\"\nassert solution('2 2\\n#.') == \"Yes\"\nassert solution('4 3\\n####\\n####\\n####\\n#..') == \"Yes\"\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 2\\n#.#\\n.#.\\n#.#\\n#.') == \"Yes\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 5 2\") == \"53\"\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 5 2') == '53'\n\"\"\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 5 2') == '53'\n\"\"\"\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\n\nimport sys\n\nfrom sys import stdin\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"1 5 2\"\n) == \"53\"\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 5 2\") == \"53\"\n\"\"\""
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5 2\") == \"53\"\nassert solution(\"2 2 5\") == \"7\"\nassert solution(\"5 5 1\") == \"8\"\nassert solution(\"7 7 7\") == \"30\"\n\"\"\"\nimport sys\nfrom itertools import permutations"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n4980\\n7980\\n6980') == 15950\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n30\\n45') == '105'\nassert solution('4\\n7\\n12\\n14') == '91'\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\\n\") == \"15950\"\n\"\"\"\n\nN = int(input())\nprice = []\nfor i in range(0,N):\n    price.append(int(input()))\n\nfor i in range(0,N):\n    if price[i]%2 == 0:\n        print(int(price[i]/2))\n    else:\n        print(int((price[i]-1)/2))\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\\n\") == \"15950\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input_str) == output_str\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"\n\n\"\"\"\n\nN = int(input())\nprice = [int(input()) for _ in range(N)]\n\nprint(sum(price) // 2)\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"\nprint(\"Test 1 Passed\")\n\nassert solution(\"2\\n70\\n79\") == \"99\"\nprint(\"Test 2 Passed\")\n\n\"\"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"\nprint(\"Test 1 Passed\")\nassert solution(\"3\\n4980\\n7980\\n6980\") == \"15950\"\nprint(\"Test 2 Passed\")\nassert solution(\"4\\n12000\\n4980\\n7980\\n6980\") == \"18720\"\nprint(\"Test 3 Passed\")\nassert solution(\"4\\n12000\\n4980\\n7980\\n6980\") == \"18720\"\nprint(\"Test 4 Passed\")\n\n---\nThe first line in the input is N, the number of items.\nThe second line in the input is p_1, the price of the first item.\nThe third line in the input is p_2, the price of the second item.\nThe fourth line in the input is p_N, the price of the last item.\nThe fifth line in the input is p_i, the regular price of the i-th item (1 \\leq i \\leq N).\nThe sum of all the regular prices must be equal to the price of the discount coupon.\nIt is guaranteed that the regular price is an even number.\nThe number of items N will be 1 \\leq N \\leq 10\nThe sum of all the regular prices will be 10 \\times 2 = 20\n\nIf the regular price of the i-th item is p_i, then the price of the discount coupon is p_i / 2\n\n---\nYour submission will be tested with the following two test cases.\n\n---\nIf your solution passes all the test cases, it will be judged as 100% correct.\n\n'''"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n3\\n2\\n') == '2'\nassert solution('3\\n1\\n2\\n') == '6'\nassert solution('1\\n50\\n50\\n') == '100'\nassert solution('2\\n5\\n1\\n') == '20'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\"\"\"\n\nt = int(input())\ni = 0\nl = []\nwhile i < t:\n    l.append(int(input()))\n    i += 1\n\nprint(min(l)*10 + l[-1])"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\n\"\"\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\""
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('29 20 7 35 120') == '215'\n\n-------"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"29 20 7 35 120\") == \"215\"\n\"\"\"\n\n\n\"\"\"\nSolved locally\n\"\"\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n29\n20\n7\n35\n120\n\"\"\"\n) == \"215\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\"\"\""
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('29\\n20\\n7\\n35\\n120') == '215'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"29\\n20\\n7\\n35\\n120\") == \"215\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 30\") == \"7.5\"\n\"\"\"\n\n\"\"\"\nThe solution is an application of the multiplicative inverse formula.\nIn the context of the problem, a multiplicative inverse is defined as the number a such that a * a = 1.\nSo, we can easily see that the sum of the multiplicative inverses of the integers in A will give the multiplicative inverse of the sum of the numbers in A.\n\nThe formula for finding a multiplicative inverse is a^(-1) = 1/a.\n\nIn the current solution, we know that A_1, \\ldots, A_N is a set of numbers with a sum of N.\nSo, in order to get a multiplicative inverse of A_1, \\ldots, A_N,\nwe can apply the above formula to each of the numbers in the set.\n\nBecause we know that a multiplicative inverse of A_1, \\ldots, A_N will give us the multiplicative inverse of the sum of the numbers in A,\nwe can compute the multiplicative inverse of the sum of the numbers in A as a by applying the above formula to N.\nBecause a multiplicative inverse is only unique up to a constant,\nwe can add any of the multiplicative inverses in A to get a multiplicative inverse of N.\n\"\"\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n5\\n') == '0.25'\nassert solution('6\\n5\\n') == '0.6'\nassert solution('7\\n7\\n') == '0.0'\n\n\"\"\"\n\nfrom fractions import Fraction"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 30\\n\") == \"7.5\"\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n10 20\\n\") == \"1/3\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 30\") == \"7.5\"\nassert solution(\"10 200\") == \"2.5\"\nassert solution(\"10 20 30 40\") == \"0.9\"\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 30\") == \"7.5\"\nassert solution(\"10 30\\n4 30\") == \"4.0\"\nassert solution(\"10 30\\n4 30\\n1 10\") == \"1.25\"\nprint(\"Passed!\")\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 30') == '7.5'\n\n\"\"\"\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n10 30\") == \"7.5\"\n\nimport sys\nassert abs(float(solution(sys.stdin.read())) - 7.5) <= 1e-5\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == '1'\nassert solution(\"1 1\") == '0'\n\"\"\"\n\n\"\"\"\nIn math, the multiplicative inverse of n is the number x such that n * x = 1.\n\nFor example, the multiplicative inverse of 2 is 1:\n\n2 * 1 = 2\n\nFor the multiplicative inverse of a number n, we can compute it by the following algorithm:\n\nTake n to the power of the smallest number k, such that n ** k < n.\nRepeat:\nFind the remainder when n is divided by n ** k.\nAdd n ** k to the result.\nIf the remainder is not zero, repeat.\nOnce you have the result for all powers of n less than k, the smallest one is the result.\n\nFor example, the multiplicative inverse of 10 is 5:\n\n10 * 5 = 5 * 10 = 50\n\n5 * 10 = 5 * 5 = 25\n\n25 * 5 = 25 * 5 = 125\n\n125 * 5 = 125 * 5 = 625\n\n625 * 5 = 625 * 5 = 3125\n\n3125 * 5 = 3125 * 5 = 15625\n\n15625 * 5 = 15625 * 5 = 35625\n\n35625 * 5 = 35625 * 5 = 712500\n\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n') == '0.5'\nassert solution('1\\n10\\n') == '0.1'\nassert solution('2\\n10\\n') == '0.2'\n\n----------------------------------------------------------------------------------------------------------------------------------------------\nGiven is a sequence of N integers A_1, \\ldots, A_N.\nFind the value of the maximum product of the digits in the sequence.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq A_i \\leq 1000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\ldots A_N\n\n-----Output-----\nPrint a number representing the maximum product of the digits in the sequence.\n\n-----Sample Input-----\n5\n1\n100\n9\n1010\n\n-----Sample Output-----\n1\n100\n9\n1000\n\n\\text{max_product}(1, 100, 9, 1010) = 1\n\\text{max_product}(100, 1, 9, 1010) = 100\n\\text{max_product}(9, 9, 1, 1010) = 9\n\\text{max_product}(1010, 1, 9, 1010) = 1000\n\"\"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 2\\n1\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n\") == '2'\n\n---------------------\nsolution = lambda stdin:\n\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2\\n2 1 5\\n5 3\") == \"4\"\nassert solution(\"5 3\\n1\\n2\\n3\\n4\\n5\\n\") == \"2\"\nassert solution(\"4 1\\n1\\n2\\n3\\n4\\n\") == \"0\"\nassert solution(\"3 3\\n1\\n2\\n3\\n\") == \"0\"\nassert solution(\"4 4\\n1\\n2\\n3\\n4\\n\") == \"0\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12\\n') == '2'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 15 11 14 12\") == '2'\nassert solution(\"5 3\") == '2'\n\"\"\"\n\nimport sys\nimport os\nimport unittest\nimport numpy as np\nimport re"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('h_1:') == ''\nassert solution('h_1:\\n') == ''\nassert solution('h_1: h_2:') == ''\nassert solution('h_1:\\n h_2:\\n') == ''"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3\\n10\\n15\\n11\\n14\\n12') == '2'\nassert solution('4 5\\n1\\n2\\n3\\n4') == '0'\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\\n\") == '2'\n\n---Problem 642---\n\nGiven: A positive integer n\u22647.\n\nReturn: The total number of permutations of length n, followed by a list of all such permutations (in any order).\n\nNOTE: Permutation is defined as the re-arranging of the elements of an ordered list. For example,\n4!=1x2x3x4=(4!) is a permutation of 4 elements: 1,2,3,4.\n\n-----Input-----\nGiven: Positive integer n\u22647.\n\n-----Output-----\nReturn: The total number of permutations of length n, followed by a list of all such permutations (in any order).\n\n-----Sample Input-----\n3\n\n-----Sample Output-----\n6\n1 2 3\n1 3 2\n2 1 3\n2 3 1\n3 1 2\n3 2 1"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 3\n10\n15\n11\n14\n12''') == '2'\nprint(solution(stdin))\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n10\\n15\\n11\\n14\\n12\") == \"2\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\\n15\\n11\\n14\\n12\") == \"2\"\n\"\"\"\n\nn, k = map(int, stdin.split())\nheights = list(map(int, stdin.split()))\n\nheights.sort()\n\nmin_diff = heights[k - 1] - heights[0]\n\nfor i in range(1, len(heights) - k + 1):\n    diff = heights[i + k - 1] - heights[i]\n    if diff < min_diff:\n        min_diff = diff\n\nprint(min_diff)\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"B\") == \"A\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('B') == 'A'\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"B\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"B\") == \"A\"\nassert solution(\"A\") == \"A\"\n\nprint(\"PASSED\")\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a\") == \"a\"\nassert solution(\"B\") == \"A\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"B\") == \"A\"\nassert solution(\"a\") == \"a\"\nassert solution(\"A\") == \"A\"\nassert solution(\"b\") == \"b\"\n\n\"\"\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('B') == 'A'\nprint(solution('B'))\n\"\"\"\n\nfrom collections import deque\nfrom enum import Enum\nfrom typing import Deque, List, Tuple\n\n\nclass Alphabet(Enum):\n    UPPERCASE = \"UPPERCASE\"\n    LOWERCASE = \"LOWERCASE\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('B') == 'A'\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('a') == 'A'\nassert solution('A') == 'A'\nassert solution('aB') == 'A'\nassert solution('aBcD') == 'A'\nassert solution('ab') == 'a'\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('B') == 'A'\nassert solution('a') == 'a'\n\"\"\"\nimport re\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a') == 'a'\nassert solution('B') == 'A'\nassert solution('\u03b1') == '\u03b1'\n\"\"\"\n\nstdin = input()\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"6\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 0\") == 2\nassert solution(\"4 1\") == 1\nassert solution(\"4 2\") == 1\nassert solution(\"4 3\") == 0\nassert solution(\"4 4\") == 0\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n\") == \"6\"\nassert solution(\"3 4\\n\") == \"0\"\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"6\"\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n') == '6'\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n\") == \"6\"\n\"\"\""
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n') == 6\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == 6\nassert solution(\"2 1\") == 2\nassert solution(\"1 1\") == 1\nassert solution(\"1 0\") == 0\nassert solution(\"0 0\") == 0\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(2, 2) == 6\nassert solution(3, 3) == 8\nassert solution(3, 4) == 6\nassert solution(3, 5) == 10\nassert solution(3, 6) == 15\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2') == '6'\nassert solution('4 4') == '16'\nassert solution('1 0') == '0'\nassert solution('2 2') == '6'\nassert solution('4 4') == '16'\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1903\") == \"MMYY\"\nassert solution(\"1901\") == \"AMBIGUOUS\"\nassert solution(\"2006\") == \"AMBIGUOUS\"\nassert solution(\"1905\") == \"YYMM\"\n\n\"\"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1905\") == \"YYMM\"\n\"\"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('1905')!= 'MMYY'\nassert solution('1905')!= 'YYMM'\nassert solution('1905')!= 'AMBIGUOUS'\nassert solution('1905')!= 'NA'\n\"\"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('1905'), 'MMYY'\nassert solution('1905'), 'AMBIGUOUS'\nassert solution('1905'), 'NA'\n\nassert solution('1905'), 'YYMM'\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1905\") == \"YYMM\"\nassert solution(\"1907\") == \"MMYY\"\nassert solution(\"1908\") == \"AMBIGUOUS\"\nassert solution(\"1900\") == \"NA\"\n\n###############################################################################################################################################################################\n###############################################################################################################################################################################\n###############################################################################################################################################################################"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1905') == 'YYMM'\nassert solution('1905') == 'YYMM'\nassert solution('1905') == 'YYMM'\nassert solution('1905') == 'YYMM'\nassert solution('1905') == 'YYMM'\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'1905') == 'YYMM'\nassert solution(\n'1905') == 'YYMM'\nassert solution(\n'2005') == 'MMYY'\nassert solution(\n'1905') == 'YYMM'\nassert solution(\n'2005') == 'MMYY'\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1905\") == \"YYMM\"\n\nassert solution(\"1905\") == \"YYMM\"\n\"\"\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1905\") == \"YYMM\"\n\"\"\"\nimport re\n\ns = stdin\nx = re.match(r'\\d\\d\\d\\d',s)\ny = re.match(r'\\d\\d\\d\\d',s)\nz = re.match(r'\\d\\d\\d\\d',s)\nm = re.match(r'\\d\\d\\d\\d',s)\nprint(x)\nprint(y)\nprint(z)\nprint(m)\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin\nprint(solution(stdin))\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n') == '2'\nassert solution('6\\n') == '5'\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n2') == '1'\nassert solution('4\\n3') == '1'\nassert solution('3\\n3') == '1'\nassert solution('4\\n4') == '1'\nassert solution('3\\n4') == '0'\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n') == '2'\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == 2\n\"\"\"\n\n\"\"\"\nExplanation:\n\nGiven the number K, we can choose to take two even and one odd numbers respectively, or three odd numbers respectively. \nTherefore, the answer will be the sum of two even numbers, and three odd numbers.\n\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\n\"\"\"\nimport os\nfrom io import StringIO"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == '2'\nassert solution('3') == '1'\n\"\"\"\n\n\"\"\"\nSolution 1\n\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '1'\nassert solution('3') == '1'\nassert solution('2') == '1'\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 12\") == \"21\"\n\nassert solution(\"6 12\") == \"18\"\n\nassert solution(\"0 0\") == \"0\"\n\nassert solution(\"1 1\") == \"1\"\n\nassert solution(\"9 23\") == \"22\"\n\"\"\""
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 12\") == \"21\"\n\"\"\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9 12\") == \"21\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9 12') == '21'\n\"\"\"\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(9,12) == '21'\nassert solution(8,16) == '8'\nassert solution(8,17) == '9'\nassert solution(9,17) == '10'\nassert solution(9,18) == '11'\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 12\\n\") == \"21\"\nprint(solution(\"9 12\\n\"))\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 12\\n\") == \"21\"\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == output()\n\n\"\"\"\n\n\n\"\"\"\n    Solution is:\n    R = N * 300 + R - 100 * (N - 10)\n\"\"\"\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2919') == '3719'\n\"\"\"\n\nimport sys\n\nn, r = sys.stdin.readline().strip().split()\nn, r = int(n), int(r)\n\ncount = 0\nfor i in range(1, 10):\n    if n >= 10:\n        count += n\n    else:\n        count += r - 100 * (10 - n)\n    n += 1\n\nprint(count)"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\"\n\n\"\"\"\n    import sys\n\n    def read_input():\n        return sys.stdin.readline().rstrip()\n\n    def solution(inp):\n        n, r = map(int, inp.split())\n        k = min(n, 10)\n        return str(r + (100 * (k - n)))\n\n    print(solution(read_input()))\n\"\"\"\n\n\"\"\"\n    import sys\n\n    def read_input():\n        return sys.stdin.readline().rstrip()\n\n    def solution(inp):\n        n, r = map(int, inp.split())\n        k = min(n, 10)\n        if k >= 10:\n            return r\n        return str(r - 100 * (k - n))\n\n    print(solution(read_input()))\n\"\"\"\n\n\"\"\"\n    import sys\n\n    def read_input():\n        return sys.stdin.readline().rstrip()\n\n    def solution(inp):\n        n, r = map(int, inp.split())\n        k = min(n, 10)\n        if k >= 10:\n            return r\n        return str(r - 100 * (k - n))\n\n    print(solution(read_input()))\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 2919\\n') == '3719'\n\n---problem 669---\n\nGiven a list of numbers and a number k, return whether any two numbers from the list add up to k.\n\nFor example, given [10, 15, 3, 7] and k of 17, return true since 10 + 7 is 17.\n\nBonus: Can you do this in one pass?\n\nsolution:"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2919') == '3719'\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2919\\n') == '3719'\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2919\\n') == '3719'"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2919\\n') == '3719'\n\"\"\"\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\""
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2919\") == \"3719\"\n\"\"\"\n\n\"\"\"\nYou're given two values, A and B. Compute and print A + B.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq A, B \\leq 10^9\n\n-----Input-----\nThe first line of the input contains a single integer, T, the number of test cases.\nThe T subsequent lines of the input contains two integers A and B.\n\n-----Output-----\nPrint A + B.\n\n-----Sample Input-----\n2\n1 2\n10 11\n\n-----Sample Output-----\n3\n21\n\"\"\"\n\n\"\"\"\nInput Format\n\nThe first line contains an integer, T, the number of test cases.\nThe T subsequent lines each contain an integer, A.\n\nConstraints\n\n1 <= T <= 10\n1 <= A <= 10^9\n\nOutput Format\n\nFor each test case, print a single line containing the result, A+B.\n\nSample Input\n\n3\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\nSample Output\n\n2\n3\n5\n7\n9\n11\n13\n15\n17\n19\n21\n23\n25\n27\n29\n31\n33\n35\n37\n39\n41\n43\n45\n47\n49\n51\n53\n55\n57\n59\n61\n\"\"\"\n\n\"\"\"\nT = int(input())\nfor i in range(T):\n    a = int(input())\n    b = int(input())\n    print(a + b)\n\"\"\"\n\n\"\"\"\n10\n-100\n100\n0\n101\n11\n111\n1111\n11111\n11111111\n1111111111\n11111111111111111111111111111111111111111111111111111111111111111111111111\n\"\"\"\n\n\"\"\"\nT = int(input())\nfor i in range(T):\n    a = int(input())\n    if a < 0:\n        print(-1 * a)\n    else:\n        print(a)\n\"\"\"\n\n\"\"\"\nT = int(input())\nfor i in range(T):\n    a = int(input())\n    if a % 2 == 0:\n        print(0)\n    else:\n        print(1)\n\"\"\"\n\n\"\"\"\nT = int(input())\nfor i in range(T):\n    a = int(input())\n    if a % 10 == 1 and a > 9:\n        print(a)\n    else:\n        print(0)\n\"\"\"\n\n\"\"\"\nT = int(input())\nfor i in range(T):\n    a = int(input())\n    if a % 10 == 1:\n        print(a)\n    else:\n        print(0)\n\"\"\"\n\n\"\"\"\nT = int(input())\nfor i in range(T):\n    a = int(input())\n    if a < 100:\n        print(a + 10)\n    else:\n        print(a)\n\"\"\"\n\n\"\"\"\nT = int(input())\nfor i in range(T):\n    a = int(input())\n    if a < 100:\n        print(a + 10)\n    else:\n        print(a)\n\"\"\"\n\n\"\"\"\nT = int(input())\nfor i in range(T):\n    a = int(input())\n    if a < 100:\n        print(a + 10)\n    elif a < 1000:\n        print(a + 100)\n    elif a < 10000:\n        print(a + 1000)\n    else:\n        print(a + 10000)\n\"\"\"\n\n\"\"\"\nT = int(input())\nfor i in range(T):\n    a = int(input())\n    if a < 100:\n        print(a + 10)\n    elif a < 1000:\n        print(a + 100)\n    elif a < 10000:\n        print(a + 1000)\n    elif a < 100000:\n        print(a + 10000)\n    else:\n        print(a + 100000)\n\"\"\"\n\n\"\"\"\nT = int(input())\nfor i in range(T):\n    a = int(input())\n    if a < 100:\n        print(a + 10)\n    elif a < 1000:\n        print(a + 100)\n    elif a < 10000:\n        print(a + 1000)\n    elif a < 100000:\n        print(a + 10000)\n    elif a < 1000000:\n        print(a + 100000)\n    else:\n        print(a + 1000000)\n\"\"\"\n\n\"\"\"\nT = int(input())\nfor i in range(T):\n    a = int(input())\n    if a < 100:\n        print(a + 10)\n    elif a < 1000:\n        print(a + 100)\n    elif a < 10000:\n        print(a + 1000)\n    elif a < 100000:\n        print(a + 10000)\n    elif a < 1000000:\n        print(a + 100000)\n    else:\n        print(a + 1000000)\n\"\"\"\n\n\"\"\"\nT = int(input())\nfor i in range(T):\n    a = int(input())\n    if a < 100:\n        print(a + 10)\n    elif a < 1000:\n        print(a + 100)\n    elif a < 10000:\n        print(a + 1000)\n    elif a < 100000:\n        print(a + 10000)\n    elif a < 1000000:\n        print(a + 100000)\n    elif a < 10000000:\n        print(a + 1000000)\n    else:\n        print(a + 10000000)\n\"\"\"\n\n\"\"\"\nT = int(input())\nfor i in range(T):\n    a = int(input())\n    if a < 100:\n        print(a + 10)\n    elif a < 1000:\n        print(a + 100)\n    elif a < 10000:\n        print(a + 1000)\n    elif a < 100000:\n        print(a + 10000)\n    elif a < 1000000:\n        print(a + 100000)\n    elif a < 10000000:\n        print(a + 1000000)\n    elif a < 100000000:\n        print(a + 10000000)\n    else:\n        print(a + 100000000)\n\"\"\"\n\n\"\"\"\nT = int(input())\nfor i in range(T):\n    a = int(input())\n    if a < 100:\n        print(a + 10)\n    elif a < 1000:\n        print(a + 100)\n    elif a < 10000:\n        print(a + 1000)\n    elif a < 100000:\n        print(a + 10000)\n    elif a < 1000000:\n        print(a + 100000)\n    elif a < 10000000:\n        print(a + 1000000)\n    elif a < 100000000:\n        print(a + 10000000)\n    elif a < 1000000000:\n        print(a + 100000000)\n    else:\n        print(a + 1000000000)\n\"\"\"\n\n\"\"\"\nT = int(input())\nfor i in range(T):\n    a = int(input())\n    if a < 100:\n        print(a + 10)\n    elif a < 1000:\n        print(a + 100)\n    elif a < 10000:\n        print(a + 1000)\n    elif a < 100000:\n        print(a +"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11 2') == 4\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 2\") == \"4\"\nprint(\"PASSED\")\n\n-----TESTS-----\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('11 2') == '4'\nprint(solution(\"11 2\"))\n\n\"\"\"\n\n\"\"\"\nWrite a function:"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11 2\") == 4\n\n\"\"\"\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(11, 2) == 4\n\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11 2') == 4\n\"\"\"\n\nn, k = [int(x) for x in input().split(' ')]\nprint(n)\nprint(k)"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11 2') == 4\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11 2') == 4\n\"\"\""
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11 2\") == \"4\"\n\"\"\"\n\nn, k = map(int, input().split())\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11 2') == 4\nassert solution('11 5') == 2\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n5\\n3\\n2\\n3\\n2\\n3\\n3\\n2\\n2\\n2\\n1\\n1\\n1\\n2\\n2\\n2\\n2\\n3\\n3\\n3\\n2\\n2\\n2\\n3\\n3\\n3\\n2\\n2\\n2\\n2\\n2\\n1\\n1\\n1\\n2\\n2\\n2\\n1\\n1\\n1\\n2\\n2\\n2\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4') == '2'\nassert solution('1') == '1'\nassert solution('5') == '3'\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n') == '3'\n\n-----\n    def solution(n):\n        return (n - 1) // 2\n\"\"\"\n\nfrom unittest import TestCase\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"10\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == '3'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"3\"\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input_as_string) == expected_return_as_string\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5') == '3'\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1\\n2\\n3\\n4\\n5\\n\") == \"3\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n\") == \"2\"\nassert solution(\"1\\n1\\n\") == \"1\"\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == '3'\nassert solution('3') == '1'\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4\\n') == 'Yay!'\n\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 4') == 'Yay!'\n\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4\\n\") == 'Yay!'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4') == 'Yay!'\n\"\"\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\nassert solution(\"1 1\") == \"Yay!\"\nassert solution(\"1 16\") == \"Yay!\"\nassert solution(\"8 15\") == \"Yay!\"\nassert solution(\"13 16\") == \"Yay!\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\"\"\"\n\n\nfrom sys import stdin\nfrom itertools import combinations\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4\") == \"Yay!\"\n\"\"\"\n\na, b = map(int, input().strip().split())\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ':('\nassert solution('1 1\\n') == 'Yay!'\nassert solution('4 10\\n') == 'Yay!'\nassert solution('4 16\\n') == ':('\nassert solution('3 8\\n') == ':('\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4\\n\") == \"Yay!\"\n\n\"\"\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1234567876) == '34'\n\"\"\"\n\nS = stdin"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1234\") == \"1\"\nassert solution(\"12345\") == \"3\"\nassert solution(\"123456\") == \"6\"\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1234') == '2'\nassert solution('1234567876') == '3'\nassert solution('1234567891') == '7'\nassert solution('12345678910') == '5'\nassert solution('1111111') == '1'\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1234567876') == '34'\n\"\"\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1234567876\") == \"34\"\n\"\"\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\n\nassert solution(\"2 9\") == \"1 7\"\n\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 12 6') == '5 3'\nassert solution('2 9') == '1 7'\nassert solution('7 13 52 0 13 26 52') == '12 13'\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 12 6') == '5 3'\nassert solution('2 9') == '1 7'\nassert solution('7 13 52 0 13 26 52') == '12 13'\n\"\"\"\n\nimport sys\nfrom typing import List, Dict, Tuple\nfrom collections import Counter\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 12 6') == '5 3'\nassert solution('2 9') == '1 7'\nassert solution('7 13 52 0 13 26 52') == '12 13'"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\nassert solution(\"2 9\") == \"1 7\"\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nm = len(set(a))\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 12 6') == '5 3'\nassert solution('2 9') == '1 7'\nassert solution('7 13 52 0 13 26 52') == '12 13'\nassert solution('6 13') == '12 13'\nassert solution('4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200') == '2999999987 2'\n\n\"\"\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\n\"\"\""
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 12 6') == '5 3'\nassert solution('2 9') == '1 7'\nassert solution('7 13 52 0 13 26 52') == '12 13'\nassert solution('6 13') == '1 7'\nassert solution('6 13 52') == '1 7'\n\"\"\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\n\nassert solution(\"2 9\") == \"1 7\"\n\nassert solution(\"7 13 52 0 13 26 52\") == \"12 13\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 12 6\") == \"5 3\"\n\"\"\"\n\nfrom typing import List, Dict"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1\\n') == 1\nassert solution('123\\n') == 1\nassert solution('12\\n') == 1\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 4 1\") == \"3\"\nassert solution(\"3 1 4 1\") == \"1\"\nassert solution(\"5 1 1 2 2\") == \"2\"\n\"\"\"\n\nn = int(input())\np = list(map(int, input().split()))\n\ndp = [0] * n\n\ndp[0] = 1\nfor i in range(1, n):\n    dp[i] = dp[i-1]\n    if p[i] >= i + 1:\n        dp[i] += 1\n    for j in range(i):\n        if p[i] >= p[j] + i - j:\n            dp[i] = max(dp[i], dp[j] + 1)\n\nprint(dp[n - 1])\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 2 1\") == 2\nassert solution(\"3 1 4 1\") == 2\nassert solution(\"5 1 1 2 2\") == 2\n\nassert solution(\"5 1 1 2 2\") == 2\nassert solution(\"5 1 1 2 2\") == 2\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 4 1\") == 3\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 4 1\") == 3\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nc = 0\ns = 0\nwhile c < n:\n    s += a[c]\n    if s >= n:\n        break\n    c += 1\n\nprint(c + 1)\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 1 4 1') == '3'\nassert solution('3\\n1 1 1') == '1'\n\"\"\"\n\nn = int(stdin.readline())\na = [int(i) for i in stdin.readline().split()]\n\ncnt = 1\nmax_cnt = 1\nfor i in range(n):\n    if a[i] == cnt:\n        cnt += 1\n        max_cnt = max(max_cnt, cnt)\n    else:\n        cnt = 1\nprint(max_cnt)\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3 1 4 1') == 3\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nmax_day = 0\nfor i in range(n):\n    tmp_day = 1\n    for j in range(n):\n        if i!= j:\n            if a[i] >= a[j] and tmp_day < a[i] - a[j]:\n                tmp_day = a[i] - a[j]\n    if max_day < tmp_day:\n        max_day = tmp_day\n\nprint(max_day)\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 1 2 1\\n') == '3'\n\nassert solution('3 1 4 1\\n') == '2'\n\nassert solution('5 1 1 2 2\\n') == '1'\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1 4 1\\n3 1 4 1') == '3'\nassert solution('3 1 4 1\\n3 1 4 1') == '1'\nassert solution('5 1 4 1\\n3 1 4 1') == '2'\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1 1\\n') == '1'\nassert solution('4\\n3 1 4 1\\n') == '2'\nassert solution('5\\n1 1 1 2 2\\n') == '2'\nassert solution('5\\n3 2 3 1 1\\n') == '3'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2'\nassert solution('2 0\\n') == '1'\nassert solution('3 2\\n1 3\\n2 3') == '2'"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\\n\") == '2\\n4 2\\n'\nassert solution(\"3 2\\n1 3\\n2 3\\n\") == '2\\n'\n\"\"\"\n\nimport collections\nfrom typing import List\n\nclass Solution:\n    def diameterOfBinaryTree(self, root: TreeNode) -> int:\n        self.res = 0\n        def dfs(root: TreeNode) -> int:\n            if not root:\n                return 0\n            left = dfs(root.left)\n            right = dfs(root.right)\n            self.res = max(self.res, left + right)\n            return max(left, right) + 1\n        dfs(root)\n        return self.res\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n1 2\\n2 3') == '2'\nassert solution('4 0\\n1 2\\n2 3') == '1'\nassert solution('3 2\\n1 3\\n2 3') == '2'\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\\n\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"3 2\\n1 3\\n2 3\\n4 3\") == \"2\"\nassert solution(\"3 2\\n1 3\\n2 3\\n4 3\\n5 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\\n1 2\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\n\"\"\"\n\nfrom collections import defaultdict, deque\n\nimport sys\nsys.setrecursionlimit(1500)\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \"\"\"\n        >>> solution('''2 2\n        ... 1 2\n        ... 2 3''')\n        2\n        >>> solution('''3 2\n        ... 1 3\n        ... 2 3\n        ... ''')\n        2\n        >>> solution('''3 2\n        ... 1 3\n        ... 2 3\n        ... ''')\n        2\n        \"\"\"\n        n, m = [int(v) for v in stdin.split(\"\\n\")[0].split()]\n        parent = [-1] * n\n        edge = defaultdict(list)\n\n        for _ in range(m):\n            v, u = [int(v) for v in stdin.split(\"\\n\")[_].split()]\n            edge[v].append(u)\n            edge[u].append(v)\n\n        def dfs(u):\n            for v in edge[u]:\n                if parent[v] == -1:\n                    parent[v] = u\n                    dfs(v)\n\n        def bfs(u):\n            visited = set()\n            q = deque()\n            q.append(u)\n            visited.add(u)\n            while q:\n                u = q.popleft()\n                for v in edge[u]:\n                    if v not in visited:\n                        visited.add(v)\n                        q.append(v)\n                        parent[v] = u\n            return visited\n\n        for v in edge:\n            if parent[v] == -1:\n                parent[v] = v\n                dfs(v)\n        visited = bfs(0)\n        return max(self.bfs_diameter(v, parent) for v in visited)\n\n    @staticmethod\n    def bfs_diameter(v, parent):\n        q = deque()\n        q.append(v)\n        visited = set()\n        diameter = 1\n        while q:\n            diameter += 1\n            length = len(q)\n            for _ in range(length):\n                u = q.popleft()\n                visited.add(u)\n                for v in edge[u]:\n                    if v not in visited:\n                        q.append(v)\n                        parent[v] = u\n        return diameter - 1\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n2 3') == '2'\nassert solution('1 2\\n2 3\\n4 2') == '2'\nassert solution('1 2\\n2 3\\n4 2\\n4 3') == '3'\n\nprint('Success')\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"2 0\") == \"1\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\""
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n4 2\n1 2\n2 3\n''') == '2'\n\nassert solution('''\n3 2\n1 3\n2 3\n''') == '1'\n\nassert solution('''\n2 0\n''') == '1'\n\nassert solution('''\n2 2\n1 3\n2 3\n''') == '2'\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2\\n2 3\") == \"2\"\nassert solution(\"3 2\\n1 3\\n2 3\") == \"2\"\nassert solution(\"2 0\\n\") == \"1\"\nassert solution(\"1 0\\n\") == \"1 1\\n1 2\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\n\"\"\"\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u0439\u0442\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u043f\u043e\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\u044e \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043f\u0435\u0440\u0438\u043e\u0434\u043e\u0432 $k$\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n \\ge 1 (1 \\le n \\le 10^6) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u043e\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:\n\n1. \u0412 \u043f\u0435\u0440\u0432\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f.\n\n2. \u0412 \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0438\u0437 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f.\n\n\u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e t (1 \\le t \\le 10^6) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432.\n\n\u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 t \u0441\u0442\u0440\u043e\u043a \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b n \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b a_1, a_2, \\dots, a_n (0 \\le a_i \\le 10^6) \u2014 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0432 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0431\u0443\u0434\u0435\u0442 \u0434\u0430\u043d\u043d\u0430\u044f \u043f\u043e\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e \u0438\u043b\u0438 \u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e.\n\n\u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u043d\u0430\u0439\u0442\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u043f\u043e\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043f\u0435\u0440\u0438\u043e\u0434\u043e\u0432, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0432 \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0434\u043e\u043b\u0436\u043d\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u0442\u0440\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u0430:\n\n1. \u0412 \u043f\u0435\u0440\u0432\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f.\n\n2. \u0412 \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0438\u0437 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f.\n\n3. \u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u043c \u043f\u0435\u0440\u0438\u043e\u0434\u0435 \u0432\u0441\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u0434\u0432\u0443\u0445 \u043f\u0440\u0430\u0432\u0438\u043b \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0442\u044c.\n\n\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0448\u0430\u0433 \u0441\u0432\u0438\u0434\u0435\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0443\u0435\u0442 \u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430.\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u2014 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 \u043f\u043e\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u043e\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432\u0441\u0435\u0433\u0434\u0430 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f \u0438 \u0434\u043b\u0438\u043d\u0430 \u043f\u043e\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0432\u0441\u0435\u0433\u0434\u0430 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f.\n\n\u0412\u0441\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0438 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u043d\u0438\u0436\u0435 \u0434\u043b\u044f \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430\u0433\u043b\u044f\u0434\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u0444\u0430"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1\\n2 3\\n3 3\\n') == '2'\n\"\"\"\n\nimport sys\n\nfrom collections import defaultdict"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\") == '11'\nassert solution(\"7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\") == '4'\nassert solution(\"7 2\\n2 1 2 1 2 1 1\\n6 4\\n1 5\\n3 1\\n2 3\\n7 5\\n7 4\") == '4'\n\"\"\""
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input()))\n\n------\n\n1\n5\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5\n\n11\n\n\n\n-----"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1\\n1 1') == '2'\nassert solution('1 2\\n1 2') == '1'\nassert solution('2 1\\n2 1') == '0'\nassert solution('1 1\\n5 5') == '1'\nassert solution('1 1\\n1 1') == '0'\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n2 3\\n1 2') == '4'\nassert solution('3 1\\n2 3\\n1 2') == '5'\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\nassert solution('1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\nassert solution('1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5\\n') == '11'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5') == '11'\nprint(solution(stdin))"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5') == '11'\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\n\"\"\"\n\nfrom typing import List, Tuple, Set\nimport unittest\n\n\nclass Solution:\n    # Complexity: O(m + n)\n    def solution(self, stdin: str) -> str:\n        n, m = tuple(map(int, stdin.split()))\n\n        a: List[int] = list(map(int, stdin.split()))\n        b: List[int] = list(map(int, stdin.split()))\n\n        rooms: List[Set[int]] = [set() for _ in range(n)]\n\n        for i, b_i in enumerate(b):\n            rooms[i].add(b_i)\n\n        for b_i in b:\n            rooms[a[b_i - 1] - 1].add(b_i)\n\n        for i, room in enumerate(rooms):\n            if room:\n                rooms[i] = room.pop()\n\n        # print(rooms)\n\n        ans = []\n        for i in range(m):\n            ans.append(f\"{i + 1} {rooms[b[i] - 1]}\")\n\n        return \"\\n\".join(ans)\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution()\n\n    def test_case_1(self) -> None:\n        self.assertEqual(self.solution(stdin=\"3 6\\n10 15 12\\n1 9 12 23 26 37\"), \"1 1\\n1 9\\n2 2\\n2 13\")\n\n    def test_case_2(self) -> None:\n        self.assertEqual(self.solution(stdin=\"2 3\\n5 10000000000\\n5 6 9999999999\"), \"1 5\\n2 1\\n2 9999999994\")\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2 3 4 5 6 1\") == \"4 1\"\nassert solution(\"3 2 3 4 5 6 7\") == \"1 1\"\nassert solution(\"7 10 3 7 8 9 10 11 12\") == \"1 7\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n\n\n\n-----Test Submissions-----\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(input) == output\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13'\n\nassert solution('2 3\\n5 10000000000\\n5 6 9999999999') == '1 5\\n2 1\\n2 9999999994'\n\n\n-----Test1-----\n\nInput\n5 3\n2 2 2 1\n1 1 2 1\n\nOutput\n2 2\n1 1\n\n-----Test2-----\n\nInput\n4 2\n5 5\n1 5\n2 3\n3 3\n\nOutput\n3 1\n2 2\n3 2\n1 1\n\n-----Test3-----\n\nInput\n5 6\n10 15 12\n1 9 12 23 26 37\n\nOutput\n1 1\n1 9\n2 2\n2 13\n3 1\n3 12\n\n-----Test4-----\n\nInput\n5 2\n5 5\n1 5\n2 3\n3 3\n\nOutput\n2 1\n1 1\n2 2\n3 1\n3 12\n\n-----Test5-----\n\nInput\n5 6\n10 15 12\n1 9 12 23 26 37\n\nOutput\n1 1\n1 9\n2 2\n2 13\n3 1\n3 12\n\n-----Test6-----\n\nInput\n5 2\n5 5\n1 5\n2 3\n3 3\n\nOutput\n2 1\n1 1\n2 2\n3 1\n3 12\n\"\"\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3 6\n10 15 12\n1 9 12 23 26 37''') == '''1 1\n1 9\n2 2\n2 13\n3 1\n3 12'''\n\nassert solution('''2 3\n5 10000000000\n5 6 9999999999''') == '''1 5\n2 1\n2 9999999994'''\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 6\\n10 15 12\\n1 9 12 23 26 37') == '1 1\\n1 9\\n2 2\\n2 13'\nassert solution('2 3\\n5 10000000000\\n5 6 9999999999') == '1 5\\n2 1\\n2 9999999994'\n\"\"\""
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6\\n10 15 12\\n1 9 12 23 26 37\") == \"1 1\\n1 9\\n2 2\\n2 13\"\n\nassert solution(\"2 3\\n5 10000000000\\n5 6 9999999999\") == \"1 5\\n2 1\\n2 9999999994\"\n\"\"\"\n\n\"\"\"\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u043e\u0442 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044f\n\"\"\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\nassert solution('aabb') == 'aabb'\nassert solution('abb') == 'abb'\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 6\n10 15 12\n1 9 12 23 26 37''') == '''1 1\n1 9\n2 2\n2 13\n3 1\n3 12'''\nprint('Hoho, here is your flag: {}'.format(solution(stdin)))\n\n\n'''\n[1010,1010,1010,1010,1010,1010]\n[1010,1010,1010,1010,1010,1010]\n[1010,1010,1010,1010,1010,1010]\n[1010,1010,1010,1010,1010,1010]\n[1010,1010,1010,1010,1010,1010]\n[1010,1010,1010,1010,1010,1010]\n\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,1010,1010\n1010,1010,1010,1010,101"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n\"\"\"\n\n\"\"\"\n\u0412\u0435\u0440\u0441\u0438\u044f \u0441 \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u0438\u0435\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0432 \u0442\u0435\u043a\u0441\u0442\u0435.\n\n\u041d\u0430 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0442\u0440\u0435\u0443\u043b\u044c\u0442\u0440\u044b.\n\u041f\u0435\u0440\u0435\u0434 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u0442\u0440\u0435\u0443\u043b\u044c\u0442\u0440\u044b.\n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0437 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0442\u0440\u0435\u0443\u043b\u044c\u0442\u0440\u043e\u0432 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0443\u043a\u0430\u0437\u0430\u043d\u0430 \u0438\u043d\u0434\u0435\u043a\u0441 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0437\u0430\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430.\n\n\u041d\u0430 \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0443\u043a\u0430\u0437\u0430\u043d \u0447\u0438\u0441\u043b\u043e k \u0442\u0440\u0435\u0443\u043b\u044c\u0442\u0440\u043e\u0432, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u043b\u044f \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f.\n\u041a\u0430\u0436\u0434\u044b\u0439 \u0442\u0440\u0435\u0443\u043b\u044c\u0442\u0440 \u0438\u0437 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0442\u0440\u0435\u0445 \u0447\u0438\u0441\u0435\u043b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u0442\u0440\u0435\u0443\u043b\u044c\u0442\u0440\u0430\u043c. \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0440\u0435\u0443\u043b\u044c\u0442\u0440\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u043f\u043e\u043b\u044f\u0440\u043d\u043e\u043c \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u044b\u0445 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432 \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u044b \u0441\u0442\u0440\u043e\u043a\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u0440\u0435\u0443\u043b\u044c\u0442\u0440\u044b. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 1314 \u0441\u0442\u0440\u043e\u043a\u0430 15 \u0442\u0440\u0435\u0443\u043b\u044c\u0442\u0440\u0430 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u043e\u043c\u0443 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0443 \u0441 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c \u0440\u043e\u0432\u043d\u043e \u0434\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0442\u0440\u043e\u043a, \u0442.\u043a. \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u043d\u0430 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0438 \u0441\u0443\u043c\u043c\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0435 15 \u0438 \u0441\u0443\u043c\u043c\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0435 16 \u0438\u0434\u0435\u043d\u0442\u0438\u0447\u043d\u0430.\n\u041d\u0430 \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b k \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u043b\u044f \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u0442\u0440\u0435\u0443\u043b\u044c\u0442\u0440\u043e\u0432 \u0432 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0437 \u0432\u0445\u043e\u0434\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u0440\u0435\u0443\u043b\u044c\u0442\u0440\u0435, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0442\u0440\u0435\u0445 \u0447\u0438\u0441\u0435\u043b.\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0439 \u0438\u0437 \u0441\u0442\u0440\u043e\u043a \u0441 \u0442\u0440\u0435\u0443\u043b\u044c\u0442\u0440\u0430\u043c\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u0441\u0442\u0440\u043e\u043a, \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0444\u0438\u0448\u0435\u043a \u0438 \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0440\u0435\u0441\u0435\u0447\u0435\u043d\u0438\u0439 \u0441\u0442\u0440\u043e\u043a \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043f\u043e\u0434\u0441\u0447\u0451\u0442.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430:\n\n3\n5\n2\n2\n1\n\n3 2 2\n\"\"\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_data) == test_result\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"3 6 5 4\"\n) == \"2 1 3\"\n\nassert solution(\n\"40 40 40 60\"\n) == \"20 20 20\"\n\nassert solution(\n\"201 101 101 200\"\n) == \"1 100 100\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\nassert solution('40 40 40 60') == '20 20 20'\nassert solution('201 101 101 200') == '1 100 100'\n\n\n\"\"\"\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 6 5 4') == '2 1 3'\n\nassert solution('40 40 40 60') == '20 20 20'\n\nassert solution('201 101 101 200') == '1 100 100'"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\nassert solution(\"40 40 40 60\") == \"20 20 20\"\nassert solution(\"201 101 101 200\") == \"1 100 100\"\n\n\"\"\""
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6 5 4\") == \"2 1 3\"\n\"\"\"\n\nimport sys\n\ns = sys.stdin.readline()\na, b, c, d = list(map(int, s.split()))\n\na1, b1, c1 = sorted([a, b, c])\na1 = a1 - 1\nb1 = b1 - 1\nc1 = c1 - 1"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a\\nb') == 'a\\nb'\nassert solution('a1 b1 c1') == 'a1 b1 c1'\nassert solution('a1 a2 a3') == 'a1 a2 a3'\nassert solution('a1 b1 b2') == 'a1 b1 b2'\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9\\nRBGRRBRGG\\n\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\\n\") == \"2\\nBRBGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\\n\") == \"6\\nBGRBRBGBGBGRG\""
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9\\nRBGRRBRGG\\n') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR\\n') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR\\n') == '6\\nBGRRRRBGBGBGRG'\n\"\"\"\n\nn = int(input())\ns = input()"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\nRBGRRBRGG\\n\") == '2\\nRBGRGBRGR'\n\"\"\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\nRBGRRBRGG\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGBRRR\") == \"2\\nRBGRGBRGR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\") == \"6\\nBGRRRBGBGBGRG\"\n\nprint('The code ran Correctly')\n\"\"\""
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('R') == 'R'\nassert solution('G') == 'B'\nassert solution('RRRRRRRR') == 'RRRRRRRR'\nassert solution('BBBBBBBB') == 'BBBBBBBB'\n\n\"\"\"\n\nfrom typing import Dict, List, Tuple\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\nRBGRRBRGG\") == \"2\\nRBGRGBRGR\"\n\"\"\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9\\nRBGRRBRGG\\n\") == 2\nassert solution(\"8\\nBBBGBRRR\\n\") == 2\nassert solution(\"13\\nBBRRRRGGGGGRR\\n\") == 6\n\"\"\"\n\nimport string\n\nclass Solution:\n    def minimumLampColor(self, numberOfLamps: int, lamps: str):\n        # { R: count, G: count, B: count }\n        lampCount = {color: 0 for color in string.ascii_lowercase[:numberOfLamps]}\n        for color in lamps:\n            lampCount[color] += 1\n        # \u8981\u6c42\u81f3\u5c11\u6709\u4e00\u79cd\u989c\u8272\u53ef\u4ee5\u62c6\u5206\u51fa\uff0c\u5171\u6709\u4e09\u79cd\u989c\u8272\u53ef\u4ee5\u62c6\u5206\u51fa\uff0c\u4e00\u79cd\u989c\u8272\u53ef\u4ee5\u62c6\u5206\u51fa\u7684\u6570\u91cf\u5219\u62c6\u5206\u51fa\u7684\u6570\u91cf\u4e5f\u4e00\u5b9a\n        # \u56e0\u6b64\u6309\u7167\u8be5\u989c\u8272\u62c6\u5206\u7684\u6570\u91cf\u6765\u7edf\u8ba1\uff0c\u6700\u540e\u9009\u51fa\u6700\u5c0f\u6570\u91cf\u7684\u989c\u8272\n        lampCount = {color: min(count, numberOfLamps//3) for color, count in lampCount.items()}\n        ans = sum(lampCount.values())\n        return ans\n\n    def minimumLampColor2(self, numberOfLamps: int, lamps: str):\n        # { R: count, G: count, B: count }\n        lampCount = {color: 0 for color in string.ascii_lowercase[:numberOfLamps]}\n        for color in lamps:\n            lampCount[color] += 1\n        # \u8981\u6c42\u81f3\u5c11\u6709\u4e00\u79cd\u989c\u8272\u53ef\u4ee5\u62c6\u5206\u51fa\uff0c\u5171\u6709\u4e09\u79cd\u989c\u8272\u53ef\u4ee5\u62c6\u5206\u51fa\uff0c\u4e00\u79cd\u989c\u8272\u53ef\u4ee5\u62c6\u5206\u51fa\u7684\u6570\u91cf\u5219\u62c6\u5206\u51fa\u7684\u6570\u91cf\u4e5f\u4e00\u5b9a\n        # \u56e0\u6b64\u6309\u7167\u8be5\u989c\u8272\u62c6\u5206\u7684\u6570\u91cf\u6765\u7edf\u8ba1\uff0c\u6700\u540e\u9009\u51fa\u6700\u5c0f\u6570\u91cf\u7684\u989c\u8272\n        lampCount = {color: min(count, numberOfLamps//3) for color, count in lampCount.items()}\n        lampCount = list(lampCount.values())\n        ans = 0\n        if lampCount[0] > 0:\n            ans += lampCount[0] - 1\n        for i in range(1, numberOfLamps):\n            if lampCount[i] > lampCount[i-1]:\n                ans += lampCount[i] - lampCount[i-1] - 1\n        if lampCount[numberOfLamps-1] > 0:\n            ans += lampCount[numberOfLamps-1] - 1\n        return ans\n\nimport unittest\nclass TestSolution(unittest.TestCase):\n    def setUp(self) -> None:\n        self.solution = Solution()\n\n    def testMinimumLampColor(self):\n        self.assertEqual(2, self.solution.minimumLampColor(9, \"RBGRRBRGG\"))\n        self.assertEqual(2, self.solution.minimumLampColor(8, \"BBBGBRRR\"))\n        self."
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\", \"BBBGBRRR\") == \"3\"\nassert solution(\"8\", \"BBBGBRRR\") == \"2\"\nassert solution(\"13\", \"BBRRRRGGGGGRR\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9\\nRBGRRBRGG') == '2\\nRBGRGBRGR'\nassert solution('8\\nBBBGBRRR') == '2\\nBRBGBRGR'\nassert solution('13\\nBBRRRRGGGGGRR') == '6\\nBGRRRRGBGBGRG'\nprint('The solution is correct!')\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9\\nRBGRRBRGG\") == \"2\\nRBGRGBRGR\"\nassert solution(\"8\\nBBBGRRR\") == \"2\\nBRBGRRR\"\nassert solution(\"13\\nBBRRRRGGGGGRR\") == \"6\\nBGRRRRGGGGGRR\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 4 7 5 6\") == \"4\"\n\nassert solution(\"1 3 5 2 4\") == \"2\"\n\nassert solution(\"1 3 5 2 4 6\") == \"2\"\n\nassert solution(\"10 9 8 7\") == \"1\"\n\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\""
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == \"4\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\"\nassert solution(\"4 10 9 8 7\") == \"1\"\nassert solution(\"9 10 11 8 7\") == \"2\"\nassert solution(\"10 11 8 7\") == \"1\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 4 7 5 6\") == \"4\"\nassert solution(\"1 3 5 2 4\") == \"2\"\nassert solution(\"1 3 5 2 4\") == \"2\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\""
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3 4 7 5 6 8\") == \"4\"\nassert solution(\"6 3 5 2 4 6\") == \"2\"\nassert solution(\"4 10 9 8 7\") == \"1\"\nassert solution(\"9 6 7 8 3 4 5 9 10 11\") == \"6\""
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n3 3 4 7 5 6 8\") == \"4\\n2 3 5 6\"\nassert solution(\"6\\n1 3 5 2 4 6\") == \"2\\n1 4\"\nassert solution(\"4\\n10 9 8 7\") == \"1\\n1\"\nassert solution(\"9\\n6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\n\n'''"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 3 4 7 5 6 8') == '4'\nassert solution('6 7 8 3 4 5 9 10 11') == '6'\nassert solution('4 10 8 7') == '1'\nassert solution('9 6 7 8 3 4 5 9 10 11') == '6'\n\n\"\"\""
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 3 5 2 4') == '1'\nassert solution('9\\n6 7 8 3 4 5 9 10 11') == '6'\n\n\"\"\"\n\nn = int(stdin.readline().strip())\na = [int(x) for x in stdin.readline().strip().split(' ')]\n\na = [x for x in a if x > 0]\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 4 7 5 6\") == \"4\"\nassert solution(\"1 3 5 2 4 6\") == \"2\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\"\nassert solution(\"10 9 8 7\") == \"1\"\nassert solution(\"6 7 8 3 4 5 9 10 11\") == \"6\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n3 3 4 7 5 6 8\") == \"4\\n2 3 5 6\"\nassert solution(\"6\\n1 3 5 2 4 6\") == \"2\\n1 4\"\nassert solution(\"4\\n10 9 8 7\") == \"1\\n1\"\nassert solution(\"9\\n6 7 8 3 4 5 9 10 11\") == \"6\\n1 2 3 7 8 9\"\n\"\"\"\n\nn = int(stdin.readline())\narray = list(map(int, stdin.readline().split()))\n\nseq = [array[0]]\ni = 0\nfor j in range(1, n):\n    if array[j] > array[j - 1]:\n        seq.append(array[j])\n        i += 1"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 4 7 5 6 8') == '4', solution('3 3 4 7 5 6 8')\nassert solution('1 3 5 2 4 6') == '2', solution('1 3 5 2 4 6')\nassert solution('6 7 8 3 4 5 9 10 11') == '6', solution('6 7 8 3 4 5 9 10 11')\nassert solution('10 9 8 7') == '1', solution('10 9 8 7')\nassert solution('6 7 8 3 4 5 9 10 11') == '1', solution('6 7 8 3 4 5 9 10 11')\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1') == 'Yes'\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n\") == \"Yes\"\nassert solution(\"3 1\\n\") == \"Yes\"\nassert solution(\"2 2\\n\") == \"No\"\nassert solution(\"3 3\\n\") == \"No\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 2') == 'Yes'\nassert solution('1 1') == 'No'\nassert solution('3 1') == 'Yes'\nassert solution('3 2') == 'No'\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3') == 'Yes'\nassert solution('4 1') == 'No'\n\"\"\"\n\nA, B = map(int, input().strip().split())"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == \"Yes\"\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"Yes\"\nassert solution(\"1 1\") == \"No\"\nassert solution(\"3 3\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1') == 'No'\nassert solution('3 1') == 'Yes'\nassert solution('3 2') == 'Yes'\nassert solution('1 1') == 'Yes'\nassert solution('2 2') == 'Yes'\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1') == 'Yes'\n\n------Problem------\nYou are given an integer array A. From some starting index, you can make a series of jumps. The (1st, 3rd, 5th,...) jumps in the series are called odd-numbered jumps, and the (2nd, 4th, 6th,...) jumps in the series are called even-numbered jumps.\n\nYou may from index i jump forward to index j (with i < j) in the following way:\n\nDuring odd-numbered jumps (ie. jumps 1, 3, 5,...), you jump to the index j such that A[i] <= A[j] and A[j] is the smallest possible value. If there are multiple such indexes j, you can only jump to the smallest such index j.\nDuring even-numbered jumps (ie. jumps 2, 4, 6,...), you jump to the index j such that A[i] >= A[j] and A[j] is the largest possible value. If there are multiple such indexes j, you can only jump to the smallest such index j.\n(It may be the case that for some index i, there are no legal jumps.)\nA starting index is good if, starting from that index, you can reach the end of the array (index A.length - 1) by jumping some number of times (possibly 0 or more than once.)\n\nReturn the number of good starting indexes.\n\n-----Problem Description-----\nGiven an array A of integers, we must find the number of good starting indexes.\n\nGood starting indexes are defined as follows:\n\nStarting at some index i, you can reach the end of the list (index A.length - 1) by jumping some number of times (possibly 0 or more than once.)\nIf A[i] is greater than or equal to all values following it (ie. A[i] >= A[i + 1], A[i] >= A[i + 2],..., A[i] >= A[i + A.length - 1]), then you have a good starting index.\nIt may be the case that you can reach the end of the list starting from a negative index (see below).\n\nIf A[i] is less than any following values, then you cannot reach the end of the list starting from that index.\n\n-----Constraints-----\n1 \\leq A.length \\leq 20000\n1 \\leq A[i] \\leq 10^9\n\n-----Input-----\nGiven two integers A and B, each between 1 and 3 (inclusive).\n\n-----Output-----\nReturn the number of good starting indexes.\n\n-----Sample Input-----\n3 1\n\n-----Sample Output-----\n1\n\nYou can start at index 0, and you can only jump 1 step ahead. There is only one good starting index: 0.\n\n-------SOLUTION-------\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\") == 'Yes'\n\n-------\n\nInput:\n3 2\nOutput:\nYes\n3 is the only integer that satisfies the condition A \\times B \\times C == 3 \\times 2 \\times 3.\n\n3 \\times 2 \\times 3 = 6, which is even, so no integer satisfies the condition.\n\"\"\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"81 58\") == \"110\"\nassert solution(\"81 58\") == \"110\"\n\"\"\""
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"81 58\") == \"110\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"81 58\") == \"110\"\nprint(\"Passed\")\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"81 58\") == \"110\"\n\n\"\"\"\n\nimport sys\nfrom math import ceil"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"81 58\"\n) == \"110\"\nassert solution(\n\"81 58\"\n) == \"110\"\nassert solution(\n\"1 1\"\n) == \"1\"\n\"\"\"\n\n\"\"\"\nWrite a program that takes in two strings and prints \"yes\" if they're anagrams and \"no\" if they're not.\n\n-----Constraints-----\n - All inputs are consist of lowercase letters only.\n - There are no spaces in the inputs.\n\n-----Input-----\nThe first line contains a string.\nThe second line contains another string.\n\n-----Output-----\nPrint \"yes\" if they're anagrams and \"no\" if they're not.\n\n-----Sample Input-----\npython\nonthyp\n\n-----Sample Output-----\nyes\n\"\"\"\n\n\"\"\"\nWrite a program that takes a text file as input and prints the number of occurrences of each word in the file.\n\n-----Constraints-----\n - 1 \\leq n \\leq 100,000 where n is the number of words in the input.\n - The number of words in the input is at least 10 and is at most 100.\n - The input is guaranteed to be a valid text file with no special characters or spaces.\n - The words in the input will only consist of lowercase English letters.\n - The input will not be empty.\n\n-----Input-----\nThe first line of the input contains an integer, n, denoting the number of words in the input.\nEach line i of the n subsequent lines contains a word.\n\n-----Output-----\nPrint the number of occurrences of each word on a separate line.\nThe output should be in lexicographic order.\n\n-----Sample Input-----\n6\nbob\nbob\ncarl\nalex\nbob\nbob\n\n-----Sample Output-----\n2\n1\n1\n0\n\"\"\"\n\n\"\"\"\nWrite a program that accepts a sequence of lines as input and prints the lines as output after making all characters in the sentence capitalized.\n\n-----Constraints-----\n - 1 \\leq n \\leq 100, where n is the number of lines in the input.\n - Each line will contain at least one character.\n - The input will not be empty.\n\n-----Input-----\nThe first line of input contains a single integer, n, denoting the number of lines.\nEach of the n subsequent lines contains a sentence with no leading or trailing spaces.\n\n-----Output-----\nPrint the lines of the input after making all characters in the sentence capitalized.\n\n-----Sample Input-----\n3\nhello world\nPractice makes perfect\n\n-----Sample Output-----\nHELLO WORLD\nPRACTICE MAKES PERFECT\n\"\"\"\n\n\"\"\"\nWrite a program that accepts a sentence and calculate the number of upper case letters and lower case letters.\n\n-----Constraints-----\n - The input sentence is composed of English letters, upper case and lower case.\n - There will always be at least one character in the input sentence.\n\n-----Input-----\nA sentence consisting of uppercase and lowercase letters.\n\n-----Output-----\nPrint two space-separated integers on one line: the number of uppercase letters and the number of lowercase letters.\n\n-----Sample Input-----\nHello world!\n\n-----Sample Output-----\n2 4\n\"\"\"\n\n\"\"\"\nWrite a program that computes the net amount of a bank account based a transaction log from console input. The transaction log format is shown as following:\nD 100\nW 200\n\nD means deposit while W means withdrawal.\nSuppose the following input is supplied to the program:\nD 300\nD 300\nW 200\nD 100\nThen, the output should be:\n500\n\"\"\"\n\n\"\"\"\nThere is a special square room with mirrors on each of the four walls.  The room is  m meters long,  m  meters wide, and  m  meters high.\nThe square room has  paintings on each of the four walls. Each painting is  m  meters wide and  m  meters long.\nYou are standing in the top-left corner of the room (the painting is facing you).  At each step, you can either move one unit along the painting's  m  units long side or  m  units along the painting's  m  units short side.\nYour goal is to move from the top-left corner of the room to the bottom-right corner.  Your position is initially at the top-left corner.\n\n-----Constraints-----\n - 1 \\leq  m  \\leq 1000\n - 1 \\leq  n  \\leq 1000\n - 1 \\leq  p  \\leq 1000\n - 1 \\leq  m  \\leq 1000\n - 1 \\leq  n  \\leq 1000\n - 1 \\leq  p  \\leq 1000\n - p \\leq m\n - m \\leq n\n - The sum of m, n, and p is less than or equal to 1,000.\n\n-----Input-----\nThe first line contains three space-separated integers,  m,  n, and  p,  respectively.\nEach of the next  lines contains three space-separated integers,  i,  j, and  k,  representing that there is a painting  i  units wide,  j  units long, and  k  units high.\n\n-----Output-----\nPrint the minimum number of moves needed to reach the bottom-right corner.\n\n-----Sample Input-----\n1\n1\n1\n\n-----Sample Output-----\n3\n\"\"\"\n\n\"\"\"\nWrite a program that reads a text file containing text only. The file has the following properties:\n - The file is located in a folder named \"text\".\n - The file contains one sentence per line.\n - The words in the sentence are separated by a single space character.\n\nYour program should read the file and print the sentence in a way that shows the words as they appear in the text file.\n\n-----Constraints-----\n - The number of lines in the text file is at least 10 and is at most 100.\n - The text file only contains English characters.\n\n-----Input-----\nThe first line contains the name of the file, \"text\".\nEach of the next  lines contains a sentence.\n\n-----Output-----\nPrint the words of the sentence in a way that shows the words as they appear in the text file.\n\n-----Sample Input-----\na tale that was set out in April\nat the very beginning\nand nobody knew\n\n-----Sample Output-----\na\nt\ne\nl\ne\na\nt\ne\ns\nt\no\nr\nu\nn\nc\nh\ni\nn\nk\na\ni\nn\ng\nu\nn\n\"\"\"\n\n\"\"\"\nWrite a program that reads a text file and counts the number of letters and digits in the file.\n\n-----Constraints-----\n - The text file must contain at least 10 lines.\n - The text file contains only letters and digits.\n - The text file contains no special characters.\n\n-----Input-----\nThe first line of input contains the name of the text file.\n\n-----Output-----\nPrint the number of letters and digits in the text file on a single line, separated by a space.\n\n-----Sample Input-----\nsample_text.txt\n\n-----Sample Output-----\n26\n14\n\"\"\"\n\n\"\"\"\nWrite a program that reads a text file and prints the longest word.\n\n-----Constraints-----\n - The text file must contain at least 10 lines.\n - The text file contains only letters.\n - The text file contains no special characters.\n\n-----Input-----\nThe first line of input contains the name of the text file.\n\n-----Output-----\nPrint the longest word in the text file on a single line.\n\n-----Sample Input-----\nLongestWordInTextFile.txt\n\n-----Sample Output-----\nWord\n\"\"\"\n\n\"\"\"\nYou are given a string. \nYour task is to find out whether  is a valid regex or not.\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('81 58') == '110'\nprint(solution('81 58'))\n\"\"\"\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('81 58') == '110'\nprint('Test finished.')\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('81 58') == '110'\nassert solution('42 14') == '84'\nassert solution('3 9') == '6'\nassert solution('10 30') == '25'\nassert solution('40 20') == '95'\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '1'\nassert solution('1 2 3') == '3'\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n3') == '1'\nassert solution('1\\n5') == '1'\nassert solution('1\\n15') == '1'\nassert solution('1\\n100') == '1'\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == 8\n\"\"\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n') == 8\nprint(solution('2\\n'))\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2') == '8'\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"8\"\n\"\"\"\n\nN = int(input())\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '6'\nassert solution('2') == '4'\nassert solution('5') == '10'\n'''\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 8\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == '1'\nassert solution(\"2\") == '2'\nassert solution(\"3\") == '6'\nassert solution(\"4\") == '24'\nassert solution(\"5\") == '120'\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2') == '8'\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == \"YES\"\nassert solution('7') == \"NO\"\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == 'YES'\n\"\"\"\n\nx = input()\nprint(\"YES\" if int(x) % 5 == 0 and int(x) % 3 == 0 else \"NO\")\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\") == \"YES\"\nassert solution(\"15\") == \"NO\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"NO\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == 'YES'\nassert solution(\"2\") == 'NO'\nassert solution(\"3\") == 'NO'\nassert solution(\"8\") == 'NO'\nassert solution(\"4\") == 'NO'\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"7\") == \"YES\"\nassert solution(\"8\") == \"YES\"\nassert solution(\"9\") == \"YES\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n') == 'YES'\nassert solution('6\\n') == 'NO'\n\n-------\n\nimport sys"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n') == 'YES'\nassert solution('9\\n') == 'NO'\nassert solution('7\\n') == 'YES'\nassert solution('10\\n') == 'NO'\nassert solution('12\\n') == 'YES'\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n') == \"YES\"\nassert solution('10\\n') == \"NO\"\n\"\"\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n') == 'YES'\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABC999') == 'ABC'\n\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"999\") == \"ABC\"\nassert solution(\"1\") == \"ABC\"\n\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"999\") == \"ABC\"\nprint(solution(\"999\"))\n\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('N') == 'N'\nassert solution('9') == 'ABC'\nassert solution('5') == 'ABC'\nassert solution('1997') == 'ABC999'\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('ABC999') == 'ABC'\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABC999') == 'ABC'\nassert solution('ABC1000') == 'ABD'\nassert solution('ABC2000') == 'ABC'\n\"\"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1000') == 'ABC'\nassert solution('1') == 'ABC'\nassert solution('2') == 'ABC'\nassert solution('3') == 'ABC'\nassert solution('4') == 'ABCD'\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('999') == 'ABC'\nassert solution('1000') == 'ABC'\nassert solution('1001') == 'ABD'\nassert solution('1998') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABC999\") == \"ABC\"\nassert solution(\"ABC1000\") == \"ABD\"\nassert solution(\"ABC2000\") == \"ABC\"\nassert solution(\"ABC0\") == \"ABC\"\n\n\"\"\""
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15\\n') == 'Yay!'\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\\n\") == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'\n\"\"\"\n\nimport sys\n\na, b, c, d, e, k = [int(x) for x in sys.stdin.readlines()]\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 4 8 9 15') == 'Yay!'\n\"\"\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n4\\n8\\n9\\n15') == 'Yay!'\nassert solution('1\\n2\\n3\\n4\\n5\\n10') ==':(\nassert solution('1\\n2\\n3\\n4\\n5\\n12') == 'Yay!'\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"1\n2\n4\n8\n9\n15\"\"\") == \"Yay!\"\nassert solution(\"\"\"1\n2\n5\n6\n7\n15\"\"\") == \"Yay!\"\nassert solution(\"\"\"1\n1\n5\n6\n7\n15\"\"\") == \"Yay!\"\nassert solution(\"\"\"1\n1\n2\n3\n4\n15\"\"\") == \"Yay!\"\nassert solution(\"\"\"1\n2\n2\n3\n4\n15\"\"\") == \"Yay!\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 4 8 9 15\") == \"Yay!\"\nassert solution(\"1 2 1 2 4 8 9 15\") == \"Yay!\"\nassert solution(\"1 2 3 4 5 6 7 8 9 15\") == \":(\n\n\"\"\"\n\nimport sys\n\na, b, c, d, e, k = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 4 8 9 15\") == \"Yay!\"\n\n\"\"\""
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 4 8 9 15') == 'Yay!'\n\"\"\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n4\\n8\\n9\\n15\") == \"Yay!\"\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3200', 'pink') == 'pink'\nassert solution('2800', 'pink') =='red'\nassert solution('4800', 'pink') =='red'\nassert solution('3801', 'pink') == 'pink'\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('pink') == 'pink'\n\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('pink') == 'pink'\nassert solution('red') =='red'\n\"\"\"\n\na = int(input())\ns = input()\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"pink\") == \"pink\"\nassert solution(\"blue\") == \"red\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3200\") == \"pink\"\n\n-----Explanation-----\nSince a is greater than 3200, we print s = pink.\n\nimport math\n\na = int(stdin)"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('pink') == 'pink'\n\n\"\"\""
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3200', 'pink') == 'pink'\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3200) == 'pink'\n\"\"\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"pink\") == \"pink\"\n\nIf you want to test your solution with custom input you can uncomment the following line and\nchange the input.\n\nstdin = input\n\n-----\nFor this challenge, we define super digit of an integer  to be the super digit of the \nreversed integer (For the digit p in base b, its super digit is bp). You can iterate \nthrough each digit of the number and for each digit check if the digit is less than 10, \nthen concatenate the super digit for the number formed by the digits of the number. \nOtherwise concatenate the digit itself.\n\nFor example, the super digit of 101 is formed by concatenating the super digit of the \nreversed number formed by the digits of 101.\n\nSuppose the number is made up of digits d1, d2,..., dn.\n\nThe super digit of the number is d1d2d3...dn\n\nIf all the digits are less than 10, then the super digit of the number is just the reversed number formed by the digits of the number.\n\nOtherwise, the super digit of the number is formed by concatenating the super digits of the \nreversed number formed by the digits of the number.\n\nFor example, the super digit of 1234 is formed by concatenating the super digit of the \nreversed number formed by the digits of 1234.\n\nFor example, the super digit of 12345 is formed by concatenating the super digit of the \nreversed number formed by the digits of 12345.\n\nSample Input 1\n12345\n\nSample Output 1\n5\n\nSample Input 2\n9\n\nSample Output 2\n9\n\nSample Input 3\n9876\n\nSample Output 3\n0\n\nSample Input 4\n939\n\nSample Output 4\n9\n\nSample Input 5\n93987\n\nSample Output 5\n9\n\nSample Input 6\n9876\n\nSample Output 6\n0\n\nSample Input 7\n9998\n\nSample Output 7\n6\n\nSample Input 8\n9875\n\nSample Output 8\n7\n\nSample Input 9\n98765\n\nSample Output 9\n7\n\nSample Input 10\n987654321\n\nSample Output 10\n9\n\nSample Input 11\n987654321\n\nSample Output 11\n0\n\nSample Input 12\n987654321\n\nSample Output 12\n6\n\nSample Input 13\n987654321\n\nSample Output 13\n9\n\nSample Input 14\n987654321\n\nSample Output 14\n0\n\nSample Input 15\n987654321\n\nSample Output 15\n6\n\nSample Input 16\n987654321\n\nSample Output 16\n9\n\nSample Input 17\n987654321\n\nSample Output 17\n0\n\nSample Input 18\n987654321\n\nSample Output 18\n6\n\nSample Input 19\n987654321\n\nSample Output 19\n9\n\nSample Input 20\n987654321\n\nSample Output 20\n0\n\nSample Input 21\n987654321\n\nSample Output 21\n6\n\nSample Input 22\n987654321\n\nSample Output 22\n9\n\nSample Input 23\n987654321\n\nSample Output 23\n0\n\nSample Input 24\n987654321\n\nSample Output 24\n6\n\nSample Input 25\n987654321\n\nSample Output 25\n9\n\nSample Input 26\n987654321\n\nSample Output 26\n0\n\nSample Input 27\n987654321\n\nSample Output 27\n6\n\nSample Input 28\n987654321\n\nSample Output 28\n9\n\nSample Input 29\n987654321\n\nSample Output 29\n0\n\nSample Input 30\n987654321\n\nSample Output 30\n6\n\nSample Input 31\n987654321\n\nSample Output 31\n9\n\nSample Input 32\n987654321\n\nSample Output 32\n0\n\nSample Input 33\n987654321\n\nSample Output 33\n6\n\nSample Input 34\n987654321\n\nSample Output 34\n9\n\nSample Input 35\n987654321\n\nSample Output 35\n0\n\nSample Input 36\n987654321\n\nSample Output 36\n6\n\nSample Input 37\n987654321\n\nSample Output 37\n9\n\nSample Input 38\n987654321\n\nSample Output 38\n0\n\nSample Input 39\n987654321\n\nSample Output 39\n6\n\nSample Input 40\n987654321\n\nSample Output 40\n9\n\nSample Input 41\n987654321\n\nSample Output 41\n0\n\nSample Input 42\n987654321\n\nSample Output 42\n6\n\nSample Input 43\n987654321\n\nSample Output 43\n9\n\nSample Input 44\n987654321\n\nSample Output 44\n0\n\nSample Input 45\n987654321\n\nSample Output 45\n6\n\nSample Input 46\n987654321\n\nSample Output 46\n9\n\nSample Input 47\n987654321\n\nSample Output 47\n0\n\nSample Input 48\n987654321\n\nSample Output 48\n6\n\nSample Input 49\n987654321\n\nSample Output 49\n9\n\nSample Input 50\n987654321\n\nSample Output 50\n0\n\nSample Input 51\n987654321\n\nSample Output 51\n6\n\nSample Input 52\n987654321\n\nSample Output 52\n9\n\nSample Input 53\n987654321\n\nSample Output 53\n0\n\nSample Input 54\n987654321\n\nSample Output 54\n6\n\nSample Input 55\n987654321\n\nSample Output 55\n9\n\nSample Input 56\n987654321\n\nSample Output 56\n0\n\nSample Input 57\n987654321\n\nSample Output 57\n6\n\nSample Input 58\n987654321\n\nSample Output 58\n9\n\nSample Input 59\n987654321\n\nSample Output 59\n0\n\nSample Input 60\n987654321\n\nSample Output 60\n6\n\nSample Input 61\n987654321\n\nSample Output 61\n9\n\nSample Input 62\n987654321\n\nSample Output 62\n0\n\nSample Input 63\n987654321\n\nSample Output 63\n6\n\nSample Input 64\n987654321\n\nSample Output 64\n9\n\nSample Input 65\n987654321\n\nSample Output 65\n0\n\nSample Input 66\n987654321\n\nSample Output 66\n6\n\nSample Input 67\n987654321\n\nSample Output 67\n9\n\nSample Input 68\n987654321\n\nSample Output 68\n0\n\nSample Input 69\n987654321\n\nSample Output 69\n6\n\nSample Input 70\n987654321\n\nSample Output 70\n9\n\nSample Input 71\n987654321\n\nSample Output 71\n0\n\nSample Input 72\n987654321\n\nSample Output 72\n6\n\nSample Input 73\n987654321\n\nSample Output 73\n9\n\nSample Input 74\n987654321\n\nSample Output 74\n0\n\nSample Input 75\n987654321\n\nSample Output 75\n6\n\nSample Input 76\n987654321\n\nSample Output 76\n9\n\nSample Input 77\n987654321\n\nSample Output 77\n0\n\nSample Input 78\n987654321\n\nSample Output 78\n6\n\nSample Input 79\n987654321\n\nSample Output 79\n9\n\nSample Input 80\n987654321\n\nSample Output 80\n0\n\nSample Input 81\n987654321\n\nSample Output 81\n6\n\nSample Input 82\n987654321\n\nSample Output 82\n9\n\nSample Input 83\n987654321\n\nSample Output 83\n0\n\nSample Input 84\n987654321\n\nSample Output 84\n6\n\nSample Input 85\n987654321\n\nSample Output 85\n9\n\nSample Input 86\n987654321\n\nSample Output 86\n0\n\nSample Input 87\n987654321\n\nSample Output 87\n6\n\nSample Input 88\n987654321\n\nSample Output 88\n9\n\nSample"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('pink') == 'pink'\nassert solution('red') =='red'\n\"\"\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1210') == 'ARC'\nassert solution('1250') == 'ABC'\nassert solution('5000') == 'AGC'\n\nprint(solution(stdin.strip()))\n\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1200\") == \"ABC\"\n\nassert solution(\"1737\") == \"ARC\"\n\nassert solution(\"9203\") == \"AGC\"\n\nassert solution(\"2501\") == \"ARC\"\n\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1200\") == \"ABC\"\nassert solution(\"1199\") == \"ABC\"\nassert solution(\"2800\") == \"ARC\"\nassert solution(\"4208\") == \"AGC\"\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('ABC') == 'ABC'\nassert solution('ARC') == 'ARC'\nassert solution('AGC') == 'AGC'\n\n'''\n\nR = int(input())"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1199') == 'ABC'\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1199') == 'ABC'"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1200') == 'ABC'\n\"\"\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1150') == 'ARC'\nassert solution('1234') == 'AGC'\nassert solution('1299') == 'ABC'\nassert solution('2484') == 'ARC'\nassert solution('2588') == 'AGC'"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1199') == 'ABC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1200') == 'ABC'\nassert solution('2800') == 'ARC'\nassert solution('4208') == 'AGC'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('119') == '991'\nassert solution('1101') == '991'\nassert solution('1111') == '991'\nassert solution('9111') == '991'\nassert solution('9911') == '991'\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11\") == \"11\"\nassert solution(\"29\") == \"9\"\nassert solution(\"91\") == \"9\"\nassert solution(\"999\") == \"1111\"\nassert solution(\"999\") == \"1111\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"119\") == \"991\"\nprint(solution(\"119\"))"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('119') == '991'\n\"\"\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1119') == '999'\nassert solution('101') == '101'\nassert solution('111') == '999'\nassert solution('9') == '9'\nassert solution('11') == '11'\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('101') == '9'\nassert solution('110') == '99'\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"111\") == \"999\"\nassert solution(\"456\") == \"579\"\nassert solution(\"9\") == \"9\"\n\"\"\""
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"119\") == \"991\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('9') == '1'\nassert solution('11') == '9'\nassert solution('1') == '9'\nassert solution('99') == '9'\nassert solution('111') == '9'\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('101') == '109'\nassert solution('181') == '149'\n\"\"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\nassert solution(\"\") == \"\"\n\"\"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\""
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == expected\n\n\n\"\"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abbaac') == 'abac'\nassert solution('ac') == 'ac'\nassert solution('bccddaaf') == 'bcdaf'\nassert solution('zzzzzzzzzz') == 'zzzzzz'\nassert solution('abcdaf') == 'abcdaf'"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abbaac') == 'abac'\nassert solution('ac') == 'ac'\nassert solution('bccddaaf') == 'bcdaf'\nassert solution('zzzzzzzzzz') == 'zzzzzz'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abbaac') == 'abac'\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\"\"\"\n\nimport unittest\n\n\nclass Solution:\n    # def solution(self, stdin: str) -> str:\n    #     \"\"\"\n    #     Time complexity: O(N^2), where N is the length of the input string.\n    #     \"\"\"\n    #     result = []\n    #     for i in range(0, len(stdin) - 2):\n    #         for j in range(i + 1, len(stdin)):\n    #             if stdin[j] in stdin[i:j]:\n    #                 continue\n    #             result.append(stdin[i:j])\n    #     return min(result, key=len)\n\n    def solution(self, stdin: str) -> str:\n        \"\"\"\n        Time complexity: O(N^2), where N is the length of the input string.\n        \"\"\"\n        result = []\n        for i in range(0, len(stdin)):\n            if i > 0:\n                j = i\n                while j < len(stdin):\n                    if stdin[j] not in stdin[i:j]:\n                        result.append(stdin[i:j])\n                        break\n                    j += 1\n            else:\n                result.append(stdin[i:j])\n\n        return min(result, key=len)\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def test_solution(self):\n        self.assertEqual(self.solution.solution(\"abbaac\"), \"abac\")\n        self.assertEqual(self.solution.solution(\"ac\"), \"ac\")\n        self."
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\nassert solution(\"zzzzzzzzzz\") == \"zzzzzz\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abbaac\") == \"abac\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"bccddaaf\") == \"bcdaf\"\n\n\"\"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 10\\n13 9\\n100 13\\n123 456\\n92 46\") == \"2\\n5\\n4\\n333\\n0\"\nassert solution(\"5\\n1 1\\n2 2\\n3 3\\n4 4\\n5 5\") == \"0\\n2\\n1\\n4\\n2\"\n\n\"\"\"\n\na, b = map(int, input().split())\n\nprint(a // b) if a % b == 0 else print(a // b + 1)"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 4') == '2'\nassert solution('13 9') == '5'\nassert solution('100 13') == '4'\nassert solution('123 456') == '333'\nassert solution('92 46') == '0'\n\"\"\"\n\nimport sys\nimport os\nfrom io import BytesIO, IOBase\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nreadint = lambda: int(sys.stdin.readline().rstrip(\"\\r\\n\"))\nreadints = lambda: map(int, sys.stdin.readline().rstrip(\"\\r\\n\").split())\nreadstr = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nreadstrs = lambda: map(str, sys.stdin.readline().rstrip(\"\\r\\n\").split())\nreadarri = lambda: [int(_) for _ in sys.stdin.readline().rstrip(\"\\r\\n\").split()]\nreadarrs = lambda: [str(_) for _ in sys.stdin.readline().rstrip(\"\\r\\n\").split()]\n\nmod = 998244353\nMOD = int(1e9) + 7\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 2\\n1\\n1 1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n10 4') == '2'\nassert solution('13 9') == '5'\nassert solution('100 13') == '4'\nassert solution('123 456') == '333'\nassert solution('92 46') == '0'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n10 4\n13 9\n100 13\n123 456\n92 46''') == '2\\n5\\n4\\n333\\n0'\nprint('Test finished')\n\n\"\"\""
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 4\\n13 9\\n100 13\\n123 456\\n92 46\") == \"2\\n5\\n4\\n333\\n0\"\nprint(solution(\"10 4\\n13 9\\n100 13\\n123 456\\n92 46\"))\n\n\n-----Explanation-----\n5\n10 4\n13 9\n100 13\n123 456\n92 46\n\n10/4 = 2.5, 4/4 = 1, 13/9 = 1.25, 100/13 = 9, 123/456 = 3.66\n13/9 = 1.333333333333333333333333333333333333333\n100/13 = 9.23076923076923076923076923076923077\n123/456 = 3.66129032258064516129032258064516129\n92/46 = 2.6521739130434782608695652173913043\n\nIn the first test case we need to make 2 moves to make 10/4 = 2.5 divisible by 4 (since it is not already divisible).\nIn the second test case we need to make 5 moves to make 13/9 = 1.333333333333333333333333333333333333333 divisible by 9.\nIn the third test case we need to make 4 moves to make 100/13 = 9.23076923076923076923076923076923077 divisible by 13.\nIn the fourth test case we need to make 3 moves to make 123/456 = 3.66129032258064516129032258064516129 divisible by 456.\nIn the fifth test case we need to make 0 moves to make 92/46 = 2.6521739130434782608695652173913043 divisible by 46.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n10 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(test_data) == result"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 4') == '2'\nassert solution('13 9') == '5'\nassert solution('100 13') == '4'\nassert solution('123 456') == '333'\nassert solution('92 46') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4 3\n3 4 1 2''') == '2.666666666666667'\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\n\"\"\""
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\n\"\"\"\n\nn, k = [int(x) for x in stdin.readline().split()]\na = [int(x) for x in stdin.readline().split()]"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_data.data) == test_data.result\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stin) == 2.666666666666667\n\"\"\"\n\nfrom collections import Counter\nfrom functools import reduce\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\ncnt = Counter(a)\nres = 0\nfor i in cnt.keys():\n    res = max(res, reduce(lambda x, y: x * y, [v for j in range(k) if j < cnt[i]]) / (cnt[i] - k + 1))\n\nprint(res)\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_data) == correct_solution\nprint(solution(stdin))\n\n-----Note-----\n\nIn the first example, $k = 3$, so we have segments $[3, 4, 1]$, $[4, 1, 2]$ and $[3, 4, 1, 2]$. The heat intensity value is 2, since it is the maximum of average temperature over these segments.\n\nIn the second example, $k = 3$, so we have segments $[3, 4, 1]$, $[4, 1, 2]$ and $[3, 4, 1, 2]$. The heat intensity value is 2, since it is the maximum of average temperature over these segments.\n\nIn the third example, $k = 3$, so we have segments $[3, 4, 1]$, $[4, 1, 2]$ and $[3, 4, 1, 2]$. The heat intensity value is 2, since it is the maximum of average temperature over these segments.\n\nIn the fourth example, $k = 3$, so we have segments $[3, 4, 1]$, $[4, 1, 2]$ and $[3, 4, 1, 2]$. The heat intensity value is 2, since it is the maximum of average temperature over these segments.\n\nIn the fifth example, $k = 3$, so we have segments $[3, 4, 1]$, $[4, 1, 2]$ and $[3, 4, 1, 2]$. The heat intensity value is 2, since it is the maximum of average temperature over these segments.\n\nIn the sixth example, $k = 3$, so we have segments $[3, 4, 1]$, $[4, 1, 2]$ and $[3, 4, 1, 2]$. The heat intensity value is 2, since it is the maximum of average temperature over these segments.\n\nIn the seventh example, $k = 3$, so we have segments $[3, 4, 1]$, $[4, 1, 2]$ and $[3, 4, 1, 2]$. The heat intensity value is 2, since it is the maximum of average temperature over these segments.\n\nIn the eighth example, $k = 3$, so we have segments $[3, 4, 1]$, $[4, 1, 2]$ and $[3, 4, 1, 2]$. The heat intensity value is 2, since it is the maximum of average temperature over these segments.\n\nIn the ninth example, $k = 3$, so we have segments $[3, 4, 1]$, $[4, 1, 2]$ and $[3, 4, 1, 2]$. The heat intensity value is 2, since it is the maximum of average temperature over these segments.\n\nIn the tenth example, $k = 3$, so we have segments $[3, 4, 1]$, $[4, 1, 2]$ and $[3, 4, 1, 2]$. The heat intensity value is 2, since it is the maximum of average temperature over these segments.\n\nIn the eleventh example, $k = 3$, so we have segments $[3, 4, 1]$, $[4, 1, 2]$ and $[3, 4, 1, 2]$. The heat intensity value is 2, since it is the maximum of average temperature over these segments.\n\nIn the twelfth example, $k = 3$, so we have segments $[3, 4, 1]$, $[4, 1, 2]$ and $[3, 4, 1, 2]$. The heat intensity value is 2, since it is the maximum of average temperature over these segments.\n\nIn the thirteenth example, $k = 3$, so we have segments $[3, 4, 1]$, $[4, 1, 2]$ and $[3, 4, 1, 2]$. The heat intensity value is 2, since it is the maximum of average temperature over these segments.\n\nIn the fourteenth example, $k = 3$, so we have segments $[3, 4, 1]$, $[4, 1, 2]$ and $[3, 4, 1, 2]$. The heat intensity value is 2, since it is the maximum of average temperature over these segments.\n\nIn the fifteenth example, $k = 3$, so we have segments $[3, 4, 1]$, $[4, 1, 2]$ and $[3, 4, 1, 2]$. The heat intensity value is 2, since it is the maximum of average temperature over these segments.\n\nIn the sixteenth example, $k = 3$, so we have segments $[3, 4, 1]$, $[4, 1, 2]$ and $[3, 4, 1, 2]$. The heat intensity value is 2, since it is the maximum of average temperature over these segments.\n\nIn the seventeenth example, $k = 3$, so we have segments $[3, 4, 1]$, $[4, 1, 2]$ and $[3, 4, 1, 2]$. The heat intensity value is 2, since it is the maximum of average temperature over these segments.\n\nIn the eighteenth example, $k = 3$, so we have segments $[3, 4, 1]$, $[4, 1, 2]$ and $[3, 4, 1, 2]$. The heat intensity value is 2, since it is the maximum of average temperature over these segments.\n\nIn the nineteenth example, $k = 3$, so we have segments $[3, 4, 1]$, $[4, 1, 2]$ and $[3, 4, 1, 2]$. The heat intensity value is 2, since it is the maximum of average temperature over these segments.\n\nIn the twentieth example, $k = 3$, so we have segments $[3, 4, 1]$, $[4, 1, 2]$ and $[3, 4, 1, 2]$. The heat intensity value is 2, since it is the maximum of average temperature over these segments.\n\nIn the twenty-first example, $k = 3$, so we have segments $[3, 4, 1]$, $[4, 1, 2]$ and $[3, 4, 1, 2]$. The heat intensity value is 2, since it is the maximum of average temperature over these segments.\n\nIn the twenty-second example, $k = 3$, so we have segments $[3, 4, 1]$,"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open(\"example.in\").read()) == open(\"example.out\").read()\n\"\"\"\nfrom math import ceil\n\nn, k = map(int, input().split())\narr = list(map(int, input().split()))\n\nmx = max(arr)\n\nstart = ceil(n / k)\n\nresult = 0\nfor i in range(start):\n    result = max(result, sum(arr[i * k:i * k + k]) / k)\n\nprint(result)\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == '2.666666666666667'"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n3 4 1 2') == '2.666666666666667'\n\"\"\"\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nd = dict()\nfor i in range(k, n + 1):\n    d[i] = max([sum(a[i - j:i]) / j for j in range(1, i) if j < i])\n\nprint(max(d.values()))\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n3 4 1 2\") == 2.666666666666667\n\n\"\"\"\n\nn, k = map(int, input().split())\n\narr = list(map(int, input().split()))\n\nmaximum = float(\"-inf\")\n\nfor i in range(n - k + 1):\n    # print(sum(arr[i:i + k]) / k)\n    maximum = max(maximum, sum(arr[i:i + k]) / k)\n\nprint(maximum)\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2\\n1 2\\n4 1 2 3\\n3 2\\n1 3\\n4 2\\n4 3 2 1\") == \"YES\"\nassert solution(\"4 2\\n4 3 2 1\\n1 2\\n3 2\\n1 3\\n4 2\\n4 3 2 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"YES\\nNO\\nYES\\nYES\\nNO\\nYES\\n\"\nassert solution(\"4 2\\n4 1 2 3\\n1 2\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"YES\\nNO\\nYES\\n\"\nassert solution(\"4 2\\n4 3 2 1\\n1 2\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"NO\\nNO\\nNO\\n\"\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"YES\\nNO\\nYES\\nYES\\nNO\\nYES\\n\"\nassert solution(\"4 2\\n4 1 2 3\\n1 2\\n4 2\\n4 3 2 1\\n1 3\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"YES\\nNO\\nYES\\nYES\\nNO\\nYES\\n\"\nassert solution(\"5 1\\n1 2 3 4 5\\n1\\n5 2\\n2 1 2 3 4 5\\n1 4\\n5 1\\n2 1 2 3 4 5\\n1 3\\n5 2\\n2 1 2 3 4 5\\n1 4\\n5 1\\n2 1 2 3 4 5\\n1 3\\n5 2\\n2 1 2 3 4 5\\n1 4\\n\") == \"NO\\nYES\\nNO\\nYES\\nNO\\nYES\\n\"\nassert solution(\"4 2\\n4 1 2 3\\n1 2\\n4 2\\n4 3 2 1\\n1 3\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"YES\\nNO\\nYES\\nYES\\nNO\\nYES\\n\"\nassert solution(\"4 2\\n4 1 2 3\\n1 2\\n4 2\\n4 3 2 1\\n1 3\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 4 5\\n1 4\\n\") == \"NO\\nYES\\nNO\\nYES\\nNO\\nYES\\n\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5') == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"YES\"\nassert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"NO\"\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == 'NO'\nassert solution('1\\n1') == 'YES'\nassert solution('1\\n1\\n1') == 'NO'\nassert solution('1\\n1\\n1\\n1') == 'YES'\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5') == 'YES'\n\"\"\""
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'YES'\nassert solution('2 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'NO'\nassert solution('2 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'NO'\nassert solution('2 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'NO'\nassert solution('2 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n') == 'NO'\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"YES\\nNO\\nYES\\nYES\\nNO\\nYES\\n\"\nassert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"NO\\n\"\nassert solution(\"4 2\\n1 3\\n1 2\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"NO\\n\"\nassert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"NO\\n\"\nassert solution(\"3 2\\n3 2 1\\n1 2\\n4 2\\n4 1 2 3\\n3 2\\n5 1\\n1 2 3 4 5\\n1\\n4 2\\n2 1 4 3\\n1 3\\n4 2\\n4 3 2 1\\n1 3\\n5 2\\n2 1 2 3 3\\n1 4\\n\") == \"NO\\n\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bab\") == \"baabbb\"\n\nprint(solution(\"bab\"))\n\nassert solution(\"bab\") == \"baabbb\"\n\nprint(solution(\"bab\"))\n\nassert solution(\"baabbb\") == \"bab\"\n\nprint(solution(\"baabbb\"))\n\nassert solution(\"bab\") == \"baabbb\"\n\nprint(solution(\"bab\"))\n\nassert solution(\"baabbb\") == \"bab\"\n\nprint(solution(\"baabbb\"))"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"bab\") == \"baabbb\"\nassert solution(\"oopppssss\") == \"oops\"\n\n\"\"\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"oopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n\"\"\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''6\nbaabbb\n''') == 'bab'\n\nassert solution('''10\nooopppssss\n''') == 'oops'\n\nassert solution('''1\nz\n''') == 'z'\n\nassert solution('''2\nvv\n''') == 'vv'\n\nassert solution('''55\nzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzpzp"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"baabbb\") == \"bab\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n\"\"\""
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('bab') == 'baaabbb'\nassert solution('baabbb') == 'bab'\nassert solution('baaabbb') == 'bab'\nassert solution('baaabbb') == 'bab'\nassert solution('baaabbb') == 'bab'\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('baabbb') == 'bab'\nassert solution('ooopppssss') == 'oops'\nassert solution('z') == 'z'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"bab\") == \"baabbb\"\nassert solution(\"ooopppssss\") == \"oops\"\n\"\"\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bab\") == \"baabbb\"\nassert solution(\"ooopppssss\") == \"oops\"\nassert solution(\"z\") == \"z\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\") == \"0\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == \"2\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\nassert solution(\"4 3\\n2 1 3\\n4 3 4\\n2 4 1\\n\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == \"0\"\nassert solution(\"1 0\\n\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"2\""
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\") == \"0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n\") == \"1\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2 1\\n2 3 2\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == 2\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nfrom heapq import heappush, heappop\n\nsys.setrecursionlimit(10 ** 6)\nINF = float('inf')\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 10\\\\n1 2 1\\\\n2 3 2\\\\n2 4 5\\\\n1 4 2\\\\n6 3 3\\\\n6 1 3\\\\n3 5 2\\\\n3 7 1\\\\n4 8 1\\\\n6 2 4\") == \"1\"\nassert solution(\"4 3\\\\n2 1 3\\\\n4 3 4\\\\n2 4 1\") == \"0\"\nassert solution(\"3 3\\\\n1 2 1\\\\n2 3 3\\\\n1 3 3\") == \"1\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"5 6\\\\n1 2 2\\\\n2 3 1\\\\n4 5 3\\\\n2 4 2\\\\n1 4 2\\\\n1 5 3\") == \"2\""
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\") == \"1\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\") == \"0\"\nassert solution(\"1 0\\n\") == \"0\"\nassert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == \"2\"\n\n'''"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 2 1\\n2 3 2\\n1 3 3\\n') == '0'\nassert solution('1 0\\n') == '0'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n') == '1'\nassert solution('5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n') == '2'\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''8 10\n1 2 1\n2 3 2\n2 4 5\n1 4 2\n6 3 3\n6 1 3\n3 5 2\n3 7 1\n4 8 1\n6 2 4''') == '1'\n\nassert solution('''4 3\n2 1 3\n4 3 4\n2 4 1\n''') == '0'\n\nassert solution('''3 3\n1 2 1\n2 3 3\n1 3 3\n''') == '0'\n\nassert solution('''5 6\n1 2 2\n2 3 1\n4 5 3\n2 4 2\n1 4 2\n1 5 3\n''') == '2'\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\") == \"2\"\nassert solution(\"3 3\\n1 2 1\\n2 3 3\\n1 3 3\") == \"0\"\nassert solution(\"1 0\\n\") == \"0\"\nassert solution(\"8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4\\n\") == \"1\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3\\n1 2 1\\n2 3 2\\n1 3 3\\n') == '1'\nassert solution('3 3\\n1 2 1\\n2 3 2\\n1 3 3\\n') == '0'\nassert solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3\\n') == '2'\nassert solution('1 0\\n') == '0'\nassert solution('5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3\\n') == '2'\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RGBGRBB\") == \"GRBG\"\nassert solution(\"RGBGRBBRBG\") == \"GRBGBRBG\"\nassert solution(\"RGBGRBBRBG\") == \"GRBG\"\nassert solution(\"RGBGRBBRBG\") == \"GRBG\""
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\n\"\"\""
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\nassert solution(\"GB\") == \"GRB\"\nassert solution(\"RR\") == \"RR\"\nassert solution(\"R\") == \"GR\"\nassert solution(\"RGBG\") == \"RR\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"RGBGRBB\") == \"RRB\"\nassert solution(\"RGRGRGB\") == \"RRB\"\nassert solution(\"RGBGRGB\") == \"RRB\"\nassert solution(\"GRGBRRR\") == \"RRRR\"\nassert solution(\"RGRGBR\") == \"RRRR\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RGBGRBB\") == 'RGBRGBR'\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\nassert len(sys.argv) == 2\n\nn = int(sys.argv[1])\n\ns = Counter(sys.stdin.readline())\n\ncnt = 0\n\nfor k in s.keys():\n    if (s[k] % 3) == 0:\n        cnt += s[k] // 3\n    else:\n        cnt += s[k] // 3 + 1\n\nprint(cnt)\n\nfor k, v in s.items():\n    if v % 3 == 0:\n        print(k * v // 3)\n    else:\n        print(k * (v // 3 + 1))\n\n\"\"\"\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0432\u043e\u0434\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e nn \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0435.\n\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0430, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0430\u044f \u0438\u0437 nn \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432. \u041a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043d\u0438\u0445 \u0431\u044b\u043b \u0432\u0432\u0435\u0434\u0451\u043d \u0441 \u043d\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u2014 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0442 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0443.\n\n\u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u043e\u0434\u0440\u0430\u0437\u0443\u043c\u0435\u0432\u0430\u044e\u0442\u0441\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438\u043b\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u043c \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430\u043c \u044d\u0442\u0438\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432. \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u0432\u043e\u0434\u0438\u043c\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n\"\"\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('RGBGRBB') == 'RGBRGBR'\n\"\"\"\n\nimport unittest\nimport collections"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBRGBR\"\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(10000)\n\nn = int(input())\ns = input()\nd = {}\nfor i in range(n):\n    d[s[i]] = s.count(s[i])\n    d[s[i]] = d[s[i]] - 1\n\nres = 0\nfor key, value in d.items():\n    if value > 0:\n        res += (value * (value - 1)) // 2\n\nprint(res)\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RGBGRBB\") == \"RGBGRR\"\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RGBGRBB\") == 'GRB'\nassert solution(\"RRR\") == 'RR'\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RGBGRBB\") == \"GRB\"\nassert solution(\"RGBGRBB\") == \"GRB\"\nassert solution(\"RGBGRBB\") == \"GRB\"\nassert solution(\"RGBGRBB\") == \"GRB\"\nassert solution(\"RGBGRBB\") == \"GRB\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\":3,0.2,1.1\\n1,0.3,2.1\\n:\") == '49.0'\n\"\"\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10000 JPY') == 48000.0\n\"\"\"\n\nimport math"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\":\\n2\\n10000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"\n\"\"\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\nprint(\"PASSED\")\n\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10000 JPY\\n0.10000000 BTC\") == \"48000.0\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10000 JPY\\n0.10000000 BTC') == '48000.0'\n\"\"\""
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n10000 JPY\\n0.10000000 BTC\\n\") == \"48000.0\"\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10000 JPY\\n0.10000000 BTC') == '48000.0'\nassert solution('10000 JPY\\n0.10 BTC') == '48000.0'\nassert solution('100000 JPY\\n0.10 BTC') == '480000.0'\nassert solution('100000 JPY\\n0.10000000 BTC') == '4800000.0'\nassert solution('100000 JPY\\n0.10000000 BTC\\n1000000 JPY\\n0.10000000 BTC') == '4800000.1'\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n10000 JPY\\n0.10000000 BTC\\n') == '48000.0'\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"4 2\\n\"\n) == '3'\n\"\"\"\n\n\"\"\"\nTEMPLATE"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2\\n') == '3'\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2\\n') == '3'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\ni = int(sys.stdin.readline())\nj = N-i+1\nprint(j)"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4 2''') == '3'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(sample_input_stdin) == sample_output"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n') == '3'\nassert solution('3 4\\n') == '0'\nassert solution('10 1\\n') == '9'\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ip cc') == 'icpc'\nassert solution('abcdefg') == 'abcefg'\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 4 hello\") == \"hello\"\nassert solution(\"2 9 abcd\") == \"abababcdcdcd\"\nassert solution(\"1 2 abcd\") == \"abcdabcd\"\n\"\"\"\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ip cc') == 'icpc'\nassert solution('abababab') == 'abaabaab'\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ip cc\") == \"icpc\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"1 2 3\"\nassert solution(\"3 4 5\") == \"3 4 5\"\nassert solution(\"5 6 7\") == \"5 6 7\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ip cc\") == \"icpc\"\n\"\"\"\n\ns, t = stdin.split()\ns = list(s)\nt = list(t)\n\nresult = []\n\nfor i in range(len(s)):\n    result.append(s[i])\n    result.append(t[i])\n\nprint(*result, sep=\"\")\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('ip cc') == 'icpc'\n\"\"\""
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ip cc') == 'icpc'\nassert solution('abc') == 'a c b'\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"BBB\") == \"No\"\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABA\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('AAB') == 'Yes'\nassert solution('ABA') == 'Yes'\nassert solution('ABAB') == 'No'\nassert solution('AABB') == 'No'\nassert solution('ABBA') == 'Yes'\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ABA') == 'Yes'\nassert solution('BAB') == 'Yes'\nassert solution('AAB') == 'No'\nassert solution('BBA') == 'No'\nassert solution('ABAB') == 'No'\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABA\") == \"Yes\"\n\"\"\"\n\n\"\"\"\nimport re\nfrom collections import Counter\nimport sys\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABA\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"BAB\") == \"Yes\"\nassert solution(\"BBA\") == \"No\"\nassert solution(\"BBAB\") == \"No\"\nassert solution(\"BBBB\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABA\") == \"Yes\"\nassert solution(\"AAB\") == \"No\"\nassert solution(\"ABB\") == \"Yes\"\nassert solution(\"BBB\") == \"No\"\nassert solution(\"ABC\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'No'\nassert solution('ABA') == 'Yes'\n\n'''"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AB\") == \"Yes\"\nassert solution(\"BA\") == \"Yes\"\nassert solution(\"BAB\") == \"Yes\"\nassert solution(\"ABA\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('RRR') == '3'\nassert solution('SRSR') == '1'\nassert solution('SSSS') == '0'\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RRR\") == \"3\"\nassert solution(\"S\") == \"1\"\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 0\nassert solution('RRR') == 1\nassert solution('SSS') == 1\nassert solution('RRR') == 1\nassert solution('RRS') == 2\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 0\nassert solution('R') == 0\nassert solution('S') == 0\nassert solution('RR') == 0\nassert solution('SS') == 0\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"RRR\") == 3\nassert solution(\"SRSRS\") == 2\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('RRR') == 2\nassert solution('SSS') == 0\n\"\"\"\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RRS\") == \"2\"\nassert solution(\"SRSRS\") == \"3\"\n\"\"\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RRR\") == 1\nassert solution(\"RRS\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RRR\") == 3\nassert solution(\"RRS\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RRR\") == 3\n\"\"\"\n\nimport collections\nimport sys"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"1 2 3 4\") == \"4 3 2 1\"\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 2 3\n4 5 6\n7 8 9''') == '''4 5 6\n1 2 3\n7 8 9'''\n\nassert solution('''2 4 1\n3 3 3\n5 7 9''') == '''3 3 3\n2 4 1\n5 7 9'''\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 2 1') == '1 2 3'\nassert solution('1 2 3') == '3 2 1'\nassert solution('2 3 1') == '1 3 2'\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"1 2 3 4 5 6 7\") == \"7 5 4 1 2 3 6\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\") == \"99 92 93 94 95 96 97 98 99 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"2 1 3\") == \"3 2 1\"\n\"\"\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3') == '3 1 2'\nprint('passed')\nassert solution('2 3 1') == '3 1 2'\nprint('passed')\nassert solution('3 1 2') == '1 2 3'\nprint('passed')\nassert solution('3 2 1') == '1 2 3'\nprint('passed')\nassert solution('1 1 1') == '1 1 1'\nprint('passed')\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3') == '3 1 2'\nassert solution('1 2 3 4') == '3 1 4 2'\n\"\"\""
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\") == \"3 1 2\"\nassert solution(\"5 10 2\") == \"10 5 2\"\n\nfor line in stdin:\n    print(solution(line))\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3') == '3 1 2'\nassert solution('2 1 3') == '3 2 1'\nassert solution('3 2 1') == '1 3 2'\nassert solution('3 2 3') == '3 2 3'\n\"\"\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\"\n\na, b = map(int, input().split())\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"30 100\") == \"100\"\nprint(solution(\"30 100\"))\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"50 200\") == \"200\"\nassert solution(\"60 100\") == \"100\"\nassert solution(\"70 100\") == \"100\"\nassert solution(\"110 100\") == \"110\"\nassert solution(\"110 200\") == \"200\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"30 100\") == \"100\"\nprint(solution(input()))\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''30 100''') == '100'\nassert solution('''10 10''') == '10'\nassert solution('''10 20''') == '10'\nassert solution('''50 100''') == '100'\n\"\"\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100 30\") == \"100\"\n\"\"\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"./sample_input.txt\") == \"100\"\nprint(\"test passed\")\n\"\"\""
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"30 100\") == \"100\"\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(input()) == 2\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"+-++\") == \"2\"\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"+-\") == \"2\"\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('+-') == '0'\nassert solution('+-++') == '1'\nassert solution('-+-+') == '0'\nassert solution('+-++-') == '1'\nassert solution('-+-+') == '0'\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('+-') == '2'\nassert solution('++') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"+-\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('+-') == '2'\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('+-') == '2'\nassert solution('-+++') == '1'\nassert solution('+') == '0'\nassert solution('-') == '0'\nassert solution('-0') == '0'\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"+-\") == \"2\"\nassert solution(\"-+++\") == \"0\"\nassert solution(\"+\") == \"1\"\nassert solution(\"-\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"+-\") == \"0\"\nassert solution(\"+-++\") == \"2\"\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2019/04/30\") == \"TBD\"\n\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2020/12/31\") == \"TBD\"\n\"\"\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\n\n\"\"\"\n\nimport sys\n\nprint(\"Heisei\" if sys.argv[1] < \"2019/04/30\" else \"TBD\")\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\nassert solution(\"2020/01/23\") == \"TBD\"\nassert solution(\"2019/04/29\") == \"TBD\"\nassert solution(\"2019/05/31\") == \"TBD\"\nassert solution(\"2019/06/30\") == \"Heisei\"\n\nprint(\"All test cases passed.\")"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2019/04/30') == 'Heisei'\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.read()\nstdin = stdin.split()\n\nstdin[0] = stdin[0].split('/')"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2019/04/30\") == \"Heisei\"\n\"\"\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2019/04/29') == 'TBD'\n\"\"\"\n\nimport datetime"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2020/04/30') == 'TBD'\n\nprint('all tests passed.')\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2018/04/30') == 'TBD'\n\n\"\"\""
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2019/04/30') == 'Heisei'\nassert solution('2020/04/30') == 'TBD'"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == 14\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == 9\nassert solution(\"3\\n1337 1337 1337\") == 3"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == 14\n\nprint(solution('18'))\nprint(solution('10'))\nprint(solution('3'))\n\n\n-----\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043c\u0435\u043d\u044c\u0448\u0438\u0445 \u0434\u0432\u0443\u0445 \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u043f\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0443 \u0411\u0440\u0443\u043d\u043d\u0430-\u0424\u043b\u0430\u043d\u0442\u0430 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u0438\u043b\u044c\u043d\u043e \u0432\u044b\u0448\u0435, \u0447\u0435\u043c \u043f\u0440\u0438 \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u0435 \u043f\u043e \u043c\u0435\u0442\u043e\u0434\u0443 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `math.factorial`. \u0422\u0430\u043a, \u0435\u0441\u043b\u0438 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043c\u0435\u043d\u044c\u0448\u0438\u0445 10 \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432, \u0442\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c `math.factorial(9)` \u0432\u0441\u0435\u0433\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 \u043e\u0431\u0449\u0435\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430.\n\n\u041d\u043e \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043c\u0435\u043d\u044c\u0448\u0438\u0445 \u0434\u0432\u0443\u0445 \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u0438 \u043b\u0443\u0447\u0448\u0435. \u041f\u043e \u043c\u0435\u0442\u043e\u0434\u0443 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `math.factorial` \u0435\u0441\u0442\u044c \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f `sieve` (\u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u0441 \u0430\u043d\u0433\u043b. \"sieve of eratosthenes\" \u2014 \"\u0441\u043e\u043b\u0435\u043d\u043e\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435\"). \u0412 \u0447\u0430\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0435\u0441\u043b\u0438 \u043f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u043d\u0430\u043c\u0435\u043a\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0430 \u043d\u0435 \u043d\u0430 \u0435\u0451 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b, \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0440\u0435\u0437\u0430. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0443 \u043d\u0430\u0441 \u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u043d\u0430\u0448\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430 \u043d\u0435\u0433\u043e \u0432\u0440\u0435\u043c\u044f \u0434\u0430\u0436\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u043e\u043b\u0435\u0439 \u0441\u0435\u043a\u0443\u043d\u0434.\n\n\u041f\u0440\u0438\u043c\u0435\u0440. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0442\u044c, \u043a\u0430\u043a \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043b\u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043d\u0435\u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u0447\u0438\u0441\u043b\u043e. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u0440. \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043b\u0438 \u0447\u0438\u0441\u043b\u043e $x$ \u043d\u0430 17 \u0431\u0435\u0437 \u043e\u0441\u0442\u0430\u0442\u043a\u0430. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043c\u044b \u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430\u0448\u0443 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430 \u043d\u0435\u0433\u043e \u0432\u0440\u0435\u043c\u044f \u0434\u0430\u0436\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u043e\u043b\u0435\u0439 \u0441\u0435\u043a\u0443\u043d\u0434.\n\n\u041f\u0440\u0438\u043c\u0435\u0440. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0442\u044c, \u043a\u0430\u043a \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043b\u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043d\u0435\u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u0447\u0438\u0441\u043b\u043e. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u0440. \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043b\u0438 \u0447\u0438\u0441\u043b\u043e $x$ \u043d\u0430 17 \u0431\u0435\u0437 \u043e\u0441\u0442\u0430\u0442\u043a\u0430. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043c\u044b \u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430\u0448\u0443 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == \"14\"\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == \"9\"\nassert solution(\"3\\n1337 1337 1337\") == \"3\"\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9') == '9'\n\"\"\"\n\n\n\"\"\"\nGiven a string with digits from 0 to 9, write a program that will count how many unique digits in it.\n\nInput\n\nThe first input line has a string with digits.\n\nOutput\n\nPrint the number of unique digits.\n\nConstraints\n\nThe input string has no more than 100 characters.\nExample\n\nInput:\n\n1232234\n\nOutput:\n\n4\n\"\"\"\n\n\n\"\"\"\n\u0415\u0441\u043b\u0438 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u043c\u0435\u043d\u044c\u0448\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u0447\u0435\u043c \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0439 \u0442\u043e\u043b\u044c\u043a\u043e \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0435 \u0431\u0443\u043a\u0432\u044b, \u0442\u043e \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u0443\u0441\u0442\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\nInput:\n\nFrom: From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008\n\nOutput:\n\nFrom:\n\n\"\"\"\n\n\n\"\"\"\n\u0415\u0441\u043b\u0438 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u043c\u0435\u043d\u044c\u0448\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u0447\u0435\u043c \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0439 \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0443\u0441\u0441\u043a\u0438\u0435 \u0431\u0443\u043a\u0432\u044b, \u0442\u043e \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u0443\u0441\u0442\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\nInput:\n\nFrom: From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008\n\nOutput:\n\nFrom:\n\"\"\"\n\n\n\"\"\"\n\u0415\u0441\u043b\u0438 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u043c\u0435\u043d\u044c\u0448\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u0447\u0435\u043c \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0439 \u0442\u043e\u043b\u044c\u043a\u043e \u0446\u0438\u0444\u0440\u044b, \u0442\u043e \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u0443\u0441\u0442\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\nInput:\n\nFrom: From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008\n\nOutput:\n\nFrom:\n\"\"\"\n\n\n\"\"\"\n\u0415\u0441\u043b\u0438 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u043c\u0435\u043d\u044c\u0448\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u0447\u0435\u043c \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0439 \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u043d\u0430\u043a\u0438 \u043f\u0440\u0435\u043f\u0438\u043d\u0430\u043d\u0438\u044f, \u0442\u043e \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u0443\u0441\u0442\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\nInput:\n\nFrom: From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008\n\nOutput:\n\nFrom:\n\"\"\"\n\n\n\"\"\"\n\u0412 \u043e\u0434\u043d\u043e\u043c \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u043e\u0447\u0435\u043d\u044c \u0445\u043e\u0440\u043e\u0448\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u0440:"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == 14\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == 9\nassert solution(\"3\\n1337 1337 1337\") == 3\n\"\"\""
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 10 10 2 2 1 10 10') == '14'\nassert solution('6 6 6 3 6 1000000000 3 3 6 6') == '9'\nassert solution('1337 1337 1337') == '3'\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == 14\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == 9\n\"\"\"\n\nimport sys\nimport collections\nimport itertools"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\") == \"14\"\nassert solution(\"10\\n6 6 6 3 6 1000000000 3 3 6 6\") == \"9\"\nassert solution(\"3\\n1337 1337 1337\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"18\") == '14'\nassert solution(\"10\") == '9'\nassert solution(\"3\") == '3'\n\"\"\""
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10') == '14'\nassert solution('10\\n6 6 6 3 6 1000000000 3 3 6 6') == '9'\nassert solution('3\\n1337 1337 1337') == '3'"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\n\n---\nimport sys\n\nn, k = [int(x) for x in sys.stdin.readline().split(' ')]\n\nprint(k - max(1, len(set(map(int, sys.stdin.readline().split(' '))[:n]))))\nfor i in range(k - max(1, len(set(map(int, sys.stdin.readline().split(' '))[:n]))), -1, -1):\n    print(sorted(set(map(int, sys.stdin.readline().split(' '))[:n]))[i])\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 2') == '2', \"WA, should be 2\"\nassert solution('10 4') == '3', \"WA, should be 3\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\""
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2\\n') == '2\\n2 1'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3\\n') == '3\\n1 3 2'\nassert solution('100 1\\n1\\n') == '100'\nassert solution('10 2\\n1 2 3 4\\n') == '5'\nassert solution('10 2\\n2 3 4\\n') == '0'\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 2\\n1 2 3 2 1 3 2\") == \"2\"\nassert solution(\"5 2\\n1 2 3 2 1 3\") == \"3\"\nassert solution(\"5 3\\n1 2 3 2 1 3\") == \"1\"\nassert solution(\"5 1\\n1 2 3 2 1 3\") == \"1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2\\n') == '2\\n2 1'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3\\n') == '3\\n1 3 2'\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2') == '2'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3') == '3'"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 2 3 1 1 2 1 2 3 3\") == \"3 2 1\"\nassert solution(\"7 2 3 1 1 2 1 2 3\") == \"2 1\"\nassert solution(\"100 2 100 100\") == \"100 100\"\n\"\"\""
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\narr = list(map(int, sys.stdin.readline().split()))\n\ncount = 0\nans = []\nfor i in range(n):\n    if count < k and arr[i] not in ans:\n        ans.append(arr[i])\n        count += 1\n    else:\n        ans.remove(arr[i - 1])\n        ans.insert(0, arr[i])\nprint(len(ans))\nprint(*ans)\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n4\") == \"3\"\nassert solution(\"4\\n4\") == \"-1\"\n\"\"\""
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_stdin.read()) == test_stdin.read()\nprint(solution(stdin))\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n2\\n1 1\") == '1\\n1\\n1'\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n2 4 8 2 4') == '1 -1 3 2'\nassert solution('2 4 8 2 4\\n8') == '-1 1 3 2'\nassert solution('2 4 8 2 4\\n5') == '-1'\n\"\"\"\n\nfrom typing import List\nfrom functools import reduce\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n\") == \"1 -1 3 2 2\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n\") == \"1\\n-1\\n3\\n2\\n\"\n\"\"\"\nfrom math import log2, ceil\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\\n') == '1 -1 3 2 2'\n\"\"\"\n\n\nfrom math import log2"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 3 4') == '-1\\n1'\nassert solution('1 2 2 4') == '-1\\n0'\nassert solution('1 2 2 4') == '-1\\n1'\nassert solution('1 2 2 4') == '-1\\n1'\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 4\\n2 4 8 2 4\\n8\\n5\\n14\\n10\") == \"1 -1 3 2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('2\\n1') == '1'\nassert solution('3\\n1\\n1') == '1'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == '21'\nassert solution(\"3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\") == '0'"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5') == 21\nassert solution('3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == 0\n\nprint(solution(stdin))\n\n\n\n\n\"\"\"\n\n\"\"\"\nn, k = map(int, input().split())\nlst = list(map(int, input().split()))\nlst2 = list(map(int, input().split()))"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    4 3\n    1 3 2 8 5 5 8 2 2 8 5 2\n    1 2 2 5\n    2 6 7\n    \"\"\"\n) == '21'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\\n') == '21'\nassert solution('3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3\\n') == '0'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\") == \"21\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 3\\n1 3 2 8 5 5 8 2 2 8 5 2') == '21'\nassert solution('3 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == '0'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\"\n) == \"21\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5') == '21'\nassert solution('3 3\\n9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == '0'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5') == '21'\nassert solution('3 3\\n9 9 9 9 9 9 9 9 9 9\\n1 2 3\\n1 2 3') == '0'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5\\n2 6 7\") == \"21\"\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == 2\nassert solution(\"3\\n2 8 10\") == 2\n\n\"\"\"\n\na = list(map(int, input().split()))\na_min = min(a)\na_max = max(a)\n\nops = 0"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 4 6 6 6') == '2\\n1 2 3\\n1 1 2\\n'\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 6 6 6\") == \"2\"\nassert solution(\"2 4 6 6 6\") == \"2\"\nassert solution(\"2 4 6 6 6\") == \"2\"\nassert solution(\"2 4 6 6 6\") == \"2\"\nassert solution(\"2 4 6 6 6\") == \"2\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5\n2 4 6 6 6\"\"\") == \"2\"\nassert solution(\"\"\"3\n2 8 10\"\"\") == \"2\"\nassert solution(\"\"\"4\n1 1 1 1\"\"\") == \"0\"\nassert solution(\"\"\"5\n4 3 5 1\"\"\") == \"2\"\nassert solution(\"\"\"3\n4 3 5 1\"\"\") == \"2\"\n\nprint('Example 1:')\nprint('Input : ')\nprint('a = [2,4,6,6,6]')\nprint('Exception :')\nprint('2')\nprint('Output :')\nprint(solution('5\\n2 4 6 6 6'))\nprint()\n\nprint('Example 2:')\nprint('Input : ')\nprint('a = [2,8,10]')\nprint('Exception :')\nprint('2')\nprint('Output :')\nprint(solution('3\\n2 8 10'))\nprint()\n\nprint('Example 3:')\nprint('Input : ')\nprint('a = [1,1,1,1]')\nprint('Exception :')\nprint('0')\nprint('Output :')\nprint(solution('4\\n1 1 1 1'))\nprint()\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 4 6 6 6\\n\") == \"2\\n1 2 3\\n1 1 2\\n\"\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == \"2\\n1 2 3\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\\n1 1 2\"\nassert solution(\"4\\n2 8 10\") == \"2\\n2 3 2\\n2 2 1\"\nassert solution(\"3\\n2 8 10\") == \"2\\n2 2 1\\n2 3 2\"\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == \"2\"\nassert solution(\"3\\n2 8 10\") == \"2\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n\nprint('The code ran Correctly')"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 4 6 6 6\\n') == '2\\n1 2 3\\n1 1 2\\n', 'example1'\nassert solution('3\\n2 8 10\\n') == '2\\n2 2 1\\n2 3 2\\n', 'example2'\nassert solution('4\\n1 1 1 1\\n') == '0\\n', 'example3'\n\"\"\""
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == 2\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 4 6 6 6\") == \"2\"\nassert solution(\"3\\n2 8 10\") == \"2\"\nassert solution(\"4\\n1 1 1 1\") == \"0\"\n\n##########################################################################\n\nimport sys\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nd = {}\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100010\") == 1\n\"\"\""
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"101010\") == 2\nassert solution(\"11111111\") == 0\nassert solution(\"0111110\") == 1\nassert solution(\"1111101010\") == 1\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100010') == 1\n\nassert solution('10100100') == 2\n\nassert solution('11111111') == 0\n\nassert solution('10011110') == 1\n\nassert solution('01101110') == 2"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10000010\") == 2\nassert solution(\"00000000\") == 0\nassert solution(\"00100000\") == 1\nassert solution(\"10100100\") == 2\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100010') == 1\nassert solution('10101') == 2\nassert solution('111111') == 0\nassert solution('10000010') == 1\nassert solution('10100100') == 2\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100010\") == 1\nassert solution
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"11111111\") == 0\nassert solution(\"10100100\") == 2\nassert solution(\"10011001\") == 1\nassert solution(\"00100010\") == 0\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"101010\") == 2\nassert solution(\"1111110\") == 0\nassert solution(\"1101110\") == 0\nassert solution(\"1111110\") == 0\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"10000010\") == 2\nassert solution(\"00000000\") == 0\nassert solution(\"10100100\") == 1\nassert solution(\"10011001\") == 2\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100010\") == 1\nassert solution(\"101010\") == 2\nassert solution(\"111010\") == 1\nassert solution(\"110010\") == 0\nassert solution(\"111110\") == 0"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3'\nassert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '4'\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n') == '3'\nassert solution('6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n') == '4'\n\"\"\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n4 6 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 4 5\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 1\\n1 2\\n2 3\\n3 4\\n3 5') == '4\\n1 3 5'\nassert solution('6 1\\n1 2\\n2 2\\n2 3\\n2 4\\n2 5\\n2 6') == '6\\n1 3 5 6'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1 2') == ''\nassert solution('1 2\\n1 2') == ''\nassert solution('1 2\\n1 2\\n1 2') == ''\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == 3\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == 3\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == 4\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n4 6 7\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\") == \"3\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\\n\") == \"4\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3') == '4\\n1 3 5'\nassert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n4 6 7'\nassert solution('6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3') == '4\\n1 3 5 6'\n\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\") == \"3\"\nassert solution(\"7 2\") == \"4 6 7\"\nassert solution(\"5 1\") == \"3\"\nassert solution(\"5 1\") == \"1 4 5\"\nassert solution(\"6 1\") == \"4\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n''') == '''\n3\n4 6 7 \n'''\n\nassert solution('''\n5 1\n29 30\n30 30\n29 29\n28 30\n30 30\n''') == '''\n3\n1 4 5 \n'''\n\nassert solution('''\n6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3\n''') == '''\n4\n1 3 5 6\n'''\n\nprint('Success')"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n5 6 15 30') == '30'\nassert solution('3\\n3 4 6') == '10'\n\"\"\"\n\n\nfrom sys import stdin, stdout"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5 6 15 30\") == \"30\"\nassert solution(\"4\\n10 6 30 15\") == \"31\"\nassert solution(\"3\\n3 4 6\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5\n5\n5 6 15 30\n4\n10 6 30 15\n3\n3 4 6\n\"\"\") == \"\"\"\n30\n31\n10\n\"\"\"\nprint(solution(\"\"\"\n5\n5\n5 6 15 30\n4\n10 6 30 15\n3\n3 4 6\n\"\"\"))\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\") == \"30\\n31\\n10\"\n\"\"\"\nimport sys\n\ninp = sys.stdin.read()\n\nlines = inp.split(\"\\n\")\n\nn = int(lines[0])\n\nproblems = list(map(int, lines[1:n + 1]))\n\nk = 3\nans = 0\n\ns = set()\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        for m in range(j + 1, n):\n            if (problems[i] % problems[j]) * (problems[j] % problems[m]) == 0:\n                s.add(problems[i])\n                s.add(problems[j])\n                s.add(problems[m])\n\nfor i in problems:\n    if i not in s:\n        ans += i\n\nprint(ans)\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5 6 15 30\\n4\\n10 6 30 15\") == \"30\"\nassert solution(\"3\\n3 4 6\\n\") == \"10\"\n\n\"\"\"\n\n\nimport sys\n\nstdin = sys.stdin.readline"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n5 6 15 30\") == \"30\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nm = []\nm.append(a[0])\nm.append(a[1])\nm.append(a[2])\n\nfor i in range(3, n):\n    if m[0] % m[1] == 0 and m[1] % m[2] == 0 and m[0] % m[2] == 0:\n        m[0] = m[1]\n        m[1] = m[2]\n        m[2] = a[i]\n    elif m[0] % m[1] == 0 and m[0] % m[2] == 0 and m[1] % m[2] == 0:\n        m[0] = m[1]\n        m[1] = m[2]\n        m[2] = a[i]\n    elif m[0] % m[1] == 0:\n        m[0] = m[1]\n        m[1] = m[2]\n        m[2] = a[i]\n    elif m[0] % m[2] == 0:\n        m[0] = m[2]\n        m[1] = m[2]\n        m[2] = a[i]\n    elif m[1] % m[2] == 0:\n        m[0] = m[1]\n        m[1] = m[2]\n        m[2] = a[i]\n    else:\n        m[0] = m[1]\n        m[1] = m[2]\n        m[2] = a[i]\n\nprint(m[0])\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n5 6 15 30\\n4\\n10 6 30 15\\n3\\n3 4 6\\n') == '30\\n31\\n10'\nassert solution('3\\n3 4 6\\n') == '10'\n\"\"\"\n\nfrom collections import Counter, deque"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5 6 15 30\") == \"30\"\nassert solution(\"4\\n10 6 30 15\") == \"31\"\nassert solution(\"3\\n3 4 6\") == \"10\"\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '1'\nassert solution('2\\n1\\n2') == '3'\nassert solution('3\\n1\\n2\\n3') == '6'\nassert solution('4\\n1\\n2\\n3\\n4') == '10'\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_stdin_1) == test_stdout_1\nassert solution(test_stdin_2) == test_stdout_2\n\"\"\""
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2\\n10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '2\\n1\\n2\\n1'\nassert solution('4\\n3\\n7 4 1 20\\n2\\n2 3 4 99 100\\n1\\n42') == '2\\n1\\n1'\nassert solution('4\\n4\\n7 4 1 20\\n2\\n2 3 4 99 100\\n1\\n42') == '1'\nassert solution('4\\n3\\n7 4 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '2\\n1\\n2\\n1'\nassert solution('4\\n3\\n7 4 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '1'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2\\n10\\n1\\n20\\n2\\n3\\n6\\n5\\n99\\n100\\n42\\n\") == \"2\\n1\\n2\\n1\"\n\"\"\"\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\") == \"2\\n1\\n2\\n1\"\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a1) == \"2\"\nassert solution(a2) == \"1\"\nassert solution(a3) == \"2\"\nassert solution(a4) == \"1\"\n\na1 = [2, 10, 1, 20]\na2 = [3, 6]\na3 = [5, 2, 3, 99, 100]\na4 = [42]\n\n'''\n\n'''\n\nfrom collections import Counter, defaultdict"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2\\n10 1 20\\n2\\n3 6') == 2\nassert solution('4\\n2\\n10 1 20\\n2\\n3 6') == 1\nassert solution('4\\n2\\n10 1 20\\n2\\n3 6') == 2\nassert solution('4\\n2\\n10 1 20\\n2\\n3 6') == 1\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2\\n10\\n1\\n20\\n\") == 2\nassert solution(\"2\\n3\\n6\\n5\\n2\\n3\\n4\\n99\\n100\\n\") == 1\nassert solution(\"1\\n42\\n\") == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n2 10 1 20\n2\n3 6\n5\n2 3 4 99 100\n1\n42''') == '2\\n1\\n2\\n1'\n\nprint('The local tests are done. Click on \"Check\" for more details about the online submission.')\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '4\\n2\\n10 1 20\\n2\\n3 6\\n5\\n2 3 4 99 100\\n1\\n42') == '2\\n1\\n2\\n1'\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n2 10 1 20\\n2\\n3 6\") == \"2\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\") == \"1\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\") == \"2\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\") == \"1\"\nassert solution(\"4\\n2 10 1 20\\n2\\n3 6\") == \"2\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 6\") == \"NO\"\nassert solution(\"5 2 6 27\") == \"YES\"\n\"\"\"\n\nfrom typing import List\nimport unittest"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 3 6\") == \"YES\"\nassert solution(\"5 2 6 27\") == \"NO\"\nassert solution(\"3 3 5 18\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 3 6\") == \"YES\"\nassert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"5 2 6 27\") == \"NO\"\nassert solution(\"3 3 5 18\") == \"YES\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n3\n1 1 1\n2 1 1\n2 2 1\n''') == \"NO\"\n\nassert solution('''\n3\n1 1 1\n2 1 1\n3 1 1\n''') == \"NO\"\n\nassert solution('''\n3\n1 1 1\n2 2 1\n3 3 1\n''') == \"YES\"\n\nassert solution('''\n2\n1 1 1\n2 2 1\n3 2 1\n''') == \"NO\"\n\nassert solution('''\n2\n1 1 1\n1 2 1\n3 2 1\n''') == \"YES\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n1 2 3\n4 5 6\n10 9 8''') == 'NO'\nassert solution('''2\n1 2 3\n4 5 6\n10 9 8''') == 'YES'\nassert solution('''3\n1 2 3\n4 5 6\n10 9 8''') == 'NO'\nassert solution('''5\n1 2 3 4 5\n6 7 8 9 10\n11 12 13 14 15\n16 17 18 19 20\n21 22 23 24 25\n''') == 'YES'\nassert solution('''3\n1 2 3\n4 5 6\n10 9 8''') == 'NO'\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"1 2 3 6\") == \"NO\"\nassert solution(\"5 2 6 27\") == \"YES\"\nassert solution(\"3 3 5 18\") == \"YES\"\nassert solution(\"5 2 6 27\") == \"YES\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 3 4') == 'YES'\n\"\"\"\n\n\nfrom collections import defaultdict\nfrom itertools import product"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4\\n1 2 3 6') == 'YES'\nassert solution('5 2 6 27\\n3 3 5 18') == 'NO'\n\"\"\"\nfrom typing import Tuple"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4\\n1 2 3 6\\n5 2 6 27\\n3 3 5 18') == 'YES\\nNO\\nNO\\nYES'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 'No'\nassert solution('1 2 3 4') == 'No'\nassert solution('1 2 3 6') == 'Yes'\nassert solution('5 2 6 27') == 'Yes'\nassert solution('3 3 5 18') == 'Yes'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 2 7 3 3 1 4') == 'YES'\nassert solution('5 4 3 2 1 0') == 'YES'\nassert solution('4 3 1 5 3') == 'YES'\nassert solution('5 5 5 5 5 5 5 5') == 'NO'\nassert solution('5 5 5 5 5 5') == 'NO'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\"\nassert solution(\"5 4 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\"\nassert solution(\"5 1 1 2 1 2\") == \"NO\"\nassert solution(\"0 1 2 3 4\") == \"YES\\n0\"\nassert solution(\"4 3 2 1 0\") == \"YES\\n1\\n3\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 2 7 3 3 1 4') == 'YES'\nassert solution('5 3 1 5 3') == 'YES'\nassert solution('5 4 3 2 1') == 'NO'\nassert solution('5 1 2 3 4') == 'YES'\nassert solution('0 1 2 3 4') == 'YES'\n\n\"\"\""
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\"\nassert solution(\"5 3 1 5 3\") == \"YES\\n1\\n3\\n5\\n5 4 3 1\"\nassert solution(\"5 4 3 2 1 0\") == \"YES\\n0\\n\"\nassert solution(\"5 4 3 2 1 1\") == \"NO\"\nassert solution(\"5 5 5 5 5\") == \"NO\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n\"\nassert solution(\"5 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\nassert solution(\"5 0 1 5 3\") == \"YES\\n0\\n3\\n4\\n5 4 3 1\\n\"\nassert solution(\"5 3 1 0 3\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\nassert solution(\"5 3 1 5 3\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 2 7 3 3 1 4') == 'YES'\nassert solution('5 3 1 5 3') == 'YES'\nassert solution('5 3 1 5 2') == 'NO'\nassert solution('5 3 1 5') == 'YES'\nassert solution('5 3 1 4') == 'YES'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4 3 2 1 0\") == \"YES\\n1\\n3\\n4\\n5 4 3 2 1\"\nassert solution(\"1 1 2 1 2\") == \"NO\"\nassert solution(\"4 3 1 5 3\") == \"YES\\n2\\n3 5\\n4 3 1\"\n\"\"\"\nfrom typing import List\n\nfrom Helpers import helper as hlp\nfrom Helpers import test_class\n\nclass Solution(test_class.test_class):\n\n    def setUp(self):\n        super().setUp()\n\n    def clean_data(self, stdout: str, n: int) -> List[int]:\n        return [int(num) for num in stdout.strip().split(\"\\n\")]\n\n    def test_solution_0(self):\n        self.assertEqual(self.clean_data(self.method_under_test(5, \"4 3 2 1 0\"), 5), \"YES\\n1\\n3\\n4\\n5 4 3 2 1\")\n\n    def test_solution_1(self):\n        self.assertEqual(self.clean_data(self.method_under_test(5, \"4 3 1 5 3\"), 5), \"YES\\n2\\n3 5\\n4 3 1\")\n\n    def test_solution_2(self):\n        self."
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 3 1 5 3\") == \"YES\"\nassert solution(\"5 4 3 2 1\") == \"NO\"\nassert solution(\"5 1 1 5 3\") == \"YES\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2 7 3 3 1 4\\n\") == \"YES\\n2\\n3 7\\n5\\n7 4 3 2 1\\n\"\nassert solution(\"4 3 1 5 3\\n\") == \"YES\\n1\\n3\\n4\\n5 4 3 1\\n\"\nassert solution(\"5 1 1 2 1 2\\n\") == \"NO\\n\"\nassert solution(\"5 0 1 2 1 2\\n\") == \"YES\\n0\\n\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2 7 3 3 1 4\") == \"YES\"\nassert solution(\"5 3 1 5 3\") == \"YES\"\nassert solution(\"5 0 1 5 3\") == \"NO\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\"\"\") == \"18\"\nassert solution(\"\"\"5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 1\"\"\") == \"8\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\"\"\") == \"18\"\nassert solution(\"\"\"5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 1\"\"\") == \"8\"\nassert solution(\"\"\"5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\"\"\") == \"-1\""
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n') == 18\n\"\"\"\n\n\nfrom typing import List, Tuple, Dict\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0') == '18'\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == \"18\"\nassert solution(\"5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 1 0\\n3 0 1\") == \"8\"\n\"\"\""
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n') == '18'\nassert solution('5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 0 1\\n3 0 0\\n') == '8'\nassert solution('5 3\\n3 0 0\\n2 1 0\\n3 1 0\\n5 0 1\\n3 0 1\\n') == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n2 1 1\\n3 1 0\\n2 1 0\\n5 0 1\\n3 1 1\\n2 1 1') == '15'\nassert solution('4 3\\n3 1 1\\n2 1 1\\n5 0 1\\n3 1 1') == '-1'\nassert solution('5 3\\n2 1 1\\n3 1 0\\n5 0 1\\n3 1 1') == '7'\n\n'''\n\nimport sys"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\") == 18\n\"\"\""
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n\") == \"18\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n\") == 18\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(2500)\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n\") == '2\\n6\\n-1\\n7\\n'\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n\") == '6\\n-1\\n7\\n'\n\"\"\"\nimport sys\nfrom tools import timing"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 1 1\\n1 1 2\") == \"1\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\") == \"2\"\nassert solution(\"3 3\\n1 1 1\\n1 1 1\") == \"-1\"\nassert solution(\"4 2\\n1 1 1\\n2 2 2\") == \"2\"\nassert solution(\"4 2\\n1 1 1\\n2 2 2\") == \"-1\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n4 2\\n1 6\\n1 2\") == \"1\"\nassert solution(\"2\\n4 2\\n1 6\\n1 2\") == \"6\"\nassert solution(\"1\\n4 2\\n1 6\\n1 2\") == \"-1\"\nassert solution(\"1\\n1 1 1\\n1\") == \"1\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1\\n1 1 2 3 1\\n4 2\") == \"2\"\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\") == \"2\"\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\") == \"2\"\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\") == \"2\"\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\") == \"2\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\\n\") == '2\\n6\\n-1\\n7'\n\"\"\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == '2\\n6\\n-1\\n7'\nassert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == '2\\n6\\n-1\\n7'\n\n\"\"\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"6 1\\n1 1 2 3 4 5 6\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") == \"1\\n1\\n1\\n1\\n1\\n1\\n1\"\nassert solution(\"4 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"6 1\\n1 1 2 3 4 5 6\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") == \"1\\n1\\n1\\n1\\n1\\n1\\n1\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '2'\n\nassert solution('''4 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '6'\n\nassert solution('''4 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '-1'\n\nassert solution('''4 1\n1 1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n''') == '7'\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"4\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"4\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"4\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\nassert solution(\"4\\n5 1\\n1 1 2 3 1\\n4 2\\n6 4 8 5\\n2 2\\n1 6\\n3 5\\n5 2 5\") == \"2\\n6\\n-1\\n7\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 15 16 23\") == 5\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == 0\nassert solution(\"4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == 3\n\nprint(solution(stdin.strip()))"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8 15 16 23') == '5'\nassert solution('4 8 4 15 16 8 23 15 16 42 23 42') == '0'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '3'\nassert solution('15') == '0'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '3'\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('4 8 15 16 23') == '5'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 8 15 16 23\") == \"5\"\nassert solution(\"4 8 4 15 16 8 23 15 16 42 23 42\") == \"3\"\nassert solution(\"4 8 4 15 16 8 16 23 15 16 42 23 42\") == \"3\"\nassert solution(\"4 8 4 15 16 8 16 23 15 16 42 23 42\") == \"3\"\nassert solution(\"4 8 4 15 16 8 16 23 15 16 42 23 42\") == \"3\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n4 8 15 16 23\") == \"5\"\nassert solution(\"12\\n4 8 4 8 15 16 8 16 23 15 16 42 23 42\") == \"0\"\nassert solution(\"15\\n4 8 4 8 15 16 8 16 23 15 16 4 42 23 42\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('8') == 0\nassert solution('4') == 0\nassert solution('4\\n8\\n15\\n16\\n23\\n42') == 5\nassert solution('4\\n8\\n15\\n16\\n23\\n42\\n4\\n8\\n15\\n16\\n23\\n23\\n42') == 3\n\nprint('test passed')\n\n\"\"\""
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 8 15 16 23') == '5'\nassert solution('4 8 4 15 16 8 23 15 16 42 23 42') == '0'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 8 15 16 23') == '5'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '0'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '3'\n\"\"\""
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8 15 16 23') == '5'\nassert solution('4 8 4 15 16 8 23 15 16 42 23 42') == '0'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '3'\n\"\"\"\n\nfrom typing import List\n\nimport sys\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 8 15 16 23') == '5'\nassert solution('4 8 4 15 16 8 23 15 16 42 23 42') == '0'\nassert solution('4 8 4 8 15 16 8 16 23 15 16 42 23 42') == '3'\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '0'\nassert solution('1 3') == '2'\nassert solution('1 1') == '0'\nassert solution('2 1') == '2'\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 5\\n13 42') == '0\\n3\\n2'\nassert solution('13 37\\n18 4') == '2\\n1'\nassert solution('1337 420\\n123456789 1000000000') == '8\\n9150'\nassert solution('100 500\\n9000') == '87654322'\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5\\n13 42') == '0'\nassert solution('13 37\\n42') == '3'\nassert solution('123456789 1000000000\\n100500 9000') == '92'\nassert solution('123456789 1000000000\\n100500 9000') == '92'\n\n\"\"\"\n\nimport sys\nfrom itertools import count"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\") == \"0\"\nassert solution(\"13 42\") == \"3\"\nassert solution(\"18 4\") == \"2\"\nassert solution(\"1337 420\") == \"92\"\nassert solution(\"123456789 1000000000\") == \"87654322\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n13 42\\n18 4\\n1337 420\\n123456789 1000000000\\n100500 9000\") == \"0\\n3\\n2\\n92\\n87654322\\n9150\"\n\"\"\"\n\nimport io\nimport os\nimport sys\nimport atexit\nfrom timeit import default_timer as timer\n\nclass Input:\n    __is__ = None\n    def __init__(self, input, output):\n        self.__is__ = io.TextIOWrapper(io.BufferedRWPair(input, output))\n    def readline(self):\n        return self.__is__.readline().rstrip(\"\\r\\n\")\n    def close(self):\n        self.__is__.close()"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\"\nassert solution(\"13 37\\n18 4\") == \"3\"\nassert solution(\"123456789 1000000000\\n100500 9000\") == \"87654322\"\nassert solution(\"100500 9000\") == \"9150\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\n13 42\") == \"0\\n3\"\nassert solution(\"13 37\\n100500 9000\") == \"2\\n2\"\n\"\"\"\n\n\nfrom collections import deque\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_case_1) == expected_result_1\nassert solution(test_case_2) == expected_result_2\n\"\"\""
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\n13 42') == '0'\nassert solution('4 5\\n13 42\\n18 4') == '3'\nassert solution('4 5\\n13 42\\n18 4\\n1337 420') == '2'\nassert solution('4 5\\n1342\\n18 4\\n1337 420') == '2'\nassert solution('4 5\\n13 42\\n18 4\\n1337 420\\n123456789 1000000000') == '9150'\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5') == '0'\nassert solution('13 42') == '3'\nassert solution('18 4') == '2'\nassert solution('1337 420') == '2'\nassert solution('123456789 1000000000') == '9'\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\""
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n5 12345\") == \"12339\"\nassert solution(\"5 0 4\") == \"0\"\nassert solution(\"10 5 15\") == \"15\"\nassert solution(\"17 8 54321\") == \"54306\"\nassert solution(\"499999993 9 1000000000\") == \"999999995\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\nassert solution(\"2 0 999999999\\n0 0 999999999\\n0 0 999999999\\n0 0 999999999\") == \"999999998\\n999999998\\n999999998\\n999999998\"\n\"\"\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\nassert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\nassert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\nassert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\nassert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339 0\\n15 54306\\n54306 185\\n999999995 99999998\"\nassert solution(\"5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"0\\n15 54306\\n54306 185\\n999999995 99999998\"\nassert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339 0\\n15 54306\\n54306 185\\n999999995 99999998\"\nassert solution(\"5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"0\\n15 54306\\n54306 185\\n999999995 99999998\"\nassert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339 0\\n15 54306\\n54306 185\\n999999995 99999998\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n7 5 12345') == '12339'\nassert solution('5\\n5 0 4') == '0'\nassert solution('10\\n5 15') == '15'\nassert solution('17\\n8 54321') == '54306'\nassert solution('499999993\\n9 1000000000') == '999999995'\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\") == \"12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998\"\n\n\"\"\"\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\n5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187') == '12339\\n0\\n15\\n54306\\n999999995\\n185\\n999999998'\n\"\"\"\n\nimport sys\nfrom math import gcd"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n\"\"\""
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == 6\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == 8\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == 4\n\"\"\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 2 3 2 4 10\") == 6\nassert solution(\"1 2 2 3 2 4 6 10\") == 8\nassert solution(\"1 2 2 3 2 4 5\") == 4\n\"\"\"\nfrom typing import List, Tuple"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\n\"\"\""
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '7 2'\n) == '6'\n\nassert solution(\n    '8 2'\n) == '8'\n\nassert solution(\n    '7 3'\n) == '4'\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n1 2 2 3 2 4 10\") == \"6\"\nassert solution(\"8 2\\n1 2 2 3 2 4 6 10\") == \"8\"\nassert solution(\"7 3\\n1 2 2 3 2 4 5\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 2\\n1 2 2 3 2 4 10') == '6'\nassert solution('8 2\\n1 2 2 3 2 4 6 10') == '8'\nassert solution('7 3\\n1 2 2 3 2 4 5') == '4'\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABC') == 'abc'\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\nstring = stdin.readline().strip()\nprint(string[:k - 1] + string[k - 1].lower() + string[k:])\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"ABC\") == \"abc\"\nprint(solution(\"ABC\"))\n\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    n, k = line.strip().split(' ')\n    n, k = int(n), int(k)\n    s = input()\n    print(s[:k - 1] + s[k - 1].lower() + s[k:])"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC\") == \"abc\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC\") == \"abc\"\nprint(solution(\"ABC\"))"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABC') == 'abc'\nassert solution('abc') == 'abc'\nassert solution('AbC') == 'abC'\n\nimport sys"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABC\") == \"abc\"\n\n\"\"\"\n\n\"\"\"\nThe solution below does not work for the long string in the problem.\nNeed to come up with a better solution.\n\"\"\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ABC') == 'abc'\n\nassert solution('abC') == 'Abc'\n\nassert solution('aBC') == 'aBc'\n\nassert solution('ABC ') == 'Abc '\n\nassert solution(' ABC') == 'Abc '"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABC') == 'aBC'\nassert solution('AaAaAa') == 'aAaAaA'\nassert solution('AaC') == 'aAaC'\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC\") == \"abc\"\nassert solution(\"\") == \"\"\n\"\"\"\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABC\") == \"abc\"\n\"\"\"\n\n\"\"\"\nI had a tough time understanding this. I honestly do not know how to explain the instructions that were given. \nI can read the problem quite well, and I don't have enough time to figure out the other parts. I was also surprised that \nthere was no sample input to test against, so it was hard to get any kind of ideas for the solution. I tried to do it \nmyself, but it just took me a whole week to figure it out. Finally, I had a lot of help from a youtube video and \nanother person on stackexchange. It helped me get some of the ideas from the problem and help with the design of the \nsolution. The video helped me understand that I need to lowercase the first character and then I need to make it \na substring. The idea of using rfind() came to my mind right away. \n\"\"\""
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\\n\") == \"3\\n4\\n6\\n1\\n5\\n2\\n\"\n\n\"\"\""
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40') == '3\\n4\\n6\\n1\\n5\\n2'\n\"\"\"\n\n\"\"\"\nSolution:\n\n1. Sort the input in lexicographic order of the city names.\n2. Sort the input by the scores descending.\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\""
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\\n\") == \"3\\n4\\n6\\n1\\n5\\n2\\n\"\nassert solution(\"moscow 10\\nkhabarovsk 20\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\\n\") == \"1\\n3\\n5\\n4\\n2\\n6\\n\"\nassert solution(\"moscow 10\\nkazan 50\\nkhabarovsk 20\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\\n\") == \"1\\n2\\n3\\n4\\n5\\n6\\n\"\nassert solution(\"moscow 10\\nkazan 50\\nkhabarovsk 20\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\\n\") == \"1\\n2\\n3\\n4\\n5\\n6\\n\"\nassert solution(\"kazan 50\\nkhabarovsk 20\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\\n\") == \"2\\n3\\n1\\n4\\n5\\n6\\n\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"khabarovsk 20\\n\"\n                 \"moscow 10\\n\"\n                 \"kazan 50\\n\"\n                 \"kazan 35\\n\"\n                 \"moscow 60\\n\"\n                 \"khabarovsk 40\") == \"3\\n\" \\\n               \"4\\n\" \\\n               \"6\\n\" \\\n               \"1\\n\" \\\n               \"5\\n\" \\\n               \"2\\n\"\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n\n\"\"\"\n\nimport sys\nimport collections\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        line = stdin.split('\\n')\n        N = int(line[0])\n        pairs = [line[i].split(' ') for i in range(1, N + 1)]\n        r = [i[0] for i in sorted(pairs, key=lambda x: (x[1], -int(x[2])))]\n        for i in r:\n            print(i)\n\nsolution(sys.stdin.read())"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n\"\"\""
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\n\n\"\"\"\n\nfrom collections import OrderedDict"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\"\nprint(solution(\"khabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\"))"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\nkhabarovsk 20\\nmoscow 10\\nkazan 50\\nkazan 35\\nmoscow 60\\nkhabarovsk 40\") == \"3\\n4\\n6\\n1\\n5\\n2\""
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 900') == 'Yes'\n\"\"\"\n\nk, x = map(int, input().split(' '))\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 900\") == \"Yes\"\nassert solution(\"3 798\") == \"No\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\"\n\nK, X = map(int, input().split(' '))\nprint(\"Yes\" if K*500 >= X else \"No\")\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 900\") == \"Yes\"\nprint(solution(\"2 900\"))\n\n\"\"\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'Yes'\nassert solution('1 1') == 'No'\nassert solution('1 2') == 'Yes'\nassert solution('2 1') == 'No'\nassert solution('1 9999999999') == 'No'\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 900') == 'Yes'\n\"\"\"\n\nK, X = map(int, input().split())"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n') == 'Yes'\nassert solution('2 10\\n') == 'No'\nassert solution('4 100\\n') == 'No'\nassert solution('4 101\\n') == 'No'\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str([2,900])) == 'Yes'\n\n\"\"\"\nfrom typing import List\n\nK, X = [int(_) for _ in input().split()]\nprint(\"Yes\" if K * 500 + X >= 1000 else \"No\")\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1200') == 'Yes'\nassert solution('2 800') == 'No'\nassert solution('1 500') == 'Yes'\nassert solution('3 3000') == 'No'\n\"\"\"\n\nK, X = input().split()\nK, X = int(K), int(X)\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 900\") == \"Yes\"\n\"\"\"\n\nK, X = map(int, input().split())\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 10') == '0.145833333333'\n\"\"\""
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10\") == '0.145833333333'\n\"\"\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10\") == '0.145833333333'\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 10') == '0.145833333333'\nassert solution('1 1') == '0.5'\nassert solution('10 10') == '0.990463256836'\nassert solution('10 100') == '0.999999999984'\nassert solution('10 1000000000') == '0.999999999984'\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 10') == '0.145833333333'\n\"\"\"\n\nN, K = [int(v) for v in stdin.split()]\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 10') == '0.145833333333'\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10\") == \"0.145833333333\"\n\"\"\"\n\nfrom typing import List\n\nimport re\n\nfrom collections import Counter\n\n\nclass Solution:\n    def __init__(self) -> None:\n        self.out = \"\"\n\n    def solve(self, input_data: str) -> str:\n        n, k = map(int, input_data.split())\n\n        def func(n: int, k: int) -> int:\n            if k == 1:\n                return 1\n            if n == 1:\n                return 0\n            m = n + 1\n            n //= m\n            if k <= n:\n                return func(n, k) + (func(n, k - 1) * (m - 1) // m)\n            return func(n, k % m)\n\n        return f\"{func(n, k) / (2 ** n)}\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10\") == '0.145833333333'\n\"\"\"\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"3 10\\n\") == '0.145833333333'\nassert solution(\"1 1\\n\") == '0.5'\nassert solution(\"1 2\\n\") == '0.7'\nassert solution(\"1 1000000000\\n\") == '0.99999'\nassert solution(\n\"5 10\\n\") == '0.03125'\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10\") == '0.145833333333'\n\"\"\"\n\nimport re\nfrom math import factorial\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(SAT) == 1\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"SAT\") == \"1\"\nprint(\"Sample 1 - Correct\")\n\nassert solution(\"MON\") == \"2\"\nprint(\"Sample 2 - Correct\")\n\n\"\"\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"SAT\") == 1\nassert solution(\"FRI\") == 5\nassert solution(\"SUN\") == 0\n\"\"\"\n\ndays = {'SUN': 6, 'MON': 0, 'TUE': 1, 'WED': 2, 'THU': 3, 'FRI': 4, 'SAT': 5}\n\nday = 'SUN'\nday_cnt = 0\nwhile day!= 'SUN':\n    day_cnt += 1\n    day = str(int(day) + 1)\n    if day_cnt > 7:\n        day_cnt = 0\nprint(day_cnt)\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"SAT\") == 1\n\"\"\"\n\ns = input()\ndays = {'SUN': 1, 'MON': 2, 'TUE': 3, 'WED': 4, 'THU': 5, 'FRI': 6, 'SAT': 7}\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"SAT\") == \"1\"\nprint(\"All tests passed.\")\n\"\"\""
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('SAT') == '1'\nassert solution('SUN') == '0'\nassert solution('MON') == '1'\nassert solution('TUE') == '2'\nassert solution('WED') == '3'\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('SAT') == '1'\nassert solution('SUN') == '2'\nassert solution('MON') == '3'\nassert solution('TUE') == '4'\nassert solution('WED') == '5'\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"SAT\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"SAT\") == 1\nprint(\"Tests for solution passed.\")\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('SAT') == '1'\nassert solution('MON') == '0'\nassert solution('WED') == '0'\nassert solution('THU') == '0'\nassert solution('FRI') == '0'\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(r=2, D=10, x2000=20) == 30\nassert solution(r=2, D=10, x2000=40) == 50\nassert solution(r=2, D=10, x2000=60) == 90\nassert solution(r=2, D=10, x2000=80) == 170\nassert solution(r=2, D=10, x2000=100) == 330\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\n-----"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\nprint(solution('2 10 20'))"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\nprint(solution(\"2 10 20\"))\n\n\"\"\""
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\nprint(solution(stdin), end='')\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10 20\\n\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n\"\"\""
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10 20\") == \"30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250\"\nprint(solution(\"2 10 20\"))"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'\n\"\"\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 10 20') == '30\\n50\\n90\\n170\\n330\\n650\\n1290\\n2570\\n5130\\n10250'"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3 1 1 4\") == \"5\"\nassert solution(\"1 3 2 1 4\") == \"4\"\nassert solution(\"4 1 2\") == \"0\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == '5'\nassert solution(\"5\\n1 3 2 1 4\") == '4'\nassert solution(\"3\\n4 1 2\") == '0'\nassert solution(\"1\\n4 1 2\") == '0'\nassert solution(\"5\\n1 3 1 1 4\") == '5'\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 3 1 1 4') == '5'\nassert solution('5\\n1 3 2 1 4') == '4'\nassert solution('3\\n4 1 2') == '0'\nassert solution('3\\n4 1 2') == '0'\nassert solution('4\\n1 3 2') == '0'\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\nassert solution(\"3\\n4 1 2\") == \"0\"\nassert solution(\"5\\n1 2 4 6 2\\n7 1 2 4 6\\n\") == \"9\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 3 1 1 4') == '5'\nassert solution('5\\n1 3 2 1 4') == '4'\nassert solution('3\\n4 1 2') == '0'\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == 5\nassert solution(\"5\\n1 3 2 1 4\") == 4\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 3 1 1 4') == '5'\nassert solution('5\\n1 3 2 1 4') == '4'\nassert solution('3\\n4 1 2') == '0'\n\"\"\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 3 1 1 4') == '5'\nassert solution('5\\n1 3 2 1 4') == '4'\nassert solution('5\\n1 3 2 1 4') == '0'"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n1 3 1 1 4\n''') == '5\n\nassert solution('''5\n1 3 2 1 4\n''') == '4\n\nassert solution('''3\n4 1 2\n''') == '0\n\nassert solution('''4\n1 3 2\n''') == '0\n\nassert solution('''4\n1 3 2\n''') == '0\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 3 1 1 4\") == \"5\"\n\nassert solution(\"5\\n1 3 2 1 4\") == \"4\"\n\nassert solution(\"3\\n4 1 2\") == \"0\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000') == 'YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000'\nprint(solution(stdin))\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000') == 'YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000'\nprint(solution(stdin))\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'YES'\nassert solution('1 2 3\\n4 5 6') == 'NO'\nassert solution('1 1000000000 1000000000\\n1 2 3') == 'NO'\nassert solution('1 1000000000 1000000000\\n4 5 6') == 'YES'\nassert solution('3 2 3\\n4 5 6') == 'NO'\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 2') == 'YES'\nassert solution('100 100 100') == 'NO'\nassert solution('50 49 49') == 'NO'\nassert solution('10 30 20') == 'YES'\nassert solution('1 1000000000 1000000000') == 'YES'"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\nassert solution(\"1\\n2 2 2\\n3 3 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\"\nassert solution(\"1\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\"\nassert solution(\"1\\n3 2 3\\n1 1 1\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\"\nassert solution(\"1\\n3 2 3\\n1 1 1\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n\"\"\"\n\n\nimport sys\n\ntest_case = int(sys.stdin.readline().rstrip())\nfor _ in range(test_case):\n    a, b, c = map(int, sys.stdin.readline().rstrip().split())\n    if a == max(a, b, c):\n        print(\"YES\")\n        print(c, b, a)\n    elif b == max(a, b, c):\n        print(\"YES\")\n        print(a, b, c)\n    elif c == max(a, b, c):\n        print(\"YES\")\n        print(b, c, a)\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"YES\"\nassert solution(\"4\\n1 1 1 2\") == \"YES\"\nassert solution(\"4\\n1 1 1 3\") == \"NO\"\nassert solution(\"4\\n2 2 1 3\") == \"NO\"\nassert solution(\"4\\n4 3 2 1\") == \"NO\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\nassert solution(\"5\\n1 2 3 4 5\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"NO\\nNO\\nNO\\nNO\\nNO\"\nassert solution(\"3\\n1 1 1\\n1 1 1\\n1 1 1\") == \"NO\\nNO\\nNO\"\n\"\"\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == 'YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000'\n\n\"\"\"\n\nn = int(stdin.readline())\nfor _ in range(n):\n    a, b, c = map(int, stdin.readline().split())\n    if a <= b <= c:\n        print('NO')\n    elif a < b < c:\n        print('YES')\n        print(a, b, c)\n    else:\n        print('YES')\n        print(b, c, a)\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 3\\n100 100 100\\n50 49 49\\n10 30 20\\n1 1000000000 1000000000\") == \"YES\\n3 2 1\\nYES\\n100 100 100\\nNO\\nNO\\nYES\\n1 1 1000000000\"\n\"\"\"\nfrom __future__ import annotations\n\nimport collections\n\nfrom mpyc.runtime import mpc\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n5 2 6\n5 2 1 4 2\n''') == '4'\nassert solution('''\n5 1 4\n4 2 3 4 1\n''') == '1'\nassert solution('''\n5 3 3\n1 2 3 1 1\n''') == '5'\nassert solution('''\n5 1 4\n4 2 3 4 1\n''') == '1'\nassert solution('''\n3 2 3\n1 1 1\n''') == '3'\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\"\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 6\\n5 2 1 4 2') == '4'\nassert solution('5 1 4\\n4 2 3 4 1') == '1'\nassert solution('5 3 3\\n1 2 3 1 1') == '5'\n\"\"\""
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == '4'\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 6\\n5 2 1 4 2\") == \"4\"\nassert solution(\"5 1 4\\n4 2 3 4 1\") == \"1\"\nassert solution(\"5 3 3\\n1 2 3 1 1\") == \"5\""
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '5 2 6\\n5 2 1 4 2') == '4'\nassert solution(\n    '5 1 4\\n4 2 3 4 1') == '1'\nassert solution(\n    '5 3 3\\n1 2 3 1 1') == '5'\n\n\"\"\"\n\nn, m, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\nbox_num = 0\nobject_num = 0\n\nfor box_size in a:\n    box_num += (box_size // k)\n    if box_size % k:\n        object_num += 1\n    if object_num > box_num:\n        break\n\nprint(box_num - object_num)\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\nassert solution(\"aaaaaabbbccc\") == 3\nassert solution(\"aaabbbcccc\") == 6\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''7 2\nabacaba\na b''') == 12\n\nassert solution('''10 3\nsadfaasdda\nf a d''') == 21\n\nassert solution('''7 1\naaaaaaa\nb''') == 0\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abacaba\") == 12\n\"\"\"\n\nn, k = list(map(int, input().split()))\n\ns = list(input().replace(\" \", \"\").lower())\nc = list(map(str, input().replace(\" \", \"\").lower()))\n\ncnt = 0\n\nfor i in range(n):\n    if s[i] in c:\n        cnt += 1\n        j = i\n        while j < n:\n            if s[j] in c:\n                cnt += 1\n                j += 1\n            else:\n                break\nprint(cnt)\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == 12\n\"\"\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == 12\nassert solution(\"aaaaaaa\") == 0\nassert solution(\"sadfaasdda\") == 21\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('aaaaaaa') == 0\nassert solution('a') == 0\nassert solution('a b') == 1\nassert solution('a b a') == 1\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 3 -1 -2\") == \"2\"\nassert solution(\"4\\n-1 -2 -1 -3\") == \"-1\"\nassert solution(\"10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"6\"\nassert solution(\"6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"-2999999997\""
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"3\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"3\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\n\n\"\"\"\n\nfrom typing import List\nimport sys\nimport math\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"2\\n-1\\n6\"\nassert solution(\"4\\n6\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"3\\n-1\\n6\"\nassert solution(\"4\\n7\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"3\\n-1\\n6\"\nassert solution(\"4\\n7\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"3\\n-1\\n6\"\nassert solution(\"4\\n7\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"3\\n-1\\n6\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"-1\\n-1\\n6\\n-2999999997\"\nassert solution(\"5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\nassert solution(\"4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"-1\\n-1\\n6\\n-2999999997\"\nassert solution(\"4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"2\\n-1\\n6\\n-2999999997\"\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 5)\n\nt = int(sys.stdin.readline())\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 -1 -2\") == \"2\\n-1\"\nassert solution(\"4\\n-1 -2 -1 -3\") == \"-1\\n-3\"\nassert solution(\"10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"6\\n-2999999997\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == '2\\n-1\\n6'\nassert solution(\"4\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == '-2999999997'\nassert solution(\"4\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == '-2999999997'\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == '2\\n-1'\nassert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == '2\\n-1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n5\\n1 2 3 -1 -2') == '2'\nassert solution('4\\n4\\n-1 -2 -1 -3') == '-1'\nassert solution('6\\n1 -1000000000 1 -1000000000 1 -1000000000') == '-2999999997'\n\n\"\"\""
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\\n4\\n-1 -2 -1 -3\\n10\\n-2 8 3 8 -4 -15 5 -2 -3 1\\n6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == '2\\n-1\\n6\\n-2999999997'\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n5\\n1 2 3 -1 -2\") == \"2\"\nassert solution(\"4\\n4\\n1 -1 0 1 -1\") == \"0\"\nassert solution(\"10\\n-2 8 3 8 -4 -15 5 -2 -3 1\") == \"6\"\nassert solution(\"6\\n1 -1000000000 1 -1000000000 1 -1000000000\") == \"-2999999997\"\n\"\"\""
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\""
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\\n2 3\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\nassert solution(\"3 3\\n1 2\\n1 3\") == \"1 2\\n1 3\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n5 5\n1 2\n2 3\n3 5\n4 3\n1 5\n\"\"\") == \"\"\"\n3 5\n2 1\n3 2\n3 4\n\"\"\"\n\nassert solution(\"\"\"\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n\"\"\") == \"\"\"\n4 1\n1 2\n1 3\n\"\"\"\n\nassert solution(\"\"\"\n8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n\"\"\") == \"\"\"\n3 2\n2 5\n8 5\n6 1\n2 7\n1 2\n3 4\n\"\"\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 5\n1 2\n2 3\n3 5\n4 3\n1 5''') == '3 5\\n2 1\\n3 2\\n3 4'\n\nassert solution('''4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4''') == '4 1\\n1 2\\n1 3'\n\nassert solution('''8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n''') == '3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4'"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n') == '4 1\\n1 2\\n1 3'\nassert solution('4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n') == '3 2\\n2 5\\n8 5'\nassert solution('8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n') == '3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4'"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\n\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"4 1\\n1 2\\n1 3\"\n\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\"\n\nassert solution(\"4 4\\n1 2\\n1 3\\n3 2\") == \"4 1\\n1 2\\n1 3\\n3 2\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open(\"../../resources/test_01.txt\").read()) == \"1\\n2\\n2\\n3\"\nassert solution(open(\"../../resources/test_02.txt\").read()) == \"2\\n2\\n3\\n1\"\nassert solution(open(\"../../resources/test_03.txt\").read()) == \"3\\n2\\n3\\n2\"\nassert solution(open(\"../../resources/test_04.txt\").read()) == \"3\\n2\\n4\\n2\"\nassert solution(open(\"../../resources/test_05.txt\").read()) == \"4\\n2\\n4\\n2\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 9\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n4 5\\n5 6\\n4 6\") == \"1 3\\n1 2\\n3 4\\n4 5\\n4 6\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"1 2\\n3 4\\n2 5\\n4 6\\n4 5\\n6 7\\n3 4\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"1 2\\n2 5\\n2 3\\n4 6\\n1 6\\n3 4\\n6 7\\n3 4\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"1 2\\n3 4\\n2 5\\n4 6\\n1 6\\n3 4\\n6 7\\n3 4\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\\n\") == \"1 2\\n3 4\\n2 5\\n4 6\\n1 6\\n3 4\\n6 7\\n3 4\"\n\n----\n\"\"\"\n\n\n\"\"\"\n\u8fd9\u9053\u9898\u6211\u8fd8\u662f\u4e0d\u592a\u6e05\u695a\u5427\uff0c\u5176\u5b9e\u901a\u7528\u6027\u4e0d\u662f\u5f88\u5f3a\uff0c\u8fd9\u9053\u9898\u662f\u7528\u90bb\u63a5\u8868\u7684\u7ed3\u6784\uff0c\u5bf9\u7ed3\u6784\u7684\u5b9a\u4e49\u975e\u5e38\u591a\uff0c\u6700\u597d\u4e0d\u8981\u7ffb\u8bd1\u4e00\u4e0b\uff0c\u8fd9\u4e2a\u56fe\u6ca1\u6709\u62d3\u6251\u6392\u5e8f\uff0c\n\u5982\u679c\u62d3\u6251\u6392\u5e8f\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u4e00\u4e2a\u56fe\u6709\u62d3\u6251\u6392\u5e8f\u540e\uff0c\u53ea\u8981\u8bb0\u5f55\u62d3\u6251\u6392\u5e8f\u7684\u987a\u5e8f\u5c31\u53ef\u4ee5\u4e86\u3002\n\u8fd9\u91cc\u6211\u4eec\u8981\u8fdb\u884c\u4e00\u4e2a\u6392\u5e8f\uff0c\u8fd9\u4e2a\u6392\u5e8f\u7684\u7b97\u6cd5\u80af\u5b9a\u4f1a\u5f71\u54cd\u540e\u7eed\u7684\u64cd\u4f5c\u3002\n\n\u90a3\u4e48\u57fa\u672c\u601d\u8def\u662f\uff1a\n\n\u5bf9\u4e8e\u8fd9\u4e2a\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u521d\u59cb\u5316\u4e00\u4e2a\u90bb\u63a5\u8868\n\u90bb\u63a5\u8868\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4ee3\u8868\u4e00\u4e2a\u9876\u70b9\uff0c\u90bb\u63a5\u8868\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u7ed3\u6784\u4e3a\n\n(vertex, weight)\n\n\u5176\u4e2dvertex\u4e3a\u9876\u70b9\u7684\u7f16\u53f7\uff0cweight\u4e3a\u6709\u51e0\u4e2a\u9876\u70b9\u76f8\u8fde\u3002\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u4ece\u9876\u70b90\u5f00\u59cb\u904d\u5386\uff0c\u6839\u636e\u5173\u952e\u8bcdweight\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u66f4\u65b0\u9876\u70b90\u7684weight\uff0c\u5c06\u9876\u70b90\u7684weight\u66f4\u65b0\u4e3aweight+1\uff0c\n\u5e76\u4e14\u628a\u9876\u70b90\u7684\u90bb\u63a5\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u9876\u70b9\u52a0\u5165\u5230\u6211\u4eec\u8981\u8fd4\u56de\u7684\u7b54\u6848\u4e2d\u3002\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u7ee7\u7eed\u904d\u5386\u9876\u70b90\u7684\u90bb\u63a5\u8868\uff0c\u66f4\u65b0\u6240\u6709\u90bb\u63a5\u8868\u7684weight\uff0c\u7ee7\u7eed\u904d\u5386\uff0c\n\u5e76\u4e14\u628a\u904d\u5386\u8fc7\u7684\u9876\u70b9\u7684weight\u52a01\uff0c\u52a0\u5165\u5230\u7b54\u6848\u4e2d\u3002\n\n\u5982\u679c\u4e00\u4e2a\u9876\u70b9\u7684weight\u5927\u4e8e\u6211\u4eec\u8981\u8fd4\u56de\u7684\u6700\u5927\u7684weight\uff0c\u5c31\u8bf4\u660e\u8fd9\u4e2a\u9876\u70b9\u7684\u90bb\u63a5\u8868\u4e0d\u53ef\u80fd\u662f\u6211\u4eec\u8981\u7684\u7b54\u6848\u3002\n\n\u53e6\u5916\uff0c\u8fd9\u9053\u9898\u6709\u4e2a\u5f88\u91cd\u8981\u7684\u6027\u8d28\ufffd"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\\n1 2\\n2 3\\n3 5\\n4 3\\n1 5\") == \"3 5\\n2 1\\n3 2\\n3 4\"\nassert solution(\"4 6\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\"\nassert solution(\"8 9\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\\n2 7\\n5 8\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5\\n1 2\\n2 3\\n3 4\") == \"3 2\\n2 1\\n3 4\"\nassert solution(\"6 8\\n1 2\\n2 3\\n2 5\\n1 6\\n3 4\\n6 5\\n4 5\") == \"3 2\\n2 5\\n8 5\\n6 1\\n2 7\\n1 2\\n3 4\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('499993') == '41664916690999888'\n\"\"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n499993') == '41664916690999888'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == '0'\nassert solution(\"499993\") == '40'\nassert solution(\"499992\") == '499992'\n\"\"\"\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = 0\n    for i in range(1, n * n + 1):\n        s += i * n * n\n    print(s - n * n)"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('499993\\n') == '41664916690999888'\n\"\"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n5') == '0'\nassert solution('4\\n99993') == '41664916690999888'\n\"\"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1') == '0'\n\"\"\"\n\n\"\"\"\nhttps://codeforces.com/contest/1380/problem/A\n\"\"\"\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n1\") == '0'\nassert solution(\"499993\") == '41664916690999888'\n\"\"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n4\") == \"2\"\nassert solution(\"5\\n9\") == \"1\"\nassert solution(\"3\\n12\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == '0'\nassert solution('12') == '12'\nassert solution('123456789') == '1233556677889900'\nassert solution('123456789123456789123456789') == '123456789123456789123456789'\n\"\"\"\n\nimport time\nimport sys\n\n\nclass Codewars(object):\n\n    def __init__(self, a):\n        self.a = a\n\n    def solve(self):\n        a = self.a\n        a = a.replace('0', '')\n        a = a.replace('1', '2')\n        a = a.replace('2', '11')\n        a = a.replace('3', '22')\n        a = a.replace('4', '33')\n        a = a.replace('5', '44')\n        a = a.replace('6', '55')\n        a = a.replace('7', '66')\n        a = a.replace('8', '77')\n        a = a.replace('9', '88')\n        print(a)\n        return a\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('499993') == '41664916690999888'\nassert solution('499992') == '106043165499998'\n\"\"\"\n\nfrom typing import Iterable, Sequence\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5 7 6 7 5 4 4 6 4') == '1 1 1 2 -1 1 1 3 1 1'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1 1 1 2 3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n2') == '1 1 2 1 1'\nassert solution('2\\n1 1') == '1 2 2 2 1 1'\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\n4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\"\"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(...)\nprint(solution(str(input())))\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\n4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\nprint(solution(\"10\\n4 5 7 6 7 5 4 4 6 4\"))\n\"\"\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5 7 6 7 5 4 4 6 4\") == \"1 1 1 2 -1 1 1 3 1 1\"\n\n----\n3.\n\nWrite 5 lines of code to test the correctness of solution:\nYou are given an array $a$ consisting of $n$ integers. In one move, you can jump from the position $i$ to the position $i - a_i$ (if $1 \\le i - a_i$) or to the position $i + a_i$ (if $i + a_i \\le n$).\n\nFor each position $i$ from $1$ to $n$ you want to know the minimum the number of moves required to reach any position $j$ such that $a_j$ has the same parity as $a_i$ (i.e. if $a_i$ is odd then $a_j$ has to be odd and vice versa).\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in $a$.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$), where $a_i$ is the $i$-th element of $a$.\n\n\n-----Output-----\n\nPrint $n$ integers $d_1, d_2, \\dots, d_n$, where $d_i$ is the minimum the number of moves required to reach any position $j$ such that $a_j$ has the same parity as $a_i$ (i.e. if $a_i$ is odd then $a_j$ has to be odd and vice versa) or -1 if it is impossible to reach such a position.\n\n\n-----Example-----\nInput\n10\n4 5 7 6 7 5 4 4 6 4\n\nOutput\n1 1 1 2 1 1 1 2 1 1\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == x\n\"\"\"\n\na = [int(i) for i in input().split()]\nn = len(a)\nb = [1]\ni = 1\nwhile i < n and b[-1] < a[i]:\n    b.append(b[-1] * 2)\n    i += 1\nb.pop()\nans = [-1]\nfor i in range(n):\n    ans.append(b[i])\n    for j in range(n):\n        if (i + a[j]) % 2 == 1 and (i - a[j]) >= 0 and j!= i and i + b[j] - b[i] <= n:\n            ans[-1] = min(ans[-1], b[j] - b[i])\nprint(*ans)\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('64\\n32\\n97\\n2\\n12345') == 'YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823'\nprint(solution(stdin))\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('64 32 97 2 12345') == 'YES\\n2 4 8'\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == 'YES\\n2 4 8'\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"64 32 97\") == \"YES 2 4 8\"\nassert solution(\"12345\") == \"NO\"\n\"\"\"\nimport sys\nfrom math import gcd\nfrom collections import Counter"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('64 32 97 2 12345') == 'YES 2 4 8'\nassert solution('12345') == 'YES 3 5 823'\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\n\n\"\"\"\n\n\n\"\"\"\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u0439\n\u041f\u0440\u043e\u0441\u0442\u044b\u0435 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0438 \u0447\u0438\u0441\u043b\u0430 13195 - \u044d\u0442\u043e 5, 7, 13 \u0438 29.\n\n\u041a\u0430\u043a\u043e\u0432 \u0441\u0430\u043c\u044b\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c \u0447\u0438\u0441\u043b\u0430 600851475143, \u044f\u0432\u043b\u044f\u044e\u0449\u0438\u0439\u0441\u044f \u043f\u0440\u043e\u0441\u0442\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c?\n\"\"\""
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('64\\n32\\n97\\n2\\n12345') == 'YES\\n2 4 8\\nNO\\nNO\\nYES\\n3 5 823'\nprint(solution('64\\n32\\n97\\n2\\n12345'))\n\"\"\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"64\\n32\\n97\\n2\\n12345\") == \"YES\\n2 4 8\"\n\"\"\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abba') == 2\nassert solution('bbbba') == 1\nassert solution('baabba') == 0\nassert solution('aa') == 1\nassert solution('ababab') == 0\n\n\"\"\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abbba\") == 2\nassert solution(\"abbbb\") == 0\nassert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"ababab\") == 0\n\n\"\"\""
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abba') == '2'\nassert solution('ababab') == '0'\nassert solution('aa') == '1'\nassert solution('abb') == '1'\nassert solution('abbab') == '2'\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\n\n\"\"\"\n\nimport os\nimport sys\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abba\") == \"2\"\nassert solution(\"ababab\") == \"0\"\nassert solution(\"aa\") == \"1\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"abbaba\") == 0\nassert solution(\"ababab\") == 0\nassert solution(\"a\") == 1\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"bbbb\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\nassert solution(\"a\") == 1"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\n\"\"\"\n\nimport math"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"abba\"\n) == 2\nassert solution(\n    \"abbbab\"\n) == 0\n\n------"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"bbbb\") == 2\nassert solution(\"ababab\") == 0\nassert solution(\"aa\") == 1\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n\"\"\"\n\n\nimport sys\nimport math\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n') == '15'\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2') == '15'\nassert solution('5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n') == '9'\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == '15'\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == '9'\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2') == '15'\nassert solution(\n    '5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n') == '9'\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2\\n\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\\n\") == \"9\"\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\") == \"9\"\nassert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\") == \"15\"\nassert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\") == \"15\"\nassert solution(\"5\\n2 1\\n1 0\\n2 0\\n3 2\\n0 3\") == \"9\"\nassert solution(\"8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\") == \"15\"\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"3 3\") == \"3\"\n\"\"\"\n\nA, B = map(int, input().split())"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"2 3\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(2)\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdin\n\n------Solution-----\nfor line in stdin.splitlines():\n    a, b = map(int, line.split())\n    c = 1 if a!= b else 2\n    print(c)\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 1') == '2'\nassert solution('1 3') == '2'\nassert solution('2 1') == '2'\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1') == '2'\n\"\"\"\n\nimport math\n\nA, B = map(int, input().split())\nprint(2*A-B)\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"3 3\") == \"3\"\n\"\"\"\n\n\"\"\"\nMy solution:"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '3\\n1'\n    ) == '2'\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"2\"\nassert solution(\"2 3\") == \"1\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1\") == \"2\"\n\"\"\"\n\nprint(2 if A == 3 else B)\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n\") == \"1.000000000000\"\nassert solution(\"2\\n\") == \"1.000000000000\"\nassert solution(\"1\\n\") == \"0.50000000\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '1.000000000000'\nassert solution('0') == '0.0'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '1.000000000000'\n\nprint(solution('3'))\n\n\"\"\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '1.000000000000'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1.000000000000'\nassert solution('1.1') == '1.000000000000'\nassert solution('1.1 1.1 1.1') == '3.000000000000'\nassert solution('1.1 1.1 1.2') == '2.000000000000'\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n') == '1.000000000000'\n\"\"\""
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '1.000000000000'\nprint('Test passed')\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1.000000000000\"\nassert solution(\"4\") == \"1.000000000000\"\nassert solution(\"6\") == \"1.900000000000\"\n\"\"\"\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n') == '1.000000000000'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"Hello World\"\n\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n') == 'Hello World\\n'\nassert solution('2\\nA\\nB\\n') == '7\\n'\nassert solution('2\\n3\\n5\\n') == '8\\n'\n'''"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n\") == \"Hello World\"\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n\") == \"Hello World\"\nassert solution(\"2\\n1\\n2\\n3\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 'Hello World'\nassert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '9'\nassert solution('5') == '10'\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == \"Hello World\"\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"Hello World\"\nassert solution(\"2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == 'Hello World'\n\n-----Sample Input-----\n2\n1 1\n2 5\n\n-----Sample Output-----\n3\n8\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3') == '3333'\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"3333\"\n\"\"\"\n\nimport itertools\n\nnumbers = [int(x) for x in stdin.split()]\n\ncombinations = list(itertools.permutations(numbers, 2))\n\nprint(*min(combinations, key=lambda c: (c[0] * 10 ** 3) + c[1]))\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3') == '3333'\nprint(solution(stdin))"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3') == '3333'\n\"\"\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a = 4, b = 3) == '3333'\nprint('Test 1: Ok')\n\nassert solution(a = 1, b = 9) == '999'\nprint('Test 2: Ok')\n\nassert solution(a = 9, b = 1) == '999'\nprint('Test 3: Ok')\n\nassert solution(a = 1, b = 9) == '999'\nprint('Test 4: Ok')\n\nassert solution(a = 9, b = 1) == '999'\nprint('Test 5: Ok')"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"3333\"\n\"\"\"\n\na, b = map(int, input().split())"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"3333\"\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3') == '3333'\nassert solution('1 2') == '12'\nassert solution('9 8') == '88'\nassert solution('1 3') == '13'\n\n\"\"\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"3333\"\nassert solution(\"5 3\") == \"4444\"\nassert solution(\"2 9\") == \"199\"\nassert solution(\"9 2\") == \"99\"\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"3333\"\nassert solution(\"4 4\") == \"4444\"\n\n'''\n\nimport sys"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"e\") == \"f\"\nassert solution(\"c\") == \"d\"\nassert solution(\"b\") == \"c\"\nassert solution(\"z\") == \"A\"\n\n\"\"\"\n\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    def test_one_letter(self):\n        self."
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"a\") == \"b\"\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('a') == 'b'\nassert solution('c') == 'd'\nassert solution('z') == 'a'\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"b\") == \"c\"\nassert solution(\"c\") == \"d\"\nassert solution(\"d\") == \"e\"\nassert solution(\"e\") == \"f\"\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"a\") == \"b\"\n\nassert solution(\"z\") == \" \"\n\nassert solution(\"c\") == \"d\"\n\nassert solution(\"x\") == \"y\"\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('a') == 'b'\nassert solution('z') ==''\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"c\") == \"d\"\nassert solution(\"a\") == \"b\"\n\"\"\"\n\n\n\n\"\"\"\n----SOLUTION----\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"g\") == \"h\"\n\"\"\""
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('a') == 'b'\nassert solution('z') == 'a'\nassert solution('c') == 'd'\n\"\"\"\n\nC = input()\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a') == 'b'\nassert solution('z') == 'a'\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('oder atc') == 'atcoder'\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('oder atc') == 'atcoder'\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\nprint(\"Test PASSED\")\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('oder atc') == 'atcoder'\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"oder atc\") == \"atcoder\"\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"oder\", \"atc\") == \"atcoder\"\n\"\"\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('c') == 'c'\nassert solution('c,v') == 'c,v'\nassert solution('a,bc') == 'a,bc'\nassert solution('a,bc,c') == 'a,bc,c'\n\nprint('Hooray!')\n\nimport sys\n\nfor line in sys.stdin:\n    print(solution(line.strip()))\n\n-----"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"code\") == \"cope\"\n\"\"\""
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n1\") == \"0\"\nassert solution(\"1 2\\n1\") == \"0\"\nassert solution(\"5\\n1 1 2 3 4\") == \"0\"\nassert solution(\"5\\n5\") == \"0\"\nassert solution(\"5\\n3 1 2 4\") == \"0\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 5 7 8 2') == 0\nassert solution('5 1 2 4 6 3') == 0\nassert solution('5 1 2 3 4') == 3\n\"\"\""
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 5 7 8 2\") == '0'\nassert solution(\"6\\n5 1 2 4 6 3\") == '0'\nassert solution(\"2\\n1000000 1000000\") == '1000000'\nassert solution(\"8\\n1 2 3 4 5 6 7 8\") == '0'\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 5 7 8 2\") == 0\nassert solution(\"6\\n5 1 2 4 6 3\") == 0\nassert solution(\"2\\n1000000 1000000\") == 1000000\nassert solution(\"7\\n1 3 5 7 9 1\") == 0\n\"\"\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n1 5 7 8 2\n''') == '0'\n\nassert solution('''6\n5 1 2 4 6 3\n''') == '0'\n\nassert solution('''2\n1000000 1000000\n''') == '1000000'\n\nassert solution('''5\n10000 10001 10010 10011\n''') == '10000'\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 5 7 8 2') == '0'\nassert solution('6\\n5 1 2 4 6 3') == '0'\nassert solution('2\\n1000000 1000000') == '1000000'\n\n\"\"\""
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 2 4 6 3\") == \"0\"\nassert solution(\"5 7 8 2\") == \"0\"\n\"\"\""
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3\\n5\\n1\") == '6'\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1 5 7 8 2') == 0\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 2 3 3\\n7 10 50 12 1 8') == '5'\nassert solution('1 1 100 99\\n100') == '1'\nassert solution('7 4 2 1\\n1 3 5 4 2 7 6') == '6'\nassert solution('6 2 3 3\\n7 10 50 12 1 8') == '5'\nassert solution('1 1 100 99\\n100') == '1'\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''6 2 3 3\n7 10 50 12 1 8''') == '5'\nassert solution('''1 1 100 99\n100''') == '1'\nassert solution('''7 4 2 1\n1 3 5 4 2 7 6''') == '6'"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 3 3\\n7 10 50 12 1 8\") == '5'\nassert solution(\"1 1 100 99\\n100\") == '1'\n\nprint(solution(\"1 1 100 99\\n100\"))\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\\n\") == \"5\"\n\"\"\"\n\nfrom math import ceil\nfrom typing import List\n\nMAX_HP = 1001"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\") == \"5\"\n\n\"\"\"\n\n\nn, a, b, k = map(int, input().split())\nhp = list(map(int, input().split()))"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 2 3 3\\n7 10 50 12 1 8') == '5'\n\"\"\"\nimport sys"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\\n\") == 5\n\"\"\"\n\nfrom typing import List\nfrom collections import deque\n\nn, a, b, k = map(int, stdin.readline().split())\nh: List[int] = list(map(int, stdin.readline().split()))\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2 3 3\\n7 10 50 12 1 8') == '5'\nassert solution('1 1 100 99\\n100') == '1'\n\n'''\n\nfrom math import sqrt"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''7 4 2 1\n1 3 5 4 2 7 6''') == '6'\n\"\"\"\nimport collections\nfrom typing import List, Callable\nimport queue\n\n\nclass Solution:\n    def solve(self, stdin: str, solution: Callable) -> str:\n        n, a, b, k = [int(i) for i in stdin.split('\\n')[0].split()]\n        h = [int(i) for i in stdin.split('\\n')[1].split()]\n        return solution(n, a, b, k, h)\n\n\nclass SolutionSlow:\n    def solve(self, stdin: str, solution: Callable) -> str:\n        n, a, b, k = [int(i) for i in stdin.split('\\n')[0].split()]\n        h = [int(i) for i in stdin.split('\\n')[1].split()]\n        return solution(n, a, b, k, h)\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 2 3 3\\n7 10 50 12 1 8\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n0 1 2 3\") == \"0\"\nassert solution(\"6 3\\n3 2 0 6 10 12\") == \"3\"\n\nassert solution(\"4 2\\n0 1 2 3\") == \"0\"\nassert solution(\"6 3\\n3 2 0 6 10 12\") == \"3\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str([3, 2, 0, 6, 10, 12])) == 3\nassert solution(str([3, 2, 0, 6, 10, 12, 1])) == 2\nassert solution(str([3, 2, 0, 6, 10, 12, 1, 2])) == 3\nassert solution(str([3, 2, 0, 6, 10, 12, 1, 2, 3])) == 2\nassert solution(str([3, 2, 0, 6, 10, 12, 1, 2, 3, 4])) == 3\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 0 6 10 12\") == 3\nassert solution(\"4 2 0 6 10 12\") == 0\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3\\n3 2 0 6 10 12\") == \"3\\n3 2 0 7 10 14\"\nassert solution(\"4 2\\n0 1 2 3\") == \"0\\n0 1 2 3\""
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"6 3\n3 2 0 6 10 12\n\"\"\") == \"3\"\n\nassert solution(\"\"\"4 2\n0 1 2 3\n\"\"\") == \"0\"\n\nprint(solution(\"\"\"4 2\n0 1 2 3\n\"\"\"))\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 3\\n3 2 0 6 10 12\") == \"3\"\nassert solution(\"4 2\\n0 1 2 3\") == \"0\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n0 1 2 3') == '0\\n0 1 2 3'\nassert solution('6 3\\n3 2 0 6 10 12') == '3\\n3 2 0 7 10 14'"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '6 3'\n) == '3'\nassert solution(\n    '4 2'\n) == '0'\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 3\\n0 1 2 3') == '0\\n0 1 2 4'\nassert solution('3 2\\n0 1 2') == '0\\n0 1 2'\nassert solution('4 2\\n0 1 2 3') == '0\\n0 1 2 3'\n\nassert solution('3 3\\n0 1 2') == '0\\n0 1 2'\nassert solution('5 3\\n0 1 2 3 4') == '0\\n0 1 2 3 4'\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 3\") == \"3\"\nassert solution(\"7 5\") == \"2\"\nassert solution(\"7 7\") == \"0\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"1 2 3\") == \"1\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3') == '8'\n\"\"\"\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n''') == '8'\n\n\"\"\"\nclass Microtransactions(object):\n    def __init__(self, types, microtransactions):\n        self.types = types\n        self.microtransactions = microtransactions\n\n    def _get_microtransactions(self, microtransactions, types):\n        microtransactions = []\n        for m in microtransactions:\n            m_microtransactions = []\n            for type in range(1, types + 1):\n                if m // type <= types:\n                    m_microtransactions.append(m // type)\n                    m = m % type\n            microtransactions.append(m_microtransactions)\n        return microtransactions\n\n    def _get_total_microtransactions(self, microtransactions):\n        total_microtransactions = 0\n        for microtransactions in microtransactions:\n            for m in microtransactions:\n                total_microtransactions += m\n        return total_microtransactions\n\n    def _get_total_microtransactions_sorted(self, microtransactions):\n        total_microtransactions_sorted = []\n        for microtransactions in microtransactions:\n            for m in microtransactions:\n                if m not in total_microtransactions_sorted:\n                    total_microtransactions_sorted.append(m)\n        total_microtransactions_sorted.sort()\n        return total_microtransactions_sorted\n\n    def _get_microtransactions_sorted(self, microtransactions, microtransactions_sorted):\n        microtransactions_sorted = []\n        for microtransactions in microtransactions:\n            for m in microtransactions:\n                if m not in microtransactions_sorted:\n                    microtransactions_sorted.append(m)\n        microtransactions_sorted.sort()\n        return microtransactions_sorted\n\n    def _get_microtransactions_to_add(self, microtransactions_sorted, total_microtransactions_sorted):\n        microtransactions_to_add = []\n        for microtransactions in microtransactions_sorted:\n            if microtransactions not in total_microtransactions_sorted:\n                microtransactions_to_add.append(microtransactions)\n        return microtransactions_to_add\n\n    def _get_microtransactions_to_add_amounts(self, microtransactions_to_add, microtransactions):\n        microtransactions_to_add_amounts = []\n        for microtransactions_to_add in microtransactions_to_add:\n            for microtransactions_to_add in microtransactions_to_add:\n                microtransactions_to_add_amounts.append(microtransactions_to_add * 2)\n        return microtransactions_to_add_amounts\n\n    def _get_total_microtransactions_to_add(self, microtransactions_to_add_amounts):\n        total_microtransactions_to_add = []\n        for microtransactions_to_add_amounts in microtransactions_to_add_amounts:\n            total_microtransactions_to_add.append(microtransactions_to_add_amounts)\n        return total_microtransactions_to_add\n\n    def _get_total_microtransactions_to_add_sorted(self, total_microtransactions_to_add):\n        total_microtransactions_to_add_sorted = []\n        for total_microtransactions_to_add in total_microtransactions_to_add:\n            total_microtransactions_to_add_sorted.append(total_microtransactions_to_add)\n        total_microtransactions_to_add_sorted.sort()\n        return total_microtransactions_to_add_sorted\n\n    def _get_total_microtransactions_to_add_filtered(self, total_microtransactions_to_add_sorted):\n        total_microtransactions_to_add_filtered = []\n        for total_microtransactions_to_add in total_microtransactions_to_add_sorted:\n            if total_microtransactions_to_add not in total_microtransactions_to_add_filtered:\n                total_microtransactions_to_add_filtered.append(total_microtransactions_to_add)\n        return total_microtransactions_to_add_filtered\n\n    def _get_total_microtransactions_to_add_filtered_sum(self, total_microtransactions_to_add_filtered):\n        total_microtransactions_to_add_filtered_sum = 0\n        for total_microtransactions_to_add_filtered in total_microtransactions_to_add_filtered:\n            total_microtransactions_to_add_filtered_sum += total_microtransactions_to_add_filtered\n        return total_microtransactions_to_add_filtered_sum\n\n    def _get_total_microtransactions_to_add_filtered_sum_sorted(self, total_microtransactions_to_add_filtered_sum):\n        total_microtransactions_to_add_filtered_sum_sorted = []\n        for total_microtransactions_to_add_filtered_sum in total_microtransactions_to_add_filtered_sum:\n            if total_microtransactions_to_add_filtered_sum not in total_microtransactions_to_add_filtered_sum_sorted:\n                total_microtransactions_to_add_filtered_sum_sorted.append(total_microtransactions_"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5') == '20'\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\n\nimport os\nimport io\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\") == \"8\"\n\"\"\""
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\") == \"8\"\n\"\"\"\n\nfrom collections import deque\n\nn, m = [int(i) for i in input().split()]\n\nk = [int(i) for i in input().split()]\nk.sort(reverse=True)\n\noffers = []\n\nfor i in range(m):\n    d, t = [int(i) for i in input().split()]\n    offers.append([d, t])\n\noffers.sort(key=lambda x: x[0])\n\nprev_day = offers[0][0]\ncurrent_sum = 0\nfor i in range(m):\n    if k[i] <= current_sum + 1:\n        break\n    current_sum += offers[i][1]\n    k[i] -= current_sum + 1\n\nprint(prev_day + len(k))\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n4 2 1 3 2\\n3 5\\n4 2\\n2 5\\n\") == \"20\"\nprint(\"Testing completed.\")\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 6\\n1 2 0 2 0\\n2 4\\n3 3\\n1 5\\n1 2\\n1 5\\n2 3\\n') == '8'\n\"\"\""
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1\\n1') == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\nassert solution(\"5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n1 10000 10000 10000 10000\") == \"YES\"\nassert solution(\"1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1\\n1 10000 10000 10000 10000\") == \"NO\"\n\"\"\"\nimport math"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n''') == 'YES'\n\nassert solution('''\n1\n1 1 10 10\n''') == 'NO'\n\nassert solution('''\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n''') == 'YES'\n\nassert solution('''\n2\n1 1 1 1 1 1 1 1\n1\n10000 10000 10000 10000\n''') == 'NO'\n\nassert solution('''\n1\n1 1 10 10\n''') == 'NO'"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 10 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n1 1 1 1 1 1 1 1') == 'YES\\nNO\\nYES\\nYES'\n\"\"\""
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 1 2 2\\n2\\n3 3 3 4\\n2\\n2 1 1 2\") == \"YES\\nYES\"\nassert solution(\"4\\n1 1 2 2\\n2\\n1 2 1 1\\n2\\n1 1 2 2\") == \"NO\\nYES\"\nassert solution(\"4\\n1 1 2 2\\n2\\n1 1 2 2\") == \"YES\\nNO\"\n\n\"\"\"\n\n\n\nfrom typing import List\nimport math\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1 1 1 1\") == \"YES\"\nassert solution(\"2\\n10 5 2 10 1 1 2 5\") == \"NO\"\nassert solution(\"2\\n10 5 1 10 5 1 1 1\") == \"YES\"\nassert solution(\"1\\n10000 10000 10000 10000\") == \"NO\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\\n2\\n1 1 1 1 1 1 1 1') == 'YES\\nYES\\nNO\\nYES\\nYES'\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\") == \"YES\"\nassert solution(\"1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\") == \"YES\"\nassert solution(\"1 1 10 10\\n2\\n1 1 1 1 1 1 1 1\") == \"NO\"\nassert solution(\"1 1 10 10\\n2\\n1 1 1 1 1 1 1 1\") == \"NO\"\nassert solution(\"1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\") == \"YES\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1 10 10\\n2\\n10 5 2 10 1 1 2 5\\n2\\n10 5 1 10 5 1 1 1\") == 'YES'\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import combinations\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    sticks = tuple(map(int, input().split()))\n    \n    if len(set(sticks))!= len(sticks):\n        print('NO')\n        continue\n    \n    counts = Counter(sticks)\n    counts = [k for k in counts if counts[k] % 2 == 0]\n    counts = sorted(counts, reverse=True)\n    counts = sorted(counts, key=lambda x: x*4)\n    counts = [k for k in counts if k*4 >= sum(counts)]\n    if counts:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n1\\n10 10\\n2\\n10 5 2 10 1 1 2 5') == \"YES\"\nassert solution('1\\n1\\n10 10\\n2\\n1 1 1 1 1 1 1 1') == \"NO\"\nassert solution('1\\n1\\n10 10\\n2\\n1 1 1 1 1 1 1 1') == \"NO\"\nassert solution('1\\n1\\n10 10\\n2\\n10000 10000 10000 10000') == \"NO\"\nassert solution('1\\n1\\n10 10\\n2\\n10000 10000 10000 10000') == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1') == '9'\n\n\"\"\""
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\") == \"3\"\n\"\"\"\n\nimport heapq\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 10 3\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\") == \"3\"\nassert solution(\"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\") == \"9\"\nassert solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\") == \"9\"\nassert solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\") == \"9\"\nassert solution(\"3 5 1\\n4 3 2\\n2 3 4\") == \"2\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\") == \"9\"\nassert solution(\"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n\") == \"3\"\n\"\"\"\n\nimport heapq\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 10 5\\n2 5 1\\n5 3 9\\n6 2 2\\n1 3 1\\n5 1 8\\n6 5 10\\n1 6 5\\n6 4 6\\n3 6 2\\n3 4 5\\n\") == \"3\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2 1\\n1 3 2\\n2 3 1\") == \"3\"\nassert solution(\"4 7 4\\n1 2 2\\n1 3 5\\n2 3 3\\n2 1 1\\n2 4 3\\n3 4 1\\n4 1 3\") == \"3\"\nassert solution(\"5 7 7\\n1 2 1\\n1 3 5\\n2 3 1\\n2 1 1\\n2 5 1\\n3 4 4\\n3 5 7\\n4 5 2\\n4 2 1\\n5 4 2\\n5 1 4\\n5 3 2\\n5 2 7\\n\") == \"7\"\n\nprint(solution(\"10 5 10\\n1 2 1\\n1 3 2\\n2 3 1\\n2 4 3\\n3 4 1\\n4 5 2\\n5 6 3\\n6 7 2\\n7 8 1\\n8 9 3\\n9 10 1\\n10 1 3\\n\"))\nprint(solution(\"5 7 7\\n1 2 1\\n1 3 5\\n2 3 1\\n2 1 1\\n2 5 1\\n3 4 4\\n3 5 7\\n4 5 2\\n4 2 1\\n5 4 2\\n5 1 4\\n5 3 2\\n5 2 7\\n\"))\nprint(solution(\"6 5 10\\n1 2 1\\n1 3 5\\n2 3 1\\n2 1 1\\n2 5 1\\n3 4 4\\n3 5 7\\n4 5 2\\n4 2 1\\n5 4 2\\n5 1 4\\n5 3 2\\n5 2 7\\n\"))\nprint(solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\\n\"))\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 15 18\\n2 6 3\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1\") == \"9\"\n\n\"\"\"\nimport sys\nfrom collections import defaultdict\nfrom math import inf\n\n\"\"\"\n\u9802\u70b9\u6570\u3068\u8fba\u6570\u304c\u305d\u308c\u305e\u308c\u4efb\u610f\u306e\u6570(20,000\u4ee5\u4e0b)\u3067\u3042\u308b\u3053\u3068\u304b\u3089\u3001\u6700\u5927\u5168\u63a2\u7d22\u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u308b\u3002\n\u5168\u63a2\u7d22\u3057\u305f\u5f8c\u3001\u6700\u5c0f\u5024\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\"\"\"\n\nV, E, K = map(int, sys.stdin.readline().split())\n\nedges = []\nfor i in range(E):\n    x, y, w = map(int, sys.stdin.readline().split())\n    edges.append((w, x, y))\n\nedges.sort()\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4 3\") == 4\nassert solution(\"4 5 2\") == 3\nassert solution(\"8 10 5\") == 5\nassert solution(\"6 5 4\") == 2\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3 1\\n5 7 4\\n6 5 4\\n3 6 9\\n6 7 7\\n1 6 4\\n7 1 6\\n7 2 1\\n4 3 2\\n3 2 8\\n5 3 6\\n2 5 5\\n3 7 9\\n4 1 8\\n2 1 1') == '9'\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 6 5\") == 3\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '2 1'\nassert solution('1 2 3') == '3 2 1'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30') == '30 2 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\nassert solution(\"2\\n1 1\\n1 1\") == \"1 2\"\nassert solution(\"1\\n1\") == \"1 1\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 1 3 4 2') == '3 1\\n1 1 1 1 1'\nassert solution('6\\n1 5 12 13 2 15') == '7 2\\n2 2 1 1 2 1'\nassert solution('10\\n1 2 5 129 185 581 1041 1909 1580 8150') == '7486 3\\n3 3 3 2 2 2 2 1 1 1'"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\\n1 1 1 1 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\\n2 2 1 1 2 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n\nprint(solution(\"5\\n1 1 3 4 2\"))\nprint(solution(\"6\\n1 5 12 13 2 15\"))\nprint(solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\"))"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\\n1 1 1 1 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\\n2 2 1 1 2 1\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\\n3 3 3 2 2 2 2 1 1 1\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 1 3 4 2\\n\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\\n\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\\n\") == \"7486 3\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == '3 1'\nassert solution(\"6\\n1 5 12 13 2 15\") == '7 2'\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == '7486 3'\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"5\n1 1 3 4 2\"\"\") == \"3 1\", 'incorrect result'\nassert solution(\"\"\"6\n1 5 12 13 2 15\"\"\") == \"7 2\", 'incorrect result'\nassert solution(\"\"\"10\n1 2 5 129 185 581 1041 1909 1580 8150\"\"\") == \"7486 3\", 'incorrect result'\n\n\n\n\"\"\"\nhttps://www.codewars.com/kata/5cc64b5b6b8cc9ab8d00147a\n\nYou should divide the students into groups of three (there can be four, six, or eight students, in other cases you should return -1) such that the total number of teams formed is minimal.\n\nReturn the number of teams formed and the groups themselves.\n\"\"\""
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 1 3 4 2\") == \"3 1\"\nassert solution(\"6\\n1 5 12 13 2 15\") == \"7 2\"\nassert solution(\"10\\n1 2 5 129 185 581 1041 1909 1580 8150\") == \"7486 3\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n2\") == \"2\"\nassert solution(\"1\\n4\\n8\") == \"1\"\nassert solution(\"3\\n7\\n9\") == \"1\"\nassert solution(\"2\\n9\\n1\") == \"1\"\nassert solution(\"7\\n4\\n7\\n1\") == \"2\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5\n5009\n7\n9876\n10000\n10\n''') == '2 5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\\n'\nprint('Test solution passed')\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n9\") == '2\\n1'\nassert solution(\"7\\n9876\") == '2\\n1'\nassert solution(\"10000\") == '1\\n1'\nassert solution(\"10\") == '1\\n1'\n\"\"\"\n\nimport sys\nimport logging\n\nlogging.basicConfig(\n    filename=\"log_file.log\",\n    level=logging.DEBUG,\n    format=\"%(asctime)s:%(levelname)s:%(message)s\"\n)"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5009\") == \"2 5000 9\"\nassert solution(\"7\") == \"1\"\nassert solution(\"9876\") == \"1\"\nassert solution(\"10000\") == \"1\"\nassert solution(\"10\") == \"1\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5\") == \"1\"\nassert solution(\"4\\n50\") == \"4\"\nassert solution(\"100\\n100\") == \"1\"\nassert solution(\"100\\n10000\") == \"3\"\nassert solution(\"10000\\n100\") == \"3\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n9') == '2\\n5000 9'\n\"\"\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1\\n9\\n9\\n9\") == \"5\\n0\\n2\\n2\\n1\"\nassert solution(\"4\\n9\\n9\\n9\\n1\\n9\\n9\\n9\") == \"5\\n2\\n2\\n2\\n1\\n2\\n2\\n1\"\nassert solution(\"5\\n9\\n9\\n9\\n1\\n9\\n9\\n9\") == \"5\\n2\\n2\\n2\\n1\\n2\\n2\\n1\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n5\\n') == '3\\n1\\n1\\n2\\n2\\n2\\n4\\n2\\n4\\n3\\n3\\n3\\n4\\n4\\n3\\n3\\n5\\n2\\n4\\n2\\n5\\n5\\n5\\n4\\n4\\n5\\n5\\n5\\n4\\n4\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n2\") == \"2\"\nassert solution(\"1\\n3\") == \"1\"\nassert solution(\"1\\n5\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5009\\n7\\n9876\\n10000\\n10\") == \"2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\"\nassert solution(\"1\\n100\") == \"1\\n1\\n10\"\nassert solution(\"5009\\n7\\n9876\\n10000\\n10\") == \"2\\n5000 9\\n1\\n7\\n4\\n800 70 6 9000\\n1\\n10000\\n1\\n10\"\nassert solution(\"1\\n100\\n1\\n100\\n1\\n100\") == \"1\\n1\\n101\\n101\\n2\\n101\"\nassert solution(\"1\\n1000\\n1\\n1000\\n1\\n1000\") == \"1\\n1\\n1001\\n1001\\n2\\n1001\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1\\n') == ''\nassert solution('1\\n2') == '1\\n1\\n'\nassert solution('1\\n2\\n') == '1\\n1\\n'\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 3 4\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3') == '1 1 1 1 1'\nassert solution('4\\n1 2 3 4\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3') == '3 3 3'\nassert solution('4\\n1 2 3 4\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3') == '2 3 3 2 1 3'\n\"\"\""
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"3 3 3\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"2 3 3 2 1 3\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"2 2 2 2\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(print())\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5 6 1 2 3', '3 1 4 2 5') == '1 1 1 1 1'\nassert solution('5 4 3 2 1', '3 1 4 2 5') == '3 3 3'\nassert solution('6 4 3 2 1', '3 1 4 2 5') == '2 2 2 2'\n\"\"\""
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 3 1\\n4\\n5 1 2 3\") == \"1 1 1 1 1\"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\") == \"3 3 3\"\nassert solution(\"6\\n6\\n1 2 3 4 5 6\\n1\\n5\\n2 3 4 1 2\") == \"2 2 2 2\"\nassert solution(\"6\\n1\\n1\\n2\\n2\\n3\\n3\") == \"1 2 2 1 1 2 2\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == '1 1 1 1 1'\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == '3 3 3'\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == '2 3 3 2 1 3'\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == '1'\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == '2 2 2 2'\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1 \"\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"3 3 3 \"\nassert solution(\"6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"2 3 3 2 1 3 \"\nassert solution(\"6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"2 2 2 2 \"\nassert solution(\"6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"4 4 4 1 4 \"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 5 1 2 3\") == \"4 3 3 3 3 3\"\nassert solution(\"6 3 1 2 4 5\") == \"5 5 5 5 5\"\nassert solution(\"6 5 1 4 3 2\") == \"5 5 5 5 5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 1 1 1') == '1'\nassert solution('5\\n1 2 3 4 5') == '3'\n\"\"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n1 2 3 4 5\") == '3\\n2\\n1'\n\"\"\"\nfrom collections import defaultdict, deque"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1') == '3\\n2\\n1'\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 3 4\\n2\\n1 2\\n4\\n1 1 1 1') == '2'\nassert solution('3\\n1 2 3\\n2\\n1 2') == '1'\nassert solution('2\\n3\\n1 2') == '1'\n\"\"\""
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 2 2\\n4\\n1 1 1 1\") == \"2\\n2\\n1\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 2 2\\n4\\n1 1 1 1\") == \"2\\n2\\n1\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 2 2\\n4\\n1 1 1 1\") == \"2\\n2\\n1\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n3\\n1 1 1 1') == '2'\n\nassert solution('4\\n3\\n1 2 2') == '1'\n\nassert solution('4\\n3\\n1 2 3') == '3'\n\nassert solution('4\\n3\\n1 2 3 4') == '5'\n\nassert solution('4\\n3\\n1 2 3 4 5') == '5'"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n1 2 2\\n4\\n1 1 1 1\") == \"3\\n2\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3\\n2 1 2\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n3\\n1 1 1 1') == '2'\nassert solution('5\\n1 2 3 4 5') == '3'\nassert solution('4\\n1 1 1 1') == '1'\n\"\"\"\n\n\nfrom math import floor, ceil\nfrom typing import List\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\n\"\"\""
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4 2\n10 4 10 15\n1 2\n4 3''') == '0 0 1 2'\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n\n\"\"\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\\n\") == \"0 0 1 2\"\n\nprint(solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\\n\"))\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == '0 0 1 2'\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 4 10 15\") == \"0 0 1 2\"\nassert solution(\"5 4 1 5 4 3 7 1 2 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == \"0 0 1 2\"\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == \"5 4 0 5 3 3 9 0 2 5\"\n\"\"\"\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n10 4 10 15\\n1 2\\n4 3\") == '0 0 1 2'\nassert solution(\"10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\") == '5 4 0 5 3 3 9 0 2 5'\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''4 2\n10 4 10 15\n1 2\n4 3\n''') == '0 0 1 2'\nassert solution('''10 4\n5 4 1 5 4 3 7 1 2 5\n4 6\n2 1\n10 8\n3 5\n''') == '5 4 0 5 3 3 9 0 2 5'"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n10 4 10 15\\n1 2\\n4 3\\n') == '0 0 1 2'\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"ab\"\n\"\"\"\n\nfrom typing import List\nimport collections\n\nn, k = map(int, input().split())\np, q = [list(map(int, input().split())) for _ in range(2)]\np = collections.Counter(p)\nq = collections.Counter(q)"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n1 2 3\\n1 3 2') == 'abb'\n\n\n-----Test 2-----\nInput\n3 2\n1 2 3\n3 2 1\n\nOutput\nNO\n\n-----Test 3-----\nInput\n4 4\n1 3 4 2\n1 4 2 3\n1 2 3 4\n2 3 1 4\n\nOutput\nYES\n\n\"\"\"\n\n\"\"\"\nSolution: We need to go through the string and keep the order of characters according to the permutation. \nA permutation is a mapping from numbers 1 to n to numbers 1 to n. \nFor example, the permutation {1: 2, 3: 1, 4: 3} represents the mapping that swaps positions of 1, 2, and 3 in the input.\nSo we need to find the indices of all of the characters in the permutation.\n\n1. Convert the permutation to a dictionary.\n2. Iterate through the string and use the dictionary to convert characters to their indices.\n3. Once we have the indices, we can order them to form a new string.\n4. Check whether the new string is sorted.\n\n\"\"\""
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\nInput\n3 2\n1 2 3\n1 2 3\n\nOutput\nNO\n\n\"\"\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n1 2 3\\n1 3 2') == 'YES\\nabb'\n\"\"\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"abb\"\nassert solution(\"3 2\\n2 3 1\\n1 3 2\") == \"abc\"\nassert solution(\"3 2\\n3 1 2\\n1 3 2\") == \"acb\"\nassert solution(\"3 2\\n3 1 2\\n2 1 3\") == \"abc\"\nassert solution(\"3 2\\n2 3 1\\n3 1 2\") == \"abb\"\n\n\"\"\"\n\nfrom typing import List\nimport itertools\nimport sys\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'NO'\n\nassert solution('ab') == 'NO'\n\nassert solution('aba') == 'NO'\n\nassert solution('abb') == 'YES\\nbb'\n\nassert solution('aabb') == 'YES\\nab'"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 2\\n1 2 3\\n1 3 2') == 'abb'\n\"\"\"\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == 'abb'\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 2\\n1 2 3\\n1 3 2') == 'abb'\n\n\n-----Note-----\n\nIn the first test the string will have length 3 and 2 distinct characters, but its possible to print the string \"abc\" or \"aba\" as well.\n\nIn the second test the string will have length 3 and 3 distinct characters, but its possible to print the string \"abd\" or \"abe\" as well.\n\"\"\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 2 3\\n1 3 2\") == \"YES\\nabb\"\n\"\"\"\n\nfrom collections import defaultdict, deque\nfrom typing import Deque, Dict, List, Set\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n20 10 20''') == '43'\n\nassert solution('''4\n10 10 10 10''') == '64'\n\nassert solution('''6\n5 4 5 4 4 5''') == '69'\n\nassert solution('''2\n1 4''') == '3'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\n\nprint(\"Test complete\")\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"69\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\nprint('The local tests are done. Click on \"Check\" for more details.')"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n20 10 20\\n\") == '43'\nassert solution(\"4\\n10 10 10 10\\n\") == '64'\nassert solution(\"6\\n5 4 5 4 4 5\\n\") == '69'\nassert solution(\"2\\n1 4\\n\") == '3'\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n20 10 20') == '43'\nassert solution('4\\n10 10 10 10') == '64'\nassert solution('6\\n5 4 5 4 4 5') == '69'\nassert solution('2\\n1 4') == '3'\n\n\"\"\""
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"69\"\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nm = []\n\ni = 0\nj = 0\n\nfor k in range(n):\n    m.append([])\n    for l in range(a[k]):\n        m[k].append(j)\n        j += 1"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('5 10 20 10') == '43'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\nassert solution(\"2\\n1 4\") == \"3\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\n\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n20 10 20\") == \"43\"\nassert solution(\"4\\n10 10 10 10\") == \"64\"\nassert solution(\"6\\n5 4 5 4 4 5\") == \"69\"\n\"\"\"\n\nN = int(input())\nl = list(map(int, input().split()))\n\ncan_count = N\nshots = 0\norder = [0] * N\nfor i in range(N):\n    shots += can_count * l[i] + 1\n    order[i] = i + 1\n    can_count -= 1\n\nprint(shots)\nprint(*order)\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == '1'\nassert solution('3') == '1 2'\nassert solution('4') == '1 3 2'\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 5 1 3\") == 3\nassert solution(\"4 2 5 1 3\") == 3\nassert solution(\"5 4 2 3 1\") == 3\nassert solution(\"5 4 2 3 1\") == 3\nassert solution(\"5 4 2 3 1\") == 3\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\n\"\"\"\n\n\"\"\"\nQ: Find the number of integers i (1 <= i <= N) that satisfy the following condition: \n - For any integer j (1 <= j <= i), P_i <= P_j.\n\nE.g. For input:\n5\n4 2 5 1 3\n\nthe output should be 3, because of i = 4, i = 5, i = 3.\n\nThe code below is functionally correct, but is much longer than it could be. We're interested in the fact that it runs in linear time. Can you make it so that the code runs in O(N) time?\n\n-----Constraints-----\n - 1 <= N <= 10^5\n - P_1,..., P_N is a permutation of 1,..., N\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nP_1... P_N\n\n-----Output-----\nPrint the number of integers i that satisfy the condition.\n\n-----Sample Input-----\n5\n4 2 5 1 3\n\n-----Sample Output-----\n3\n\"\"\"\n\nn = int(input())\npermutation = list(map(int, input().split()))\n\ncount = 0\nfor i in range(1, n):\n    if any(permutation[i] <= permutation[j] for j in range(i)):\n        count += 1\nprint(count)"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2 5 1 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n4 2 5 1 3') == '3'\n\"\"\"\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n4 2 5 1 3\") == \"3\"\n\"\"\"\nimport sys\nimport itertools\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(5)) == '3'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 3 3\") == \"1\"\nassert solution(\"3 3 3 2 1 1\") == \"1\"\nassert solution(\"3 2 3 2 1 1\") == \"0\"\n\n-----Explanation-----\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 3 3\") == \"1\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nnums = list(map(int, sys.stdin.readline().split()))\n\ncounts = [0] * 10\nfor num in nums:\n    counts[num] += 1\n\nans = 0\nfor i in range(1, 10):\n    if counts[i] > i:\n        ans += counts[i] - i\n\nprint(ans)\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 3 3\") == 1\nassert solution(\"4 2 3 2 3 1\") == 0\n\"\"\""
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3 3 3 3\") == '1'\n\nIf you want to test the solution locally, you can start the grader on your local machine:\n\nhttps://github.com/orgs/edx-mit-dynamic/actions/runs/1\n\nIf you want to test the solution on the grader, you can clone this repository and make a Pull Request on GitHub.\n\nOtherwise, you can always step through the solution on a computer that has Python 3 and the libraries listed below installed.\n\n\"\"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 3 3 3\") == \"1\"\n\"\"\""
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 3 3 3') == '1'\nassert solution('5\\n3 3 3 3 2') == '0'\n\"\"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 0\n\"\"\"\n\nfrom collections import Counter\nimport sys\n\nN = int(sys.stdin.readline())\ncounter = Counter(map(int, sys.stdin.readline().strip().split()))\n\nans = 0\nfor x in counter:\n    ans += counter[x] - 1\nprint(ans)\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 3 3\") == 1\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline())\ns = stdin.readline().split()\n\nmax_x = 0\nx_occur = {}\n\nfor x in s:\n    x_occur[x] = x_occur.get(x, 0) + 1\n    if x_occur[x] > max_x:\n        max_x = x_occur[x]\n\ncount = 0\n\nfor x in x_occur:\n    if x_occur[x] > max_x:\n        count += x_occur[x] - max_x\n\nprint(count)\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 3 3\") == 1\n\"\"\"\n\n\"\"\"\nThe number of unique occurrences of each number in the sequence is equal to its index in the sequence.\nWe can apply the method of counting unique occurrences.\n\nAs the result, we will have the number of times that each number appears in the sequence.\n\"\"\""
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 3 3 3\") == 1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n'''\n\nimport sys\n\ninput_string = sys.stdin.read()\n\nvalues = input_string.split(\" \")\n\nx1, x2, x3, x4, x5 = values\n\nx1 = int(x1)\nx2 = int(x2)\nx3 = int(x3)\nx4 = int(x4)\nx5 = int(x5)"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 2 3 4 5') == '1'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0 2 3 4 5') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('5 2 4 3 1') == '0'\nassert solution('5 4 3 2 1') == '3'\nassert solution('5 4 3 2 0') == '2'\n\nprint('Passed')\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\"\n\nx_1, x_2, x_3, x_4, x_5 = input().split()\nprint(int(x_1) if x_1 == \"0\" else int(x_2) if x_2 == \"0\" else int(x_3) if x_3 == \"0\" else int(x_4) if x_4 == \"0\" else int(x_5))\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\n\"\"\""
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\nassert solution(\"1 1 1 1 1\") == \"0\"\nassert solution(\"0 0 0 0 0\") == \"0\"\n\"\"\""
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 2 3 4 5\") == \"1\"\nassert solution(\"0 1 2 3 4 5\") == \"2\"\nassert solution(\"0 2 1 4 5 3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 5\\n') == 0\nassert solution('3 9\\n') == 0\nassert solution('1 9\\n') == 0\nassert solution('5 3\\n') == 0\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3, 5) == 0\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 5\n''') == '0'\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\") == \"0\"\nassert solution(\"6 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 5\\n1 3') == '0'\nassert solution('1 1\\n1 1') == '0'\nassert solution('3 4\\n4 3') == '0'\nassert solution('2 2\\n3 3') == '1'\n\"\"\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 5') == '0'\nassert solution('1 1') == '0'\nassert solution('2 2') == '1'\n\"\"\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\") == \"0\"\n\"\"\"\n\nimport math\n\nh, w = map(int, stdin.split())\nprint(h * w - math.ceil(h/3) * math.ceil(w/3))\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5\\n') == '0'\n\"\"\""
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5') == '0'\n\"\"\"\n\nH, W = [int(i) for i in input().split(' ')]"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n1 10 100''') == 'Yes'\nassert solution('''2\n1 10''') == 'No'\nassert solution('''2\n1 10''') == 'No'\nassert solution('''1\n1''') == 'Yes'\nassert solution('''1\n1\n''') == 'Yes'\n\n'''\n    10%\n    \u7b54\u3048\u304c10% \u3060\u3063\u305f\n    \u89e3\u8aac: https://www.slideshare.net/chokudai/arc095-arc097-arc098-arc099\n    \u7d50\u8ad6: \u521d\u671f\u5024\u306f1, 1\n    \u6700\u5c0f\u5024\u306f1.\n    \u3057\u304b\u3057\u3053\u308c\u306f O(N^2) \u3060\u3063\u305f\n    \u305d\u308c\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306b\u306f\u4e8c\u91cd\u30eb\u30fc\u30d7\u3092\u3057\u3066\u7d50\u5408\u3055\u305b\u3066\u3001\n    \u6700\u5c0f\u5024-1 \u307e\u3067\u8a08\u7b97\u3059\u308b\n    \u3053\u308c\u306f\u305d\u306e\u307e\u307e\u4e8c\u91cd\u30eb\u30fc\u30d7\u3067\u6642\u9593\u304c\u304b\u304b\u308b\n    \u305d\u3053\u3067\u306f\u4e8c\u91cd\u30eb\u30fc\u30d7\u30921\u56de\u3068\u3057\u3066\u6642\u9593\u3092\u8a08\u7b97\u3059\u308b\n'''\n\n'''\n    100%\n    \u89e3\u8aac: https://www.slideshare.net/chokudai/arc098-arc099-arc100\n    \u7d50\u8ad6: \u4e00\u91cd\u30eb\u30fc\u30d7\u3067 O(N) \u3060\u3063\u305f\n    \u4e8c\u91cd\u30eb\u30fc\u30d7\u3067 O(N^2) \u3060\u3063\u305f\n    \u305d\u308c\u3092\u4e00\u91cd\u30eb\u30fc\u30d7\u3068\u3057\u3066\u6642\u9593\u8a08\u7b97\u3059\u308b\n'''\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(sample_input_number)) == str(solution(sample_input_number))\n\n-----Solution-----\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'Yes'\nassert solution('1\\n2') == 'No'\nassert solution('1\\n1 2') == 'No'\nassert solution('1\\n2 3') == 'No'\nassert solution('1\\n1 2 3') == 'Yes'\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 10 100\") == \"Yes\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == 'Yes'\n\"\"\"\nimport sys"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 10 100\") == \"Yes\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 10 100\") == 'Yes'\nassert solution(\"1 10 10\") == 'No'\nassert solution(\"2 1 1\") == 'No'\nassert solution(\"10 10 100\") == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2 3 4') == 'No'\nassert solution('10\\n1 3 5 2 7 1 6 9 3 5') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 10 100\") == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 10 100\") == \"Yes\"\nassert solution(\"1 10 100 10 10 1 1\") == \"No\"\nassert solution(\"1 2 3 4 5 6\") == \"Yes\"\n\"\"\"\n\nfrom math import gcd"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"atcoder\") == \"No\"\n\"\"\""
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"abcd\") == \"No\"\nassert solution(\"acb\") == \"No\"\n\n\"\"\"\n\nimport sys\nimport collections\n\nclass Solution:\n    def solve(self, input: str) -> str:\n        s = collections.deque(input)\n        while len(s) > 1:\n            if s[0] == s[1]:\n                s.popleft()\n            else:\n                break\n        if len(s) == 1:\n            return \"No\"\n        for i in range(2, len(s)):\n            if s[i] < s[i - 1]:\n                return \"No\"\n        return \"Yes\"\n\nsolution = Solution().solve"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\n\"\"\"\n\n\"\"\"\nSolution1\n\nimport sys"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('atcoder') == 'No'\nassert solution('atlas') == 'Yes'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"zya\") == \"No\"\n\n\"\"\"\n\n\nfrom collections import deque"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"atcoder\") == \"No\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(xy) == \"Yes\"\nassert solution(xya) == \"Yes\"\nassert solution(atcoder) == \"No\""
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('yx') == 'Yes'\nassert solution('axy') == 'Yes'\nassert solution('abc') == 'No'\nassert solution('abcd') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"yx\") == \"Yes\"\nassert solution(\"axy\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5 1\\n\") == \"YES\"\nassert solution(\"7 5 1\\n\") == \"NO\"\nassert solution(\"7 1 1\\n\") == \"NO\"\nassert solution(\"7 1 5\\n\") == \"YES\"\nassert solution(\"1 1 1\\n\") == \"YES\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 5 1\\n') == 'YES'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == \"NO\"\nassert solution(\"2 2 2\\n\") == \"YES\"\nassert solution(\"7 5 1\\n\") == \"YES\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\nassert solution(\"2 2 5\") == \"NO\"\nassert solution(\"2 2 3\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 5 1\\n') == 'YES'\n\"\"\"\n\nfrom typing import Iterator\n\nfrom common import get_data, convert_to_int, run_tests\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 5 1') == 'YES'\nassert solution('3 5 6') == 'NO'\nassert solution('1 7 1') == 'YES'"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 5 1\\n\") == \"YES\"\nassert solution(\"5 3 7\\n\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"7 5 1\"\n) == \"YES\"\nassert solution(\n    \"9 16 2\"\n) == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5 1\") == \"YES\"\nassert solution(\"7 2 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"5 2\") == \"6\"\nassert solution(\"3 5\") == \"17\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2') == '1'\n\"\"\"\n\nA, B = [int(x) for x in stdin.split()]\nprint(A*B-2)"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '2 2'\n) == '1'\n\nassert solution(\n    '3 3'\n) == '10'\n\nassert solution(\n    '4 4'\n) == '25'\n\nassert solution(\n    '2 2'\n) == '1'\n\nassert solution(\n    '1 1'\n) == '0'\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 5') == '10'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2') == '1'"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"1\"\n\"\"\"\nimport sys\nimport os\nimport time"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_0) == \"1\"\n\nprint(solution(test_input_1))\nassert solution(test_input_1) == \"2\"\n\nprint(solution(test_input_2))\nassert solution(test_input_2) == \"2\"\n\nprint(solution(test_input_3))\nassert solution(test_input_3) == \"0\"\n\nprint(solution(test_input_4))\nassert solution(test_input_4) == \"4\"\n\nprint(solution(test_input_5))\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2') == '1'\n\"\"\"\n\nA, B = [int(i) for i in stdin.readline().strip().split()]\nprint((A-1) * (B-1) // 2)\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n') == '1'\nassert solution('2 3\\n') == '2'\nassert solution('1 1\\n') == '0'\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13 3 1\") == '3'\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13 3 1') == '3'\n\n-------TODO-------\n - add tests\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('13 3 1') == '3'\n\n\"\"\"\n\nimport math\n\nX, Y, Z = map(int, input().split())\ncount = 0"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('ab') == 'ab'\nassert solution('a') == 'a'\nassert solution('a' * 10 ** 10) == 'a' * 10 ** 10\nassert solution('a' * 10 ** 10 + 'b') == 'ab' * 10 ** 10\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('13 3 1') == '3'\n\nhttps://app.codility.com/demo/results/trainingC4WYH-6MA/\n\"\"\""
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13 3 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5 6') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"13 3 1\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''13 3 1''') == '3'\n\nassert solution('''13 3 2''') == '2'\n\nassert solution('''13 3 3''') == '1'\n\nassert solution('''13 3 4''') == '1'\n\nassert solution('''13 3 5''') == '0'"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5''') == 2\n\n'''\nhttps://www.hackerrank.com/challenges/crush/problem\n'''\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n''') == '2'\n\nassert solution('''\n3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n''') == '2'\n\nassert solution('''\n4\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n''') == '0'\n\nassert solution('''\n1\n1\n1\n1\n1\n1\n1\n''') == '0'\n\nassert solution('''\n1\n2\n3\n4\n''') == '0'"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4') == '2'\n\"\"\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 0\\n3 1\\n1 3\\n4 2\\n0 4') == 2\n\n\"\"\""
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 0\\n3 1\\n1 3\\n4 2\\n0 4\\n5 5\\n\") == 2\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n2 0\n3 1\n1 3''') == 2\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == 2\n\n-----Explanation-----\nIn this example, we have 3 red points and 3 blue points.\nThe maximum number of pairs are 2.\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 0\\n3 1\\n1 3\\n4 2\\n0 4\") == \"2\"\n\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\ndata = dict()\n\nfor _ in range(n):\n    i, j = tuple(map(int, sys.stdin.readline().strip().split(\" \")))\n    if i not in data:\n        data[i] = j\n    else:\n        data[i] = max(data[i], j)\n\ndata = list(data.items())\ndata.sort(key=lambda item: item[0])\n\nresult = 0\n\nfor i in range(len(data) - 1):\n    result += data[i][1] * (data[i + 1][0] - data[i][0])\n\nprint(result)\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\n3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5\n''') == '2'\n\n-----Explanation-----\nThe maximum number of pairs is 2.\n'''\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n0 3\\n\") == \"7\"\nassert solution(\"2 5\\n1 1\\n\") == \"5\"\n\"\"\"\nimport math\n\nn, t = [int(x) for x in input().split()]\n\nt = [int(x) for x in input().split()]\nt.sort()\n\ntot = t[0]\nfor i in range(n):\n    tot += t[i]\n    tot += t[n - i - 1]\n\nprint(math.ceil(tot / 2))\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\\n0 3\\n\") == \"7\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"5\"\nprint(\"Passed\")\n\"\"\"\n\n\nfrom typing import List, Tuple, Union, Iterable\nimport math"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 3\\n4 2\") == \"7\"\n\"\"\""
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('5 1\\n0 3\\n') == '1'\n\n'''"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''2 4\n0 3\n''') == '7'\n\n'''\n[Plan]\n1. \ub3d9\uc77c\ud55c \ubb38\uc7a5\uc73c\ub85c \uc811\uadfc\ud558\uae30\n2. \ubd84\ub9ac\ub41c \ubb38\uc7a5\uc73c\ub85c \uc811\uadfc\ud558\uae30\n\n[Note]\n1. n\uc774 \ucee4\uc9c0\uba74 \uba54\ubaa8\ub9ac \ucd08\uacfc\n2. \uc5f0\uc0b0\uc774 \ubc18\ubcf5\ub418\ub294 \ubb38\uc81c\n3. \ub9cc\uc57d \uc5ec\ub7ec \uac1c\uc758 \uc22b\uc790\ub4e4\uc744 \ubaa8\ub450 \uc774\uc6a9\ud558\uae30 \uc704\ud574 \ub2e4\ub978 \ubcc0\uc218\ub97c \uc0dd\uc131\ud558\ub294 \uacbd\uc6b0, \uae30\uc874\uc758 \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc0c8\ub85c\uc6b4 \ubcc0\uc218\ub97c \uc0dd\uc131\ud558\ub294 \ubc29\ubc95\uc5d0 \uc788\uc5b4\uc11c \uc0c8\ub85c\uc6b4 \ubcc0\uc218\ub97c \uc0dd\uc131\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4.\n4. \ud568\uc218\uc758 \uc544\uc6c3\ud48b\uc774 1 \uc774\uc0c1\uc758 \uac12\uc774\uae30 \ub54c\ubb38\uc5d0 \uccab \uc904\uc758 return\uc744 \uc81c\uc678\ud558\uace0\ub294 \ud589\ubcf5\ud55c \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uc600\ub2e4.\n'''\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4\\n0 3\") == \"7\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"7\"\n\"\"\"\n\nn, t = map(int, input().split())\ntimes = list(map(int, input().split()))\n\ncurr = 0\ntime = 0\n\nfor time in times:\n    curr += time\n    if curr > t:\n        break\n\nprint(time)\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1\n''') == '1\\n1\\n2\\n'\n\nassert solution('''10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n''') == '0\\n2\\n1\\n'\n\n'''\nPrints \n5\n0\n5\n1\n\nwith Python 3, but prints \n5\n0\n5\n1\n'''"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(example_input.strip()) == '1\\n1\\n2'\n\nassert solution(input.strip()) == '\\n'.join(map(str, (solution(input.strip()) for input in open(file_path, 'r', encoding='utf-8-sig'))))\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\"\nassert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"2\"\n\"\"\"\n\nimport sys\nsys.stdin = open(__file__.replace(\".py\", \"_input.txt\"))"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1') == '1\\n1\\n2'\nassert solution('10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115') == '0\\n2\\n1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8\\n1\\n2\\n3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n') == '1\\n1\\n2'\nassert solution('10\\n100\\n100000\\n123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n') == '0\\n2\\n1'\n\n\n\"\"\"\n\nimport sys\nimport queue\n\nT = int(input())\n\nq = queue.Queue()\n\nfor _ in range(T):\n    line = sys.stdin.readline().strip()\n    line = line.split()\n    if len(line) == 2:\n        q.put(line)\n    else:\n        _, num = q.get()\n        if line[0] == 'L':\n            print(num)\n        else:\n            print(num + 1)\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1') == '1\\n1\\n2'\nassert solution('10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115') == '0\\n2\\n1'\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8\\n1\\n2\\n3\\n?2\\n4\\n?1\\n5\\n?1\\n\") == \"1\\n1\\n2\\n\"\nassert solution(\"10\\n100\\n100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n\") == \"0\\n2\\n1\\n\"\n\n\"\"\"\n\nclass Book:\n    def __init__(self, id, value):\n        self.id = id\n        self.value = value"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n8\nL 1\nR 2\nR 3\n? 2\nL 4\n? 1\nL 5\n? 1\n''') == '1'\n\nassert solution('''\n10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n''') == '0'\n\nassert solution('''\n10\nL 100\nR 100000\nR 123\nL 101\n? 123\nL 10\nR 115\n? 100\nR 110\n? 115\n''') == '2'\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\") == \"1\"\nassert solution(\"10\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\") == \"0\"\n\n\"\"\"\n\n\n\n\"\"\"\n1.5 \u0421\u0442\u0440\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u0440\u0442\u0435\u0436\u0438\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u044b \u043f\u043e \u0432\u0435\u0441\u044c\u043c\u0430 \u0441\u0442\u0440\u0430\u043d\u043d\u043e\u043c\u0443 \u043a\u043b\u0430\u0441\u0441\u0443 \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u0439 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u0443\u0440\u0441\u0430 \u043e\u043f\u0438\u0441\u0430\u043b\u0438 \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0432\u044b\u0432\u043e\u0434\u0430 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0432\u0441\u0435\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u0440\u0442\u0435\u0436\u0430.\n\n\u0412\u0430\u043c \u0434\u0430\u043d\u044b \u043a\u043e\u0440\u0442\u0435\u0436\u0438 \u0438\u0437 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432. \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u0439 \u0432 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043e\u0434\u043d\u0438\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u0430. \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043e\u0440\u0442\u0435\u0436\u0430 \u0432 \u043e\u0434\u0438\u043d, \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0432 \u0438\u0445 \u043e\u0434\u043d\u0438\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c, \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043a\u043e\u0440\u0442\u0435\u0436\u0438 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0438\u0445 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u0440\u0442\u0435\u0436\u0438.\n\n\u0415\u0441\u043b\u0438 \u043a\u043e\u0440\u0442\u0435\u0436 \u043d\u0435 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u0439 \u0438\u043b\u0438 \u0432 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438\u0437 \u043d\u0438\u0445 \u0435\u0441\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b, \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043d\u0443\u0436\u043d\u043e.\n\n\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0441\u0442\u043e\u043b\u0431\u0438\u043a. \u0415\u0441\u043b\u0438 \u043a\u043e\u0440\u0442\u0435\u0436\u0438 \u0434\u043b\u0438\u043d\u044b \u043d\u0435 \u0440\u0430\u0432\u043d\u044b, \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0443\u0436\u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0443\u044e \u0434\u043b\u0438\u043d\u0443 \u0438\u0437 \u043d\u0438\u0445.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u0443\u0441\u043b\u043e\u0432\u0438\u044f if \u0438 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442:\n\nA = (1, 4, 7, 'hello')\nB = (2, 5, 8)\n\nA = (1, 4, 7, 'hello', 2, 5, 8)\nB = (1, 4, 7, 'hello', 2, 5, 8)\n\nA = (1, 4, 7, 'hello', 2, 5, 8)\nB = (1, 4, 7, 'hello', 2, 5, 8, )\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u044b \u043f\u043e\u043d\u0438\u043c\u0430\ufffd"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9') == '-1'\nassert solution('5\\n15\\n5\\n25\\n15\\n25') == '3\\n1'\n\"\"\"\n\nq = int(stdin.readline())\n\nfor _ in range(q):\n    n = int(stdin.readline())\n\n    counter = 0\n    while n!= 1:\n        counter += 1\n        if n % 2 == 0:\n            n /= 2\n        elif n % 3 == 0:\n            n /= 3\n        elif n % 5 == 0:\n            n /= 5\n        else:\n            n = -1\n            break\n    \n    if n == 1:\n        print(counter)\n    else:\n        print(-1)\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n    5\n    0\n    3\n    9\n    15\n    20\n    \"\"\") == \"6\"\n\nassert solution(\n    \"\"\"\n    5\n    1\n    10\n    25\n    30\n    \"\"\") == \"6\"\n\nassert solution(\n    \"\"\"\n    5\n    1\n    10\n    25\n    30\n    \"\"\") == \"6\"\n\nassert solution(\n    \"\"\"\n    5\n    1\n    10\n    25\n    30\n    \"\"\") == \"6\"\n\nassert solution(\n    \"\"\"\n    5\n    1\n    10\n    25\n    30\n    \"\"\") == \"6\""
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5\\n8\") == \"3\\n2\\n1\"\n\"\"\"\n\n\"\"\"\nfrom math import ceil\n\nn = int(input())\nfor _ in range(n):\n    x = int(input())\n    if x % 2 == 0 and x % 3 == 0 and x % 5 == 0:\n        print(\"impossible\")\n        continue\n    if x % 2 == 0 and x % 3 == 0:\n        x = ceil(x / 2)\n    elif x % 2 == 0:\n        x = ceil(x / 2)\n    elif x % 3 == 0:\n        x = ceil(x / 3)\n    elif x % 5 == 0:\n        x = ceil(x / 5)\n    else:\n        x = -1\n    print(x)\n\"\"\""
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n1\\n10\\n25\\n30\\n14\\n27\\n1000000000000000000') == '0\\n4\\n6\\n6\\n-1\\n6\\n72'\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"30 10 25 20 1\") == \"3\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7\n1\n10\n25\n30\n14\n27\n1000000000000000000''') == '''0\n4\n6\n6\n-1\n6\n72'''\nprint('OK')"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\") == \"0\"\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n10\\n100\\n1000\\n10000\\n10000000\\n100000000\\n1000000000\\n10000000000\\n100000000010\") == \"4\\n6\\n8\\n-1\\n9\\n20\\n-1\\n69\\n-1\\n-1\\n-1\\n0\\n1\\n-1\\n-1\"\nassert solution(\"8\\n1\\n10\\n100\\n1000\\n10000\\n10000000\\n100000000\\n1000000000\\n10000000000\\n100000000010\") == \"4\\n6\\n8\\n-1\\n9\\n20\\n-1\\n69\\n-1\\n-1\\n-1\\n0\\n1\\n-1\\n-1\"\nassert solution(\"7\\n1\\n10\\n100\\n1000\\n10000\\n10000000\\n100000000\\n1000000000\\n10000000000\\n100000000010\") == \"4\\n6\\n8\\n-1\\n9\\n20\\n-1\\n69\\n-1\\n-1\\n-1\\n0\\n1\\n-1\\n-1\"\nassert solution(\"7\\n1\\n10\\n100\\n1000\\n10000\\n10000000\\n100000000\\n1000000000\\n10000000000\\n100000000010\") == \"4\\n6\\n8\\n-1\\n9\\n20\\n-1\\n69\\n-1\\n-1\\n-1\\n0\\n1\\n-1\\n-1\"\nassert solution(\"9\\n1\\n10\\n100\\n1000\\n10000\\n10000000\\n100000000\\n1000000000\\n10000000000\\n100000000010\\n100000000100\") == \"8\\n6\\n8\\n-1\\n9\\n20\\n-1\\n69\\n-1\\n-1\\n-1\\n0\\n1\\n-1\\n-1\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == expected_result\n\"\"\""
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1 3\") == \"YES\"\nassert solution(\"4\\n1 1 2 1\") == \"NO\"\nassert solution(\"2\\n11 11\") == \"YES\"\nassert solution(\"1\\n100\") == \"NO\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n3\\n1 1 3\\n4\\n1 1 2 1\") == \"NO\"\nassert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\") == \"YES\"\nassert solution(\"3\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"3\\n11 11\\n1\\n100\") == \"YES\"\nassert solution(\"3\\n11 11\\n1\\n100\") == \"YES\"\n\n'''\n\nimport sys\nimport copy\nfrom collections import deque"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n3\\n1 1 3\\n4\\n1 1 2 1') == 'YES'\nassert solution('5\\n2\\n1 1\\n2\\n1 2 1 2') == 'NO'\nassert solution('7\\n5\\n5 5 1 1 1 1\\n5\\n5 5 5 5 1 1 1') == 'YES'\nassert solution('4\\n3\\n1 1 3\\n1\\n2\\n2\\n1 2 1 2') == 'NO'\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\") == 'YES'\nassert solution(\"3\\n1 1 3\\n4\\n1 1 2 1\") == 'NO'\nassert solution(\"11\\n11\\n1\") == 'YES'\nassert solution(\"100\\n100\\n1\") == 'NO'\n\n\"\"\"\n\nimport collections\n\nclass Solution:\n    def solve(self, stdin):\n        t = int(stdin.readline())\n        for _ in range(t):\n            n = int(stdin.readline())\n            a = list(map(int, stdin.readline().split()))\n            a += [0] * (n + 1)\n            stack = collections.deque()\n            for i, a_i in enumerate(a):\n                stack.append((i, a_i))\n            \n            while len(stack) > 0:\n                i, a_i = stack.pop()\n                if a_i > 0:\n                    for j in range(i - 1, i - a_i - 1, -1):\n                        stack.append((j, a[j]))\n                        a[j] += 1\n                        if a[j] > 0:\n                            break\n                    else:\n                        stack.append((i, a_i - 1))\n            for a_i in a:\n                if a_i > 0:\n                    break\n            else:\n                print('YES')\n            \n            if len(stack) > 0:\n                print('NO')\n        return None\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\") == \"YES\"\nassert solution(\"4\\n1 2 1 3\") == \"NO\"\nassert solution(\"4\\n1 1 2 1\") == \"YES\"\nassert solution(\"2\\n11 11\") == \"NO\"\n\"\"\"\nimport sys\nfrom typing import List\n\n\nclass Solution:\n    def __init__(self):\n        pass\n\n    def solution(self, stdin: str) -> str:\n        \"\"\"\n        :type stdin: str\n        :rtype: str\n        \"\"\"\n        pass\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n2\\n1 1 3') == 'YES'\nassert solution('3\\n2\\n1 1 2 1') == 'NO'\nassert solution('3\\n1\\n1 1 3') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'NO'\nassert solution('2 2 2') == 'YES'\nassert solution('2 1 2') == 'NO'\nassert solution('2 3 4') == 'YES'\nassert solution('1 1 1') == 'YES'\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n2\\n1 1 3\\n4\\n1 1 2 1\") == \"NO\"\nassert solution(\"1\\n2\\n1 1 2\") == \"YES\"\nassert solution(\"1\\n100\\n1\") == \"YES\"\nassert solution(\"1\\n100\\n5\") == \"NO\"\n\"\"\"\n\nfrom sys import stdin\nfrom collections import deque"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\\n\") == \"YES\"\nassert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\\n\") == \"NO\"\nassert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\\n\") == \"YES\"\nassert solution(\"4\\n1 1 3\\n4\\n1 1 2 1\\n2\\n11 11\\n1\\n100\\n\") == \"NO\"\n\n\"\"\"\nimport sys\nfrom typing import List\nfrom collections import Counter\nfrom math import log2, floor, ceil\nfrom itertools import takewhile\n\nMAX_COLUMN = 100\nTESTS = int(sys.stdin.readline())\nfor i in range(TESTS):\n    num_columns = int(sys.stdin.readline())\n    heights = list(map(int, sys.stdin.readline().split()))\n    start_index = 0\n    while start_index < len(heights):\n        if heights[start_index] < 1:\n            start_index += 1\n            continue\n        for j in range(start_index, len(heights)):\n            if heights[j] == heights[start_index] + 1:\n                heights[j] = heights[start_index] + 2\n                start_index += 1\n                break\n            elif heights[j] == heights[start_index] - 1:\n                heights[j] = heights[start_index] - 1\n                start_index += 1\n                break\n        else:\n            break\n    if sum(heights) <= MAX_COLUMN:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 1 3\") == 'NO'\nassert solution(\"4\\n1 1 2 1\") == 'YES'\nassert solution(\"2\\n11 11\") == 'YES'\nassert solution(\"1\\n100\") == 'YES'\n\n---\n\nclass Tester:\n    def __init__(self, input_str: str):\n        self.t = int(input_str.split('\\n')[0])\n        self.n = int(input_str.split('\\n')[1])\n        self.a = list(map(int, input_str.split('\\n')[2: self.t+2]))\n\n    def check(self, output_str: str) -> bool:\n        return 'YES' == output_str\n\n    def test(self) -> bool:\n        for i in range(self.t):\n            answer = 'YES'\n            while self.a[i] > 0:\n                self.a[i] += 2\n                self.a[i+1] = 0 if i == 0 else self.a[i] - 1\n                if self.a[i] >= 2:\n                    answer = 'NO'\n                    break\n            if answer == 'NO':\n                break\n        else:\n            answer = 'YES'\n        if self.n > 100:\n            answer = 'NO'\n        return self.check(answer)\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\") == 4\nassert solution(\"bacabaa\") == 0\nassert solution(\"zcabd\") == 0\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacaba\", \"bacabaa\") == 4\nassert solution(\"zcabd\", \"dbacz\") == 0\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abacaba\") == \"4\"\nassert solution(\"zcabd\") == \"0\"\n\"\"\""
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\", \"bacabaa\") == 4\nassert solution(\"zcabd\", \"dbacz\") == 0\n\n\"\"\"\n\nimport string"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abacaba') == 4\nassert solution('zcabd') == 0\nassert solution('bacabaa') == 4\n\"\"\""
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aac') == 'aac'\nassert solution('abacaba') == 'bacabaa'\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacaba\") == 4\n\"\"\"\n\nn = int(input())\na = input()\nb = input()\n\ncount = 0\nfor i in range(n // 2):\n    if a[i]!= b[i]:\n        count += 1\n    if a[i + n // 2]!= b[i + n // 2]:\n        count += 1\n\nprint(count)"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abacaba\") == 4\nassert solution(\"bacabaa\") == 0\n\n\"\"\""
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == \"4\"\nassert solution(\"zcabd\") == \"0\"\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == \"4\"\nassert solution(\"bacabaa\") == \"0\"\nassert solution(\"zcabd\") == \"0\"\n\nassert solution(\"abba\") == \"2\"\nassert solution(\"abbba\") == \"1\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\n\nassert solution(\"1 1 10\\n1 1 1\") == \"0\"\nassert solution(\"3 2 5\\n1 5 10\\n10 1 1\\n1 1 10\\n1 1 1\") == \"1\"\nassert solution(\"3 2 10\\n1 10 10\\n10 1 1\\n1 1 10\\n1 1 1\") == \"299999998\"\n\n\"\"\"\n\nfrom itertools import cycle\n\nt = int(input())\n\nfor i in range(t):\n    a, b, k = [int(i) for i in input().split()]\n    print(sum([-1, a, b] * int(k)))\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n0 1 0\\n1 2 1\\n0 1 1\") == \"1\"\nassert solution(\"5\\n3 2 1\\n100 1 4\\n1 10 5\\n1000000000 1 6\") == \"198\\n-17\\n2999999997\\n0\\n1\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 3\") == \"8\\n0\\n0\"\nassert solution(\"6 2 3\") == \"198\\n-17\\n2999999997\\n0\\n1\"\nassert solution(\"6 2 3\") == \"198\\n-17\\n2999999997\\n0\\n1\"\nassert solution(\"1 10 5\") == \"8\\n-17\\n2999999997\\n0\\n1\"\n\nassert solution(\"6 2 3\") == \"198\\n-17\\n2999999997\\n0\\n1\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8 198 -17 2999999997 0 1\"\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\nassert solution(\"6 10 4\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\n\n\n-----Details-----\n\nThe answer for the first query is $5 - 2 + 5 = 8$.\n\nThe answer for the second query is $100 - 1 + 100 - 1 = 198$.\n\nThe answer for the third query is $1 - 10 + 1 - 10 + 1 = -17$.\n\nThe answer for the fourth query is $10^9 - 1 + 10^9 - 1 + 10^9 - 1 = 2999999997$.\n\nThe answer for the fifth query is $0$.\n\nThe answer for the sixth query is $1$.\n\n\n-----Hints-----\n\n1. Try to solve the problem without using any loop constructs like for, while, or recursion.\n2. This problem can be solved with a linear algebraic system.\n\n\n-----Solution-----\n\nhttps://www.codewars.com/kata/5cd7f3f576e1160f1e0000c3/solutions/python\n\n\"\"\"\n\n\nfrom numpy import linalg"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 3') == '5', 'Wrong'\nassert solution('5 2 3') == '8', 'Wrong'\nassert solution('5 2 3') == '8', 'Wrong'\nassert solution('5 2 3') == '8', 'Wrong'\nassert solution('5 2 3') == '8', 'Wrong'"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2 3\") == \"0\"\nassert solution(\"4 2 1\") == \"3\"\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''6\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999''') == '8198-172999999997011'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3\\n100 1 4\\n1 10 5\\n1000000000 1 6\\n1 1 1000000000\\n1 1 999999999\\n\") == \"8\\n198\\n-17\\n2999999997\\n0\\n1\"\n\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3\\n2\\n1\\n1') == '2'\nassert solution('5\\n1\\n2\\n3\\n4') == '5'\n\"\"\"\n\n\nfrom math import sqrt\nfrom typing import Set, List\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000') == '1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089'\nassert solution('8\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n1000000000000000000') == '1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n1350851717672992089'\n\"\"\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1') == '1'\nassert solution('2\\n1') == '3'\nassert solution('2\\n2') == '3'\nassert solution('2\\n3') == '4'\nassert solution('2\\n4') == '6'\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_data) == test_result\n\"\"\""
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2\") == \"3\"\nassert solution(\"2\\n3\") == \"4\"\nassert solution(\"3\\n10\") == \"13\"\nassert solution(\"5\\n4\") == \"9\"\nassert solution(\"7\\n10\") == \"13\"\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n3\") == \"2\"\n\"\"\""
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6\\n1') == '3'\nassert solution('2\\n2') == '2'\nassert solution('2\\n6') == '9'\nassert solution('1\\n3') == '1'\nassert solution('4\\n1') == '1'\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5\") == \"8\"\nassert solution(\"2\\n3\") == \"6\"\nassert solution(\"3\\n1\") == \"4\"\nassert solution(\"3\\n1\") == \"4\"\nassert solution(\"5\\n2\") == \"9\"\n\"\"\"\n\n\nfrom math import log, ceil\nfrom time import sleep\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1') == '4'\nassert solution('2\\n1') == '2'\nassert solution('4\\n11') == '6'\nassert solution('1\\n11') == '11'\nassert solution('7\\n123') == '9'\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2\\n1\") == \"2\"\n\nassert solution(\"5\\n10\\n15\\n2\\n7\") == \"15\"\n\nassert solution(\"6\\n19\\n20\\n1\\n15\\n16\") == \"16\"\n\nassert solution(\"2\\n20000\\n10001\") == \"10001\"\n\"\"\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 8 5 3') == '70'\nassert solution('12 343 43 45 43 39 123212') == '177177'\nassert solution('1000000000 1000000000 1 1 1') == '999999999000000000'\nassert solution('1000000000 1000000000 1 1 1000000000') == '999999999'\nassert solution('10 11 2 1 5') == '10'\n\"\"\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 10 8 5 3\") == \"70\"\nassert solution(\"12 8 8 7 2\") == \"77\"\nassert solution(\"12343 43 4543 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(input_1) == output_1\nassert solution(input_2) == output_2\nassert solution(input_3) == output_3\nassert solution(input_4) == output_4\n\nprint(solution(input()))\n\n----\n\nYou are given four integers $a$, $b$, $x$ and $y$. Initially, $a \\ge x$ and $b \\ge y$. You can do the following operation no more than $n$ times:\n\n  Choose either $a$ or $b$ and decrease it by one. However, as a result of this operation, value of $a$ cannot become less than $x$, and value of $b$ cannot become less than $y$.\n\nYour task is to find the minimum possible product of $a$ and $b$ ($a \\cdot b$) you can achieve by applying the above operation no more than $n$ times.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe only line of the test case contains five integers $a$, $b$, $x$, $y$ and $n$ ($1 \\le a, b, x, y, n \\le 10^9$). Additional constraint on the input: $a \\ge x$ and $b \\ge y$ always holds.\n\n\n-----Output-----\n\nFor each test case, print one integer: the minimum possible product of $a$ and $b$ ($a \\cdot b$) you can achieve by applying the above operation no more than $n$ times.\n\n\n-----Example-----\nInput\n7\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n\nOutput\n70\n77\n177177\n999999999000000000\n999999999\n55\n10\n\n\n\n-----Note-----\n\nIn the first test case of the example, you need to decrease $b$ three times and obtain $10 \\cdot 7 = 70$.\n\nIn the second test case of the example, you need to decrease $a$ one time, $b$ one time and obtain $11 \\cdot 7 = 77$.\n\nIn the sixth test case of the example, you need to decrease $a$ five times and obtain $5 \\cdot 11 = 55$.\n\nIn the seventh test case of the example, you need to decrease $b$ ten times and obtain $10 \\cdot 1 = 10$.\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"707717717799999999999999999\"\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"77\"\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"177177\"\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"999999999000000000\"\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"999999999\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70\\n77\\n177177\\n999999999\\n55\\n10\"\nassert solution(\"7\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70\\n77\\n177177\\n999999999\\n55\\n10\"\nassert solution(\"7\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70\\n77\\n177177\\n999999999\\n55\\n10\"\nassert solution(\"7\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70\\n77\\n177177\\n999999999\\n55\\n10\"\n\n-------"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70\\n77\\n177177\\n999999999\\n55\\n10\"\n\nsolution(\"5\\n11 1 2 3 4\\n5 1 3 2 4\\n5 2 3 2 4\\n5 3 4 3 4\\n3 3 4 4 3\\n3 4 3 4 3\")\n\n\"\"\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70\\n77\\n177177\\n999999999000000000\\n999999999\\n55\\n10\"\n\nassert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70\\n77\\n177177\\n999999999000000000\\n999999999\\n55\\n10\"\nassert solution(\"1 1 1 1\\n100 100\\n100 100\\n100 100\\n100 100\") == \"0\\n0\\n0\\n0\"\nassert solution(\"1 1 1 1\\n1 1\\n1 1\\n1 1\\n1 1\") == \"0\\n0\\n0\\n0\"\nassert solution(\"1 1 1 1\\n1 1\\n1 1\\n1 1\\n1 1\") == \"0\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\") == \"70\\n77\\n177177\\n999999999000000000\\n999999999\\n55\\n10\"\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 10 8 5 3\\n12 8 8 7 2\\n12343 43 4543 39 123212\\n1000000000 1000000000 1 1 1\\n1000000000 1000000000 1 1 1000000000\\n10 11 2 1 5\\n10 11 9 1 10\\n') == '7077177177999999999'\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 10 8 5 3\") == \"70\"\nassert solution(\"12 8 8 7 2\") == \"77\"\nassert solution(\"12343 43 4543 39 123212\") == \"177177\"\nassert solution(\"1000000000 1000000000 1 1 1\") == \"999999999000000000\"\nassert solution(\"1000000000 1000000000 1 1 1000000000\") == \"999999999\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 3\\n10 10') == '1'\n\"\"\"\n\nimport math\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('12') == '12'\nassert solution('111') == '111'\nassert solution('1') == '1'\nassert solution('123') == '123'\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n10 10\\n2 4\\n7 4\\n9 3') == '1\\n0\\n2\\n2\\n1'\nassert solution('2 3\\n10 10\\n2 4\\n7 4\\n9 3') == '1\\n0\\n2\\n2\\n1'"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\n10 10\") == \"1\\n0\\n2\\n2\\n1\"\nprint(\"Test passed\\n\")\n\n\n-----"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n10 10') == '1'\nassert solution('2 4\\n7 4') == '0'\nassert solution('2 4\\n7 4') == '2'\nassert solution('2 4\\n7 4') == '2'\nassert solution('2 4\\n7 4') == '2'"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3') == '1'\nassert solution('10 10') == '0'\nassert solution('2 4') == '2'\nassert solution('7 4') == '2'\nassert solution('9 3') == '1'\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n10 10') == '1'\nassert solution('2 4\\n7 4') == '2'\nassert solution('9 3\\n2 4') == '2'\n\nassert solution('5\\n2 5') == '0'\nassert solution('9 3\\n7 4') == '2'\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n10 10') == '1'\nassert solution('2 4\\n7 4') == '2'\nassert solution('9 3\\n2 4') == '2'"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('2 3\\n10 10\\n2 4\\n7 4\\n9 3') == '1\\n0\\n2\\n2\\n1'\nassert solution('2 4\\n7 4\\n9 3') == '0\\n2\\n2\\n1'\nassert solution('2 3\\n10 10\\n2 4\\n7 4\\n9 3') == '1\\n0\\n2\\n2\\n1'\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\n10 10') == '1'\nassert solution('2 4\\n7 4') == '0'\nassert solution('9 3\\n2 4') == '2'\nassert solution('1 1\\n1 1') == '0'"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\n\nprint(solution('22\\n9999\\n1\\n777'))\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\n\"\"\""
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == '13\\n90\\n1\\n66'\nprint('Test passed\\n')\n\n\n-----Solution-----\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"22\\n9999\\n1\\n777\") == \"13\\n90\\n1\\n66\"\nprint(solution(\"22\\n9999\\n1\\n777\"))"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n22\\n9999\\n1\\n777') == '13'\n\"\"\""
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\nprint('Test pass.')"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('22\\n9999\\n1\\n777\\n') == '13\\n90\\n1\\n66\\n'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('22') == 13\nassert solution('9999') == 90\nassert solution('1') == 1\nassert solution('777') == 66\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('22\\n9999\\n1\\n777') == '13'\n\"\"\"\n\nimport sys\nfrom collections import deque\nfrom typing import Deque\n\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('22\\n9999\\n1\\n777') == '13\\n90\\n1\\n66'\nprint(solution('22\\n9999\\n1\\n777'))\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\") == \"NO\"\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\"\n\"\"\""
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\"\nassert solution(\"4\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\") == \"YES\\n2 2\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\") == \"NO\"\n\n\"\"\"\n\nfrom typing import List\nimport sys\nimport bisect\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == \"YES\\n2 2\\n4 1\"\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'YES 2 6\\n1 2\\n'\n\n\"\"\"\n\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"4\\n6\\n2 2 2 2 2\\n5\\n2 2 2 2 2\") == \"YES\\n2 2\\n4 1\"\n\"\"\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\n\"\"\") == \"YES\\n2 6\\n1 2\"\n\nassert solution(\"\"\"\n4\n2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n\"\"\") == \"YES\\n2 2\\n4 1\"\n\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == 'YES\\n2 6\\n1 2'\nassert solution(\"1\\n5\\n5\\n1 1 1 1 1\\n2\\n2 3\") == 'NO'\nassert solution(\"4\\n6\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == 'YES\\n2 2\\n4 1'\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\n\"\"\") == \"YES\\n2 6\\n1 2\"\nassert solution(\"\"\"\n4\n6\n2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n\"\"\") == \"YES\\n2 2\\n4 1\"\n\n\"\"\"\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 3 1 3 2\\n6\\n1 1 2 2 2 1\") == \"YES\\n2 6\\n1 2\"\n\"\"\"\n\nk = int(stdin.readline())"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3\\n1 3 2\\n6\\n1 1 2 2 2 1\") == 'YES\\n2 6\\n1 2'\nassert solution(\"4\\n5\\n2 2 2 2 2 2\\n5\\n2 2 2 2 2\\n3\\n2 2 2\") == 'YES\\n2 2\\n4 1'\nassert solution(\"3\\n1\\n5\\n5\\n1 1 1 1 1\") == 'NO'\n\"\"\""
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"[4,2,3]\", 1) == 5\nassert solution(\"[3,-1,0,2]\", 3) == 6\nassert solution(\"[2,-3,-1,5,-4]\", 2) == 13\nassert solution(\"[4,2,3,0,5,-1]\", 2) == 9\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 3\\n1\\n2\\n3\\n1') == '5\\n6\\n-6\\n13'\nassert solution('3 -1 0 2\\n2\\n3\\n3') == '6\\n1\\n1\\n6'\nassert solution('2 -3 -1 5 -4\\n2\\n3\\n3') == '13\\n1\\n1\\n13'\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2 3\\n1\\n1\\n1\\n2') == 5\nassert solution('3 -1 0 2\\n3\\n3\\n3\\n4') == 6\nassert solution('2 -3 -1 5 -4\\n2\\n3\\n3\\n4') == 13\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 2 3') == '5'\nassert solution('3 -1 0 2') == '6'\nassert solution('2 -3 -1 5 -4') == '13'"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4') == '5'\nassert solution('4 2 3') == '5'\nassert solution('3 -1 0 2') == '6'\nassert solution('2 -3 -1 5 -4') == '13'"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 2 3', '1') == '5'\nassert solution('3 -1 0 2', '3') == '6'\nassert solution('2 -3 -1 5 -4', '2') == '13'\nassert solution('5 -7 10 9 11', '3') == '35'\nassert solution('-5 -7 10 9 11', '3') == '-35'\n\n'''\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(A,K) == Expected\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def maxSumAfterPartitioning(self, A: List[int], K: int) -> int:\n        n = len(A)\n        dp = [[0] * (K + 1) for _ in range(n)]\n        \n        for i in range(n):\n            currMax = 0\n            for k in range(1, min(i + 1, K + 1)):\n                currMax = max(currMax, A[i - k + 1])\n                dp[i][k] = dp[i - 1][k] + currMax * k\n        \n        return dp[n - 1][K]\n\n\nprint(Solution().maxSumAfterPartitioning(A = [1,15,7,9,2,5,10], K = 3))\n\n\n\n\n    "
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 2 3') == 5\nassert solution('3 -1 0 2') == 6\nassert solution('2 -3 -1 5 -4') == 13\n\"\"\"\n\n\nfrom typing import List\nimport math\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        while K > 0 and len(A) > 0:\n            # print(A)\n            if A[0] < 0:\n                A[0] = -A[0]\n                K -= 1\n            elif A[0] > 0:\n                if K % 2 == 0:\n                    A[0] = -A[0]\n                    K -= 1\n                else:\n                    return sum(A)\n            A.pop(0)\n        return sum(A)"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('[4,2,3], 1') == 5\nassert solution('[3,-1,0,2], 3') == 6\nassert solution('[2,-3,-1,5,-4], 2') == 13"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2 3') == 5\nassert solution('3 -1 0 2') == 6\nassert solution('2 -3 -1 5 -4') == 13\n\"\"\"\n\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A, K: int) -> int:\n        if K >= len(A):\n            return sum(A)\n        for i in range(K):\n            A.sort()\n            A[0] = -A[0]\n        return sum(A)\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1) == True\nassert solution(0, 2, 1, -6, 6, 7, 9, -1, 2, 0, 1) == False\nassert solution(3, 3, 6, 5, -2, 2, 5, 1, -9, 4) == True\nassert solution(3, 3, 6, 5, -2, 2, 5, 1, -9, 4) == True\nassert solution(3, 3, 6, 5, -2, 2, 5, 1, -9, 4) == True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        # \u601d\u8def\uff1aA\u957f\u5ea6\u4e0d\u80fd\u5c0f\u4e8e3\n        if len(A) < 3:\n            return False\n\n        total = sum(A)\n        if total % 3:\n            return False\n        target = total // 3\n        sub_sum = 0\n        count = 0\n        for num in A:\n            sub_sum += num\n            if sub_sum == target:\n                count += 1\n                sub_sum = 0\n        return count >= 3\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        # \u601d\u8def\uff1aA\u957f\u5ea6\u4e0d\u80fd\u5c0f\u4e8e3\n        if len(A) < 3:\n            return False\n        total = sum(A)\n        if total % 3:\n            return False\n        target = total // 3\n        sub_sum = 0\n        count = 0\n        for num in A:\n            sub_sum += num\n            if sub_sum == target:\n                count += 1\n                sub_sum = 0\n        return count >= 3\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0,2,1,-6,6,-7,9,1,2,0,1') == True\nassert solution('0,2,1,-6,6,7,9,-1,2,0,1') == False\nassert solution('3,3,6,5,-2,2,5,1,-9,4') == True\n\nimport time\n\nstart_time = time.time()\n\nend_time = time.time()\nprint('Time:'+ str(end_time - start_time))\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n3\\n6\\n5\\n-2\\n2\\n5\\n1\\n-9\\n4\") == True\nassert solution(\"3\\n3\\n6\\n5\\n-2\\n2\\n5\\n1\\n-9\\n4\") == False\nassert solution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == True\nassert solution(\"0\\n2\\n1\\n-6\\n6\\n7\\n9\\n1\\n2\\n0\\n1\") == False\n\"\"\"\n\n\"\"\"\nGiven an array A of integers, return true if and only if we can partition the array into three non-empty parts with equal sums.\n\nFormally, we can partition the array if we can find indexes i+1 < j with (A[0] + A[1] +... + A[i] == A[i+1] + A[i+2] +... + A[j-1] == A[j] + A[j-1] +... + A[A.length - 1])\n\nExample 1:\nInput: A = [0,2,1,-6,6,-7,9,1,2,0,1]\nOutput: true\nExplanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1\n\nExample 2:\nInput: A = [0,2,1,-6,6,7,9,-1,2,0,1]\nOutput: false\n\nExample 3:\nInput: A = [3,3,6,5,-2,2,5,1,-9,4]\nOutput: true\nExplanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4\n\n\"\"\"\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        # how to partition the array?\n        # is it possible to partition the array into three parts\n        # equal sum?\n        # with the minimum length of each part\n        # or can we use DP to solve it?\n        # sum(A) - sum(A[0:i]) = sum(A[i:j]) - sum(A[j:])\n        #   A[0:i] + A[i:j] + A[j:] = A\n        # sum(A[0:i]) + sum(A[i:j]) = sum(A[0:j])\n        #   A[0:i] + A[i:j] + A[j:] = A\n        # A[0:i] + A[i:j] = A[0:j]\n        #   A[0:j] = 0\n        #   A[0:j] + A[i:j] = A\n        #    sum(A[0:i]) = sum(A) - sum(A[0:i])\n        #   sum(A[0:i]) = sum(A) - sum(A[0:j])\n        #   A[0:j] = sum(A) - sum(A[0:i])\n        #       A[0:j] = sum(A)\n        #       A[0:j] = sum(A) - sum(A[0:i])\n        #       A[0:j] = sum(A) - sum(A[0:i]) - sum(A[i:j])\n        #   sum(A[0:j]) = sum(A) - sum(A[0:i]) - sum(A[i:j])\n        #       A[0:j] = sum(A) - sum(A[0:i]) - sum(A[i:j])\n        #       A[0:j] = sum(A) - sum(A[0:i]) - sum(A[i:j]) + sum(A[i:j])\n        #           A[0:j] = sum(A) - sum(A[0:i]) - sum(A[i:j]) - sum(A[i:j])\n        #           A[0:j] = sum(A) - sum(A[0:i]) - sum(A[i:j]) - sum(A[i:j]) + sum(A[i:j])\n        #           A[0:j] = sum(A) - sum(A[0:i]) - sum(A[i:j]) - sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j])\n        #           A[0:j] = sum(A) - sum(A[0:i]) - sum(A[i:j]) - sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j])\n        #             A[0:j] = sum(A) - sum(A[0:i]) - sum(A[i:j]) - sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j])\n        #             A[0:j] = sum(A) - sum(A[0:i]) - sum(A[i:j]) - sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j])\n        #             A[0:j] = sum(A) - sum(A[0:i]) - sum(A[i:j]) - sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j])\n        #             A[0:j] = sum(A) - sum(A[0:i]) - sum(A[i:j]) - sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j])\n        #             A[0:j] = sum(A) - sum(A[0:i]) - sum(A[i:j]) - sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j])\n        #             A[0:j] = sum(A) - sum(A[0:i]) - sum(A[i:j]) - sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j]) + sum(A[i:j])\n        #             A[0:j] = sum(A) - sum"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0,2,1,-6,6,-7,9,1,2,0,1\") == True\nassert solution(\"0,2,1,-6,6,-7,9,1,2,0,1\") == False\nassert solution(\"3,3,6,5,-2,2,5,1,-9,4\") == True\nassert solution(\"0,0,0,0,0,0,0,0,0,0\") == True\nassert solution(\"-2,-1,1,2,3,0,0,0,0\") == True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('0,2,1,-6,6,-7,9,1,2,0,1') == True\nassert solution('0,2,1,-6,6,7,9,-1,2,0,1') == False\nassert solution('3,3,6,5,-2,2,5,1,-9,4') == True\n\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        if len(A) < 3:\n            return False\n        S = sum(A)\n        if S % 3:\n            return False\n        S //= 3\n        s = 0\n        i = 0\n        j = len(A)-1\n        for i in range(len(A)):\n            s += A[i]\n            if s == S:\n                break\n        if s!= S:\n            return False\n        for j in range(len(A)-1, -1, -1):\n            s += A[j]\n            if s == S:\n                break\n        return s == S and j < i"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"[0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]\") == \"true\"\nassert solution(\"[0, 2, 1, -6, 6, 7, 9, 1, 2, 0, 1]\") == \"false\"\nassert solution(\"[3, 3, 6, 5, -2, 2, 5, 1, -9, 4]\") == \"true\"\n\"\"\"\n\nimport collections\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        S = sum(A)\n        if S % 3!= 0:\n            return False\n        S //= 3\n        d = collections.defaultdict(int)\n        c = 0\n        for a in A:\n            c += a\n            if d[c] == 0:\n                d[c] = 1\n            else:\n                d[c] += 1\n        for k in d:\n            if d[k] == 1 and k == S:\n                return True\n        return False\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        S = sum(A)\n        if S % 3!= 0:\n            return False\n        S //= 3\n        c = 0\n        for a in A:\n            c += a\n            if c == S:\n                return True\n        return False\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == 'true'\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == 'false'\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == 'true'\n\n\"\"\"\nfrom typing import List\nimport itertools\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        # \u8fb9\u754c\u6761\u4ef6\n        if not A or len(A) < 3:\n            return False\n        # \u6c42\u603b\u548c\n        total = sum(A)\n        if total % 3!= 0:\n            return False\n        # \u6c42\u548c\u5217\u8868\n        total = [i for i in A]\n        # \u6c423\u5206\n        for i in range(2, len(A)):\n            if total[:i] == total[i:] and sum(total[:i]) == sum(total[i:]) and len(total[:i]) >= 2:\n                return True\n        return False\n\n\nassert Solution().canThreePartsEqualSum([0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]) == 'true'\nassert Solution().canThreePartsEqualSum([0, 2, 1, -6, 6, 7, 9, -1, 2, 0, 1]) == 'false'\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"[0,2,1,-6,6,-7,9,1,2,0,1]\") == True\nassert solution(\"[0,2,1,-6,6,7,9,-1,2,0,1]\") == False\nassert solution(\"[3,3,6,5,-2,2,5,1,-9,4]\") == True\n'''\n\nclass Solution:\n    def canThreePartsEqualSum(self, A):\n        s = sum(A)\n        if s % 3!= 0:\n            return False\n        \n        target = s // 3\n        count = 0\n        res = []\n        for num in A:\n            count += num\n            if count == target:\n                count = 0\n                res.append(1)\n        \n        if len(res) < 3:\n            return False\n        else:\n            return True"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(A) == true\nassert solution(B) == false\nassert solution(C) == true\nassert solution(D) == false\nassert solution(E) == false\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\nbeat\\nvet\\nbeet\\nbed\\nvet\\nbet\\nbeet\\n\") == \"beet\\nvet\\n\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\nbeat\\n: \\nvet\\n: \\nbeet\\n: \\nbed\\n: \\nbet\\n: \\nvet\\n: \\nbeet\") == \"beet vet\""
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3\na\nb\nc\na\nb\nc\n\"\"\") == \"a\\nb\\nc\"\nassert solution(\"\"\"5\na\na\na\na\na\n\"\"\") == \"a\"\nassert solution(\"\"\"10\na\nb\nc\na\nb\nc\na\na\na\na\na\n\"\"\") == \"a\\nb\\nc\\na\"\n\n-----Problem link & #Tag-----\nhttps://codeforces.com/problemset/problem/1185/C\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nbeat:vet:beet:bed\\neat:vet\") == \"beet\\nvet\"\nassert solution(\"7\\nbeat:vet:beet:bed:vet:bet:beet\") == \"beet\\nvet\"\n\"\"\""
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\nbeat\\n:\\nvet\\nbeet\\nbed\\n:\\nvet\\nbet\\nbeet\\n\") == \"beet vet\"\nassert solution(\"7\\nbeat\\nbeet\\nbed\\n:\\nvet\\nbet\\nbeet\\n\") == \"beet vet\"\nassert solution(\"7\\nbeat\\nbeet\\nbed\\n:\\nvet\\nbet\\nbeet\\n\") == \"beet vet\"\nassert solution(\"7\\nbeat\\nbeet\\nbed\\n:\\nvet\\nbet\\nbeet\\n\") == \"beet vet\"\nassert solution(\"7\\nbeat\\nbeet\\nbed\\n:\\nvet\\nbet\\nbeet\\n\") == \"beet vet\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\na\\n:a\\n1\\n\") == \"a\\n\"\nassert solution(\"2\\nb\\nc\\n:b\\n1\\n:c\\n1\\n\") == \"b\\n\"\nassert solution(\"3\\nd\\ne\\nf\\n:d\\n1\\n:e\\n1\\n:f\\n1\\n\") == \"d\\n\"\n\"\"\"\n\nimport string\nimport sys"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\nbeet\\nvet\\n:\\nbeet\\nbet\\n:\") == \"beet and vet\"\n\"\"\"\n\nn = int(stdin.readline())\nvotes = []\nfor i in range(n):\n    votes.append(stdin.readline())\n\nvote_count = {}\nfor vote in votes:\n    vote_count[vote] = vote_count.get(vote, 0) + 1\n\nmax_votes = max(vote_count.values())\n\nprint(sorted([key for key, value in vote_count.items() if value == max_votes]))\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nbee\\neet\\nbat\\ntab\") == \"bee\\neet\\ntab\"\nassert solution(\"4\\na\\nb\\na\\nb\") == \"a\\nb\"\nassert solution(\"4\\na\\nab\\na\\nb\") == \"a\\nb\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\nbeat\\n: \\nbeat\\nvet\\n: \\nvet\\nbeet\\n: \\nbeet\\nbed\\n: \\nbed\\nvet\\n: \\nvet\\nbet\\n: \\nbet\") == \"beet vet\"\nassert solution(\"8\\na\\na\\na\\na\\na\\na\\na\\n: \\na\\na\\na\\na\\na\\na\\n: \\na\\na\\na\\na\\na\\na\") == \"a\"\nassert solution(\"5\\n\\n\\n\\n\\n\\n: \\n\\n\\n\\n\\n\\n\\n\") == \" \"\nassert solution(\"6\\n\\n\\n\\n: \\n\\n\\n\\n: \\n\\n\\n\\n\\n\\n\\n\") == \" \"\nassert solution(\"9\\n: \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\") == \" \"\n\"\"\"\n\n\n\"\"\"\nThere are 2N people, and 1, 2,..., N seats are numbered from 1 to N, in ascending order.\n\nAll 2N people have different preferences for different seats.\n\nFor every valid i, seats[i] is the number of the seat that the i-th person would like to sit in.\n\nNote that these seats are numbered from 1 to N in ascending order.\n\nFor example, the following description is given for 3 people:\n\npeople: 3\nseats: 1 2 3\nseat preferences:\n1: 3\n2: 2\n3: 1\n\nThe first person cannot sit in the seat with number 2, because it is the seat that the second person wants.\n\nThe second person cannot sit in the seat with number 3, because it is the seat that the third person wants.\n\nThe third person can sit in the seat with number 1, since it is the seat that the first person wants.\n\nWe will call the i-th person's seat number L[i].\n\nNow, we know the seat numbers of all the people. The number of the seats which have not been taken yet is N.\n\nFor example, if L[1] = 2, the seat number 2 is free.\n\nGiven the seat numbers L[1],..., L[N], find the number of people who cannot find a seat.\n\n-----Input-----\nThe first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains two space-separated integers N and M.\nThe second line contains N space-separated integers L[1],..., L[N].\n\n-----Output-----\nPrint a single line containing one integer \u2015 the number of people who cannot find a seat.\n\n-----Sample Input-----\n3\n3 2\n1 3\n2 1 3\n3 2\n4 4\n1 2 3 4\n\n-----Sample Output-----\n1\n0\n0\n\n-----Explanation-----\nIn the first test case, there are 3 people and the number of free seats is 2, so only 1 person cannot find a seat.\n\nIn the second test case, there are 2 people and the number of free seats is 3, so both people cannot find a seat.\n\nIn the third test case, there are 3 people and the number of free seats is 3, so all 3 people can find a seat.\n\"\"\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\nbee\\n\") == \"bee\"\n\"\"\"\nimport itertools"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 8\\n') == '8'\nassert solution('4 4\\n') == '8'\nassert solution('4 8\\n') == '8'\n\"\"\"\nfrom functools import lru_cache"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '2\\n4 8\\n'\n) == '8'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8\") == \"8\"\n\"\"\""
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n8') == '8'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\narr = list(map(int, sys.stdin.readline().split()))\narr.sort()\n\ncost = 0\nfor i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n        cost += abs(arr[j] - arr[i]) ** 2\n\nprint(cost)\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 8\\n') == '8'\n\n---"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n4 8') == '8'\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\n8\n''') == '8'\nassert solution('''2\n4 8\n''') == '8'\nassert solution('''3\n-1 -1 -1\n''') == '0'\nassert solution('''4\n5 2 6 -1\n''') == '15'\nassert solution('''4\n-1 -1 6 4\n''') == '0'\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_0) == test_output_0"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n4 8\\n') == '8'\n\"\"\"\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n4 8\\n') == '8'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\n150\\n100\\n\") == \"84\"\n\"\"\""
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\"\n\nfrom typing import List, Tuple, Dict\n\nX: int\nA: int\nB: int\nY: int\n\nx: int\na: int\nb: int\ny: int\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2\\n1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10\\n1\\n2') == '84'\n\"\"\"\n\nx = int(input())\na = int(input())\nb = int(input())\n\nprint(x - a - b)\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"1234\\n150\\n100\") == \"84\"\nassert solution(\n    \"1500\\n100\\n50\") == \"850\"\nassert solution(\n    \"10000\\n1000\\n100\") == \"9010\"\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n\"\"\"\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1234 150 100\") == \"84\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('2 2') == '8'\n\n'''\n\nimport sys"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"8\"\n\"\"\"\nimport math"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 2\\n') == '8'\nassert solution('1 1\\n') == '1'\nassert solution('3 3\\n') == '6'\nassert solution('4 4\\n') == '24'\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2') == 8\nassert solution('1 1') == 1\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2\\n') == 8\n\"\"\""
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == 8\n\"\"\"\n\nimport sys\nimport unittest\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == 'POSSIBLE'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == 'POSSIBLE'\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\\n\") == \"POSSIBLE\"\nassert solution(\"3 2\\n1 3\\n2 3\\n\") == \"POSSIBLE\"\nassert solution(\"3 2\\n1 2\\n2 1\\n\") == \"POSSIBLE\"\nassert solution(\"3 2\\n1 2\\n2 3\\n\") == \"IMPOSSIBLE\"\nassert solution(\"3 2\\n1 3\\n2 1\\n\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == 'POSSIBLE'\nassert solution('1 1\\n2 3') == 'IMPOSSIBLE'\nassert solution('1 10\\n1 10') == 'IMPOSSIBLE'\nassert solution('2 2\\n1 2\\n2 3') == 'IMPOSSIBLE'\n\"\"\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 2\\n1 2\\n2 3') == 'POSSIBLE'\n\"\"\""
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'''3 2\n1 2\n2 3'''\n) == 'POSSIBLE'\n\nassert solution(\n'''3 2\n1 3\n2 3'''\n) == 'IMPOSSIBLE'\n\nassert solution(\n'''3 2\n1 2\n2 1'''\n) == 'POSSIBLE'\n\nassert solution(\n'''3 2\n1 3\n2 2'''\n) == 'IMPOSSIBLE'\n\nassert solution(\n'''2 2\n1 2\n1 2'''\n) == 'IMPOSSIBLE'"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"3 2\n1 2\n2 3\n\"\"\") == 'POSSIBLE'\nassert solution(\"\"\"3 2\n1 3\n2 3\n\"\"\") == 'POSSIBLE'\nassert solution(\"\"\"3 2\n1 3\n2 1\n\"\"\") == 'IMPOSSIBLE'\nassert solution(\"\"\"3 2\n1 3\n2 1\n1 3\n\"\"\") == 'IMPOSSIBLE'\nassert solution(\"\"\"3 2\n1 3\n3 1\n\"\"\") == 'IMPOSSIBLE'\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\") == \"POSSIBLE\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2\\n1 2\\n2 3\\n\") == \"POSSIBLE\"\nassert solution(\"3 2\\n1 3\\n2 2\\n\") == \"IMPOSSIBLE\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('atcoder') == 'acdr'\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('atcoder') == 'acdr'"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('atcoder') == 'acdr'\n\"\"\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"acb\") == \"b\"\nassert solution(\"a\") == \"a\"\n\"\"\""
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"atcoder\") == \"acdr\"\n\"\"\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\nassert solution(\"rng gorilla banana\") == \"NO\"\nassert solution(\"rng gorilla apple banana\") == \"YES\"\nassert solution(\"gorr p\") == \"NO\"\nassert solution(\"gorr p\") == \"YES\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\nassert solution(\"rng oge gorer apple\") == \"NO\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == output\n'''\n\nimport sys"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('rng gorilla apple') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"rng gorilla apple\") == \"YES\"\n\"\"\"\n\ninput_str = input()\ninput_str_list = input_str.split()\n\nstring_1 = input_str_list[0]\nstring_2 = input_str_list[1]\nstring_3 = input_str_list[2]"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('36 24') == 'GREATER'\n\"\"\"\n\nA, B = input().split()\nprint('GREATER' if int(A) > int(B) else 'LESS' if int(A) < int(B) else 'EQUAL')\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('36 24') == 'GREATER'\n\"\"\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('36 24') == 'GREATER'\nassert solution('36 24') == 'GREATER'\nassert solution('36 24') == 'GREATER'\n\"\"\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'EQUAL'\nassert solution('12 34') == 'LESS'\nassert solution('12 12') == 'EQUAL'\n\n'''"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('36 24') == 'GREATER'\n\"\"\"\nimport sys"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\n-----Explanation-----\n36 and 24 have the same magnitude, so we print \"GREATER\".\n\"\"\"\n\nimport sys\nimport os\nimport string\nimport re\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\"\n\nimport sys\nimport os\nfrom typing import List, Dict\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('36 24') == 'GREATER'\nprint(solution('36 24'))\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"36 24\") == \"GREATER\"\n\"\"\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == \"2\"\nprint('Passed')\n\"\"\""
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == \"2\"\n\"\"\""
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == 2\n\"\"\""
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\napple\\norange\\napple\\n1\\ngrape\\n') == '2'\nassert solution('1\\n1\\n') == '0'\nassert solution('1\\n1\\n1\\n1\\n') == '1'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n') == '2'\nassert solution('1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n') == '5'\n\n\"\"\""
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == 2\n\"\"\""
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\napple\\norange\\napple\\n1\\ngrape\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\napple\\norange\\napple\\n1\\ngrape\") == 2\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\"\n\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\nassert solution('G') == 'C'\nassert solution('T') == 'A'\n\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\"\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('A') == 'T'\nassert solution('C') == 'G'\nassert solution('G') == 'C'\nassert solution('T') == 'A'\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\"\n\"\"\""
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A\") == \"T\"\nassert solution(\"C\") == \"G\"\nassert solution(\"G\") == \"C\"\nassert solution(\"T\") == \"A\"\n\"\"\""
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2 2 4 1\\n1 2 2 2 1') == '14'\n\"\"\"\n\n\"\"\"\nN = int(input())\nA = [list(map(int, input().split())) for i in range(2)]\n\ntotal = A[0][0] + A[1][0]\ncount = 0\nfor i in range(N):\n    if A[0][i] >= A[1][i]:\n        count += A[1][i]\n    else:\n        count += A[0][i]\n    if count > total:\n        total = count\n\nprint(total)\n\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3 2 2 4 1\") == \"14\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input())\narr = [list(map(int, input().split())) for _ in range(2)]\ndp = [[0] * n for _ in range(2)]\ndp[0][0] = arr[0][0]\ndp[1][0] = arr[1][0]\nfor i in range(1, n):\n    dp[0][i] = max(dp[0][i - 1], dp[1][i - 1] + arr[0][i])\n    dp[1][i] = max(dp[1][i - 1], dp[0][i - 1] + arr[1][i])\nprint(max(dp[0][-1], dp[1][-1]))\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == \"14\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == 14\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3 2 2 4 1\") == \"14\"\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n3 2 2 4 1\") == '14'\n\"\"\"\nimport sys"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\") == \"14\"\nprint(\"PASS\")\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3 2 2 4 1\") == 14\n\"\"\"\n\nn = int(input())\narr = [int(i) for i in input().split()]\ndp = [[0 for i in range(n)] for j in range(2)]\n\ndp[0][0] = arr[0]\ndp[1][0] = arr[1]\n\nfor i in range(1, n):\n    dp[0][i] = dp[1][i - 1] + arr[i]\n    dp[1][i] = max(dp[0][i - 1], dp[1][i - 1]) + arr[i]\n\nprint(max(dp[0][-1], dp[1][-1]))"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(output())\n\"\"\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1 1') == '2'\nassert solution('5\\n3 2 2 4 1') == '14'\n\"\"\"\n\nimport numpy as np\n\nn = int(input())\na = np.array(list(map(int, input().split())))\n\ncount = 0\nx, y = 1, 0\n\nfor i in range(n):\n    if a[x, y] == 0:\n        break\n    count += a[x, y]\n    a[x, y] = 0\n    if x+1 < n and a[x+1, y]!= 0:\n        x = x+1\n    else:\n        if y+1 < n and a[x, y+1]!= 0:\n            y = y+1\n        else:\n            x = x-1\n            y = y-1\n\nprint(count)\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\n\"\"\"\n\nimport sys\n\ninput = lambda: sys.stdin.readline().rstrip()\n\nN, x = map(int, input().split())\nA = list(map(int, input().split()))"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2 1') == 3\nassert solution('1 3 2') == 1\nassert solution('3 2 2') == 2\nassert solution('3 3 3') == 0\nassert solution('3 2 3') == 3\n\"\"\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n2 2 2 1') == '1'\n\"\"\"\n\nfrom math import floor\nfrom typing import List, Tuple, Optional\n\n\nclass Box:\n    def __init__(self, n: int, x: int, a: List[int]):\n        self.n = n\n        self.x = x\n        self.a = a\n        self.q: List[int] = [0 for _ in range(n)]\n        self.q_: List[int] = [0 for _ in range(n)]\n\n    def update(self):\n        \"\"\"\n        :return: q_[0] is the number of candies in the box which has the minimum number of candies in the box\n        \"\"\"\n        q_0 = self.q[0]\n        for i in range(1, self.n):\n            self.q_[i] = self.q_[i - 1] + self.a[i]\n            if self.q_[i] > self.x:\n                q_0 = i\n                break\n        self.q[0] = q_0\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\") == \"8\"\nassert solution(\"3 1\") == \"4\"\nassert solution(\"3 3\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 2\") == \"1\"\n\nassert solution(\"3 3\") == \"5\"\n\"\"\""
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\nassert solution(\"5 5\\n1 2 1 3 2 1\") == \"7\"\nassert solution(\"2 2\\n1 1\") == \"0\"\n\"\"\"\n\nimport sys\n\nn, m = sys.stdin.readline().split()\nn, m = int(n), int(m)\nlst = list(map(int, sys.stdin.readline().split()))\n\nimport heapq\n\nheap = []\n\nfor i in lst:\n    heapq.heappush(heap, i)\n\nanswer = 0\n\nwhile len(heap) > 1:\n    # print(heap)\n    temp = heapq.heappop(heap) + heapq.heappop(heap)\n    answer += temp\n    heapq.heappush(heap, temp)\n    # print(heap)\n    # print()\n\nprint(answer)"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n2 2 2\") == '1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n2 2 2\\n\") == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n2 2 2\") == \"1\"\n\n------Test Case 1.-----\nassert solution(\"3 3\\n2 2 2\") == \"1\"\n\nassert solution(\"3 2\\n2 2 2\") == \"1\"\n\nassert solution(\"3 3\\n3 3 3\") == \"0\"\n\nassert solution(\"3 3\\n1 1 1\") == \"0\""
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == 'Yes'\nassert solution(\"2 2 3\\n1 1 2\\n1 1 1\") == 'Yes'\nassert solution(\"3 1 3\\n2 2 3\\n3 1 3\") == 'No'\nassert solution(\"3 0 3\\n2 0 2\\n3 0 3\") == 'No'\nassert solution(\"4 1 1\\n3 2 3\\n4 0 3\\n3 1 3\") == 'No'\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\\n\") == \"Yes\"\nassert solution(\"1 0 1\\n2 1 2\\n2 1 2\\n\") == \"No\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'Yes'\nassert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\nassert solution('1 0 1\\n2 1 2\\n3 0 3') == 'No'\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\nassert solution('1 0 1\\n2 1 2\\n1 0 1') == 'No'\n\n\"\"\""
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 0 1\\n2 1 2\\n1 0 1\") == \"Yes\"\n\"\"\"\nimport ast\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"1 0 1\\n2 1 2\\n1 0 1\"), \"Yes\")"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 0 1\\n2 1 2\\n1 0 1') == 'Yes'\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1 0 1\n2 1 2\n1 0 1''') == 'Yes'\nassert solution('''1 0 1\n2 1 2\n1 0 1''') == 'No'\n\n-----Explanation-----\n0+1=1\n1+1=2\n0+1=1\n\nIn the example, the sum of the numbers in the first square is 1+1+1=3, and the sum of the numbers in the second square is 2+0+1=3.\nThe number written in the first square is equal to the sum of the numbers in the second square.\nSo Takahashi is correct.\n\n\"\"\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''1 0 1\n2 1 2\n1 0 1''') == 'Yes'"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ABC') == 'ARC'\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABC') == 'ARC'\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('ABC') == 'ARC'\nassert solution('ARC') == 'ABC'\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABC\") == \"ARC\"\n\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC\") == \"ARC\"\nassert solution(\"ARC\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ABC') == 'ARC'\n\"\"\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 8 2') == '3'\nprint(solution('4 8 2'), end=' ')\n\nprint(\"mycount \", mycount)\n'''\n\na, b, x = map(int, input().split())\nmycount = 0\nfor i in range(a, b + 1):\n    if i % x == 0:\n        mycount += 1\nprint(mycount)\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 8 2\\n\") == \"3\"\n\"\"\"\n\na, b, x = input().split()\na, b, x = int(a), int(b), int(x)\ncount = 0\nfor i in range(a, b+1):\n    if i % x == 0:\n        count += 1\nprint(count)\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 8 2') == '3'\n\"\"\""
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 8 2') == '3'\n\n\"\"\""
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\"\n\nimport sys\n\na, b, x = map(int, sys.stdin.readline().split())\n\ncount = 0\n\nfor i in range(a, b + 1):\n    if i % x == 0:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(solution(input()))\nprint(str(solution(input())))"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 8 2\") == \"3\"\n\"\"\"\n\nfrom __future__ import division\nfrom math import floor\nfrom math import ceil\n\nstdin = input()\na, b, x = map(int, stdin.split())"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8 2\\n') == '3'\n\"\"\""
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 8 2\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"25\"\n) == \"Christmas\"\n\nassert solution(\n    \"24\"\n) == \"Christmas Eve\"\n\nassert solution(\n    \"23\"\n) == \"Christmas Eve Eve\"\n\nassert solution(\n    \"22\"\n) == \"Christmas Eve Eve Eve\"\n\n-----"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('25') == 'Christmas'\nassert solution('24') == 'Christmas Eve'\nassert solution('23') == 'Christmas Eve Eve'\nassert solution('22') == 'Christmas Eve Eve Eve'\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"25\") == \"Christmas\"\nassert solution(\"24\") == \"Christmas Eve\"\nassert solution(\"23\") == \"Christmas Eve Eve\"\nassert solution(\"22\") == \"Christmas Eve Eve Eve\"\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('25') == 'Christmas'\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('25') == 'Christmas'"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('25') == 'Christmas', \"First Test FAILED\"\nassert solution('24') == 'Christmas Eve', \"Second Test FAILED\"\nassert solution('23') == 'Christmas Eve Eve', \"Third Test FAILED\"\nassert solution('22') == 'Christmas Eve Eve Eve', \"Fourth Test FAILED\"\nprint('All tests passed')\n\n\"\"\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"25\") == \"Christmas\"\n\"\"\"\n\nd = int(input())"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('25') == 'Christmas'\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"25\") == \"Christmas\"\n\"\"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"25\") == \"Christmas\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    \"7\"\n) == \"4\"\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\") == \"4\"\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(8) == '4'\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7') == '4'\n\"\"\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\") == \"4\"\nassert solution(\"8\") == \"4\"\nassert solution(\"3\") == \"0\"\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input))\n\"\"\"\n\n\"\"\"\n6.\nGiven two strings, find the length of longest common substring.\n\n-----Constraints-----\n - 1 \u2264 length of str1, length of str2 \u2264 100\n\n-----Input-----\nInput is given from Standard Input in the following format:\nstr1\nstr2\n\n-----Output-----\nPrint the length of longest common substring.\n\n-----Sample Input-----\nabcd\nbcde\n\n-----Sample Output-----\n2\n\n\"\"\"\n\n\"\"\"\n7.\nGiven three strings a, b and c, find the length of longest common substring among them.\n\n-----Constraints-----\n - 1 \u2264 length of a, length of b, length of c \u2264 100\n\n-----Input-----\nInput is given from Standard Input in the following format:\na\nb\nc\n\n-----Output-----\nPrint the length of longest common substring.\n\n-----Sample Input-----\nabcd\nbcde\ncdef\n\n-----Sample Output-----\n2\n\n\"\"\"\n\n\"\"\"\n8.\nGiven a string, find the first non-repeating character in it and return its index. If it doesn't exist, return -1.\n\nNote: You may assume the string contains only lowercase English letters.\n\n-----Constraints-----\n - 1 \u2264 length of S \u2264 10^6\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the index of first non-repeating character.\n\n-----Sample Input-----\nabacabad\n\n-----Sample Output-----\n-1\n\n\"\"\"\n\n\"\"\"\n9.\nGiven a string, find the first non-repeating character in it and return its index. If it doesn't exist, return -1.\n\nNote: You may assume the string contains only lowercase English letters.\n\n-----Constraints-----\n - 1 \u2264 length of S \u2264 10^6\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the index of first non-repeating character.\n\n-----Sample Input-----\nabacabad\n\n-----Sample Output-----\n0\n\n\"\"\"\n\n\"\"\"\n10.\nGiven a string, find the first character that occurs in odd number of strings.\n\nNote: You may assume the string contains only lowercase English letters.\n\n-----Constraints-----\n - 1 \u2264 length of S \u2264 10^6\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the first character that occurs in odd number of strings.\n\n-----Sample Input-----\ngeeksforgeeks\n\n-----Sample Output-----\nf\n\n\"\"\"\n\n\"\"\"\n11.\nGiven a string, find the first non-repeating character in it and return its index. If it doesn't exist, return -1.\n\nNote: You may assume the string contains only lowercase English letters.\n\n-----Constraints-----\n - 1 \u2264 length of S \u2264 10^6\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the index of first non-repeating character.\n\n-----Sample Input-----\nabacabad\n\n-----Sample Output-----\n0\n\n\"\"\"\n\n\"\"\"\n12.\nGiven an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.\n\nFor example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.\n\nYou can modify the input array in-place.\n\n-----Constraints-----\n - 1 \u2264 length of array \u2264 10^6\n - -10^9 \u2264 array element \u2264 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nArray of integers separated by space\n\n-----Output-----\nPrint the lowest positive integer that does not exist in the array.\n\n-----Sample Input-----\n1 -3 4 -1 2\n\n-----Sample Output-----\n1\n\n\"\"\"\n\n\"\"\"\n13.\nGiven a number N, print the first N Fibonacci numbers.\nThe first two numbers are 0 and 1.\n\n-----Constraints-----\n - 1 \u2264 N \u2264 10^5\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\n\n-----Output-----\nPrint the first N Fibonacci numbers.\n\n-----Sample Input-----\n8\n\n-----Sample Output-----\n0 1 1 2 3 5 8\n\n\"\"\"\n\n\"\"\"\n14.\nGiven a string, find the first non-repeating character in it and return its index. If it doesn't exist, return -1.\n\nNote: You may assume the string contains only lowercase English letters.\n\n-----Constraints-----\n - 1 \u2264 length of S \u2264 10^6\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the index of first non-repeating character.\n\n-----Sample Input-----\ngeeksforgeeks\n\n-----Sample Output-----\n0\n\n\"\"\"\n\n\"\"\"\n15.\nGiven a string, find the first non-repeating character in it and return its index. If it doesn't exist, return -1.\n\nNote: You may assume the string contains only lowercase English letters.\n\n-----Constraints-----\n - 1 \u2264 length of S \u2264 10^6\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the index of first non-repeating character.\n\n-----Sample Input-----\nabacabad\n\n-----Sample Output-----\n0\n\n\"\"\"\n\n\"\"\"\n16.\nGiven a string, find the first non-repeating character in it and return its index. If it doesn't exist, return -1.\n\nNote: You may assume the string contains only lowercase English letters.\n\n-----Constraints-----\n - 1 \u2264 length of S \u2264 10^6\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the index of first non-repeating character.\n\n-----Sample Input-----\ngeeksforgeeks\n\n-----Sample Output-----\n4\n\n\"\"\"\n\n\"\"\"\n17.\nGiven a string, find the first non-repeating character in it and return its index. If it doesn't exist, return -1.\n\nNote: You may assume the string contains only lowercase English letters.\n\n-----Constraints-----\n - 1 \u2264 length of S \u2264 10^6\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the index of first non-repeating character.\n\n-----Sample Input-----\ngeeksforgeeks\n\n-----Sample Output-----\n4\n\n\"\"\"\n\n\"\"\"\n18.\nGiven a string, find the first non-repeating character in it and return its index. If it doesn't exist, return -1.\n\nNote: You may assume the string contains only lowercase English letters.\n\n-----Constraints-----\n - 1 \u2264 length of S \u2264 10^6\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the index of first non-repeating character.\n\n-----Sample Input-----\ngeeksforgeeks\n\n-----Sample Output-----\n4\n\n\"\"\"\n\n\"\"\"\n19.\nGiven a string, find the first non-repeating character in it and return its index. If it doesn't exist, return -1.\n\nNote: You may assume the string contains only lowercase English letters.\n\n-----Constraints-----\n - 1 \u2264 length of S \u2264 10^6\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the index of first non-repeating character.\n\n-----Sample Input-----\ngeeksforgeeks"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\") == \"4\"\n\"\"\"\n\n\"\"\"\nThe answer is the number that has the most number of divisors.\nDivisors of a number are numbers less than or equal to the number which divide the number without a remainder.\nTo find number of divisors we have to find the prime factorization of the number.\nAn efficient way to do this is with the help of the prime factorization theorem.\nThe prime factorization theorem states that every integer greater than 1 can be written as a product of prime numbers.\nhttps://en.wikipedia.org/wiki/Prime_factorization_theorem\n\"\"\""
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n7\n\"\"\"\n) == \"4\"\n\"\"\"\nTime limit: 1.00 s\nMemory limit: 512 MB\n\"\"\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"2\"\nassert solution(\"4\") == \"2\"\n\"\"\"\n\nn = int(stdin.readline())\n\ncount = 0\n\nfor i in range(1, n+1):\n    if i % 2 == 0:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output\nprint('all tests passed...')\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 7 9 3\") == 'Yes'\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(3, 4, 1, 5) == \"Yes\"\nassert solution(3, 4, 1, 3) == \"No\"\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 7 9 3''') == 'Yes'\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 7 9 3') == 'Yes'\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(sample_inputs.stdin_1)) == 'Yes'\nassert solution(str(sample_inputs.stdin_2)) == 'Yes'\n\"\"\"\nimport sys\n\na, b, c, d = list(map(int, sys.stdin.readline().rstrip().split()))"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 7 9 3\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == ABC\n\"\"\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('   ') == ''\nassert solution('a b c ') == 'ABC'\nassert solution('a b c d e f g') == 'ABC'\nassert solution('ab c') == 'ABC'\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('atcoder beginner contest') == 'ABC'\n\"\"\""
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"atcoder beginner contest\") == \"ABC\"\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('50 100 120') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n\"\"\"\n\nimport sys\n\ninput = list(map(int, sys.stdin.read().split()))\n\nprint(\"Yes\" if sum(input[:-1]) >= input[-1] else \"No\")\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"20 50 100\") == \"No\"\nassert solution(\"50 50 100\") == \"No\"\nassert solution(\"50 50 100 50\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'Yes'\nassert solution('50 100 120') == 'Yes'\nassert solution('50 120 120') == 'No'\nassert solution('50 100 120 200') == 'No'\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"200 100 120\") == \"No\"\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\nassert solution(\"100 100 120\") == \"No\"\nassert solution(\"100 100 200\") == \"No\"\n\nimport sys"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"50 100 120\") == \"Yes\"\n\n-----Instructions-----\nYou are given 3 integers: A, B, and C. You want to test whether the following\nexpression is true or false:\n\nA + B = C\nWrite a function to return the result of the expression.\n\nIf the expression is true, return True. Otherwise, return False.\n\nYou do not need to perform mathematical operations.\n\n\"\"\"\n\n\"\"\"\n100, 100, 100, ==> True\n10, 100, 110, ==> False\n100, 200, 300, ==> False\n\"\"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 9 8 9') == '5'\n\"\"\""
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\n\n\"\"\""
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n\"\"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\nassert solution('5 6\\n1 2 3 4 5') == '0'\nassert solution('3 10\\n3 5 8') == '1'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 9 8 9\\n') == '5'\n\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin), end=\"\")\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 8\\n7 9 8 9\") == \"5\"\n\n\"\"\"\n\nfrom utils.parser import get_input_method, Parser\nfrom utils.printer import Printer\n\nprinter = Printer()\nparser = Parser()\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''4 8\n7 9 8 9''') == '5'\nassert solution('''4 8\n7 8 9 9''') == '0'\nassert solution('''1 1\n1''') == '0'\nassert solution('''1 1\n2''') == '1'\n\n'''\nIf you have a card with 2 different numbers on it, then you can pick up any number from the two cards on the card. So the number of ways to select one card from N cards, is the number of ways to pick up 2 numbers on one card. So the total number of ways to select cards is the number of ways to pick up 2 numbers on N cards.\n\nIf you have a card with 3 different numbers on it, then you can pick up any number from the three cards on the card. So the number of ways to select one card from N cards, is the number of ways to pick up 3 numbers on one card. So the total number of ways to select cards is the number of ways to pick up 3 numbers on N cards.\n\nIf you have a card with 4 different numbers on it, then you can pick up any number from the four cards on the card. So the number of ways to select one card from N cards, is the number of ways to pick up 4 numbers on one card. So the total number of ways to select cards is the number of ways to pick up 4 numbers on N cards.\n\nIf you have a card with 5 different numbers on it, then you can pick up any number from the five cards on the card. So the number of ways to select one card from N cards, is the number of ways to pick up 5 numbers on one card. So the total number of ways to select cards is the number of ways to pick up 5 numbers on N cards.\n\nIf you have a card with 6 different numbers on it, then you can pick up any number from the six cards on the card. So the number of ways to select one card from N cards, is the number of ways to pick up 6 numbers on one card. So the total number of ways to select cards is the number of ways to pick up 6 numbers on N cards.\n\nIf you have a card with 7 different numbers on it, then you can pick up any number from the seven cards on the card. So the number of ways to select one card from N cards, is the number of ways to pick up 7 numbers on one card. So the total number of ways to select cards is the number of ways to pick up 7 numbers on N cards.\n\nIf you have a card with 8 different numbers on it, then you can pick up any number from the eight cards on the card. So the number of ways to select one card from N cards, is the number of ways to pick up 8 numbers on one card. So the total number of ways to select cards is the number of ways to pick up 8 numbers on N cards.\n\nIf you have a card with 9 different numbers on it, then you can pick up any number from the nine cards on the card. So the number of ways to select one card from N cards, is the number of ways to pick up 9 numbers on one card. So the total number of ways to select cards is the number of ways to pick up 9 numbers on N cards.\n\nIf you have a card with 10 different numbers on it, then you can pick up any number from the ten cards on the card. So the number of ways to select one card from N cards, is the number of ways to pick up 10 numbers on one card. So the total number of ways to select cards is the number of ways to pick up 10 numbers on N cards.\n\nIf you have a card with 11 different numbers on it, then you can pick up any number from the eleven cards on the card. So the number of ways to select one card from N cards, is the number of ways to pick up 11 numbers on one card. So the total number of ways to select cards is the number of ways to pick up 11 numbers on N cards.\n\nIf you have a card with 12 different numbers on it, then you can pick up any number from the twelve cards on the card. So the number of ways to select one card from N cards, is the number of ways to pick up 12 numbers on one card. So the total number of ways to select cards is the number of ways to pick up 12 numbers on N cards.\n\nIf you have a card with 13 different numbers on it, then you can pick up any number from the thirteen cards on the card. So the number of ways to select one card from N cards, is the number of ways to pick up 13 numbers on one card. So the total number of ways to select cards is the number of ways to pick up 13 numbers on N cards.\n\nIf you have a card with 14 different numbers on it, then you can pick up any number from the fourteen cards on the card. So the number of ways to select one card from N cards, is the number of ways to pick up 14 numbers on one card. So the total number of ways to select cards is the number of ways to pick up 14 numbers on N cards.\n\nIf you have a card with 15 different numbers on it, then you can pick up any number from the fifteen cards on the card. So the number of ways to select one card from N cards, is the number of ways to pick up 15 numbers on one card. So the total number of ways to select cards is the number of ways to pick up 15 numbers on N cards.\n\nIf you have a card with 16 different numbers on it, then you can pick up any number from the sixteen cards on the card. So the number of ways to select one card from N cards, is the number of ways to pick up 16 numbers on one card. So the total number of ways to select cards is the number of ways to pick up 16 numbers on N cards.\n\n'''\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n\n\"\"\"\n\nfrom itertools import permutations\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 8\\n7 9 8 9') == '5'\n\"\"\""
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\n\n-----\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1 2 3') == '4 2 1 3'\nassert solution('3 4 2 1') == '4 2 1 3'\nassert solution('5 8 6 6 5') == '5 8 6 6 5'\nassert solution('4 8 6 6 5') == '5 8 6 6 5'\nassert solution('4 8 6 6 5 1') == '5 8 6 6 5 1'\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3 4') == '4 2 1 3'\nassert solution('2\\n1 2') == '1 2'\n\"\"\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n1 2 3 4''') == '4 2 1 3'\nassert solution('''5\n1 2 3 4 5''') == '5 4 3 2 1'\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5 4 2 1 3\"\nassert solution(\"1\\n5\") == \"5\"\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\n\"\"\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\n\"\"\""
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"4 2 1 3\"\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 2 3') == '4 2 1 3'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\"\n\nH, N = input().split()\nH, N = int(H), int(N)\nA = list(map(int, input().split()))\n\nflag = False\nfor i in range(1, N + 1):\n    if sum(A[:i]) <= H:\n        flag = True"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'Yes'\nassert solution('5 10') == 'Yes'\nassert solution('2 2') == 'No'\nassert solution('2 2\\n1 1') == 'Yes'\nassert solution('2 3\\n1 1 2') == 'No'\n'''\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 3\\n4 5 6') == 'Yes'\n\"\"\"\n\nimport sys\n\nH, N = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 3\\n4 5 6\") == \"Yes\"\nassert solution(\"10 1\\n10\") == \"No\"\n\"\"\""
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abaababaab') == 6\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abaababaab\") == 6\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abaababaab\") == 6\n\"\"\"\n\nimport sys\nfrom itertools import combinations\nfrom typing import Tuple\nfrom functools import reduce\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abaababaab') == 6\nassert solution('ababab') == 6\nassert solution('abababa') == 6\nassert solution('ababab') == 6\nassert solution('aababab') == 4\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abaababaab') == 6\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abaababaab') == 6\nassert solution('abbabab') == 3\n\"\"\"\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abaababaab') == 6\nassert solution('aaaaa') == 5\n\"\"\""
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"abaababaab\") == 6\n\"\"\""
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aaaaa') == 5\nassert solution('ababab') == 6\n\"\"\""
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abaababaab\") == 6\n\"\"\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abc') == 'Yes'\nassert solution('bac') == 'Yes'\nassert solution('bca') == 'Yes'\nassert solution('baa') == 'Yes'\nassert solution('aab') == 'Yes'\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abc') == 'Yes'\nassert solution('bac') == 'Yes'\nassert solution('bca') == 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abc\") == \"Yes\"\nassert solution(\"baa\") == \"No\"\n\n---\nExplanation:\n\nThe first test is simple enough to understand.\n\nSince it is only a single step from abc to bac, it makes sense to answer YES.\n\nIn the second test, it is more difficult to say what the output should be.\n\nIf we assume that the characters can appear in any order, it would also make sense to say YES.\n\nIt is worth noting that the order of characters is irrelevant.\n\nIn both cases, we were able to obtain a permutation of abc by swapping the first and second characters.\n\nSo we should return YES.\n\"\"\"\n\n\nimport unittest\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abc\") == \"Yes\"\nassert solution(\"bca\") == \"Yes\"\nassert solution(\"abc\") == \"Yes\"\nassert solution(\"abd\") == \"No\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"bac\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abc') == 'Yes'\nassert solution('bac') == 'Yes'\nassert solution('bca') == 'No'\nassert solution('aab') == 'Yes'\nassert solution('a') == 'Yes'\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('bac') == 'Yes'\n\nprint(solution('bac'))\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"bac\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('bac') == 'Yes'\nassert solution('bca') == 'No'\nassert solution('acb') == 'Yes'\nassert solution('abc') == 'No'\nassert solution('aab') == 'Yes'\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ab') == 'ba'\nassert solution('abc') == 'cab'\nassert solution('cba') == 'abc'\n\"\"\""
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\nassert solution(\"1\\n1000000\\n1000000\") == \"757402647\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n1 3\\n2 4\") == \"17\"\nassert solution(\"4\\n1 3\\n2 4\") == \"17\"\nassert solution(\"4\\n1 3\\n2 4\") == \"17\"\n\n\"\"\"\n\nimport sys\n\nn = int(input())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\") == \"646\"\n\"\"\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 4 2 3\") == \"7\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 1 2 4\\n9 7 2 9 3') == '646'\nassert solution('1 3\\n4 2') == '20'\n\n\"\"\"\n\nn = int(input())\n\na = list(map(int, input().split()))\nb = list(map(int, input().split()))"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\\n\") == \"646\"\nassert solution(\"1\\n1000000\\n1000000\\n\") == \"757402647\"\nassert solution(\"2\\n1 3\\n4 2\\n\") == \"20\"\n\"\"\""
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1 8 7 2 4\\n9 7 2 9 3\") == 646\n\n'''\n\n\n'''\n\u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442 GeekBrains\n\u041a\u0443\u0440\u0441: \u041e\u0441\u043d\u043e\u0432\u044b \u044f\u0437\u044b\u043a\u0430 Python.\n\u0423\u0440\u043e\u043a 6.\n\u0417\u0430\u0434\u0430\u043d\u0438\u0435 6.\n\n\u0414\u043e\u0431\u0440\u044b\u0439 \u0434\u0435\u043d\u044c! \u0414\u0430\u043d \u043e\u0434\u043d\u043e\u043c\u0435\u0440\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043d\u0430\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0449\u0438\u0439 N \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432. \u041f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u043c\u0435\u0441\u0442\u0430\u043c\u0438 \u043f\u0435\u0440\u0432\u0443\u044e \u0438 \u0432\u0442\u043e\u0440\u0443\u044e \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435. \u041e\u043d\u043e \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 100000. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u0430\u043c\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u2014 \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u043f\u043e \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0435 10^6.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0437\u0430\u0442\u0435\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432\u0442\u043e\u0440\u043e\u0439 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u042d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\n\n-----\n\n\u0421\u0447\u0438\u0442\u0430\u0439\u0442\u0435, \u0447\u0442\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0431\u0435\u0437 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0422\u0435\u0441\u0442 1\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n5\n1 8 7 2 4\n9 7 2 9 3\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n8 1 4 7 2 9 3\n\n\u0422\u0435\u0441\u0442 2\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n5\n9 6 7 2 4\n3 4 7 8 9\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n9 6 7 2 4 3 8 7\n\n\u0422\u0435\u0441\u0442 3\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n1\n1\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n1\n\n\n-----\n\n\u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u043a \u0440\u0435\u0448\u0435\u043d\u0438\u044e:\n\n\u041c\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0437\u0430\u0434\u0430\u0447\u0443, \u0432\u044b\u0432\u043e\u0434 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u044b \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 4 \u0438 3 \u043f\u0435\u0440\u0432\u0430\u044f \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043a\u0430\u043a 1, 2, 3, 4 \u0438 \u0442\u0430\u043a\u0436\u0435 \u0432\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0430 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043a\u0430\u043a 2, 3.\n\u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u044b\u0432\u043e\u0434 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u0434\u0430\u0441\u0442 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.\n\n\u041f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e \u043a\u0430\u043a \u0440\u0435\u0448\u0438\u043b \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0441 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c \u0432\u044b\u0432\u043e\u0434\u043e\u043c \u0438 \u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e \u043e\u043d \u0432\u0435\u0440\u043d\u044b\u0439, \u044f \u043f\u0440\u0438\u0448\u043b\u0430 \u043a \u0442\u0435\u0441\u0442\u0443 \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443.\n\n\u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u041e(1), \u0437\u0430\u0442\u043e \u0441\u043f\u043e\u0441\u043e\u0431 \u043d\u0430\u043f\u0438\u0441\u0430\u043d \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0434\u043d\u0430\u043a\u043e, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0441\u0430\u043c \u043a\u043e\u0434 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0440\u0438 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a\u0438.\n\n\u041f\u043e\u0442\u043e\u043c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u043b \u0432\u0430\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0430 \u043f\u043e\u0434\u043e\u0431\u0438\u0438 \u044d\u0442\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u044f.\n\n\u041f\u043e\u043d"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 8 7 2 4\\n9 7 2 9 3\\n\") == \"646\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n1 8 7 2 4\n9 7 2 9 3''') == '646'\n\nassert solution('''1\n1000000\n1000000''') == '757402647'\n\nassert solution('''2\n1 3\n4 2''') == '20'\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5 2\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == \"17\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == \"17\"\n\"\"\"\n\nfrom typing import List, Tuple, Union\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"\n7 4 5\n2 5 4 2 6 3 1\n2 1\n6 5\n2 1\n3 1\n\"\"\"\n) == '7'\n\nassert solution(\n\"\"\"\n9 4 8\n6 8 5 1 8 1 1 2 1\n9 2\n8 4\n5 3\n9 7\n\"\"\"\n) == '17'\n\nassert solution(\n\"\"\"\n5 1 4\n2 5 7 4 6\n5 4\n\"\"\"\n) == '17'\n\nassert solution(\n\"\"\"\n9 4 8\n6 8 5 1 8 1 1 2 1\n9 2\n8 4\n5 3\n9 7\n\"\"\"\n) == '17'\n\nprint(\"Well done!\")\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\"\n\n\"\"\"\n\nimport sys\n\ndebug = lambda *args, **kwargs: None\nlog = lambda *args, **kwargs: None\nlog_file = lambda *args, **kwargs: None\nlog_to_file = lambda *args, **kwargs: None"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == '7'\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == '17'\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == '7'\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == '17'\n\"\"\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == \"17\"\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == \"17\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\") == '7'\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\") == '17'\nassert solution(\"5 1 4\\n2 5 7 4 6\\n5 4\\n\") == '17'"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1') == '7'\nassert solution('9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n') == '17'\nassert solution('5 1 4\\n2 5 7 4 6\\n5 4\\n') == '17'\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 4 5\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\\n\") == \"7\"\nassert solution(\"9 4 8\\n6 8 5 1 8 1 1 2 1\\n9 2\\n8 4\\n5 3\\n9 7\\n\") == \"17\"\n\"\"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 7 2\\n2 5 4 2 6 3 1\\n2 1\\n6 5\\n2 1\\n3 1\\n') == '17'\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"0\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\") == \"1\"\n\"\"\"\n\nfrom collections import deque\nfrom math import inf\nfrom typing import Deque, Dict, List, Tuple\n\n\nclass Node:\n    def __init__(self, value: int) -> None:\n        self.value: int = value\n        self.edges: List[Node] = []\n\n\nclass Edge:\n    def __init__(self, u: Node, v: Node, weight: int) -> None:\n        self.u: Node = u\n        self.v: Node = v\n        self.weight: int = weight\n\n\nclass Graph:\n    def __init__(self) -> None:\n        self.nodes: Dict[int, Node] = {}\n        self.edges: Dict[Tuple[int, int], Edge] = {}\n\n    def add_edge(self, u: int, v: int, weight: int) -> None:\n        if u not in self.nodes:\n            self.nodes[u] = Node(u)\n        if v not in self.nodes:\n            self.nodes[v] = Node(v)\n        edge: Edge = Edge(self.nodes[u], self.nodes[v], weight)\n        self.nodes[u].edges.append(edge)\n        self.nodes[v].edges.append(edge)\n        self.edges[(u, v)] = edge\n        self.edges[(v, u)] = edge\n\n    def add_node(self, value: int) -> None:\n        if value not in self.nodes:\n            self.nodes[value] = Node(value)\n\n    def bfs(self, start: int, end: int) -> List[Node]:\n        queue: Deque[Node] = deque([self.nodes[start]])\n        distance: Dict[int, int] = {start: 0}\n        while queue:\n            node: Node = queue.popleft()\n            for edge in node.edges:\n                if edge.v.value not in distance or distance[edge.v.value] > distance[node.value] + edge.weight:\n                    distance[edge.v.value] = distance[node.value] + edge.weight\n                    queue.append(edge.v)\n        return distance[end] if end in distance else -1\n\n    def dijkstra(self, start: int, end: int) -> List[Node]:\n        if start not in self.nodes or end not in self.nodes:\n            return -1\n        distance: Dict[int, int] = {start: 0}\n        queue: Deque[Tuple[int, Node]] = deque([(start, self.nodes[start])])\n        while queue:\n            distance, node = queue.popleft()\n            for edge in node.edges:\n                new_distance: int = distance + edge.weight\n                if edge.v.value not in distance or new_distance < distance[edge.v.value]:\n                    distance[edge.v.value] = new_distance\n                    queue.append((new_distance, edge.v))\n        return distance[end] if end in distance else -1\n\n    def shortest_path(self, start: int, end: int) -> int:\n        if start not in self.nodes or end not in self.nodes:\n            return -1\n        distance: List[int] = [inf] * (len(self.nodes) + 1)\n        queue: Deque[Tuple[int, Node]] = deque([(start, self.nodes[start])])\n        distance[start] = 0\n        while queue:\n            distance, node = queue.popleft()\n            for edge in node.edges:\n                new_distance: int = distance + edge.weight\n                if edge.v.value not in distance or new_distance < distance[edge.v.value]:\n                    distance[edge.v.value] = new_distance\n                    queue.append((new_distance, edge.v))\n        return distance[end] if end in distance else -1\n\n\ngraph: Graph = Graph()\nn = int(input())\nfor _ in range(n - 1):\n    u, v, w = [int(x) for x in input().split()]\n    graph.add_edge(u, v, w)\nfor i in range(1, n + 1):\n    graph.add_node(i)\n\nprint(graph.dijkstra(1, n))\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"0\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\") == \"1\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n7\n1 2\n2 3\n2 4\n4 5\n4 6\n5 7\n\"\"\") == \"2\"\n\nassert solution(\"\"\"\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n\"\"\") == \"0\"\n\nassert solution(\"\"\"\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n\"\"\") == \"1\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\\\n1 2\\\\n2 3\\\\n2 4\\\\n4 5\\\\n4 6\\\\n5 7\\\\n\") == \"2\"\nassert solution(\"7\\\\n1 2\\\\n1 3\\\\n2 4\\\\n2 5\\\\n3 6\\\\n1 7\\\\n\") == \"0\"\nassert solution(\"7\\\\n1 2\\\\n2 3\\\\n3 4\\\\n3 5\\\\n3 6\\\\n3 7\\\\n\") == \"1\"\n\"\"\"\n\nimport sys\nimport heapq\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"0\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\") == \"1\"\n\n'''"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"0\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"1\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == \"2\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\") == \"0\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\\n\") == \"1\""
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\") == \"2\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\") == \"0\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n3 7\") == \"1\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n1 2\\n2 3\\n2 4\\n4 5\\n4 6\\n5 7\\n\") == \"2\"\nassert solution(\"7\\n1 2\\n2 3\\n3 4\\n3 5\\n3 6\\n1 7\\n\") == \"0\"\nassert solution(\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n1 7\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n4 7\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 7\") == \"10\"\nassert solution(\"4 12\") == \"15\"\nassert solution(\"2 1000000000\") == \"1999999999\"\nassert solution(\"7 97\") == \"113\"\nassert solution(\"1000000000 1000000000\") == \"1000000001\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 12\") == \"15\"\nassert solution(\"3 7\") == \"10\"\nassert solution(\"2 1000000000\") == \"1999999999\"\nassert solution(\"7 97\") == \"113\"\nassert solution(\"1000000000 1000000000\") == \"1000000001\"\n\"\"\"\nimport math\nimport sys\n\nDEBUG = False\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '2'\nassert solution('2\\n') == '3'\nassert solution('3\\n') == '4'\nassert solution('4\\n') == '5'\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\\n\") == \"10\\n15\\n1999999999\\n113\\n1000000001\\n1\\n\"\n\"\"\"\nimport sys\nfrom collections import defaultdict\n\nimport pytest\n\n\n@pytest.mark.parametrize(\n    (\"stdin\", \"expected\"),\n    [\n        (\n                \"3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\\n\",\n                \"10\\n15\\n1999999999\\n113\\n1000000001\\n1\\n\",\n        ),\n    ],\n)\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\") == \"10\\n15\\n1999999999\\n113\\n1000000001\\n1\"\nassert solution(\"1 1000000000\\n2 1\") == \"1\"\n\"\"\"\n\nimport sys\n\nt = int(sys.stdin.readline().rstrip())\nwhile t > 0:\n    n, k = list(map(int, sys.stdin.readline().rstrip().split()))\n    i = 1\n    while k > 1:\n        k -= n\n        i += 1\n    if k == 1:\n        print(i)\n    else:\n        print(i + k)\n    t -= 1\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 7\") == \"10\"\nassert solution(\"4 12\") == \"15\"\nassert solution(\"2 1000000000\") == \"1999999999\"\nassert solution(\"7 97\") == \"113\"\nassert solution(\"1000000000 1000000000\") == \"1000000001\"\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 12\\n2 1000000000\") == \"15\\n1999999999\\n113\"\nassert solution(\"1000000000 1000000000\\n2 1\") == \"1000000001\\n1\"\n\"\"\""
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n3 7\") == \"10\"\n\"\"\"\n\nt = int(input())\n\nfor i in range(t):\n    n, k = [int(x) for x in input().split()]\n    print(k*k*k%n)\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 7\") == \"10\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 7\\n4 12\\n2 1000000000\\n7 97\\n1000000000 1000000000\\n2 1\\n\") == \"10\\n15\\n1999999999\\n113\\n1000000001\\n1\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7 2\\n1 2 3 2 1 3 2') == '2\\n2 1'\nassert solution('10 4\\n2 3 3 1 1 2 1 2 3 3') == '3\\n1 3 2'\nassert solution('7 2\\n1 1 1 2 2 3 2') == '1\\n2'\nassert solution('7 3\\n1 2 3 2 1 3 2') == '1\\n3'\nassert solution('7 3\\n1 3 2 2 1 3 2') == '2\\n1 2'\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\nassert solution(\"4 3\\n2 3 2 1\\n\") == \"2\\n2 1\"\n\nprint(\"You are ready to start working?\")\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\\n\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\\n\"\n\"\"\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\\n\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\") == \"3\\n1 3 2\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == '2'\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == '3'\n\"\"\""
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\\n2 1\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\\n1 3 2\"\n\n\"\"\""
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\"\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2\\n1 2 3 2 1 3 2\") == \"2\"\nassert solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n\") == \"263\"\n\n\"\"\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\nassert solution(\"6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n1"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n\") == \"263\"\n\"\"\"\n\n\nclass Solution:\n    def solve(self, n, input):\n        max_d = 0\n        damage_per_turn = 0\n        damage_boost = 0\n\n        for i in range(n):\n            cards_count, *cards = input.split('\\n')\n            cards_count = int(cards_count)\n            cards = [list(map(int, c.split())) for c in cards]\n            cards = sorted(cards, key=lambda c: c[0], reverse=True)\n\n            cards_sum = sum([c[0] for c in cards])\n            if cards_sum > 3:\n                continue\n\n            if i % 10 == 0:\n                damage_boost += cards[0][1]\n                damage_per_turn += cards[0][1]\n                cards = [c for c in cards if c[0] < 10]\n            if len(cards) == 0:\n                continue\n\n            damage_per_turn += cards[0][1]\n            if cards[0][1] * (i + 1) > max_d:\n                max_d = cards[0][1] * (i + 1)\n\n            if damage_boost > 0:\n                cards = sorted(cards, key=lambda c: c[1], reverse=True)\n                if damage_boost > cards[0][1]:\n                    damage_per_turn += cards[0][1]\n                    damage_boost -= cards[0][1]\n                else:\n                    damage_per_turn += damage_boost\n                    damage_boost = 0\n\n            damage_per_turn = max(0, damage_per_turn)\n            input = '\\n'.join([str(cards_count), *[' '.join([str(c[0]), str(c[1])]) for c in cards]])\n\n        return max_d\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\nprint(\"Passed\")\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1''') == '263'\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n') == '263'\nprint(solution('5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\\n'), '263')\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\n\"\"\"\nfrom __future__ import annotations\n\nimport sys\nfrom collections import Counter, defaultdict\nfrom enum import Enum\nfrom typing import Dict, List, Optional, Tuple\n\nfrom icontract import require, ensure\n\nfrom common import load_and_process_input\n\n\nclass Suit(Enum):\n    CLUBS = \"\u2663\"\n    DIAMONDS = \"\u2666\"\n    HEARTS = \"\u2665\"\n    SPADES = \"\u2660\"\n\n\nclass Rank(Enum):\n    TWO = \"2\"\n    THREE = \"3\"\n    FOUR = \"4\"\n    FIVE = \"5\"\n    SIX = \"6\"\n    SEVEN = \"7\"\n    EIGHT = \"8\"\n    NINE = \"9\"\n    TEN = \"10\"\n    JACK = \"J\"\n    QUEEN = \"Q\"\n    KING = \"K\"\n    ACE = \"A\"\n\n\nclass Card:\n    def __init__(self, rank: Rank, suit: Suit) -> None:\n        self.rank = rank\n        self.suit = suit\n\n    def __eq__(self, other: Card) -> bool:\n        return self.rank == other.rank and self.suit == other.suit\n\n    def __hash__(self) -> int:\n        return hash((self.rank, self.suit))\n\n\nclass Deck:\n    def __init__(self, cards: List[Card]) -> None:\n        self.cards = cards\n        assert self.cards\n\n    @staticmethod\n    def from_str(str_cards: str) -> Deck:\n        cards = [Card(Rank(card[0]), Suit(card[1])) for card in map(str.split, str_cards.split(\"\\n\"))]\n        return Deck(cards)\n\n    def __eq__(self, other: Deck) -> bool:\n        return self.cards == other.cards\n\n    def __hash__(self) -> int:\n        return hash(tuple(self.cards))\n\n\nclass Hand:\n    def __init__(self, deck: Deck) -> None:\n        self.deck = deck\n\n    def play_card(self, card: Card) -> None:\n        self.deck.cards.remove(card)\n\n    def play_from_hand(self, num_cards: int) -> None:\n        for _ in range(num_cards):\n            card = self.deck.cards.pop()\n            self.play_card(card)\n\n\nclass Player:\n    def __init__(self, hand: Optional[Hand] = None) -> None:\n        self.hand = hand\n\n    def play_card(self, card: Card) -> None:\n        if self.hand is None:\n            self.hand = Deck.from_str(\"\\n\".join([card.rank.value + card.suit.value]))\n        else:\n            self.hand.play_card(card)\n\n\n@require(lambda number: number >= 1)\n@require(lambda number: number <= 2 * 10 ** 5)\n@require(lambda cards: all(map(lambda card: card[0] in Rank and card[1] in Suit, cards)))\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100\") == \"263\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"2\\n1 10\\n1\") == \"10\"\nassert solution(\"3\\n1 10\\n2 10\\n3 10\") == \"20\"\nassert solution(\"4\\n1 10\\n2 10\\n3 10\") == \"30\"\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n3\\n1 6\\n1 7\\n1 5\\n2\\n1 4\\n1 3\\n3\\n1 10\\n3 5\\n2 3\\n3\\n1 15\\n2 4\\n1 10\\n1\\n1 100') == '263'\n\"\"\""
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abacaba\") == 3\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abacaba\") == 3\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abacaba') == '3'\nassert solution('dfcbbcfeeedbaea') == '2'\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == \"3\"\n\"\"\"\n\nstring = stdin.split(\"\\n\")[0]\nq = int(stdin.split(\"\\n\")[1])"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''abacaba''') == '''3\n1\n2\n'''\n\nassert solution('''dfcbbcfeeedbaea''') == '''5\n2\n5\n2\n6\n6\n'''\n\n'''\nCopy\n'''\n\nimport sys"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abacaba\") == 3\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"6\"\n\"\"\"\n\n\nimport unittest\nfrom collections import Counter\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('codeforces') == 'c0d1f1e1s1c0'\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"2\"\n\"\"\"\n\ns = stdin.readline().rstrip()\nq = int(stdin.readline())\n\ntable = [[0] * (len(s) + 1) for _ in range(26)]\n\nfor i, char in enumerate(s):\n    table[ord(char) - 97][i + 1] = 1\n\nfor _ in range(q):\n    type, *query = stdin.readline().split()\n    if type == '1':\n        l, r, c = map(lambda x: int(x) - 1, query)\n        for j in range(26):\n            table[j][l] = 0\n            table[j][r + 1] = 0\n        table[ord(c) - 97][l] = 1\n        table[ord(c) - 97][r + 1] = 1\n    else:\n        l, r = map(lambda x: int(x) - 1, query)\n        print(sum([table[ord(c) - 97][l + 1:r + 1].count(1) for c in s[l:r]]))\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == \"3\"\nassert solution(\"dfcbbcfeeedbaea\") == \"5\"\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"154873296\") == \"154873396\"\n\"\"\"\nimport math\nimport numpy as np"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"154873296386592714729641835863725149975314628\"\n\n\"412968357643185982247189563\") == \"15487339638659271473\"\nassert solution(\"154873296386592714729641835863725149975314628\"\n\n\"412968357643185982247189563\") == \"15487339638659271473\"\n\nassert solution(\"1548732963865927147329641835863725145997314628\"\n\n\"412968357643185982247189563\") == \"15487339638659271473\"\nassert solution(\"1548732963865927147329641835863725145997314628\"\n\n\"412968357643185982247189563\") == \"15487339638659271473\"\nassert solution(\"1548732963865927147329641835863725145997314628\"\n\n\"412968357643185982247189563\") == \"15487339638659271473\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"386592714\") == \"336592714\"\nassert solution(\"154873296\") == \"154873396\"\nassert solution(\"729641835\") == \"729645835\"\nassert solution(\"863725149\") == \"863725145\"\nassert solution(\"975314628\") == \"979314628\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\n\n\"\"\""
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\n\n\"\"\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"154873296\\n\"\n\"386592714\\n\"\n\"729641835\\n\"\n\"863725149\\n\"\n\"975314628\\n\"\n\"412968357\\n\"\n\"631457982\\n\"\n\"598236471\\n\"\n\"247189563\") == \"\"\"\n154873396\n336592714\n729645835\n863725145\n979314628\n412958357\n631457992\n998236471\n247789563\n\"\"\"\n\n\"\"\"\nInput\n2\n938742735\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n111111111\n1111"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(a) == b\n\"\"\""
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563''') == '154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563'\n\nassert solution('''926430814\n664682638\n481301018\n247865311\n928643819\n746182326\n518064881\n217766151\n320923179\n123456789''') == '926430814\\n664682638\\n481301018\\n247865311\\n928643819\\n746182326\\n518064881\\n217766151\\n320923179\\n123456789'\n\nassert solution('''645559981\n966832987\n665435112\n313869769\n689333411\n814212011\n459515147\n786588117\n327511414\n907859445''') == '645559981\\n966832987\\n665435112\\n313869769\\n689333411\\n814212011\\n459515147\\n786588117\\n327511414\\n907859445'\n\nassert solution('''1\n9\n7\n3\n5\n2\n6\n8\n4\n7\n''') == '1\\n9\\n7\\n3\\n5\\n2\\n6\\n8\\n4\\n7'\n\nassert solution('''451758468\n239631108\n491159423\n682429056\n49471184\n924080013\n56925439\n611012786\n637154914\n879604292''') == '451758468\\n239631108\\n491159423\\n682429056\\n49471184\\n924080013\\n56925439\\n611012786\\n637154914\\n879604292'\n\n'''\n\n-----\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0443\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0439 \u043f\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0443 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0432 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445.\n\n\u041f\u0435\u0440\u0432\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442. \u041f\u0440\u0438 \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u043e\u0434\u0440\u044f\u0434 \u0438\u0434\u0443\u0449\u0438\u0445 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0444\u043e\u0440\u043c\u0443\u043b\u044b, \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c:\n\nn1(k) = 1 + 2 + 3 + \u2026 + (n - 1) + n1(k \u2013 1)\n\n\u0412\u0442\u043e\u0440\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442. \u0421\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c, \u0435\u0441\u043b\u0438 \u043d\u0430 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u043c \u0431\u043b\u043e\u043a\u0435 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0438\u0437 \u043e\u0431\u0449\u0438\u0445 \u0441\u0432\u043e\u0439\u0441\u0442\u0432 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u0442\u0430\u043a\u043e\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u0435\u043b, \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0435 \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 1 \u0434\u043e 9. \u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0432\u044b\u0434\u0430\u0451\u0442 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 1. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 9, \u0442\u043e \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0432\u044b\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 2. \u041f\u0440\u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0432\u044b\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435. \u0414\u043b\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0432\u044b\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u044d\u0442\u0438\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 1.\n\n\u041f\u0435\u0440\u0432\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442. \u041f\u0440\u0438 \u043f\u043e\u0434\u0441\u0447\u0451\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"154873296\\n386592714\\n729641835\\n863725149\\n975314628\\n412968357\\n631457982\\n598236471\\n247189563\") == \"154873396\\n336592714\\n729645835\\n863725145\\n979314628\\n412958357\\n631457992\\n998236471\\n247789563\"\n\n\"\"\"\n\nimport sys\nimport functools"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''9 6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9''') == '''3\n6\n8\n-1\n9\n4'''\n\nprint(solution(input()))"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n1 2\\n1 3\\n2 1\\n2 3\\n3 2\\n2 2\\n1 2\\n3 1\\n3 3\\n3 3\\n2 3\\n1 3\\n2 2\\n3 2\\n') == '3 2 1 2 1 3 1 3 2 1 3 2 1 3 1 3 1 3 2 1 2 2 3 3 2 2 2 2 3 3 1 1 3 1 3 1 3 1 2 3 1 1 3 1 3 1 3 2 1 2 2 2 2 3 2 1 1 2 2 2 2 2 1 3 2 1 2 2 3 2 1 1 2 1 1 2 3 1 2 2 2 2 1 2 1 1 1 3 1 1 3 1 2 1 2 3 2 2 1 3 2 1 1 1 2 2 1 2 1 3 1 2 3 1 2 2 2 1 3 2 1 1 1 1 3 1 2 1 1 1 1 3 2 1 3 1 3 1 2 1 1 2 3 1 1 1 1 1 3 1 1 1 1 1 2 1 1 2 1 2 3 1 2 1 1 1 1 1 2 2 2 2 3 2 1 2 2 1 1 2 1 2 3 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9\\n9 5\\n3 6\") == \"3\\n6\\n-1\\n9\\n4\"\n\n\"\"\"\n\nimport sys\n\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_LINES = INPUT_LINES[1:]  # remove the first line (the number of lines)"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1 1 3 5 3 5 7\") == \"3\"\nassert solution(\"3 1 5 3 5 7\") == \"6\"\nassert solution(\"7 3\") == \"9\"\nassert solution(\"9 3\") == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n3 1\\n1 4\\n2 4\\n2 3\\n1 1\\n1 2\\n3 4\\n3 3\\n2 2\\n3 1\\n2 1\\n2 3\\n1 3\\n2 3\\n1 3\") == \"2\\n2\\n1\"\nassert solution(\"4 3\\n1 2\\n1 3\\n3 1\\n1 4\\n2 4\\n2 3\\n1 1\\n1 2\\n3 4\\n3 3\\n2 2\\n3 1\\n2 1\\n2 3\\n1 3\\n2 3\\n1 3\") == \"3\\n3\\n3\"\nassert solution(\"4 3\\n1 2\\n1 3\\n3 1\\n1 4\\n2 4\\n2 3\\n1 1\\n1 2\\n3 4\\n3 3\\n2 2\\n3 1\\n2 1\\n2 3\\n1 3\\n2 3\\n1 3\") == \"4\\n3\\n2\"\n\n\"\"\"\n\nimport sys\n\nn, q = map(int, sys.stdin.readline().split())\ntree = {}\nfor i in range(1, n + 1):\n    tree[i] = [0]\nfor _ in range(n - 1):\n    parent, child = map(int, sys.stdin.readline().split())\n    tree[parent].append(child)\n\nfor _ in range(q):\n    query = int(sys.stdin.readline())\n    stack = [query]\n    counter = 0\n    while stack:\n        current = stack.pop()\n        counter += 1\n        if tree[current]:\n            for child in tree[current]:\n                stack.append(child)\n    if counter == 1:\n        print(-1)\n    else:\n        print(counter)\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9') == '3\\n6\\n8\\n-1\\n9\\n4'\n\"\"\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 7\\n1 1 1 3 5 3 5 7\") == \"3\"\nassert solution(\"9 7\\n1 1 1 3 5 3 5 7\") == \"6\"\nassert solution(\"9 7\\n1 1 1 3 5 3 5 7\") == \"8\"\nassert solution(\"9 7\\n1 1 1 3 5 3 5 7\") == \"-1\"\nassert solution(\"9 7\\n1 1 1 3 5 3 5 7\") == \"9\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 7') == '2'\nassert solution('1 1 1 1 1') == '1'\nassert solution('6 1 1 5 3 5 3 5 7') == '2'\nassert solution('7 1 1 8 1 9') == '5'\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n3 2\\n1 4\\n2 5\\n1 6\\n1 7\") == \"2\"\nassert solution(\"8 7\\n8 1\\n8 2\\n1 1\\n4 1\\n3 2\\n6 3\\n5 5\\n8 7\") == \"1\"\nassert solution(\"5 5\\n1 1\\n4 1\\n3 2\\n6 3\\n5 5\\n8 7\") == \"4\"\nassert solution(\"4 3\\n3 2\\n1 4\\n2 5\\n1 6\\n1 7\") == \"2\"\n\n\"\"\"\n\n\n\"\"\"\nMASSIVE NUMBERS\n\nA: 1\nB: 10\nC: 100\nD: 1000\n\nANSWER: 10\n\n\nMASSIVE FACTORS\n\nA: 1\nB: 10\nC: 100\nD: 1000\n\nANSWER: 100\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\nsys.setrecursionlimit(1000000)\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open('./in/2.1.in').read()) == open('./out/2.1.out').read()\nprint(solution(open('./in/2.1.in').read()))\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\\n\") == \"YES\\nYES\\nNO\\nNO\\nYES\"\n\n\"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 2 1 8\\n1 2 4 3\\n1 2\\n1 100000000\\n10 20 15 14\\n101 101 101 3\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 1 100000000\") == \"YES\"\nassert solution(\"3 2 1 100000000\") == \"NO\"\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nt = int(sys.argv[1])\n\nfor _ in range(t):\n    a, b, c, n = map(int, input().split())\n    print(\"YES\" if n % 3 == 0 and n >= 0 and a + n == b + n * 2 and c + n == n * 3 else \"NO\")\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 2 8\") == 'YES'\nassert solution(\"100 101 102 105\") == 'YES'\nassert solution(\"3 2 1 100000000\") == 'NO'\nassert solution(\"10 20 15 14\") == 'YES'\nassert solution(\"101 101 101 3\") == 'NO'\n\"\"\"\n\n\n\n\"\"\"\n---------------------------------------------------------------\n    \"\"\"\n\"\"\"\n\u0421\u0430\u043c\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0438 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u044b\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 \u043e\u0434\u043d\u043e\u0433\u043e \u0434\u043e \u0434\u0432\u0443\u0445 \u0441 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u043e\u0439 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u043e\u0439 \u0434\u043e 10\n\u0438 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0434\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0432 \u0446\u0438\u043a\u043b\u0435\n\"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\") == 'YES'\nprint(solution(\"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\"))\n\"\"\""
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2 1\") == \"NO\"\nassert solution(\"10 20 15 14\") == \"YES\"\nassert solution(\"100 101 102 105\") == \"NO\"\nassert solution(\"7 2 1 4\") == \"NO\"\nassert solution(\"5 3 2 8\") == \"NO\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 2 8\") == 'YES'\nassert solution(\"100 101 102 105\") == 'YES'\nassert solution(\"3 2 1 100000000\") == 'NO'\nassert solution(\"10 20 15 14\") == 'NO'\nassert solution(\"101 101 101 3\") == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"5 3 2 8\\n100 101 102 105\\n3 2 1 100000000\\n10 20 15 14\\n101 101 101 3\"\n) == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 2 7\\n6 3 1 4\\n5 5 5 8\\n2 3 1 4\\n2 3 1 4\\n3 2 1 2\\n2 3 1 4\\n3 2 1 4\\n2 3 1 4\\n5 5 5 8\\n2 3 1 4\\n2 3 1 4\\n3 2 1 4\\n5 5 5 8\") == \"YES\"\nassert solution(\"4 3 2 7\\n6 3 1 4\\n5 5 5 8\\n2 3 1 4\\n2 3 1 4\\n3 2 1 2\\n2 3 1 4\\n3 2 1 4\\n5 5 5 8\") == \"NO\"\nassert solution(\"4 3 2 7\\n6 3 1 4\\n5 5 5 8\\n2 3 1 4\\n2 3 1 4\\n3 2 1 2\\n2 3 1 4\\n3 2 1 4\\n5 5 5 8\\n2 3 1 4\\n2 3 1 4\\n3 2 1 4\\n5 5 5 8\") == \"YES\"\nassert solution(\"4 3 2 7\\n6 3 1 4\\n5 5 5 8\\n2 3 1 4\\n2 3 1 4\\n3 2 1 2\\n2 3 1 4\\n3 2 1 4\\n5 5 5 8\") == \"NO\"\nassert solution(\"4 3 2 7\\n6 3 1 4\\n5 5 5 8\\n2 3 1 4\\n2 3 1 4\\n3 2 1 2\\n2 3 1 4\\n3 2 1 4\\n5 5 5 8\\n2 3 1 4\\n2 3 1 4\\n3 2 1 4\\n5 5 5 8\\n2 3 1 4\\n2 3 1 4\\n3 2 1 4\\n5 5 5 8\") == \"YES\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 1 100000000\") == \"NO\"\nassert solution(\"5 3 2 8\") == \"YES\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n1 2 3 4') == '3 4 6 5'\nassert solution('5 5\\n2 1 5 3 5') == '9 8 12 6 8'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == '3 3'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == '3 3'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == '3 3'\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\") == \"3 4 6 5\"\nassert solution(\"5 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\") == \"3 3\""
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n1 2 3 4\\n\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\\n\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\\n\") == \"3 3\"\n\n'''"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n1 2 3 4') == '3 4 6 5'\nassert solution('5 5\\n2 1 5 3 5') == '9 8 12 6 8'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == '3 3'\nassert solution('3 3\\n1 2 2 3') == '0'\nassert solution('1 1\\n1') == '0'\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4\\n1 2 3 4') == '3 4 6 5'\nassert solution('5 5\\n2 1 5 3 5') == '9 8 12 6 8'\nassert solution('2 10\\n1 2 1 1 2 2 2 2 2 2') == '3 3'\nassert solution('2 10\\n1 1 1 1 2 2 2 2 2 2') == '3 3'"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"3 4 6 5\"\nassert solution(\"5 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\") == \"3 3\""
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\") == \"3 4 6 5\"\nassert solution(\"5 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\") == \"3 3\"\nassert solution(\"2 1 5 3 5\") == \"9 8 12 6 8\""
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\""
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1 2 3 4\") == \"3 4 6 5\"\nassert solution(\"5 5\\n2 1 5 3 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\nassert solution(\"2 10\\n1 2 1 1 2 2 2 2 2\") == \"9 8 12 6 8\"\n\"\"\"\nimport sys\nfrom collections import deque\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\") == \"3 4 6 5\"\nassert solution(\"5 5\") == \"9 8 12 6 8\"\nassert solution(\"2 10\") == \"3 3\"\nassert solution(\"1 2 1 1 2 2 2 2 2 2\") == \"3 3\"\n\n\"\"\""
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n\"\"\"\n\n\"\"\"\n-----Bite-----\n\nWrite a function solution(n, m, x, y) that takes four numbers n, m, x, y and returns the answer to the above problem.\n\nThe inputs describe a set of m queries. The i-th query is x[i], y[i] where x[i] and y[i] are the x and y coordinates of the i-th query, respectively.\n\nThe output is \"YES\" if there is a path from the root to the specified point and \"NO\" otherwise.\n\nAssume that:\n\nm <= 10^5,\n1 <= n <= 2*10^5,\n1 <= m <= 2*10^5,\n1 <= x[i] <= n and 1 <= y[i] <= n,\nx[i]!= y[i],\nfor i = 0,..., m-1.\n\nFor example, for n=4 and m=5 the set of queries is:\nx = [1, 2, 3, 4]\ny = [1, 3, 2, 4]\n\nIn the first query, the points are (1, 1) and (3, 1). We check if there is a path from the root to (1, 1). Then we check if each vertex of the query is equal to (3, 1). The answer is \"YES\".\n\nIn the second query, the points are (1, 1) and (2, 2). We check if there is a path from the root to (1, 1). Then we check if each vertex of the query is equal to (2, 2). The answer is \"YES\".\n\nIn the third query, the points are (1, 1) and (1, 3). We check if there is a path from the root to (1, 1). Then we check if each vertex of the query is equal to (1, 3). The answer is \"NO\".\n\nIn the fourth query, the points are (1, 1) and (4, 4). We check if there is a path from the root to (1, 1). Then we check if each vertex of the query is equal to (4, 4). The answer is \"NO\".\n\nIn the fifth query, the points are (1, 3) and (2, 2). We check if there is a path from the root to (1, 3). Then we check if each vertex of the query is equal to (2, 2). The answer is \"NO\".\n\nIn the sixth query, the points are (1, 3) and (4, 4). We check if there is a path from the root to (1, 3). Then we check if each vertex of the query is equal to (4, 4). The answer is \"NO\".\n\nIn the seventh query, the points are (2, 2) and (3, 3). We check if there is a path from the root to (2, 2). Then we check if each vertex of the query is equal to (3, 3). The answer is \"NO\".\n\nIn the eighth query, the points are (2, 2) and (4, 4). We check if there is a path from the root to (2, 2). Then we check if each vertex of the query is equal to (4, 4). The answer is \"NO\".\n\nIn the ninth query, the points are (3, 3) and (1, 3). We check if there is a path from the root to (3, 3). Then we check if each vertex of the query is equal to (1, 3). The answer is \"NO\".\n\nIn the tenth query, the points are (3, 3) and (4, 4). We check if there is a path from the root to (3, 3). Then we check if each vertex of the query is equal to (4, 4). The answer is \"NO\".\n\nYou should assume that the graph is connected.\n\nThe first line of the input contains three integers $n$, $m$, and $x$.\n\nThe second line contains $m$ integers $x[1], x[2], \\dots, x[m]$ describing the $x$-coordinates of the m queries"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7') == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nassert solution('10 7\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7') == 'NO'\n\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n'10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2'\n) == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nassert solution(\n'10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2'\n) == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nassert solution(\n'10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2'\n) == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\nassert solution(\n'10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2'\n) == 'YES\\nYES\\nYES\\nYES\\nNO\\nNO'\n\n\"\"\"\n\n\n\nimport sys\nimport math\nimport itertools"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n\n\n-----Explanation-----\n\nAll queries have answer \"YES\" since the graph is a tree.\n\nThe first query has vertices $[3, 9, 10]$ and the distance between $1$ and $10$ is $1$. The tree is shown in the picture above.\n\nThe second query has vertices $[2, 4, 6]$. The answer is \"YES\" because the shortest path from $1$ to $2$ is $1$ and the vertex $4$ has distance $1$ to the vertex $1$ which belongs to the path and the vertex $6$ has distance $1$ to the vertex $2$ which belongs to the path.\n\nThe third query has vertices $[2, 1, 5]$. The answer is \"YES\" because the shortest path from $1$ to $5$ is $1$ and all vertices of the query belong to this path.\n\nThe fourth query has vertices $[4, 8, 2]$. The answer is \"YES\" because the shortest path from $1$ to $9$ is $1$ and all vertices of the query belong to this path.\n\nThe fifth and the sixth queries both have answer \"NO\" because the graph is a tree, but the paths from $1$ to the given vertices do not have common vertices (except the vertices $1$ and $2$ which belong to the paths).\n\n\n-----Test data-----\n\nAll test data should be placed in the text file `test.txt`.\n\nIn each test there are one or several queries. The first line contains two integers: $n$ and $m$ (2 $\\le n \\le 2 \\cdot 10^5$, 1 $\\le m \\le 2 \\cdot 10^5$).\n\nEach of the next $n-1$ lines describes an edge of the tree. Edge $i$ is denoted by two integers $u_i$ and $v_i$, the labels of vertices it connects ($1 \\le u_i, v_i \\le n, u_i \\ne v_i$).\n\nIt is guaranteed that the given edges form a tree.\n\nThere are no multiple edges in the graph.\n\nThe graph is connected.\n\nEach vertex $i$ has label $i$ (1 $\\le i \\le n$).\n\nAll vertices have labels which are different.\n\nThe sum of $k_i$ does not exceed $2 \\cdot 10^5$ ($\\sum\\limits_{i=1}^{m} k_i \\le 2 \\cdot 10^5$).\n\n\n-----Solution-----\n\n\"\"\"\n\nfrom collections import deque\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n\"\"\"\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self, number_of_vertices):\n        self.number_of_vertices = number_of_vertices\n        self.graph = defaultdict(set)\n\n    def add_edge(self, u, v):\n        self.graph[u].add(v)\n        self.graph[v].add(u)\n\n    def print_graph(self):\n        print(self.graph)\n    def root_finding(self, visited, node, target, distance):\n        visited[node] = True\n        if node == target:\n            return distance\n        else:\n            for x in self.graph[node]:\n                if not visited[x]:\n                    distance = self.root_finding(visited, x, target, distance+1)\n        return distance\n\n    def query(self, source, target):\n        visited = [False] * (self.number_of_vertices + 1)\n        distance = self.root_finding(visited, source, target, 0)\n        print(\"YES\") if distance > 1 else print(\"NO\")\n\n    def query_list(self, queries):\n        for x in queries:\n            for j in range(1, x[0]+1):\n                self.graph[x[j]].add(x[j+1])\n        self.query(1, 10)\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n\nassert solution(\"10 3\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\\n\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\""
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 6\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n7 9\\n9 10\\n4 3 8 9 10\\n3 2 4 6\\n3 2 1 5\\n3 4 8 2\\n2 6 10\\n3 5 4 7\") == \"YES\\nYES\\nYES\\nYES\\nNO\\nNO\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n2 3 2 5\\n3 2 1 5\\n3 4 8 2\\n4 2 6\\n1 2 3\") == \"YES\"\nassert solution(\"5 4\\n2 1 2 3\\n2 3 5\\n3 2 5\\n4 3 6\") == \"NO\"\nassert solution(\"10 4\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n4 8\\n4 9\\n5 10\\n6 7\") == \"YES\"\nassert solution(\"7 8\\n1 2\\n1 3\\n2 3\\n2 4\\n2 5\\n2 6\\n3 7\\n3 8\\n4 7\\n4 8\\n5 6\\n5 7\\n6 7\") == \"YES\"\nassert solution(\"5 6\\n2 3 4 5\\n2 3 1 5\\n3 4 8 2\\n3 1 4 8 9\\n4 1 4 8 2\\n4 2 6\\n5 2 1 5\\n5 4 8 2\\n5 6\\n6 4 8 2\\n6 5\\n7 1 4 8 2\\n7 5 4 8 2\\n7 6\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 8 9 10\\\\n3 2 4 6\\\\n3 2 1 5\\\\n3 4 8 2\\\\n2 6 10\\\\n3 5 4 7\") == \"YES\"\n\"\"\"\n\n\n\nimport sys\nimport queue"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\n'\n\"\"\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_0) == test_0_result\n\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom collections import deque, defaultdict\nfrom typing import DefaultDict, Deque, List, Set, Tuple\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n''') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2'\n\nassert solution('''5\n3\n1 1 1\n4\n1 2 3 4\n''') == 'NO'\n\nassert solution('''6\n5\n3 2 1 3 1\n5\n1 1 1 1 1\n6\n1 1 1 1 1\n4\n1 1 1 1 1\n2 2 3 1 2\n3 3 4 1 3\n4 1 1 2 2\n5\n1 1 2\n3 2\n4 4\n1 1 1\n2 2\n''') == 'NO'\n\nassert solution('''5\n3\n1 1 1\n4\n1 2 3 4\n''') == 'YES\\n1 3'\n\nassert solution('''5\n1\n2\n2\n1\n3\n''') == 'YES\\n1 2'"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\"\nassert solution(\"3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"NO\"\nassert solution(\"2\\n3\\n1 1 1\\n3\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 2\"\n\"\"\""
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\n\"\nassert solution(\"7\\n1 2 3 4 5 6 7\\n2\\n3 3\\n4\\n5\\n6\\n7\\n\") == \"NO\\n\"\nassert solution(\"5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\\n\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n\") == \"YES\\n\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n\") == \"NO\\n\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'\n\"\"\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2'\n\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n5\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n''') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\"\nassert solution(\"4\\n4\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\") == \"YES\\n1 3\\n3 5\\n5 4\\n1 2\"\nassert solution(\"2\\n4\\n1 2 2 1 3\\n3\\n1 1 1\") == \"YES\\n1 2\"\nassert solution(\"2\\n4\\n1 1 1\\n3\\n1 2 2 1 3\") == \"YES\\n1 2\"\nassert solution(\"2\\n5\\n1 1 1\\n3\\n1 2 2 1 3\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n5\\n1 2 2 1 3\\n3\\n1 1 1\\n4\\n1 1000 101 1000\\n4\\n1 2 3 4\\n') == 'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO'\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''8 5\n11011010\n7 9\n1111100\n7 11\n1111100''') == '01011110'\nassert solution('''8 5\n11011010\n7 9\n1111100\n7 11\n1111100''') == '0101111'\n'''\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11011010') == '011110'\nassert solution('1111100') == '11111'\n\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11101010\") == \"010\"\n\"\"\""
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('111010') == '011110'\nassert solution('11101011010') == '01011110'\nassert solution('111010110100') == '010111110'\nassert solution('1111100') == '0011111'\nassert solution('11111101') == '011111'\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11011010\") == \"01011110\"\n\"\"\"\n\nimport math\nfrom collections import deque\nfrom typing import Deque, List, Tuple"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11011010') == '0111110'\nassert solution('1111100') == '0011111'\n\n\"\"\"\n\nimport unittest\nimport timeit\n\nclass Solution:\n    def solution(self, n, k):\n        \"\"\"\n        Finds the lexicographically minimum possible string of length n you can obtain from the given one if you can perform no more than k moves.\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        n, k = map(int, n.split())\n        k %= n*n\n        nums = [i for i in range(n)]\n        if k > 0:\n            positions = [i for i in range(k)]\n            indices = list(map(lambda p: p[0]*n+p[1], positions))\n            indices.sort()\n            indices = [i for i in range(len(indices))]\n            for i in range(k):\n                positions[i] = [indices[i], positions[i]]\n            d = {j:[] for j in range(k)}\n            for p in positions:\n                d[p[1]].append(p[0])\n            nums = [0 for _ in range(n)]\n            for l in d.values():\n                l.sort()\n                nums = list(map(lambda i: l[i] + i, range(n)))\n        else:\n            nums = [0 for _ in range(n)]\n        return ''.join(map(lambda i: str(i), nums))\n\nclass TestSolution(unittest.TestCase):\n    def test_1(self):\n        assert Solution().solution('11011010', 5) == '0111110'\n\n    def test_2(self):\n        assert Solution().solution('1111100', 7) == '0011111'\n\n    def test_3(self):\n        assert Solution().solution('11110', 4) == '11110'\n\n    def test_4(self):\n        "
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11101110\") == \"11101110\"\n\nassert solution(\"11101110\")!= \"11101110\"\n\nassert solution(\"11101110\")!= \"11101110\"\n\nassert solution(\"11101110\")!= \"11101110\"\n\nassert solution(\"11101110\")!= \"11101110\""
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"11101110\") == \"110\"\nassert solution(\"11101111\") == \"111\"\nassert solution(\"11101110\") == \"110\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"11011010\") == \"01111010\"\nassert solution(\"1111100\") == \"00111100\"\nassert solution(\"1111101\") == \"1110110\"\n\"\"\"\n\n\nfrom collections import deque\nimport sys"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11011010') == '0111010'\nassert solution('1111100') == '0011111'\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(100010)\nDEBUG = False\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\\n\") == \"3\\n1 4 7\\n\", \"Basic test\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\\n\") == \"3\\n1 2 4\\n\", \"Best test\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == '3\\n1 4 7'\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == '3\\n1 2 4'\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == '4\\n1 3 5 6'\n\n-----Explanation-----\nTest case 1\n\nThe number of bad points is 0 because there are no bad points at all.\n\nTest case 2\n\nYou can remove the segment [29; 30] because it is covered by 4 segments (one on each side).\n\nYou can remove the segment [2; 3] because it is covered by 4 segments (one on each side).\n\nYou can remove the segment [2; 3] because it is covered by 4 segments (one on each side).\n\"\"\""
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9''') == '3\nassert solution('''5 1\n29 30\n30 30\n29 29\n28 30\n30 30''') == '3\nassert solution('''6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3''') == '4\n\n-----Notes-----\n\nIn the first test, remove segments (2, 2) and (2, 3) and (3, 3) and there are no bad points.\n\nIn the second test, remove segments (1, 3) and (2, 3) and there are no bad points.\n\nIn the third test, remove segments (2, 2) and (2, 3) and there are bad points (2).\n\nIn the fourth test, remove segments (1, 3) and (2, 3) and there are no bad points.\n\nIn the fifth test, there are bad points (2, 2) and (2, 3) and (3, 3).\n\nIn the sixth test, there are bad points (2, 2) and (2, 3) and (3, 3).\n\n'''\n\nfrom typing import List"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 2 4\"\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n1 4 7 '\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\n\"\"\""
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('2 3\\n3 3') == ''\nassert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3'\nassert solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30') == '3'\nassert solution('6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3') == '4'\n\nprint('Hooray!')\n'''\n\nn, k = list(map(int, input().split()))\n\nsegments = []\nfor i in range(n):\n    l, r = list(map(int, input().split()))\n    segments.append([l, r])\n\npoints_covered = [0] * (n + 1)"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == \"3\\n1 4 7\"\nassert solution(\"5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30\") == \"3\\n1 2 4\"\nassert solution(\"6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3\") == \"4\\n1 3 5 6\"\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\") == '3\\n1 4 7'\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9') == '3\\n1 4 7'\n\nprint(solution('5 1\\n29 30\\n30 30\\n29 29\\n28 30\\n30 30'))\nprint(solution('6 1\\n2 3\\n3 3\\n2 3\\n2 2\\n2 3\\n2 3'))\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 0\nassert solution('1 1 1\\n1 1 1') == 0\nassert solution('2 1 2\\n1 1 1') == 0\nassert solution('2 1 4\\n1 1 1') == 0\nassert solution('2 1 2\\n1 3 4') == 0\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6\\n1 3 2 4 5 6\\n2 2 2 3 4\") == 33\nassert solution(\"2\\n1 2\\n1 1\") == 1\nassert solution(\"8\\n6 3 6 2 3 6\\n4 2 4 4\") == 16\nassert solution(\"7\\n1 3 2 3 3 4 4\") == 12\nassert solution(\"8\\n1 1 1 1 1 1 1\\n1 1 1 1 1 1 1\") == 10\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('2 1 4 3 5') == '19'\nassert solution('2 2 2 3 4') == '19'\nassert solution('2 1 4 3 5') == '19'\n\nprint('test passed')\n\nsolution = test_solution(solution, '2 1 4 3 5')\nassert solution('2 1 4 3 5') == '19'\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 3 2\\n-100 2 3\") == \"3\"\nassert solution(\"3\\n1 3 2\\n2 2 3\") == \"6\"\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == \"3\"\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == \"19\""
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == 3\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == 19\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n'3\\n1 3 2\\n-100 2 3\\n'\n) == '3'\nassert solution(\n'5\\n2 1 4 3 5\\n2 2 2 3 4\\n'\n) == '19'\nassert solution(\n'5\\n2 1 4 3 5\\n2 2 2 3 4\\n'\n) == '19'\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == 3\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import inf\n\nn = int(input())\nx = list(map(int, input().split()))\nv = list(map(int, input().split()))\n\nd = defaultdict(int)\nres = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        res += ((x[i]-x[j])**2 + (v[i]-v[j])**2)**0.5\n\nprint(int(res))\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 3 2\\n-100 2 3\") == \"3\"\nassert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == \"19\""
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 1 4 3 5\\n2 2 2 3 4\") == \"19\"\n\"\"\"\nfrom typing import List, Set, Tuple, Dict"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\\n\") == '21 7 15 21 3'\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\nlines = sys.stdin.readlines()\n\nn, m = map(int, lines[0].split())\n\nvertices = defaultdict(list)\nfor i in range(1, n):\n    u, v, w = map(int, lines[i].split())\n    vertices[u].append((v, w))\n    vertices[v].append((u, w))"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1') == '21 7 15 21 3'\n\"\"\"\n\n\nclass Tree:\n    def __init__(self, N, edges):\n        self.adj = [[] for _ in range(N)]\n        for edge in edges:\n            u, v, w = edge\n            self.adj[u].append([v, w])\n            self.adj[v].append([u, w])\n        \n    def find(self, x):\n        if self.par[x]!= x:\n            self.par[x] = self.find(self.par[x])\n        return self.par[x]\n    \n    def union(self, x, y):\n        xp, yp = self.find(x), self.find(y)\n        if xp == yp:\n            return\n        if self.rank[xp] < self.rank[yp]:\n            self.par[xp] = yp\n        elif self.rank[xp] > self.rank[yp]:\n            self.par[yp] = xp\n        else:\n            self.par[yp] = xp\n            self.rank[xp] += 1\n\n    def query(self, x, y, q):\n        xp, yp = self.find(x), self.find(y)\n        if xp == yp:\n            return q\n        if self.rank[xp] < self.rank[yp]:\n            xp, yp = yp, xp\n        for e in self.adj[yp]:\n            v, w = e\n            if v == xp:\n                if w <= q:\n                    return w\n                q -= w\n        return 0\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 6\\n1 2 1\\n2 3 2\\n3 4 1\\n4 5 2\\n5 6 1\\n1 5 2\\n5 4 3\\n2 4 4\\n4 3 5\") == \"21 7 15 21 3\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n\n\n\n-----Explanation-----\n\nThe given tree is shown in the picture.\nWe want to count how many pairs $(u, v)$ $(u < v$) are such that the maximum weight of an edge on a simple path between $u$ and $v$ doesn't exceed $q_i$.\n\nThe weight of the edge $(u, v)$ is equal to $w_i$, where $u$ and $v$ are the labels of the two vertices and $w_i$ is the weight of the edge.\nFor each query $q_i$ we need to find the maximum weight of an edge on a simple path between $u$ and $v$ \u2014 that is, the largest weight among all edges between $u$ and $v$.\n\nIn the first query, we find the maximum weight of an edge among the edges between $u$ and $v$: $w_1$.\nThe result of the first query is equal to the number of pairs $(u, v)$ such that $u < v$ and the maximum weight of an edge on a simple path between $u$ and $v$ doesn't exceed $q_1$.\n\nIn the second query, we find the maximum weight of an edge among the edges between $u$ and $v$: $w_2$.\nWe need to find the largest weight among the edges between $u$ and $v$ because we are looking for the maximum weight of an edge on a simple path between $u$ and $v$.\nBecause $w_1$ is the maximum weight among the edges between $u$ and $v$ and $u < v$, we know that the maximum weight among the edges between $u$ and $v$ is $w_1$.\nThus, the result of the second query is equal to the number of pairs $(u, v)$ such that $u < v$ and the maximum weight of an edge on a simple path between $u$ and $v$ doesn't exceed $q_2$.\n\nIn the third query, we find the maximum weight of an edge among the edges between $u$ and $v$: $w_3$.\nWe need to find the largest weight among the edges between $u$ and $v$ because we are looking for the maximum weight of an edge on a simple path between $u$ and $v$.\nBecause $w_1$ and $w_2$ are the maximum weights among the edges between $u$ and $v$ and $u < v$, we know that the maximum weight among the edges between $u$ and $v$ is $w_2$.\nThus, the result of the third query is equal to the number of pairs $(u, v)$ such that $u < v$ and the maximum weight of an edge on a simple path between $u$ and $v$ doesn't exceed $q_3$.\n\nIn the fourth query, we find the maximum weight of an edge among the edges between $u$ and $v$: $w_4$.\nWe need to find the largest weight among the edges between $u$ and $v$ because we are looking for the maximum weight of an edge on a simple path between $u$ and $v$.\nBecause $w_2$ and $w_3$ are the maximum weights among the edges between $u$ and $v$ and $u < v$, we know that the maximum weight among the edges between $u$ and $v$ is $w_3$.\nThus, the result of the fourth query is equal to the number of pairs $(u, v)$ such that $u < v$ and the maximum weight of an edge on a simple path between $u$ and $v$ doesn't exceed $q_4$.\n\nIn the fifth query, we find the maximum weight of an edge among the edges between $u$ and $v$: $w_5$.\nWe need to find the largest weight among the edges between $u$ and $v$ because we are looking for the maximum weight of an edge on a simple path between $u$ and $v$.\nBecause $w_2$ and $w_3$ are the maximum weights among the edges between $u$ and $v$ and $u < v$, we know that the maximum weight among the edges between $u$ and $v$ is $w_3$.\nThus, the result of the fifth query is equal to the number of pairs $(u, v)$ such that $u < v$ and the maximum weight of an edge on a simple path between $u$ and $v$ doesn't exceed $q_5$.\n\nIn the sixth query, we find the maximum weight of an edge among the edges between $u$ and $v$: $w_6$.\nWe need to find the largest weight among the edges between $u$ and $v$ because we are looking for the maximum weight of an edge on a simple path between $u$ and $v$.\nBecause $w_3$ and $w_6$ are the maximum weights among the edges between $u$ and $v$ and $u < v$, we know that the maximum weight among the edges between $u$ and $v$ is $w_6$.\nThus, the result of the sixth query is equal to the number of pairs $(u, v)$ such that $u < v$ and the maximum weight of an edge on a simple path between $u$ and $v$ doesn't exceed $q_6$.\n\nIn the seventh query, we find the maximum weight of an edge among the edges between $u$ and $v$: $w_7$.\nWe need to find the largest weight among the edges between $u$ and $v$ because we are looking for the maximum weight of an edge on a simple path between $u$ and $v$.\nBecause $w_3$ and $w_6$ are the maximum weights among the edges between $u$ and $v$ and $u < v$, we know that the maximum weight among the edges between $u$ and $v$ is $w_6$.\nThus, the result of the seventh query is equal to the number of pairs $(u, v)$ such that $u < v$ and the maximum weight of an edge on a simple path between $u$ and $v$ doesn't exceed $q_7$.\n\nIn the eighth query, we find the maximum weight of an edge among"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n\nassert solution(\"1 2\\n1 2\") == \"0 0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 2\") == \"1 3 3\"\n\"\"\"\n\n\nimport collections\nimport sys\n\nsys.setrecursionlimit(100010)\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n\"\"\"\n\n\nfrom collections import defaultdict\n\nclass Tree:\n    def __init__(self, n):\n        self.edges = defaultdict(list)\n        self.n = n\n\n    def add_edge(self, u, v, w):\n        self.edges[u].append((v, w))\n        self.edges[v].append((u, w))\n\n    def find_all_paths(self, start, end, paths, path):\n        path.append(start)\n        if start == end:\n            paths.append(path.copy())\n        else:\n            for next_node, weight in self.edges[start]:\n                if next_node not in path:\n                    self.find_all_paths(next_node, end, paths, path.copy())\n\n    def find_max_weight_path(self, start, end, paths, max_path_weight, max_path):\n        for next_node, weight in self.edges[start]:\n            if next_node not in paths:\n                path_weight = max_path_weight + weight\n                if path_weight > max_path_weight:\n                    max_path_weight = path_weight\n                    max_path = paths + [next_node]\n                self.find_max_weight_path(next_node, end, paths + [next_node], max_path_weight, max_path)\n\n        return max_path, max_path_weight\n\n    def get_number_of_pairs_of_vertices(self, start, end, q):\n        paths = []\n        path = []\n        self.find_all_paths(start, end, paths, path)\n        max_path, max_path_weight = self.find_max_weight_path(start, end, [], 0, [])\n        return self.count_pairs_of_vertices(max_path, q, start, end, paths)\n\n    def count_pairs_of_vertices(self, max_path, q, start, end, paths):\n        vertices_count = 0\n        for i in range(len(max_path) - 1):\n            for j in range(i + 1, len(max_path)):\n                if max_path[i] < max_path[j] and max_path[j] - max_path[i] <= q:\n                    vertices_count += len(paths)\n        return vertices_count\n\n\n    def __str__(self):\n        return f'{self.n} {self.edges}'"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n4 5\n1 2 1\n3 2 3\n2 4 1\n4 5 2\n5 7 4\n3 6 2\n5 2 3 4 1\"\"\") == \"\"\"\n21 7 15 21 3\"\"\"\n\nassert solution(\"\"\"\n6 5\n1 2 1\n2 3 2\n1 3 2\n3 4 2\n4 5 3\n5 6 3\n3 6 2\"\"\") == \"\"\"\n1 3 3\n0 0\n1 3 3\"\"\"\n\nassert solution(\"\"\"\n4 3\n1 2 1\n2 3 2\n1 3 2\n3 4 2\"\"\") == \"\"\"\n0 0\n1 3 3\"\"\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n1 2 1\\n2 3 2\\n1 3 2') == '1 3 3'\nassert solution('1 2\\n2 3\\n3 1') == '0 0'\n\n\"\"\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\n\"\"\"\n\nimport sys\n\nfrom collections import defaultdict, deque\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\") == \"21 7 15 21 3\"\nassert solution(\"1 2\\n1 2\") == \"0 0\"\nassert solution(\"3 3\\n1 2 1\\n2 3 2\\n1 3 2\") == \"1 3 3\"\n\"\"\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2 1 2\\n3\\n2 1 4') == 'YES'\nassert solution('5\\n1 2 2\\n4\\n5 5 5 5') == 'NO'\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''3\n4\n1 2 3 4\n5\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100''') == 'YES'\nassert solution('''3\n4\n1 2 3 4\n5\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100''') == 'NO'\nassert solution('''3\n4\n1 2 3 4\n5\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100''') == 'YES'\nassert solution('''1\n5\n5 5 5 5\n1\n100''') == 'YES'\nassert solution('''4\n5\n5 5 5 5\n4\n1 2 3 4\n1\n100''') == 'NO'\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 4\\n2\") == 'YES'\nassert solution(\"5\\n1 2 3 4 5\\n5 5 5 5\") == 'YES'\nassert solution(\"3\\n1 2 4\\n4\") == 'YES'\nassert solution(\"1\\n100\") == 'YES'\nassert solution(\"5\\n1 2 2\\n4\") == 'NO'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\"\"\") == \"YES\"\nassert solution(\"\"\"5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\"\"\") == \"NO\"\n\"\"\"\n\nhttps://www.codewars.com/kata/525f8a8c6d6cb9cb7a0000aa/train/python\n\n\"\"\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 2 2\\n4\\n5 5 5 5') == 'YES'\nassert solution('3\\n1 2 2\\n4\\n1 3 4 4') == 'NO'\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 2 2\\n4\\n5 5 5 5') == 'YES'\nassert solution('3\\n1 2 2\\n4\\n1 3 4 4') == 'YES'\nassert solution('3\\n1 2 4\\n4\\n1 3 4 4') == 'NO'\nassert solution('1\\n100') == 'YES'\nassert solution('2\\n1 1') == 'NO'\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100\\n\") == \"YES\"\nassert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100\\n\") == \"YES\"\nassert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100\\n\") == \"NO\"\nassert solution(\"3\\n1 2 2\\n4\\n5 5 5 5\\n3\\n1 2 4\\n4\\n1 3 4 4\\n1\\n100\\n\") == \"NO\"\n\"\"\"\n\nfrom typing import List, Set\nimport sys\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n1 2 2\\n4\\n5 5 5 5') == 'YES'\nassert solution('3\\n1 2 4\\n4\\n1 3 4 4') == 'YES'\nassert solution('1\\n100') == 'YES'\nassert solution('5\\n1 2 2\\n4\\n5 5 5 5') == 'NO'\nassert solution('5\\n1 2 4\\n4\\n1 3 4 4') == 'NO'\n\"\"\"\n\nimport sys\n\nT = int(sys.stdin.readline())\nfor i in range(T):\n    n = int(sys.stdin.readline())\n    a = [int(j) for j in sys.stdin.readline().strip().split(' ')]\n    d = dict()\n    for j in range(n):\n        if a[j] not in d:\n            d[a[j]] = 1\n        else:\n            d[a[j]] += 1\n    removed = False\n    while not removed:\n        removed = True\n        d = dict(sorted(d.items(), key=lambda x: x[1]))\n        for j in range(len(d)):\n            if d[j] > 1:\n                removed = False\n                d[j] -= 1\n                break\n    res = 0\n    for j in d:\n        res += j * (d[j] + 1) // 2\n    sys.stdout.write('YES' if res <= 1 else 'NO\\n')\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2 2\\n4\\n5 5 5 5') == \"YES\"\nassert solution('3\\n1 2 4\\n4\\n1 3 4 4') == \"YES\"\nassert solution('1\\n100') == \"YES\"\nassert solution('3\\n1 2 2\\n4\\n1 3 4 4') == \"NO\"\nassert solution('3\\n1 2 2\\n4\\n1 3 4 4') == \"NO\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n5\\n5 5 5 5\") == \"NO\"\nassert solution(\"3\\n1 2 2\") == \"YES\"\nassert solution(\"3\\n1 2 4\") == \"NO\"\nassert solution(\"4\\n100\") == \"YES\"\nassert solution(\"1\\n100\") == \"NO\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n1010\\n1101') == '12'\nassert solution('4 5\\n1001\\n10101') == '11'\nassert solution('4 5\\n1010\\n1111') == '11'\nassert solution('4 4\\n1111\\n1111') == '0'\nassert solution('4 4\\n1111\\n1000') == '0'\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"\nassert solution(\"4 4\\n1100\\n1110\") == \"1000\"\nassert solution(\"2 1\\n110\\n010\") == \"110\"\nassert solution(\"1 1\\n110\\n010\") == \"110\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"4 5\") == \"11\"\nassert solution(\"4 1\") == \"1\"\nassert solution(\"4 4\") == \"8\"\nassert solution(\"4 1\") == \"1\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1010\\n1101') == '12'\nassert solution('1001\\n10101') == '11'\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"12\"\nassert solution(\"4 5\") == \"11\"\nassert solution(\"4 5\") == \"11\"\nassert solution(\"4 5\") == \"11\"\nassert solution(\"4 5\") == \"11\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1101\", \"1011\") == \"110\"\nassert solution(\"1010\", \"1011\") == \"100\"\nassert solution(\"1011\", \"1011\") == \"0\"\nassert solution(\"1011\", \"1101\") == \"10\"\nassert solution(\"1101\", \"1101\") == \"110\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 4\\n1010\\n1101') == '12'\nassert solution('4 5\\n1001\\n10101') == '11'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n1010\\n1101\") == \"12\"\nassert solution(\"4 5\\n1001\\n10101\") == \"11\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1010') == '8'\nassert solution('1101') == '2'\nassert solution('1001') == '1'\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n2') == 'NO'\nassert solution('2\\n2') == 'YES'\nassert solution('3\\n2') == 'NO'\nassert solution('4\\n2') == 'YES'\nassert solution('5\\n2') == 'NO'\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"YES\"\nassert solution(\"6\") == \"NO\"\nassert solution(\"8\") == \"2 4 1 5\"\nassert solution(\"10\") == \"NO\"\n\"\"\"\nimport math\n\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    if n % 2!= 0:\n        print(\"NO\")\n    else:\n        p = [i for i in range(1, n + 1) if i % 2 == 0]\n        p1 = p[: math.floor(n / 2)]\n        p2 = p[math.floor(n / 2):]\n        p2.reverse()\n        print(\"YES\")\n        print(\" \".join(map(str, p1)))\n        print(\" \".join(map(str, p2)))"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_0) == test_output_0\nassert solution(test_input_1) == test_output_1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2\") == 'NO'\nassert solution(\"6\\n4\") == 'YES\\n2 4 1 5'\nassert solution(\"8\\n6\") == 'YES\\n2 4 6 8 1 3 5 11'\n\n-----Explanation-----\nCase #1:\n\nThe sum of the first half equals to the sum of the second half, because the first half consists of even numbers, and the second half consists of odd numbers.\n\nCase #2:\n\nThe sum of the first half equals to the sum of the second half, because the first half consists of even numbers, and the second half consists of odd numbers.\n\nCase #3:\n\nIt is guaranteed that the sum of the elements of $a$ does not exceed $2 \\cdot 10^5$.\n\nCase #4:\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\nCase #5:\n\nThe sum of the first half equals to the sum of the second half, because the first half consists of even numbers, and the second half consists of odd numbers.\n\"\"\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n6') == 'NO'\nassert solution('8\\n10') == 'YES\\n2 4 1 5'\nassert solution('2\\n4') == 'NO'\nassert solution('2\\n6') == 'YES\\n2 4 1 5'\nassert solution('2\\n8') == 'NO'\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2\\n4\\n6\\n8\\n10\\n') == 'NO'\nassert solution('2\\n4\\n6\\n8\\n10\\n') == 'YES\\n2 4 6 8 1 3 5 11'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\"\"\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == 'NO'\nassert solution('6') == 'YES\\n2 4 1 5'\nassert solution('8') == 'NO'\nassert solution('10') == 'YES\\n2 4 6 8 1 3 5 11'\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n4\") == \"NO\"\nassert solution(\"6\\n8\") == \"2 4 1 5\"\nassert solution(\"10\\n16\") == \"NO\"\nassert solution(\"2\\n4\") == \"YES\"\nassert solution(\"6\\n8\") == \"YES\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n6') == 'NO'\nassert solution('4\\n8') == '2 4 1 5'\nassert solution('4\\n10') == 'NO'\nassert solution('10\\n8') == 'NO'\n\n-----Constraints-----\n1 <= t <= 10^4\n1 <= n <= 2 * 10^5\n1 <= a_i <= 10^9\n\n\"\"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n3 1 4 1 5\\n\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 1 2') == '1'\nassert solution('1 1 1 1') == '1'\nassert solution('8 7 6 5 4 3 2 1') == '0'\nassert solution('3 1 4 1 5 9 2 6 5') == '5'\n\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    c = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if a[i] + a[j] in a[i+1:j]:\n                c += 1\n    print(c)\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 1 2 3') == '4'\n\"\"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3\\n3\\n1\\n2') == '4'\n\"\"\"\n\n\nimport sys\nfrom typing import List\n\nsys.setrecursionlimit(10000)"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9\\n3 1 4 1 5 9 2 6 5') == '5'\nassert solution('3\\n1 1 2') == '0'\nassert solution('5\\n1 1 1 1 1') == '4'\nassert solution('8\\n8 7 6 5 4 3 2 1') == '0'\n\"\"\"\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\n3 1 4 1 5 9 2 6 5\") == \"5\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 1 2\\n5\\n1 1 1 1') == '3'\nassert solution('3\\n1 1 2\\n5\\n1 1 1 1') == '0'\nassert solution('4\\n1 1 2\\n6\\n1 1 1 1') == '4'\nassert solution('4\\n1 1 2\\n6\\n1 1 1 1') == '4'\n\"\"\"\n\nimport sys\nimport typing\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"9\\n3 1 4 1 5 9 2 6 5\") == \"5\"\nassert solution(\"5\\n3 1 4 1 5 9 2 6 5\") == \"1\"\nassert solution(\"8\\n8 7 6 5 4 3 2 1\") == \"0\"\nassert solution(\"1\\n1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\\n3 1 4 1 5 9 2 6 5\\n3\\n1 1 2\\n5\\n1 1 1 1 1\") == \"5\\n1\\n0\\n4\\n0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 1 1 1\\n2\\n3\") == \"2\"\n\"\"\"\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    ans = 0\n\n    if len(a) == 1:\n        print(0)\n        continue\n\n    for i in range(1, len(a)):\n        if a[i] - a[i-1] > 1:\n            ans += 1\n    print(ans)\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3') == '3'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3') == '4'\nassert solution('4\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3') == '2'\nassert solution('4\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3') == '7'\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n''') == '3\\n4\\n2\\n7'\nprint('Test pass.')\n\n\"\"\""
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"3\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"4\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"2\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\") == \"7\"\n\n\"\"\"\n\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"3\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"4\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"2\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"7\"\n\nprint(solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\"))\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"3\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"4\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"2\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"7\"\n\"\"\"\n\n\nfrom sys import stdin"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"7\"\nassert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5') == '3'\nassert solution('4\\n1 5\\n2 4\\n2 3\\n3 4\\n5') == '4'\n\"\"\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\\n1 10\\n2 8\\n2 5\\n3 4\\n4 4\\n6 8\\n7 7\\n\") == \"3\\n4\\n2\\n7\"\nprint(\"Cool!\")\n\n-----Explanation-----\n1. The segments $[1; 5]$, $[2; 4]$, $[2; 3]$, $[3; 4]$ and $[5; 5]$ lie inside the segment $[1; 5]$, since $l_1 \\le l_2 \\le r_1$ and $l_1 \\le r_2$ for each of them.\n\n2. The segments $[1; 5]$, $[2; 3]$, $[2; 5]$, $[3; 5]$ and $[2; 2]$, $[3; 4]$ do not intersect, so the maximum subset is $3$ segments, each of them either $[1; 5]$, $[2; 5]$ or $[3; 5]$.\n\n3. The maximum subset is $2$ segments, each of them either $[1; 5]$, $[2; 5]$ or $[3; 5]$.\n\n4. The maximum subset is $7$ segments, each of them is $[1; 5]$, $[2; 5]$, $[3; 5]$, $[2; 2]$, $[3; 4]$ or $[4; 4]$.\n\n5. The maximum subset is $7$ segments, each of them is $[1; 5]$, $[2; 5]$, $[2; 2]$, $[3; 4]$, $[4; 4]$ or $[6; 8]$.\n\n-----Additional Comments-----\n\nDetermining the maximum possible size of the subset of the given set of segments such that each pair of segments in this subset either non-intersecting or one of them lies inside the other one can be done using dynamic programming.\n\"\"\""
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 5\\n2 4\\n2 3\\n3 4\\n5\\n1 5\\n2 3\\n2 5\\n3 5\\n2 2\\n3\\n1 3\\n2 4\\n2 3\\n7\") == \"3\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n\nimport sys\nimport os\n\nsys.path.append(os.path.join(os.path.dirname(__file__), \"..\"))\n\nfrom analysis.complexity import get_complexity\nfrom analysis.time_analysis import get_time_analysis\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(123) == '123'\n\"\"\"\n\nt = int(stdin.readline())\n\nfor i in range(t):\n    h, m = list(map(int, stdin.readline().split(' ')))\n    print((24-h)*60 + m)\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"23 55\") == \"5\"\n\"\"\"\n\n\nfrom typing import List\nimport itertools"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\nprint(solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\"))\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_data_1) == test_result_1\n\ntest_data_2 = [5]\ntest_result_2 = [5]\n\nassert solution(test_data_2) == test_result_2\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"23 55\") == \"5\"\nassert solution(\"23 0\") == \"60\"\nassert solution(\"0 1\") == \"1439\"\nassert solution(\"4 20\") == \"1180\"\nassert solution(\"23 59\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n\nt = int(input())\n\nfor _ in range(t):\n    h, m = map(int, input().split())\n    h -= 0\n    m -= 0\n    if h == 24:\n        h = 0\n    if m == 60:\n        m = 0\n    print(h * 60 + m)\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == \"5\"\nassert solution(test_input_2) == \"60\"\nassert solution(test_input_3) == \"1439\"\nassert solution(test_input_4) == \"1180\"\nassert solution(test_input_5) == \"1\"\n\nprint(solution(stdin))\n'''\n\nimport math"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"23 55\\n23 0\\n0 1\\n4 20\\n23 59\") == \"5\\n60\\n1439\\n1180\\n1\"\n\"\"\"\n\nimport time\nfrom dataclasses import dataclass, field\nfrom typing import Any, List\n\n\n@dataclass\nclass Day:\n    t: int\n    h: int\n    m: int\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"23 55\") == \"5\"\nassert solution(\"23 0\") == \"60\"\nassert solution(\"0 1\") == \"1439\"\nassert solution(\"4 20\") == \"1180\"\nassert solution(\"23 59\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"LRUD\") == \"LR\"\nassert solution(\"LLDDR\") == \"3 4\"\n\"\"\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"LRUD\") == \"1 2\"\nassert solution(\"LURD\") == \"1 4\"\nassert solution(\"RRUDU\") == \"3 4\"\nassert solution(\"LLDDR\") == \"1 1\"\n\n-----Note-----\nYou can use the classical data structures.\n\nYou can check your solution on the HackerRank sandbox.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"LRUD\") == \"LR\"\nassert solution(\"LURDLRRUDRDDD\") == \"LURDRDRDD\"\n\"\"\""
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('LRUD') == '1 2'\nassert solution('LURD') == '1 4'\nassert solution('RRUDU') == '3 4'\nassert solution('LLDDR') == '-1'\nassert solution('LRRDRDDRUUDLRRDRDR') == '4 9'\n\nprint('Hooray!')\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"LRUD\") == \"LRD\"\nassert solution(\"LURD\") == \"LRD\"\nassert solution(\"RRUDU\") == \"RRUD\"\nassert solution(\"LLDDR\") == \"LLDR\"\n\"\"\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('L') == 'U'\nassert solution('URURD') == 'U'\nassert solution('LURDLURD') == 'LDRU'\nassert solution
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('LRUD') == '1 2'\nassert solution('LURD') == '1 4'\nassert solution('RRUDU') == '3 4'\nassert solution('LLDDR') == '-1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"LRUD\") == \"LRUD\"\nassert solution(\"LURD\") == \"LDRU\"\nassert solution(\"RRUDU\") == \"RRUDU\"\nassert solution(\"LLDDR\") == \"LLDDR\"\nassert solution(\"RRUDULLDRLLUULDRRUDRDDRLURDRDRRDRLDRUDULDRURULRDRRDRDRDRURLLURDRDRDRRLULDRRDRDRDRURDRLDRDRDRDRURDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDRDR"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('LRUD') == 'LRU'\nassert solution('RDLU') == 'RDLU'\nassert solution('DDUDRDU') == 'DDUDRDU'\nassert solution('DDDRDRDR') == 'DDDRDRDR'\nassert solution('LRDRDRDRDLURLD') == 'DLDRDRDRDRDRDRDRDRDRDRDRDRDRDRD'\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('LRUD') == '1 2'\nassert solution('LURD') == '1 4'\nassert solution('RRUDU') == '3 4'\nassert solution('LLDDR') == '-1'\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n4 1 4 3\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\") == '3\\n1\\n0\\n2'\n\"\"\"\n\nfrom sys import stdin, stdout\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3\\n1\\n1\\n4\\n1 1 1 3\") == \"3\\n1\\n0\\n2\"\n\"\"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('a') == ''\nassert solution('ab') == ''\nassert solution('abc') == ''\nassert solution('aab') == ''\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n4\\n1 1 4 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\") == \"3\"\nassert solution(\"5\\n2 1 5 4 3\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"4\\n1 1 1 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3') == '3'\nassert solution('7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3') == '1'\nassert solution('7\\n4 2 4 1 4 3 4\\n5\\n2 1 5 4 3') == '2'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\n4 2 4 1 4 3 4\") == \"3\"\nassert solution(\"5\\n2 1 5 4 3\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\nassert solution(\"4\\n1 1 1 3\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution([\"5\"]) == \"0\"\nassert solution([\"5\", \"1 1 1 3\"]) == \"2\"\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7 2 4 1 4 3 4\") == \"3\"\nassert solution(\"5 2 1 5 4 3\") == \"1\"\nassert solution(\"1 1 1 3\") == \"0\"\nassert solution(\"4 1 1 1 3\") == \"2\""
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1\\n') == '0'\n\"\"\"\n\nfrom math import log10, ceil, log\n\nt = int(input())"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 10 2 6 2 3\") == \"36\"\nassert solution(\"3 3 2 2 3 1\") == \"23\"\nassert solution(\"5 8 3 4 6 2\") == \"58\"\nassert solution(\"5 5 5 5 5 5\") == \"0\"\n\n-----Constraints-----\n\n$n$ is between 1 and 2 * 10^5.\n$a_i$ is between 1 and 2 * 10^5.\n\n\"\"\"\n\nfrom itertools import permutations\n\nINPUT_1 = \"\"\"\n6 10 2 6 2 3\n1 2\n2 3\n1 4\n1 5\n5 6\n5 7\n5 8\n\"\"\"\n\nINPUT_2 = \"\"\"\n1\n1337\n\"\"\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2\\n2 3\\n1 4\\n1 5') == '21'\nassert solution('4\\n1 2\\n2 3\\n1 4\\n1 5') == '21'\nassert solution('4\\n1 2\\n2 3\\n1 4\\n1 5') == '21'\nassert solution('1\\n1\\n2\\n1') == '0'\nassert solution('1\\n1\\n2\\n1') == '0'\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 7 2 9') == '30'\nassert solution
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\n\n\"\"\"\n\n\nfrom collections import defaultdict\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2\\n2 3\\n1 4\\n1 5') == '15'\nassert solution('8\\n9 4 1 7 10 1 6 5\\n1 2\\n2 3\\n1 4\\n1 5\\n5 6\\n5 7\\n5 8') == '121'\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_data) == expected_result\nprint('Success!')\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1337\") == \"0\""
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8\\n9 4 1 7 10 1 6 5') == '121'\nassert solution('1\\n1337') == '0'\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2\\n2 3\\n1 4\\n1 5\") == \"121\"\nassert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\"\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n9 4 1 7 10 1 6 5\") == \"121\"\nassert solution(\"1\\n1337\") == \"0\""
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\") == '6\\n18\\n0\\n227\\n8'\n\"\"\"\n\nt = int(input())\nfor i in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = []\n    for j in range(len(a)):\n        if a[j] % k == 0:\n            l.append(a[j])\n    print(len(l))"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\") == \"6\\n18\\n0\\n227\\n8\"\n\"\"\""
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"6\"\n\nassert solution(\"5 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"18\"\n\nassert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"0\"\n\nassert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"227\"\n\nassert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"8\"\n\n\"\"\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9') == '6'\nassert solution('5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24') == '0'\nassert solution('4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9') == '6'\n\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3\\n1 2 1 3\") == \"6\"\nassert solution(\"10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"18\"\nassert solution(\"5 10\\n20 100 50 20 100500\") == \"227\"\nassert solution(\"10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"0\"\nassert solution(\"8 8\\n1 2 3 4 5 6 7 8\") == \"8\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\n\nimport sys\nfrom typing import List\n\nDEBUG = False\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\") == '6'\nassert solution(\"4 3\\n1 2 1 3\\n10 6\") == '6'\nassert solution(\"4 3\\n1 2 1 3\\n10 6\") == '6'\nassert solution(\"4 3\\n1 2 1 3\\n10 6\") == '6'\nassert solution(\"4 3\\n1 2 1 3\\n10 6\") == '6'\n\n\"\"\"\n\n\ntCases = int(input())\nfor _ in range(tCases):\n    n, k = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    x = 0\n    c = 0\n    for i in range(n):\n        if a[i] % k == 0:\n            continue\n        else:\n            x = x + (a[i] % k)\n            a[i] = a[i] + (a[i] % k)\n            c = c + 1\n    print(c)\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"6\"\nassert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"0\"\nassert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n5\\n9') == '1'\nassert solution('1\\n2\\n3') == '0'\nassert solution('1\\n1\\n1') == '0'\nassert solution('1\\n1\\n1\\n1\\n1\\n1') == '0'\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2 1 3\\n10 6\\n8 7 1 8 3 7 5 10 8 9\\n5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"6\\n18\\n0\\n227\\n8\"\nassert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"8\\n18\\n0\\n227\\n8\"\nassert solution(\"7 8\\n1 2 3 4 5 6 7\\n8 8\\n1 2 3 4 5 6 7\\n1 2 3 4 5 6 7\\n1 2 3 4 5 6 7\") == \"0\\n0\\n0\\n0\\n0\"\nassert solution(\"6 9\\n1 2 3 4 5 6 7 8 9\\n1 2 3 4 5 6 7 8 9\") == \"3\\n3\\n0\\n0\\n0\"\nassert solution(\"5 10\\n20 100 50 20 100500\\n10 25\\n24 24 24 24 24 24 24 24 24 24\") == \"8\\n18\\n0\\n227\\n8\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"[1,2,3] [1,1]\") == '1'\nassert solution(\"[1,2] [1,2,3]\") == '2'\nassert solution(\"[1,3] [1,3]\") == '1'\nassert solution(\"[1,3] [1,3]\") == '1'\nassert solution(\"[1,3] [1,3]\") == '1'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 20') == '2'\nassert solution('10 10') == '1'\nassert solution('10 1') == '1'\nassert solution('100 100') == '1'\nassert solution('100 99') == '1'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\") == 1\nassert solution(\"2 2 2\") == 2\nassert solution(\"2 2 2 2\") == 3\nassert solution(\"2 1\") == 2\nassert solution(\"2 2 3\") == 2\n\"\"\""
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 1 3 1') == '2'\nassert solution('1 1 3 1') == '1'\nassert solution('1 2 3 1') == '2'"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2') == '1'\nassert solution('1 1') == '0'\nassert solution('1 1 1') == '0'\nassert solution('1 1 2') == '1'\nassert solution('1 2 1') == '1'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1\\n2') == '2'\nassert solution('1\\n2\\n3') == '3'\nassert solution('1\\n2\\n3\\n1\\n2\\n3') == '3'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'a'\nassert solution('abc') == 'a'\nassert solution('abab') == 'ab'\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2') == '1'\nassert solution('3 2') == '2'\nassert solution('3 3') == '1'\n\"\"\""
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n1\") == \"1\"\nassert solution(\"1\\n1\\n2\") == \"2\"\nassert solution(\"1\\n1\\n2\\n2\\n3\") == \"3\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 3 1 3 2\") == \"3\"\nassert solution(\"10\\n3 5 4 5 3 2 1 1 2\") == \"5\"\nassert solution(\"4\\n4 4\") == \"4\"\nassert solution(\"3\\n2 2\") == \"2\"\nassert solution(\"8\\n2 2 2 8\") == \"4\"\n\"\"\"\nimport collections\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\") == [1,3,3,1]\nprint(\"Successfully passed test!\")\n\n\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        \"\"\"\n        # \u65b9\u6cd5\u4e00\uff1a\u57fa\u4e8epython\u7684\u751f\u6210\u5668\u8868\u8fbe\u5f0f\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        :param numRows:\n        :return:\n        \"\"\"\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            if i == 1:\n                res.append([1, 1])\n                continue\n            # \u5f88\u7cbe\u5999\u7684\u9012\u5f52\u7b97\u6cd5\uff0c\u7528res[-1]\u4ee3\u66ffres[-1][-1]\uff0c\u7b2c\u4e8c\u884c\u53ef\u4ee5\u7701\u53bb\n            res.append([x + y for x, y in zip(res[-1][1:], [0] + res[-1])])\n        return res\n\n    def generate2(self, numRows: int) -> List[List[int]]:\n        \"\"\"\n        # \u65b9\u6cd5\u4e8c\uff1a\u9519\u8bef\u7684\u6539\u8fdb\uff0c\u4f7f\u7528\u4e86\u6eda\u52a8\u6570\u7ec4\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        :param numRows:\n        :return:\n        \"\"\"\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            if i == 1:\n                res.append([1, 1])\n                continue\n            curr = [1]\n            for j in range(1, len(res[-1])):\n                curr.append(res[-1][j] + res[-1][j - 1])\n            curr.append(1)\n            res.append(curr)\n        return res\n\n    def generate3(self, numRows: int) -> List[List[int]]:\n        \"\"\"\n        # \u65b9\u6cd5\u4e09\uff1a\u57fa\u4e8e\u77e9\u9635\u4e58\u6cd5\u7684\u7a7a\u95f4\u4f18\u5316\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        :param numRows:\n        :return:\n        \"\"\"\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            curr = [1]\n            for j in range(1, len(res[-1])):\n                curr.append(res[-1][j] + res[-1][j - 1])\n            curr.append(1)\n            res.append(curr)\n        return res\n\n    def generate4(self, numRows: int) -> List[List[int]]:\n        \"\"\"\n        # \u65b9\u6cd5\u56db\uff1a\u4f18\u5316\u7a7a\u95f4\u7684\u7b97\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        :param numRows:\n        :return:\n        \"\"\"\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            curr = [1]\n            for j in range(1, len(res[-1])):\n                curr.append(res[-1][j] + res[-1][j - 1])\n            curr.append(1)\n            res.append(curr)\n        return res\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == [1,3,3,1]\n\"\"\"\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == [1, 3, 3, 1]\n\"\"\"\n\n\nclass Solution:\n    def generate(self, numRows: int) -> list:\n        if numRows == 0:\n            return []\n        result = [[1]]\n        for row_index in range(1, numRows):\n            row = [1]\n            for j in range(1, row_index):\n                row.append(result[-1][j - 1] + result[-1][j])\n            row.append(1)\n            result.append(row)\n        return result\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == [1, 3, 3, 1]\n\"\"\""
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\") == [1, 3, 3, 1]\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0:\n            return [1]\n        last_row = [1] * (rowIndex + 1)\n        for row in range(rowIndex):\n            next_row = [1]\n            for i in range(1, len(last_row)):\n                next_row.append(last_row[i - 1] + last_row[i])\n            next_row.append(1)\n            last_row = next_row\n        return last_row\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '1 3 3 1'\n\"\"\"\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == [1,3,3,1]\nassert solution(\"0\") == []\nassert solution(\"1\") == [1]\nassert solution(\"2\") == [1,1]\nassert solution(\"4\") == [1,2,1]\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == [1,3,3,1]\nassert solution(\"4\") == [1,4,6,4,1]\nassert solution(\"5\") == [1,5,10,10,5,1]\nassert solution(\"6\") == [1,6,15,20,15,6,1]\nassert solution(\"7\") == [1,7,21,35,35,21,7,1]\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == [1,3,3,1]"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == [1,3,3,1]\nassert solution('4') == [1,4,6,4,1]\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def getRow(self, k: int) -> List[int]:\n        \"\"\"O(k) / O(1)\"\"\"\n        curr, prev = [1], [1, 1]\n        for _ in range(k):\n            curr = [1] + [x + y for x, y in zip(prev, curr)] + [1]\n            prev = prev[:-1] + curr\n        return curr\n\n    def getRow2(self, k: int) -> List[int]:\n        \"\"\"O(k) / O(k)\"\"\"\n        curr = [1]\n        for _ in range(k):\n            curr = [1] + [x + y for x, y in zip([0] + curr, curr + [0])]\n        return curr\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('111011111111111111111111111101') == 31\n\"\"\""
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\"\"\"\n\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count('1')\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('00000000000000000000000010000000') == 1\nassert solution('00000000000000000000000010101010') == 2\nassert solution('111111111111111111111111111111101') == 31\n\n\"\"\"\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11100010') == 3\nassert solution('11100101') == 3\nassert solution('11101110') == 2\nassert solution('11011110') == 4\nassert solution('101010') == 2\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('00000000000000000000000000001011') == 3\nassert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\"\"\"\n\nfrom typing import List\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return len([i for i in range(32) if (n >> i) & 1])\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        s = bin(n).count('1')\n        return s\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return sum([n & (1 << i) for i in range(32)])\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        s = 0\n        while n:\n            s += 1\n            n &= (n - 1)\n        return s"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('00000000000000000000000010000000') == 1\nassert solution('111111111111111111111111111111101') == 31\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count('1')\n\n\"\"\"\nGiven two integers x and y, the Hamming distance between x and y, denoted d(x, y), is the number of positions at which the corresponding bits are different.\n\nGiven an integer n, return the sum of hamming distances between all pairs of the form (i, j) with 0 <= i, j < n.\n\n \n\nExample 1:\n\nInput: n = 2\nOutput: 6\nExplanation: In binary representation, the 6 pairs are (0, 0), (0, 1), (1, 0), (1, 1), (1, 1), and (1, 1).\nWe need to add 0 to the sum because we consider the distance between x and x as 0.\n\nExample 2:\n\nInput: n = 4\nOutput: 14\n\"\"\"\n\nclass Solution:\n    def totalHammingDistance(self, nums: List[int]) -> int:\n        total = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                count = 0\n                while nums[i]!= 0 or nums[j]!= 0:\n                    if nums[i] & 1 == nums[j] & 1:\n                        count += 1\n                        nums[i] = nums[i] >> 1\n                        nums[j] = nums[j] >> 1\n                    else:\n                        count += 1\n                        nums[i] = nums[i] >> 1\n                        nums[j] = nums[j] << 1\n                total += count\n        return total\n\n\"\"\"\nGiven an array of integers, every element appears three times except for one, which appears exactly once. Find that single one.\n\nNote:\n\nYour algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\n\nExample 1:\n\nInput: [2,2,3,2]\nOutput: 3\nExample 2:\n\nInput: [0,1,0,1,0,1,99]\nOutput: 99\n\"\"\"\n\nclass Solution:\n    def singleNumber(self, nums: List[int]) -> int:\n        count = [0]*32\n        for i in range(len(nums)):\n            for j in range(32):\n                if (nums[i]>>j) & 1 == 1:\n                    count[j] += 1\n        ans = 0\n        for i in range(32):\n            ans = ans | (count[i]%3 << i)\n        return ans\n\n\"\"\"\nGiven a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\n\nAccording to the definition of LCA on Wikipedia: \u201cThe lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\u201d\n\nGiven the following binary tree:  root = [3,5,1,6,2,0,8,null,null,7,4]\n\nExample 1:\n\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\nExplanation: The LCA of nodes 5 and 1 is 3.\nExample 2:\n\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\nOutput: 5\nExplanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.\n \n\nNote:\n\nAll of the nodes' values will be unique.\np and q are different and both values will exist in the binary tree.\n\"\"\"\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        if not root or root == p or root == q: return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if not left: return right\n        if not right: return left\n        return root\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        if not root or root == p or root == q: return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if not left: return right\n        if not right: return left\n        return root\n\n\"\"\"\nGiven a binary tree, determine if it is a valid binary search tree (BST).\n\nAssume a BST is defined as follows:\n\nThe left subtree of a node contains only nodes with keys less than the node's key.\nThe right subtree of a node contains only nodes with keys greater than the node's key.\nBoth the left and right subtrees must also be binary search trees.\n\n \n\nExample 1:\n\n    2\n   / \\\n  1   3\n\nInput: [2,1,3]\nOutput: true\nExample 2:\n\n    5\n   / \\\n  1   4\n     / \\\n    3   6\n\nInput: [5,1,4,null,null,3,6]\nOutput: false\nExplanation: The root node's value is 5 but its right child's value is 4.\n\"\"\""
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        result = 0\n        while n:\n            result += n & 1\n            n >>= 1\n        return result\n\n    def hammingWeight2(self, n: int) -> int:\n        return bin(n).count(\"1\")\n\n    def hammingWeight3(self, n: int) -> int:\n        count = 0\n        while n:\n            count += 1\n            n &= n - 1\n        return count\n\n    def hammingWeight4(self, n: int) -> int:\n        count = 0\n        while n:\n            count += 1\n            n &= n - 1\n        return count\n\n    def hammingWeight5(self, n: int) -> int:\n        count = 0\n        while n:\n            count += 1\n            n &= n - 1\n        return count\n\n    def hammingWeight6(self, n: int) -> int:\n        return bin(n).count(\"1\")\n\n    def hammingWeight7(self, n: int) -> int:\n        count = 0\n        while n:\n            count += 1\n            n &= n - 1\n        return count\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(bin(42)) == \"3\"\nassert solution(bin(5)) == \"1\"\nassert solution(bin(0)) == \"0\"\nassert solution(bin(2 ** 32)) == \"32\""
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"00000000000000000000000000001011\") == 3\nassert solution(\"00000000000000000000000010000000\") == 1\nassert solution(\"111111111111111111111111111111101\") == 31\n\n\"\"\"\nimport re\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('123') == '124'\nassert solution('321') == '322'\nassert solution('9') == '10'\nassert solution('10') == '11'\nassert solution('999') == '1000'\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123\") == \"124\"\nassert solution(\"999\") == \"1000\"\nassert solution(\"4321\") == \"4322\"\nassert solution(\"4562\") == \"4563\"\nassert solution(\"4632\") == \"4643\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution([1,2,3]) == [1,2,4]\nassert solution([4,3,2,1]) == [4,3,2,2]\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution([1,2,3]) == [1,2,4]\nassert solution([4,3,2,1]) == [4,3,2,2]\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution([1,2,3]) == [1,2,4]\nassert solution([4,3,2,1]) == [4,3,2,2]"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1234\") == \"1235\"\nassert solution(\"9\") == \"10\"\nassert solution(\"1234123\") == \"12351234\"\nassert solution(\"91212129\") == \"10111213\"\nassert solution(\"912129\") == \"10111213\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1234') == '1235'\nassert solution('9') == '10'\n\n\"\"\""
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"123\") == \"124\"\nassert solution(\"999\") == \"1000\"\nassert solution(\"1111\") == \"1112\"\nassert solution(\"9999\") == \"10000\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('123') == '124'\nassert solution('0') == '1'\nassert solution('99') == '100'\nassert solution('1') == '2'\nassert solution('9') == '10'\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('13') == '14'\nassert solution('1') == '2'\nassert solution('9') == '10'\nassert solution('99') == '100'\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1') == '4'\n\"\"\"\n\na, b = map(int, input().split())\nprint(max(a+b, a-b, a*b))\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1') == '4'\n\"\"\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3, 1) == 4\nassert solution(2, 4) == 6\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"4\"\nassert solution(\"5 2\") == \"7\"\nassert solution(\"3 1\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"4\"\n\"\"\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == 4\n\"\"\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == \"4\"\n\"\"\""
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"3\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"7 -1\") == \"6\"\nassert solution(\"4 -2\") == \"2\"\nassert solution(\"3 5\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1') == '4'\nassert solution('123 456') == '790'\nassert solution('123 456 789') == '79078'\n\"\"\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 5\\n0 5\\n-2 4\\n3 4\\n4 -4') == '3'\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4') == 3\n\"\"\"\n\nimport sys\n\nD, N = [int(i) for i in sys.stdin.readline().split()]\nX, Y = [0], [0]\nfor i in range(N):\n    x, y = [int(i) for i in sys.stdin.readline().split()]\n    X.append(x)\n    Y.append(y)\n\nmax_x, max_y = max(X), max(Y)\ncount = 0\nfor i in range(len(X)):\n    for j in range(i + 1, len(X)):\n        if X[i] ** 2 + Y[i] ** 2 <= D ** 2 and X[j] ** 2 + Y[j] ** 2 <= D ** 2:\n            count += 1\nprint(count)\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == '3'"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4 5\n0 5\n-2 4\n3 4\n4 -4\n''') == '3'\nassert solution('''3 5\n0 5\n-2 4\n3 4\n4 -4\n''') == '1'\nassert solution('''5 5\n0 5\n-2 4\n3 4\n4 -4\n0 -5\n''') == '2'"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\\n4 -4\") == \"3\"\nprint(solution(stdin))\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n0 5\\n-2 4\\n3 4\") == \"3\"\nassert solution(\"5 4\\n2 4\\n1 3\\n0 3\") == \"2\"\nassert solution(\"7 10\\n0 10\\n0 0\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\") == \"9\"\nassert solution(\"10 10\\n0 1\\n1 1\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\\n7 1\\n8 1\\n9 1\\n10 1\") == \"10\"\n\"\"\""
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4') == '3'\n\"\"\"\n\nfrom typing import List\nfrom collections import defaultdict"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12') == 'Yes'\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12\") == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12\") == \"Yes\"\nassert solution(\"15\") == \"No\"\n\"\"\"\n\nfrom itertools import accumulate"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(12) == \"Yes\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12') == 'Yes'\nassert solution('30') == 'Yes'\nassert solution('99') == 'No'\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12\") == \"Yes\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n5 -1\") == \"12\\n8\\n10\"\n\"\"\"\nfrom math import inf"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n\"\"\""
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n\"\"\""
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\nassert solution(\"5\\n10 -10 -20 30 -40\") == \"30\\n20\\n20\\n20\\n20\"\nassert solution(\"1\\n4\\n3\") == \"4\\n4\\n4\"\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 -1') == '12 8 10'\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\n\nimport unittest\n\nclass TestSum(unittest.TestCase):\n\n    def test_case_1(self):\n        self.assertEqual(solution(\"3 5 -1\"), \"12\\n8\\n10\")\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 -1\") == \"12 10\"\nassert solution(\"1 5 0\") == \"6\"\n\n\"\"\""
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\nassert solution(\"2\\n1 2\\n2 3\") == \"6\\n4\\n3\"\nassert solution(\"3\\n1 1\\n2 3\\n4 2\") == \"0\\n0\\n1\\n1\"\n\"\"\"\n\nimport sys\n\nassert len(sys.argv) == 2\nlines = sys.stdin.readlines()\n\nassert len(lines) == 1\n\nN = int(lines[0])\n\nA = [int(i) for i in lines[0].split(\" \")]\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n3 5 -1\") == \"12\\n8\\n10\"\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 -1\") == \"12\\n8\\n10\"\n\"\"\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('a') == 'vowel'\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('a') == 'vowel'\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a) == \"vowel\"\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('a') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('u') == 'vowel'\nassert solution('e') == 'vowel'\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"a\") == \"vowel\"\n\n\"\"\"\nimport sys\n\nvowel_chars = \"aeiou\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin=\"a\") == \"vowel\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('a') == 'vowel'\nassert solution('e') == 'vowel'\nassert solution('i') == 'vowel'\nassert solution('o') == 'vowel'\nassert solution('u') == 'vowel'\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('a') == \"vowel\"\nassert solution('b') == \"consonant\"\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a') == 'vowel'\nassert solution('b') == 'consonant'\nassert solution('c') == 'vowel'\nassert solution('d') == 'consonant'\nassert solution('e') == 'vowel'\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('a') == 'vowel'\nassert solution('b') == 'consonant'\nassert solution('c') == 'vowel'\nassert solution('d') == 'consonant'\nassert solution('e') == 'vowel'\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('BBBWW') == 1\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BBBWW\") == 1\n\"\"\"\n\nfrom typing import List\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('BBBWW') == '1'\nassert solution('WWWWWWW') == '0'\nassert solution('BBBWWB') == '2'\nassert solution('WWBBWW') == '0'\nassert solution('WWBWWW') == '1'\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"BBBWW\") == \"1\"\nassert solution(\"WWWBB\") == \"0\"\nassert solution(\"WWWBBBWWWW\") == \"2\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"BBBWW\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BBBWW\") == \"1\"\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BBBWW\") == 1\nassert solution(\"BBBW\") == 0\nassert solution(\"WWBWBWBWBW\") == 3"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"BBBWW\") == \"1\"\n\"\"\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"WWBWW\") == 1\nassert solution(\"WWWWB\") == 0\nassert solution(\"BWBWB\") == 0\nassert solution(\"WWWBB\") == 1\nassert solution(\"WWBBB\") == 1\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('BBBWW') == '1'\nassert solution('WWWWB') == '3'\nassert solution('BWBWB') == '0'\nassert solution('WWWBB') == '2'\nassert solution('BWBWBW') == '3'\n\n------------------------------------------------------------------------------------------------------------------------------------\n\n### Read in String\n\n-----Constraints-----\n - |S| = 10^5\n - Each character in S is 'W' or 'B'.\n\n-----Input-----\nThe first line contains S.\n\n-----Output-----\nPrint the length of S.\n\n-----Sample Input-----\nWWWWB\n\n-----Sample Output-----\n5\n\nBy placing a new black stone to the right end of the row of stones, all white stones will become black. Also, by placing a new white stone to the left end of the row of stones, all black stones will become white.\nIn either way, Jiro's purpose can be achieved by placing one stone.\n\n------------------------------------------------------------------------------------------------------------------------------------\n\n### Read in String\n\n-----Constraints-----\n - |S| = 10^5\n - Each character in S is 'W' or 'B'.\n\n-----Input-----\nThe first line contains S.\n\n-----Output-----\nPrint the length of S.\n\n-----Sample Input-----\nWWWWB\n\n-----Sample Output-----\n5\n\nBy placing a new black stone to the right end of the row of stones, all white stones will become black. Also, by placing a new white stone to the left end of the row of stones, all black stones will become white.\nIn either way, Jiro's purpose can be achieved by placing one stone.\n\n------------------------------------------------------------------------------------------------------------------------------------\n\n### Read in String\n\n-----Constraints-----\n - |S| = 10^5\n - Each character in S is 'W' or 'B'.\n\n-----Input-----\nThe first line contains S.\n\n-----Output-----\nPrint the length of S.\n\n-----Sample Input-----\nWWWWB\n\n-----Sample Output-----\n5\n\nBy placing a new black stone to the right end of the row of stones, all white stones will become black. Also, by placing a new white stone to the left end of the row of stones, all black stones will become white.\nIn either way, Jiro's purpose can be achieved by placing one stone.\n\n------------------------------------------------------------------------------------------------------------------------------------\n\n### Read in String\n\n-----Constraints-----\n - |S| = 10^5\n - Each character in S is 'W' or 'B'.\n\n-----Input-----\nThe first line contains S.\n\n-----Output-----\nPrint the length of S.\n\n-----Sample Input-----\nWWWWB\n\n-----Sample Output-----\n5\n\nBy placing a new black stone to the right end of the row of stones, all white stones will become black. Also, by placing a new white stone to the left end of the row of stones, all black stones will become white.\nIn either way, Jiro's purpose can be achieved by placing one stone.\n\n------------------------------------------------------------------------------------------------------------------------------------\n\n### Read in String\n\n-----Constraints-----\n - |S| = 10^5\n - Each character in S is 'W' or 'B'.\n\n-----Input-----\nThe first line contains S.\n\n-----Output-----\nPrint the length of S.\n\n-----Sample Input-----\nWWWWB\n\n-----Sample Output-----\n5\n\nBy placing a new black stone to the right end of the row of stones, all white stones will become black. Also, by placing a new white stone to the left end of the row of stones, all black stones will become white.\nIn either way, Jiro's purpose can be achieved by placing one stone.\n\n------------------------------------------------------------------------------------------------------------------------------------\n\n### Read in String\n\n-----Constraints-----\n - |S| = 10^5\n - Each character in S is 'W' or 'B'.\n\n-----Input-----\nThe first line contains S.\n\n-----Output-----\nPrint the length of S.\n\n-----Sample Input-----\nWWWWB\n\n-----Sample Output-----\n5\n\nBy placing a new black stone to the right end of the row of stones, all white stones will become black. Also, by placing a new white stone to the left end of the row of stones, all black stones will become white.\nIn either way, Jiro's purpose can be achieved by placing one stone.\n\n------------------------------------------------------------------------------------------------------------------------------------\n\n### Read in String\n\n-----Constraints-----\n - |S| = 10^5\n - Each character in S is 'W' or 'B'.\n\n-----Input-----\nThe first line contains S.\n\n-----Output-----\nPrint the length of S.\n\n-----Sample Input-----\nWWWWB\n\n-----Sample Output-----\n5\n\nBy placing a new black stone to the right end of the row of stones, all white stones will become black. Also, by placing a new white stone to the left end of the row of stones, all black stones will become white.\nIn either way, Jiro's purpose can be achieved by placing one stone.\n\n------------------------------------------------------------------------------------------------------------------------------------\n\n### Read in String\n\n-----Constraints-----\n - |S| = 10^5\n - Each character in S is 'W' or 'B'.\n\n-----Input-----\nThe first line contains S.\n\n-----Output-----\nPrint the length of S.\n\n-----Sample Input-----\nWWWWB\n\n-----Sample Output-----\n5\n\nBy placing a new black stone to the right end of the row of stones, all white stones will become black. Also, by placing a new white stone to the left end of the row of stones, all black stones will become white.\nIn either way, Jiro's purpose can be achieved by placing one stone.\n\n------------------------------------------------------------------------------------------------------------------------------------\n\n### Read in String\n\n-----Constraints-----\n - |S| = 10^5\n - Each character in S is 'W' or 'B'.\n\n-----Input-----\nThe first line contains S.\n\n-----Output-----\nPrint the length of S.\n\n-----Sample Input-----\nWWWWB\n\n-----Sample Output-----\n5\n\nBy placing a new black stone to the right end of the row of stones, all white stones will become black. Also, by placing a new white stone to the left end of the row of stones, all black stones will become white.\nIn either way, Jiro's purpose can be achieved by placing one stone.\n\n------------------------------------------------------------------------------------------------------------------------------------\n\n### Read in String\n\n-----Constraints-----\n - |S| = 10^5\n - Each character in S is 'W' or 'B'.\n\n-----Input-----\nThe first line contains S.\n\n-----Output-----\nPrint the length of S.\n\n-----Sample Input-----\nWWWWB\n\n-----Sample Output-----\n5\n\nBy placing a new black stone to the right end of the row of stones, all white stones will become black. Also, by placing a new white stone to the left end of the row of stones, all black stones will become white.\nIn either way, Jiro's purpose can be achieved by placing one stone.\n\n------------------------------------------------------------------------------------------------------------------------------------\n\n### Read in String\n\n-----Constraints-----\n - |S| = 10"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 21') == 'Yes'\nassert solution('2 1') == 'No'\nassert solution('2 21') == 'No'\nassert solution('1 1') == 'Yes'\n\nprint(\"Passed!\")\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 21\\n') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 21\") == 'Yes'\nassert solution(\"5 5\") == 'No'\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 21') == 'Yes'\nassert solution('12 10') == 'No'\nassert solution('100 100') == 'No'\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2\\n') == 'No'\nassert solution('1 21\\n') == 'Yes'\n\n\"\"\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 21') == 'Yes'\n\"\"\""
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1 21''') == 'Yes'\nassert solution('''3 9''') == 'No'\nassert solution('''12 32''') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 21\") == \"Yes\"\n\"\"\"\n\na, b = [int(s) for s in stdin.split()]\n\nprint('Yes' if int(str(a) + str(b)) ** 0.5 % 1 == 0 else 'No')\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 21\\n\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 4 1 5 9 2\") == \"4\"\nprint(\"Passed\")\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n3 1 4 1 5 9 2') == 4\n\"\"\"\n\nimport math"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7\\n3 1 4 1 5 9 2') == '4'\n\"\"\""
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1 4 1 5 9 2') == '4'\n\"\"\"\nimport sys\nimport re\n\nn = int(sys.stdin.readline())\narr = list(map(int, sys.stdin.readline().strip().split(\" \")))\n\nx = 0\ncount = 0\n\nfor i in range(n):\n    if arr[i] > x:\n        x = arr[i]\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\n\"\"\"\nimport heapq"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1 4 1 5 9 2\") == 4\n\"\"\"\nimport sys"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\n\"\"\""
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n3 1 4 1 5 9 2\") == \"4\"\nprint('All tests passed.')\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7\\n3 1 4 1 5 9 2') == '4'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n4') == '5'\n\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n4') == '5'\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(3) == 5\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n4') == '5'\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n4') == '5'\nassert solution('6\\n9') == '6'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n4\") == \"5\"\nassert solution(\"5\\n8\") == \"9\"\nassert solution(\"1\\n0\") == \"0\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n4') == '5'\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n4') == '5'\n\n-------Solution-----\n\"\"\""
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n4\") == '5'\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 2 6\") == \"YES\"\nassert solution(\"2 4 6\") == \"NO\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"4 5 3\") == \"NO\"\n\nprint(solution(\"2 4 6\"))\nprint(solution(\"4 5 3\"))\n\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2 6\") == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"./data/sample1.txt\") == \"YES\"\nassert solution(\"./data/sample2.txt\") == \"NO\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4 6') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"2 2 2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 4 6') == 'YES'\nassert solution('1 2 3') == 'NO'\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 6 5') == 'YES'\n\"\"\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\n\n\"\"\"\nimport ast"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"2 4 6\n\"\"\") == \"YES\"\nassert solution(\n\"\"\"4 6 2\n\"\"\") == \"NO\"\n\n\"\"\"\n\nInput Format\n\nThe first line contains 3 space-separated integers, a, b, and c, the lengths of the poles.\n\nOutput Format\n\nPrint YES if the array of poles is beautiful. Otherwise, print NO.\n\nSample Input 0\n\n3 5 6\n\nSample Output 0\n\nYES\n\nSample Input 1\n\n4 6 1\n\nSample Output 1\n\nNO\n\nExplanation\n\nIn the first example, the poles are arranged so that the difference in heights (c-b) is equal to the difference in lengths (a-b)\nIn the second example, the difference in heights (c-b) is not equal to the difference in lengths (a-b)\n\"\"\"\n\n\"\"\"\n\nGiven three integers a, b, c, return the number of ways to form a target value, n, using a, b and c.\n\nThere are n + 1 possible ways to form n when there are 0, 1 or 2 items, so there are three cases:\n\nIf n = 0, there are no ways to form n;\nIf n = 1 or 2, there is only 1 way to form n;\nIf n > 2, there are n - 1 ways to form n.\n\"\"\"\n\n\"\"\"\n\nWays to form a target value = [1, 1, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 504, 927, 1705, 3136, 5768, 10609,...]\n\nFor the purposes of this problem, we will use the number of ways to form n = m - 1 to represent the number of ways to form n using exactly m items.\n\nExamples:\n\n1. m = 1, n = 1:\n    Ways to form 1 using 1 item = 1\n    Ways to form 1 using 2 items = 0\n    Therefore ways_to_form_n_using_m_items(1, 1) = 1\n\n2. m = 2, n = 2:\n    Ways to form 2 using 2 items = 1\n    Ways to form 2 using 1 item = 1\n    Ways to form 2 using 0 items = 0\n    Therefore ways_to_form_n_using_m_items(2, 2) = 2\n\n3. m = 3, n = 5:\n    Ways to form 5 using 3 items = 2\n    Ways to form 5 using 2 items = 1\n    Ways to form 5 using 1 item = 1\n    Ways to form 5 using 0 items = 0\n    Therefore ways_to_form_n_using_m_items(3, 5) = 3\n\n4. m = 4, n = 5:\n    Ways to form 5 using 3 items = 2\n    Ways to form 5 using 2 items = 2\n    Ways to form 5 using 1 item = 1\n    Ways to form 5 using 0 items = 0\n    Therefore ways_to_form_n_using_m_items(4, 5) = 4\n\n5. m = 5, n = 5:\n    Ways to form 5 using 3 items = 3\n    Ways to form 5 using 2 items = 3\n    Ways to form 5 using 1 item = 2\n    Ways to form 5 using 0 items = 1\n    Therefore ways_to_form_n_using_m_items(5, 5) = 5\n\n6. m = 6, n = 5:\n    Ways to form 5 using 3 items = 3\n    Ways to form 5 using 2 items = 4\n    Ways to form 5 using 1 item = 3\n    Ways to form 5 using 0 items = 1\n    Therefore ways_to_form_n_using_m_items(6, 5) = 5\n\n7. m = 7, n = 5:\n    Ways to form 5 using 3 items = 4\n    Ways to form 5 using 2 items = 5\n    Ways to form 5 using 1 item = 4\n    Ways to form 5 using 0 items = 2\n    Therefore ways_to_form_n_using_m_items(7, 5) = 5\n\n8. m = 8, n = 5:\n    Ways to form 5 using 3 items = 5\n    Ways to form 5 using 2 items = 6\n    Ways to form 5 using 1 item = 5\n    Ways to form 5 using 0 items = 3\n    Therefore ways_to_form_n_using_m_items(8, 5) = 5\n\n9. m = 9, n = 5:\n    Ways to form 5 using 3 items = 6\n    Ways to form 5 using 2 items = 7\n    Ways to form 5 using 1 item = 6\n    Ways to form 5 using 0 items = 4\n    Therefore ways_to_form_n_using_m_items(9, 5) = 5\n\n10. m = 10, n = 5:\n    Ways to form 5 using 3 items = 7\n    Ways to form 5 using 2 items = 8\n    Ways to form 5 using 1 item = 7\n    Ways to form 5 using 0 items = 5\n    Therefore ways_to_form_n_using_m_items(10, 5) = 5\n\n11. m = 11, n = 5:\n    Ways to form 5 using 3 items = 8\n    Ways to form 5 using 2 items = 9\n    Ways to form 5 using 1 item = 8\n    Ways to form 5 using 0 items = 6\n    Therefore ways_to_form_n_using_m_items(11, 5) = 5\n\n12. m = 12, n = 5:\n    Ways to form 5 using 3 items = 9\n    Ways to form 5 using 2 items = 10\n    Ways to form 5 using 1 item = 9\n    Ways to form 5 using 0 items = 7\n    Therefore ways_to_form_n_using_m_items(12, 5) = 5\n\n13. m = 13, n = 5:\n    Ways to form 5 using 3 items = 10\n    Ways to form 5 using 2 items = 11\n    Ways to form 5 using 1 item = 10\n    Ways to form 5 using 0 items = 8\n    Therefore ways_to_form_n_using_m_items(13, 5) = 5\n\n14. m = 14, n = 5:\n    Ways to form 5 using 3 items = 11\n    Ways to form 5 using 2 items = 12\n    Ways to form 5 using 1 item = 11\n    Ways to form 5 using 0 items = 9\n    Therefore ways_to_form_n_using_m_items(14, 5) = 5\n\n15. m = 15, n = 5:\n    Ways to form 5 using 3 items = 12\n    Ways to form 5 using 2 items = 13\n    Ways to form 5 using 1 item = 12\n    Ways to form 5 using 0 items = 10\n    Therefore ways_to_form_n_using_m_items(15, 5) = 5\n\n16. m = 16, n = 5:\n    Ways to form 5 using 3 items = 13\n    Ways to form 5 using 2 items = 14\n    Ways to form 5 using 1 item = 13\n    Ways to form 5 using 0 items = 11\n    Therefore ways_to_form_n_using_m_items(16, 5) = 5\n\n17. m = 17, n = 5:\n    Ways to form 5 using 3 items = 14\n    Ways to form 5 using 2 items = 15\n    Ways to form 5 using 1 item = 14\n    Ways to form 5 using 0 items = 12\n    Therefore ways_to_form_n_using_m_items(17, 5) = 5\n\n18. m = 18, n = 5:\n    Ways to form 5 using 3 items = 15\n    Ways to form 5 using 2 items = 16\n    Ways to form 5 using 1 item = 15\n    Ways to form 5 using 0 items = 13\n    Therefore"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('29') == 'Yes'\nassert solution('30') == 'No'\n\"\"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('29') == 'Yes'\nassert solution('15') == 'No'\nassert solution('10') == 'Yes'\n\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"29\") == \"Yes\"\nassert solution(\"28\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"29\") == \"Yes\"\n\nassert solution(\"10\") == \"No\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('29') == 'Yes'\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution( '29' ) == 'Yes'\nassert solution( '28' ) == 'No'\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('29') == 'Yes'\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('29') == 'Yes'\nassert solution('34') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"29\") == \"Yes\"\nassert solution(\"20\") == \"No\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"29\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n\"\"\"\n\nfrom itertools import accumulate"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\nassert solution(\"5 3 3\\n1 3 4\") == \"3\"\nassert solution(\"5 3 3\\n4 5 6\") == \"3\"\nassert solution(\"5 5 5\\n4 1 2 3\") == \"3\"\nassert solution(\"3 3 3\\n4 1 2\") == \"1\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_0) == '5'\nassert solution(test_input_1) == '4'\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 2 3 4\") == \"1\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 1\\n2 3 4\") == \"1\"\nassert solution(\"4 5 1\\n2 3 4 5\") == \"0\"\nassert solution(\"4 5 4\\n1 1 3 4\") == \"0\"\nassert solution(\"4 5 4\\n2 1 3 4\") == \"1\"\nassert solution(\"4 5 4\\n1 1 3 3\") == \"2\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 3\\n1 2 4\") == \"1\"\n\"\"\"\n\nimport sys\n\n\nclass Matrix:\n    def __init__(self, value):\n        self.value = value\n        self.shape = (len(self.value), len(self.value[0]))\n\n    def __add__(self, other):\n        if not self.shape == other.shape:\n            raise ValueError(f\"Matrix shapes do not match.\")\n        sum_matrix = []\n        for i, line_1 in enumerate(self.value):\n            sum_matrix.append([])\n            for j, element_1 in enumerate(line_1):\n                sum_matrix[i].append(element_1 + other.value[i][j])\n        return Matrix(sum_matrix)\n\n    def __str__(self):\n        return \"\\n\".join([\" \".join([str(element) for element in line]) for line in self.value])\n\n\nclass TollGate:\n    def __init__(self, x, y, cost=1):\n        self.x = x\n        self.y = y\n        self.cost = cost\n\n    def __str__(self):\n        return f\"Toll gate ({self.x}, {self.y}) cost {self.cost}\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n3 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 3\\n1 2 4\") == \"1\"\nassert solution(\"3 2 1\\n1 2 3\") == \"4\"\nassert solution(\"2 4 1\\n1 2\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 3\\n1 2 4\\n') == '1'\n\"\"\""
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 3\\n1 2 4\\n\") == \"1\"\nassert solution(\"4 1 3\\n2 3 5\\n\") == \"0\"\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n.#.\\n###\\n.#.\") == \"Yes\"\nassert solution(\"3 3\\n##.\\n###\\n#.\") == \"No\"\n\"\"\"\n\nH, W = list(map(int, stdin.split()))"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n.\\n###\\n.#.\") == \"Yes\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"###\\n###\\n#.\\n###\") == \"Yes\"\nassert solution(\"####\\n#.#\\n#.#\\n####\") == \"No\"\n\"\"\"\n\nfrom copy import deepcopy"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 3\n.#.\n###\n.#.''') == 'Yes'\nassert solution('''3 3\n.#.\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3\\n.#\\n###\\n.#\\n') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n.\\n.\\n#\\n\") == \"Yes\"\nassert solution(\"3 3\\n.\\n###\\n.#\\n\") == \"No\"\n\n----"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n.#.\\n###\\n.#.\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 3\\n.#.\\n###\\n.#.') == 'Yes'\n\"\"\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n.\\n#.\\n.\\n\") == \"Yes\"\n\"\"\"\n\n\nimport re"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('.#.#') == 'Yes'\nassert solution('###.') == 'Yes'\nassert solution('#..#') == 'No'\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"1 2 3\") == \"No\"\nassert solution(\"10 10 10\") == \"No\"\nassert solution(\"20 10 10\") == \"No\"\nassert solution(\"10 20 30\") == \"No\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"100 100 100\") == \"No\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"40 40 40\") == \"No\"\nassert solution(\"10 10 10\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 30 20') == 'Yes'\nassert solution('20 10 10') == 'No'\nassert solution('30 10 10') == 'Yes'\nassert solution('20 20 10') == 'No'\nassert solution('20 20 20') == 'Yes'\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nassert solution(\"10 30 10\") == \"No\"\nassert solution(\"10 30 20 30 20\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 30 20\") == \"Yes\"\nprint(solution(\"10 30 20\"))\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\"\n\na,b,c,d = list(map(int, input().split()))"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 8 7 1\") == 'Left'\n\n------End of Input------\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 8 7 1') == 'Left'\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 8 7 1') == 'Left'"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\n\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 8 7 1') == 'Left'\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 8 7 1\") == \"Left\"\nassert solution(\"3 3 3 1\") == \"Balanced\"\nassert solution(\"3 8 1 2\") == \"Right\"\n\"\"\""
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''1\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n''') == '8'\nprint(solution(stdin), end='')"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\") == 8\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\") == \"8\"\n\"\"\""
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6\\n1 0 1 0 0 0 1 1\\n3 1 1 1 1 1 1 1\\n0 3 0 0 1 1 1 1\\n0 0 0 3 3 3 3 3\\n1 0 1 2 3 3 3 3\\n0 1 1 2 3 3 3 3') == \"8\"\nassert solution('8\\n1 1 1 1 1 0 1 1 1 1\\n0 1 0 1 1 1 1 1 1 1\\n0 1 0 1 1 1 1 1 1 1\\n0 1 0 1 1 1 1 1 1 1\\n0 1 0 1 1 1 1 1 1 1\\n0 1 0 1 1 1 1 1 1 1\\n0 1 0 1 1 1 1 1 1 1\\n0 1 0 1 1 1 1 1 1 1\\n0 1 0 1 1 1 1 1 1 1') == \"8\"\n\"\"\""
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n0 0 1 0 1 1 0 1 1 0 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 0 1 0 1 1 0 1 1 1 0 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 0 1 0 1 1 0 1 1 1 0 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 0 1 0 1 1 0 1 1 1 0 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 0 1 0 1 1 0 1 1 1 0 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 0 1 0 1 1 0 1 1 1 0 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 0 1 0 1 1 0 1 1 1 0 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"8\"\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 1 0 1 0 0 0 1 0 1\\n3 4 5 6 7 8 9 -2 -3 4 -2') == '8'\nassert solution('1\\n0 0 1 0 0 0 0 1 0 1\\n0') == '0'\nassert solution('1\\n0 0 0 0 0 0 0 1 0 1\\n0') == '0'\nassert solution('2\\n0 1 0 1 0 0 0 0 0 0\\n0') == '1'\nassert solution('2\\n0 1 1 1 0 0 0 0 0 0\\n0') == '1'\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1 0 1 0 0 0 1 0 1') == '8'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 5 6 7 8 9 -2 -3 4 -2\") == \"8\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('269-6650') == \"Yes\"\n\n-----\n0 < A <= 5\n|S| = A + B + 1\nS[0] = '0' - '9'\nS[A+1] = '-'\nS[A+2] = '0' - '9'\n\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"255-6550\") == \"No\"\nassert solution(\"255-465\") == \"No\"\nassert solution(\"255-4-65\") == \"No\"\nassert solution(\"-1-1\") == \"No\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('269-6650') == 'Yes'\nassert solution('1-2-3-4-5') == 'No'\nassert solution('1-2-3-4') == 'No'\nassert solution('1-2-3') == 'No'\nassert solution('1-2') == 'No'\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('269-6650') == 'Yes'\nassert solution('12345') == 'No'\nassert solution('123456') == 'No'\nassert solution('1-2345') == 'No'\nassert solution('A1-2345') == 'No'\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('269-6650') == 'Yes'\nassert solution('789-8765') == 'No'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\nassert solution(\"26-664\") == \"No\"\n\"\"\"\n\nA, B = map(int, stdin.split())"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == \"No\"\nassert solution('2 3') == \"No\"\nassert solution('2 3 4') == \"No\"\nassert solution('2 3 4 5') == \"No\"\nassert solution('2 3 4-5') == \"Yes\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 \\n A \\n B \\n C \\n D\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"269-6650\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 2 6') == '1'\nassert solution('2 3 4') == '2'\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '3 2 6'\n) == '1'\n\"\"\"\n\nfrom functools import reduce\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2 6') == '1'\n\"\"\"\nimport sys\nfrom math import gcd\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 2 6\") == '1'\n\"\"\"\n\nW, a, b = map(int, stdin.split())\nprint(min(W - (b - a), (b + a)))"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\"\n\nimport sys\n\nstdin = open(\"in/1.in\", \"r\").read()\n\nsys.stdout = open(\"out/1.out\", \"w\")\n\narr = list(map(int, stdin.split()))\nw = arr[0]\na = arr[1]\nb = arr[2]\n\nmin_dist = min(abs(a - b), abs(a + w - b), abs(w - (a + b)))\nprint(min_dist)\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 2 6\") == \"1\""
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '3 8 2'\n) == '3\\n4\\n7\\n8'\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a b') == 'a'\nassert solution('a b c') == 'a'\nassert solution('a b c d') == 'a'\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\n\"\"\"\n\nimport sys\nimport math\n\na, b, k = map(int, sys.stdin.readline().split())\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 8 2\") == \"3 4 7 8\"\n\n------\n\"\"\"\nimport stdio\nimport sys\n\na = int(sys.argv[1])\nb = int(sys.argv[2])\nk = int(sys.argv[3])\n\nst = stdio.readLine()\nst = st.split(' ')\na = int(st[0])\nb = int(st[1])\nk = int(st[2])\n\nlist = [a, b]\nlist.sort()"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\n\"\"\"\n\nimport heapq\n\n_, A, B, K = map(int, input().split())\nq = []\nfor n in range(A, B + 1):\n    heapq.heappush(q, n)\n    if len(q) > K:\n        heapq.heappop(q)\nprint('\\n'.join(map(str, q)))\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == output\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 8 2\") == \"3\\n4\\n7\\n8\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 8 2\") == \"3 4 7 8\"\n\"\"\"\n\na, b, k = map(int, input().split())\n\nlst = sorted([i for i in range(a, b+1)])\nprint(*lst[0:k], sep=\"\\n\")\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 8 2') == '3\\n4\\n7\\n8'\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n\ns = input()\n\nprint(s[0] + str(len(s) - 2) * \"ABC\")\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_0) == test_1\n\"\"\"\n\ns = input()\n\nprint(s[0] + str(len(s) - 2) * \"X\" + s[1])\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('AtCoder Beginner Contest') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AtCoder Beginner Contest\") == \"ABC\"\n\"\"\"\n\ns = str(input())\ns = s[0].upper() + s[1:].lower()\nprint(s)"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 4\\n\") == \"YES\"\nassert solution(\"3 5 6\\n\") == \"NO\"\nassert solution(\"2 5 10\\n\") == \"YES\"\nassert solution(\"3 5 6\\n\") == \"NO\"\nassert solution(\"3 5 1\\n\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3') == 'YES'\nassert solution('1 3 5') == 'NO'\nassert solution('2 2 6') == 'NO'\n\n\"\"\"\n\na, b, x = map(int, stdin.split())\n\ncats = min(a, x)\ndogs = max(a, x) - cats"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'NO'\nassert solution('1 1 1\\n2 2 3') == 'NO'\nassert solution('1 1 1\\n1 2 3') == 'YES'\nassert solution('1 1 1\\n1 2 4') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'YES'\nassert solution('5 4 3') == 'NO'\nassert solution('10 8 7') == 'YES'\nassert solution('5 10 10') == 'NO'\nassert solution('1 1 1') == 'YES'\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 4\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"NO\"\nassert solution(\"2 2 3\") == \"NO\"\nassert solution(\"3 2 3\") == \"NO\"\nassert solution(\"2 2 4\") == \"YES\"\nassert solution(\"4 3 3\") == \"YES\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == \"YES\" or solution(input()) == \"NO\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3 5 4''') == 'YES'\nassert solution('''3 5 6''') == 'NO'\n'''\nimport sys\n\nA, B, X = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100 17\") == \"83\"\n\"\"\"\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 17\") == \"83\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"10 30\") == \"10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100 17\") == \"83\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"100 17\") == \"83\"\n\n\"\"\"\nimport math\n\nX, t = map(int, stdin.readline().split())\nprint(X*math.exp(-1*t))\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"100 17\") == \"83\"\n\"\"\""
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100 17\") == \"83\"\n\nassert solution(\"100 10\") == \"70\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(100, 17) == 83\n\n--------------------------------------------------------------------------------\n\nIn a factory a printer prints labels for boxes. For one kind of boxes the printer has to use colors which, for the sake of simplicity, are named with letters from a to m.\nThe colors used by the printer are recorded in a control string. For example a \"good\" control string would be aaabbbbhaijjjm meaning that the printer used three times color a, four times color b, one time color h then one time color a...\nSometimes there are problems: lack of colors, technical malfunction and a \"bad\" control string is produced e.g. aaaxbbbbyyhwawiwjjjwwm with letters not from a to m.\nYou have to write a function printer_error which given a string will output the error rate of the printer as a string representing a rational whose numerator is the number of errors and the denominator the length of the control string. Don't reduce this fraction to a simpler expression.\nThe string has a length greater or equal to one and contains only letters from ato z.\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''100 17''') == '''83'''\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100 17\") == \"83\"\nprint(solution(\"100 17\"))"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''100 17''') == '83'\n'''\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('010') == 10\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/54a2d7f92fc6aa6c9a00047f/train/python"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1\\n1\\n') == '1'\nassert solution('2\\n1\\n1\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10\\n100\\n1000') == '10000'\nassert solution('2\\n10\\n100') == '1000'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = list(map(int, sys.stdin.readline().split()))\n\nresult = 1\nfor ai in a:\n    if result > 10**18:\n        result = -1\n    result *= ai\n\nprint(result)"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 3 9 2 5') == '60'\n\"\"\"\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000000000 1000000000') == '1000000000000000000'\n\"\"\""
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\n1000000000 1000000000''') == '1000000000000000000'\n\n\"\"\""
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1\\n2') == '2'\nassert solution('1\\n2\\n3') == '6'\nassert solution('1\\n2\\n3\\n4') == '24'\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 3 4 5 6') == '20'\nassert solution('5\\n5 0 4 3 7') == '0'\n\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def solve(self, N: str, A: str):\n        if N!= '1':\n            return '0'\n        else:\n            return '1'\n        \n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 2') == '4'\nassert solution('3\\n1 2 3') == '6'\nassert solution('3\\n1000000000 1000000000') == '1000000000000000000'\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1\\n1') == '1'\nassert solution('2\\n1\\n2') == '2'\nassert solution('4\\n1\\n2\\n3\\n4') == '24'\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\"\n\nimport sys\n\nn = int(input())\namount = int(input())"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2018\\n218') == 'Yes'\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"218\") == \"Yes\"\nassert solution(\"2018\") == \"Yes\"\nassert solution(\"5\") == \"No\"\n\n\"\"\"\n\nn = int(input())\na = int(input())"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2018 218\") == \"Yes\"\n\"\"\"\n\nN = int(stdin.readline())\nA = int(stdin.readline())\n\n\"\"\"\nIf N is greater than the amount A, N cannot be completely divisible by 500\nIf N is less than the amount A, A cannot be completely divisible by 5\nIf A is less than 5, A cannot be completely divisible by 5\nSo the answer is Yes\n\"\"\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2018 2\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2018\\n218\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"2018\\n218\"\n) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 6\\n\") == \"safe\"\nassert solution(\"1 1 1\\n\") == \"dangerous\"\nassert solution(\"1 0 1\\n\") == \"dangerous\"\nassert solution(\"1 0 1\\n\") == \"dangerous\"\nassert solution(\"4 3 6\\n\") == \"safe\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3 6\\n') =='safe'\n\"\"\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\nassert solution(\"4 3 1\") == \"dangerous\"\n\"\"\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 6') =='safe'\n\n---Problem---\nWe want to find the number of ways to traverse a grid of N rows and M columns in the clockwise direction starting from the bottom left position. The robot can only move in the direction to the right and up.\n\nInput Format:\nThe first line of input contains an integer N, the number of rows in the grid.\nThe second line of input contains an integer M, the number of columns in the grid.\nThe next N lines, each contains M integers, A1, A2,..., AN, describing the grid.\n\nOutput Format:\nThe first line of output should contain the number of ways to traverse the grid.\n\n---Sample Input---\n2\n2\n1 2\n\n---Sample Output---\n3\n\n---Explanation---\nYou can move in the following three ways:\n1. Right, Right\n2. Right, Up\n3. Up, Up\n\n---Solution---\n\nWe will use the A(i, j) notation to refer to the positions of a cell i, j on the grid. Let\u2019s say our grid is represented as the following diagram:\n\nBy looking at the diagram, we can draw out a graph where each node corresponds to a single cell. An edge from node A(i, j) to node B(k, l) represents the fact that you can travel from cell A(i, j) to cell B(k, l) in one step.\n\nWe can define the number of ways to traverse the graph by following the following strategy:\n\nCalculate the number of ways to traverse the graph with only one step in each direction.\nMultiply the number of ways to traverse the graph with only one step in each direction by the number of ways to traverse the graph with two steps in each direction.\nSimilarly, we can calculate the number of ways to traverse the graph with three steps in each direction, and so on.\nTo calculate the number of ways to traverse the graph with n steps in each direction, we can calculate the number of ways to traverse the graph with n steps in each direction using the below formula:\n\nf(n) = f(n-1) + f(n-2) + f(n-3) + f(n-4) + \u2026 + f(1) + f(0)\n\nWe can see that we have a simple recursive formula to calculate the number of ways to traverse the graph.\n\nWe can also define a matrix to store the number of ways to traverse the graph with a fixed number of steps in each direction. The cell in position i, j in the matrix will contain the number of ways to traverse the graph with i steps in the right direction and j steps in the up direction.\n\nFor instance, if the value in the cell in position i, j in the matrix corresponds to the number of ways to traverse the graph with 2 steps in the right direction and 2 steps in the up direction, then the value in the cell in position i, j in the matrix will be the number of ways to traverse the graph with 3 steps in the right direction and 3 steps in the up direction.\n\nWe can now calculate the number of ways to traverse the graph using the matrix. The number of ways to traverse the graph with n steps in each direction is the value at cell (n-1)th row and (n-1)th column in the matrix.\n\nIf we have a 2 x 2 matrix, where the value in the cell in position i, j in the matrix corresponds to the number of ways to traverse the graph with i steps in the right direction and j steps in the up direction, then the value in the cell in position i, j in the matrix will be the number of ways to traverse the graph with i steps in the right direction and j steps in the up direction, or with i steps in the right direction and j+1 steps in the up direction, or with i+1 steps in the right direction and j steps in the up direction, or with i steps in the right direction and j+1 steps in the up direction.\n\nWe can now define the number of ways to traverse the graph using the matrix:\n\nf(n) = f(n-1) + f(n-2) + f(n-3) + f(n-4) + \u2026 + f(1) + f(0)\n\nWe can test the correctness of this solution by printing the value at cell (2, 2) in the matrix."
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\nassert solution(\"2 3 6\") == \"dangerous\"\nassert solution(\"2 1 6\") == \"dangerous\"\nassert solution(\"2 4 6\") == \"dangerous\"\nassert solution(\"1 1 6\") == \"dangerous\"\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\"\"\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 6') =='safe'\n\"\"\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 6\") == \"safe\"\n\n\"\"\"\n\nX, A, B = [int(i) for i in stdin.readline().strip().split()]\n\nA = A - 1\nB = B - 1"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"4 3 6\"\n) == \"safe\"\n\nassert solution(\n\"3 1 7\"\n) == \"dangerous\"\n\nassert solution(\n\"1 1 2\"\n) == \"dangerous\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3 6\\n') =='safe'\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom typing import List\n\nfrom utils import read_input\n\n@dataclass\nclass Day:\n    best_by: int\n    eat_day: int\n    \n    def __gt__(self, other):\n        return self.best_by < other.best_by\n        \n    def __ge__(self, other):\n        return self.best_by <= other.best_by\n\n    def __le__(self, other):\n        return self.best_by >= other.best_by\n        \n    def __lt__(self, other):\n        return self.best_by > other.best_by\n        \n    def __ge__(self, other):\n        return self.best_by <= other.best_by\n        \n@dataclass\nclass Food:\n    best_by: Day\n    eat_day: Day\n    \n    def is_delicious(self):\n        return self.best_by <= self.eat_day\n    \n    def is_safe(self):\n        return self.best_by >= self.eat_day\n        \n    def is_dangerous(self):\n        return self.best_by < self.eat_day\n        \n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == '9'\nassert solution('100') == '99'\nassert solution('100') == '99'\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"9\"\nassert solution(\"20\") == \"19\"\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\"\"\"\nimport math\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"9\"\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\n\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10') == '9'\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"9\"\n\"\"\""
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(10) == 9\nprint(solution(10))"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"9\"\nprint(solution(\"10\"))\n\"\"\"\n\nimport math"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n') == '3'\nassert solution('10\\n') == '9'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 1\\n2 1\\n3 2\\n5 4\\n1 2\\n1 2\\n2 3\\n4 1\") == \"12\"\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'''\n3\n2 3\n1 1\n3 2\n''') == '10'\n\nassert solution(\n'''\n4\n2 3\n1 1\n3 2\n1 1\n''') == '20'\n\nassert solution(\n'''\n7\n2 3\n1 1\n3 2\n1 1\n3 2\n1 1\n3 2\n''') == '100'\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\n1 1\\n3 2\\n') == '10'\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 2\\n1 1\\n3 2') == '10'\nprint(solution(input()))\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n3\n2 3\n1 1\n3 2\n\"\"\") == '10'\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 1\\n3 2\\n\") == \"10\"\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2 3') == '10'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\ncount = 0\nfor i in range(1, N + 1):\n    line = sys.stdin.readline().strip().split()\n    count += (int(line[0]) * int(line[1]))\nprint(count)\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n2 3\\n1 1') == '10'\nassert solution('5\\n2 1\\n2 3') == '8'\n\"\"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\nassert solution(\"1\\n1\\n1\") == \"3\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n2 3\\n1 1\\n3 2\") == \"10\"\nassert solution(\"5\\n5 5\\n1 1\\n5 4\\n1 2\") == \"13\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('uncopyrightable') == 'yes'\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('uncopyrightable') == 'yes'\n\"\"\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abc') == 'yes'\nassert solution('abcd') == 'no'\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('uncopyrightable') == \"yes\"\nassert solution('a') == \"no\"\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\nassert solution(\"thelongstr\") == \"no\"\n\"\"\"\n\nstdin = input()\n\nfor c in stdin:\n    if stdin.count(c) > 1:\n        print(\"no\")\n        exit()\n\nprint(\"yes\")"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('uncopyrightable') == 'yes'\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    if len(set(line.lower())) == len(line.lower()):\n        print('yes')\n    else:\n        print('no')\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"uncopyrightable\") == \"yes\"\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('uncopyrightable') == 'yes'\n\"\"\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abcde') == 'yes'\nassert solution('abc') == 'yes'\nassert solution('abcd') == 'no'\nassert solution('aabcdaabc') == 'no'\nassert solution('abcd') == 'yes'\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(True)"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"WEEWW\") == \"1\"\nassert solution(\"WWWEW\") == \"0\"\nassert solution(\"WEWWW\") == \"2\"\n\"\"\""
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5WEEWW\") == \"1\"\nassert solution(\"5EWEWW\") == \"1\"\nassert solution(\"5EEWW\") == \"1\"\nassert solution(\"5WEWW\") == \"1\"\n\"\"\"\nfrom __future__ import annotations\n\nfrom math import gcd\nfrom typing import List, Tuple\n\nimport numpy\n\nfrom adventofcode2020.utils.abstract import FileReaderSolution\n\n\nclass Day12:\n    @staticmethod\n    def get_positions(s: str) -> Tuple[int, int, int, int]:\n        \"\"\"\n        Returns the coordinates of the new position for each direction\n        \"\"\"\n        dir_map = {\n            \"E\": (1, 0),\n            \"S\": (0, -1),\n            \"W\": (-1, 0),\n            \"N\": (0, 1),\n        }\n\n        directions = [dir_map[c] for c in s]\n        return tuple(numpy.add(directions, 1).tolist())\n\n    @staticmethod\n    def get_manhattan_distance(p: Tuple[int, int]) -> int:\n        \"\"\"\n        Returns the Manhattan distance of a given position\n        \"\"\"\n        return abs(p[0]) + abs(p[1])\n\n    @staticmethod\n    def get_manhattan_distance_with_waypoint(\n        s: str, w: Tuple[int, int]\n    ) -> Tuple[int, int]:\n        \"\"\"\n        Returns the Manhattan distance and the new position for each direction\n        \"\"\"\n        dir_map = {\n            \"E\": (1, 0),\n            \"S\": (0, -1),\n            \"W\": (-1, 0),\n            \"N\": (0, 1),\n        }\n        directions = [dir_map[c] for c in s]\n        return (\n            sum([abs(n) for n in numpy.add(directions, 1)]),\n            w[0] + directions[0] * s.count(\"E\"),\n            w[1] + directions[1] * s.count(\"S\"),\n        )\n\n    @staticmethod\n    def get_least_commands_to_turn_around(s: str) -> int:\n        \"\"\"\n        Returns the least number of times to turn around in order to reach the position\n        \"\"\"\n        waypoint = (10, 1)\n        pos = (0, 0)\n        for c in s:\n            if c == \"E\":\n                waypoint = (waypoint[0] + 1, waypoint[1])\n            elif c == \"S\":\n                waypoint = (waypoint[0], waypoint[1] - 1)\n            elif c == \"W\":\n                waypoint = (waypoint[0] - 1, waypoint[1])\n            elif c == \"N\":\n                waypoint = (waypoint[0], waypoint[1] + 1)\n            pos = tuple(numpy.add(pos, waypoint).tolist())\n        return sum([abs(n) for n in numpy.add(waypoint, -1).tolist()])\n\n    @staticmethod\n    def get_least_commands_to_turn_around_with_waypoint(s: str) -> int:\n        \"\"\"\n        Returns the least number of times to turn around in order to reach the position\n        \"\"\"\n        pos = (0, 0)\n        waypoint = (1, 10)\n        for c in s:\n            if c == \"E\":\n                waypoint = (waypoint[0] + 1, waypoint[1])\n            elif c == \"S\":\n                waypoint = (waypoint[0], waypoint[1] - 1)\n            elif c == \"W\":\n                waypoint = (waypoint[0] - 1, waypoint[1])\n            elif c == \"N\":\n                waypoint = (waypoint[0], waypoint[1] + 1)\n            pos = tuple(numpy.add(pos, waypoint).tolist())\n        return sum([abs(n) for n in numpy.add(waypoint, -1).tolist()])\n\n\nclass Day12PartA(Day12, FileReaderSolution):\n    def solve(self, input_data: str) -> int:\n        position = Day12.get_positions(input_data)\n        return Day12.get_manhattan_distance(position)\n\n\nclass Day12PartB(Day12, FileReaderSolution):\n    def solve(self, input_data: str) -> int:\n        position = Day12.get_positions(input_data)\n        return Day12.get_least_commands_to_turn_around(input_data)\n\n\nclass Day12PartAB(Day12, FileReaderSolution):\n    def solve(self, input_data: str) -> int:\n        position = Day12.get_positions(input_data)\n        return Day12.get_manhattan_distance(position)\n\n    def solve_with_waypoint(self, input_data: str) -> int:\n        return Day12.get_least_commands_to_turn_around_with_waypoint(input_data)\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"WWWE\") == 1\nassert solution(\"WEEWW\") == 0\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('WEEWW') == '1'\nassert solution('WWWWW') == '0'\n\"\"\""
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5\nWEEWW''') == '1'\nassert solution('''3\nEEWW''') == '0'\nassert solution('''4\nWEEWE''') == '2'\nassert solution('''2\nWEWE''') == '2'\nassert solution('''3\nEEWE''') == '1'\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\n------Comments------\n- The solution is correct\n- The solution is trivial\n- I am not sure that the question is necessary to be solved this way\n\"\"\""
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"WEEWW\") == \"1\"\nassert solution(\"WWWEEW\") == \"0\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"WEEWW\") == 1\nassert solution(\"WWWEW\") == 0\n\n----INPUT FORMAT (file input)----\nN\nS\n\n----OUTPUT FORMAT (file output)----\nnumber of people who have to change their directions\n\n\"\"\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('WEEWW') == 1\n\"\"\""
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WEEWW\") == 1\nassert solution(\"WWWWE\") == 0\nassert solution(\"WWEEW\") == 0\n\"\"\"\n\n\"\"\"\nThe solution is based on the fact that one of the people will face the same direction as the leader.\nInstead of trying to find out how many people have to change directions, we try to find out which direction will be their final direction.\nWe first look at the first character of the string and see if it is E or W, then we see if there is a character after the first one in the string.\nIf the first character is E, then the final direction will be W and vice versa.\n\"\"\""
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n'''\n4 3\n1 2\n2 3\n1 4\n'''\n) == '''\n2\n2\n1\n1\n'''\nassert solution(\n'''\n5 5\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n'''\n) == '''\n3\n3\n2\n2\n2\n'''\nassert solution(\n'''\n4 4\n1 2\n2 3\n1 4\n3 4\n'''\n) == '''\n2\n2\n1\n1\n'''\nassert solution(\n'''\n3 2\n1 2\n2 3\n'''\n) == '''\n1\n1\n0\n'''\nassert solution(\n'''\n2 2\n1 2\n'''\n) == '''\n1\n1\n'''\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\\n\") == \"2\\n2\\n1\\n1\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\nassert solution(\"4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\") == \"1\\n2\\n1\\n2\\n1\"\nassert solution(\"10 1\\n1 2\") == \"1\\n1\"\nassert solution(\"4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\") == \"2\\n1\\n1\\n1\\n2\\n1\"\nassert solution(\"4 5\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\") == \"2\\n1\\n1\\n1\\n2\\n1\"\n\n\"\"\""
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n4 3\n1 2\n2 3\n1 4\n''') == '''\n2\n2\n1\n1\n'''\nprint(solution('''\n4 3\n1 2\n2 3\n1 4\n'''))"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == '2\\n2\\n1\\n1'\n\n---"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == '2\\n2\\n1\\n1'\nassert solution(\"5 5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 1\") == '3\\n3\\n2\\n2\\n1'"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n\"\"\""
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n1 4\") == \"2\\n2\\n1\\n1\"\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n10\\n15\") == \"25\"\n\"\"\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\"\nassert solution(\"1\\n1\\n1\") == \"0\"\nassert solution(\"2\\n1\\n1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n5\\n10\\n15\\n\") == \"25\\n\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n5\\n10\\n15') == '25'\nassert solution('2\\n5\\n10') == '30'"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"3\\n5\\n10\\n15\"\n) == \"25\"\n\nassert solution(\n    \"3\\n1\\n2\"\n) == \"10\"\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n5\\n10\\n15\\n\") == \"25\"\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n5\\n10\\n15\") == \"25\\n\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n5\\n10\\n15') == '25'\nassert solution('3\\n10\\n15\\n5') == '30'\nassert solution('1\\n10\\n15\\n5') == '30'\nassert solution('3\\n10\\n15') == '30'\nassert solution('1\\n10') == '10'"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n5\\n10\\n15\\n\") == \"25\\n\"\nassert solution(\"2\\n5\\n10\\n\") == \"10\\n\"\n\"\"\"\n\n\"\"\"\nQuestion:\nUsing '*' character, convert all the characters to '#' character and print out the result string.\n\nInput Format:\nThe first line contains the integer, T, the number of test cases. T lines follow. Each line contains a string S.\n\nConstraints:\n1 <= T <= 100\n1 <= |S| <= 100\n\nOutput Format:\nFor each test case, print the converted string.\n\nSample Input 0:\n2\nhello\nPython\nSample Output 0:\n######\n#######\n\"\"\"\n\n\"\"\"\nSolution:\n\"\"\""
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n10\\n15\") == \"25\"\nassert solution(\"15\\n10\\n5\") == \"25\"\nassert solution(\"10\\n5\\n5\") == \"30\"\n\"\"\""
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aabbca\") == 2\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aabbca') == 2\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aabbca') == 2\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aabbca') == 2\n\n\"\"\""
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(aabbca) == 2\n\"\"\""
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aabbca\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aabbca') == 2\nassert solution('abbcab') == 2\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aabbca\") == 2\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aabbca') == 2\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abcd') == 'ab'\nassert solution('abab') == 'ab'\nassert solution('abcde') == 'abcd'\nassert solution('aaaa') == 'aaaa'\nassert solution('aab') == 'ab'\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Rainy'\nassert solution('Rainy') == 'Sunny'\n\"\"\""
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('Sunny') == 'Cloudy'\n\nassert solution('Cloudy') == 'Rainy'\n\nassert solution('Rainy') == 'Sunny'\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Rainy') == 'Rainy'\nassert solution('Cloudy') == 'Rainy'\n\"\"\"\n\nimport math\n\nclass Solution:\n    def predict_the_weather(self, stdin: str) -> str:\n        stdin_copy = stdin.copy()\n        if len(stdin_copy) > 0 and stdin_copy[0] == 'Sunny':\n            stdin_copy[0] = 'Cloudy'\n        elif len(stdin_copy) > 0 and stdin_copy[0] == 'Cloudy':\n            stdin_copy[0] = 'Rainy'\n        elif len(stdin_copy) > 0 and stdin_copy[0] == 'Rainy':\n            stdin_copy[0] = 'Sunny'\n        return stdin_copy[0]\n\nassert Solution().predict_the_weather('Sunny') == 'Cloudy'\nassert Solution().predict_the_weather('Rainy') == 'Rainy'\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Rainy'\nassert solution('Rainy') == 'Sunny'\n\nprint('Success')\n\n------------"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Sunny'\nassert solution('Rainy') == 'Rainy'"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Rainy') == 'Rainy'\n\nprint(solution(stdin))"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('Sunny') == 'Cloudy'\nassert solution('Cloudy') == 'Sunny'\nassert solution('Rainy') == 'Sunny'\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\nassert solution(\"Rainy\") == \"Sunny\"\nassert solution(\"Cloudy\") == \"Rainy\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\n\"\"\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Sunny\") == \"Cloudy\"\n\"\"\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '7 17 120'\n) == '119'\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n\nimport sys"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 17 120\") == '119'"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('7 17 120') == '119'\n\"\"\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 17 120') == '119'\n\"\"\"\n\nn, a, b = map(int, input().split())\n\nt = n // a\nb_2 = b * 2"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 17 120\\n\") == \"119\"\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 17 120') == '119'\nprint(solution(input()))\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 17 120\") == \"119\""
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 17 120\") == \"119\"\n\"\"\""
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n') == '3800'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\\n\") == \"3800\"\n\"\"\""
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1\\n') == '1900'\n\"\"\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 1') == '3800'\nassert solution('2 2') == '0'\nassert solution('3 3') == '1000'\nassert solution('4 4') == '0'\nassert solution('10 10') == '0'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\"\n\nfrom math import factorial as fac"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''1 1''') == '3800'\n\"\"\"\n\n\nfrom decimal import Decimal\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1\\n') == '3800'\n\"\"\"\nimport sys\n\nfrom typing import List\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1\") == \"1900\"\nassert solution(\"100 1\") == \"100\"\n\"\"\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"3800\"\n\"\"\"\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n') == '3800'\n\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('atcoderregularcontest') == 'b'\nassert solution('abc') == None\nassert solution('abcde') == None\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('atcoderregularcontest') == 'b'\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('atcoderregularcontest') == 'b'\n\"\"\"\n\nimport collections\n\nS = stdin\n\ncount = collections.Counter(S)\n\nfor i in 'abcdefghijklmnopqrstuvwxyz':\n    if i not in count or count[i] == 0:\n        print(i)\n        exit(0)\n\nprint(None)"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\nassert solution(\"\") == None\nassert solution(\"a\") == None\nassert solution(\"aaa\") == None\nassert solution(\"ab\") == None\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\ns = stdin.readline().strip()\n\nfor i in \"abcdefghijklmnopqrstuvwxyz\":\n    if i not in s:\n        print(i)\n        break\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"atcoderregularcontest\") == \"b\"\n\"\"\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\n\"\"\""
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\n\"\"\"\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4 4 3') == '4\\n3\\n3\\n4'\n\"\"\""
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 4 4 3\") == \"4\\n3\\n3\\n4\"\n\"\"\"\n\n\"\"\"\nWe define the middle of the array arr as follows:\n\nIf len(arr) is odd, then arr[len(arr) // 2] is the middle element.\nIf len(arr) is even, then arr[len(arr) // 2 - 1] is the middle element.\n\"\"\""
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n4\n2 4 4 3\n''') == '''\n4\n3\n3\n4\n'''\n\nassert solution('''\n4\n2 4 4 3\n''') == '''\n4\n3\n3\n4\n'''\n\nassert solution('''\n5\n10 9 7 7 8\n''') == '''\n8\n7\n7\n7\n8\n'''\n\nassert solution('''\n4\n2 4 4 3\n''') == '''\n4\n3\n3\n4\n'''\n\nassert solution('''\n5\n10 9 7 7 8\n''') == '''\n8\n7\n7\n7\n8\n'''"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2 4 4 3') == '4\\n3\\n3\\n4'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1 2 3 4\") == \"1\"\nassert solution(\"5 1 2 3 4 5\") == \"4\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 1') == '1'\nassert solution('4\\n1 2 1 3') == '3'\nassert solution('1\\n2') == '0'\nassert solution('10\\n1 2 3 4 5 6 7 8 9 10') == '50'\nassert solution('5\\n1 2 3 4 5') == '10'\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n3 1 2 4 2 1') == 2\n\"\"\""
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1 2 3 4 5\") == \"2\"\nassert solution(\"4 1 2 3 4\") == \"2\"\nassert solution(\"4 1 2 3\") == \"1\"\nassert solution(\"3 1 2\") == \"0\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n1 2 3\\n\") == \"1\\n1\\n\"\n\"\"\"\nfrom math import gcd\nfrom typing import List"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 1 2 4 2 1\\n') == '2'\nassert solution('6 1 2 3 3 1\\n') == '1'\n\nprint('Hooray!')\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1 2 3 2 1\\n\") == 2\nassert solution(\"5 1 3 2 3 2\\n\") == 3\nassert solution(\"4 5 4 5 2 1 1 1 1 2 2 3 3 1 1 1 1 1 1 1 2\\n\") == 6\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2\\n3\") == \"1\\n2\\n3\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\") == \"1\\n1\\n1\\n1\\n1\\n1\"\nassert solution(\"1\\n1\\n1\\n1\") == \"1\\n1\\n1\\n1\"\nassert solution(\"1\\n2\\n3\") == \"1\\n2\\n3\"\nassert solution(\"1\\n3\\n1\") == \"1\\n3\\n1\"\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2\\n2 2 3 3\") == \"4\"\n\"\"\"\n\nfrom math import sqrt"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1 2 4 2 1\\n') == 2\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1 2\\n5\\n10\") == \"8\"\nassert solution(\"1 1 2\\n5\\n10\") == \"7\"\n\"\"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n7 1\\n2\\n5\\n10\") == 8\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import ceil\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == '0'\n\"\"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\n\"\"\"\n\nn, d, x = map(int, input().split())\na = list(map(int, input().split()))\n\nsum = 0\nfor i in range(len(a)):\n    sum += a[i]\n\nprint(sum - x)\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n7 1\\n2\\n5\\n10\") == '8'\n\"\"\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n7 1\\n2\\n5\\n10\") == \"8\"\n\"\"\"\n\nfrom typing import List\n\nn_count: int = int(stdin.readline())\nd_count: int = int(stdin.readline())\npieces_list: List[int] = list(map(int, stdin.readline().split()))\nchocolate_pieces: int = 0\n\nfor piece in pieces_list:\n    chocolate_pieces += piece\n    chocolate_pieces -= piece - 1\n\nprint(chocolate_pieces)\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 7 1 2 5\") == \"8\"\nassert solution(\"3 5 2 5\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 1\\n2\\n3\\n6\\n5\\n4\\n9\\n8\") == \"8\"\nprint('Passed')\n\"\"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 7 1 2 5\\n2 5 10\") == \"8\"\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 7 1 2 5\\n\") == \"8\"\nassert solution(\"3 7 1 2 5\\n\") == \"8\"\nassert solution(\"3 7 1 2 5\\n\") == \"8\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\nassert solution(\"3\\n2\\n2\\n100\") == \"1\"\nassert solution(\"1\\n2\\n3\\n100\") == \"0\"\nassert solution(\"1\\n2\\n3\\n50\") == \"2\"\n\"\"\""
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n2\\n2\\n100\\n\") == \"2\"\nassert solution(\"3\\n2\\n1\\n1\\n\") == \"0\"\nassert solution(\"1\\n1\\n1\\n1\\n\") == \"0\"\nassert solution(\"2\\n2\\n1\\n1\\n\") == \"2\"\nassert solution(\"2\\n0\\n2\\n2\\n\") == \"0\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 2 100\") == \"2\"\nassert solution(\"2 2 2 100\") == \"2\"\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\\n2\\n2\\n100\"\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2\n2\n2\n100''') == '2'\n\nassert solution('''2\n2\n2\n50''') == '0'\n\nassert solution('''2\n0\n0\n100''') == '0'\n\nassert solution('''1\n1\n1\n50''') == '1'\n\nassert solution('''1\n1\n1\n100''') == '0'"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n2\\n2\\n100\") == \"2\"\n\"\"\"\nimport math\nfrom typing import List\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2 2 100\") == \"2\"\n\n\"\"\"\n\nimport sys\nimport unittest\n\nsys.setrecursionlimit(5000)\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 100\\n\") == \"2\"\nassert solution(\"0 1 0 100\\n\") == \"2\"\nassert solution(\"1 1 1 10000\\n\") == \"0\"\n\"\"\"\n\nimport sys\n\nA, B, C, X = [int(i) for i in sys.stdin.readline().strip().split()]\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_stdin) == test_stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(5 3 2) == \"Yes\"\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"1 3 4\") == \"No\"\nassert solution(\"1 2 3\") == \"No\"\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"1 3 3\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 3 2') == 'Yes'\n\"\"\"\nimport sys\n\nA, B, C = map(int, sys.stdin.readline().split())\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3 2') == 'Yes'\nassert solution('0 1 2') == 'No'\nassert solution('1 2 3') == 'Yes'\nassert solution('0 3 2') == 'No'\n\"\"\"\nimport sys"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\nassert solution(\"5 5 5\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 2\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\nprint(\"Teste unit\u00e1rio passou!\")\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"\n\"\"\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == \"9\"\n\"\"\"\n\nn, x = map(int, input().split())\n\nm = []\nfor i in range(n):\n    m.append(int(input()))\n\nm.sort()\n\ncur_sum = 0\n\nfor i in m:\n    cur_sum += i\n    if cur_sum > x:\n        print(i - 1)\n        break\n    elif cur_sum == x:\n        print(i)\n        break\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\n\"\"\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\") == '9'\n\"\"\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1000\") == \"9\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1000\") == \"9\"\n\"\"\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1000\\n120\\n100\\n140') == '9'\n\nimport sys\nprint(sys.argv)\n\nfrom io import StringIO\nfrom unittest import main, TestCase\n\nclass TestTemplate(TestCase):\n    def execute(self, stdin: str, expected_out: str) -> str:\n        stdout, stderr = StringIO(), StringIO()\n        expected_out = StringIO(expected_out)\n        actual_out = StringIO()\n        exit_code = 0\n        try:\n            sys.stdin = StringIO(stdin)\n            sys.stdout = actual_out\n            sys.stderr = stderr\n            main(stdout=actual_out)\n            self.assertFalse(stderr.getvalue())\n        except SystemExit as e:\n            exit_code = e.args[0]\n        finally:\n            sys.stdin = sys.__stdin__\n            sys.stdout = sys.__stdout__\n            sys.stderr = sys.__stderr__\n        return exit_code, actual_out.getvalue(), stderr.getvalue(), expected_out.getvalue()\n\n    def test_01(self):\n        exit_code, actual, stderr, expected = self.execute(stdin='3 1000\\n120\\n100\\n140', expected_out='9')\n        self.assertEqual(exit_code, 0)\n        self.assertEqual(actual, '9')\n        self.assertEqual(stderr, '')\n        self."
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3 1000\n120\n100\n140''') == '9'\nassert solution('''2 1000\n120\n130''') == '0'\nassert solution('''3 1000\n120\n100\n120\n''') == '3'\nassert solution('''3 1000\n120\n140\n100\n120\n''') == '3'\nassert solution('''2 1000\n120\n100\n''') == '0'\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1000\\n120\\n100\\n140\\n\") == \"9\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\napple\\norange') == 2\nassert solution('3\\napple\\napple\\napple') == 1\n'''\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('one fish two fish red fish blue fish') =='red fish'\nassert solution('one fish two fish red fish blue fish\\n') =='red fish'\n\n'''\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\napple\\norange\\nanother') == 2\n'''"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"apple\\napple\\norange\\n\") == \"2\\n\"\n\n\"\"\""
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('apple') == 'apple'\nassert solution('apple\\nbanana\\napple') == 'apple'\n\"\"\""
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1\\n2') == '1'\nassert solution('3\\n1\\na\\na\\na') == '3'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nlst = []\n\nfor _ in range(N):\n    lst.append(sys.stdin.readline())\n\nlst.sort()\n\ns = set()\n\nfor i in lst:\n    s.add(i)\n\nprint(len(s))\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"apple\\napple\\norange\\napple\") == \"2\"\n\"\"\""
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\napple\\n:') == 2\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\napple\\norange') == '2'\nassert solution('5\\napple\\napple\\napple\\napple\\norange') == '5'\nassert solution('4\\napple\\napple\\napple\\napple\\napple') == '4'\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1\\napple') == 'apple'\nassert solution('1\\napple\\n1') == 'apple'\nassert solution('1\\napple\\n1\\norange') == 'apple'\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == \"2 2\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"4\\n2100 2500 2700 2700\"\n) == \"2 2\"\n\n\"\"\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2100 2500 2700 2700\") == \"2 2\"\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 2 3 4') == '3 1'\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(solution_test_cases[0]) == solution_test_cases[1]\n\n\"\"\"\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2100 2500 2700 2700\") == \"2 2\"\n\"\"\""
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2100 2500 2700 2700\") == '2 2'\nprint(solution(\"4\\n2100 2500 2700 2700\"))\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2100 2500 2700 2700') == '2 2'\nprint(solution(stdin))\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"2 2\"\nassert solution(\"4\\n1 2 3 4\") == \"3 3\"\nassert solution(\"6\\n1 2 3 4 5 6\") == \"4 4\"\n\"\"\"\n\nimport numpy as np\n\nN = int(input())\n\nratings = np.array(list(map(int, input().split()))).reshape(N, -1)\n\nres = np.count_nonzero(ratings >= 2800)\n\nprint(str(res) + \" \" + str(res))\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2100 2500 2700 2700') == '2 2'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('oxo') == 900\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"oxo\") == 900\nassert solution(\"xo\") == 700\nassert solution(\"xox\") == 900\nassert solution(\"xxo\") == 700\nassert solution(\"oox\") == 700\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"oxo\") == 900\nassert solution(\"xoo\") == 880\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('o') == '100'\nassert solution('ox') == '200'\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\""
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"oxo\") == 900\nassert solution(\"xxo\") == 800\nassert solution(\"ooo\") == 1000\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"oxo\") == 900\n\"\"\"\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"oxo\") == 900\nassert solution(\"oox\") == 1000\nassert solution(\"xox\") == 700\n\n\"\"\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'H'\nassert solution('D D') == 'D'\n\nprint('All tests passed.')\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('H H') == 'H'\nassert solution('D D') == 'D'\n\n'''"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('H H') == 'H'\nassert solution('D D') == 'D'\nassert solution('H D') == 'D'\nassert solution('D H') == 'H'\n\"\"\"\nimport re\n\nfrom typing import Pattern, Match\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"D D\") == \"D\"\nassert solution(\"H D\") == \"D\"\nassert solution(\"D H\") == \"H\"\n\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"H H\") == \"H\"\n\"\"\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"H H\") == \"H\"\nassert solution(\"H D\") == \"D\"\nassert solution(\"D H\") == \"H\"\nassert solution(\"D D\") == \"D\"\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"HH\") == \"H\"\nassert solution(\"DH\") == \"D\"\n\n------\nThe solution is -"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'H'\nassert solution('D D') == 'D'\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('H H') == 'H'\nassert solution('H D') == 'D'\nassert solution('D H') == 'H'\nassert solution('D D') == 'D'\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('HH') == 'H'\nassert solution('HHD') == 'D'\nassert solution('DHD') == 'D'\nassert solution('DHH') == 'H'\nassert solution('HHH') == 'H'\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\"\"\""
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\""
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(a) == b\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n\"\"\"\n\nimport math\n\nstdin = input().split()\na, b, c, d = int(stdin[0]), int(stdin[1]), int(stdin[2]), int(stdin[3])\n\nprint(\"1+2+2+2=7\") if a + b + c + d == 7 else print(\"1+2+2-2=7\") if a + b + c - d == 7 else print(\"1-2+2+2=7\") if a - b + c + d == 7 else print(\"1-2+2-2=7\") if a - b + c - d == 7 else print(\"1+2-2+2=7\") if a + b - c + d == 7 else print(\"1+2-2-2=7\") if a + b - c - d == 7 else print(\"1-2-2+2=7\") if a - b - c + d == 7 else print(\"1-2-2-2=7\") if a - b - c - d == 7 else print(\"1+2+2+2+2=7\") if a + b + c + d + 2 == 7 else print(\"1+2+2+2-2=7\") if a + b + c + d - 2 == 7 else print(\"1+2+2+2+2=7\") if a + b + c + d + 2 == 7 else print(\"1+2+2+2-2=7\") if a + b + c + d - 2 == 7 else print(\"1+2+2+2-2=7\") if a + b + c + d - 2 == 7 else print(\"1+2+2+2-2=7\") if a + b + c + d - 2 == 7 else print(\"1+2+2+2-2=7\") if a + b + c + d - 2 == 7 else print(\"1+2+2+2-2=7\") if a + b + c + d - 2 == 7 else print(\"1+2+2+2-2=7\") if a + b + c + d - 2 == 7 else print(\"1+2+2+2-2=7\") if a + b + c + d - 2 == 7 else print(\"1+2+2+2-2=7\") if a + b + c + d - 2 == 7 else print(\"1+2+2+2-2=7\") if a + b + c + d - 2 == 7 else print(\"1+2+2+2-2=7\") if a + b + c + d - 2 == 7 else print(\"1+2+2+2-2=7\")\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n\n\"\"\""
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == '1+2+2+2=7'\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\n\n----\nSOLUTION:\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1222\") == \"1+2+2+2=7\"\nassert solution(\"12345\") == \"1-2+3-4+5=7\"\nassert solution(\"23456\") == \"2-3+4-5+6=7\"\nassert solution(\"6543\") == \"6+5-4+3=7\"\nassert solution(\"7734\") == \"7-7+3-4=7\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n\"\"\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1222') == '1+2+2+2=7'\n\n\"\"\""
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n\n################################################################\n\"\"\"\n---SOLUTION---\n\nMy solution would be to create a dictionary of the form {member_id: [member_1, member_2]}\nwhere the members 1, 2, 3 etc are the immediate subordinates of the member with ID member_id.\nThen we just iterate through the list and add the number of subordinates for each member to a list\nand return the list at the end.\n\nBut it is probably better to go through the list of IDs and keep track of who their immediate subordinates are,\nas we iterate through the list.\n\nOnce we have that information, we can simply iterate through the list and check who their immediate subordinates are.\nTo do this efficiently, we can maintain a set of IDs of subordinates.\n\n\"\"\"\n################################################################"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 2 2\") == \"2 2 0 0\""
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\nassert solution(\"3\\n1 2 3\") == \"0\\n0\\n0\"\nassert solution(\"2\\n1 1\") == \"1\\n0\"\n\"\"\"\n\n\nclass Node(object):\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n        self.subordinates = 0\n\nclass LinkedList(object):\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def add(self, value):\n        new_node = Node(value)\n        if self.head is None:\n            self.head = new_node\n            self.tail = new_node\n        else:\n            self.tail.next = new_node\n            self.tail = new_node\n\n    def __str__(self):\n        if self.head is None:\n            return \"None\"\n\n        current_node = self.head\n        result = \"\"\n        while current_node:\n            result += str(current_node.value) + \" \"\n            current_node = current_node.next\n        return result\n\n    def get_subordinates(self):\n        if self.head is None:\n            return \"None\"\n        current_node = self.head\n        while current_node:\n            current_node.subordinates = 0\n            current_node = current_node.next\n\n        current_node = self.head\n        while current_node:\n            if current_node.subordinates > 0:\n                result += str(current_node.value) + \" \"\n            current_node = current_node.next\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 1 2 2\") == \"2\\n2\\n0\\n0\\n0\\n\"\nassert solution(\"7\\n1 1 2 2 3 3 4\") == \"4\\n3\\n2\\n1\\n0\\n0\\n0\\n\"\n\"\"\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 1 2 2') == '2\\n2\\n0\\n0\\n0'\nassert solution('5\\n1 1 2 2') == '2\\n2\\n0\\n0\\n0'\n\n------------------"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_data) == test_solution\n\"\"\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"5\\n1 1 2 2\"\n) == \"2\\n2\\n0\\n0\\n0\"\n\nassert solution(\n    \"5\\n3 5 2 2\"\n) == \"0\\n0\\n0\\n0\\n0\"\n\nassert solution(\n    \"5\\n1 1 1 2 2\"\n) == \"2\\n0\\n0\\n0\\n0\"\n\nassert solution(\n    \"5\\n5 1 2 2\"\n) == \"0\\n0\\n0\\n0\\n0\"\n\nassert solution(\n    \"5\\n5 1 2 2\"\n) == \"0\\n0\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1 2 2\") == \"2 2 0 0 0\"\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6\") == \"3\"\n\"\"\""
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6\\n') == '3'\n\"\"\""
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6\\n') == '3'\nassert solution('8\\n') == '5'\n\"\"\"\n\nfrom collections import deque\nfrom typing import Callable\n\nX = int(input())\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n6\\n1') == '4'\n\"\"\""
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\") == \"3\"\n\"\"\"\n\nX = int(input())\n\nprint(X - 2)\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3\\n1\\n2') == '1'\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6') == '3'\n\n------Problem------\nIn the code below we've created a parent class called Kangaroo, and a child class called Denim that both inherit from Kangaroo.\nThe child class overrides the behavior of the parent class.\nThe child class doesn't have an init method, but instead has an init method of the superclass,\nwhere the child's color is assigned based on the color of the superclass, and the child's name is assigned based on the name of the superclass.\nBoth classes have the jump method, and it overrides the superclass's method.\nThe child class overrides the jump method so that it prints the child's name if the child's color is blue, or the child's color is red.\nGiven the input data,\nwhat is the earliest possible time that the kangaroo can jump to the rightmost position?\n\n------Solution------\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(sys.stdin.readline())) == str(sys.stdin.readline())\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\") == \"3\"\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''6''') == '3'\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1') == 'No'\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1118\") == \"Yes\"\nassert solution(\"1119\") == \"No\"\nassert solution(\"1112\") == \"No\"\nassert solution(\"1111\") == \"Yes\"\nassert solution(\"111222\") == \"No\"\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1118\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1118\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1114') == 'No'\n\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(1118)) == 'Yes'\nassert solution(str(1119)) == 'No'\nassert solution(str(1111)) == 'Yes'\nassert solution(str(1100)) == 'No'\nassert solution(str(1101)) == 'Yes'\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('4321') == 'No'\nassert solution('1111') == 'Yes'"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1118') == \"Yes\"\nassert solution('2222') == \"No\"\n\"\"\""
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1118') == 'Yes'\nassert solution('1119') == 'No'\nassert solution('1234') == 'No'\nassert solution('2222') == 'Yes'\nassert solution('1223') == 'Yes'\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1118\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 5\\n2 4\\n3 6\") == 3\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == \"3\"\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 5\\n2 4\\n3 6\") == \"3\"\nprint(solution(\"3\\n1 3\\n1 3\\n2 4\"))\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 5\\n2 4\\n3 6\") == 3\nassert solution(\"2 4\\n1 5\\n3 6\") == 3\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1000000)"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n5\n5\n5\n5\n5\n5\n\"\"\"\n) == \"3\"\nprint('Test pass.')"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5 6\\n1 2 3\\n2 3 4') == 3\nassert solution('4 3 6\\n1 2 3\\n2 3 4') == 1\n\n\"\"\""
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('2\\n1 5\\n2 4\\n3 6\\n') == '3'"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n2\n1 5\n2 4\n3 6\n''') == '3'\n\"\"\"\n\nn = int(input())\nupper = list(map(int, input().split(' ')))\nmiddle = list(map(int, input().split(' ')))\nlower = list(map(int, input().split(' ')))\nupper.sort()\nmiddle.sort()\nlower.sort()\ncount = 0"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 5\\n2 4\\n3 6') == '3'\n\"\"\"\n\nimport collections\n\nstdin = input()\nstdin = list(map(int, stdin.split('\\n')))\n\nn = stdin[0]\na = stdin[1:n+1]\nb = stdin[n+1:2*n+1]\nc = stdin[2*n+1:]\n\ncnt = collections.Counter(a)\ncnt.update(collections.Counter(b))\ncnt.update(collections.Counter(c))\n\nresult = 0\n\nfor k, v in cnt.items():\n    if v >= 3:\n        result += 1\n\nprint(result)"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_solution\nprint(solution(stdin))\n\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"F G\") == \">\"\nassert solution(\"D E\") == \"=\"\n\"\"\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('A B') == '<'\nassert solution('B A') == '>'\nassert solution('A A') == '='\nassert solution('B B') == '='\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"A A\") == \"=\"\nassert solution(\"B A\") == \">\"\n\n-----\n1. Create a list of \"A\" and \"B\" letters.\n2. Comparing the \"X\" and \"Y\" letters as hexadecimal numbers.\n3. Determine the larger hexadecimal number.\n4. Determine if the hexadecimal number is smaller.\n\n\"\"\"\n\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\nimport math\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('A B') == '<', 'Test failed'\nassert solution('B A') == '>', 'Test failed'\nassert solution('A =') == '=', 'Test failed'\nassert solution('A A') == '=', 'Test failed'\n\"\"\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"A B\") == \"<\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('A B') == '<'\n\nassert solution('A A') == '='\n\nassert solution('B B') == '='\n\nassert solution('F F') == '='\n\nassert solution('F E') == '>'"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('A B') == '<'\nassert solution('B A') == '>'\nassert solution('A A') == '='\n\"\"\"\n\na, b = stdin.split()\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"F B\") == \">\"\nassert solution(\"F F\") == \"=\"\nassert solution(\"A B\") == \"<\"\nassert solution(\"F B\") == \">\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"D E\") == \">\"\nassert solution(\"E F\") == \"=\"\nassert solution(\"A B\") == \"<\"\n\"\"\""
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A B\") == \"<\"\nassert solution(\"A B C\") == \">\"\nassert solution(\"A B C D\") == \"=\"\n\nprint(solution(stdin.readline()))"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\nassert solution(\"2 4\\n#.#.\\n..#.\\n\") == \"11\"\n\n\"\"\""
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    '3 5\\n.....\\n.#.#.\\n.....') == '11211'\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\"\n\"\"\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\n.....\\n.#.#.\\n.....') == '11211'\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5\\n.....\\n.#.#.\\n.....') == '11211'\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('.#.#.') == '11211'\nassert solution('.#..#.') == '11#2#1'\nassert solution('.....') == '11211'\nassert solution('....#') == '1111'\nassert solution('#.#.#') == '1#2#1'\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\") == \"11211\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\"\nassert solution(\"2 3\\n.#.\\n..\") == \"1#1\"\n\n\"\"\""
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\n.....\\n.#.#.\\n.....\") == \"11211\"\nassert solution(\"3 5\\n..##\\n#...\\n#.#.\") == \"11#2#1\"\nassert solution(\"3 5\\n#....\\n#...#\\n#.#.#\") == \"1#22#1\"\nassert solution(\"4 4\\n#....\\n#...#\\n#....\\n#...#\") == \"2#222\"\nassert solution(\"4 4\\n.#..#\\n..#.#\\n#..#.\\n#..#.\") == \"3#333\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\".#.#\") == \"11211\"\nassert solution(\"#####\") == \"1#2#1\"\nassert solution(\"...........\") == \"11211\"\nassert solution(\"#....#....#....#....#....#....#....#....#....#....#....#\") == \"1#2#1\"\nassert solution(\"#####\") == \"1#2#1\""
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\nassert solution(\"1 1 10^9\\n2 2 3\\n3 4 5\") == \"5\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1_000_000)\n\nN, M, K = map(int, input().split())\nA = [int(x) for x in input().split()]\nB = [int(x) for x in input().split()]\n\nA.sort()\nB.sort()\n\nA = set(A)\nB = set(B)\n\na_count = 0\nb_count = 0\n\ntime = 0\ni = 0\nj = 0"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 240\\n60 90 120\\n80 150 80 150') == '3'\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 240\\n60 90 120\\n80 150 80 150') == '3'\n\"\"\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1 2\\n1 2 3 4\\n5 6 7 8') == '4'\nassert solution('4 1 2\\n1 5\\n10 14\\n6 7 8') == '2'\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\nassert solution(\"2 4 240\\n4 4 10 10\") == \"2\"\n\"\"\"\n\n\"\"\"\n-----SOLUTION-----\n\"\"\"\n\nn, m, k = [int(x) for x in stdin.split()]\na = [int(x) for x in stdin.split()]\nb = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\nassert solution(\"4 4 250\\n50 100 150 80 150\\n60 50 120 110 110\\n120 50 60 60\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 240\\n60 90 120\\n80 150 80 150') == 3\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5 240\\n60 90 120\\n80 150 80 150') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 240\\n60 90 120\\n80 150 80 150\") == 3\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(A, B, C, X, Y) == Z\n\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n\nimport sys\n\na, b, c, x, y = map(int, sys.stdin.read().split())\n\nprint(min(x * a, b * x + c * y, (x + y) * a + (x * y) // 2 * b))\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\nassert solution('2000 1500 1600 3 2') == '0'\nassert solution('1500 2000 1600 3 4') == '6900'\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_solution1(self):\n        self.assertEqual(solution('1500 2000 1600 3 2'), '7900')\n    def test_solution2(self):\n        self.assertEqual(solution('2000 1500 1600 3 2'), '0')\n    def test_solution3(self):\n        self."
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\n\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == \"7900\"\n\"\"\"\n\na, b, c, x, y = map(int, input().split())\nprint(min(x * a, y * b, x * a + y * c, x * b + y * c, x * c + y * a))\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == '7900'\n\"\"\"\n\nimport sys\n\na, b, c, x, y = map(int, sys.stdin.read().strip().split())\n\nmin_cost = float('inf')\nfor x_pizza in range(x + 1):\n    for y_pizza in range(y + 1):\n        if x_pizza + y_pizza > x and x_pizza + y_pizza > y:\n            continue\n        cost = (x_pizza * a) + (y_pizza * b)\n        if cost < min_cost and x_pizza + y_pizza <= c:\n            min_cost = cost\n\nprint(min_cost)\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1500 2000 1600 3 2\") == '7900'\n\"\"\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1500 2000 1600 3 2') == '7900'\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n\") == 4\nassert solution(\"2\\n\") == 2\nassert solution(\"1\\n\") == 1\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n') == '4'\nassert solution('0\\n') == '0'\nassert solution('2\\n') == '6'\n\"\"\""
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n\") == \"1\"\nassert solution(\"3\\n\") == \"4\"\nassert solution(\"7\\n\") == \"0\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n\n----\n\nimport math"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n3') == '5'\n\"\"\""
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n') == 4\nassert solution('10\\n') == 3628800\n\"\"\"\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n\") == \"4\"\nassert solution(\"8\\n\") == \"7\"\n\n\"\"\""
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == 4\n\"\"\"\n\nimport math\n\nN = int(stdin.readline())"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == 4\n\"\"\""
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\n\n\"\"\""
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10') == '9'\n\"\"\""
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == '2'\nassert solution('1') == '1'\nassert solution('9') == '9'\nassert solution('11') == '9'\nassert solution('121') == '8'\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10\") == \"9\"\n\n------Test Case 1------\n    def solution(x: str) -> str:\n        max_p = 0\n        for i in range(2, int(x)):\n            for j in range(2, int(x)):\n                if i**j <= int(x):\n                    if j**i >= max_p:\n                        max_p = i**j\n        return str(max_p)\n    assert solution(\"10\") == \"9\"\n    assert solution(\"4\") == \"4\"\n    assert solution(\"8\") == \"8\"\n    assert solution(\"9\") == \"9\"\n    "
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"10\") == \"9\"\n\"\"\"\n\nimport math\n\nimport numpy as np\n\n\"\"\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"9\"\n\"\"\""
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"9\"\nprint(solution(\"10\"))\n\n\"\"\""
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\nprint(solution(stdin))\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('5') == '4'\nassert solution('10') == '9'\n\n\"\"\"\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == '9'\n\"\"\""
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6') == 3\nprint(solution(stdin))\n\n1\n\n10\n\n8\n\n8\n\n6\n\n>>> print(solution(stdin))\n3\n\n\"\"\"\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6') == '3'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == 3\nassert solution(\"5\\n10\\n9\\n8\\n6\") == 4\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\\n\") == \"3\"\n\n------------\n\na = int(input())\nb = list(map(int, input().split()))\ncount = 0\nfor i in range(a):\n    if b[i] % 2 == 0:\n        count += 1\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 10 8 8 6\\n') == '3'\nprint('Success')\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nd = [int(i) for i in sys.stdin.readline().split()]\n\nd.sort()\n\nlayer = 1\nfor i in range(1, N):\n    if d[i] > d[i-1]:\n        layer += 1\nprint(layer)\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\\n\") == \"3\"\nassert solution(\"1\\n10\\n\") == \"1\"\nassert solution(\"2\\n10\\n9\\n\") == \"1\"\nassert solution(\"1\\n3\\n\") == \"1\"\nassert solution(\"1\\n4\\n\") == \"1\"\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"\nprint(solution(stdin))\n\nSolution:\nIn this problem, we need to find the maximum number of layers of kagami mochi we can make.\nIn other words, we need to find the maximum length L of all kagami mochi we can make.\nSo we need to find the maximum L such that each mochi have at most that many layers.\n\nThe maximum L can be found using dynamic programming.\n\nWe will use an array L[0... n] to store the maximum L such that each mochi have at most that many layers.\nL[i] means the maximum L we can make using the i-th mochi (from bottom to top).\n\nSo L[i] will be the maximum L such that the first i mochi have at most that many layers.\nAlso, we can see that:\nL[i] = L[i-1] + 1 if d_i > d_(i-1)\nL[i] = L[i-1] if d_i == d_(i-1)\nSo we can find the L[i] using only L[i-1].\n\nWe can initialize the L array using 0s.\nThen, we can calculate the L[i] by:\nL[i] = 0 if i == 0\nL[i] = L[i-1] + 1 if d_i > d_(i-1)\nL[i] = L[i-1] if d_i == d_(i-1)\nSo, the maximum length L we can make is:\nL[n] = L[n-1] + 1 if d_n > d_(n-1)\nL[n] = L[n-1] if d_n == d_(n-1)\nSo we can write:\nL[n] = L[n-1] + 1 if d_n > d_(n-1)\nL[n] = L[n-1] if d_n == d_(n-1)\nSo, we can get the L[n] using only L[n-1].\n\nNow, we have the following recurrence relation:\nL[i] = L[i-1] + 1 if d_i > d_(i-1)\nL[i] = L[i-1] if d_i == d_(i-1)\nSo, we can get the L[n] using only L[n-1].\n\nTo get the L[n] using only L[n-1], we need to calculate L[n-1] using only L[n-2], L[n-3] and so on.\nSo, we can get the L[n] using the L[n-1] by:\nL[n] = L[n-1] + 1 if d_n > d_(n-1)\nL[n] = L[n-1] if d_n == d_(n-1)\n\nAnd now we have the following recurrence relation:\nL[n] = L[n-1] + 1 if d_n > d_(n-1)\nL[n] = L[n-1] if d_n == d_(n-1)\nSo, we can get the L[n] using only L[n-1].\n\nNow, the L[n] means the maximum length of a kagami mochi we can make using only the first n mochi.\nSo, we need to find the L[n] using only L[n-1].\n\nFinally, we need to find the maximum L[n] among all the possible L[n].\nFor example, if we have 4 mochi with diameters of 10, 8, 6, 2 centimeters from bottom to top in this order,\n\nL[0] = 0\nL[1] = 0\nL[2] = 0\nL[3] = 0\n\nSo, we can get the L[3] using only L[2] and L[1].\nSo, the maximum L[n] among all the possible L[n] is:\nL[3] = 0\nL[4] = 0\nL[5] = 0\nL[6] = 0\nL[7] = 1\nL[8] = 1\nL[9] = 1\nL[10] = 1\n\nNow, the L[3] means the maximum L we can make using the first 3 mochi.\nSo, we need to find the L[3] using only L[2] and L[1].\nSo, the maximum L[3] among all the possible L[3] is:\nL[3] = 0\n\nAnd so, the maximum L we can make is:\nL[3] = 0\n\n-----TEST CASES-----\nInput:\n4\n10\n8\n8\n6\n\nOutput:\n3\n\nInput:\n2\n10\n8\n\nOutput:\n1\n\nInput:\n2\n10\n8\n\nOutput:\n1\n\nInput:\n1\n10\n\nOutput:\n0\n\nInput:\n1\n10\n\nOutput:\n1\n\nInput:\n1\n10\n\nOutput:\n1\n\nInput:\n1\n10\n\nOutput:\n1\n\nInput:\n2\n10\n8\n\nOutput:\n1\n\nInput:\n5\n10\n8\n8\n6\n\nOutput:\n2\n\nInput:\n1\n8\n\nOutput:\n0\n\"\"\""
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n10\\n8\\n8\\n6\\n') == '3'\n\"\"\"\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\") == \"3\"\n\"\"\""
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n10\\n8\\n8\\n6\\n\") == 3\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\"\n\nimport os\nimport sys\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\"\"\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('QWERTYASDFZXCV') == '5'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('QWERTYASDFZXCV') == 'ASDFZ'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"QWERTYASDFZXCV\") == \"5\"\n\"\"\"\n\n\"\"\"\nThe provided code stub will read in a dictionary containing key/value pairs of name:[marks] for a list of students. \nPrint the average of the marks array for the student name provided, showing 2 places after the decimal.\n\nSample Input:\n\n3\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\nSample Output:\n\n56.00\n\"\"\""
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 8 12 40\") == \"2\"\n\"\"\""
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 12 40\\n\") == \"2\"\nassert solution(\"8 12 12\\n\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str([8, 12, 40])) == 2\n\"\"\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 8 12 40\") == \"2\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 5 6') == '1'\nassert solution('4\\n5 8 10') == '1'\nassert solution('6\\n8 10 4 2 3 6') == '0'\n\"\"\""
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n\n---\n>>> 598\n'''\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n\"\"\""
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 8 12 40') == '2'\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n8 12 40\") == \"2\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 12 40\\n\") == \"2\"\nprint(\"Tests passed\")\n\n\"\"\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '6'\n\"\"\""
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"6\"\nprint(solution(\"4\"))\n\"\"\"\n\n\"\"\"\nSolution is very simple.\nLet's take example N = 4\n\nAfter first exercise Snuke's power is 1 and after second it's 2 and after third it's 6\n\nTo find Snuke's power we need to know number of times he is exercising\n\nSo we have to do:\n    1. Calculate Snuke's power with n = 1\n    2. Calculate Snuke's power with n = 2\n    3. Calculate Snuke's power with n = 3\n    4. Calculate Snuke's power with n = 4\n\nNote that n can be 1, 2, 3, 4\n\nAfter exercise Snuke's power gets multiplied by n\n\"\"\""
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n\") == \"6\"\nassert solution(\"6\\n\") == \"114\"\nassert solution(\"10\\n\") == \"55555555\"\nassert solution(\"15\\n\") == \"133333311\"\nassert solution(\"20\\n\") == \"1818181818\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 6\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"2\\n\"\n) == \"1\"\nassert solution(\n    \"2\\n\"\n) == \"2\"\nassert solution(\n    \"3\\n\"\n) == \"6\"\nassert solution(\n    \"10\\n\"\n) == \"10233445566778899101112131415161718192021222324252627282930313233343536\"\nassert solution(\n    \"100\\n\"\n) == \"10000000000000000000000000000000000000000000000000000000000000000\"\n\n\"\"\""
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n') == 6\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"6\"\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\n\nprint((N * (N + 1)) % 1000000007)\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == 6\n\"\"\"\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == 6\n\"\"\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == 6\nprint(solution(stdin.readline()))\n\n'''\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '6'\nassert solution('2') == '5'\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3') == '6'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('100') == '100'\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n\") == \"6\"\nassert solution(\"2\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n') == '6'\nassert solution('5\\n') == '8'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n\") == \"6\"\nassert solution(\"5\\n\") == \"10\"\n\"\"\""
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == 6\n\"\"\"\n\n\"\"\"\nhttps://atcoder.jp/contests/arc087/tasks/arc087_a\n\nN=int(stdin.readline())\nsum = 1\nfor i in range(1,N+1):\n    sum += i\nprint(sum)\n\n\"\"\"\n\n\"\"\"\nhttps://atcoder.jp/contests/arc087/tasks/arc087_b\n\nN=int(stdin.readline())\nsum = 1\nfor i in range(1,N+1):\n    if i % 2 == 0:\n        sum += i\nprint(sum)\n\n\"\"\"\n\n\"\"\"\nhttps://atcoder.jp/contests/arc087/tasks/arc087_c\n\nN=int(stdin.readline())\nsum = 1\nfor i in range(1,N+1):\n    sum += i\n    if i % 3 == 0:\n        sum += i\n    if i % 5 == 0:\n        sum += i\nprint(sum)\n\n\"\"\"\n\n\"\"\"\nhttps://atcoder.jp/contests/arc087/tasks/arc087_d\n\nN=int(stdin.readline())\nsum = 1\nfor i in range(1,N+1):\n    if i % 3 == 0:\n        sum += i\n    if i % 5 == 0:\n        sum += i\n    if i % 3 == 0 and i % 5 == 0:\n        sum += i\nprint(sum)\n\n\"\"\"\n\n\"\"\"\nhttps://atcoder.jp/contests/arc087/tasks/arc087_e\n\nN=int(stdin.readline())\nsum = 1\nfor i in range(1,N+1):\n    if i % 3 == 0:\n        sum += i\n    if i % 5 == 0:\n        sum += i\n    if i % 3 == 0 and i % 5 == 0:\n        sum += i\nprint(sum)\n\n\"\"\"\n\n\"\"\"\nhttps://atcoder.jp/contests/arc087/tasks/arc087_f\n\nN=int(stdin.readline())\nsum = 1\nfor i in range(1,N+1):\n    if i % 3 == 0:\n        sum += i\n    if i % 5 == 0:\n        sum += i\n    if i % 3 == 0 and i % 5 == 0:\n        sum += i\nprint(sum)\n\n\"\"\"\n\n\"\"\"\nhttps://atcoder.jp/contests/arc087/tasks/arc087_g\n\nN=int(stdin.readline())\nsum = 1\nfor i in range(1,N+1):\n    if i % 3 == 0:\n        sum += i\n    if i % 5 == 0:\n        sum += i\n    if i % 3 == 0 and i % 5 == 0:\n        sum += i\nprint(sum)\n\n\"\"\"\n\n\"\"\"\nhttps://atcoder.jp/contests/arc087/tasks/arc087_h\n\nN=int(stdin.readline())\nsum = 1\nfor i in range(1,N+1):\n    if i % 3 == 0:\n        sum += i\n    if i % 5 == 0:\n        sum += i\n    if i % 3 == 0 and i % 5 == 0:\n        sum += i\nprint(sum)\n\n\"\"\"\n\n\"\"\"\nhttps://atcoder.jp/contests/arc087/tasks/arc087_i\n\nN=int(stdin.readline())\nsum = 1\nfor i in range(1,N+1):\n    if i % 3 == 0:\n        sum += i\n    if i % 5 == 0:\n        sum += i\n    if i % 3 == 0 and i % 5 == 0:\n        sum += i\nprint(sum)\n\n\"\"\"\n\n\"\"\"\nhttps://atcoder.jp/contests/arc087/tasks/arc087_j\n\nN=int(stdin.readline())\nsum = 1\nfor i in range(1,N+1):\n    if i % 3 == 0:\n        sum += i\n    if i % 5 == 0:\n        sum += i\n    if i % 3 == 0 and i % 5 == 0:\n        sum += i\nprint(sum)\n\n\"\"\"\n\n\"\"\"\nhttps://atcoder.jp/contests/arc087/tasks/arc087_k\n\nN=int(stdin.readline())\nsum = 1\nfor i in range(1,N+1):\n    if i % 3 == 0:\n        sum += i\n    if i % 5 == 0:\n        sum += i\n    if i % 3 == 0 and i % 5 == 0:\n        sum += i\nprint(sum)\n\n\"\"\"\n\n\"\"\"\nhttps://atcoder.jp/contests/arc087/tasks/arc087_l\n\nN=int(stdin.readline())\nsum = 1\nfor i in range(1,N+1):\n    if i % 3 == 0:\n        sum += i\n    if i % 5 == 0:\n        sum += i\n    if i % 3 == 0 and i % 5 == 0:\n        sum += i\nprint(sum)\n\n\"\"\"\n\n\"\"\"\nhttps://atcoder.jp/contests/arc087/tasks/arc087_m\n\nN=int(stdin.readline())\nsum = 1\nfor i in range(1,N+1):\n    if i % 3 == 0:\n        sum += i\n    if i % 5 == 0:\n        sum += i\n    if i % 3 == 0 and i % 5 == 0:\n        sum += i\nprint(sum)\n\n\"\"\"\n\n\"\"\"\nhttps://atcoder.jp/contests/arc087/tasks/arc087_n\n\nN=int(stdin.readline())\nsum = 1\nfor i in range(1,N+1):\n    if i % 3 == 0:\n        sum += i\n    if i % 5 == 0:\n        sum += i\n    if i % 3 == 0 and i % 5 == 0:\n        sum += i\nprint(sum)\n\n\"\"\"\n\n\"\"\"\nhttps://atcoder.jp/contests/arc087/tasks/arc087_o\n\nN=int(stdin.readline())\nsum = 1\nfor i in range(1,N+1):\n    if i % 3 == 0:\n        sum += i\n    if i % 5 == 0:\n        sum += i\n    if i % 3 == 0 and i % 5 == 0:\n        sum += i\nprint(sum)\n\n\"\"\"\n\n\"\"\"\nhttps://atcoder.jp/contests/arc087/tasks/arc087_p\n\nN=int(stdin.readline())\nsum = 1\nfor i in range(1,N+1):\n    if i % 3 == 0:\n        sum += i\n    if i % 5 == 0:\n        sum += i\n    if i % 3 == 0 and i % 5 == 0:\n        sum += i\nprint(sum)\n\n\"\"\"\n\n\"\"\"\nhttps://atcoder.jp/contests/arc087/tasks/arc087_q\n\nN=int(stdin.readline())\nsum = 1\nfor i in range(1,N+1):\n    if i % 3 == 0:\n        sum += i\n    if i % 5 == 0:\n        sum += i\n    if i % 3 == 0 and i % 5 == 0:\n        sum += i\nprint(sum)\n\n\"\"\"\n\n\"\"\"\nhttps://atcoder.jp/contests/arc087/tasks/arc087_r\n\nN=int(stdin.readline())\nsum = 1\nfor i in range(1,N+1):\n    if i % 3 == 0:\n        sum"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == 6\n\"\"\"\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"6\"\nprint(solution(\"3\"))\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n\") == \"6\"\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\\n\") == 2\n\"\"\"\nimport sys\n\nN, *A = sys.stdin.readlines()\nprint(sum(A[::2]) - sum(A[1::2]))\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n3 1') == '2'\nassert solution('2\\n1 3') == '1'\n\"\"\"\n\n\"\"\"\nLet's assume N = 3, a_1 = 1, a_2 = 3, a_3 = 2, so Alice will take the card with a_1 = 1 and Bob will take the card with a_3 = 2.\n\nWe need to find the difference of their scores.\n\nNow Alice will take the card with a_2 = 3 and Bob will take the card with a_1 = 1.\n\nNow Alice will take the card with a_3 = 2 and Bob will take the card with a_2 = 3.\n\nIt's clear that Alice's score minus Bob's score is 2 - 3 = -1.\n\nIf N = 3, then for N cards we need to find the difference of the scores for N-1 cards. This means that the difference of the scores for N-1 cards is what we already have.\n\nIf N = 3, then the difference of the scores for N-2 cards is the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards, because we have one card less and one card less with the last difference.\n\nSo if N = 3, then the difference of the scores for N-2 cards is the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards, etc.\n\nSo for N-1 cards the difference of the scores for N-1 cards is the difference of the scores for N cards, and we have the formula:\n\ndifference of the scores for N-1 cards = N * (N - 1) * (N - 2) / 6 - difference of the scores for N cards\n\nSo for N-1 cards the difference of the scores for N-2 cards is the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards, etc.\n\nSo we need to find the difference of the scores for N-2 cards.\n\nIf N = 3, then the difference of the scores for N-2 cards is the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards, etc.\n\nSo for N-2 cards the difference of the scores for N-2 cards is the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards, etc.\n\nSo we need to find the difference of the scores for N-3 cards.\n\nIf N = 3, then the difference of the scores for N-3 cards is the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards, etc.\n\nSo for N-3 cards the difference of the scores for N-3 cards is the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards, etc.\n\nSo we need to find the difference of the scores for N-4 cards.\n\nIf N = 3, then the difference of the scores for N-4 cards is the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards, etc.\n\nSo for N-4 cards the difference of the scores for N-4 cards is the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards, etc.\n\nSo we need to find the difference of the scores for N-5 cards.\n\nIf N = 3, then the difference of the scores for N-5 cards is the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards, etc.\n\nSo for N-5 cards the difference of the scores for N-5 cards is the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards, etc.\n\nSo we need to find the difference of the scores for N-6 cards.\n\nIf N = 3, then the difference of the scores for N-6 cards is the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards, etc.\n\nSo for N-6 cards the difference of the scores for N-6 cards is the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards, etc.\n\nSo we need to find the difference of the scores for N-7 cards.\n\nIf N = 3, then the difference of the scores for N-7 cards is the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards, etc.\n\nSo for N-7 cards the difference of the scores for N-7 cards is the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards, etc.\n\nSo we need to find the difference of the scores for N-8 cards.\n\nIf N = 3, then the difference of the scores for N-8 cards is the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards, etc.\n\nSo for N-8 cards the difference of the scores for N-8 cards is the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards minus the difference of the scores for N-1 cards, etc.\n\nSo we need to find the difference of the scores for N-9 cards.\n\nIf N = 3, then the difference of"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1') == '2'\nassert solution('4 3') == '2'\nassert solution('4 6') == '0'\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n3 1\\n2 3\\n4 2\") == 3\nprint(solution(\"4 2\\n3 1\\n2 3\\n4 2\"))\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n3 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n3 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3 1\") == 2\n\"\"\""
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n3 1') == '2'\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\na = [int(sys.stdin.readline()) for _ in range(n)]\n\nprint(sum([2*i+1 for i in range(n) if a[i] == (n-1-i)//2]))"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n3 1\") == 2"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3 1\") == \"2\"\n\"\"\""
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\n-------------------------------"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 AC\\n2 WA\\n1 AC\\n2 WA\\n2 WA\") == '2 3'\n\"\"\"\n\nimport sys\nimport io"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1 1') == '1 1'\nassert solution('1 2') == '2 0'\n\"\"\""
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\"\"\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''\n2 5\n1 WA\n1 AC\n2 WA\n2 AC\n2 WA\n''') == '2 2'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\nassert solution(\"3 10\\n1 WA\\n1 AC\\n2 AC\\n3 WA\\n2 WA\\n1 AC\\n3 AC\") == \"2 3\"\nassert solution(\"3 10\\n1 AC\\n2 WA\\n3 WA\") == \"0 1\"\n\n\"\"\""
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\nassert solution(\"3 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\") == \"2 2\"\n\"\"\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA') == '2 2'\n\"\"\"\n\nfrom typing import List, Dict\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == \"2 2\"\n\nimport sys\nimport re\n\nlines = sys.stdin.readlines()\nN, M = map(int, re.split('\\n', lines[0]))\n\ncorrects = 0\npenalties = 0\n\nfor i in range(1, M + 1):\n    line = re.split('\\n', lines[i])[0]\n    problem, verdict = line.split(' ')\n    if verdict == \"AC\":\n        corrects += 1\n    else:\n        penalties += 1\nprint(corrects, penalties)\n\n\"\"\"\n<\u601d\u8003\u65b9\u91dd>\n\u300cAC\u3092\u898b\u3064\u3051\u305f\u3089WA\u306b\u306a\u308b\u307e\u3067\u89e3\u7b54\u3092\u6b8b\u3057\u3066\u3044\u304f\u300d\u306e\u89e3\u7b54\u3068\u540c\u3058\u3088\u3046\u306bAC\u304c\u898b\u3064\u304b\u3063\u305f\u3089\u89e3\u7b54\u3092\u6b8b\u3057\u3066\u3044\u304f\u3002\n\u305d\u3046\u3057\u3066penalties\u306b\u8a08\u7b97\u3059\u308b\u3002\n\n<\u66f8\u304d\u65b9>\ncorrects, penalties = 0, 0\nfor line in lines[1:]:\n    problem, verdict = line.split(' ')\n    if verdict == \"AC\":\n        corrects += 1\n    else:\n        penalties += 1\n\n<TEST>\n2 5\n1 WA\n1 AC\n2 WA\n2 AC\n2 WA\n\n2 2\n\"\"\"\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n1 WA\\n1 AC\\n2 WA\\n2 AC\\n2 WA\") == '2 2'\nassert solution(\"3 3\\n1 WA\\n1 AC\\n1 WA\") == '1 1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1\\n4 1 5') == '5'\n\"\"\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n1\\n2\\n\") == 3\nassert solution(\"2 1\\n3\\n4\\n\") == 4\n\"\"\"\n\nimport math\nimport sys\n\nsys.setrecursionlimit(2147483647)\nsys.stdin = open(\"Problem-11-input.txt\")\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 1 5\") == \"5\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3 1\n4 1 5''') == 5\n\"\"\"\n\n\"\"\"\n\u0412 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0435 \u043f\u043e\u043d\u044f\u0442\u043d\u043e, \u0447\u0442\u043e \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043e\u0431\u044b\u0442\u044c \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 (\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0442\u0430\u043a), \n\u0430 \u043f\u043e\u0442\u043e\u043c \u0435\u0441\u043b\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043a \u043d\u0435\u043c\u0443 \u043c\u0435\u0442\u043e\u0434 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0430, \u0442\u043e \u0443 \u043d\u0430\u0441 \u043d\u0430\u0447\u043d\u0435\u0442\u0441\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0434\u043e \n\u043f\u043e\u0431\u0435\u0434\u044b \u0441 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0430\u0442\u0430\u043a \u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0438 \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430.\n\n\u041f\u0440\u0438\u0432\u0435\u0434\u0451\u043c \u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f:\n\n\u0412\u0430\u043c \u0434\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u0435\u043b: 1, 2, 1, 3, 2, 5, 2, 8, 2, 4, 2. \n\u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0432\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0435\u0441\u0442\u044c \u043b\u0438 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0446\u0438\u0444\u0440\u0430 2 \u0441\u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438 \u0432 \u043d\u0435\u0439 \u0441\u0442\u043e\u0438\u0442 \u0446\u0438\u0444\u0440\u0430 2.\n\n\u0414\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0446\u0438\u043a\u043b while \u0438 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438.\n\n\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0447\u0438\u0442\u0430\u0442\u044c, \u0447\u0442\u043e \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438.\n\n\u041f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0430: \u043f\u043e\u0441\u0442\u0430\u0440\u0430\u0439\u0442\u0435\u0441\u044c \u0440\u0435\u0448\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u044b break\n\"\"\""
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 5\\n\") == \"5\"\n\"\"\"\n\nimport sys\n\nN, K = map(int, sys.stdin.readline().strip().split())\n\nh = list(map(int, sys.stdin.readline().strip().split()))\n\nh.sort()\n\ncount = 0\n\nfor i in range(N):\n    if K >= h[i] > 0:\n        K -= h[i]\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n4 1 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 1 5\\n') == '5'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n4 1 5\") == \"5\"\n\"\"\"\n\nimport sys\n\nfrom typing import List\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1\\n4 1 5\") == \"5\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 1\\n4 1 5\\n\") == \"5\"\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 10 2\\n\") == \"4\"\nassert solution(\"2 10 2\\n\") == \"16\"\n\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"1\\n10\\n2\\n\"\n) == '4'\nassert solution(\n\"1\\n100\\n2\\n\"\n) == '16'\nassert solution(\n\"1\\n10\\n2\\n\"\n) == '4'\nassert solution(\n\"2\\n100\\n2\\n\"\n) == '16'\n\"\"\"\n\nimport sys\n\n\"\"\"\nNaive approach:\n1. Figure out all possible starting positions and store them as an array\n2. For each starting position\n    - Figure out all possible ending positions and store them as an array\n    - For each ending position\n        - Figure out the distance between starting and ending position\n        - If the distance is less than the minimum distance, update the minimum distance\n3. Print the minimum distance\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 10 2\") == \"4\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n10\\n2\\n\") == '4'\n\"\"\"\n\nn = int(input())\nk = int(input())\nx = list(map(int, input().split()))\n\nprint(min(max(x)-min(x),k-min(x)) + sum(x))\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 10\\n2\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 10\\n1 2\\n1 3\\n1 4\\n2 1\\n2 3\\n2 4\\n3 1\\n3 2\\n3 4\\n4 1\\n4 2\\n4 3') == '6'\nassert solution('6 10\\n1 2\\n1 3\\n1 4\\n2 1\\n2 3\\n2 4\\n3 1\\n3 2\\n3 4\\n4 1\\n4 2\\n4 3') == '8'\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 10 2\") == \"4\"\n\"\"\""
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n10\\n2\\n\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n10\\n2\\n') == '4'\nassert solution('2\\n10\\n2\\n') == '16'\nassert solution('3\\n10\\n3\\n') == '18'\nassert solution('1\\n1\\n1\\n') == '0'\nassert solution('2\\n2\\n2\\n') == '0'\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 11\\n3\\n1 2 3 4\") == \"10\"\nassert solution(\"4 11\\n3\\n1 3 4 2\") == \"16\"\nassert solution(\"4 11\\n3\\n2 4 1 3\") == \"10\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n600\n300\n220\n420\n\"\"\"\n) == \"520\"\nassert solution(\n\"\"\"\n600\n300\n220\n420\n\"\"\"\n) == \"520\"\nassert solution(\n\"\"\"\n100\n100\n100\n100\n\"\"\"\n) == \"400\"\nassert solution(\n\"\"\"\n30\n10\n7\n2\n\"\"\"\n) == \"17\"\nassert solution(\n\"\"\"\n14\n16\n3\n17\n\"\"\"\n) == \"17\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\nassert solution(\"600 300 200 420\") == \"560\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('600 300 220 420') == '520'"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('600 300 220 420') == '520'\n\n\"\"\"\nfrom typing import List\n\nA, B, C, D = [int(i) for i in stdin.split()]\n\nTICKET = A\nUNLIMITED_TICKET = B\nBUS_FARE = C\nTRAIN_FARE = D"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"600 300 220 420\") == \"520\"\n\n-----Test Case-----\nYou planned a trip using trains and buses.\nThe train fare will be A yen (the currency of Japan) if you buy ordinary tickets along the way, and B yen if you buy an unlimited ticket.\nSimilarly, the bus fare will be C yen if you buy ordinary tickets along the way, and D yen if you buy an unlimited ticket.\nFind the minimum total fare when the optimal choices are made for trains and buses.\n\n-----Constraints-----\n - 1 \\leq A \\leq 1 000\n - 1 \\leq B \\leq 1 000\n - 1 \\leq C \\leq 1 000\n - 1 \\leq D \\leq 1 000\n - All input values are integers.\n\n-----Input-----\n600\n300\n220\n420\n\n-----Output-----\n520\n\nThe train fare will be 600 yen if you buy ordinary tickets, and 300 yen if you buy an unlimited ticket.\nThus, the optimal choice for trains is to buy an unlimited ticket for 300 yen.\nOn the other hand, the optimal choice for buses is to buy ordinary tickets for 220 yen.\nTherefore, the minimum total fare is 300 + 220 = 520 yen.\n\n-----Test Case-----\nYou planned a trip using trains and buses.\nThe train fare will be A yen (the currency of Japan) if you buy ordinary tickets along the way, and B yen if you buy an unlimited ticket.\nSimilarly, the bus fare will be C yen if you buy ordinary tickets along the way, and D yen if you buy an unlimited ticket.\nFind the minimum total fare when the optimal choices are made for trains and buses.\n\n-----Constraints-----\n - 1 \\leq A \\leq 1 000\n - 1 \\leq B \\leq 1 000\n - 1 \\leq C \\leq 1 000\n - 1 \\leq D \\leq 1 000\n - All input values are integers.\n\n-----Input-----\n600\n300\n220\n420\n\n-----Output-----\n520\n\nThe train fare will be 600 yen if you buy ordinary tickets, and 300 yen if you buy an unlimited ticket.\nThus, the optimal choice for trains is to buy an unlimited ticket for 300 yen.\nOn the other hand, the optimal choice for buses is to buy ordinary tickets for 220 yen.\nTherefore, the minimum total fare is 300 + 220 = 520 yen.\n\"\"\"\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('600 300 220 420') == '520'\nprint('test passed')\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('600 300 220 420') == '520'\nassert solution('20 20 20 20') == '0'\nassert solution('20 20 10 20') == '20'\nassert solution('20 20 20 10') == '10'\nassert solution('20 20 20 20') == '0'\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('600 300 220 420') == '520'\nassert solution('20 20 20 20') == '0'\n\"\"\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2 3\\n\") == \"0\"\nassert solution(\"4\\n4 1 1 0 1\\n\") == \"8\"\nassert solution(\"3\\n1 2 3\\n\") == \"0\"\nassert solution(\"5\\n4 0 1 2 3\\n\") == \"4\"\nassert solution(\"4\\n2 4 2 0 2\\n\") == \"0\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2 4 4 0 2') == '4'\n\"\"\""
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 4 4 0 2') == '4'\n\n\"\"\"\n\n\"\"\"\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438: \u0414\u0430\u043d \u0440\u044f\u0434 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432 \u043d\u0435\u043c \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b.\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u0440\u044f\u0434 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043e\u043a\u0430\u043d\u0447\u0438\u0432\u0430\u044e\u0449\u0438\u0439\u0441\u044f \u0447\u0438\u0441\u043b\u043e\u043c 0 (\u0441\u0430\u043c\u043e \u0447\u0438\u0441\u043b\u043e 0 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0435 \u0432\u0445\u043e\u0434\u0438\u0442).\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u2013 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u044d\u0442\u043e\u043c \u0440\u044f\u0434\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0412 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0441\u0442\u0435 \u0440\u044f\u0434 \u0437\u0430\u0434\u0430\u043d \u0432\u0435\u0440\u043d\u043e, \u043e\u0434\u043d\u0430\u043a\u043e \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0440\u044f\u0434\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b \u0447\u0438\u0441\u0435\u043b.\n\nSample Input 1:\n1\n2\n0\nSample Output 1:\n3\n\nSample Input 2:\n1\n2\n0\nSample Output 2:\n2\n\nSample Input 3:\n1\n2\n2\nSample Output 3:\n1\n\nSample Input 4:\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n0\nSample Output 4:\n11\n\n\"\"\"\n\nN = int(input().strip())\n\na = [int(input().strip()) for i in range(N)]\n\ncnt = len(set(a))\n\nprint(cnt)\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n2 4 4 0 2') == '4'\nassert solution('4\\n2 4 4 0 2') == '0'\nassert solution('5\\n1 3 6 0 2') == '0'\nassert solution('7\\n1 3 6 0 2') == '10'\n\"\"\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 2 1\\n') == '2\\n'\nassert solution('1 2 4 3\\n') == '4\\n'\nassert solution('4 4 4 4\\n') == '0\\n'\nassert solution('4 4 4 4\\n') == '0\\n'\n\"\"\"\n\nfrom collections import deque\n\nMOD = 10 ** 9 + 7\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 4 4 0 2') == '4'\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 2 1') == '1'\nassert solution('5 4 4 0 2') == '4'\nassert solution('5 4 3 2 1') == '0'\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import permutations"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 4 4 0 2\") == \"4\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\nA = list(map(int, sys.stdin.readline().strip().split(\" \")))\n\ns = [[a, A.index(a)] for a in A]\ns.sort(key=lambda x: x[0])\n\nm = [0] * n\nm[s[0][1]] = 1\n\nfor i in range(1, len(s)):\n    diff = s[i][0] - s[i - 1][0]\n    if diff == 0:\n        continue\n    elif diff < 0:\n        diff = abs(diff)\n        if m[s[i][1]] == 0:\n            m[s[i][1]] = diff\n        elif diff < m[s[i][1]]:\n            m[s[i][1]] = diff\n    elif diff > 0:\n        if m[s[i - 1][1]] == 0:\n            m[s[i - 1][1]] = diff\n        elif diff < m[s[i - 1][1]]:\n            m[s[i - 1][1]] = diff\n        else:\n            m[s[i - 1][1]] = diff\n\nans = 1\nfor i in m:\n    ans *= (i + 1)\n    ans %= 10**9 + 7\nprint(ans)\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n2 4 4 0 2\n''') == 4\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 2 5\") == \"84\"\nprint(solution(\"20 2 5\"))"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 2 5\") == \"84\"\n\nassert solution(\"20 2 5\") == \"84\"\n\nassert solution(\"20 2 5\") == \"84\"\n\nassert solution(\"20 2 5\") == \"84\"\n\nassert solution(\"20 2 5\") == \"84\""
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('N 2 5') == '84'\n\"\"\""
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"20 2 5\"\n) == \"84\"\n\"\"\""
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 2 5\") == \"84\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2') == ''\nassert solution('1 2 3') == ''\nassert solution('1 2 3 4') == ''\nassert solution('1 2 3 4 5') == ''\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('20 2 5\\n') == 84\nassert solution('20 5\\n') == 0\n\"\"\""
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20 2 5') == '84'\n\"\"\""
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"20 2 5\") == \"84\"\nprint(\"\ud14c\uc2a4\ud2b8 \ud1b5\uacfc!\")"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('20 2 5') == '84'\n\"\"\"\n\nN, A, B = list(map(int, stdin.split()))\n\nres = 0\nfor i in range(1, N + 1):\n    curr = i\n    while curr > 0:\n        digit = curr % 10\n        if A <= digit <= B:\n            res += i\n            break\n        curr //= 10\n    else:\n        continue\n    break\n\nprint(res)\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('100') == 'ABC100'\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(100)) == \"ABC100\"\n\"\"\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('101') == 'ABC100'\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\""
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100\") == \"ABC100\"\n\"\"\""
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"0\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"4 4\") == \"1\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 5') == '5'\nassert solution('2 4') == '1'\nassert solution('1 1') == '0'\n\"\"\"\n\na, b = map(int, stdin.split())\n\nstart = '2018-1-1'\nend = '2018-{}-{}'.format(a, b)\nprint(len([date for date in map(lambda date: date.split('-'), filter(lambda date: date[2].isdigit() and int(date[2]) == a, list(map(lambda date: date.split('-'), filter(lambda date: date[2].isdigit() and int(date[2]) <= b, list(map(lambda date: date.split('-'), list(filter(lambda date: date[0].isdigit() and int(date[0]) <= a, list(map(lambda date: date.split('-'), list(filter(lambda date: date[0].isdigit() and int(date[0]) >= 1, list(map(lambda date: date.split('-'), list(filter(lambda date: date.isdigit() and int(date) <= b, list(map(lambda date: date.split('-'), list(filter(lambda date: date.isdigit() and int(date) >= 1, list(map(lambda date: date.split('-'), list(map(lambda date: date, list(filter(lambda date: date.isdigit() and int(date) <= b, list(map(lambda date: date.split('-'), list(filter(lambda date: date.isdigit() and int(date) >= 1, list(map(lambda date: date.split('-'), list(map(lambda date: date, list(filter(lambda date: date.isdigit() and int(date) <= b, list(map(lambda date: date.split('-'), list(map(lambda date: date, list(filter(lambda date: date.isdigit() and int(date) >= 1, list(map(lambda date: date.split('-'), list(filter(lambda date: date.isdigit() and int(date) >= 1, list(map(lambda date: date.split('-'), list(map(lambda date: date, list(filter(lambda date: date.isdigit() and int(date) <= b, list(map(lambda date: date.split('-'), list(filter(lambda date: date.isdigit() and int(date) >= 1, list(map(lambda date: date.split('-'), list(map(lambda date: date, list(filter(lambda date: date.isdigit() and int(date) <= b, list(map(lambda date: date.split('-'), list(filter(lambda date: date.isdigit() and int(date) >= 1, list(map(lambda date: date.split('-'), list(map(lambda date: date, list(filter(lambda date: date.isdigit() and int(date) <= b, list(map(lambda date: date.split('-'), list(map(lambda date: date, list(filter(lambda date: date.isdigit() and int(date) >= 1, list(map(lambda date: date.split('-'), list(map(lambda date: date, list(filter(lambda date: date.isdigit() and int(date) <= b, list(map(lambda date: date.split('-'), list(map(lambda date: date, list(filter(lambda date: date.isdigit() and int(date) >= 1, list(map(lambda date: date.split('-'), list(filter(lambda date: date.isdigit() and int(date) <= b, list(map(lambda date: date.split('-'), list(map(lambda date: date, list(filter(lambda date: date.isdigit() and int(date) >= 1, list(map(lambda date: date.split('-'), list(filter(lambda date: date.isdigit() and int(date) <= b, list(map(lambda date: date.split('-'), list(filter(lambda date: date.isdigit() and int(date) >= 1, list(map(lambda date: date.split('-'), list(map(lambda date: date, list(filter(lambda date: date.isdigit() and int(date) <= b, list(map(lambda date: date.split('-'), list(map(lambda date: date, list(filter(lambda date: date.isdigit() and int(date) >= 1, list(map(lambda date: date.split('-'), list(map(lambda date: date, list(filter(lambda date: date.isdigit() and int(date) <= b, list(map(lambda date: date.split('-'), list(map(lambda date: date, list(filter(lambda date: date.isdigit() and int(date) >= 1, list(map(lambda date: date.split('-'), list(map(lambda date: date, list(filter(lambda date: date.isdigit() and int(date) <= b, list(map(lambda date: date.split('-'), list(filter(lambda date: date.isdigit() and int(date) >= 1, list(map(lambda date: date.split('-'), list(map(lambda date: date, list(filter(lambda date: date.isdigit() and int(date) <= b, list(map(lambda date: date.split('-'), list(map(lambda date: date, list(filter(lambda date: date.isdigit() and int(date) >= 1, list(map(lambda date: date.split('-'), list(map(lambda date: date, list(filter(lambda date: date.isdigit() and int(date) <= b, list(map(lambda date: date.split('-'), list(map(lambda date: date, list(filter(lambda date: date.isdigit() and int(date) >= 1, list(map(lambda date: date.split('-'), list(map(lambda date: date, list(filter(lambda date: date.isdigit() and int(date) <= b, list(map(lambda date: date.split('-'), list(filter(lambda date: date.isdigit() and int(date) >= 1, list(map(lambda date: date.split('-'), list(filter(lambda date: date.isdigit() and int(date) <= b, list(map(lambda date: date.split('-'), list(map(lambda date: date, list(filter(lambda date: date.isdigit() and int(date) >= 1, list(map(lambda date: date.split('-'), list(map(lambda date: date, list(filter(lambda date: date.isdigit() and int(date) <= b, list(map(lambda date: date.split('-'), list(map(lambda date: date, list(filter(lambda date: date.isdigit() and int(date) >= 1, list(map(lambda date: date.split('-'), list(filter(lambda date: date.isdigit() and int(date) <= b, list(map(lambda date: date.split('-'), list(map(lambda date: date, list(filter(lambda date: date.isdigit() and int(date) >= 1, list(map(lambda date: date.split('-'), list(map(lambda date: date, list(filter(lambda date: date.isdigit() and int(date)"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"12 31\") == \"365\"\nassert solution(\"1 12\") == \"0\"\nassert solution(\"2 11\") == \"0\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\") == \"5\"\nassert solution(\"1 1\") == \"366\"\nassert solution(\"1 2\") == \"0\"\n\"\"\"\n\nimport sys\n\na, b = map(int, sys.stdin.readline().split())\n\nprint((a-1)*30+(b-1))\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 5') == '5'\n\"\"\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 5\") == \"5\"\n\"\"\""
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5') == '5'\nassert solution('1 1') == '1'\nassert solution('2 2') == '0'\nassert solution('3 3') == '0'\nassert solution('4 4') == '0'\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n3\n1\n2\n''') == '2'\n\nassert solution('''5\n3\n1\n2\n3\n4\n''') == '-1'\n\nassert solution('''4\n1\n1\n2\n2\n''') == '3'\n\nassert solution('''3\n3\n3\n3\n''') == '0'\n\nassert solution('''4\n4\n4\n4\n''') == '0'"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1\\n2\") == '2'\nassert solution(\"4\\n1\\n2\\n1\") == '2'\nassert solution(\"4\\n1\\n2\\n2\") == '-1'\n\nimport sys"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1\\n2\\n\") == \"2\"\nassert solution(\"4\\n1\\n2\\n3\\n\") == \"0\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1\\n2\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n1\\n2\\n') == 2\nassert solution('5\\n1\\n3\\n2\\n4\\n') == 2\nassert solution('6\\n1\\n3\\n2\\n4\\n5\\n') == 2\nassert solution('7\\n1\\n3\\n2\\n4\\n5\\n6\\n') == 2\nassert solution('5\\n1\\n2\\n2\\n4\\n') == -1\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n3\n1\n2''') == '2'\nassert solution('''3\n3\n1\n2''') == '-1'\nassert solution('''4\n3\n1\n2''') == '3'\nassert solution('''10\n5\n4\n6\n7\n8\n9\n10\n1\n2''') == '5'\nassert solution('''10\n5\n4\n6\n7\n8\n9\n10\n1\n2''') == '6'\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1\\n2\") == \"2\"\n\"\"\""
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin=\"3\\n3\\n1\\n2\\n\") == '2'\nassert solution(stdin=\"4\\n1\\n2\\n1\\n2\\n\") == '1'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n2\\n\") == \"2\"\nassert solution(\"3\\n1\\n3\\n\") == \"-1\"\nassert solution(\"3\\n1\\n3\\n\") == \"2\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n3\\n1\\n2\") == \"2\"\nassert solution(\"5\\n1\\n3\\n3\\n4\\n3\\n4\\n5\") == \"1\"\nassert solution(\"10\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n5\\n6\\n7\\n8\\n9\\n10\\n5\\n6\\n7\\n8\\n9\\n10\\n6\\n7\\n8\\n9\\n10\\n7\\n8\\n9\\n10\\n8\\n9\\n10\\n9\\n10\\n10\\n10\\n10\") == \"1\"\n\"\"\""
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\nassert solution(\"3\\n6\\n2\\n6\\n8\\n7\\n5\\n7\\n8\\n8\\n5\") == \"2\"\n\nprint(solution(\"3\\n6\\n2\\n6\"))\nprint(solution(\"3\\n6\\n2\\n6\\n8\\n7\\n5\\n7\\n8\\n8\\n5\"))\n\n\"\"\""
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\""
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n6\\n2\\n6\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\"\n\nimport io\nimport sys\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n6\\n2\\n6\\n\") == \"1\"\n\"\"\""
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n6\\n2\\n6\") == \"1\"\nassert solution(\"3\\n6\\n2\\n6\\n7\\n10\") == \"2\"\n\"\"\"\n\nfrom collections import Counter\nimport math"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\\n2\\n6\") == \"1\"\nassert solution(\"6\\n1\\n3\\n6\\n2\\n5\") == \"4\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nN = int(stdin.readline())\n\nsheets = []\nfor _ in range(N):\n    number = int(stdin.readline())\n    if number in sheets:\n        sheets.remove(number)\n    else:\n        sheets.append(number)\n\nprint(len(sheets))\n\n\n\"\"\"\nSolution 2\n\"\"\"\n\nN = int(stdin.readline())\ncount = 0\n\nfor _ in range(N):\n    number = int(stdin.readline())\n    if number in sheets:\n        count += 1\n        sheets.remove(number)\n\nprint(count)\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == '1'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 2 2 5\") == 1\nassert solution
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 2\n1 1 2 2 5''') == '1'\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\\n\") == 1\n\"\"\""
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == '1'\n\"\"\"\n\nfrom collections import Counter\n\nclass Solution:\n    def __init__(self, stdin: str):\n        self.n, self.k = list(map(int, stdin.split(' ')))\n        self.A = list(map(int, stdin.split('\\n')[1:-1]))\n        self.counter = Counter(self.A)\n        self.sorted_A = sorted(self.A)\n        self.B = set(self.sorted_A)\n\n    def write_number(self) -> int:\n        a_count = Counter(self.A)\n        count = 0\n        for a in self.B:\n            count += a_count[a]\n            if count > self.k:\n                return count\n        return count\n\nassert Solution('5 2\\n1 1 2 2 5').write_number() == 1\nassert Solution('10 20\\n1 1 2 2 3 3 3 4 5 5 5 5 6').write_number() == 7\nassert Solution('10 20\\n1 1 2 2 3 3 3 4 5 5 5 5 6').write_number() == 7\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\n\"\"\"\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\n\nlst = list(map(int, sys.stdin.readline().split()))\n\nd = {}\nfor i in lst:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = []\nfor i in d:\n    if d[i] > k:\n        ans.append(i)"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n1 1 2 2 5\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == 1\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2\\n1 1 2 2 5') == '1'\n\"\"\""
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2 3 2\\n\") == \"3\"\n\"\"\""
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"\nassert solution(\"1\\n1 1 1\") == \"Yes\"\nassert solution(\"1\\n1\") == \"No\"\nassert solution(\"2\\n3 2 4\") == \"No\"\nassert solution(\"2\\n3 4 5\") == \"Yes\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1 2\\n6 1 1\\n\") == \"Yes\"\nassert solution(\"4 1 2\\n6 1 1\\n4 1 2\") == \"No\"\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom collections import Counter, defaultdict\nfrom itertools import permutations\nfrom math import factorial\nfrom typing import List, NamedTuple, Tuple\n\n\nclass Point(NamedTuple):\n    x: int\n    y: int\n\n    def __add__(self, other: Point) -> Point:\n        return Point(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other: Point) -> Point:\n        return Point(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other: int) -> Point:\n        return Point(self.x * other, self.y * other)\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 0 1 1 1\") == \"No\"\nassert solution(\"4\\n3 0 1 2\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\\n6 1 1\\n\") == 'Yes'\nassert solution(\"4 4 2\\n6 1 1\\n\") == 'No'"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\":\\n3 1 2\\n6 1 1\\n\") == \"Yes\"\n\"\"\"\n\nimport sys\nimport collections\nfrom typing import List, DefaultDict\n\nimport numpy as np\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\\n6 1 1\") == \"Yes\"\n\n\"\"\"\nimport numpy as np\nimport itertools"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3 1 2\\n6 1 1\\n\") == \"Yes\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n2\n3 1 2\n6 1 1\n\"\"\"\n) == \"Yes\"\nassert solution(\n\"\"\"\n1\n3 1 2\n\"\"\"\n) == \"No\"\nassert solution(\n\"\"\"\n2\n3 1 2\n6 1 1\n\"\"\"\n) == \"Yes\"\nassert solution(\n\"\"\"\n5\n3 1 2\n6 1 1\n4 0 4\n4 5 3\n3 0 0\n\"\"\"\n) == \"No\"\n\n\"\"\"\nimport sys\nimport os\nimport time\nimport random\nimport math\n\"\"\"\n\n\"\"\"\nclass Solution:\n    def __init__(self):\n        self.n = 1\n        self.N = 100\n        self.x = [1]\n        self.y = [2]\n        self.t = [0]\n        self.s = [0]\n        self.out = []\n        self.deer = []\n        self.turn = 0\n        self.deer_x = [1]\n        self.deer_y = [2]\n        self.turn_x = [0]\n        self.turn_y = [0]\n        self.deer_x_turn = 0\n        self.deer_y_turn = 0\n        self.turn_x_turn = 0\n        self.turn_y_turn = 0\n        self.deer_x_turn_2 = 0\n        self.deer_y_turn_2 = 0\n        self.turn_x_turn_2 = 0\n        self.turn_y_turn_2 = 0\n        self.deer_x_turn_3 = 0\n        self.deer_y_turn_3 = 0\n        self.turn_x_turn_3 = 0\n        self.turn_y_turn_3 = 0\n        self.deer_x_turn_4 = 0\n        self.deer_y_turn_4 = 0\n        self.turn_x_turn_4 = 0\n        self.turn_y_turn_4 = 0\n        self.deer_x_turn_5 = 0\n        self.deer_y_turn_5 = 0\n        self.turn_x_turn_5 = 0\n        self.turn_y_turn_5 = 0\n        self.deer_x_turn_6 = 0\n        self.deer_y_turn_6 = 0\n        self.turn_x_turn_6 = 0\n        self.turn_y_turn_6 = 0\n        self.deer_x_turn_7 = 0\n        self.deer_y_turn_7 = 0\n        self.turn_x_turn_7 = 0\n        self.turn_y_turn_7 = 0\n        self.deer_x_turn_8 = 0\n        self.deer_y_turn_8 = 0\n        self.turn_x_turn_8 = 0\n        self.turn_y_turn_8 = 0\n        self.deer_x_turn_9 = 0\n        self.deer_y_turn_9 = 0\n        self.turn_x_turn_9 = 0\n        self.turn_y_turn_9 = 0\n        self.deer_x_turn_10 = 0\n        self.deer_y_turn_10 = 0\n        self.turn_x_turn_10 = 0\n        self.turn_y_turn_10 = 0\n        self.deer_x_turn_11 = 0\n        self.deer_y_turn_11 = 0\n        self.turn_x_turn_11 = 0\n        self.turn_y_turn_11 = 0\n        self.deer_x_turn_12 = 0\n        self.deer_y_turn_12 = 0\n        self.turn_x_turn_12 = 0\n        self.turn_y_turn_12 = 0\n        self.deer_x_turn_13 = 0\n        self.deer_y_turn_13 = 0\n        self.turn_x_turn_13 = 0\n        self.turn_y_turn_13 = 0\n        self.deer_x_turn_14 = 0\n        self.deer_y_turn_14 = 0\n        self.turn_x_turn_14 = 0\n        self.turn_y_turn_14 = 0\n        self.deer_x_turn_15 = 0\n        self.deer_y_turn_15 = 0\n        self.turn_x_turn_15 = 0\n        self.turn_y_turn_15 = 0\n        self.deer_x_turn_16 = 0\n        self.deer_y_turn_16 = 0\n        self.turn_x_turn_16 = 0\n        self.turn_y_turn_16 = 0\n        self.deer_x_turn_17 = 0\n        self.deer_y_turn_17 = 0\n        self.turn_x_turn_17 = 0\n        self.turn_y_turn_17 = 0\n        self.deer_x_turn_18 = 0\n        self.deer_y_turn_18 = 0\n        self.turn_x_turn_18 = 0\n        self.turn_y_turn_18 = 0\n        self.deer_x_turn_19 = 0\n        self.deer_y_turn_19 = 0\n        self.turn_x_turn_19 = 0\n        self.turn_y_turn_19 = 0\n        self.deer_x_turn_20 = 0\n        self.deer_y_turn_20 = 0\n        self.turn_x_turn_20 = 0\n        self.turn_y_turn_20 = 0\n        self.deer_x_turn_21 = 0\n        self.deer_y_turn_21 = 0\n        self.turn_x_turn_21 = 0\n        self.turn_y_turn_21 = 0\n        self.deer_x_turn_22 = 0\n        self.deer_y_turn_22 = 0\n        self.turn_x_turn_22 = 0\n        self.turn_y_turn_22 = 0\n        self.deer_x_turn_23 = 0\n        self.deer_y_turn_23 = 0\n        self.turn_x_turn_23 = 0\n        self.turn_y_turn_23 = 0\n        self.deer_x_turn_24 = 0\n        self.deer_y_turn_24 = 0\n        self.turn_x_turn_24 = 0\n        self.turn_y_turn_24 = 0\n        self.deer_x_turn_25 = 0\n        self.deer_y_turn_25 = 0\n        self.turn_x_turn_25 = 0\n        self.turn_y_turn_25 = 0\n        self.deer_x_turn_26 = 0\n        self.deer_y_turn_26 = 0\n        self.turn_x_turn_26 ="
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 1 2\\n5 1 1\") == \"Yes\"\nassert solution(\"4 1 2\\n4 2 1\") == \"No\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3') == '2'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 3\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 3\\n') == '2'\n\"\"\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 3\\n\") == \"2\"\n\"\"\"\n\nimport sys\n\nn = list(map(int, sys.stdin.read().split()))\nx = (n[0] + n[1]) / 2\nprint(int(x) + 1)\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(1, 3) == 2\nprint(solution(1, 3))\nassert solution(1, 4) == 2\nprint(solution(1, 4))\n\"\"\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    '1 3') == '2'\nassert solution(\n    '1 3') == '2'\nassert solution(\n    '1 3') == '2'\nassert solution(\n    '1 3') == '2'\nassert solution(\n    '1 3') == '2'\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"2\"\n\n\"\"\"\n\nimport sys\nimport re\n\nregex = r'^[\\d]+ [\\d]+$'\n\nfor line in sys.stdin:\n    match = re.match(regex, line)\n    if match:\n        a, b = map(int, line.split())\n        print(int((a + b) / 2 + 0.5))\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 3') == '2'\n\n\"\"\""
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 3') == 2\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3\\n2 7\") == \"4\"\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n3\\n1 2\\n4 6\\n4 7') == '4'\nassert solution('4\\n3\\n1 2\\n4 6\\n4 7\\n1 3\\n2 7') == '5'\nassert solution('7\\n7\\n1 2\\n4 6\\n4 7\\n1 3\\n2 7\\n1 4\\n1 5\\n1 6') == '6'\nassert solution('7\\n7\\n1 2\\n4 6\\n4 7\\n1 3\\n2 7\\n1 4\\n1 5\\n1 6\\n4 1\\n4 2\\n4 3\\n4 5\\n4 6\\n4 7') == '10'\n\"\"\"\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\nedges = [map(int, sys.stdin.readline().split()) for _ in range(M)]\n\ngraph = [[] for _ in range(N)]\n\nfor v1, v2 in edges:\n    graph[v1 - 1].append(v2)\n    graph[v2 - 1].append(v1)\n\nbridge = 0\nfor v1, v2 in edges:\n    if v1 in graph[v2 - 1]:\n        bridge += 1\n    if v2 in graph[v1 - 1]:\n        bridge += 1\n\nprint(len(edges) - bridge)\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\n    \"\"\") == '4'\n\n\"\"\"\nsolution.__doc__ += \"\"\"\n>>> solution(\"\"\"\n... 7 7\n... 1 3\n... 2 7\n... 3 4\n... 4 5\n... 4 6\n... 5 6\n... 6 7\n... \"\"\")\n'4'\n\"\"\"\n\"\"\"\nsolution.__doc__ += \"\"\"\n>>> solution(\n... \"\"\"\n... 6 6\n... 1 3\n... 2 3\n... 3 4\n... 4 5\n... 5 6\n... \"\"\"\n... )\n'0'\n\"\"\"\n\"\"\"\nsolution.__doc__ += \"\"\"\n>>> solution(\n... \"\"\"\n... 6 6\n... 1 2\n... 2 3\n... 3 4\n... 4 5\n... 5 6\n... \"\"\"\n... )\n'0'\n\"\"\"\n\"\"\"\nsolution.__doc__ += \"\"\"\n>>> solution(\n... \"\"\"\n... 6 6\n... 1 2\n... 2 3\n... 3 4\n... 4 5\n... 5 6\n... 1 6\n... \"\"\"\n... )\n'0'\n\"\"\"\n\"\"\"\nsolution.__doc__ += \"\"\"\n>>> solution(\n... \"\"\"\n... 6 6\n... 1 3\n... 2 3\n... 3 4\n... 4 5\n... 5 6\n... 1 2\n... \"\"\"\n... )\n'0'\n\"\"\"\n\"\"\"\nsolution.__doc__ += \"\"\"\n>>> solution(\n... \"\"\"\n... 6 6\n... 1 3\n... 2 3\n... 3 4\n... 4 5\n... 5 6\n... 1 5\n... \"\"\"\n... )\n'0'\n\"\"\"\n\"\"\"\nsolution.__doc__ += \"\"\"\n>>> solution(\n... \"\"\"\n... 6 6\n... 1 3\n... 2 3\n... 3 4\n... 4 5\n... 5 6\n... 1 2\n... 1 6\n... \"\"\"\n... )\n'2'\n\"\"\"\n\"\"\"\nsolution.__doc__ += \"\"\"\n>>> solution(\n... \"\"\"\n... 6 6\n... 1 3\n... 2 3\n... 3 4\n... 4 5\n... 5 6\n... 1 2\n... 1 5\n... \"\"\"\n... )\n'1'\n\"\"\"\n\"\"\"\nsolution.__doc__ += \"\"\"\n>>> solution(\n... \"\"\"\n... 6 6\n... 1 3\n... 2 3\n... 3 4\n... 4 5\n... 5 6\n... 1 2\n... 1 5\n... 2 4\n... \"\"\"\n... )\n'1'\n\"\"\"\n\"\"\"\nsolution.__doc__ += \"\"\"\n>>> solution(\n... \"\"\"\n... 6 6\n... 1 3\n... 2 3\n... 3 4\n... 4 5\n... 5 6\n... 1 2\n... 1 5\n... 2 4\n... 2 6\n... \"\"\"\n... )\n'0'\n\"\"\"\n\"\"\"\nsolution.__doc__ += \"\"\"\n>>> solution(\n... \"\"\"\n... 6 6\n... 1 3\n... 2 3\n... 3 4\n... 4 5\n... 5 6\n... 1 2\n... 1 5\n... 2 4\n... 2 6\n... 1 6\n... \"\"\"\n... )\n'1'\n\"\"\"\n\"\"\"\nsolution.__doc__ += \"\"\"\n>>> solution(\n... \"\"\"\n... 6 6\n... 1 3\n... 2 3\n... 3 4\n... 4 5\n... 5 6\n... 1 2\n... 1 5\n... 2 4\n... 2 6\n... 1 6\n... \"\"\"\n... )\n'0'\n\"\"\"\n\"\"\"\nsolution.__doc__ += \"\"\"\n>>> solution(\n... \"\"\"\n... 6 6\n... 1 3\n... 2 3\n... 3 4\n... 4 5\n... 5 6\n... 1 2\n... 1 5\n... 2 4\n... 2 6\n... 1 6\n... 1 4\n... \"\"\"\n... )\n'0'\n\"\"\"\n\"\"\"\nsolution.__doc__ += \"\"\"\n>>> solution(\n... \"\"\"\n... 6 6\n... 1 3\n... 2 3\n... 3 4\n... 4 5\n... 5 6\n... 1 2\n... 1 5\n... 2 4\n... 2 6\n... 1 6\n... 1 6\n... \"\"\"\n... )\n'0'\n\"\"\"\n\"\"\"\nsolution.__doc__ += \"\"\"\n>>> solution(\n... \"\"\"\n... 6 6\n... 1 3\n... 2 3\n... 3 4\n... 4 5\n... 5 6\n... 1 2\n... 1 5\n... 2 4\n... 2 6\n... 1 6\n... \"\"\"\n... )\n'0'\n\"\"\"\n\"\"\"\nsolution.__doc__ += \"\"\"\n>>> solution(\n... \"\"\"\n... 6 6\n... 1 3\n... 2 3\n... 3 4\n... 4 5\n... 5 6\n... 1 2\n... 1 5\n... 2 4\n... 2 6\n... 1 6\n... 1 6\n... \"\"\"\n... )\n'0'\n\"\"\"\n\"\"\"\nsolution.__doc__ += \"\"\"\n>>> solution(\n... \"\"\"\n... 6 6\n... 1 3\n... 2 3\n... 3 4\n... 4 5\n... 5 6\n... 1 2\n... 1 5\n... 2 4\n... 2 6\n... 1 6\n... 1 6\n... \"\"\"\n... )\n'0'\n\"\"\"\n\"\"\"\nsolution.__doc__ += \"\"\"\n>>> solution(\n... \"\"\"\n... 6 6\n... 1 2\n... 2 3\n... 3 4\n... 4 5\n... 5 6\n... 1 2\n... 1 5\n... 2 4\n... 2 6\n... 1 6\n... \"\"\"\n... )\n'0'\n\"\"\"\n\"\"\"\nsolution.__doc__ += \"\"\"\n>>> solution(\n... \"\"\"\n... 6 6\n... 1 3\n... 2 3\n... 3 4\n... 4 5\n... 5 6\n... 1 2\n... 1 5\n... 2 4\n... 2 6\n... 1 6\n... 1 6\n... \"\"\"\n... )\n'0'\n\"\"\"\n\"\"\"\nsolution.__doc__ += \"\"\"\n>>> solution(\n... \"\"\"\n... 6 6\n... 1 3\n... 2 3\n... 3 4\n... 4 5\n... 5 6\n... 1 2\n... 1 5\n... 2 4\n... 2 6\n... 1 6\n... \"\"\"\n... )\n'0'\n\"\"\"\n\"\"\"\nsolution.__doc__ += \"\"\"\n>>> solution(\n... \"\"\"\n... 6 6\n... 1 3\n... 2 3\n... 3 4\n... 4 5\n... 5 6\n... 1 2\n... 1 5\n... 2 4\n... 2 6\n... 1 6\n... 1 6\n... \"\"\"\n... )\n'0'\n\"\"\"\n\"\"\"\nsolution.__doc__ += \"\"\"\n>>> solution(\n... \"\"\"\n... 6 6\n... 1 3\n... 2 3\n... 3 4\n... 4 5\n... 5 6\n... 1 2\n... 1 5\n... 2 4\n... 2 6\n... 1 6\n... 1 6\n... \"\"\"\n... )\n'0'\n\"\"\"\n\"\"\"\nsolution.__doc__ += \"\"\"\n>>> solution(\n... \"\"\"\n... 6 6\n... 1 2\n... 2 3\n... 3 4\n... 4 5\n... 5 6\n... 1 2\n... 1 5\n... 2 4\n..."
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7\") == \"4\"\n'''\n\nn, m = map(int, input().split())\nedges = [map(int, input().split()) for _ in range(m)]\nnum_bridges = 0\nfor i in range(m):\n    for j in range(i+1, m):\n        if edges[i][0] == edges[j][1] or edges[i][1] == edges[j][0]:\n            break\n    else:\n        num_bridges += 1\nprint(num_bridges)\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7') == '4'\nassert solution('5 7\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7') == '3'\nassert solution('6 6\\n1 3\\n2 7\\n3 4\\n4 5\\n4 6\\n5 6\\n6 7') == '0'\n\"\"\"\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7\n''') == '4'\n\n\"\"\"\n\nfrom collections import defaultdict\n\nN, M = [int(x) for x in stdin.readline().split()]\nadj_list = defaultdict(set)\n\nfor i in range(M):\n    a, b = [int(x) for x in stdin.readline().split()]\n    adj_list[a].add(b)\n    adj_list[b].add(a)"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a b c') == 'a b c'\nassert solution('a b c\\nx y z') == 'a b c'\n\nassert solution('') == ''\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n1 3\\n2 3\\n4 5\\n4 6\\n5 6\\n6 7\") == \"4\"\nassert solution(\"1 2\\n1 3\\n2 3\\n4 5\\n4 6\\n5 6\") == \"3\"\nassert solution(\"1 2\\n1 3\\n2 3\\n4 5\\n4 5\\n5 6\\n6 7\") == \"2\"\n\n\"\"\"\n\nclass Edge:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n    def __eq__(self, other):\n        if type(self) == type(other):\n            return (self.a, self.b) == (other.a, other.b)\n        else:\n            return False\n\nclass Edge_list:\n    def __init__(self, edge_list = []):\n        self.edge_list = edge_list\n\n    def __eq__(self, other):\n        if type(self) == type(other):\n            return self.edge_list == other.edge_list\n        else:\n            return False\n\n    def __repr__(self):\n        return str(self.edge_list)\n\n    def add_edge(self, edge):\n        self.edge_list.append(edge)"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 5\\n1 3\\n2 4\\n2 3\\n3 4\\n2 2\\n1 4\\n3 5\\n1 2\\n4 5\\n5 2\\n4 5\\n\") == \"4\", 'incorrect result'\n\n\"\"\""
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a\\nb') == 'ab'\nassert solution('aa\\nb') == 'aab'\nassert solution('aa\\naa') == ''\nassert solution('a\\nb\\nba') == 'ab'\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 7 5') == '7'\nassert solution('5 7 1') == '7'\nassert solution('1 2 2') == '2'\nassert solution('1 2 1') == '1'\nassert solution('0 1 2') == '2'\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 7 5''') == '7'\n'''\n---PROBLEM 5---\nWrite a program to solve this problem:\n\nGiven three integers A, B, C.\n\nThe task is to find out the number which is not divisible by A, B, C, i.e., the remainder of A, B, C when a number is divided by it.\n\nInput Format:\n\n3 integers A, B, C are given in a single line separated by a space.\n\nConstraints:\n\n-100 \\leq A, B, C \\leq 100\n\nOutput Format:\n\nPrint the number which is not divisible by A, B, C in a single line.\n\nSample Input:\n\n2 4 6\n\nSample Output:\n\n1\n'''\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7 5\") == '7'\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 7 5') == '7'\n\"\"\"\n\nA, B, C = [int(s) for s in stdin.split()]"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 7 5') == '7'\nassert solution('1 2 3') == '2'\nassert solution('2 2 3') == '3'\nassert solution('3 2 3') == '3'\nassert solution('3 3 3') == '3'\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 7 5') == '7'\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 7 5') == '7'\n\"\"\"\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7 5\") == \"7\"\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 7 5') == '7'\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 7 5\") == \"7\"\nassert solution(\"1 2 3\") == \"4\"\nassert solution(\"2 2 3\") == \"1\"\nassert solution(\"3 3 3\") == \"3\"\nassert solution(\"4 4 4\") == \"4\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n\na, b, c, d, e, f = [int(i) for i in stdin.split(' ')]\n\nwater = (100 * a) / (a + b)\nsugar = (100 * c) / (c + d)\n\nsugar_water = min(water, f)\n\nsugar_water -= e / (e + b)\n\nprint(sugar_water, round(sugar_water * d))\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1 2 10 20 15 200''') == '110 10'\nassert solution('''1 2 10 20 15 200''') == '110 10'\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n\nimport sys\n\ninput_str = sys.stdin.read()\na, b, c, d, e, f = map(int, input_str.split())\n\nprint(\n    max(\n        (\n            max(\n                b // (100 / (a + b)),\n                c // (100 / (a + b)) * (100 / a) * (100 / (a + b)),\n            )\n            * e\n            - (b // (100 / (a + b))) * (100 / a) * e\n            + c * (100 / a) * e\n            - (b // (100 / (a + b))) * (100 / (a + b)) * d\n            + (b // (100 / (a + b))) * (100 / (a + b)) * d\n            - (c * (100 / a) * d),\n            max(\n                (\n                    b // (100 / (a + b))\n                    * (100 / (a + b))\n                    * (100 / a)\n                    * (100 / (a + b))\n                )\n                - (b // (100 / (a + b)))\n                * (100 / a)\n                * (100 / (a + b))\n                * (100 / a)\n                - (b // (100 / (a + b)))\n                * (100 / (a + b))\n                * (100 / (a + b))\n                - (b // (100 / (a + b)))\n                * (100 / (a + b))\n                + (b // (100 / (a + b))) * (100 / (a + b))\n                - (b // (100 / (a + b))) * (100 / (a + b))\n                + c * (100 / a) * (100 / (a + b))\n                - c * (100 / a) * d,\n            ),\n        )\n    ),\n    max(\n        (\n            max(\n                (b // (100 / (a + b))) * (100 / (a + b)) * (100 / a) * (100 / (a + b)),\n                (b // (100 / (a + b))) * (100 / (a + b)) * (100 / (a + b)) * (100 / a),\n            )\n            * e\n            + (b // (100 / (a + b))) * (100 / (a + b)) * e\n            - (b // (100 / (a + b))) * (100 / (a + b)) * d,\n            max(\n                (\n                    b // (100 / (a + b))\n                    * (100 / (a + b))\n                    * (100 / a)\n                    * (100 / (a + b))\n                )\n                - (b // (100 / (a + b)))\n                * (100 / a)\n                * (100 / (a + b))\n                * (100 / a)\n                - (b // (100 / (a + b)))\n                * (100 / (a + b))\n                * (100 / (a + b))\n                - (b // (100 / (a + b)))\n                * (100 / (a + b))\n                + (b // (100 / (a + b))) * (100 / (a + b))\n                - (b // (100 / (a + b))) * (100 / (a + b))\n                + c * (100 / a) * (100 / (a + b))\n                - c * (100 / a) * d,\n            ),\n        )\n    ),\n)\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 10 20 15 200') == '110 10'\n\"\"\""
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 10 20 15 200\") == '110 10'\n\"\"\"\n\nimport sys\nimport math\n\na, b, c, d, e, f = map(int, sys.stdin.readline().split())\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 10 20 15 200\") == '110 10'\n\"\"\""
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 10 20 15 200\") == \"110 10\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('internationalization') == 'i18n'\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\nassert solution(\"hello\") == \"he\"\n\"\"\"\n\n\"\"\"\nBrute force method:\n1) Use set\n2) Count every character and take the char with the most occurrences\n3) Replace every char that is the max count with it's index\n4) Convert to str\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('internationalization') == 'i18n'\n\"\"\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('internationalization') == 'i18n'\n\n\"\"\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\"\n\ns = input()\nprint(s[:3] + s[3:].lower())\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('internationalization') == 'i18n'\n\"\"\"\n\n\"\"\"\nThe solution uses a regex to search for the longest substring. This is done by creating a dictionary to hold the counts of\nletters of each of the possible substring. The regex is used to find the longest substring, and the answer is the key\nof that substring.\n\nTime complexity: O(N), where N is the length of the string.\nSpace complexity: O(1).\n\"\"\"\n\nimport re\n\ns = stdin\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"internationalization\") == \"i18n\"\n\"\"\""
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('internationalization') == 'i18n'\nassert solution('localization') == 'l18n'\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\nassert solution('abc') == 'abc'\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''pot\ntop''') == 'YES'\nassert solution('''pot\ntop''') == 'YES'\nassert solution('''pot\ntop''') == 'YES'\nassert solution('''pot\ntop''') == 'YES'\nassert solution('''pot\ntop''') == 'YES'\n'''\nfrom typing import List, Set\nimport re\n\nREQUIRED_COLORS = set('pot')\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"pot\") == \"YES\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'pot'\n'top'\n) == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('pot\\ntop') == 'YES'\n\"\"\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"pot\") == \"YES\"\nassert solution(\"top\") == \"NO\"\n\"\"\"\n\n\"\"\"\nWe can convert the grid to a binary string of length 9, by first converting the grid into a list of characters, and then converting the characters to their corresponding binary value (converting 'A' to 000000, 'B' to 000101,...). This binary string will be composed of 3-digit strings (eg. '001010' or '011010' for the grid 'pot'). Then, we can take the last 3 digits (the last 3 digits in the binary string) and rotate the grid so that it has the same last 3 digits, so that we can rotate the grid 180 degrees and the grid should be the same as the original.\n\nOn the other hand, if the last 3 digits of the grid's binary string do not match the last 3 digits of the binary string of the grid after rotating 180 degrees, then the grid cannot be rotated 180 degrees.\n\nTo verify this solution, let's first see the example in the problem description. We can rotate the grid so that it is the same as the original grid.\n\nA  B  C\n1  2  3\n4  5  6\nWe can convert the grid into a binary string of length 9, by first converting the grid into a list of characters, and then converting the characters to their corresponding binary value (converting 'A' to 000000, 'B' to 000101,...).\n\nA  B  C\n1  2  3\n4  5  6\n==> 0010101110011101011011001110011110\nThe binary string is composed of 3-digit strings (eg. '001010' or '011010' for the grid 'pot').\n\nLast 3 digits  0  1  2\n    1  2  3   0  1  2\n    4  5  6   1  2  3\nWe can rotate the grid so that it has the same last 3 digits, so that we can rotate the grid 180 degrees and the grid should be the same as the original.\n\nA  B  C\n1  2  3\n4  5  6\n==> 0110101110011101011011001110011110\nThe binary string is composed of 3-digit strings (eg. '001010' or '011010' for the grid 'pot').\n\nLast 3 digits  0  1  2\n    3  2  1   0  1  2\n    6  5  4   1  2  3\nWe can rotate the grid so that it has the same last 3 digits, so that we can rotate the grid 180 degrees and the grid should be the same as the original.\n\nA  B  C\n1  2  3\n4  5  6\n==> 1111011001110011101101111011110011110\nThe binary string is composed of 3-digit strings (eg. '001010' or '011010' for the grid 'pot').\n\nLast 3 digits  0  1  2\n    2  1  0   1  2  3\n    5  4  1   2  3  4\nWe can rotate the grid so that it has the same last 3 digits, so that we can rotate the grid 180 degrees and the grid should be the same as the original.\n\nIn this case, it is not possible to rotate the grid 180 degrees.\n\nAs we can see, the binary string of the grid and the binary string of the grid after rotating 180 degrees are both composed of the same 3-digit strings.\n\nWrite 5 lines of code to test the correctness of solution:\n\n-----Constraints-----\n - C_{i,j}(1 \\leq i \\leq 2, 1 \\leq j \\leq 3) is a lowercase English letter.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nC_{11}C_{12}C_{13}\nC_{21}C_{22}C_{23}\n\n-----Output-----\nPrint YES if this grid remains the same when rotated 180 degrees; print NO otherwise.\n\n-----Sample Input-----\npot\ntop\n\n-----Sample Output-----\nYES\n\nThis grid remains the same when rotated 180 degrees.\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'YES'\nassert solution('pot') == 'YES'\nassert solution('top') == 'NO'\nassert solution('top') == 'YES'\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''a\nb\n''') == 'YES'\nassert solution('''\nc\nd\n''') == 'NO'\nassert solution('''\na\nb\n''') == 'YES'\nassert solution('''\nc\nd\n''') == 'NO'\nassert solution('''\nc\nd\na\nb\n''') == 'NO'\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"pot\\ntop\\n\") == \"YES\"\nassert solution(\"top\\npot\\n\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aba\") == \"b\"\nassert solution(\"abab\") == \"ab\"\nassert solution(\"aaaaaaaaaaaaaaa\") == \"a\"\nassert solution(\"aaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaa\") == \"aaabaaaaaaaaaaaaa\"\n\"\"\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(s) == \"b\"\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aba') == 'b'\nassert solution('abcd') == 'ab'\nassert solution('aaaaa') == 'aaaaa'\nassert solution('aabbcc') == 'ab'\n\nSolution 1\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aba\") == \"b\"\nassert solution(\"abac\") == \"c\"\nassert solution(\"ababac\") == \"c\"\nassert solution(\"ababc\") == \"c\"\nassert solution(\"ababcd\") == \"d\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aba') == 'b'\n\"\"\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ababc\") == \"b\"\nassert solution(\"ababcba\") == \"abab\"\nassert solution(\"ababcbac\") == \"ac\"\nassert solution(\"abacbacb\") == \"c\"\nassert solution(\"abcbac\") == \"ac\"\n\n\"\"\"\nimport math\nimport random\nimport string\nfrom unittest import mock\n\nimport pytest\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"aba\") == \"b\"\n\"\"\""
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(s) == \"b\"\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(1)) == \"a\"\nassert solution(str(2)) == \"ab\"\nassert solution(str(3)) == \"aba\"\nassert solution(str(4)) == \"b\"\nassert solution(str(5)) == \"ababa\"\n\"\"\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aba') == 'b'\n\"\"\"\n\nimport sys\n\ns = sys.stdin.readline().strip()\nk = int(sys.stdin.readline().strip())"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\\n\") == \"9\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(stdin)) == str(out)\nprint(\"Hooray!\")\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\"\n\n\"\"\"\nW, H, N = map(int, stdin.readline().split())\n\npoints = []\nfor _ in range(N):\n    x, y, a = map(int, stdin.readline().split())\n    points.append((x, y, a))\n\nx1, y1, a1 = points[0]\nx2, y2, a2 = points[1]\narea = 0\nfor x in range(min(x1, x2), max(x1, x2) + 1):\n    for y in range(min(y1, y2), max(y1, y2) + 1):\n        if x1 < x < x2 and y1 < y < y2:\n            if a1 == 1:\n                area += (x - x1) * (y - y1)\n            elif a1 == 2:\n                area += (x - x1) * (y - y1)\n            elif a1 == 3:\n                area += (x - x1) * (y - y1)\n            else:\n                area += (x - x1) * (y - y1)\n\nprint(area)\n\"\"\"\n\nW, H, N = map(int, input().split())\npoints = []\nfor _ in range(N):\n    x, y, a = map(int, input().split())\n    points.append((x, y, a))\narea = 0\n\nfor x1, y1, a1 in points:\n    if a1 == 1:\n        area += min((H - y1), (y1 - 1)) * min((x1, W - x1))\n    elif a1 == 2:\n        area += min((H - y1), (y1 - 1)) * max((x1, W - x1))\n    elif a1 == 3:\n        area += min((x1 - 1), (x1, W - x1)) * min((y1, H - y1))\n    elif a1 == 4:\n        area += min((x1 - 1), (x1, W - x1)) * max((y1, H - y1))\n\nprint(area)\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\"\n\nfrom collections import deque\n\nx, y, n = map(int, stdin.readline().split())\npoints = []\nfor _ in range(n):\n    points.append(map(int, stdin.readline().split()))"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\n\"\"\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == \"9\"\n\"\"\"\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\") == '9'\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\\n\") == \"9\"\n\n\"\"\""
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n'''5 4 2\n2 1 1\n3 3 4''') == '9'\nassert solution(\n'''5 4 2\n2 2 1\n3 3 4''') == '0'\n\n----------TEST----------\n\n---Warm up---\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------\n\n----------TEST----------"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4 2\\n2 1 1\\n3 3 4\\n\") == '9'\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 10 1\\n\") == \"12\\n11\\n0\\n\"\n\"\"\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 5 1\\n1 10 1\") == \"12\\n11\\n0\"\n\"\"\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n6 5 1\\n1 10 1\") == \"12\\n11\\n0\"\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n6 5 1\\n1 10 1\") == \"12\\n11\\n0\"\n\"\"\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n6 5 1\\n1 10 1') == '12\\n11\\n0'\n\"\"\"\n\nn = int(stdin.readline())\n\npositions = [[None for _ in range(3)] for _ in range(n)]\nfor i in range(n):\n    line = stdin.readline().split()\n    positions[i][0] = int(line[1])\n    positions[i][1] = int(line[2])\n    positions[i][2] = int(line[3])\n\nmin_time = [None for _ in range(n)]\nfor i in range(n):\n    time = 0\n    if positions[i][0]!= 0:\n        time += positions[i][1] // positions[i][0]\n    if positions[i][0]!= 1:\n        time += positions[i][1] % positions[i][0]\n    min_time[i] = time\n\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if i == 0 and j == n - 1:\n            continue\n        min_time[j] = min(min_time[i] + positions[j][1], min_time[j])\n\nprint(' '.join(map(lambda x: str(x), min_time)))"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3\n6 5 1\n1 10 1\n\"\"\") == \"12\\n11\\n0\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\":\\n10 5 1\\n1 10 1\\n\") == \"12\\n11\\n0\\n\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 10 1\") == \"12\\n11\\n0\\n\"\n\"\"\""
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n6 5 1\\n1 10 1\") == \"12\\n11\\n0\"\n\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline().rstrip())"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n6 5 1\\n1 10 1\\n') == '12\\n11\\n0'\n\"\"\"\n\n\"\"\"\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2\\n.*\\n.*') == '.*\\n.*'\nassert solution('2 2\\n.*\\n.*') == '.*\\n.*'\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2\\n.*\\n.*') == '.*\\n.*\\n.*\\n.*'\n\"\"\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2\\n*.\\n.*\") == \"*.\\n*.\\n.*\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('.*') == '.*'\n\"\"\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2\\n*\\n.*') == '*.\\n.*'\nassert solution('2 2\\n.*\\n.*') == '*.*\\n.*.*'\n\"\"\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n.*\\n.*\") == \".*\\n.*\\n.*\\n.*\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n.*\\n.*\") == \".*\\n.*\\n.*\\n.*\\n\"\nassert solution(\"4 4\\n.**\\n.**\\n.**\\n.**\") == \"**.\\n**.\\n**.\\n**.\\n\"\n\"\"\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\":..\") == \":.\"\nassert solution(\".*..\") == \"..\"\nassert solution(\".*.*\") == \".*\"\n\nassert solution(\":..\") == \":.\"\nassert solution(\".*..\") == \"..\"\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2\\n.*\\n.*\") == \".*\\n.*\\n.*\\n.*\"\n\"\"\""
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2\\n.*\\n.*') == '.*\\n.*'\nassert solution('1 1\\n..') == '..'\nassert solution('2 2\\n..\\n..') == '..\\n..'\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 6 1 4 5') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 6 1 4 5\") == 'YES'\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'YES'\nassert solution('1\\n') == 'NO'\nassert solution('2\\n6 1 4 5') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\n\"\"\"\n\n\"\"\"\nExplanation\n\nIf elements of the sequence are pairwise distinct, then we can sort them. After that, we go through the sorted array and see if there are any adjacent elements that are equal to each other. If there are such adjacent elements, then the sequence is not pairwise distinct. Otherwise, the sequence is pairwise distinct.\n\nComplexity\nO(NLog(N))\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\nassert solution('4\\n2 6 1 4') == 'NO'\nassert solution('6\\n2 6 1 4 5 3') == 'NO'\nassert solution('7\\n2 6 1 4 5 3 7') == 'YES'\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n2 6 1 4 5') == 'YES'\n\"\"\""
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n2 6 1 4 5\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1\\n2') == 1\nassert solution('2\\n3\\n2') == 2\nassert solution('2\\n3\\n3') == 2\nassert solution('2\\n3\\n4') == 3\nassert solution('2\\n3\\n5') == 3\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\"\"\") == \"2\"\n\nassert solution(\"\"\"\n1\n3\n1 1 3 4 2 2\"\"\") == \"1\"\nassert solution(\"\"\"\n1\n3\n1 1 3 4 2 2\"\"\") == \"2\"\nassert solution(\"\"\"\n1\n3\n1 1 3 4 2 2\"\"\") == \"2\"\n\nassert solution(\"\"\"\n5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\"\"\") == \"2\""
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == \"2\\n3\\n4\\n1\\n2\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"2\"\nassert solution(\"5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"3\"\nassert solution(\"5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"4\"\nassert solution(\"5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == \"1\"\n\n\"\"\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n5\\n1 2 3 4 5') == '2'\nassert solution('5\\n8\\n1 2 3 4 5') == '3'\nassert solution('5\\n8\\n6 6 6 6 6 6 8 8') == '4'\nassert solution('5\\n8\\n1 2 2 1 2 1 1 2') == '3'\nassert solution('5\\n8\\n1 1 3 4 2 2') == '1'"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n4\\n1 2 2 1 2\\n2\") == \"3\"\nassert solution(\"5\\n6\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\") == \"2\"\nassert solution(\"6\\n8\\n1 2 2 1 2 1 1 2\\n3\") == \"4\"\nassert solution(\"5\\n8\\n1 2 2 1 2 1 1 2\\n3\") == \"1\"\nassert solution(\"7\\n8\\n1 2 3 4 5 6 7\\n8\\n1 2 3 4 5 6 7\") == \"1\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == 2\nassert solution('5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == 3\nassert solution('5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == 4\nassert solution('5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == 1\nassert solution('5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2') == 2\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\") == '2'\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\") == \"3\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n1 1 1 1 1 1 1 2 2\") == \"1\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n1 1 1 1 1 1 1 2 2\") == \"2\"\nassert solution(\"5\\n1 2 3 4 5\\n8\\n1 2 2 1 2 1 1 2\") == \"2\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == '2'\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == '3'\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == '4'\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == '1'\nassert solution(\"5\\n5\\n1 2 3 4 5\\n8\\n6 6 6 6 6 6 8 8\\n8\\n1 2 2 1 2 1 1 2\\n3\\n1 3 3\\n6\\n1 1 3 4 2 2\\n\") == '2'\n\"\"\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"3\"\nassert solution(\"7 3\\n22 5\\n987 13\") == \"1\"\n\"\"\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n5\n6 1\n1 3\n2 5\n3 2\n4 4\n''') == '77'\nassert solution('''\n5\n6 2\n1 3\n2 5\n3 2\n4 4\n''') == '5'\n\n'''\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"3\"\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"1\"\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"5\"\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"77\"\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"3\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 3\\n1 5\\n22 5\\n987 13') == '3'\nassert solution('1 2\\n3 4\\n5 6') == '1'\nassert solution('1 1\\n2 2\\n3 3') == '2'\nassert solution('1 1\\n2 2\\n3 3\\n4 4') == '4'\nassert solution('1 1\\n2 2\\n3 3\\n4 4\\n5 5') == '5'"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\\n1 5\\n22 5\\n987 13\\n\") == \"3\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n7 3\n1 5\n22 5\n987 13\n\"\"\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == '3'\nassert solution(\"7 5\") == '1'\nassert solution(\"22 5\") == '5'\nassert solution(\"987 13\") == '77'"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3') == '3'\nassert solution('7 3') == '1'\nassert solution('22 5') == '5'\nassert solution('987 13') == '77'\n\n\"\"\""
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 7 3\") == \"3\"\nassert solution(\"7 3\") == \"1\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"22 5\") == \"77\"\n\n\"\"\"\n\nimport math\nimport sys\n\nsys.setrecursionlimit(10**6)"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 5\\n22 5\\n987 13\") == \"3\"\nassert solution(\"7 3\\n1 5\\n22 5\\n987 13\") == \"1\"\nassert solution(\"7 3\\n22 5\\n987 13\") == \"5\"\n\"\"\"\n\nt = int(input())\n\nfor i in range(t):\n    n, x = [int(s) for s in input().split(\" \")]\n    i = 1\n    s = str(i)\n    while i <= n:\n        s += str(i)\n        i += 1\n    print(s[x-1])"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"2 1 1 2 9 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"9 4 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2\"\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abca\") == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution(\"codeforces\") == [2, 1, 1, 2, 9, 2, 2, 5, 2, 2, 1, 1, 5, 4, 11, 8, 2, 7, 5, 1, 10, 1, 5, 2]\n\n\"\"\"\nfrom collections import Counter\nfrom itertools import groupby\nfrom typing import List"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abca') == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution('codeforc') == [9, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution('codeforces') == [9, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\nprint(solution('qwertyuioplkjhgfdsazxcvbnm'))\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abca\") == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution(\"codeforces\") == [9, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == [26, 10, 1, 2, 9, 2, 2, 5, 2, 2, 1, 1, 5, 4, 11, 8, 2, 7, 1, 10, 1, 5, 2, 10, 1, 5, 2]\n\n\"\"\""
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abca\") == \"4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"codeforces\") == \"0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 0\"\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abca\") == \"a4b2c2a\"\nassert solution(\"codeforc\") == \"c9d3e4f1o9r\"\nassert solution(\"codeforce\") == \"c9d3e4f1o9r\"\nassert solution(\"codeforces\") == \"c9d3e4f1o9r\"\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == \"2722299b9\"\n\"\"\""
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abca\") == [4, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution(\"codeforces\") == [9, 4, 2, 1, 1, 5, 2, 2, 1, 1, 5, 4, 11, 8, 2, 7, 1, 10, 1]\nassert solution(\"qwertyuioplkjhgfdsazxcvbnm\") == [26, 10, 1, 2, 9, 2, 2, 5, 2, 2, 1, 1, 5, 4, 11, 8, 2, 7, 1, 10, 1]\n\n\"\"\"\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"codeforces\") == \"26 10\"\n\"\"\""
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_str) == correct_str\n\n------\n\nWe can always find the number of possible paths to the goal in a weighted graph. \nFor example, consider a complete weighted graph with weights equal to the number of steps \nneeded to reach the goal. The graph represented as an adjacency matrix:\n\n[\n    [0, 1, 2, 2],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0]\n]\n\nThere are exactly three paths to the goal: \nfrom the first node to the second node, from the second node to the third node and \nfrom the third node to the goal. The third node is the only node, who's position is not \nreached by any path.\n\nThe number of paths is equal to the number of nodes with no incoming edges minus one.\n\n\"\"\"\n\nfrom collections import deque, defaultdict\nimport sys\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\\n5 6 7\") == \"0\\n14\\n0\\n0\\n5\"\nassert solution(\"1 2 3\\n4 5 6\\n7 8 9\") == \"0\\n17\\n0\\n0\\n15\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\") == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\nassert solution(\"7 7 7\\n11 21 31\\n14 24 28\\n9 10 11\\n3 2 2\\n7 9 9\\n6 6 6\\n4 4 4\\n12 21 31\") == '0\\n91\\n0\\n0\\n1\\n1\\n2\\n4'\nassert solution(\"8 6 7\\n12 20 25\\n15 21 30\\n13 20 20\\n10 14 20\\n3 4 5\\n4 6 5\\n6 7 7\\n1 1 1\\n2 2 2\") == '0\\n1\\n0\\n1\\n0\\n1\\n2'\nassert solution(\"6 5 7\\n8 14 21\\n9 18 22\\n5 10 19\\n2 6 18\\n4 7 19\\n1 3 19\\n3 5 19\\n7 8 18\") == '0\\n6\\n0\\n0\\n1\\n0\\n0\\n1'\nassert solution(\"4 4 7\\n1 5 6\\n6 7 7\\n9 8 8\\n4 4 7\") == '0\\n0\\n1\\n1\\n2'\n\n\"\"\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6') == '0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4'\nassert solution('2\\n10 10 10\\n20 20 20\\n30 30 30\\n40 40 40\\n50 50 50\\n') == '2000\\n0'\nassert solution('1\\n10 10 10\\n20 20 20\\n30 30 30\\n40 40 40\\n50 50 50\\n') == '999999999\\n999999999'\nassert solution('2\\n0 10 10\\n10 0 10\\n10 10 10\\n') == '999999999\\n999999999'\nassert solution('2\\n10 10 10\\n20 20 20\\n30 30 30\\n40 40 40\\n50 50 50\\n') == '999999999\\n999999999'\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 4\") == \"0\"\nassert solution(\"10 20 30\") == \"36\"\nassert solution(\"5 5 5\") == \"0\"\nassert solution(\"2 4 3\") == \"0\"\nassert solution(\"1 1000000000 1000000000\") == \"1999999994\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == '0'\nassert solution('1 2 3') == '1'\nassert solution('1 2 3 4') == '4'\nassert solution('2 1 3') == '1'\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 5') == '0'\nassert solution('1 10 1000000000') == '1999999994'\nassert solution('3 2 5') == '2'\nassert solution('3 2 6') == '4'\n\n----INPUT EXAMPLE----\n\n3\n3 3 4\n10 20 30\n5 5 5\n2 4 3\n1 1000000000 1000000000\n1 1000000000 999999999\n3 2 5\n3 2 6\n\n----OUTPUT EXAMPLE----\n\n0\n36\n0\n0\n1999999994\n1999999994\n2\n4\n\"\"\""
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\") == \"0\\n36\\n0\\n0\\n1999999994\\n1999999994\\n2\\n4\"\nprint(solution(\"3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\"))\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 5\\n2 5 8\\n3 3 7\") == \"16\\n24\\n5\"\nassert solution(\"3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 1000000000\\n3 2 5\\n3 2 6\") == \"1999999994\\n1999999994\\n2\\n4\"\nassert solution(\"3 3 4\\n10 20 30\\n5 5 5\\n2 4 3\\n1 1000000000 999999999\\n3 2 5\\n3 2 6\") == \"2\\n4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 4') == '0'\nassert solution('10 20 30') == '36'\nassert solution('5 5 5') == '0'\nassert solution('2 4 3') == '0'\nassert solution('1 1000000000 1000000000') == '1999999994'\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\\nNO\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nNO\""
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n2\\n3\\n4\\n5\\n6\") == 'NO'\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == 'NO'\nassert solution(\"2\\n2\\n1 2\\n2\\n1 2\") == 'YES'\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n427\\n428\\n429\\n430\\n431\\n432\\n433\\n434\\n435\\n436\\n437\\n438\\n439\\n440\\n441\\n442\\n443\\n444\\n445\\n446\\n447\\n448\\n449\\n450\\n451\\n452\\n453\\n454\\n455\\n456\\n457\\n458\\n459\\n460\\"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\""
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8\") == \"YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO\"\n\n\n\n2.  1, 4, 7, 12, 16, 19, 20, 23, 22, 25, 24, 26, 28, 27, 26, 25, 24, 22, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0\n9\n1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100\n\n6\n1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100\n\n5\n1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100\n\n4\n1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100\n\n3\n1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100\n\n2\n1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100\n\n1\n1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n11 14 16 12\") == 'YES'\nassert solution(\"2\\n1 8\") == 'NO'\nassert solution(\"6\\n1 6 3 10 5 8\") == 'YES'\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8') == 'YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO'\nassert solution('7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\\n2\\n12 13\\n6\\n1 6 3 10 5 8\\n6\\n1 12 3 10 5 8') == 'YES\\nNO\\nYES\\nYES\\nYES\\nYES\\nNO'\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(print())\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(a) == result\n\n\"\"\""
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()\n\"\"\"\n\nfrom sys import stdin, stdout\nfrom math import gcd"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\\nNO\"\nassert solution(\"7\\n4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\\nYES\\nYES\\nYES\\nYES\\nNO\"\nassert solution(\"5\\n1 2 3 4 5\\n6\\n1 2 3 4 5\") == \"NO\"\nassert solution(\"4\\n11 14 16 12\\n2\\n1 8\\n4\\n1 1 1 1\\n4\\n1 2 5 6\") == \"YES\\nYES\"\nassert solution(\"5\\n1 2 3 4 5\\n6\\n1 2 3 4 5\") == \"NO\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''6 5 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\n''') == '22'\nassert solution('''5 5 4\n1 2 5\n2 3 4\n1 4 3\n4 3 7\n3 5 2\n1 5\n1 3\n3 3\n1 5''') == '13'\nassert solution('''6 6 6\n1 2 9\n2 3 6\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\n1 5\n3 3\n1 5\n''') == '0'\n\n'''\n6 5 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\n\n22\n\n6 6 6\n1 2 9\n2 3 6\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\n1 5\n3 3\n1 5\n\n13\n'''"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == \"22\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == \"13\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == '22'\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == '13'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 5 2\\\\n1 2 5\\\\n2 3 7\\\\n2 4 4\\\\n4 5 2\\\\n4 6 8\\\\n1 6\\\\n5 3\") == \"22\"\nassert solution(\"5 5 4\\\\n1 2 5\\\\n2 3 4\\\\n1 4 3\\\\n4 3 7\\\\n3 5 2\\\\n1 5\\\\n1 3\\\\n3 3\\\\n1 5\\\\n\") == \"13\"\nassert solution(\"4 3 5\\\\n1 2 4\\\\n2 3 4\\\\n4 3 7\\\\n3 5 2\\\\n1 5\") == \"13\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 4 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3') == '13'\nassert solution('5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5') == '22'\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\nfrom typing import DefaultDict\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\") == \"22\"\nassert solution(\"5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\") == \"13\""
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''6 5 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6''') == '22'\nassert solution('''5 5 4\n1 2 5\n2 3 4\n1 4 3\n4 3 7\n3 5 2\n1 5''') == '13'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n5 5 4\n1 2 5\n2 3 4\n1 4 3\n4 3 7\n3 5 2\n1 5\n1 3\n3 3\n1 5\n\"\"\") == \"13\"\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('6 5 2\\n1 2 5\\n2 3 7\\n2 4 4\\n4 5 2\\n4 6 8\\n1 6\\n5 3\\n') == '22'\nassert solution('5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n') == '13'\nassert solution('5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n') == '13'\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5 4\\n1 2 5\\n2 3 4\\n1 4 3\\n4 3 7\\n3 5 2\\n1 5\\n1 3\\n3 3\\n1 5\\n') == '13'\n\n\"\"\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n5') == '5\\n5\\n5\\n5\\n5'\nassert solution('2\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11') == '11\\n11\\n11\\n11\\n11'\nassert solution('3\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11') == '11\\n11\\n11\\n11\\n11'\nassert solution('4\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11') == '11\\n11\\n11\\n11\\n11'\n\nprint(solution(stdin))\n\"\"\"\n\nfrom math import ceil, sqrt"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 3\\n1 2\\n1 2\") == \"4\\n2\\n1\"\nassert solution(\"5 4\\n1 2\\n1 2\\n1 2\\n1 2\") == \"3\\n1\"\n\"\"\"\n\n\nfrom math import ceil, log"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\\n\") == '1\\n3\\n9\\n13\\n27\\n6561\\n19683\\n'\nprint('Test passed')\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1\") == \"0\"\nassert solution(\"5 2\\n3\") == \"0\"\nassert solution(\"10 2\\n4\") == \"3\"\nassert solution(\"10 2\\n4\") == \"3\"\nassert solution(\"10 2\\n5\") == \"6\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n6\\n1\") == '6'\nassert solution(\"1\\n7\\n2\") == '2'\nassert solution(\"2\\n4\\n1\") == '3'\nassert solution(\"6\\n1\\n5\") == '5'\nassert solution(\"1\\n4\\n2\") == '5'\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2\\n6\\n13\\n14\\n3620\\n10000\") == \"1\\n3\\n9\\n13\\n27\\n6561\\n19683\"\n\"\"\"\n\n\"\"\"\nnum_queries = int(stdin.readline())\nfor _ in range(num_queries):\n    number = int(stdin.readline())\n    number += 1\n    while True:\n        if \"3\" in str(number):\n            break\n        number += 1\n    print(number)\n\"\"\"\n\nnum_queries = int(input())\nfor _ in range(num_queries):\n    number = int(input())\n    number += 1\n    while True:\n        if \"3\" in str(number):\n            break\n        number += 1\n    print(number)"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open(\"input.txt\", \"r\").read()) == open(\"output.txt\", \"r\").read()\nprint(\"Well done!\")\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1\") == \"1\"\nassert solution(\"4\\n2\") == \"3\"\nassert solution(\"5\\n1\") == \"4\"\nassert solution(\"5\\n2\") == \"8\"\nassert solution(\"10\\n1\") == \"4\"\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1') == '1'\nassert solution('4\\n2') == '3'\nassert solution('4\\n3') == '3'\nassert solution('4\\n4') == '4'\nassert solution('4\\n5') == '5'\n\"\"\"\n\nfrom math import log\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2\\n3\\n1\\n2\\n1\\n2\\n0\\n1\\n2\\n0\\n0\\n0\\n0') == '4'\nassert solution('3\\n2\\n3\\n1\\n2\\n0\\n1\\n2\\n0\\n0\\n0') == '3'\nassert solution('4\\n2\\n3\\n1\\n2\\n0\\n1\\n2\\n0\\n0\\n0') == '4'\nassert solution('2\\n1\\n2\\n1\\n0\\n1') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3') == '3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n') == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4'\n\"\"\""
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\") == \"1 1 1 1 1\"\n\n\"\"\"\nimport sys\nsys.stdin = open('input.txt')\n\nq = int(input())\nfor i in range(q):\n    n = int(input())\n    p = [int(i) for i in input().split()]\n    p = list(set(p))\n    d = [0] * n\n    for i in range(1, len(p)):\n        for j in range(i):\n            if p[i] > p[j]:\n                d[i] = max(d[i], d[j] + 1)\n    print(*d)\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n4\n4\n1 3 2 4\n5\n1 2 3 4 5\n5\n3 4 1 2 5 6\n''') == [\n    [1, 1, 1, 1, 1],\n    [3, 3, 3],\n    [2, 3, 3, 2, 3],\n    [1, 1, 1, 1, 1],\n    [4, 4, 4, 4, 4],\n]\n\nassert solution('''\n5\n5\n4 3 2 1\n6\n1 5 3 2 4 6\n5\n4 3 2 1 5 6\n5\n2 3 4 1 5 6\n6\n3 4 1 2 5 6\n5\n5 1 2 4 3\n''') == [\n    [1, 1, 1, 1, 1],\n    [3, 3, 3],\n    [2, 3, 3, 2, 3],\n    [1, 1, 1, 1, 1],\n    [4, 4, 4, 4, 4],\n    [3, 3, 3, 2, 3],\n]\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 3 4\\n1\\n2 3 4 1') == '1 1 1 1'\n\"\"\"\n\nfrom collections import defaultdict\nfrom functools import reduce\nimport re\nimport sys\n\ninp = sys.stdin\n\nn = int(inp.readline())\np = list(map(int, inp.readline().split()))\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3') == '1 1 1 1 1'\n\n\"\"\""
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n\") == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\"\n\n\"\"\"\n\nfrom collections import Counter\nfrom typing import List"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n1\n3\n2 3 1\n\"\"\") == \"\"\"\n1 1 1 1 1 \n3 3 3 \n2 3 3 2 1 3 \n\"\"\"\n\nassert solution(\"\"\"\n1\n3\n2 3 1\n\"\"\") == \"\"\"\n1 1 1 1 1 \n3 3 3 \n2 3 3 2 1 3 \n\"\"\"\n\n\"\"\"\n7\n2\n1 2\n2 3\n3 4\n3 5\n4 5\n5 6\n4\n1 2\n2 3\n3 4\n3 5\n4 6\n\n\"\"\""
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\"\n\nassert solution(\"7\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\") == \"1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4\"\n\nassert solution(\"5\\n4\\n1 2 3 4\\n4\\n2 3 1\\n5\\n3 4 1 2\") == \"1 1 1 1\\n2 2 2 2\\n3 3 3\\n2 3 1 3\\n3 3 2 1\"\n\n\"\"\""
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\") == '1 1 1 1 1'\nassert solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\") == '1 1 1 1 1'\nassert solution(\"6\\n6\\n1 2 3 4 5\\n3\\n2 3 1\") == '1 1 1 1 1'\nassert solution(\"7\\n5\\n1 2 3 4 5\\n3\\n2 3 1\") == '1 1 1 1 1'\nassert solution(\"6\\n4\\n1 2 3 4 5\\n3\\n2 3 1\") == '1 1 1 1 1'\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 2 3') == '7'\nassert solution('4 4\\n1 2 3 4') == '0'\nassert solution('5 4\\n1 2 2 3 3') == '-1 2 3 4'\n\"\"\"\n\n\n\nfrom math import gcd\n\nn, m = [int(i) for i in input().split()]\n\nx = [int(i) for i in input().split()]\n\ny = []\n\nfor i in range(m):\n    y.append(int(input()))"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n2') == '1'\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 6\\n1 5\\n') == '8\\n-1 2 6 4 0 3'\nassert solution('3 5\\n0 3 1\\n') == '7\\n5 -2 4 -1 2'\n\n\n-----Source-----\nhttps://codeforces.com/gym/102597/problem/A\n\"\"\"\n\nx, y = map(int, input().split())\n\narr = list(map(int, input().split()))\n\narr.sort()\n\nsum = 0\n\nfor i in range(0, len(arr)):\n    sum += arr[i] - i\n\nprint(sum)\n\nfor i in range(0, len(arr)):\n    if arr[i] - i < 0:\n        print(-arr[i] + i, end=\" \")\n    else:\n        print(arr[i] - i, end=\" \")\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 6\\n1 5') == 8\nassert solution('3 5\\n0 3 1') == 7\n\"\"\"\n\nfrom math import inf\nfrom typing import List\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n1 2\") == \"2\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6\\n1 2 3 4 5\\n1 3 2 3 4 5\") == \"5 2 4 0 3\"\n\"\"\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 6\\n1 5\\n\") == \"8\\n-1 2 6 4 0 3\\n\"\n\"\"\"\n\nn, m = map(int, stdin.readline().split())"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 6\\n1 5\\n\") == \"8\\n-1 2 6 4 0 3\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"2 6\n1 5\n\"\"\") == \"8\"\nassert solution(\"\"\"3 5\n0 3 1\n\"\"\") == \"7\"\nassert solution(\"\"\"2 6\n0 1 3 4 5 6\n\"\"\") == \"4\"\nassert solution(\"\"\"5 5\n1 3 4 2 6 5\n\"\"\") == \"0\"\nassert solution(\"\"\"2 4\n1 1\n\"\"\") == \"2\"\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 6\\n1 5\\n') == '8'\nassert solution('3 5\\n0 3 1\\n') == '7\\n5 -2 4 -1 2'\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 3') == 'RUUURRRRUU'\n\"\"\""
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\\n2\\n1 0\\n0 1\\n1\") == \"YES\\nRUUURRRRUU\\nYES\"\nassert solution(\"4\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\\n2\\n1 0\\n0 1\\n1\") == \"NO\\nYES\"\nassert solution(\"1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\n\"\"\"\nfrom collections import deque\n\nimport sys\nsys.setrecursionlimit(5000)\n\nn = int(input())\n\npackages = deque()\nfor _ in range(n):\n    x, y = map(int, input().split())\n    packages.append((x, y))\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == 'YES\\nRUUURRRRUU'\n\nassert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\") == 'NO'\n\"\"\"\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\\n2\\n1 0\\n0 1\") == \"RUUURRRRUU\"\nassert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\\n2\\n1 0\\n0 1\") == \"RRRRUUU\"\n\n'''\nfrom typing import List\nfrom itertools import permutations\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n\n    def _solution(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\") == \"YES\\nRUUURRRRUU\"\nassert solution(\"5\\n4 3\\n2\\n1 0\\n0 1\") == \"YES\\nRRRRUUU\"\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1000000)\n\n\nclass Node:\n    def __init__(self, i):\n        self.i = i\n        self.children = set()\n        self.father = None\n\n    def add_child(self, child):\n        self.children.add(child)\n\n    def is_leaf(self):\n        return len(self.children) == 0\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3') == 'YES\\nRUUURRRRUU'\nassert solution('2\\n1 0\\n0 1') == 'YES\\nRRRRUUU'\nassert solution('1\\n4 3') == 'NO'\n\"\"\""
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3') == 'YES\\nRUUURRRRUU'\nassert solution('2\\n1 0\\n0 1') == 'YES\\nRRRRUUU'\nassert solution('1\\n1') == 'YES\\nRUUU'\nassert solution('1\\n1\\n1') == 'NO'\n\"\"\"\n\nfrom collections import deque, OrderedDict"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"YES\\nRUUURRRRUU\"\nassert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"NO\"\n\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 3\\n1 2\\n3 3\\n5 5\\n4 3\") == \"RUUURRRRUU\"\n\n\"\"\"\n\n\nfrom typing import List, Tuple, Dict\n\nfrom collections import defaultdict\nfrom heapq import heappop, heappush\nfrom itertools import count\nfrom math import inf\n\n\nclass Problem:\n    def __init__(self, stdin: str):\n        self.stdin = stdin\n        self.test_cases = self._get_test_cases()\n\n    def _get_test_cases(self) -> List[str]:\n        test_cases = self.stdin.split('\\n')\n        test_cases = test_cases[:-1]\n        return test_cases\n\n    def process(self) -> List[str]:\n        output_list = []\n        for test_case in self.test_cases:\n            output_list.append(self._process(test_case))\n        return output_list\n\n    def _process(self, test_case: str) -> str:\n        pass\n\n\nclass Solution(Problem):\n    def _process(self, test_case: str) -> str:\n        pass\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 2') == '1'\nassert solution('0 0') == '0'\nassert solution('1 0') == '1'\nassert solution('2 5') == '0'\nassert solution('3 1') == '1'\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1\") == \"8\\n0\\n500\\n2128012501878\\n899999999999999999\"\n\"\"\"\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 7\\n2 1') == '4'\n\"\"\"\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"8\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"500 4\") == \"8\"\nassert solution(\"217871987498122 10\") == \"899999999999999999\"\nassert solution(\"100000000000000001 1\") == \"899999999999999999\""
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == '8'\nassert solution(\"1 1\") == '0'\nassert solution(\"500 4\") == '8'\nassert solution(\"217871987498122 10\") == '899999999999999999'\nassert solution(\"100000000000000001 1\") == '899999999999999999'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 6') == '1'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1') == '8'\nassert solution('1 1') == '0'\nassert solution('500 4') == '8'\nassert solution('217871987498122 10') == '899999999999999999'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n1 1\") == \"8\"\nassert solution(\"500 4\\n217871987498122 10\") == \"899999999999999999\"\nassert solution(\"100000000000000001 1\") == \"899999999999999999\"\n\"\"\"\n\nfrom tools import timing\n\nclass Solution:\n    @timing\n    def sum_of_digits(self, n: int, s: int):\n        while n > 0:\n            s -= (n % 10)\n            n //= 10\n        return s\n\nassert Solution().sum_of_digits(2, 1) == 8\nassert Solution().sum_of_digits(1, 1) == 0\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1') == '8'\n\"\"\"\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n1 1\\n500 4\\n217871987498122 10\\n100000000000000001 1') == '8\\n0\\n500\\n2128012501878\\n899999999999999999'\n\"\"\"\n\nimport sys\n\nt = int(sys.stdin.readline())\nfor i in range(0, t):\n    n, s = map(int, sys.stdin.readline().split())\n    print(n - s)\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\") == \"2\\n0\\n2\\n4\\n1\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\") == \"0\\n0\\n2\\n4\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"2\"\nassert solution(\"7\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"0\"\nassert solution(\"7\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"1\""
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\\n0\\n2\\n4\\n1\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\\n0\\n2\\n4\\n1\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\\n0\\n2\\n4\\n1\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\\n0\\n2\\n4\\n1\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\\n0\\n2\\n4\\n1\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"0\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\\n5\\n1 1 0 1 1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3\\n1 1 0 1\\n5\\n1 1 1 1\") == \"3\"\nassert solution(\"4\\n2\\n1 0 1\") == \"0\"\nassert solution(\"4\\n2\\n1 1 1\") == \"1\"\nassert solution(\"4\\n2\\n1 0 0\") == \"1\"\n\nprint(solution(\"3\\n3\\n1 1 0 1\"))\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"0\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\"\nassert solution(\"7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == \"2\"\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\\n1 0 0\\n5\\n1 1 0 0 1\\n6\\n1 0 0 0 0 1\") == '2'\nassert solution(\"5\\n7\\n0 0 1 0 1 0 1\\n3\\n1 0 0\") == '0'\nassert solution(\"5\\n7\\n0 0 1 0 1 0 1\") == '2'\n\n\"\"\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 0 0 0\") == \"1\"\nassert solution(\"7\\n1 0 1 0 1 0 1\") == \"2\"\nassert solution(\"9\\n1 1 0 0 1 0 1 1\") == \"1\"\nassert solution(\"10\\n1 1 0 1 1 1 1 1 1\") == \"0\"\n\nassert solution(\"8\\n1 1 0 1 1 1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 0 0 0 1\\n3') == '2'\nassert solution('5\\n1 1 0 0 1\\n6') == '1'\nassert solution('5\\n1 1 0 1 1\\n5') == '0'\nassert solution('5\\n1 1 0 1 1\\n5') == '1'\nassert solution('5\\n1 1 0 1 1\\n5') == '1'\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 5\\n4 0 2 1 0 0\") == \"2\"\nassert solution(\"1 1\\n1 0\") == \"0\"\nassert solution(\"1 1\\n0 1\") == \"1\"\nassert solution(\"1 0\\n0 1\") == \"1\"\nassert solution(\"1 0\\n1 0\") == \"2\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3\\n4 4\\n6 2') == 'cbcacab'\nassert solution('7 3\\n4 4\\n6 2') == 'abcd'\nassert solution('7 3\\n4 4\\n6 2') == 'baabab'\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\"\nassert solution(\"7 3\\n4 4\\n6 2\") == \"abcd\"\nassert solution(\"7 3\\n4 4\\n6 2\") == \"baabab\"\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == 'cbcacab'\nassert solution(\"7 3\\n6 2\") == 'abcd'\nassert solution(\"7 3\\n8 2\") == 'baabab'\n\n\"\"\"\nimport unittest\nfrom functools import lru_cache\n\nclass Solution:\n    @lru_cache(None)\n    def get_max_frequency(self, letters):\n        return max(letters.count(letter) for letter in set(letters))\n\n    @lru_cache(None)\n    def get_min_frequency(self, letters, max_frequency):\n        return letters.count(min(letters, key=letters.count))\n\n    def get_count_of_min_frequency_and_max_frequency(self, letters, min_frequency):\n        return min_frequency, self.get_max_frequency(letters) - min_frequency + 1\n\n    def get_letters(self, n, k, min_frequency):\n        min_frequency = min(min_frequency, self.get_max_frequency(chr(i) for i in range(97, 97 + 26)))\n\n        letters = ''\n        count_of_min_frequency, count_of_max_frequency = self.get_count_of_min_frequency_and_max_frequency(letters, min_frequency)\n        while n > 0:\n            if n >= count_of_max_frequency:\n                letters += chr(97 + (count_of_max_frequency - 1) // 26)\n                n -= count_of_max_frequency\n            else:\n                letters += chr(97 + (count_of_min_frequency - 1) // 26)\n                n -= count_of_min_frequency\n\n            if n > 0:\n                count_of_min_frequency, count_of_max_frequency = self.get_count_of_min_frequency_and_max_frequency(letters, min_frequency)\n\n        return letters\n\n    def solution(self, stdin):\n        query_count = int(stdin.readline())\n        return '\\n'.join(self.get_letters(int(query.split()[0]), int(query.split()[1]), int(query.split()[2])) for query in stdin)\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual('cbcacab', Solution().solution(input))"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3') == 'cbcacab'\nassert solution('6 2') == 'abcd'\nassert solution('7 3') == 'cbcacab'\nassert solution('7 2') == 'abcd'\n\"\"\""
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 4\\n3 3\\n3 2') == 'cabcb\\ncbca\\nbccb'\nassert solution('1 1\\n1 1') == 'a'\n\"\"\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\\n4 4\\n6 2\") == \"cbcacab\\nabcd\\nbaabab\"\n\"\"\"\n\nimport os"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(open(r'D:\\Code\\GitHub\\Hackerrank\\test.txt', 'r').read()) == 'abdcba'\nprint('Test Successful')\n\n\n\n-----Benchmark-----\nName: M\u00e4rz, Hans-Peter\nTime Consumed: 0.00ms\n\nName: Dimitrievs, Vlada\nTime Consumed: 0.40ms\n\nName: Gedemir, Andrei-Alexandru\nTime Consumed: 0.09ms\n\nName: Tara, Arpit\nTime Consumed: 0.17ms\n\nName: ivanov, Kirill\nTime Consumed: 0.42ms\n\nName: grishin, Evgeny\nTime Consumed: 0.18ms\n\nName: kondratiev, Aleksandr\nTime Consumed: 0.24ms\n\n\n\n-----My Submissions-----\nName: Teodor, Rusei\nTime Consumed: 0.20ms\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\nimport string"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n4 4\\n6 2\\n\") == \"cbcacab\"\nassert solution(\"1\\n4 4\\n6 2\\n\") == \"abcd\"\nassert solution(\"2\\n4 4\\n6 2\\n\") == \"baabab\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3\\n4 4\\n6 2') == 'cbcacab'\nassert solution('7 3\\n6 2') == 'abcd'\nassert solution('7 3\\n6 4') == 'baabab'\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\") == \"6 23 21\"\nassert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\") == \"1 1000 0\"\nassert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\") == \"2 1 2\"\nassert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\") == \"3 4 2\"\nassert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\") == \"4 4 3\"\n\n\"\"\""
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\"\n\"\"\"\n\nimport sys\nfrom typing import List, Optional\n\nsys.setrecursionlimit(10 ** 6)\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\") == \"6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\"\n\"\"\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n 1 2 3 4 5\\n') == '2 0\\n 3 3\\n'\n\"\"\"\n\nimport sys\n\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    res = 0\n    cnt = 0\n    for i in range(n):\n        res += a[i]\n        if res == 0:\n            cnt += i + 1\n            break\n    cnt += n\n    if n > 1:\n        res = res - sum(a)\n        cnt -= n\n    print(cnt, res, sep='\\n')\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3\\n1 3 4\\n2\\n2 1\\n3\\n4 3\\n5\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n5\\n1 1 1 1 1 1\\n3\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n5\\n1 1 1 1 1 1\\n3\\n4 3\\n5\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n5\\n1 1 1 1 1 1\") == \"6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\\n5\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n5\\n1 1 1 1 1 1\\n3\\n4 3\\n5\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n5\\n1 1 1 1 1 1\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11\\n3 1 4 1 5 9 2 6 5 3 5') == '6 23 21'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\\n1 1 1 1 1 1 1\") == \"6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\"\n\"\"\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n11\\n3 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\\n3\\n1 1 1\\n13\\n1 2 3 4 5 6 7 8 9 10 11 12 13\\n2\\n2 1\\n6\\n1 1 1 1 1 1\\n7\") == \"6 23 21\\n1 1000 0\\n2 1 2\\n6 45 46\\n2 2 1\\n3 4 2\\n4 4 3\"\n\"\"\""
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11\\n1 1 4 1 5 9 2 6 5 3 5\\n1\\n1000\") == '6 23 21'\n\n-----Test-----\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\\n4 4') == '27'\nassert solution('2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\\n4 4') == '39'\nassert solution('2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\\n4 4') == '11'\nassert solution('2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\\n4 4') == '17'\nassert solution('2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\\n4 4') == '17'\n\n\"\"\"\n\n\nimport ast\nfrom itertools import combinations\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 1') == '6'\nassert solution('5 3') == '27'\nassert solution('5 5 6 6 5') == '17'\nassert solution('5 5 6 6 5') == '17'\nassert solution('1 2') == '3'\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"6\"\nassert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"5 3\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"39\"\nassert solution(\"5 4\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"11\"\nassert solution(\"5 5\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"17\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"1 2\\n2 3\\n4 5\\n5 6\") == \"12\"\nassert solution(\"1 2\\n2 3\\n4 5\\n5 6\") == \"12\"\nassert solution(\"1 2\\n2 3\\n4 5\\n5 6\\n5 7\") == \"17\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3') == '7'\nassert solution('3 3') == '0'\nassert solution('5 3') == '9'\nassert solution('2 3') == '8'\n\nassert solution('5 1') == '6'\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2 1\n1 2\n3 4''') == '6'\nassert solution('''5 2\n1 2\n3 4\n5 5\n5 5 6 6 5''') == '27'\nassert solution('''5 3\n1 2\n3 4\n5 5\n5 5 6 6 5''') == '39'\nassert solution('''4 0\n2 2 4 3\n2 4 2 3''') == '17'\nassert solution('''5 4\n1 2 2 1\n4 4 5 4''') == '11'\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"6\\n27\\n39\\n11\\n17\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\nassert solution(\"5 2\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\") == \"27\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\\n4 4\\n1 2 2 1\\n4 4 5 4\\n') == '6\\n27\\n39\\n11\\n17'\nassert solution('3 1\\n1 2\\n3 4\\n5 5\\n5 5 6 6 5\\n1 2 5 4 3\\n5 3\\n1 2 3 4 5\\n10 9 10 10 9\\n4 0\\n2 2 4 3\\n2 4 2 3\\n4 4\\n1 2 2 1\\n4 4 5 4\\n') == '6\\n27\\n39\\n11\\n17'\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"\n\n\n-----Notes-----\n\n\n-----Source-----\n\nhttps://codeforces.com/gym/102150/problem/B\n\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline\n\nn, c = map(int, input().split())\n\nstairs = list(map(int, input().split()))\nelevator = list(map(int, input().split()))\n\nstairs.sort(reverse=True)\nelevator.sort(reverse=True)\n\nans = [0] * n\nfor i in range(n):\n    ans[i] = c + stairs[i] + elevator[i]\n\nprint(' '.join(map(str, ans)))\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout\n\"\"\"\n\nn, c = [int(x) for x in stdin.split(' ')]\nstairs = [int(x) for x in stdin.split('\\n')[1:-1]]\nelevator = [int(x) for x in stdin.split('\\n')[2:-1]]\ns = 0\ne = 0\nres = [0]\nwhile s!= n - 1 or e!= n - 1:\n    if elevator[e] >= stairs[s]:\n        e += 1\n        res.append(elevator[e - 1] + c + stairs[s])\n        s += 1\n    else:\n        s += 1\n        res.append(c + stairs[s])\nprint(*res)"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\\n') == '0 7 13 18 24 35 36 37 40 45'\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\\n') == '0 7 13 18 24 35 36 37 40 45'\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\""
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"\n\n\"\"\"\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5') == '0 7 13 18 24 35 36 37 40 45'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n-----Notes-----\n\n1.  Lists/arrays, even though can be written in many different ways, can be read more naturally from the bottom up.\n2.  What does it mean for two lists to be the same?\n3.  What does it mean for one of them to be empty?\n4.  What does it mean for two lists to have the same size?\n5.  What does it mean for the first list to have the same length as the second list?\n6.  What does it mean for the first list to have the same length as the second list?\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == \"0 7 13 18 24 35 36 37 40 45\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2\\n7 6 18 6 16 18 1 17 17\\n6 9 3 10 9 1 10 1 5\") == '0 7 13 18 24 35 36 37 40 45'\n\n-----Explanation-----\nInput:\n\nThe first line of the input contains two integers $n$ and $c$ \u2014 the number of floors in the building and the time overhead for the elevator rides.\n\nThe second line of the input contains $n - 1$ integers $a_1, a_2, \\dots, a_{n-1}$ \u2014 the time required to go from the $i$-th floor to the $(i+1)$-th one (and from the $(i+1)$-th to the $i$-th as well) using the stairs.\n\nThe third line of the input contains $n - 1$ integers $b_1, b_2, \\dots, b_{n-1}$ \u2014 the time required to go from the $i$-th floor to the $(i+1)$-th one (and from the $(i+1)$-th to the $i$-th as well) using the elevator.\n\n\nOutput:\n\nPrint $n$ integers $t_1, t_2, \\dots, t_n$, where $t_i$ is the minimum total time to reach the $i$-th floor from the first floor if you can perform as many moves as you want.\n\n\nassert solution(10 2\n7 6 18 6 16 18 1 17 17\n6 9 3 10 9 1 10 1 5) == '0 7 13 18 24 35 36 37 40 45'"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 1') == 'aaabb'\nassert solution('5 2') == 'aabab'\nassert solution('5 8') == 'baaba'\nassert solution('5 10') == 'bbaaa'\nassert solution('3 1') == 'aaaaabaaaaabaaaaaaaa'\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aaabb\\n5 1') == 'aaabb'\nassert solution('aaabb\\n5 2') == 'bbaaa'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"ab\"\nassert solution(\"5 1\") == \"aaabb\"\nassert solution(\"5 2\") == \"aabab\"\nassert solution(\"5 8\") == \"baaba\"\nassert solution(\"5 10\") == \"bbaaa\"\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aaabb') == 'aaaaabaaaaabaaaaaaaa'\nassert solution('aaabbbba') == 'aaaaabaaaaabaaaaaaaa'\nassert solution('aabb') == 'aaaaabaaaaabaaaaaaaa'\nassert solution('abb') == 'aaaaabaaaaabaaaaaaaa'\nassert solution('aaabbbbb') == 'aaabbbbaaaaaabaaaaaaaaaabbaaaaaabbaaaaaaabbbabaaaaaaaaabbaaaaaaabbbbb'\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 1') == 'aaabb'\n\"\"\"\n\nimport sys\nfrom typing import List, Tuple, Union, Iterable\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 1') == 'aaabb'\nassert solution('5 2') == 'aabab'\nassert solution('5 8') == 'baaba'\nassert solution('5 10') == 'bbaaa'\nassert solution('3 1') == 'abb'\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2') == 'aaabb'\nassert solution('5 10') == 'baaab'\nassert solution('3 2') == 'aaaaabaaaaab'\nassert solution('3 1') == 'baaaa'\n\"\"\""
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 1\\n5 2\") == \"aaabb\"\n\"\"\"\n\nimport sys\nimport math\nimport statistics\nimport itertools\n\nclass Solution:\n    def solution(self, n, k):\n        def dfs(tup):\n            if n == 2:\n                return tup\n            else:\n                for c in \"ab\":\n                    n = len(tup) + 1\n                    if n > n_max:\n                        return\n                    if n <= 2:\n                        yield (tup, c)\n                    else:\n                        for tup_next in dfs((tup + c, n)):\n                            yield tup_next\n\n        n_max = int(n * (n - 1) / 2)\n        if n < 3:\n            raise ValueError(\"n must be greater than or equal to 3\")\n        if k <= 0 or k > n_max:\n            raise ValueError(\"k must be greater than 0 and less than or equal to n_max\")\n\n        numbers = list(range(1, n + 1))\n        for tup in itertools.combinations_with_replacement(numbers, r=n - 2):\n            if sum(tup) == k:\n                return \"\".join(str(n) for n in tup)\n\n        return None"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aaabb\\n5 1') == 'aaabb'\nassert solution('aabab\\n5 2') == 'aabab'\nassert solution('aaaaabaaaaabaaaaaaaa\\n20 100') == 'aaaaabaaaaabaaaaaaaaa'\nassert solution('aaabb\\n6 1') == 'aaabb'\nassert solution('aabab\\n6 2') == 'aabab'\n\"\"\"\n\nimport itertools\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aaabb\\n\"\n\"aabab\\n\"\n\"baaba\\n\"\n\"bbaaa\\n\"\n\"abb\\n\"\n\"bab\\n\"\n\"aaaaabaaaaabaaaaaaaa\\n\") == \"bbaaa\"\n\"\"\"\n\nfrom itertools import chain, combinations\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"6\"\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"1\"\nassert solution(\"4 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"6\"\nassert solution(\"2 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\") == \"1\"\n\"\"\"\n\n\nfrom typing import List\nfrom collections import Counter\n\n\nclass Solution:\n    def solution(self, stdin: List[str]):\n        pass\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3') == '6\\n1\\n5\\n10'\n\n\"\"\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\") == \"6\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\") == '6'\n\nassert solution(\"5 1\\n2 5 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\") == '1'\n\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n100000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\") == '5'\n\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n100000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\") == '5'\n\nassert solution(\"7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n100000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\") == '5'"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\\n1 1\\n2 2\\n1 2\\n1 1\") == '4'\nassert solution(\"1 1\\n2 2\\n1 1\") == '0'\nassert solution(\"1 1\\n2 2\\n2 1\") == '1'\nassert solution(\"2 4\\n1 1\\n2 2\\n2 1\\n1 2\\n1 2\\n1 2\\n1 1\") == '3'\nassert solution(\"1 2\\n1 3\\n1 2\\n1 4\\n2 1\\n1 3\") == '4'\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4\\n1 1\\n1000000000\\n1000000000\\n5 10\\n10 7 5 15 8\\n20 199 192 219 1904\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3\\n\") == \"6\"\n\nassert solution(\"6 2\\n1 4 3 5 6 2 3 4\\n1 5\\n1 9\\n1 2\\n1 1\\n1 1\\n1 4\\n1 4\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\n\"\"\"\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('7 1') == '1'\nassert solution('1 5 2 3 1 5 4') == '1'\nassert solution('1 3 6 7 2 5 4') == '1'\nassert solution('1 1') == '1'\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4') == '6'\nassert solution('4\\n7 1\\n1 5 2 3 1 5 4\\n1 3 6 7 2 5 4') == '1'\nassert solution('4\\n10 10\\n15 19 8 17 20 10 9 2 10 19\\n12 13 6 17 1 14 7 9 19 3') == '10'"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0\\n1\\n2\\n2\\n0\\n0\\n10\\n') == '1\\n2\\n3\\n3\\n4\\n4\\n7'\nassert solution('4\\n1\\n2\\n1\\n2\\n') == '0\\n0\\n0\\n0'\nassert solution('0\\n1\\n2\\n1\\n2\\n') == '0\\n0\\n0\\n0'\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\n\n-----Problem-----\n\nFind the maximum possible MEX of the array after $q$ queries.\n\nThe first line of the input contains two integers $q, x$ ($1 \\le q, x \\le 4 \\cdot 10^5$) \u2014 the number of queries and the value of $x$.\n\nThe next $q$ lines describe queries. The $j$-th query consists of one integer $y_j$ ($0 \\le y_j \\le 10^9$) and means that you have to append one element $y_j$ to the array.\n\n\n-----Goal-----\n\nFind the maximum possible MEX of the array after $q$ queries.\n\nThe first line of the input contains two integers $q, x$ ($1 \\le q, x \\le 4 \\cdot 10^5$) \u2014 the number of queries and the value of $x$.\n\nThe next $q$ lines describe queries. The $j$-th query consists of one integer $y_j$ ($0 \\le y_j \\le 10^9$) and means that you have to append one element $y_j$ to the array.\n\n\n-----Solution-----\n\nD:\nTime: O(q*n)\nSpace: O(1)"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(s) == s\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3\\n1\\n2\\n1\\n2\\n\") == \"0\\n0\\n0\\n0\""
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\\n\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\\n\"\nassert solution(\"4 3\\n1\\n2\\n1\\n2\\n\") == \"0\\n0\\n0\\n0\\n\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\\n1\\n2\\n1\\n2\") == \"0\\n0\\n0\\n0\"\nassert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\nassert solution(\"4 3\\n0\\n1\\n1\\n0\") == \"0\\n0\\n0\\n0\"\nassert solution(\"7 3\\n0\\n0\\n0\\n0\\n0\\n0\\n10\") == \"0\\n0\\n0\\n0\\n0\\n0\\n7\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\"\n\n\"\"\"\n\n\nfrom collections import defaultdict"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\\n0\\n1\\n2\\n2\\n0\\n0\\n10\") == \"1\\n2\\n3\\n3\\n4\\n4\\n7\\n\"\n\n\"\"\""
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 2 1 0 1 1 0 1 1 1 0 1 1 0 1 1 0 1 1 1 0 1 1 0 1 1 1 0 1 1 0 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3') == '1\\n2\\n3\\n3\\n4\\n4\\n7'\nassert solution('4 3') == '0\\n0\\n0\\n0'\n\"\"\""
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 1 50\\n5 2 100\\n6 2 100\\n7 2 100\\n8 2 100\\n9 2 100') == '4 1 50\\n10 20 40 30 50 10\\n26 32 20 38 44 50\\n'\nassert solution('5 1 4\\n5 2 100\\n6 2 100\\n7 2 100\\n8 2 100\\n9 2 100') == '5 1 4\\n6 2 100\\n7 2 100\\n8 2 100\\n9 2 100\\n'\nassert solution('6 1 4\\n6 2 100\\n7 2 100\\n8 2 100\\n9 2 100') == '6 1 4\\n6 2 100\\n7 2 100\\n8 2 100\\n9 2 100\\n'\nassert solution('8 1 4\\n8 2 100\\n9 2 100') == '8 1 4\\n9 2 100\\n'\nassert solution('4 1 50\\n5 2 100\\n6 2 100\\n7 2 100\\n8 2 100\\n9 2 100') == '4 1 50\\n5 2 100\\n6 2 100\\n7 2 100\\n8 2 100\\n9 2 100\\n'\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str(input())) == str(expected_output)"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_0) == test_0_result\nassert solution(test_1) == test_1_result\n\"\"\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('2\\n1 2') == '1 2'\nassert solution('1\\n2 1') == '2 1'\nassert solution('4\\n2 1 3 4') == '4 2 3 1'\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 1 4\\n1 2 3 4\") == \"1 2 3 4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 49\\n5 20 50\\n6 20 50\") == \"1 49\\n20 40 30 50 10\"\nassert solution(\"5 3 8\\n9 13 22\") == \"1 10 13 4 19 22 25 16 7\"\nassert solution(\"9 13 22\") == \"1 10 13 4 19 22 25 16 7\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2 1 49\n5 20 50\n6 20 50\n5 3 8\n9 13 22''') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3'\nprint('Test pass.')\n\n\"\"\"\nfrom typing import Dict, List, Tuple"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 1 49\\n5 20 50\\n6 20 50\\n5 3 8\\n9 13 22\\n') == '1 49\\n20 40 30 50 10\\n26 32 20 38 44 50\\n8 23 18 13 3\\n1 10 13 4 19 22 25 16 7'\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 49') == '1 49'\nassert solution('5 20 50') == '20 40 30 50 10'\nassert solution('6 20 50') == '26 32 20 38 44 50'\nassert solution('5 3 8') == '8 23 18 13 3'\nassert solution('9 13 22') == '1 10 13 4 19 22 25 16 7'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5 30\\n5 5 5\\n5 5 5') == '1 1\\n1 1\\n1 1'\nassert solution('6 7 49\\n6 6 6\\n6 6 6') == '1 1\\n1 1\\n1 1'\nassert solution('1 1 49') == '1 1'\nassert solution('7 1 1') == '1 1 1 1 1 1 1'\nassert solution('8 1 1') == '1 1 1 1 1 1 1 1'\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3 \"\n------------------------------------------------------------------------------------------------------------------------\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\n\"\"\"\nimport heapq\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\nprint('All tests passed.')\n\"\"\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\n'''"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\n\"\"\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"1 2 3\"\nprint(solution(\"1 2 3\"))\nprint(solution(\"5 3 1 2\"))\nprint(solution(\"10 2 10 3 10 4\"))\nprint(solution(\"1 2 3 4 5\"))\n\n\n\"\"\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\n\"\"\"\n\n\nfrom typing import List\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1 2 3'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '1 2 3 4 5 6 7 8 9 10'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3 1 2\") == \"1 2 3\"\nassert solution(\"4 1 2 10 100\") == \"1 2 10 100\""
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 3 1 2') == '1 2 3'\n\"\"\""
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n2 3\") == \"YES\"\nassert solution(\"3\\n3 3 3\") == \"NO\"\nassert solution(\"4\\n5 5 5 5\") == \"YES\"\nassert solution(\"5\\n1 1 1 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\") == \"NO\"\nassert solution(\"5\\n2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n2 3\\n4\\n2 2 8 8\\n3\\n3 3 3\\n4\\n5 5 5 5\\n4\\n1 1 1 1\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n\"\"\""
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n2 3\") == \"YES\"\nassert solution(\"4\\n2 2 8 8\") == \"NO\"\nassert solution(\"3\\n3 3 3\") == \"YES\"\nassert solution(\"4\\n5 5 5 5\") == \"NO\"\nassert solution(\"1\\n1 1 1 1\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n2 3\\n4\\n2 2 8 8\") == 'YES'\nassert solution(\"3\\n3 3 3\\n4\\n5 5 5 5\") == 'NO'\n\"\"\"\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    odd_sum = 0\n    for i in a:\n        odd_sum += i if i%2!=0 else 0\n    if odd_sum%2==0:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(expected_output)\n\n\"\"\"\n\nimport sys\nimport math\nfrom typing import List\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\n\nfrom bisect import bisect_left\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n3 3 3\\n') == 'NO'\nassert solution('4\\n3 3 1\\n') == 'YES'\nassert solution('1\\n1\\n') == 'YES'\nassert solution('4\\n2 2 8 8\\n') == 'YES'\nassert solution('5\\n2 2 8 8\\n') == 'NO'\n\"\"\""
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n2 3\\n4\\n2 2 8 8\") == \"YES\"\nassert solution(\"3\\n3 3 3\\n4\\n5 5 5 5\") == \"NO\"\nassert solution(\"1\\n1 1 1 1\") == \"YES\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n2\n2 3\n4\n2 2 8 8''') == 'YES'\nassert solution('''5\n2\n3 3\n4\n5 5 5 5''') == 'NO'\nassert solution('''5\n4\n1 1 1 1\n5 5 5 5\n4\n1 1 1 1''') == 'NO'\nassert solution('''1\n1\n1''') == 'NO'\nassert solution('''1\n1\n2''') == 'YES'\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\n6\\n2\\n4\\n1\\n5\\n3') == '9 6 10 8 4 7 3 1 5 2'\n\nassert solution('13\\n11\\n10\\n12\\n14\\n15\\n9\\n7\\n8\\n6\\n3\\n1\\n2\\n4\\n5') == '13 9 7 11 8 4 1 3 5 2 6 10 12 14 15'\n\nassert solution('3\\n2\\n1\\n3') == '1 2 3'\n\nassert solution('2\\n1\\n3') == '1 2 3'\n\nassert solution('1\\n1') == '1'"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6\\n10\\n2\\n4\\n6\\n7\\n13\\n') == '9 6 10 8 4 7 3 1 5 2'\n\"\"\"\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\n9\n10\n2\n4\n6\n7\n13''') == '9 6 10 8 4 7 3 1 5 2'\nassert solution('''5\n7\n2\n4\n6\n13''') == '-1'\nassert solution('''5\n7\n2\n4\n6\n13''') == '-1'\nassert solution('''5\n7\n2\n4\n6\n13''') == '-1'\nassert solution('''4\n7\n2\n4\n6\n13''') == '3 1 4 2'\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == '1 4 2 3'\nassert solution('3') == '1 3 2'\nassert solution('1') == '1'\nassert solution('2') == '1 2'\nassert solution('100') == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99'\n\n-----Notes-----\n\nThe solution is not dependent on the test cases.\n\n\"\"\"\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10\\n2\\n4\\n6\\n7\\n13\\n') == '9 6 10 8 4 7 3 1 5 2'\nassert solution('2\\n4\\n') == '5 3 6 2 4 1'\nassert solution('4\\n6\\n') == '5 1 3 6 2 4 7'\nassert solution('13\\n') == '13 9 7 11 8 4 1 3 5 2 6 10 12'\nassert solution('100\\n') == '-1'\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"4\") == \"3 1 4 2\"\nassert solution(\"6\") == \"5 3 6 2 4 1\"\nassert solution(\"7\") == \"5 1 3 6 2 4 7\"\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"9 6 10 8 4 7 3 1 5 2\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10\\n2\\n4\\n6\\n7\\n13') == '9 6 10 8 4 7 3 1 5 2'\nassert solution('2\\n4\\n6') == '5 3 6 2 4 1'\nassert solution('7\\n13') == '13 9 7 11 8 4 1 3 5 2 6 10 12'\nassert solution('6') == '5 1 3 6 2 4 7'\n\"\"\"\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n2\\n4\\n6\\n7\\n13\\n\") == \"9 6 10 8 4 7 3 1 5 2\"\nassert solution(\"2\\n4\\n6\\n7\\n13\\n\") == \"-1\"\nassert solution(\"4\\n6\\n7\\n13\\n\") == \"5 1 3 6 2 4 7\"\nassert solution(\"4\\n6\\n7\\n13\\n\") == \"5 1 3 6 2 4 7\"\n\"\"\"\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"10\") == \"9 6 10 8 4 7 3 1 5 2\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution([\"3 2 7 6\"]) == \"2\"\nassert solution([\"3 2 6\"]) == \"1\"\nassert solution([\"1\"]) == \"1\"\nassert solution([\"7\"]) == \"0\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution([\"3\", \"2\", \"7\", \"6\"]) == \"2\"\nassert solution([\"3\", \"2\", \"6\"]) == \"1\"\nassert solution([\"1\", \"7\"]) == \"0\"\nassert solution([\"7\", \"4\", \"9\", \"2\", \"1\", \"18\", \"3\", \"0\"]) == \"0\"\n\n'''\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n3 2 7 6\") == 2\nassert solution(\"3\\n3 2 6\") == 1\nassert solution(\"1\\n7\") == -1\nassert solution(\"7\\n7\") == 0"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n3 2 7 6') == '2'\nassert solution('3\\n3 2 6') == '1'\nassert solution('1\\n7') == '-1'"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 2 7 6\") == 2\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\") == \"2\"\nassert solution(\"4\\n1\\n7\\n7\\n4 9 2 1 18 3 0\") == \"0\"\nassert solution(\"4\\n4\\n7\\n7\\n4 9 2 1 18 3 0\") == \"1\"\n\"\"\""
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_0) == test_0_result\nassert solution(test_1) == test_1_result\nassert solution(test_2) == test_2_result\n\"\"\""
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3 2 7 6\\n3\\n3 2 6\\n1\\n7\\n7\\n4 9 2 1 18 3 0\\n\") == \"2\\n1\\n-1\\n0\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n3 2 7 6') == '2'\nassert solution('3\\n3 2 6') == '-1'\nassert solution('1\\n7') == '0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2') == '2'\nassert solution('2 1') == '2'\nassert solution('1 2 1 2') == '3'\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\n1 2') == '2 -1 1 -1'\n\"\"\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\\n') == '2 2 2 2 2 1 1 0 2'\n\"\"\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\\n\") == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\\n\") == \"0 -1 1 -1\""
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\\n\") == \"2 2 2 2 2 1 1 0 2\"\n\nassert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\\n\") == \"0 -1 1 -1\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n0 0 1 1 1 1 1 0 0\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\") == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\"9\\n0 0 0 1 1 1 0 1 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\") == \"0 -1 1 -1\"\n\"\"\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"9\\n0 1 1 1 0 0 0 0 1\\n1 2\\n1 3\\n3 4\\n3 5\\n2 6\\n4 7\\n6 8\\n5 9\") == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\"4\\n0 0 1 0\\n1 2\\n1 3\\n1 4\") == \"0 -1 1 -1\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 1 1 1\\n1 2\\n1 3\\n1 4\\n\") == \"0 -1 1 -1\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n1 2\\n1 3\\n1 4') == '0 -1 1 -1', 'Wrong solution for first example'\nassert solution('5\\n1 2\\n1 3\\n1 4\\n1 5') == '0 -1 1 -1', 'Wrong solution for second example'\nassert solution('5\\n1 2\\n1 3\\n1 4\\n1 5') == '0 -1 1 -1', 'Wrong solution for third example'\n\n\"\"\"\n\nfrom typing import List\nfrom math import inf\n\n\nclass Vertex:\n    def __init__(self, id: int, color: int):\n        self.id = id\n        self.color = color\n        self.children: List[int] = []\n        self.parent = None\n\n    def set_color(self, color):\n        self.color = color\n\n\nclass Tree:\n    def __init__(self, n: int):\n        self.n = n\n        self.vertices: List[Vertex] = []\n\n        for i in range(n):\n            self.vertices.append(Vertex(i, 1))\n\n    def add_edge(self, u: int, v: int):\n        u = self.vertices[u]\n        v = self.vertices[v]\n\n        u.children.append(v.id)\n        v.parent = u.id\n\n    def subtree(self, v: int, u: int) -> int:\n        def dfs(v: int, u: int):\n            if not u:\n                return 0\n            v = self.vertices[v]\n\n            count = 0\n            for child in v.children:\n                if self.vertices[child].color == v.color:\n                    count += dfs(child, u)\n\n            return count + (v.color if not v.parent else 0)\n\n        return dfs(v.id, u)\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n0 1 1 0\\n1 2\\n1 3\\n1 4\") == '2 -1 1 -1'\n\n* Sample input:\n*   5\n*   0 1 1 1 0\n*   1 2\n*   1 3\n*   3 4\n*   3 5\n*   2 6\n*   4 7\n*   6 8\n*   5 9\n*   2 3\n*   1 4\n\n* Sample output:\n*   2 2 2 2 2 1 1 0 2\n\n* Solution:\n*   https://www.youtube.com/watch?v=2MWriLfWdb0\n*   https://www.youtube.com/watch?v=Hn3dv2_Lt8U\n\"\"\"\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 1 1 1\") == \"2 -1 1 -1\"\nassert solution(\"9\\n0 1 1 1 0 0 0 0 1\") == \"2 2 2 2 2 1 1 0 2\"\nassert solution(\"3\\n0 0 1\\n1 2\") == \"0 -1 1\"\nassert solution(\"3\\n0 1 1\") == \"0 -1 1\"\nassert solution(\"7\\n0 0 0 1 1 1 0\\n1 2\") == \"0 -1 1 -1\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n12\\n12345\\n15116544\\n387420489\") == \"0\\n-1\\n2\\n-1\\n-1\\n12\\n36\"\nprint('The local tests are done.')\n\n-----\n| Accuracy | Difficulty | Performance | Difficulty | Correctness | Incorrectness | Comment |\n-----\n| 100.0% |     Easy     |    100.0% |    Easy     |    100.0% |       -1       |   -1   |\n| 100.0% |     Easy     |    100.0% |    Easy     |    100.0% |       -1       |   -1   |\n-----\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n12\\n12345\\n15116544\\n387420489\") == \"2\\n-1\\n2\\n-1\\n-1\\n12\\n36\"\n\"\"\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(123) == 3\n\n-----\n\n\u0412\u0430\u0448\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0438\u043c\u0435\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u0435.\n\n\u0415\u0441\u043b\u0438 \u043e\u043d\u043e \u0434\u043b\u0438\u043d\u043d\u043e\u0435, \u0442\u043e \u043d\u0443\u0436\u043d\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0438 \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430.\n\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u043f\u0430\u043c\u044f\u0442\u044c \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f.\n\n\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0438 \u043f\u043e \u0432\u044b\u0432\u043e\u0434\u0443 \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u0442\u044c \u043d\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0441\u0442\u0440\u043e\u043a.\n\n\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0443 \u0441\u043e \u0441\u0441\u044b\u043b\u043a\u043e\u0439 \u043d\u0430 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0441\u043e\u043f\u0440\u043e\u0432\u043e\u0436\u0434\u0430\u044e\u0449\u0435\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c.\n\n\u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u0440\u0438 \u0432\u044b\u0432\u043e\u0434\u0435 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0435\u0441\u043b\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u0430\u043a \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0432\u043d\u043e 0.\n\n\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438: http://codeforces.com/problemset/problem/865/A\n\n\n\"\"\"\n\nimport math\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n        continue\n    if n == 2:\n        print(1)\n        continue\n    if n == 3:\n        print(2)\n        continue\n\n    if n % 6 == 0:\n        print(n // 6)\n        continue\n\n    q = math.ceil(n / 6)\n    if q > 100:\n        print(-1)\n        continue\n    print(q)\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n7\n1\n2\n3\n12\n12345\n15116544\n387420489\n\"\"\") == \"\"\"\n0\n-1\n2\n-1\n-1\n12\n36\n\"\"\"\n\n\"\"\"\n7\n1\n2\n3\n12\n12345\n15116544\n387420489\n\n2\n1\n2\n3\n12\n12345\n15116544\n387420489\n\n\"\"\"\n\n\"\"\"\n6\n15116544\n387420489\n\"\"\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\") == \"0\\n-1\"\nassert solution(\"3\\n4\") == \"1\\n-1\"\nassert solution(\"123\\n1234\") == \"2\\n6\"\nassert solution(\"12345\\n123456\") == \"2\\n6\"\nassert solution(\"15116544\\n15116544\") == \"5\\n6\"\n\"\"\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n2\") == \"0\"\nassert solution(\"1\\n5\") == \"2\"\nassert solution(\"1\\n8\") == \"3\"\nassert solution(\"1\\n9\") == \"1\"\nassert solution(\"1\\n10\") == \"-1\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('15116544') == '12'\nassert solution('15116544') == '36'\nassert solution('15116544') == '-1'\nassert solution('387420489') == '15116544'\n\n\n---Sample Test Cases---\nInput 1:\n1\n1\nOutput 1:\n0\nInput 2:\n2\n1\n2\nOutput 2:\n-1\nInput 3:\n2\n9\n6\nOutput 3:\n2\n-1\nInput 4:\n1\n0\nOutput 4:\n-1\nInput 5:\n1\n2\nOutput 5:\n2\n\n----"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"15116544\") == \"36\"\nassert solution(\"387420489\") == \"-1\"\nassert solution(\"12345\") == \"12\"\nassert solution(\"1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == 0\nassert solution(\"2\") == -1\nassert solution(\"3\") == 2\nassert solution(\"6\") == -1\nassert solution(\"12\") == 2\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n1\\n2\\n3\\n12\\n12345\\n15116544\\n387420489\") == \"2\\n-1\\n2\\n-1\\n-1\\n12\\n36\"\n\"\"\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"RGBRGBRGB\") == 0\nassert solution(\"RBRRBB\") == 2\nassert solution(\"BBBBRRRRR\") == 4\nassert solution(\"BBRRRRRRRRR\") == 6\nassert solution(\"RRRBBB\") == 2\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"BGGGG\", 5, 2) == 1\nassert solution(\"RBRGR\", 5, 3) == 0\nassert solution(\"BBBRR\", 5, 5) == 3\n\"\"\""
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('RRRRRRRR') == '4'\nassert solution('RRRRRRR') == '4'\nassert solution('RRRRRR') == '5'\nassert solution('RRRRR') == '5'\nassert solution('RRRR') == '6'\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"5 2\") == 0\nassert solution(\"5 3\") == 3\n\"\"\"\nfrom utils import read_input, write_output\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('R') == 'R'\nassert solution('RB') == 'RR'\nassert solution('RR') == 'RR'\nassert solution('RG') == 'RR'\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"BBBBR\", 3) == \"BBB\"\n\"\"\"\nimport sys\nfrom typing import List\n\nassert solution(sys.stdin.read()) == '\\n'.join(sys.stdin.readlines()).strip()\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BGGGG\") == \"1\"\nassert solution(\"RBRGR\") == \"0\"\nassert solution(\"BBBRR\") == \"3\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RGBGR\") == 3\nassert solution(\"RGBB\") == 2\nassert solution(\"BBRGB\") == 0\nassert solution(\"RGRRGRGB\") == 3\nassert solution(\"RGR\") == 2\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"RBRGR\") == 3\nassert solution(\"BBBRR\") == 0\n\"\"\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"BGGGG\") == 1\nassert solution(\"RBRGR\") == 0\nassert solution(\"BBBRR\") == 3\n\"\"\""
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\") == '3'\nassert solution(\"1\\n3 1 2 3 1\") == '3'\nassert solution(\"3\\n4 4 7 4 4\") == '2'\nassert solution(\"1\\n4 7 4 4\") == '1'\n\nassert solution(\"1\\n6 2 6 4 4\") == '4'\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 1 1 1 1\") == 3\nassert solution(\"4\\n3 1 2 3 1\") == 3\nassert solution(\"4\\n5 1 2 3 1\") == 3\nassert solution(\"4\\n7 1 1 1 1 2 2\") == 3\nassert solution(\"4\\n5 1 2 3 1\") == 3\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n3 1 2 3\\n4 1 2 3') == '4'\nassert solution('2\\n3 1 2\\n4 1 2') == '3'\nassert solution('1\\n1 2 3') == '0'\n\"\"\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1\\n1 2\\n\") == \"2\"\n\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\\n\") == 3\nassert solution(\"5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\\n\") == 3\nassert solution(\"5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\\n\") == 3\nassert solution(\"5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\\n\") == 3\nassert solution(\"5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2\\n\") == 3\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution([\"5\", \"3\", \"1\", \"2\", \"3\", \"1\"]) == \"3\"\nassert solution([\"7\", \"1\", \"1\", \"1\", \"1\", \"2\", \"2\"]) == \"3\"\n\n\"\"\"\nfrom collections import defaultdict\n\nclass Graph:\n    def __init__(self, vertices):\n        self.graph = defaultdict(list)\n        self.V = vertices\n\n    def addEdge(self, u, v):\n        self.graph[u].append(v)\n\n    def isCyclicUtil(self, v, visited, recStack):\n        visited[v] = True\n        recStack[v] = True\n\n        for neighbor in self.graph[v]:\n            if visited[neighbor] == False:\n                if self.isCyclicUtil(neighbor, visited, recStack) == True:\n                    return True\n            elif recStack[neighbor] == True:\n                return True\n\n        recStack[v] = False\n        return False\n\n    def isCyclic(self):\n        visited = [False] * self.V\n        recStack = [False] * self.V\n\n        for node in range(self.V):\n            if visited[node] == False:\n                if self.isCyclicUtil(node, visited, recStack) == True:\n                    return True\n        return False"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2') == '3\\n3\\n3'\nassert solution('3\\n5\\n3 1 2 3 1\\n7\\n1 1 1 1 1 2 2') == '3\\n3\\n3'\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n4\\n1 1 1 1 1 2 2\") == \"2\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 3 4 5\\n3 9 9 9\\n\") == \"4\\n2\\n3\"\nassert solution(\"3\\n1 3 4\\n9\\n\") == \"3\\n1\\n2\"\nassert solution(\"1\\n1\\n9\") == \"1\\n1\\n1\"\nassert solution(\"2\\n1 2\\n9\\n\") == \"1\\n1\\n1\"\nassert solution(\"2\\n1 3\\n9\\n\") == \"1\\n1\\n0\"\n\n\"\"\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n3 1 2 3\\n1 1 1 1\") == \"2\"\nassert solution(\"1\\n3 1 2 3\") == \"3\""
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"4\\n1 2 4 3\") == \"1 2 3 4\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"4\\n4 3 2 1\") == \"1 2 3 4\"\n\"\"\"\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 4 1 3 2\") == \"1 5 2 4 3 \"\nassert solution(\"4\") == \"1 2 3 4 \"\nassert solution(\"1\") == \"1 \"\nassert solution(\"4 3 2 1\") == \"1 2 3 4 \"\nassert solution(\"3 2 1\") == \"1 2 3 \"\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n4\\n5 4 1 3 2\") == \"1 5 2 4 3\"\n\"\"\"\n\nimport itertools\nimport sys\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == '1 5 2 4 3'\nassert solution(\"4\\n4 3 2 1\") == '1 2 3 4'\n\n\"\"\"\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"3\\n1\\n1\\n4\\n4 3 2 1\") == \"1 2 3 4\"\n\n\"\"\"\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n4 3 2 1\\n1 2 4 3\") == \"1 5 2 4 3\"\nassert solution(\"4\\n1 2 4 3\\n1\") == \"1\"\nassert solution(\"4\\n5\\n4 3 2 1\") == \"1 5 2 4 3\"\nassert solution(\"4\\n4 3 2 1\\n4 3 2 1\") == \"1 2 3 4\"\n\"\"\""
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n5\\n5 4 1 3 2\") == \"1 5 2 4 3\"\nassert solution(\"1\\n1\") == \"1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n5\\n5 4 1 3 2') == '1 5 2 4 3'\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n5\\n4 1 3 2\") == \"1 5 2 4 3 \"\nassert solution(\"3\\n4\\n1 2 3\") == \"1 2 3 4 \"\nassert solution(\"1\\n1\") == \"1 \"\nassert solution(\"1\\n2\") == \"1 2 \"\nassert solution(\"1\\n3\") == \"1 3 2 \"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n5\n4\n1 2 3 4\n3\n1 3 2\n5\n1 2 3 5 4\n1\n1\n5\n3 2 1 5 4\n''') == 'YES\\nYES\\nNO\\nYES\\nYES'\n\nassert solution('''\n5\n4\n1 2 3 4\n3\n1 3 2\n5\n1 2 3 5 4\n1\n1\n5\n3 2 1 5 4\n''') == 'YES\\nYES\\nNO\\nYES\\nYES'\n\nassert solution('''\n4\n4\n1 2 3 4\n2\n1 3 2\n5\n1 2 3 4\n1\n1\n5\n3 2 1 4\n''') == 'YES\\nYES\\nNO\\nYES'\n\nassert solution('''\n5\n4\n1 2 3 4\n2\n1 3 2\n5\n1 2 3 5 4\n1\n1\n5\n3 2 1 5 4\n''') == 'YES\\nYES\\nNO\\nYES'\n\nassert solution('''\n4\n4\n1 2 3 4\n2\n1 3 2\n5\n1 2 3 4\n1\n1\n5\n3 2 1 4\n''') == 'NO\\nNO\\nNO\\nNO'"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4') == 'YES\\nYES\\nNO\\nYES\\nYES'\n\n-----Explanation-----\n\nThe order of the students can be: [1, 2, 3, 4], [1, 3, 2, 4], [1, 2, 4, 3], [1, 3, 4, 2], [1, 4, 2, 3], [1, 4, 3, 2]\n\nThe first query is \"Is it possible to start a round dance with this order of students?\"\nThe answer is \"YES\" because we can start the round dance with [1, 2, 3, 4].\nThe second query is \"Is it possible to start a round dance with this order of students?\"\nThe answer is \"YES\" because we can start the round dance with [1, 3, 2, 4].\nThe third query is \"Is it possible to start a round dance with this order of students?\"\nThe answer is \"NO\" because [1, 2, 4, 3] is not the order of the students.\nThe fourth query is \"Is it possible to start a round dance with this order of students?\"\nThe answer is \"YES\" because [1, 2, 3, 5] is the order of the students.\nThe fifth query is \"Is it possible to start a round dance with this order of students?\"\nThe answer is \"YES\" because [1, 2, 3, 4] is the order of the students.\n\"\"\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\") == \"YES\"\nassert solution(\"5\\n1 2 3 5 4\\n1\\n1\") == \"YES\"\nassert solution(\"5\\n1 2 3 5 4\\n5\\n3 2 1 5 4\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\nprint(solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\"))\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\") == \"YES\"\nassert solution(\"5\\n1 2 3 4 5\\n1\\n1\") == \"YES\"\nassert solution(\"5\\n1 2 3 4 5\\n2\\n3 1\") == \"NO\""
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str([\n    '5',\n    '4',\n    '1 2 3 4',\n    '3',\n    '1 3 2',\n    '5',\n    '1 2 3 5 4',\n    '1',\n    '1',\n    '5',\n    '3 2 1 5 4',\n])) == 'YES\\nYES\\nNO\\nYES\\nYES'\n\"\"\""
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\" * 5\n\n\"\"\"\n\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    order = list(map(int, input().split()))\n    dance_order = {i: order[i-1] for i in range(1, n+1)}\n    visited = [0] * n\n    stack = []\n    for i in range(n):\n        if visited[i] == 0:\n            visited[i] = 1\n            stack.append(i)\n            while stack:\n                cur = stack.pop()\n                visited[cur] = 1\n                next_ = dance_order[cur]\n                if visited[next_] == 0:\n                    visited[next_] = 1\n                    stack.append(next_)\n                else:\n                    break\n    if all(v == 1 for v in visited):\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n3\\n1 2 3 4\\n1\\n1\\n5\\n3 2 1 5 4\\n\") == \"YES\"\n\"\"\"\n\nfrom collections import deque\nfrom itertools import islice\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\\n1\\n1\\n5\\n3 2 1 5 4\") == \"YES\\nYES\\nNO\\nYES\\nYES\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"YES\"\nassert solution(\"4\\n1 2 3 4\\n3\\n1 3 2\\n5\\n1 2 3 5 4\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5 18 10 6 75015\"\n\"\"\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '5\\n18\\n10\\n6\\n75015'\nassert solution('5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '5\\n18\\n10\\n6\\n75015'\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"\nassert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"\nassert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"\nassert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"\nassert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '5\\n18\\n10\\n6\\n75015'\n\"\"\"\nfrom collections import Counter\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n2 3') == '5\\n18'\nassert solution('19 4\\n12 7\\n6 2\\n100000 50010') == '19\\n18\\n10\\n6\\n75015'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n4 2\\n5 2\\n6 1\\n7 1') == '6'\nassert solution('2 3\\n4 2\\n5 2\\n6 1\\n7 1') == '6'\nassert solution('1 1\\n1 1000000000') == '1'\nassert solution('1 1\\n1 1000000000') == '1'\nassert solution('1 1000000000') == '1'\n\nimport sys"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5 18 10 6 75015\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n5 2\n19 4\n12 7\n6 2\n100000 50010\n''') == '5\\n18\\n10\\n6\\n75015'\n\"\"\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 2\\n19 4\\n12 7\\n6 2\\n100000 50010') == '5 18\\n10\\n6 75015'\n\n\"\"\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\") == \"5\\n18\\n10\\n6\\n75015\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9\") == 'YES\\n4 2 4\\nYES\\n55 5 5 35\\nNO\\nNO\\nYES\\n1 1 1 1 1 1 1 1\\nNO\\nYES\\n3 1 1'\n\"\"\"\nimport sys\n\ntests = int(sys.stdin.readline().strip())\n\nfor i in range(tests):\n    n, k = map(int, sys.stdin.readline().strip().split())\n    for j in range(k):\n        if j % 2!= (n % 2):\n            break\n    else:\n        sys.stdout.write('YES\\n')\n        sys.stdout.write(f'{n // k}'* k)\n    sys.stdout.write('NO\\n')\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8 10\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9\") == \"YES\\n4 2 4\\nYES\\n55 5 5 35\\nNO\\nNO\\nYES\\n1 1 1 1 1 1 1 1\\nNO\\nYES\\n3 1 1\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100 4\\n8 7\") == \"YES\\n4 2 4\"\nassert solution(\"8 8\\n3 10\") == \"YES\\n55 5 5 35\"\nassert solution(\"1000000000 9\") == \"YES\\n1 1 1 1 1 1 1 1 1\"\nassert solution(\"11 100\\n1 1\") == \"YES\\n1 1 1\"\nassert solution(\"1 100\\n1 1\") == \"YES\\n1 1 1\"\n\"\"\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\n3\\n7') == 'YES\\n4 2 4'\nassert solution('100\\n4\\n8\\n97\\n8\\n3\\n10') == 'YES\\n55 5 5 35'\nassert solution('100000009\\n3\\n1000000000\\n9\\n3\\n100000009') == 'NO\\nNO\\nYES\\n1 1 1 1 1 1 1 1'\nassert solution('3\\n2\\n3\\n4\\n5\\n6\\n7') == 'NO\\nNO\\nNO'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n10 3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9\") == \"YES\\n4 2 4\"\nassert solution(\"4\\n2\\n1 2\\n3 4\") == \"YES\\n1 1 1\"\nassert solution(\"8\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9\") == \"NO\"\nassert solution(\"8\\n10 3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9\") == \"YES\\n4 2 4\"\nassert solution(\"8\\n10 3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9\") == \"YES\\n4 2 4\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 3\") == \"YES\\n4 2 4\"\nassert solution(\"100 4\") == \"YES\\n55 5 5 35\"\nassert solution(\"8 7\") == \"YES\\n55 5 5 35\"\nassert solution(\"97 2\") == \"NO\"\nassert solution(\"8 8\") == \"YES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 11111120\"\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n10 3') == 'YES\\n4 2 4'\nassert solution('100\\n4\\n8 7') == 'YES\\n55 5 5 35'\nassert solution('97\\n2\\n8 8') == 'YES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120'\nassert solution('8\\n100 4') == 'NO'\nassert solution('3\\n1\\n1') == 'YES\\n1 1 1'\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8\\n10 3') == 'YES\\n4 2 4'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''8\n10 3\n100 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9''') == '''YES\n4 2 4\nYES\n55 5 5 35\nNO\nNO\nYES\n1 1 1 1 1 1 1 1\nNO\nYES\n3 1 1'''\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n4 3\") == \"YES\\n4 2 4\"\nassert solution(\"10 3\\n100 4\\n8 7\\n97 2\\n8 8\\n3 10\\n5 3\\n1000000000 9\") == \"YES\\n4 2 4\\nYES\\n55 5 5 35\\nNO\\nNO\\nYES\\n1 1 1 1 1 1 1 1\\nNO\\nYES\\n3 1 1\"\nassert solution(\"5\\n1 1\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10\") == \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\"\nassert solution(\"10\\n2 1\\n3 1\\n4 1\\n5 1\\n6 1\\n7 1\\n8 1\\n9 1\\n10 1\") == \"YES\\n1 1 1 1 1 1 1 1\\nNO\\nYES\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\nassert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n') == '4\\n55\\n15000000000000000\\n51'\nassert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n' * 100) == '4\\n55\\n15000000000000000\\n51'"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"55\\n15000000000000000\\n51\"\n\"\"\""
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\nprint(solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\"))\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == expected\n\na, b, c = [int(x) for x in stdin.split('\\n')]\nreturn str(min(c, a + b - c))\n\n\n-----Explanation-----\n\nThe code looks simple, but here is the explanation.\n\nWe need to divide the piles so that each person gets the same number of candies. There are two options:\n\nFirst we can first divide the piles in such a way that Alice gets one candy less than Bob. For example, if we choose the third pile, then Bob gets one more candy than Alice.\n\nAlice and Bob can then divide the other two piles in such a way that Alice gets the same number of candies as Bob.\n\nHere is a drawing to help you visualize the two possible divisions:\n\nDivide the first two piles so that Alice gets one more candy than Bob:\n\nAlice gets 1 + 4 + 4 = 9 candies\nBob gets 3 + 3 + 3 = 9 candies\n\nAlice and Bob can now divide the remaining two piles so that they each get the same number of candies:\n\nAlice gets the same number of candies as Bob (2 candies each)\nBob gets the same number of candies as Alice (3 candies each)\n\nIf we divide the first two piles in such a way that Alice gets the same number of candies as Bob, then the number of candies in the third pile is discarded, so the total number of candies is 10.\n\n>>> solution(stdin)\n4\n55\n15000000000000000\n51\n\n\n\"\"\""
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(a) == e\nprint(solution(a))\n\n'''"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45') == '4\\n55\\n15000000000000000\\n51'\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n\") == \"4\\n55\\n15000000000000000\\n51\"\n\"\"\"\n\n\"\"\"\n\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0432\u0441\u0442\u0430\u0432\u043a\u043e\u0439\n\n\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0432\u0441\u0442\u0430\u0432\u043a\u043e\u0439\n\u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043d\u0430\u043a\u043e\u043f\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u043e\u0433\u0440\u0435\u0441\u0441 \u0447\u0430\u0441\u0442\u043e\u0442 \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u043c \u0441 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043d\u0430 \u043d\u0435\u043f\u043e\u043b\u043d\u043e\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0435\n\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0447\u0438\u0441\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 q. \u041a\u0430\u0436\u0434\u0430\u044f \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 q \u0441\u0442\u0440\u043e\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0441 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b. \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0441\u0435\u043b, \u0432\u0441\u0435 \u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0435 \u043e\u0442 \u043d\u0443\u043b\u044f \u0434\u043e 10000000000000000.\n\n\u0412\u044b\u0432\u043e\u0434 \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0441\u0442\u043e\u043b\u044c\u043a\u043e \u0436\u0435 \u0447\u0438\u0441\u0435\u043b, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043e, \u043d\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438.\n\nSample Input:\n\n4\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45\nSample Output:\n\n4\n55\n15000000000000000\n51\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\n\"\"\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 1 3\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n\") == '4\\n55\\n15000000000000000\\n51'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\") == \"4\\n55\\n15000000000000000\\n51\"\nprint(\"test passed\")\n\n---"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"6 3\\nabcbac\") == \"6\"\nassert solution(\"3 6\\naaa\") == \"3\"\nassert solution(\"7 1000\\nabczgyo\") == \"7\"\nassert solution(\"5 4\\nababa\") == \"4\"\nassert solution(\"20 10\\naaebdbabdbbddaadaadc\") == \"15\"\n\"\"\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 6\\nabbac\") == \"3\"\nassert solution(\"6 3\\nabbac\") == \"3\"\nassert solution(\"1 0\\nab\") == \"1\"\nassert solution(\"20 10\\naaebdbabdbbddaadaadc\") == \"10\"\nassert solution(\"20 5\\necbedececacbcbccbdec\") == \"5\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3\\nabcbac\") == 6\nassert solution(\"3 6\\naaa\") == 3\nassert solution(\"7 1000\\nabczgyo\") == 5\nassert solution(\"5 4\\nababa\") == 4\nassert solution(\"20 10\\naaebdbabdbbddaadaadc\") == 10\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\neccedececacbcbccbdec\\n\") == \"6\\n3\\n5\\n4\\n15\\n10\"\nassert solution(\"1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\nabc\\n1 1\\"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\nabc\\n1 2 3\\n\") == \"1\"\nassert solution(\"5 2\\nab\\n1 2 3\\n\") == \"1\"\nassert solution(\"5 2\\nab\\n3 4\\n\") == \"0\"\nassert solution(\"5 3\\nabcd\\n1 2 3\\n\") == \"1\"\nassert solution(\"5 3\\nabcd\\n1 2 3\\n\") == \"1\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"abcd\") == \"abcd\"\nassert solution(\"abcde\") == \"abcde\"\nassert solution(\"abcdefg\") == \"abcdefg\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abcbac\") == 6\nassert solution(\"aaa\") == 3\nassert solution(\"abczgyo\") == 5\nassert solution(\"ecbedececacbcbccbdec\") == 4\nassert solution(\"ababa\") == 5\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 3 abcbac\") == \"6\"\nassert solution(\"3 6 aaa\") == \"3\"\nassert solution(\"7 1000 aaebdbabdbbddaadaadc\") == \"7\"\nassert solution(\"5 4 ababa\") == \"4\"\nassert solution(\"20 10 aaebdbabdbbddaadaadc\") == \"10\"\n\"\"\""
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 3\\nabcbac\\n3 6\\naaa\\n7 1000\\nabczgyo\\n5 4\\nababa\\n20 10\\naaebdbabdbbddaadaadc\\n20 5\\necbedececacbcbccbdec\") == \"6\\n3\\n5\\n4\\n15\\n10\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abcbac') == 3\nassert solution('aa') == 2\nassert solution('abca') == 3\nassert solution('aaaa') == 1\nassert solution('abcbac') == 3\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3\\n7 18 3 14 1') == 'YES\\n1 3 5'\nassert solution('5 4\\n1 2 3 4 5') == 'NO'\nassert solution('6 2\\n1 2 8 4 10 2') == 'NO'\n\"\"\"\n\n\"\"\"\nimport heapq\n\nq = int(input())\nfor _ in range(q):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    pq = [(a[0], 0)]\n    d = {i: True for i in range(1, n + 1)}\n    for i in range(1, n):\n        x = a[i]\n        while pq and pq[0][0] < x:\n            if d[pq[0][1]]:\n                d[pq[0][1]] = False\n                heapq.heappop(pq)\n            else:\n                break\n        if pq:\n            p = pq[0][1]\n            if p >= k:\n                print('NO')\n                break\n        else:\n            p = k - 1\n        heapq.heappush(pq, (x, p + 1))\n    else:\n        if d[k - 1]:\n            print('NO')\n        else:\n            print('YES')\n            print(*[i + 1 for i in pq[0][1:]], sep=' ')\n\"\"\"\n\nimport heapq\n\nq = int(input())\nfor _ in range(q):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    pq = [(a[0], 0)]\n    d = {i: True for i in range(1, n + 1)}\n    for i in range(1, n):\n        x = a[i]\n        while pq and pq[0][0] < x:\n            if d[pq[0][1]]:\n                d[pq[0][1]] = False\n                heapq.heappop(pq)\n            else:\n                break\n        if pq:\n            p = pq[0][1]\n            if p >= k:\n                print('NO')\n                break\n        else:\n            p = k - 1\n        heapq.heappush(pq, (x, p + 1))\n    else:\n        if d[k - 1]:\n            print('NO')\n        else:\n            print('YES')\n            print(*[i + 1 for i in pq[0][1:]], sep=' ')\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n7 18 3 14 1') == 'NO'\nassert solution('5 4\\n1 2 3 4 5') == 'YES'\nassert solution('6 2\\n1 2 8 4 10 2') == 'NO'\nassert solution('1 2 8 4 10 2') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3\\n7 18 3 14 1\\n5 4\\n1 2 3 4 5\\n6 2\\n1 2 8 4 10 2') == 'NO\\nNO\\nNO'\n\"\"\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\\n1 2 3 4 5\\n3\\n1 2 4 5\") == \"YES\\n1 3 5\"\nassert solution(\"2 3\\n1 2 3\\n1\\n2 2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n1 2 3 4 5\") == \"YES\\n1 3 5\"\nassert solution(\"2 3\\n1 2 3\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n5 3') == 'NO'\nassert solution('2\\n5 2') == 'YES\\n1 2'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\\n1 2 3\") == \"NO\"\nassert solution(\"2 2\\n1 2\") == \"YES\"\nassert solution(\"5 3\\n2 1 4 2 5\") == \"NO\"\nassert solution(\"5 4\\n1 2 3 4 5\") == \"YES\"\nassert solution(\"6 2\\n1 2 8 4 10 2\") == \"NO\"\n\n\"\"\"\n\n\"\"\"\n\u0420\u0410\u0417\u0414\u0415\u041b\u0418\u0422\u042c \u0410\u0420\u0415\u041d\u0414\u0423 \u0412\u041e\u0417\u0414\u0423\u0425\u041d\u042b\u041c\u0418 \u0421\u041f\u041e\u0421\u041e\u0411\u0410\u041c\n\u0412 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 n \u0447\u0438\u0441\u0435\u043b \u043d\u0430\u0439\u0434\u0438\u0442\u0435 \u043d\u0435 \u0432\u0441\u0435, \u043d\u043e \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c \u0447\u0438\u0441\u043b\u0430, \u043e\u0431\u0440\u0430\u0437\u0443\u044e\u0449\u0438\u0439 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0449\u0438\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c:\n\n\u041f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u043c\u044b\u0439 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c \u2014 \u044d\u0442\u043e \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u0435\u043d\u044c\u0448\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 n, \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0449\u0438\u0439 \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438.\n\u0422\u043e\u0433\u0434\u0430 \u043d\u0435 \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430, \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0435 \u044d\u0442\u043e\u043c\u0443 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044e, \u0438\u043c\u0435\u044e\u0442 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0430 \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442: \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0435 \u0447\u0438\u0441\u043b\u0430 \u043c\u0435\u043d\u044c\u0448\u0435 \u044d\u0442\u043e\u0433\u043e \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u0447\u0438\u0441\u043b\u0430 12 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u043c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e 2, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0434\u043b\u044f \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u0439 2 \u0438 3.\n\u0414\u043b\u044f \u0447\u0438\u0441\u043b\u0430 12 \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u0435\u043b:\n12, 6, 4, 3, 2, 1.\n\n\u0414\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 n, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0445 \u044d\u0442\u043e\u043c\u0443 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044e, \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0449\u0435\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437\u043d\u044b\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \ufffd"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\\n2 2 3 4 1\") == \"YES\\n1 3\\nNO\"\nassert solution(\"5 1\\n1 2 3 4 5\") == \"YES\\n5\"\nassert solution(\"5 2\\n1 2 3 4 5\") == \"NO\"\nassert solution(\"5 3\\n1 2 3 4 5\") == \"NO\"\nassert solution(\"6 2\\n1 2 8 4 10 2\") == \"NO\"\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 18 3 14 1') == 'YES\\n1 3 5'\nassert solution('5 4') == 'NO'\n\"\"\""
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\n1 2 3 4\") == \"YES\\n1 2 3\\nNO\\n\"\n\"\"\"\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('111011011111100111011110110111111011') == '10111111111111111111111111111111'\nassert solution('10011111111111111111111111111111111') == '3221225471'\nassert solution('111111111111111111111111111111111111') == '3221225471'\nassert solution('111111111111111111111111111111101') == '3221225471'\nassert solution('111011011111100111011110110111111011') == '10111111111111111111111111111111'\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"111111111111111111111111111111101\") == 3221225471\n\"\"\""
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"111011111111111111111111111101\") == 3221225471\n\"\"\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(0b010111101110011001111111111101) == 964176192\nassert solution(0b111111111111111111111111111111101) == 3221225471\nassert solution(0b111111111111111111111111111111110) == 3221225470\n\n\"\"\""
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11111111111111111111111111111111') == '3221225471'\nassert solution('111111111111111111111111111111101') == '3221225471'\n\"\"\""
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"111011011011100111011110111101111011\") == \"101101111011100111011110111101111011\"\nassert solution(\"100110111111111111111111111111111101\") == \"3221225471\"\nassert solution(\"1111111111111111111111111111111111101\") == \"3221225471\"\nassert solution(\"11111111111111111111111111111111111011\") == \"3221225471\"\nassert solution(\"1111111111111111111111111111111111111110111\") == \"3221225471\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"101011100\") == \"10\"\nassert solution(\"11111111111111111111111111111101\") == \"3221225471\"\nassert solution(\"1110111111111111111111111111011\") == \"3221225471\"\nassert solution(\"11101111111111111111111111111101\") == \"3221225471\"\nassert solution(\"11111111111111111111111111111010\") == \"3221225471\"\n\"\"\""
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11111111111111111111111111111101') == '3221225471'\nassert solution('1011011011011011011011011011011') == '964176192'\n\"\"\""
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"111111111111111111111111111111101\") == \"3221225471\"\nassert solution(\"111001011\") == \"1322155\"\nassert solution(\"100101101\") == \"11111111\"\nassert solution(\"1111111111\") == \"10111111\"\nassert solution
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == '''[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]'''\n\nassert solution('1') == '[1]'\n\nassert solution('4') == '''[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1]\n]'''\n\nassert solution('0') == '[]'"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') ==\nassert solution('6') ==\n\"\"\""
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n\"\"\""
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5) == [\n    [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n\n\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        result = []\n        for i in range(numRows):\n            row = [None] * (i + 1)\n            row[0], row[-1] = 1, 1\n            for j in range(1, len(row) - 1):\n                row[j] = result[i - 1][j - 1] + result[i - 1][j]\n            result.append(row)\n        return result\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"[\\n [1],\\n [1,1],\\n [1,2,1],\\n [1,3,3,1],\\n [1,4,6,4,1]\\n]\"\nassert solution(\"4\") == \"[\\n [1],\\n [1,1],\\n [1,2,1],\\n [1,3,3,1]\\n]\"\nassert solution(\"3\") == \"[\\n [1],\\n [1,1],\\n [1,2,1]\\n]\"\nassert solution(\"2\") == \"[\\n [1],\\n [1,1]\\n]\"\nassert solution(\"1\") == \"[\\n [1]\\n]\"\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5') == [\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\nassert solution('3') == [[1], [1, 1], [1, 2, 1]]\n\n\"\"\"\nfrom typing import List\nfrom functools import reduce\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n\n\"\"\""
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n\"\"\"\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == [\n    [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\nluis@test.com\\nryan@test.com\\nryan@test.com\\nluis@test.com') == ['luis@test.com', 'ryan@test.com', 'ryan@test.com']\n\n=====Test 1=====\n\n====== Test 1: Invalid Emails\n>>> solution('3\\nryan@test.com\\nryan@test.com\\nluis@test.com')\n['ryan@test.com', 'luis@test.com']\n\n====== Test 2: Valid Emails\n>>> solution('4\\nluis@test.com\\nryan@test.com\\nryan@test.com\\nluis@test.com')\n['luis@test.com', 'ryan@test.com', 'ryan@test.com', 'luis@test.com']\n\n=====Test 3=====\n\n====== Test 1: Invalid Emails\n>>> solution('1\\nryan@test.com')\n['ryan@test.com']\n\n====== Test 2: Valid Emails\n>>> solution('1\\nluis@test.com')\n['luis@test.com']\n\n=====Test 4=====\n\n====== Test 1: Invalid Emails\n>>> solution('4\\nryan@test.com\\nryan@test.com\\nluis@test.com\\nluis@test.com')\n['ryan@test.com', 'luis@test.com']\n\n====== Test 2: Valid Emails\n>>> solution('4\\nluis@test.com\\nryan@test.com\\nryan@test.com\\nluis@test.com')\n['luis@test.com', 'ryan@test.com', 'ryan@test.com', 'luis@test.com']\n\n=====Test 5=====\n\n====== Test 1: Invalid Emails\n>>> solution('5\\nluis@test.com\\nryan@test.com\\nryan@test.com\\nluis@test.com\\nluis@test.com')\n['luis@test.com', 'ryan@test.com', 'ryan@test.com', 'luis@test.com', 'luis@test.com']\n\n====== Test 2: Valid Emails\n>>> solution('5\\nluis@test.com\\nryan@test.com\\nryan@test.com\\nluis@test.com\\nluis@test.com')\n['luis@test.com', 'ryan@test.com', 'ryan@test.com', 'luis@test.com', 'luis@test.com']\n\n=====Test 6=====\n\n====== Test 1: Invalid Emails\n>>> solution('6\\nluis@test.com\\nryan@test.com\\nryan@test.com\\nluis@test.com\\nluis@test.com\\nluis@test.com')\n['luis@test.com', 'ryan@test.com', 'ryan@test.com', 'luis@test.com', 'luis@test.com', 'luis@test.com']\n\n====== Test 2: Valid Emails\n>>> solution('6\\nluis@test.com\\nryan@test.com\\nryan@test.com\\nluis@test.com\\nluis@test.com\\nluis@test.com')\n['luis@test.com', 'ryan@test.com', 'ryan@test.com', 'luis@test.com', 'luis@test.com', 'luis@test.com']\n\n=====Test 7=====\n\n====== Test 1: Invalid Emails\n>>> solution('7\\nluis@test.com\\nryan@test.com\\nryan@test.com\\nluis@test.com\\nluis@test.com\\nluis@test.com\\nluis@test.com')\n['luis@test.com', 'ryan@test.com', 'ryan@test.com', 'luis@test.com', 'luis@test.com', 'luis@test.com']\n\n====== Test 2: Valid Emails\n>>> solution('7\\nluis@test.com\\nryan@test.com\\nryan@test.com\\nluis@test.com\\nluis@test.com\\nluis@test.com\\nluis@test.com')\n['luis@test.com', 'ryan@test.com', 'ryan@test.com', 'luis@test.com', 'luis@test.com', 'luis@test.com']\n\n=====Test 8=====\n\n====== Test 1: Invalid Emails\n>>> solution('8\\nluis@test.com\\nryan@test.com\\nryan@test.com\\nluis@test.com\\nluis@test.com\\nluis@test.com\\nluis@test.com\\nluis@test.com')\n['luis@test.com', 'ryan@test.com', 'ryan@test.com', 'luis@test.com', 'luis@test.com', 'luis@test.com']\n\n====== Test 2: Valid Emails\n>>> solution('8\\nluis@test.com\\nryan@test.com\\nryan@test.com\\nluis@test.com\\nluis@test.com\\nluis@test.com\\nluis@test.com\\nluis@test.com')\n['luis@test.com', 'ryan@test.com', 'ryan@test.com', 'luis@test.com', 'luis@test.com', 'luis@test.com']\n\n=====Test 9=====\n\n====== Test 1: Invalid Emails\n>>> solution('9\\nluis@test.com\\nryan@test.com\\nryan@test.com\\nluis@test.com\\nluis@test.com\\nluis@test.com\\nluis@test.com\\nluis@test.com')\n['luis@test.com', 'ryan@test.com', 'ryan@test.com', 'luis@test.com', 'luis@test.com', 'luis@test.com']\n\n====== Test 2: Valid Emails\n>>> solution('9\\nluis@test.com\\nryan@test.com\\nryan@test.com\\nluis@test.com\\nluis@test.com\\nluis@test.com\\nluis@test.com\\nluis@test.com')\n['luis@test.com', 'ryan@test.com', 'ryan@test.com', 'luis@test.com', 'luis@test.com', 'luis@test.com']\n\n=====Test 10=====\n\n====== Test 1: Invalid Emails\n>>> solution('10\\nluis@test.com\\nryan@test.com\\nryan@test.com\\nluis@test.com\\nluis@test.com\\nluis@test.com\\nluis@test.com\\nluis@test.com\\nluis@test.com')\n['luis@test.com', 'ryan@test.com', 'ryan@test.com', '"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''2\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com''') == ['brian-23@hackerrank.com', 'britts_54@hackerrank.com']"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''2\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n3\nbrian@hackerrank.com\nbritts@hackerrank.com\nlara@hackerrank.com\n''') == ['brian-23@hackerrank.com', 'britts@hackerrank.com', 'lara@hackerrank.com']\nassert solution('''0\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n3\nbrian@hackerrank.com\nbritts@hackerrank.com\nlara@hackerrank.com\n''') == []\nassert solution('''4\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n3\nbrian@hackerrank.com\nbritts@hackerrank.com\nlara@hackerrank.com\n''') == ['brian-23@hackerrank.com', 'britts_54@hackerrank.com', 'lara@hackerrank.com']\nassert solution('''0\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\n3\nbrian@hackerrank.com\nbritts@hackerrank.com\nlara@hackerrank.com\n''') == []\n\nThe input will always be valid.\n\n=====Test Case=====\nn = int(input())\n\nnumbers = []\n\nfor _ in range(n):\n    numbers.append(input())\n\n=====Result=====\nn = int(input())\n\nnumbers = []\n\nfor _ in range(n):\n    numbers.append(input())\n\nfiltered_emails = []\n\nfor email in numbers:\n    if '@' in email and '.' in email:\n        split_email = email.split('@')\n\n        is_valid_email = True\n\n        for element in split_email:\n            if len(element) < 1:\n                is_valid_email = False\n                break\n\n            for character in element:\n                if not (character.isalpha() or character.isdigit() or character == '_' or character == '-'):\n                    is_valid_email = False\n                    break\n\n        if is_valid_email:\n            if split_email[0][0].isalpha() and split_email[0][-1].isalpha():\n                filtered_emails.append(email)\n\n\nfiltered_emails.sort()\n\nfor filtered_email in filtered_emails:\n    print(filtered_email)\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com''') == ['brian-23@hackerrank.com', 'britts_54@hackerrank.com']\nassert solution('''0\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com''') == ['brian-23@hackerrank.com', 'britts_54@hackerrank.com']\nassert solution('''4\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\nabcd@hackerrank.com''') == ['britts_54@hackerrank.com', 'brian-23@hackerrank.com', 'abcd@hackerrank.com']\nassert solution('''1\nlara@hackerrank.com''') == ['lara@hackerrank.com']\nassert solution('''4\nlara@hackerrank.com\nbrian-23@hackerrank.com\nbritts_54@hackerrank.com\nabcd@hackerrank.com''') == ['brian-23@hackerrank.com', 'britts_54@hackerrank.com', 'abcd@hackerrank.com']\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"2\\n\"\n    \"Foo Bar@example.com\\n\"\n    \"Jon Snow@winterfell.com\\n\"\n) == [\n    \"Foo Bar@example.com\",\n    \"Jon Snow@winterfell.com\",\n]\n\nassert solution(\n    \"4\\n\"\n    \"Foo Foo-bar@example.com\\n\"\n    \"Foo-bar Foo@example.com\\n\"\n    \"Foo.bar@example.com\\n\"\n    \"Foo-bar@example.com\\n\"\n) == [\n    \"Foo Foo-bar@example.com\",\n    \"Foo-bar Foo@example.com\",\n    \"Foo.bar@example.com\",\n    \"Foo-bar@example.com\",\n]\n\nassert solution(\n    \"3\\n\"\n    \"Foo-bar Foo@example.com\\n\"\n    \"Foo.bar@example.com\\n\"\n    \"Foo.Bar@example.com\\n\"\n) == [\n    \"Foo-bar Foo@example.com\",\n    \"Foo.bar@example.com\",\n    \"Foo.Bar@example.com\",\n]\n\nassert solution(\n    \"1\\n\"\n    \"Foo@example.com\\n\"\n) == [\n    \"Foo@example.com\",\n]\n\nassert solution(\n    \"3\\n\"\n    \"Foo_Bar@example.com\\n\"\n    \"foo.bar@example.com\\n\"\n    \"foo-bar@example.com\\n\"\n) == [\n    \"Foo_Bar@example.com\",\n    \"foo-bar@example.com\",\n    \"foo.bar@example.com\",\n]"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\nrich@edX.org\\nalice@example.com') == ['alice@example.com', 'rich@edX.org']\n\"\"\""
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nriya-sharma_99@google.com\\njames.doe@myself.com\\nritesh-kumar_999@youtube.com\\njane.doe@codecareer.ca\") == [\n    'james.doe@myself.com', 'ritesh-kumar_999@youtube.com', 'riya-sharma_99@google.com', 'jane.doe@codecareer.ca']\n\nassert solution(\"2\\nriya-sharma_99@google.com\\nritesh-kumar_999@youtube.com\") == [\n    'riya-sharma_99@google.com', 'ritesh-kumar_999@youtube.com']\n\n\"\"\"\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\nanna\\nanna@hackerrank.com\\nbritts_54') == ['anna@hackerrank.com', 'britts_54']\nassert solution('0\\nanna\\nanna@hackerrank.com\\nbritts_54') == ['anna@hackerrank.com']\nassert solution('0\\nanna\\nanna@hackerrank.com\\nbritts_54\\n') == ['anna@hackerrank.com', 'britts_54']\nassert solution('0\\nanna\\nanna@hackerrank.com\\nbritts_54\\n\\n') == ['anna@hackerrank.com', 'britts_54']\nassert solution('0\\nanna\\nanna@hackerrank.com\\nbritts_54\\nanna@hackerrank.com') == ['anna@hackerrank.com']\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\nrich@gmail.com\\njames@gmail.com\\njohn@gmail.com\\nbob@gmail.com') == ['bob@gmail.com', 'james@gmail.com', 'rich@gmail.com', 'john@gmail.com']\n\nSolution:\n\nimport re\n\nl = []\nfor i in range(int(input())):\n    s = input()\n    if(re.search(\"@\", s) and re.search(\"\\.\", s)):\n        l.append(s)\nprint(sorted(l))\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\nrich@gmail.com\\n\") == ['gmail.com', 'rich@gmail.com']\n\"\"\"\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == [0, 1, 1, 8]\nprint(solution(input()))\n\n>>>>>>> 3eac9a2286e8c8d90ecc85b65e0ff8d47f172512\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == [1, 1]\nassert solution(\"3\") == [1, 1, 1]\nassert solution(\"5\") == [1, 1, 1, 1, 1]\n=====Test Case=====\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4') == [1, 8, 27, 64]\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4') == [0, 1, 1, 8]\nprint(solution(4))\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == [1]\nassert solution(\"2\") == [1, 1]\nassert solution(\"3\") == [1, 1, 2]\nassert solution(\"4\") == [1, 1, 2, 4]\nassert solution(\"5\") == [1, 1, 2, 4, 7]\n=====Test Case=====\nInput Format\n\nThe first and only line of input contains the number N, the number of fibonacci numbers.\n\nOutput Format\n\nOutput a single line containing the list of cubes of the first N fibonacci numbers.\n\nConstraints\n\n1 <= N <= 1000\n\n=====Sample Input=====\n10\n=====Sample Output=====\n[0, 1, 1, 8, 34, 144, 610, 2584, 10946, 40585]\n>>>>>>> 02dce2f7d1883584c5b5f3cac5f0e37321f79bfe\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == [0, 1, 1, 8, 27]\nassert solution('6') == [0, 1, 1, 8, 27, 125]\nprint(solution(input()))\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4') == [0, 1, 1, 8]\n\n====== Sample Test Case 1 ======\n>> Input\n\n4\n\n>> Output\n\n[0, 1, 1, 8]\n'''"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5') == [0, 1, 1, 8, 27]\n\nassert solution('3') == [0, 1, 8]\n\nassert solution('4') == [0, 1, 1, 16]\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == [0, 1, 1, 8]\n\n=====Test Case 1=====\ninput\n\n7\n\noutput\n\n[0, 1, 1, 8, 27, 64, 125]\n\n=====Test Case 2=====\ninput\n\n10\n\noutput\n\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512]\n\n=====Test Case 3=====\ninput\n\n1\n\noutput\n\n[0]\n\n=====Test Case 4=====\ninput\n\n0\n\noutput\n\n[]\n\n=====Test Case 5=====\ninput\n\n1\n\noutput\n\n[0]\n\n=====Test Case 6=====\ninput\n\n5\n\noutput\n\n[0, 1, 1, 8, 27]\n\n=====Test Case 7=====\ninput\n\n4\n\noutput\n\n[0, 1, 1, 8]\n\n=====Test Case 8=====\ninput\n\n6\n\noutput\n\n[0, 1, 1, 8, 27, 64]\n\n=====Test Case 9=====\ninput\n\n2\n\noutput\n\n[0, 1]\n\n=====Test Case 10=====\ninput\n\n3\n\noutput\n\n[0, 1, 1]\n\n=====Test Case 11=====\ninput\n\n0\n\noutput\n\n[]\n\n=====Test Case 12=====\ninput\n\n2\n\noutput\n\n[0, 1]\n\n=====Test Case 13=====\ninput\n\n1\n\noutput\n\n[0]\n\n=====Test Case 14=====\ninput\n\n-1\n\noutput\n\n[]\n\n'''\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == [1, 8, 27, 64]\n\"\"\"\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n<data>\n    <country name=\"Liechtenstein\">\n        <rank updated=\"yes\">1</rank>\n        <year>2008</year>\n        <gdppc>141100</gdppc>\n        <neighbor name=\"Austria\" direction=\"E\"/>\n    </country>\n    <country name=\"Singapore\">\n        <rank updated=\"yes\">4</rank>\n        <year>2011</year>\n        <gdppc>59900</gdppc>\n        <neighbor name=\"Malaysia\" direction=\"N\"/>\n    </country>\n    <country name=\"Panama\">\n        <rank updated=\"yes\">68</rank>\n        <year>2011</year>\n        <gdppc>13600</gdppc>\n        <neighbor name=\"Costa Rica\" direction=\"W\"/>\n        <neighbor name=\"Colombia\" direction=\"E\"/>\n    </country>\n</data>\n\"\"\") == 1\n\n=====Output=====\n2\n\n=====Test Case 2=====\nWhat is the maximum level of nesting in the following XML document?\n\n<stuff>\n    <users>\n        <user x=\"2\">\n            <id>001</id>\n            <name>Chuck</name>\n        </user>\n        <user x=\"7\">\n            <id>009</id>\n            <name>Brent</name>\n        </user>\n    </users>\n</stuff>\n=====Output=====\n1\n\n=====Test Case 3=====\nWhat is the maximum level of nesting in the following XML document?\n\n<stuff>\n    <users>\n        <user x=\"2\">\n            <id>001</id>\n            <name>Chuck</name>\n            <interests>\n                <interest x=\"2\">cheese</interest>\n                <interest x=\"7\">Thatcher</interest>\n            </interests>\n        </user>\n        <user x=\"7\">\n            <id>009</id>\n            <name>Brent</name>\n            <interests>\n                <interest x=\"2\">Thatcher</interest>\n                <interest x=\"7\">Thatcher</interest>\n            </interests>\n        </user>\n    </users>\n</stuff>\n=====Output=====\n2\n\n=====Test Case 4=====\nWhat is the maximum level of nesting in the following XML document?\n\n<stuff>\n    <users>\n        <user x=\"2\">\n            <id>001</id>\n            <name>Chuck</name>\n            <interests>\n                <interest x=\"2\">cheese</interest>\n                <interest x=\"7\">Thatcher</interest>\n            </interests>\n            <interests>\n                <interest x=\"2\">cheese</interest>\n                <interest x=\"7\">Thatcher</interest>\n            </interests>\n        </user>\n        <user x=\"7\">\n            <id>009</id>\n            <name>Brent</name>\n            <interests>\n                <interest x=\"2\">Thatcher</interest>\n                <interest x=\"7\">Thatcher</interest>\n            </interests>\n        </user>\n    </users>\n</stuff>\n=====Output=====\n2\n\"\"\"\n\nimport xml.etree.ElementTree as etree\n\n\nclass XMLTreeNode:\n    def __init__(self, node):\n        self.name = node.tag\n        self.attrib = node.attrib\n        self.children = list()\n        self.max_level = 0\n\n    def __repr__(self):\n        return f\"Node(name={self.name}, children={self.children})\"\n\n\nclass XMLTree:\n    def __init__(self, filepath):\n        self.root = etree.parse(filepath).getroot()\n\n    def traverse_tree(self, node):\n        node_obj = XMLTreeNode(node)\n        for child in node:\n            node_obj.children.append(self.traverse_tree(child))\n            node_obj.max_level = max(node_obj.max_level, child.tag)\n        return node_obj\n\n    def max_level_nesting(self):\n        return self.traverse_tree(self.root).max_level\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n<data>\n    <country name=\"Liechtenstein\">\n        <rank updated=\"yes\">2</rank>\n        <year>2008</year>\n        <gdppc>141100</gdppc>\n        <neighbor name=\"Austria\" direction=\"E\"/>\n    </country>\n    <country name=\"Singapore\">\n        <rank updated=\"yes\">5</rank>\n        <year>2011</year>\n        <gdppc>59900</gdppc>\n        <neighbor name=\"Malaysia\" direction=\"N\"/>\n    </country>\n    <country name=\"Panama\">\n        <rank updated=\"yes\">69</rank>\n        <year>2011</year>\n        <gdppc>13600</gdppc>\n        <neighbor name=\"Costa Rica\" direction=\"W\"/>\n        <neighbor name=\"Colombia\" direction=\"E\"/>\n    </country>\n</data>\n''') == 3\nprint(\"Passed\")\n=====Question 2=====\nYou are given a valid XML document, and you have to print the maximum level of nesting in it. Take the depth of the root as 0.\n\n<x>\n    <y>1</y>\n    <z>2</z>\n</x>\n\n=====Output Format=====\nOutput a single line, the integer value of the maximum level of nesting in the XML document.\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == '3'\n\"\"\"\n\n\"\"\"\n\nimport xml.etree.ElementTree as etree\n\nmaxdepth = 0\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 4\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Aakash</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 3\n\nprint(\"Success\")\n'''"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('<feed xml:lang='\">\\n \\\n <title>HackerRank</title>\\n \\\n <subtitle lang='en'>Programming challenges</subtitle>\\n \\\n <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\\n \\\n <updated>2013-12-25T12:00:00</updated>\\n \\\n </feed>') == 1\nassert solution('<feed xml:lang='\">\\n \\\n <title>HackerRank</title>\\n \\\n <subtitle lang='en'>Programming challenges</subtitle>\\n \\\n <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\\n \\\n <updated>2013-12-25T12:00:00</updated>\\n \\\n <entry>\\n \\\n  <title>HTML</title>\\n \\\n </entry>\\n \\\n <entry>\\n \\\n  <title>C#</title>\\n \\\n </entry>\\n \\\n <entry>\\n \\\n  <title>CSS</title>\\n \\\n </entry>\\n \\\n </feed>') == 2\nassert solution('<feed xml:lang='\">\\n \\\n <title>HackerRank</title>\\n \\\n <subtitle lang='en'>Programming challenges</subtitle>\\n \\\n <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\\n \\\n <updated>2013-12-25T12:00:00</updated>\\n \\\n <entry>\\n \\\n  <title>HTML</title>\\n \\\n </entry>\\n \\\n <entry>\\n \\\n  <title>C#</title>\\n \\\n </entry>\\n \\\n <entry>\\n \\\n  <title>CSS</title>\\n \\\n </entry>\\n \\\n <entry>\\n \\\n  <title>Javascript</title>\\n \\\n </entry>\\n \\\n </feed>') == 3\n'''\nimport xml.etree.ElementTree as etree\n\nmaxdepth = 0\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 2\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 0\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <title>Challenge 001</title>\n    </entry>\n    <entry>\n        <title>Challenge 002</title>\n    </entry>\n</feed>\n''') == 1\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <title>Challenge 001</title>\n    </entry>\n    <entry>\n        <title>Challenge 002</title>\n    </entry>\n    <entry>\n        <title>Challenge 003</title>\n    </entry>\n</feed>\n''') == 2\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <title>Challenge 001</title>\n    </entry>\n    <entry>\n        <title>Challenge 002</title>\n    </entry>\n    <entry>\n        <title>Challenge 003</title>\n    </entry>\n    <entry>\n        <title>Challenge 004</title>\n    </entry>\n</feed>\n''') == 0\n'''\n=====Test Case 1=====\n>>> solution('''\n... <feed xml:lang='en'>\n...     <title>HackerRank</title>\n...     <subtitle lang='en'>Programming challenges</subtitle>\n...     <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n...     <updated>2013-12-25T12:00:00</updated>\n... </feed>\n... ''')\n2\n\n>>> solution('''\n... <feed xml:lang='en'>\n...     <title>HackerRank</title>\n...     <subtitle lang='en'>Programming challenges</subtitle>\n...     <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n...     <updated>2013-12-25T12:00:00</updated>\n...     <entry>\n...         <title>Challenge 001</title>\n...     </entry>\n...     <entry>\n...         <title>Challenge 002</title>\n...     </entry>\n... </feed>\n... ''')\n0\n\n>>> solution('''\n... <feed xml:lang='en'>\n...     <title>HackerRank</title>\n...     <subtitle lang='en'>Programming challenges</subtitle>\n...     <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n...     <updated>2013-12-25T12:00:00</updated>\n...     <entry>\n...         <title>Challenge 001</title>\n...         <entry>\n...             <title>Challenge 001.1</title>\n...         </entry>\n...     </entry>\n... </feed>\n... ''')\n1\n\n>>> solution('''\n... <feed xml:lang='en'>\n...     <title>HackerRank</title>\n...     <subtitle lang='en'>Programming challenges</subtitle>\n...     <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n...     <updated>2013-12-25T12:00:00</updated>\n...     <entry>\n...         <title>Challenge 001</title>\n...         <entry>\n...             <title>Challenge 001.1</title>\n...         </entry>\n...     </entry>\n... </feed>\n... ''')\n2\n\n>>> solution('''\n... <feed xml:lang='en'>\n...     <title>HackerRank</title>\n...     <subtitle lang='en'>Programming challenges</subtitle>\n...     <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n...     <updated>2013-12-25T12:00:00</updated>\n...     <entry>\n...         <title>Challenge 001</title>\n...         <entry>\n...             <title>Challenge 001.1</title>\n...         </entry>\n...     </entry>\n... </feed>\n... ''')\n0\n'''\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('<data>'\n               ' <items>'\n               '   <users>'\n                '<user>'\n               ' <id>001</id>'\n                '<name>Chuck</name>'\n                '</user>'\n                '</users>'\n                '</items>'\n                '</data>') == 3\nassert solution('<data>'\n               ' <items>'\n               '   <users>'\n               ' <user>'\n               '   <id>001</id>'\n                '<name>Chuck</name>'\n                '</user>'\n               '   <id>009</id>'\n               '   <name>Brent</name>'\n                '</user>'\n                '</users>'\n                '</items>'\n                '</data>') == 1\nassert solution('<data>'\n               ' <items>'\n               '   <users>'\n               '   <user>'\n                '<id>00100</id>'\n                '<name>Chuck</name>'\n                '</user>'\n                '</users>'\n                '</items>'\n                '</data>') == 2\n\n====== Sample Output 0 =======\n3\n\n====== Explanation 0 =======\nThe root tag, the maximum level of nesting is 3.\n\n=====Challenge=====\nCan you solve this problem in constant space complexity?\n\n=====Solution=====\n\"\"\"\n\nfrom xml.etree import ElementTree"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('<data>'\n               '   <animal>'\n               '       <name>dog</name>'\n               '       <pet></pet>'\n               '       <age>3</age>'\n               '   </animal>'\n               '   <animal>'\n               '       <name>cat</name>'\n               '       <age>3</age>'\n               '   </animal>'\n                '</data>') == 1\n\n\nassert solution('<data>'\n               '   <animal>'\n               '       <name>dog</name>'\n               '       <pet></pet>'\n               '       <age>3</age>'\n               '       <pet></pet>'\n               '       <age>3</age>'\n               '   </animal>'\n               '   <animal>'\n               '       <name>cat</name>'\n               '       <age>3</age>'\n               '   </animal>'\n                '</data>') == 2\n\nassert solution('<data>'\n               '   <animal>'\n               '       <name>dog</name>'\n               '       <pet></pet>'\n               '       <age>3</age>'\n               '       <pet></pet>'\n               '       <age>3</age>'\n               '       <pet></pet>'\n               '       <age>3</age>'\n               '   </animal>'\n               '   <animal>'\n               '       <name>cat</name>'\n               '       <age>3</age>'\n               '       <pet></pet>'\n               '   </animal>'\n                '</data>') == 3\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 1\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 2\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 2\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 3\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n''') == 3\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 3\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 2\n=====\nWrite 5 lines of code to test the correctness of solution:\n>>>>>>> edd383739d1f5cfc0a0e9d8ee0d78b2b21138b7\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7806282828') == 'YES'\nassert solution('8806282828') == 'YES'\nassert solution('9880632828') == 'YES'\nassert solution('7863282828') == 'NO'\nassert solution('7806282828') == 'NO'\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('(010)234-5678') == 'YES'\nassert solution('(01)234-5678') == 'NO'\nassert solution('(01)234-5678') == 'NO'\nassert solution('(0)234-5678') == 'YES'\nassert solution('(01)234-5678') == 'NO'\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"73486987654\") == \"YES\"\nassert solution(\"8348698765\") == \"NO\"\nassert solution(\"9348698765\") == \"YES\"\nassert solution(\"9348698767\") == \"NO\"\nassert solution(\"93848698765\") == \"YES\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('79999999999') == 'YES'\nassert solution('977777777777') == 'YES'\nassert solution('9999999999') == 'NO'\nassert solution('77777777777') == 'YES'\nassert solution('77799777777') == 'NO'\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7234567890\") == \"YES\"\nassert solution(\"789\") == \"NO\"\nassert solution(\"1223456789\") == \"NO\"\n\n=====Test 5=====\nYour input\n\n5\n7791234567\n(123) 456-7890\n(123) 456 7890\n123-456-7890\n123.456.7890\n123*456*7890\n\nExpected output\n\nYES\nNO\nNO\nNO\nNO\n\"\"\"\nimport re\nfor _ in range(int(input())):\n    number = input()\n    if re.match(r'^[789]\\d{9}$', number) is not None:\n        print('YES')\n    else:\n        print('NO')\n\"\"\"\n\"\"\"\nimport re\nn = int(input())\nfor _ in range(n):\n    number = input()\n    if re.match(r'^[789]\\d{9}$', number) is not None:\n        print('YES')\n    else:\n        print('NO')\n\"\"\"\n\"\"\"\nimport re\nn = int(input())\nfor _ in range(n):\n    number = input()\n    if len(number) == 10 and number[0] in '789' and number[1:].isdigit():\n        print('YES')\n    else:\n        print('NO')\n\"\"\""
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7805236987\") == \"YES\"\nassert solution(\"9348576234\") == \"YES\"\nassert solution(\"2932654875\") == \"NO\"\nassert solution(\"9234567899\") == \"NO\"\nassert solution(\"92345678901\") == \"NO\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('(800) 123-4567') == 'YES'\nassert solution('(800) 456-7890') == 'YES'\nassert solution('(800) 456-7890') == 'NO'\nassert solution('(123) 456-7890') == 'NO'\nassert solution('(800) 456-7890') == 'NO'\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('867-5309') == 'YES'\nassert solution('867-5308') == 'NO'\n\nassert solution('8') == 'YES'\nassert solution('93') == 'NO'\nassert solution('hello') == 'NO'"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('(123) 456-7890') == 'YES'\nassert solution('(123) 456-7890') == 'YES'\nassert solution('(123) 456-7890') == 'YES'\nassert solution('(123) 456-7890') == 'YES'\nassert solution('(123) 456-7890') == 'YES'\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"79999999999\") == \"YES\"\nassert solution(\"79876543210\") == \"YES\"\nassert solution(\"123456789\") == \"NO\"\nassert solution(\"987654321\") == \"NO\"\nassert solution(\"1234567890\") == \"NO\"\n\n=====Test Cases=====\nInput:\n1\n79999999999\n\nOutput:\nYES\n\nInput:\n2\n95874563210\n1234567890\n\nOutput:\nYES\nNO\n\"\"\"\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 4 6 8\\n4\\n2 3 6 8 9') == '6 9'\nassert solution('4\\n2 4 6 8\\n4\\n2 3 6 7 9') == '6 7 9'\nassert solution('4\\n2 4 6 8\\n4\\n2 4 6 8 9') == '6 8 9'\nassert solution('4\\n2 4 6 8\\n4\\n2 4 7 8 9') == '6 8 9'\nassert solution('4\\n2 4 6 8\\n4\\n2 4 7 9 8 9') == '6 8 9'\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 6 7\\n3\\n1 2 4 11\") == \"2\\n11\"\n\n=====Test Case=====\nInput\n\n4\n2 3 6 7\n3\n1 2 4 11\nOutput\n\n2\n11\nExplanation\n\nThe symmetric difference of the set of integers, M= {2, 3, 6, 7} and the set of integers, N= {1, 2, 4, 11} is {11, 2, 3, 7}.\n\n\n\"\"\""
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n2 4 6 8\\n4\\n2 3 6 7') == '2\\n6\\n8'\n=====Test Time=====\nSample Input 1\n\n4\n2 4 6 8\n4\n2 3 6 7\nSample Output 1\n\n2\n6\n8\n\nExplanation\n\nConstraints\n\n0 < M, N < 1000\n\nInput Format\nThe first line contains an integer, M.\nThe second line contains M space-separated integers.\nThe third line contains an integer, N.\nThe fourth line contains N space-separated integers. \n\nSample Input 2\n\n6\n1 2 3 4 5 6\n3\n9 8 5 6 3\nSample Output 2\n\n1\n2\n3\n4\n5\n6\n8\n9\n\nExplanation\n\nConstraints\n\n0 < M, N < 1000\n\nInput Format\nThe first line contains an integer, M.\nThe second line contains M space-separated integers.\nThe third line contains an integer, N.\nThe fourth line contains N space-separated integers. \n\nSample Input 3\n\n6\n1 2 3 6 5 4\n6\n9 8 5 4 3 6\nSample Output 3\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\"\"\"\n\nimport os\n\nclass Solution(object):\n    def func(self):\n        a = set([int(i) for i in input().split(' ')])\n        b = set([int(i) for i in input().split(' ')])\n        print(*sorted(a^b, key=int), sep='\\n')\n        \n        # os.system('> test_temp.txt')\n        # os.system('cat test_temp.txt')\n\n        # print(*sorted(a), sep='\\n')\n        # print(*sorted(b), sep='\\n')\n        # print(*sorted(a^b), sep='\\n')\n        \n        # os.system('> test_temp.txt')\n        # os.system('cat test_temp.txt')\n        # print(a)\n        # print(b)\n        # print(a^b)\n        # print(*sorted(a^b, key=int), sep='\\n')\n\n        # input()\n        # input()\n        # input()\n        # input()"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 4 6 8\\n3\\n2 4 11 12') == '6\\n8\\n12'\nassert solution('4\\n2 4 6 8\\n3\\n2 4 11 12') == '6\\n8\\n12'\nassert solution('4\\n2 4 6 8\\n3\\n2 4 11 12') == '6\\n8\\n12'\nassert solution('4\\n2 4 6 8\\n3\\n2 4 11 12') == '6\\n8\\n12'\n\n=====Notes=====\nAll the data provided in the input format is already converted to integer.\n\n'''\n\nm, m_set = int(input()), set(input().split())\nn, n_set = int(input()), set(input().split())\n\nprint(*sorted(m_set.symmetric_difference(n_set)))\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 6 5\\n3\\n1 2 3 4 7 8 9\") == \"8 9\"\nassert solution(\"4\\n2 3 6 5\\n3\\n1 2 3 4 7 8 9\\n\") == \"1 2 5 6 7 8 9\"\nassert solution(\"4\\n2 3 6 5\\n3\\n1 2 3 4 7 8 9\\n1\") == \"2 3 4 5 6 7 8 9\"\nassert solution(\"4\\n2 3 6 5\\n3\\n1 2 3 4 7 8 9\\n8\") == \"1 2 3 4 5 6 7 9\"\nassert solution(\"4\\n2 3 6 5\\n3\\n1 2 3 4 7 8 9\\n9\") == \"1 2 3 4 5 6 7 8\"\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\n2\n5\n2\n4''') == '''3\n5'''\nassert solution('''5\n5\n5\n5\n5''') == '''5\n'''\nassert solution('''4\n5\n6\n3\n4''') == '''6\n8'''\nassert solution('''5\n2\n2\n2\n2''') == '''5\n6\n8\n10\n12'''\nassert solution('''3\n3\n3\n3\n3''') == '''''\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n2 4 6 8\\n4\\n2 3 6 8\") == \"2\\n6\\n8\"\nassert solution(\"5\\n2 4 6 8 10\\n4\\n2 3 6 8 10\") == \"2\\n6\\n8\"\nassert solution(\"7\\n2 4 6 8 10 11\\n4\\n2 3 6 8 10 11\") == \"2\\n6\\n8\\n10\\n11\"\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 4 3 2') == '2 3 5'\nassert solution('5 5 5 2 2') == '2'\nassert solution('6 7 5 5') == '5 6'\nassert solution('6 6 1 1') == '1'\nassert solution('6 6') == '1'\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n1 2 3 4 5\n6\n2 3 5 6 8 9''') == '8 9'\nassert solution('''5\n1 2 3 4 5\n6\n2 3 5 6 8 9''') == '1 4 8 9'\n\nassert solution('''5\n1 2 3 4 5\n6\n2 3 5 6 8 9''') == '1 4 8 9'\nassert solution('''5\n1 2 3 4 5\n6\n2 3 5 6 8 9''') == '1 4 8 9'\n\nassert solution('''5\n1 2 3 4 5\n6\n2 3 5 6 8 9''') == '1 4 8 9'\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n\"\n        \"1 2 3 4\\n\"\n        \"5 6 7 8\"\n    ) == \"5\\n8\\n6\"\nassert solution(\"3\\n\"\n        \"3 4 5\"\n    ) == \"4\\n5\"\nassert solution(\"5\\n\"\n        \"1 2 3 4 5\"\n    ) == \"1\\n2\\n3\\n4\\n5\"\n\n=====Test Case=====\nTest 1\n\nInput\n\n3\n1 2 3 4\n5 6 7 8\nOutput\n\n5\n8\n6\nExplanation\n\nM = {1, 2, 3, 4}\nN = {5, 6, 7, 8}\n\nSymmetric Difference = ( M \\ N ) U ( N \\ M )\n\nAs the numbers in the two sets are not equal, we can use a set union and set difference operations.\n\n(M \\ N) = {1, 2, 3}\n(N \\ M) = {4, 5, 6, 7, 8}\n(M \\ N) U (N \\ M) = {1, 2, 3, 4, 5, 6, 7, 8}\n\nSince the set difference operation is commutative, we can simply take the union of M and N, and then take the set difference between the result and M.\n\n(M U N) - M = {1, 2, 3, 4, 5, 6, 7, 8} - {1, 2, 3} = {4, 5, 6, 7, 8}\n\nWe can further break down this solution into simpler lines of code."
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\nID\\nMARKS\\nCLASS\\nNAME\\n1\\nabc\\n100\\nxyz\\n\") == 100.0\n\n[Method 1]: By sorting\n[(marks, ID), (marks, ID), (marks, ID)]\n\n[Time]: O(n log n)\n[Space]: O(1)"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\nID\\nMARKS\\nCLASS\\nNAME\\n') == '78.00'\nassert solution('2\\nMARKS\\nCLASS\\nNAME\\nID\\n') == '67.50'\n=====\ncollections.namedtuple()\n\nBasically, namedtuples are easy to create, lightweight object types.\nThey turn tuples into convenient containers for simple tasks.\nWith namedtuples, you don't have to use integer indices for accessing members of a tuple.\n\nExample\nCode 01\n>>> from collections import namedtuple\n>>> Point = namedtuple('Point','x,y')\n>>> pt1 = Point(1,2)\n>>> pt2 = Point(3,4)\n>>> dot_product = ( pt1.x * pt2.x ) +( pt1.y * pt2.y )\n>>> print dot_product\n11\n\nCode 02\n>>> from collections import namedtuple\n>>> Car = namedtuple('Car','Price Mileage Colour Class')\n>>> xyz = Car(Price = 100000, Mileage = 30, Colour = 'Cyan', Class = 'Y')\n>>> print xyz\nCar(Price=100000, Mileage=30, Colour='Cyan', Class='Y')\n>>> print xyz.Class\nY\n\n=====Problem Statement=====\nDr. John Wesley has a spreadsheet containing a list of student's IDs, marks, class and name.\nYour task is to help Dr. Wesley calculate the average marks of the students.\nAverage = Sum of all marks / Total students\n\nNote:\n1. Columns can be in any order. IDs, marks, class and name can be written in any order in the spreadsheet.\n2. Column names are ID, MARKS, CLASS and NAME. (The spelling and case type of these names won't change.)\n\n=====Input Format=====\nThe first line contains an integer N, the total number of students.\nThe second line contains the names of the columns in any order.\nThe next N lines contains the marks, IDs, name and class, under their respective column names.\n\n=====Constraints=====\n0<N\u2264100\n\n=====Output Format=====\nPrint the average marks of the list corrected to 2 decimal places.\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\nID\\nMARKS\\nCLASS\\nNAME\\n') == '0.00'\nassert solution('2\\nMARKS\\nCLASS\\nNAME\\nID\\n') == '0.67'\nassert solution('3\\nID\\nMARKS\\nCLASS\\nNAME\\n') == '0.67'\n\n=====Sample Input=====\n5\nID\nMARKS\nCLASS\nNAME\nXYZ\n45\n12\nA\nB\n\n=====Sample Output=====\n0.60\n\n=====Explanation=====\nThere are total 2 students in the class.\nThe average marks of the students are \nMARKS  CLASS   NAME\n45        XYZ    A\n12        XYZ    B\nThe average marks of the class is 45 / 2 = 22.50\n'''\nfrom collections import namedtuple"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == \"78.00\"\nassert solution(\"4\\nMARKS\\nCLASS\\nNAME\\nID\\n\") == \"75.00\"\n\n=====Test Case 01=====\nTestCase 01\nInput\n6\nID\nMARKS\nCLASS\nNAME\nLUNCH\nPHYSICS\n3\n101\n92\n\n78.00\n\nTestCase 02\nInput\n6\nMARKS\nCLASS\nNAME\nID\nLUNCH\nPHYSICS\n3\n101\n92.0\n\n75.00\n\nTestCase 03\nInput\n5\nMARKS\nCLASS\nNAME\nID\nLUNCH\n3\n101\n92.0\n\n78.00\n\nTestCase 04\nInput\n5\nMARKS\nNAME\nCLASS\nID\nLUNCH\n3\n101\n92.0\n\n78.00\n\nTestCase 05\nInput\n5\nNAME\nMARKS\nCLASS\nID\nLUNCH\n3\n101\n92.0\n\n78.00\n\nTestCase 06\nInput\n5\nNAME\nMARKS\nCLASS\nID\nLUNCH\n3\n101\n92.0\n\n78.00\n\nTestCase 07\nInput\n4\nMARKS\nCLASS\nNAME\nID\n3\n101\n92.0\n\n78.00\n\nTestCase 08\nInput\n4\nNAME\nMARKS\nCLASS\nID\n3\n101\n92.0\n\n78.00\n\nTestCase 09\nInput\n4\nCLASS\nNAME\nMARKS\nID\n3\n101\n92.0\n\n78.00\n\nTestCase 10\nInput\n4\nID\nNAME\nMARKS\nCLASS\n3\n101\n92.0\n\n78.00\n\n\"\"\"\nfrom collections import namedtuple\nn = int(input())\nfields = input().split()\nmarks = namedtuple('marks',fields)\ntotal = 0\nfor i in range(n):\n    s = marks(*input().split())\n    total += int(s.MARKS)\n\nprint(total/n)\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\nID\\nMARKS\\nCLASS\\nNAME\\n') == '78.00'\nassert solution('2\\nMARKS\\nCLASS\\nNAME\\nID\\n') == '67.50'\nassert solution('3\\nID\\nMARKS\\nCLASS\\nNAME\\n') == '67.50'\nassert solution('4\\nCLASS\\nNAME\\nID\\nMARKS\\n') == '67.50'\nassert solution('5\\nID\\nCLASS\\nNAME\\nMARKS\\n') == '67.50'\n=====Test Data=====\nT1\n\n2\nMARKS\nCLASS\nNAME\nID\n1\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\nT2\n\n3\nID\nMARKS\nCLASS\nNAME\n2\nMalika\n52.00\n6\nKrishna\n67.00\n7\nArjun\n70.00\n8\nMalika\n56.00\n9\nMalika\n\"\"\")"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\nID\\nMARKS\\nCLASS\\nNAME\\n\") == \"78.00\"\nassert solution(\"2\\nMARKS\\nCLASS\\nNAME\\nID\\n\") == \"67.50\"\nassert solution(\"5\\nNAME\\nCLASS\\nID\\nMARKS\\n\") == \"62.00\"\n\n=====Sample Input=====\n5\nID\nMARKS\nCLASS\nNAME\n1\n1\n2\n3\n4\n1\n2\n3\n4\n5\n\n=====Sample Output=====\n2.00\n3.00\n4.00\n3.50\n3.00\n\n=====Explanation=====\nMarks for students who got 1 in ID are: 1\nTheir average is: 1/1 = 1.00\n\nMarks for students who got 2 in ID are: 1, 2\nTheir average is: (1+2)/2 = 1.50\n\nMarks for students who got 3 in ID are: 2, 3, 4\nTheir average is: (2+3+4)/3 = 2.67\n\nMarks for students who got 4 in ID are: 5\nTheir average is: (5+4)/2 = 3.50\n\nMarks for students who got 5 in ID are: 3\nTheir average is: (3+5)/2 = 3.50\n\n=====Submitted by=====\n\"\"\"\n\nfrom collections import namedtuple"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\nID\\n100\\nName\\n50\\nMarks\\n90\\nClass\\n90') == '75.00'\nassert solution('3\\nMarks\\n90\\nClass\\n90\\nID\\n100\\nName\\n50') == '75.00'\n================================================\nclass Solution:\n    def __init__(self):\n        self.student_details = {}\n    \n    def solution(self, input_string):\n        student_details = self.student_details\n        for detail in input_string.split('\\n'):\n            student_details[detail.split(',')[0]] = int(detail.split(',')[1])\n        \n        average = sum(student_details.values())/len(student_details)\n        return str(\"%.2f\"%(average))\n================================================\n\n================================================\nclass Solution:\n    def __init__(self):\n        self.student_details = {}\n        \n    def solution(self, input_string):\n        for detail in input_string.split('\\n'):\n            student_details[detail.split(',')[0]] = int(detail.split(',')[1])\n        \n        average = sum(student_details.values())/len(student_details)\n        return str(\"%.2f\"%(average))\n================================================\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == expected\n=====Test Case=====\nTestCase #1\nstdin='''4\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\n\nTotal Students: 4\nExpected Output:\n78.00\nTestCase #2\nstdin='''5\nMARKS      CLASS      NAME       ID\n92         2          Calum      1\n82         5          Scott      2\n94         2          Jason      3\n55         8          Glenn      4\n82         2          Fergus     5\n\nTotal Students: 5\nExpected Output:\n81.00\n'''\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\nID\\nMARKS\\n101\\n181\") == \"78.00\"\nassert solution(\"4\\nMARKS\\n91\\n89\\n45\\n78\") == \"71.00\"\nassert solution(\"4\\nID\\n91\\n89\\n45\\n78\") == \"56.00\"\n\"\"\"\nimport collections\n\nn = int(input())\n\nfields = input().split()\n\nStudents = collections.namedtuple('Student', fields)\n\ntotal = 0\ncount = 0\n\nfor i in range(n):\n    data = input().split()\n    student = Students(*data)\n    total += int(student.MARKS)\n    count += 1\n\nprint(f'{total/count:.2f}')\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\nID,MARKS,CLASS,NAME\\n1,90,2,JACK\\n2,91,1,FRANK\\n3,92,3,DANIEL\\n4,93,2,MICHAEL') == '90.00'\nassert solution('4\\nMARKS,CLASS,NAME,ID\\n92,2,FRANK,4\\n93,2,MICHAEL,3\\n81,3,JACK,1\\n94,2,DANIEL,2') == '85.00'\n\n=====Sample Input=====\n\n=====Sample Output=====\n90.00\n85.00\n\n3\nID,MARKS,CLASS,NAME\n1,90,2,JACK\n2,91,1,FRANK\n3,92,3,DANIEL\n\n'''\nimport collections"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == 'Not Weird'\nassert solution('15') == 'Weird'\nassert solution('24') == 'Weird'\nassert solution('23') == 'Not Weird'\nassert solution('4') == 'Not Weird'\n\"\"\""
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(2) == 'Not Weird'\nassert solution(5) == 'Weird'\nassert solution(14) == 'Weird'\nassert solution(15) == 'Not Weird'\nassert solution(20) == 'Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(6) == \"Weird\"\nassert solution(20) == \"Weird\"\nassert solution(19) == \"Not Weird\"\n\"\"\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2) == \"Not Weird\"\nassert solution(4) == \"Not Weird\"\nassert solution(6) == \"Weird\"\nassert solution(20) == \"Weird\"\nassert solution(23) == \"Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == 'Not Weird'\nassert solution('3') == 'Weird'\nassert solution('4') == 'Not Weird'\nassert solution('5') == 'Weird'\nassert solution('6') == 'Not Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(3) == \"Weird\"\nassert solution(24) == \"Not Weird\"\nassert solution(25) == \"Weird\"\n\n=================\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 'Not Weird'\nassert solution('3') == 'Weird'\nassert solution('4') == 'Not Weird'\nassert solution('5') == 'Weird'\nassert solution('6') == 'Not Weird'\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(2) == \"Not Weird\"\nassert solution(3) == \"Weird\"\nassert solution(4) == \"Weird\"\nassert solution(5) == \"Weird\"\nassert solution(6) == \"Not Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(2) == \"Not Weird\"\nassert solution(4) == \"Not Weird\"\nassert solution(10) == \"Weird\"\nassert solution(50) == \"Weird\"\nassert solution(100) == \"Not Weird\"\n"
    },
    {
        "number": 4666,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == 'Weird'\nassert solution('24') == 'Not Weird'\nassert solution('15') == 'Weird'\nassert solution('104') == 'Not Weird'\nassert solution('17') == 'Weird'\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('<e>abc</e><e/>') == 6\nassert solution('<data>' + '\\n' + '\\t' + '<row/>'*5000 + '\\n' + '</data>') == 485000"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 5\n\"\"\"\n=====Test Case 1=====\nthe testcase is the first input test case.\n\n=====Test Case 2=====\nthe testcase is the second input test case.\n\"\"\"\n\nimport xml.etree.ElementTree as etree\nimport sys"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('<a></a>') == 0\nassert solution('<a a=\"3\" b=\"1\" c=\"2\" d=\"4\"></a>') == 10\nassert solution('<x a=\"1\" b=\"2\" c=\"3\"></x>') == 0\nassert solution('<data>\\n' \\\n'<row>\\n' \\\n'<c1>1</c1>\\n' \\\n'<c2>2</c2>\\n' \\\n'<c3>3</c3>\\n' \\\n'</row>\\n' \\\n'<row>\\n' \\\n'<c1>4</c1>\\n' \\\n'<c2>5</c2>\\n' \\\n'<c3>6</c3>\\n' \\\n'</row>\\n' \\\n'<row>\\n' \\\n'<c1>7</c1>\\n' \\\n'<c2>8</c2>\\n' \\\n'<c3>9</c3>\\n' \\\n'</row>\\n' \\\n'</data>') == 45"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('<elem1 attr1=\"yes\" />\\n<elem2 attr2=\"yes\" />') == 6\nassert solution('<elem attr=\"yes\" />\\n<elem attr=\"yes\" />') == 6\nassert solution('<elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"no\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"no\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"no\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"no\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"no\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"no\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><elem attr=\"yes\"/><"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 5\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n</feed>\n\"\"\") == 0\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 1\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 0\n\"\"\") == 0\n\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 5"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30\n=====\n>>>>>>> 4ac8b69b9f1e25c52cb6e6d2f68db6f6be7f1efd\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n\"\"\") == 5\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n</feed>\n\"\"\") == 0\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 7\nassert solution(\"\"\"\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n\"\"\") == 5\n\n=====Validating an XML file=====\n\nimport xml.etree.ElementTree as etree"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == output, \"Test failed.\"\n\n=====Test 1=====\nYour code should print 1\n\ninput:\n    <feed xml:lang='en'>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n\noutput:\n    1\n\n=====Test 2=====\nYour code should print 0\n\ninput:\n    <feed>\n        <title>HackerRank</title>\n        <subtitle lang='en'>Programming challenges</subtitle>\n        <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n        <updated>2013-12-25T12:00:00</updated>\n    </feed>\n\noutput:\n    0\n\n'''\n"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30\n\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30\n\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30\n\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30\n\nassert solution('''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 30"
    },
    {
        "number": 4667,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 25\n\nassert solution(\n'''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 10\n\nassert solution(\n'''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\n''') == 0\n\nassert solution(\n'''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n''') == 15\n\nassert solution(\n'''\n<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\n''') == 0"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.0 3.0 5.0 10.0\") == \"13.46\"\nassert solution(\"2.0 4.0 15.0 23.0\") == \"34.36\"\nassert solution(\"0.0 1.0 0.0 0.0\") == \"45.0\""
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1 1 1') == '60'\nassert solution('0 3 4 0') == '180'\nassert solution('1 1 1 0') == '60'\nassert solution('0 1 3 2') == '120'\nassert solution('1 0 1 1') == '60'\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1 1 1') == '60.00'\nassert solution('2 2 2 1') == '30.60'\n=======\nWrite your code here\nWrite 5 lines of code to test the correctness of solution:\n=====Problem Statement=====\nYou are given four points A, B, C and D in a 3-dimensional Cartesian coordinate system. You are required to print the angle between the plane made by the points A, B, C and B, C, D in degrees(not radians). Let the angle be PHI.\nCos(PHI) = (X.Y)/|X|Y| where X = AB x BC and Y = BC x CD.\nHere, X.Y means the dot product of X and Y, and AB x BC means the cross product of vectors AB and BC. Also, AB = B-A.\n\n=====Input Format=====\nOne line of input containing the space separated floating number values of the and coordinates of a point.\n\n=====Output Format=====\nOutput the angle correct up to two decimal places.\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 0 1 1') == 45, \"Wrong Answer\"\n\nassert solution('1 0 1 1') == 90, \"Wrong Answer\"\n\nassert solution('1 1 0 1') == 180, \"Wrong Answer\"\n\nassert solution('1 2 3 4') == 0, \"Wrong Answer\"\n\nassert solution('-1 -2 -3 -4') == 0, \"Wrong Answer\""
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1.0 3.0 5.0 6.0\") == \"45.0\""
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 -2 3 4') == \"40.71\"\nassert solution('1 -1 1 1') == \"90.00\"\nassert solution('2 -2 -1 -2') == \"45.00\"\nassert solution('0 0 0 1') == \"360.00\"\nassert solution('0 0 -1 -2') == \"90.00\"\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n=====Test Case 1=====\nInput\n\n0.0 0.0 1.0\n2.0 3.0 3.0\nOutput\n\n90.0\n\n=====Test Case 2=====\nInput\n\n2.0 3.0 4.0\n0.0 0.0 5.0\nOutput\n\n180.0\n\n=====Test Case 3=====\nInput\n\n0.0 1.0 0.0\n1.0 0.0 0.0\nOutput\n\n90.0\n\n=====Test Case 4=====\nInput\n\n0.0 1.0 1.0\n0.0 1.0 1.0\nOutput\n\n45.0\n\n=====Test Case 5=====\nInput\n\n-1.0 1.0 1.0\n-1.0 1.0 1.0\nOutput\n\n-180.0\n\n=====Test Case 6=====\nInput\n\n1.0 1.0 1.0\n0.0 1.0 1.0\nOutput\n\n90.0\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 1 1 1\") == 45.0\nassert solution(\"0 0 3 0\") == 180.0\nassert solution(\"2 2 0 2\") == 90.0\nassert solution(\"3 4 5 2\") == 60.5\nassert solution(\"0 1 -1 0\") == 180.0\n\n=====Test Time Complexity=====\nTest cases are small.\n\n=====Solution=====\n'''\nimport math"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 5 6 2') == '45.00'\nassert solution('1 3 -2 2') == '90.00'\n\"\"\"\n\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4668,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == \"63.00\"\nassert solution(\"2 3 4 5\") == \"90.00\"\nassert solution(\"2 3 -4 5\") == \"-12.00\"\nassert solution(\"0 0 0 0\") == \"0.00\"\nassert solution(\"1 0 0 0\") == \"0.00\"\n=====Solution (Regex)=====\n\nimport re"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aei') == 2\nassert solution('hello') == 1\nassert solution('hello world') == 2\nassert solution('glup glup glup') == 1\n\"\"\""
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aa bb cc dd ee\") == 6\nassert solution(\"aa bb cc dd aa\") == 7\nassert solution(\"x y z\") == 0\n\n=====Test 1=====\nInput\n\n3\naa bb cc dd\nOutput\n\n6\nExpected\n\n6"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aretheyhere\") == 2\nassert solution(\"hello\") == 1\nassert solution(\"bee\") == 0\nassert solution(\"qr\") == -1\nassert solution(\"qqqqq\") == -1\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''input''') == '''output'''\nassert solution('''input''') == '''output'''\nassert solution('''input''') == '''output'''\nassert solution('''input''') == '''output'''\n\n'''\n\n======\nIMP:\n\n=====\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('aaaa') == 2\nassert solution('bear') == 1\nassert solution('foosss') == 0\nassert solution('azxxxy') == 1\nassert solution('zzzzzzzzz') == 0\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"hello\") == \"2\"\nassert solution(\"world\") == \"1\"\nassert solution(\"hacker\") == \"3\"\n\n=====Test Case=====\nTest case 1\n>>> solution(\"HOW ARE YOU\")\n4\n\nTest case 2\n>>> solution(\"TO BE OR NOT TO BE\")\n3\n\nTest case 3\n>>> solution(\"SEE INVISIBLE\")\n4\n\nTest case 4\n>>> solution(\"FLY TO JAIL\")\n4\n\nTest case 5\n>>> solution(\"1 2 3 4 5\")\n0\n\nTest case 6\n>>> solution(\"H A N G M A N\")\n'3'\n\nTest case 7\n>>> solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n'0'\n\nTest case 8\n>>> solution(\"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\")\n'3'\n\nTest case 9\n>>> solution(\"T q u i c k Br o w n f x j u m p s  o v e r t h       l a z y d o g\")\n'12'\n\nTest case 10\n>>> solution(\"1 2 3 4 5\")\n0\n\n=====Problem Statement=====\nWrite a function reverse(s) that takes a string s and returns the string in reversed order.\n\nConstraints\n\nn \u2264 100,000 where n is the length of s\nExample\n\nInput: s = \"!dlrow ym ot emocleW\"\n\nOutput: \"W emocleW ot emocleY dlrow\""
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''2\nthis\nthat\n''') == 6\nassert solution('''3\nthis\nthat\n''') == 3\nassert solution('''5\nthis\nthat\nand\n''') == 10\nassert solution('''1\nthis''') == 2\nassert solution('''6\nthis\nthat\n''') == 2\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 abc bcd aef abc\") == 4\nassert solution(\"3 a b c d\") == 0\nassert solution(\"3 abc bcd aef abc\") == 6\nassert solution(\"3 abc bcd aef\") == 6\nassert solution(\"1 a\") == 2\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\na b') == '2'\nassert solution('2\\na bb') == '1'\nassert solution('2\\na bbb') == '0'\nassert solution('2\\na bbbb') == '1'\nassert solution('2\\na aa') == '2'\n"
    },
    {
        "number": 4669,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 zebras') == '1'\nassert solution('1 zebra') == '2'\n\"\"\""
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"XL\") == True\nassert solution(\"XI\") == False\nassert solution(\"CDXXI\") == True\nassert solution(\"CDXXXV\") == True\nassert solution(\"MDCCLXXVI\") == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"X\") == True\nassert solution(\"XX\") == False\nassert solution(\"XL\") == True\n\nassert solution(\"CDXLIII\") == True\nassert solution(\"CDXXXIV\") == False\n\n'''\n\nimport re\n\ninput_string = input().strip()\n\npattern = r'^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$'"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"X\") == False\nassert solution(\"XX\") == False\nassert solution(\"IX\") == True\nassert solution(\"IV\") == True\nassert solution(\"MCMXCIV\") == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('X') == False\nassert solution('XL') == True\nassert solution('CDXLIII') == True\nassert solution('CDXCIII') == False\nassert solution('CDLXXXIX') == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('X') == False\nassert solution('XL') == True\nassert solution('CDXCIX') == True\nassert solution('MMMDCCCLXXXVIII') == True\nassert solution('MCCXXXVII') == False\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"X\") == False\nassert solution(\"XX\") == False\nassert solution(\"IX\") == True\nassert solution(\"IV\") == True\nassert solution(\"MCMXCIV\") == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('X') == True\nassert solution('XX') == False\nassert solution('CDXXIV') == True\nassert solution('CDXCIX') == True\nassert solution('MMMDCCCLXXXVIII') == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('XX') == False\nassert solution('XI') == True\nassert solution('CDXXIV') == True\nassert solution('XIX') == False\n\n=====Sample Test Case=====\nNone\n\n=====Test Case Explanation=====\nNone\n\n=====Solved=====\nYes\n\"\"\"\n\nimport re\nregex = r'^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$'\ns = input()\nprint(bool(re.match(regex,s)))"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"X\") == False\nassert solution(\"XX\") == False\nassert solution(\"IX\") == True\nassert solution(\"IV\") == True\nassert solution(\"MCMXCIV\") == True\n"
    },
    {
        "number": 4670,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"XXI\") == True\nassert solution(\"MMCDLXXVI\") == True\nassert solution(\"MDCCCLXXXV\") == False\nassert solution(\"MMMDCCCLXXXIV\") == True\n\n===Sample Tests===\nimport re\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"+918012345678\") == [\n    \"+91 80123 4567 8\",\n    \"91 80123 4567 8\",\n    \"81801234567 8\",\n]\n\nassert solution(\"91701234567\") == [\n    \"917 1 2345 678\",\n    \"91 70123 4567\",\n    \"917 0 12345 678\",\n]\n\nassert solution(\"9170123456789\") == [\n    \"917 1 2345 678 9\",\n    \"91 70123 4567 8\",\n    \"917 0 12345 678 9\",\n]\n\nassert solution(\"91789\") == [\n    \"917 8989\",\n    \"91 789\",\n    \"917 8 9\",\n    \"917 0 89\",\n]\n\nassert solution(\"917891\") == [\n    \"917 8989\",\n    \"91 789 1\",\n    \"917 8 9\",\n    \"917 0 89\",\n]"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"+91809098798\") == \"91 8709098798\"\nassert solution(\"8709098798\") == \"91 8709098798\"\nassert solution(\"91 8709098798\") == \"91 8709098798\"\nassert solution(\"91 8709098798\") == \"91 8709098798\"\n\"\"\"\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8495225445') == ['8495225445', '8495225444', '8495225443', '8495225442', '8495225441', '8495225440', '8495225439', '8495225438', '8495225437', '8495225436', '8495225435', '8495225434', '8495225433', '8495225432', '8495225431', '8495225430', '8495225429', '8495225428', '8495225429', '8495225428', '8495225427', '8495225426', '8495225425', '8495225424', '8495225423', '8495225422', '8495225421', '8495225420', '8495225419', '8495225418', '8495225417', '8495225416', '8495225415', '8495225414', '8495225413', '8495225412', '8495225411', '8495225410', '8495225409', '8495225408', '8495225407', '8495225406', '8495225405', '8495225404', '8495225403', '8495225402', '8495225401', '8495225400', '8495225399', '8495225398', '8495225397', '8495225396', '8495225395', '8495225394', '8495225393', '8495225392', '8495225391', '8495225390', '8495225389', '8495225388', '8495225387', '8495225386', '8495225385', '8495225384', '8495225383', '8495225382', '8495225381', '8495225380', '8495225379', '8495225378', '8495225377', '8495225376', '8495225375', '8495225374', '8495225373', '8495225372', '8495225371', '8495225370', '8495225369', '8495225368', '8495225367', '8495225366', '8495225365', '8495225364', '8495225363', '8495225362', '8495225361', '8495225360', '8495225359', '8495225358', '8495225357', '8495225356', '8495225355', '8495225354', '8495225353', '8495225352', '8495225351', '8495225350', '8495225349', '8495225348', '8495225347', '8495225346', '8495225345', '8495225344', '8495225344', '8495225343', '8495225342', '8495225341', '8495225340', '8495225329', '8495225328', '8495225327', '8495225326', '8495225325', '8495225324', '8495225323', '8495225322', '8495225321', '8495225320', '8495225319', '8495225318', '8495225317', '8495225316', '8495225315', '8495225314', '8495225313', '8495225312', '8495225311', '8495225310', '8495225319', '8495225318', '8495225317', '8495225316', '8495225315', '8495225314', '8495225313', '8495225312', '8495225311', '8495225310', '8495225319', '8495225318', '8495225317', '8495225316', '8495225315', '8495225314', '8495225313', '8495225312', '8495225311', '8495225310', '8495225319', '8495225318', '8495225317', '8495225316', '8495225315', '8495225314', '8495225313', '8495225312', '8495225311', '8495225310', '8495225319', '8495225318', '8495225317', '8495225316', '8495225315', '8495225314', '8495225313', '8495225312', '8495225311', '8495225310', '8495225319', '8495225318', '8495225317', '8495225316', '8495225315', '8495225314', '8495225313', '8495225312', '8495225311', '8495225310', '8495225319', '8495225318', '8495225317', '8495225316', '8495225315', '8495225314', '8495225313', '8495225312', '8495225311', '8495225310', '8495225319', '8495225318', '8495225317', '8495225316', '8495225315', '8495225314', '8495225313', '8495225312', '8495225311', '8495225310', '8495225319', '8495225318', '8495225317', '8495225316', '8495225315', '8495225314', '8495225313', '8495225312', '8495225311', '8495225310', '8495225319', '8495225318', '8495225317', '8495225316', '8495225315', '8495225314', '8495225313', '8495225312', '8495225311', '8495225310', '8495225319', '8495225318', '8495225317', '8495225316', '8495225315', '8495225314', '8495225313', '8495225312', '8495225311', '8495225310', '8495225319', '8495225318', '8495225317', '8495225316', '8495225315', '8495225314', '8495225313', '8495225312', '8495225311', '8495225310', '8495225319', '8495225318', '8495225317', '8495225316', '8495225315', '8495225314', '8495225313', '8495225312', '8495225311', '8495225310', '8495225319', '8495225318', '8495225317', '8495225316', '8495225315', '8495225314', '8495225313', '8495225312', '8495225311', '8495225310', '8495225319', '8495225318', '8495225317', '8495225316', '8495225315', '8495225314', '8495225313', '849"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('+91 9867530912') == '+91 9867430912'\nassert solution('9867430912') == '+91 9867430912'\nassert solution('+9189867430912') == '+91 9189867430912'\nassert solution('9189867430912') == '+91 9189867430912'\nassert solution('9867430912') == '+91 9867430912'\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('87675') == '+91 7867 5555'"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9\\n7\\n5\\n3\\n1\\n9\\n7\\n5\\n3\\n1') == '''+91 7849 5432\n+91 7586 5432\n+91 7895 5432\n+91 7903 5432\n+91 7901 5432'''\n\n=========================================================\nWrite a program which prints all the numbers between 1 to 100 that are divisible by 7 but are not a multiple of 5.\n\nExpected Output:\n21 28 35 42 49 56 63 70 77 84 91 98 100\n\n=========================================================\nWrite a program which can compute the factorial of a given numbers.\nThe results should be printed in a comma-separated sequence on a single line.\nSuppose the following input is supplied to the program: 8 Then, the output should be:40320\n\nExpected Output:\n40320\n\n=========================================================\nWrite a program which accepts a sequence of comma-separated numbers from console and generate a list and a tuple which contains every number.\nSuppose the following input is supplied to the program:\n34,67,55,33,12,98\nThen, the output should be:\n['34', '67', '55', '33', '12', '98']\n('34', '67', '55', '33', '12', '98')\n\nExpected Output:\n['34', '67', '55', '33', '12', '98']\n('34', '67', '55', '33', '12', '98')\n\n=========================================================\nWrite a program that accepts a comma separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically.\nSuppose the following input is supplied to the program:\nwithout,hello,bag,world\nThen, the output should be:\nbag,hello,without,world\n\nExpected Output:\nbag,hello,without,world\n\n=========================================================\nWrite a program that accepts sequence of lines as input and prints the lines after making all characters in the sentence capitalized.\nSuppose the following input is supplied to the program:\nHello world\nPractice makes perfect\nThen, the output should be:\nHELLO WORLD\nPRACTICE MAKES PERFECT\n\nExpected Output:\nHELLO WORLD\nPRACTICE MAKES PERFECT\n\n=========================================================\nWrite a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically.\nSuppose the following input is supplied to the program:\nhello world and practice makes perfect and hello world again\nThen, the output should be:\nagain and hello makes perfect practice world\n\nExpected Output:\nagain and hello makes perfect practice world\n\n=========================================================\nWrite a program which accepts a sequence of comma separated 4 digit binary numbers as its input and then check whether they are divisible by 5 or not. The numbers that are divisible by 5 are to be printed in a comma separated sequence.\nExample:\n0100,0011,1010,1001\nThen the output should be:\n1010\nNotes: Assume the data is input by console.\n\nHints:\nIn case of input data being supplied to the question, it should be assumed to be a console input.\n\nSolution:\nvalue = []\nitems=[x for x in input().split(',')]\nfor p in items:\n    intp = int(p, 2)\n    if not intp%5:\n        value.append(p)\n\nprint ','.join(value)\n\n=========================================================\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number.\nThe numbers obtained should be printed in a comma-separated sequence on a single line.\n\nHints:\nIn case of input data being supplied to the question, it should be assumed to be in the range of [1, 1000].\n\nSolution:\nvalues = []\nfor i in range(1000, 3001):\n    s = str(i)\n    if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):\n        values.append(s)\nprint \",\".join(values)\n\n=========================================================\nWrite a program that accepts a sentence and calculate the number of letters and digits.\nSuppose the following input is supplied to the program:\nhello world! 123\nThen, the output should be:\nLETTERS 10\nDIGITS 3\n\nExpected Output:\nLETTERS 10\nDIGITS 3\n\n=========================================================\nWrite a program that accepts a sentence and calculate the number of upper case letters and lower case letters.\nSuppose the following input is supplied to the program:\nHello world!\nThen, the output should be:\nUPPER CASE 1\nLOWER CASE 9\n\nExpected Output:\nUPPER CASE 1\nLOWER CASE 9\n\n=========================================================\nWrite a program that computes the value of a+aa+aaa+aaaa with a given digit as the value of a.\nSuppose the following input is supplied to the program:\n9\nThen, the output should be:\n11106\n\nHints:\nIn case of input data being supplied to the question, it should be assumed to be in the range of [0, 9].\n\nSolution:\nx = int(raw_input())\nn1 = x\nn2 = x*10 + x\nn3 = x*100 + x*10 + x\nn4 = x*1000 + x*100 + x*10 + x\nprint n1+n2+n3+n4\n\n=========================================================\nWrite a program that computes the net amount of a bank account based a transaction log from console input. The transaction log format is shown as following:\nD 100\nW 200\n\nD means deposit while W means withdrawal.\nSuppose the following input is supplied to the program:\nD 300\nD 300\nW 200\nD 100\nThen, the output should be:\n500\n\nHints:\nIn case of input data being supplied to the question, it should be assumed to be in the range of [D, W].\n\nSolution:\nnetAmount = 0\nwhile True:\n    s = raw_input()\n    if not s:\n        break\n    values = s.split(\" \")\n    operation = values[0]\n    amount = int(values[1])\n    if operation==\"D\":\n        netAmount+=amount\n    elif operation==\"W\":\n        netAmount-=amount\n    else:\n        pass\nprint netAmount\n\n=========================================================\nWrite a program that accepts a sequence of lines as input and prints the lines after making all characters in the sentence capitalized.\nSuppose the following input is supplied to the program:\nHello world\nPractice makes perfect\nThen, the output should be:\nHELLO WORLD\nPRACTICE MAKES PERFECT\n\nExpected Output:\nHELLO WORLD\nPRACTICE MAKES PERFECT\n\nSolution:\nlines = []\nwhile True:\n    s = raw_input()\n    if s:\n        lines.append(s.upper())\n    else:\n        break;\n\nfor sentence in lines:\n    print sentence\n\n=========================================================\nWrite a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically.\nSuppose the following input is supplied to the program:\nhello world and practice makes perfect and hello world again\nThen, the output should be:\nagain and hello makes perfect practice world\n\nExpected Output:\nagain and hello makes perfect practice world\n\nSolution:\nitems = raw_input().split()\nitems = list(set(items))\nitems.sort()\nprint''.join(items)\n\n=========================================================\nWrite a program which accepts a sequence of comma separated 4 digit binary numbers as its input and then check whether they are divisible by 5 or not. The numbers that are divisible by 5 are to be printed in a comma separated sequence.\nExample:\n0100,0011,1010,1001\nThen the output should be:\n1010\nNotes: Assume the data is"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n\"+91801234567\"\n) ==\n\"+91 80123 4567\"\n\nassert solution(\n\"84424646514\"\n) ==\n\"+84 464 6514\"\n\nassert solution(\n\"91745765432\"\n) ==\n\"+91 765 4321\"\n\nassert solution(\n\"91745765432\"\n) ==\n\"+91 765 4321\"\n\nassert solution(\n\"91745765432\"\n) ==\n\"+91 765 4321\""
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8\\n0783750121\\n7(283)7543215\\n7(283)75432155\\n(283)7543215\\n(283)75432155\\n92343581234\\n92343581235\\n92343581236') == \\\n    '+91 7837 5012\\n+91 7838 5123\\n+91 7839 5123\\n+91 7839 5124\\n+91 234 3588 1234\\n+91 234 3588 1235\\n+91 234 3588 1236'\n\"\"\"\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('91 2223 4444') == '0 91 2223 4444'\nassert solution('91+1 (222) 3333 4444') == '0 91 (222) 3333 4444'\nassert solution('1 (22) 2222 4444') == '0 1 (22) 2222 4444'\nassert solution('1 (22) 2222 4444') == '0 1 (22) 2222 4444'\n"
    },
    {
        "number": 4671,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"9 1734255741\") == (\n    \"+91 7854 257414\"\n)\nassert solution(\"919875 34255741\") == (\n    \"+91 9897 574149\"\n)\nassert solution(\"919875 34255741\") == (\n    \"+91 9897 574149\"\n)\n=====Sample Test Cases=====\nTest case 1\nInput\n\n5\n91800 47894 32123 45678\n91 1234 56789 91012\n91800 47894 32123 45678\n91800 47894 32123 45678\n91 1234 56789 91012\nOutput\n\n+91 7854 257414\n+91 9897 574149\n+91 7854 257414\n+91 9897 574149\n+91 7854 257414\nExplanation\n\nThe mobile numbers must be printed in the order they are given in the input.\n\nTest case 2\nInput\n\n2\n91800 47894 32123 45678\n91 1234 56789 91012\nOutput\n\n+91 9897 574149\n+91 7854 257414\n\"\"\"\nimport re\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\nArjun 70\\nMalika 52\\nMalika 75\\nMalika 44\\nMalika 90\\nMalika 60\\nMalika 80') == '60.00'\nprint('Test passed')\n\n\n\n>>>>>>> 88d5abf5fdf1224584807c8e0c9d9e93c6ec4b7"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 abc 71 87 6\") == \"70.00\"\n'''\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\nBrad Pitt\\nAlec Baldwin\\nElizabeth Debicki\\nGwyneth Paltrow\\nGary Busey\\nLena Headey\\nMichael Caine\\nMichelle Rodriguez\\nSloane Stephens\\n') == '75.00'\nassert solution('6\\nDwayne Johnson\\nJohnson J. Smith\\nJason Segel\\nKatherine Harington\\nJason Momoa\\n') == '40.00'\n\n=====Test 1=====\nInput\n\n5\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\n\nOutput\n\n56.00\n\n=====Test 2=====\nInput\n\n5\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\n\nOutput\n\n56.00\n\n=====Test 3=====\nInput\n\n6\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\n\nOutput\n\n50.00\n\n=====Test 4=====\nInput\n\n7\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\n\nOutput\n\n69.67\n\n=====Test 5=====\nInput\n\n7\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\n\nOutput\n\n69.67\n\n=====Test 6=====\nInput\n\n8\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\n\nOutput\n\n75.00\n\n=====Test 7=====\nInput\n\n8\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\n\nOutput\n\n50.00\n\n=====Test 8=====\nInput\n\n5\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\n\nOutput\n\n50.00\n\n=====Test 9=====\nInput\n\n6\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\n\nOutput\n\n50.00\n\n=====Test 10=====\nInput\n\n8\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\n\nOutput\n\n50.00\n'''"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('alpha bravo charlie delta echo foxtrot golf hotel india juliet kilo lima mike november oscar papa quebec romeo sierra tango uniform victor whiskey x-ray yankee zulu') ==\n>>> '86.33'\n\n'''\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 abc dd ee ff gg') == 'dd'\n\n=====Sample Test Case=====\nInput\n\n3\nKrishna 67 68 69\nArjun 70 98 63\nMalika 52 56 60\nMalika\n\nOutput\n\n56.00\n\n=====Problem Statement=====\nGiven a list of numbers, create a function which returns the list but with each element's index in the list added to itself. This means you add 0 to the number at index 0, add 1 to the number at index 1, etc...\nExamples:\n\nadd_indexes([0, 0, 0, 0, 0]) \u279e [0, 1, 2, 3, 4]\n\nadd_indexes([1, 2, 3, 4, 5]) \u279e [1, 3, 5, 7, 9]\n\nadd_indexes([5, 4, 3, 2, 1]) \u279e [5, 5, 5, 5, 5]\nNotes\nTry to solve this task without using a loop.\n\n\"\"\""
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\nArun 70 70 70\\nMalik 32 63 45\\nMalika 70 76 83\\nMalika') == '70.00'\n'''\n\n\n\n'''\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\nA 16.5 B 17.2 C 18.1 D 19.2\") == \"A 17.25\""
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\nalpha mark1 mark2 mark3 mark4 mark5\nbeta mark1 mark2 mark3 mark4 mark5\nquery_name\nquery_name') == '50.00'\nassert solution('4\nalpha mark1 mark2 mark3 mark4\nbeta mark1 mark2 mark3 mark4\nquery_name\nquery_name') == '50.00'\n\"\"\"\nfrom typing import List, Dict\n"
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\nArjun 70\\nMalika 52\\nPooja 96\\nPruthvi 77\\nRohan 82\") == \"75.00\"\n\n=====Test Case 1=====\n=========Test Case Input=========\n5\nArjun 70\nMalika 52\nPooja 96\nPruthvi 77\nRohan 82\n\n=========Test Case Output=========\n75.00\n=====Test Case 2=====\n=========Test Case Input=========\n5\nArjun 80\nMalika 70\nPooja 96\nPruthvi 91\nRohan 88\n\n=========Test Case Output=========\n85.00\n=====Test Case 3=====\n=========Test Case Input=========\n5\nArjun 86\nMalika 98\nPooja 92\nPruthvi 75\nRohan 94\n\n=========Test Case Output=========\n88.25\n=====Test Case 4=====\n=========Test Case Input=========\n5\nArjun 85\nMalika 75\nPooja 92\nPruthvi 85\nRohan 80\n\n=========Test Case Output=========\n85.00\n=====Test Case 5=====\n=========Test Case Input=========\n5\nArjun 90\nMalika 99\nPooja 97\nPruthvi 98\nRohan 86\n\n=========Test Case Output=========\n85.00\n\n\"\"\""
    },
    {
        "number": 4672,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('5\\nHarry') == 'Harry'\nassert solution('3\\nGeorge\\nPrayag') == 'George'"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    'Paul\\n'\n    'Anderson\\n'\n    '27\\n'\n    'F\\n'\n    'Jemima\\n'\n    '41\\n'\n    'M\\n'\n    'Kimberly\\n'\n    '26\\n'\n    'F\\n'\n    'Cynthia\\n'\n    '46\\n'\n    'M\\n'\n) == \"\"\"Mr. Paul Anderson\nMs. Jemima\nMr. Kimberly\nMs. Cynthia\n\n\"\"\""
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\nMike Thomson 20 M\\nRobert Bustle 32 M\") == \"Mr. Mike Thomson\\nMr. Robert Bustle\"\nassert solution(\"2\\nEthan Hawke 18 M\\nCurtis Mayden 23 F\") == \"Ms. Ethan Hawke\\nMs. Curtis Mayden\"\nassert solution(\"3\\nGeorge Floyd 20 F\\nCurtis Mayden 23 F\\nFred Frequent 22 M\") == \"Ms. Fred Frequent\\nMs. Curtis Mayden\\nMr. George Floyd\"\n=======\nWrite 5 lines of code to test the correctness of solution:\n>>>>>>> 9b3f396d94fb204292b94f897479298261a9f32d\n    pass\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Mike Thomson 20 M\") == \"Mr. Mike Thomson\"\nassert solution(\"Robert Bustle 32 M\") == \"Mr. Robert Bustle\"\nassert solution(\"Andria Bustle 30 F\") == \"Ms. Andria Bustle\"\n\n=====Test Case 2=====\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    'Mike Thomson 20 M\\n'\n    'Robert Bustle 32 M\\n'\n    'Andria Bustle 30 F\\n'\n    'Malinda Bustle 26 F\\n'\n    'Ned Bustle 28 M'\n) == [\n    'Mr. Mike Thomson',\n    'Ms. Andria Bustle',\n    'Ms. Malinda Bustle',\n    'Mr. Ned Bustle'\n]\n\n=====Test Case=====\nYour code should pass the following test cases.\nNote that it may also be run against hidden test cases not shown here.\n\n-- Python cases --\nInput:\nsolution.solution(\n    'Mike Thomson 20 M\\n'\n    'Robert Bustle 32 M\\n'\n    'Andria Bustle 30 F\\n'\n    'Malinda Bustle 26 F\\n'\n    'Ned Bustle 28 M'\n)\nOutput:\n\nMr. Mike Thomson\nMs. Andria Bustle\nMs. Malinda Bustle\nMr. Ned Bustle\n\nInput:\nsolution.solution(\n    'Bryan Fisher 25 M\\n'\n    'Bryant Fisher 28 M\\n'\n    'Jordan Fisher 20 M\\n'\n    'Brittney Fisher 38 F\\n'\n    'Megan Fisher 32 F\\n'\n    'Alex Fisher 27 M\\n'\n    'Cam Fisher 44 M\\n'\n    'Alexis Fisher 43 F\\n'\n    'Theo Fisher 32 M\\n'\n    'Tristan Fisher 18 M\\n'\n    'Ari Fisher 25 F\\n'\n    'Jazmine Fisher 19 F'\n)\nOutput:\n\nMr. Bryan Fisher\nMr. Alex Fisher\nMr. Alexis Fisher\nMr. Cam Fisher\nMr. Theo Fisher\nMr. Jazmine Fisher\nMs. Ari Fisher\nMs. Megan Fisher\nMs. Tristan Fisher\n'''\n\nfrom operator import itemgetter"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\nMark Q. Public\\n25 M\\n\") == \"Mr. Mark Q.\\n\"\nassert solution(\"2\\nDavids P. Private\\n21 M\\n\") == \"Mr. Davids P.\\n\"\nassert solution(\"3\\nGeorge G. Public\\n24 M\\n\") == \"Mr. George G.\\n\"\nassert solution(\"4\\nHenry H. Private\\n23 M\\n\") == \"Mr. Henry H.\\n\"\nassert solution(\"5\\nMark S. Private\\n22 M\\n\") == \"Mr. Mark S.\\n\"\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6\\nMike Thomson 20 M\\nRobert Bustle 32 M\\nAndria Bustle 30 F\\nBarry Bonds 45 M\\nHugh Laurie 14 F\\nCedric Link 24 M') == 'Mr. Mike Thomson\\nMs. Andria Bustle\\nMr. John Bustle\\nMs. Barbara Bustle\\nMr. Hugh Laurie\\nMs. Cedric Link'\nprint('Success')\n\nhint 1\n\n=====TESTING=====\nCodeWars test:\n\nInput:\n8\nMike Thomson 20 M\nRobert Bustle 32 M\nAndria Bustle 30 F\nBarry Bonds 45 M\nHugh Laurie 14 F\nCedric Link 24 M\nEva Green 20 F\nDaisy Storms 33 F\n\nOutput:\nMr. Mike Thomson\nMs. Andria Bustle\nMr. John Bustle\nMs. Barbara Bustle\nMr. Hugh Laurie\nMs. Cedric Link\n\n=====Solution=====\n\nfrom typing import List\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nMike Thomson 20 M\\nRobert Bustle 32 M\\nAndria Bustle 30 F\") == \"Mr. Mike Thomson\\nMs. Andria Bustle\\nMr. Robert Bustle\"\n=====TEST=====\nimport unittest\nfrom unittest import mock\nfrom io import StringIO\nimport sys\n\nclass TestAbs(unittest.TestCase):\n    def test_solution(self):\n        with mock.patch('builtins.input', side_effect=[AssertionError(\"Sy\u00f6tteen pyyt\u00e4mist\u00e4 ei odotettu\")]):\n            reload_module(self.module)\n            output_alussa = get_stdout()\n            koodi = \"\"\"3\nMike Thomson 20 M\nRobert Bustle 32 M\nAndria Bustle 30 F\"\"\"\n            \n            with mock.patch('builtins.input', side_effect=[koodi]):\n                try:\n                    reload_module(self.module)\n                except:\n                    self.fail(f\"Varmista, ett\u00e4 ohjelma pys\u00e4htyy sy\u00f6tteell\u00e4\\n{koodi}\")\n                output_all = get_stdout()\n                output = [line.strip() for line in output_all.split(\"\\n\") if len(line) > 0]\n                exp = [\n                    \"Mr. Mike Thomson\",\n                    \"Ms. Andria Bustle\",\n                    \"Mr. Robert Bustle\"\n                ]\n                self.assertEqual(len(exp), len(output), f\"Ohjelman tulisi tulostaa {len(exp)} rivi\u00e4, nyt se tulostaa {len(output)} rivi\u00e4. Tulostus oli\\n{output_all}\")\n                for i in range(len(exp)):\n                    self.assertEqual(output[i].strip(), exp[i].strip(), f\"Kun ohjelma suoritetaan sy\u00f6tteell\u00e4\\n{koodi}\\nTulostuksen pit\u00e4isi olla\\n{exp[i]}\\nse on\\n{output[i]}\\nTulostus oli\\n{output_all}\")"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Henry Davids 12 M\") == 'Mr. Henry Davids'\nassert solution(\"Mary George 16 F\") == 'Ms. Mary George'\nassert solution(\"Ann George 35 M\") == 'Mr. Ann George'\nassert solution(\"Alvin David 18 M\") == 'Mr. Alvin David'\nassert solution(\"John Mark 16 M\") == 'Mr. John Mark'\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''George Peter Peter Peter\nPeter George John John John\nJohn Peter Peter George John\nJohn John Peter Peter George''') == '''Mr. George\nMs. John\nMr. Peter\nMr. John\nMs. Peter\nMr. George\nMs. John\nMr. Peter\nMr. John\nMs. Peter'''\n\n=====Test Case 1=====\nInput\nGeorge Peter Peter Peter\nPeter George John John John\nJohn Peter Peter George John\nJohn John Peter Peter George\nOutput\nMr. George\nMs. John\nMr. Peter\nMr. John\nMs. Peter\nMr. George\nMs. John\nMr. Peter\nMr. John\nMs. Peter\n'''\n\n=====Test Case 2=====\nInput\nHenry Davids\nMary George\nOutput\nMr. Henry Davids\nMs. Mary George\n'''\n"
    },
    {
        "number": 4673,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''Eve P\nAbraham lincoln\nAbraham Lincoln\nAbraham L\nBarack Obama\nBarack Obama\nBarack Ob\nJoe Biden\nJoe Biden\nJoe B\n''') == '''Mr. Eve P\nMs. Abraham Lincoln\nMr. Abraham Lincoln\nMr. Abraham L\nMr. Barack Obama\nMs. Barack Obama\nMr. Barack Ob\nMr. Joe Biden\nMs. Joe Biden\nMr. Joe B\n'''\nprint('PASSED')"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\\n1\\n1\\n2\") == \\\n    \"[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 1, 0]]\"\nassert solution(\"2\\n2\\n2\\n3\") == \\\n    \"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2], [2, 0, 0], [2, 0, 1], [2, 0, 2], [2, 1, 0], [2, 1, 1], [2, 1, 2], [2, 2, 0], [2, 2, 1], [2, 2, 2]]\"\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1, 2, 3, 4) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n=====Output Format=====\nPrint the list of lists in lexicographic increasing order, each inner list as a separate line.\n\na = int(input())\nb = int(input())\nc = int(input())\nn = int(input())\nprint([[i, j, k] for i in range(a + 1) for j in range(b + 1) for k in range(c + 1) if (i + j + k!= n)])\n\na = 1\nb = 1\nc = 2\nn = 3\n\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n\n\"\"\"\n\nfrom itertools import product\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2 1 3') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\nassert solution('1 2 3 3') == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n\n==================\nYou are given a string.\nYour task is to print all possible permutations of size  of the string in lexicographic sorted order.\n\nInput Format\n\nA single line containing the string  and integer value.\n\nConstraints\n\n\nThe string contains only UPPERCASE characters.\n\nOutput Format\n\nPrint the permutations of the string  on separate lines.\n\nSample Input\n\nHACK 2\nSample Output\n\nAC\nAH\nAK\nCA\nCH\nCK\nHA\nHC\nHK\nKA\nKC\nKH\nExplanation\n\nAll possible size  permutations of the string \"HACK\" are printed in lexicographic sorted order.\n'''\n\nx, y, z, n = int(input()), int(input()), int(input()), int(input())\nlist_val = [i for i in range(x + 1)]\nlist_val2 = [j for j in range(y + 1)]\nlist_val3 = [k for k in range(z + 1)]\n\nprint(*[''.join(i) for i in sorted([[str(l) for l in list_val2] for list_val2 in sorted([i for i in list(itertools.product(list_val, list_val3)) if sum([int(i) for i in list(str(n))]) == sum([int(i) for i in list(i[0])])])], key=lambda x: [int(i) for i in x], reverse=True)], sep='\\n')\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n1\\n2\\n3') == '[[0,0,0],[0,0,1],[0,0,2],[0,1,0],[1,0,0],[1,1,1]]'\nassert solution('1\\n2\\n3\\n4') == '[[0,0,0],[0,0,1],[0,0,2],[0,0,3],[0,1,0],[0,1,1],[0,1,2],[0,1,3],[1,0,0],[1,0,1],[1,0,2],[1,0,3],[1,1,0],[1,1,1],[1,1,2],[1,1,3]]'\n\n=====Output=====\n[[0,0,0],[0,0,1],[0,0,2],[0,0,3],[0,1,0],[0,1,1],[0,1,2],[0,1,3],[1,0,0],[1,0,1],[1,0,2],[1,0,3],[1,1,0],[1,1,1],[1,1,2],[1,1,3]]\n[[0,0,0],[0,0,1],[0,0,2],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2]]\n'''"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(x, y, z, n) == result\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1 1 3') == [[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[0,1,2],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2]]\nassert solution('1 2 3 1') == [[0,0,0],[0,0,1],[0,0,2],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2]]\nassert solution('2 1 1 1') == [[0,0,0],[0,1,0],[0,1,1],[0,1,2],[1,0,0],[1,1,0],[1,1,1],[1,1,2]]\nassert solution('2 2 1 3') == [[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[0,1,2],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2]]\nassert solution('2 2 1 2') == [[0,0,0],[0,0,1],[0,0,2],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,0,2],[1,1,0],[1,1,1],[1,1,2]]\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4') == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [1, 0, 0], [1, 1, 1]]'\nassert solution('1 1 1 1') == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2]]'\nassert solution('1 2 3 4') == '[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2], [1, 2, 0], [1, 2, 1], [1, 2, 2]]'\n\n>>>>>>> e89d943758b5e5f8d7ffb34db1937e80aab86c97\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 2 3 4') == '0 1 0 1 2 0 1 0 3 0 1 2 1 3 2 0 2 1 3 1 2 2 2 2 1 1 3 0 2 1 3 2 3 1 2 0 2 3 1 1 0 2 3 2 3 2 1 0 1 3 2 1 1 3 0 3 1 3 2 2 0 2 2 3 2 1 3 1 3 0 1 3 2 2 2 0 1 2 3 1 2 1 2 3 0 2 1 0 3 1 3 3 1 2 0 1 3 2 2 1 1 3 2 3 1 1 3 2 2 3 0 2 1 3 0 3 1 3 0 2 1 2 3 0 3 1 3 2 1 1 0 1 3 2 3 1 3 2 2 1 1 2 0 2 0 2 1 1 2 1 2 0 0 3 0 1 2 3 2 2 0 2 1 3 1 1 3 2 1 1 3 0 1 0 1 0 0 2 3 1 3 2 2 2 2 1 2 2 1 2 0 2 1 3 1 3 2 2 1 1 3 1 3 2 1 1 0 0 1 1 3 2 3 3 2 2 1 0 0 2 0 3 1 2 2 2 1 2 3 2 2 0 2 0 1 1 3 2 2 2 2 0 0 1 3 0 0 1 1 1 2 2 2 2 3 3 2 2 2 2 1 2 3 2 3 2 3 3 1 0 0 2 1 3 0 1 2 3 2 2 3 1 2 0 2 1 1 2 1 0 3 1 2 2 3 2 1 1 2 1 2 1 2 1 2 1 2 1 2 0 2 2 0 1 0 1 0 1 0 2 0 3 1 1 0 2 3 3 2 3 2 1 0 2 3 2 1 1 2 2 0 2 1 2 1 1 1 2 3 2 0 2 1 1 0 2 2 1 1 2 2 1 3 3 1 2 1 1 2 2 1 2 3 2 2 2 2 1 3 3 1 3 1 0 3 2 1 3 1 1 2 1 1 1 2 1 2 1 1 0 2 1 2 2 1 3 0 1 1 0 0 3 1 2 2 3 1 3 1 1 2 1 0 0 0 0 2 2 2 1 2 1 1 2 2 2 0 1 2 2 0 3 1 1 2 3 2 2 2 2 3 1 0 1 1 2 2 2 1 1 0 1 2 3 3 1 1 3 1 0 2 1 1 3 2 3 2 2 2 2 1 3 1 1 1 0 1 2 2 1 1 0 2 1 2 1 0 1 1 3 1 2 2 1 0 1 0 2 1 2 1 1 0 2 2 2 3 2 3 1 0 2 2 2 2 1 1 0 1 1 1 1 2 1 1 2 2 3 1 0 3 1 1 1 2 2 1 2 2 2 1 1 2 1 0 2 0 2 0 1 1 1 1 1 1 1 1 0 1 0 0 1 1 2 2 1 2 1 2 3 1 0 0 2 0 1 2 0 3 3 2 2 2 3 3 3 2 1 2 1 1 2 1 2 1 1 2 2 2 1 2 2 3 2 0 1 2 0 0 2 0 3 0 2 3 3 0 2 2 1 1 1 3 2 1 0 1 0 0 2 2 1 3 3 2 1 1 3 1 2 3 2 1 1 1 1 2 1 0 2 0 2 2 3 1 3 1 1 2 2 1 1 3 1 3 1 1 3 0 2 3 1 0 2 3 2 0 2 2 2 0 1 2 1 0 3 2 2 1 3 1 2 3 2 2 2 0 3 2 2 0 1 3 3 1 1 1 0 2 1 0 1 1 1 0 3 1 1 0 2 0 3 2 2 0 0 2 1 1 0 1 0 3 1 1 0 2 0 1 1 1 1 2 2 2 0 0 3 1 2 2 1 1 1 1 1 0 1 2 2 0 1 1 2 2 0 1 0 2 2 1 2 2 3 3 2 1 1 1 0 1 3 3 2 0 1 2 2 1 2 1 1 0 1 0 0 2 1 1 2 1 1 1 2 2 2 2 2 2 1 2 1 3 1 0 1 2 2 2 1 1 1 0 3 1 0 1 1 2 1 0 1 1 3 1 0 1 1 3 0 2 2 0 0 1 1 2 0 1 2 0 2 0 1 2 0 1 1 1 0 2 2 1 0 2 0 1 1 1 1 2 1 1 1 1 2 2 1 1 0 2 1 0 2 1 1 1 1 1 0 1 2 3 1 0 0 3 2 2 0 2 0 2 1 2 1 0 1 3 3 2 1 2 1 1 1 3 1 2 1 2 2 1 2 1 0 1 1 2 1 2 1 0 1 0 1 0 0 1 1 3 2 1 2 2 1 2 1 3 1 2 1 1 1 1 1 2 2 0 0 1 0 2 2 3 1 2 1 0 1 1 2 1 1 1 1 1 1 0 2 1 3 1 1 2 0 0 1 1 0 2 2 1 1 1 1 1 1 2 1 0 2 0 1 1 2 0 0 0 1 3 2 1 0 1 1 0 2 1 2 2 2 0 1 2 1 2 1 2 0 1 2 1 0 2 1 3 1 1 2 2 2 2 2 1 2 0 1 2 1 0 1 3 2 1 1 1 1 1 2 1 2 1 1 1 1 1 2 1 1 0 2 2 0 2 0 2 1 3 2 0 0 2 0 2 1 0 1 1 0 1 1 2 0 2 0 0 2 0 2 1 1 0 1 3 2 1 2 3 1 1 0 2 2 0 1 0 2 0 2 0 2 1 1 1 1 1 1 2 1 2 1 1 1 1 1 1 2 0 0 1 1 1 1 1 1 1 1 2 2 2 0 2 1 1 2 1 0 1 0 2 1 1 1 0 3 1 1 2 2 0 1 1 1 1 1 1 1 1 2 3 2 1 1 0 3 2 3 1 0 0 3 1 0 1 1 0 1 1 0 0 0 1 1 3 1 1 1 1 1 2 2 1 2 2 2 2 0 1 0 0 2 0 1 1 1 1 2 0 2 1 1 2 2 0 0 1 1 1 2 1 2 0 0 0 1 3 1 2 1 0 1 1 1 1 1 1 1 1 2 3 2 1 0 1 1 2 0 1 1 1 0 2 2 1 0 1 2 2 0 0 1 1 1 1 0 3 2 2 1 2 1 1 1 0 1 1 0 2 1 1 2 2 0 1 0 1 0 2 1 2 0 1 0 0 1 0 2 2 1 0 0 2 2 2 1 0 0 2 0 1 1 2 0 2 1 1 1 0 2 1 1 0 2 0 2 1 1 0 1 1 0 1 0 0 1 1 0 2 1 0 1 1 2 1 1 1 1 2 2 1 1 0 2 0 2 1 0 0 1 0 1 1 1 1 0 1 1 2 2 1 2 1 1 1 1 1 2 1 1 0 1 2 1 2 0 1 0 1 1 1 2 0 1 1 1 1 1 0 1 1 1 1 2 1 1 0 1 1 2 1 0 1 1 2 1 0 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 0 1 2 1 2 1 1 0 1 1 2 1 2 2 0 1 0 0 2 0 1 0 2 1 1 0 1 0 1 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == \"1 1 1\\n1 1 2\\n1 1 3\\n1 1 4\\n1 2 1\\n1 2 2\\n1 2 3\\n1 2 4\\n1 3 1\\n1 3 2\\n1 3 3\\n1 3 4\\n1 4 1\\n1 4 2\\n1 4 3\\n1 4 4\\n2 1 1\\n2 1 2\\n2 1 3\\n2 1 4\\n2 2 1\\n2 2 2\\n2 2 3\\n2 2 4\\n2 3 1\\n2 3 2\\n2 3 3\\n2 3 4\\n2 4 1\\n2 4 2\\n2 4 3\\n2 4 4\\n3 1 1\\n3 1 2\\n3 1 3\\n3 1 4\\n3 2 1\\n3 2 2\\n3 2 3\\n3 2 4\\n3 3 1\\n3 3 2\\n3 3 3\\n3 3 4\\n3 4 1\\n3 4 2\\n3 4 3\\n3 4 4\\n4 1 1\\n4 1 2\\n4 1 3\\n4 1 4\\n4 2 1\\n4 2 2\\n4 2 3\\n4 2 4\\n4 3 1\\n4 3 2\\n4 3 3\\n4 3 4\"\n=====Output Format=====\nPrint the list in lexographic increasing order, each in a separate line.\n\nSample Input 0\n1\n1\n1\n2\nSample Output 0\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1]]\n\nSample Input 1\n1\n2\n2\n2\nSample Output 1\n[[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]\n\"\"\"\n"
    },
    {
        "number": 4674,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n1\\n2\\n3\") == \"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\"\n\n=====Output=====\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2]]\n\nassert solution(\"1\\n1\\n2\\n3\") == \"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2]]\"\n\n=====Performance=====\nInput size: 3 \u2264 x, y, z \u2264 100\nTime: <1ms\nMemory: <1MB\n\n=====Notes=====\nInput sizes were selected so that it's very easy to test different implementations.\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"3.00+4.00i\"\nassert solution(\"0 1\") == \"1.00+1.00i\"\nassert solution(\"0 -1\") == \"0.00-1.00i\"\nassert solution(\"1 -1\") == \"0.00+2.00i\"\nassert solution(\"1 0\") == \"0.00+1.00i\""
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 2') == '2 -2i\\n2 2i\\n-2i 2i\\n2 -2i\\n0.00-0.00i'\n=====Example 1=====\nInput:\n2 1\nOutput:\n3 -1i\n2 -1i\n-1.00+1.00i\n\n=====Example 2=====\nInput:\n3 4\nOutput:\n-5.00+3.00i\n-1.00+0.00i\n2.00-5.00i\n\n=====Example 3=====\nInput:\n2 -1\nOutput:\n1.00+1.00i\n-2.00+1.00i\n\n=====So basically=====\nWe have two complex numbers, and we have to print the result of each operation on them.\n\nThe first line contains their real and imaginary parts separately, in a space-separated sequence. The real and imaginary parts will be of the following format:\n\n{number} {'+' if the number is positive, '-' if the number is negative} {'i' if the number has an imaginary part and no complex part\n\nFor example, if the input is:\n\n2 -1\nThe output will be:\n\n2 -1\nThe real part is:\n\n2\nThe imaginary part is:\n\n-1\n\nFor another example, if the input is:\n\n3 4\nThe output will be:\n\n-5.00+3.00i\nThe real part is:\n\n-5\nThe imaginary part is:\n\n3\n\n=====================\nSample Output\n=====================\n\n5.00+2.00i\n3.00+5.00i\n3.00+2.00i\n0.25+0.25i\n0.25+0.25i\n0.25+0.25i\n1.00+0.00i\n1.00+0.00i\n1.00+0.00i\n1.00+0.00i\n1.00+0.00i\n\n3.00+0.00i\n0.00+0.00i\n1.00+0.00i\n3.00+0.00i\n0.00+0.00i\n0.00+0.00i\n1.00+0.00i\n0.00+0.00i\n-0.00+0.00i\n1.00+0.00i\n1.00+0.00i\n0.00+0.00i\n\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n\n2.00+0.00i\n0.00+0.00i\n0.00+0.00i\n2.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n2.00+0.00i\n0.00+0.00i\n0.00+0.00i\n2.00+0.00i\n0.00+0.00i\n\n-1.00+0.00i\n1.00+0.00i\n0.00+0.00i\n-1.00+0.00i\n0.00+0.00i\n1.00+0.00i\n1.00+0.00i\n-1.00+0.00i\n0.00+0.00i\n0.00+0.00i\n-1.00+0.00i\n0.00+0.00i\n\n-1.00+0.00i\n0.00+0.00i\n1.00+0.00i\n-1.00+0.00i\n0.00+0.00i\n0.00+0.00i\n1.00+0.00i\n0.00+0.00i\n-1.00+0.00i\n0.00+0.00i\n1.00+0.00i\n0.00+0.00i\n\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i\n0.00+0.00i"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"0.00+0.00i\"\nassert solution(\"0 1\") == \"0.00+1.00i\"\nassert solution(\"-1 1\") == \"-0.00+1.00i\"\nassert solution(\"1 -1\") == \"0.00-1.00i\"\nassert solution(\"1 -1\") == \"0.00-1.00i\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4+4i') == '4+4i'\nassert solution('4+4i') == '4+4i'\nassert solution('4+4i') == '4+4i'\nassert solution('4+4i') == '4+4i'\nassert solution('4+4i') == '4+4i'\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2') == '3 -1'\nassert solution('2 1') == '0 1'\nassert solution('1 1 1 1') == '2i'\nassert solution('0 1') == '0.00+1.00i'\n=======\n>>>>>>> e48f96d3d0f1e09a0a5bbc6008bae04b7c4b5f35\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"2.00+2.00i\"\nassert solution(\"1.1 1.1\") == \"2.01+2.01i\"\nassert solution(\"1.11 12.22\") == \"1.23+14.53i\"\nassert solution(\"0 1\") == \"0.00+1.00i\"\nassert solution(\"0.0 0.0\") == \"0.00+0.00i\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == '2.00+0.00i'\nassert solution('1+1i') == '2.00+0.00i'\nassert solution('1 1i') == '2.00+0.00i'\nassert solution('1-1i') == '0.00-2.00i'\nassert solution('1-1 1') == '0.00-2.00i'\n=====\nimport os\nimport math\nimport random\nimport re\nimport sys\nimport string"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"1+1i\\n0+1i\\n1+0i\\n0+0i\\n1+1i\\n1+1i\\n0+0i\\n0+0i\"\nassert solution(\"1 1 1 1\") == \"2+0i\\n1+1i\\n0+1i\\n1+1i\\n1+1i\\n0+0i\\n0+0i\\n1+0i\"\nassert solution(\"1 1 1 1 0 0\") == \"2+0i\\n1+1i\\n0+1i\\n1+1i\\n0+0i\\n0+0i\\n0+0i\\n1+0i\"\nassert solution(\"0 1\") == \"0.00+1i\\n0.00+1i\"\nassert solution(\"0 0\") == \"0.00+0i\\n0.00+0i\"\n=====Constraints=====\nGiven number is a valid complex number\nOutput for every test case will be in a separate line.\n\n=========Result=========\nRun 1:\nCase #1: 1.00+1.00i\nCase #2: 1.00+1.00i\nCase #3: 1.00+1.00i\nCase #4: 0.00+1.00i\nCase #5: 0.00+1.00i\n\nRun 2:\nCase #1: 1.00-1.00i\nCase #2: 1.00-1.00i\nCase #3: 1.00-1.00i\nCase #4: 0.00-1.00i\nCase #5: 0.00-1.00i\n\nRun 3:\nCase #1: 1.00+1.00i\nCase #2: 1.00+1.00i\nCase #3: 1.00+1.00i\nCase #4: 1.00+1.00i\nCase #5: 1.00+1.00i\n\nRun 4:\nCase #1: 1.00-1.00i\nCase #2: 1.00-1.00i\nCase #3: 1.00-1.00i\nCase #4: 1.00-1.00i\nCase #5: 1.00-1.00i\n\nRun 5:\nCase #1: 0.00+0.00i\nCase #2: 0.00+0.00i\nCase #3: 0.00+0.00i\nCase #4: 0.00+0.00i\nCase #5: 0.00+0.00i\n\"\"\"\n\nimport math\nfrom complex_number import ComplexNumber\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"0 0\"\nassert solution(\"1 -1\") == \"0 1\"\nassert solution(\"0 -1\") == \"-1 0\"\nassert solution(\"1 1\") == \"0 0\"\nassert solution(\"0 1\") == \"0 0\"\n"
    },
    {
        "number": 4675,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 + 1i\") == \"1 + 1i\\n1 - 1i\\n1 + 1i\\n1 - 1i\\n1.00 + 0.00i\\n1.00 - 0.00i\"\nassert solution(\"0 + 2i\") == \"0 + 2i\\n0 - 2i\\n2 + 0i\\n0 - 2i\\n0.00 + 0.00i\\n0.00 - 0.00i\"\nassert solution(\"1 + 1i + 1 + 1i\") == \"1 + 1i\\n1 - 1i\\n2 + 1i\\n2 - 1i\\n3.00 + 0.00i\\n1.00 - 0.00i\"\nassert solution(\"0 + 1i + 1 + 1i\") == \"0 + 1i\\n1 - 1i\\n2 + 1i\\n0 - 1i\\n1.00 + 0.00i\\n1.00 - 0.00i\"\n=====Test Data=====\n1 + 1i\n0 + 2i\n1 + 1i + 1 + 1i\n0 + 1i + 1 + 1i\n1 + 2i\n0 + 1i\n\n0\n0\n1 + 1i\n0\n0\n0\n0\n1 + 1i\n0\n0\n1 + 2i\n1 + 1i\n0\n1 + 2i\n1 + 1i\n0\n0\n0\n0\n0\n0\n0\n1 + 2i\n1 + 2i\n0\n0\n0\n0\n0\n0\n0\n0\n1 + 1i\n1 + 1i\n0\n0\n1 + 2i\n2 + 0i\n0\n2 + 0i\n0\n0\n2 + 0i\n2 + 0i\n0\n0\n2 + 0i\n0\n0\n1 + 2i\n0\n0\n2 + 0i\n1 + 1i\n1 + 1i\n0\n0\n1 + 1i\n1 + 1i\n1 + 1i\n1 + 1i\n0\n1 + 1i\n1 + 1i\n1 + 1i\n0\n1 + 1i\n1 + 1i\n0\n1 + 1i\n0\n1 + 1i\n0\n0\n1 + 1i\n2 + 0i\n2 + 0i\n2 + 0i\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1 + 1i\n1 + 1i\n0\n0\n1 + 2i\n0\n0\n2 + 0i\n0\n0\n0\n0\n0\n0\n0\n0\n1 + 2i\n1 + 1i\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1 + 1i\n0\n0\n0\n0\n0\n1 + 1i\n0\n0\n0\n0\n0\n0\n0\n0\n1 + 1i\n0\n0\n0\n0\n1 + 1i\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1 + 2i\n0\n0\n0\n1 + 1i\n0\n0\n0\n0\n0\n1 + 1i\n0\n0\n1 + 1i\n1 + 1i\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('xyz') == 'xaybzc'\n\"\"\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('xyzabc') == 'xaybzc'\nassert solution('abc') == 'abc'\nassert solution('a') == 'a'\nassert solution('z') == 'z'\nassert solution('x') == 'x'\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n\"\"\""
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('xyz') == 'xaybzc'\n\"\"\"\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abcd') == 'dcba'\nassert solution('xyz') == 'zxy'\nassert solution('1111') == '1111'\nassert solution('2222') == '2222'\nassert solution('111111') == '11111'\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\n\"\"\""
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('abc') == 'abc'\nassert solution('abcxyz') == 'abcxaybzc'\nassert solution('abcxyzde') == 'abcxaybzcde'\nassert solution('abcxyzde1') == 'abcxaybzcde1'\n"
    },
    {
        "number": 4676,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"xyz\") == \"xaybzc\"\nassert solution(\"abc\") == \"xaybzc\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('010') == '00'\nassert solution('0111') == '0'\nassert solution('0110111') == '0'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"01B0\") == \"00\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"01B0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1B1\") == \"0\"\nassert solution(\"1B\") == \"\"\nassert solution(\"0\") == \"\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"01B0\") == \"00\"\n\"\"\""
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('01B0') == '00'\nassert solution('100100101') == '010'\n\"\"\""
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"01B0\") == \"00\"\n\"\"\"\n"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"01\") == \"01\"\n\"\"\""
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('01B0') == '00'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"01\") == \"0\"\nassert solution(\"11\") == \"1\"\nassert solution(\"1010\") == \"0\"\nassert solution(\"10111011011101111011010\") == \"0\"\n\"\"\""
    },
    {
        "number": 4677,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"01B0\") == \"00\"\nassert solution(\"11110\") == \"101\"\n\"\"\""
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(3, [1, 1]) == 2\nassert solution(3, [0, 0, 1]) == 2\nassert solution(3, [0, 0, 0]) == 0\nassert solution(2, [1, 1]) == 2\nassert solution(1, [0]) == 0\n\nimport sys\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\"\"\""
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\nprint('Test finished.')\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\na = [int(i) for i in sys.stdin.readline().split()]\n\ntotal = 0\n\nfor i in range(n - 1):\n    if a[i] <= a[i + 1]:\n        total += a[i]\n    else:\n        total += a[i + 1]\n\ntotal += a[n - 1]\nprint(total)\n"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n2 1 5 4 3') == '4'\n\"\"\"\nimport unittest\nfrom collections import Counter"
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 5 4 3\") == \"4\"\n\"\"\""
    },
    {
        "number": 4678,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\n2 1 5 4 3''') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"aca\") == \"A\"\n\"\"\""
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aca\\naccc\\nca\") == \"A\"\nassert solution(\"ac\\nab\\na\") == \"C\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aca\\ncacc') == 'A'\nassert solution('ca\\nccc') == 'C'\nassert solution('ca\\ncca') == 'A'\nassert solution('ca\\nccc\\ncca\\nccc') == 'C'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"aca\\naccc\\nca\") == \"A\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"B\"\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('aca\\ncac\\nca') == 'A'\n\"\"\"\n\nimport unittest\nfrom collections import deque\n\nclass Solution:\n    def __init__(self, a: str, b: str, c: str):\n        self.a = deque(a)\n        self.b = deque(b)\n        self.c = deque(c)\n\n    def next_round(self):\n        if self.a and self.b and self.c:\n            if self.a[0] > self.b[0]:\n                return 'A'\n            elif self.a[0] > self.c[0]:\n                return 'B'\n            elif self.b[0] > self.c[0]:\n                return 'C'\n            else:\n                self.a.popleft()\n                self.b.popleft()\n                self.c.popleft()\n        else:\n            return 'E'\n\n    def play(self):\n        while self.a or self.b or self.c:\n            result = self.next_round()\n            if result == 'A':\n                print('A')\n                break\n            elif result == 'B':\n                print('B')\n                break\n            elif result == 'C':\n                print('C')\n                break\n            elif result == 'E':\n                print('E')\n                break\n\nclass TestSolution(unittest.TestCase):\n    def test_solution_0(self):\n        a = 'aca'\n        b = 'accc'\n        c = 'ca'\n        solution = Solution(a, b, c)\n        solution.play()\n\n    def test_solution_1(self):\n        a = 'abc'\n        b = 'bcd'\n        c = 'cde'\n        solution = Solution(a, b, c)\n        solution.play()\n\n    def test_solution_2(self):\n        a = 'bcb'\n        b = 'cab'\n        c = 'caa'\n        solution = Solution(a, b, c)\n        solution.play()"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    'aca\\n'\n    'accc\\n'\n    'ca'\n) == 'A'\n\nassert solution(\n    'aca\\n'\n    'accc\\n'\n    'ca'\n) == 'A'\n\nassert solution(\n    'aca\\n'\n    'accc\\n'\n    'ca'\n) == 'A'\n\nassert solution(\n    'aca\\n'\n    'accc\\n'\n    'ca'\n) == 'A'\n\nassert solution(\n    'aca\\n'\n    'accc\\n'\n    'ca'\n) == 'A'"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aca\\nc\\n\") == \"A\"\nassert solution(\"a\\nac\\n\\n\") == \"A\"\n\"\"\""
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"aca\") == \"A\"\nassert solution(\"accc\") == \"C\"\nassert solution(\"ca\") == \"B\"\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4679,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('aca\\naccc\\nca\\n') == 'A'\nassert solution('a\\nbbc\\nbb\\n') == 'B'\nassert solution('ca\\nca\\ncc\\n') == 'C'\nassert solution('bb\\nbb\\nbb\\n') == 'C'\n\nprint('Success')"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\nassert solution(\"5 7 5\") == \"NO\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5 7\\n\") == \"YES\"\nassert solution(\"5 6 7\\n\") == \"NO\"\nassert solution(\"7 5 5\\n\") == \"YES\"\nassert solution(\"7 8 5\\n\") == \"NO\"\nassert solution(\"5 6 8\\n\") == \"NO\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5 7\") == 'YES'\n\n---\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 5 7\\n') == 'YES'\nassert solution('3 2 3\\n') == 'NO'\nassert solution('10 10 10\\n') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n1 1 1\n''') == \"YES\"\n\nassert solution('''\n5 7 5\n''') == \"NO\"\n\nassert solution('''\n5 7 1\n''') == \"YES\"\n\nassert solution('''\n5 7 2\n''') == \"YES\"\n\nassert solution('''\n7 5 7\n''') == \"NO\""
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    '1 2 3\\n'\n    '4 5 6\\n'\n    '7 8 9'\n) == 'YES'\n\nassert solution(\n    '1 2 3\\n'\n    '4 5 6\\n'\n    '7 8 9\\n'\n    '5 7 9\\n'\n    '1 2 6\\n'\n    '4 6 9'\n) == 'YES'\n\nassert solution(\n    '2 2 3\\n'\n    '1 1 2\\n'\n    '1 2 3\\n'\n    '1 2 3'\n) == 'YES'\n\nassert solution(\n    '1 2 3\\n'\n    '1 2 3\\n'\n    '1 2 3\\n'\n    '1 2 3'\n) == 'YES'\n\nassert solution(\n    '1 2 3\\n'\n    '4 5 6\\n'\n    '7 8 9\\n'\n    '1 2 6\\n'\n    '4 6 9\\n'\n    '5 7 9'\n) == 'NO'"
    },
    {
        "number": 4680,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 5 7\") == \"YES\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n') == '11'\n\"\"\"\n\nfrom collections import deque\nfrom typing import List\n\n\nclass Node:\n    def __init__(self, data: int, prev: 'Node' = None, next: 'Node' = None):\n        self.data = data\n        self.prev = prev\n        self.next = next\n\n    def __str__(self) -> str:\n        return f'{self.data}'\n\n    def __repr__(self) -> str:\n        return f'{self.data}'\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def append(self, data: int) -> None:\n        new_node = Node(data)\n\n        if self.head is None:\n            self.head = new_node\n            self.tail = new_node\n            return\n\n        self.tail.next = new_node\n        new_node.prev = self.tail\n        self.tail = new_node\n\n    def __str__(self) -> str:\n        if self.head is None:\n            return ''\n\n        ll_str = ''\n        node = self.head\n        while node is not None:\n            ll_str += f'{str(node)} -> '\n            node = node.next\n\n        ll_str += 'None'\n        return ll_str\n\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def append(self, data: int) -> None:\n        new_node = Node(data)\n\n        if self.head is None:\n            self.head = new_node\n            self.tail = new_node\n            return\n\n        self.tail.next = new_node\n        new_node.prev = self.tail\n        self.tail = new_node\n\n    def __str__(self) -> str:\n        if self.head is None:\n            return ''\n\n        ll_str = ''\n        node = self.head\n        while node is not None:\n            ll_str += f'{str(node)} -> '\n            node = node.next\n\n        ll_str += 'None'\n        return ll_str\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n\nn = int(stdin.readline())"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5') == '11'\n\"\"\""
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\""
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\""
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2\\n1\"\nassert solution(\"5\") == \"11\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"11\"\n\"\"\"\n"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"11\"\nprint(solution(\"5\"))"
    },
    {
        "number": 4681,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == '11'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nlst = [2, 1]\n\nfor i in range(2, N):\n    lst.append(lst[i - 1] + lst[i - 2])\n\nprint(lst[-1])\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 2') == '7'\n\n\"\"\"\n\n\"\"\"\nSolution\n\nFirst of all, we can find the area using simple formula:\n\nwidth = a + b\nheight = h\n\narea = (width * height) / 2\n\nFor example, if we have a = 3, b = 4 and h = 2:\n\nThe width of the trapezoid is 3 + 4 = 7, so its area is (7 \u00d7 2) / 2 = 7.\n\nYou can use the same formula to find the area of other trapezoids.\n\"\"\"\n\na, b, h = map(int, stdin.split())\nprint((a + b) * h / 2)\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4 2\") == \"7\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"0 0 1\") == \"1\"\nassert solution(\"0 0 1\") == \"1\"\nassert solution(\"0 0 1\") == \"1\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n4\\n2') == '7'\n\"\"\""
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 2\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '9'\nassert solution('1 2 3 4') == '18'\nassert solution('1 2 3 4 5') == '54'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '140'\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 2\") == \"7\""
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4 2\") == \"7\"\nassert solution(\"100 100 100\") == \"5000\"\nassert solution(\"1 2 3 4\") == \"10\"\nassert solution(\"100 200 3\") == \"250\"\nassert solution(\"100 10 200\") == \"1000\"\n\"\"\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 2\") == \"7\"\nassert solution(\"4 5 6\") == \"15\"\nassert solution(\"1 2 3\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 4 2') == '7'\n\"\"\""
    },
    {
        "number": 4682,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 2\") == '7'\n\"\"\"\n\n\"\"\"\nWrite a function:"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"10\"\nassert solution(\"5\\n5 5 5 5 5\") == \"25\"\nassert solution(\"6\\n2 5 6 2 1 2\") == \"50\"\nassert solution(\"1\\n1\") == \"1\"\nassert solution(\"2\\n5 5\") == \"25\"\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == '11'\nprint('Cool! It\\'s done! Go check it!')\n\n\"\"\""
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 2 3') == '11'\n\"\"\"\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == ''\nassert solution('1 2 3') == '11'\n'''\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 4 5') == '39\\n'\nassert solution('1\\n1') == '1\\n'"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2 3\\n\") == \"11\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2 3\\n\") == '11'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\\n\") == \"11\"\n\"\"\""
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n1 2 3\") == \"11\"\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4683,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(1) == \"0\"\nassert solution(2) == \"0\"\nassert solution(3) == \"9\"\nassert solution(4) == \"35\"\nassert solution(5) == \"51\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\nassert solution(\"4 3 3\") == \"NO\"\nassert solution(\"1 1 1\") == \"NO\"\nassert solution(\"1 1 7\") == \"YES\"\nassert solution(\"1 2 2\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'NO'\nassert solution('3 3 3') == 'YES'\nassert solution('4 3 2') == 'YES'\nassert solution('8 8 2') == 'NO'\nassert solution('1 1 1') == 'NO'\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\"\"\"\n\n\"\"\"\nIncorrect Code:\n"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 2') == 'YES'\nassert solution('4 5 6') == 'NO'\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 4\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 'NO'\nassert solution('7 4 2') == 'YES'\nassert solution('1 3 1') == 'YES'\nassert solution('2 9 8') == 'NO'\n\n### \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 ###"
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4684,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3 2\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\nassert solution(\"6 3 2\") == \"YES\"\n\"\"\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 11\\n1') == '30'\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\n\"\"\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 11\\n1\\n\") == \"30\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 11\\n1\") == \"30\"\n\"\"\"\n\nA, B, C = [int(s) for s in stdin.readline().split()]\nK = int(stdin.readline())\n\nprev = C\n\nfor i in range(1, K + 1):\n    prev = 2 * prev\n    A, B, C = 2 * A, 2 * B, 2 * C\n\nprint(max(A, B, C))\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 11\\n1\\n\") == \"30\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 11\\n1') == '30'\n\n\"\"\""
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 11\\n1') == '30'\n\"\"\"\n\nimport sys\n\nnums = [int(x) for x in stdin.readlines()[0].split(' ')]\nk = int(sys.stdin.readlines()[1])\n\nprint(sum(map(lambda x: 2*x if x <= k else x, nums)))\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 11\") == \"30\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 11\\n1\\n') == '30'\n\n\"\"\"\n"
    },
    {
        "number": 4685,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 11\\n1\\n\") == \"30\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('aaaa') == 'Yes'\nassert solution('aabb') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abccba\") == \"Yes\"\nassert solution(\"aabbcd\") == \"No\"\n\n-------------\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('aa') == 'No'"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(s) == \"Yes\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abaccaba') == 'Yes'\nassert solution('abccba') == 'No'\n\"\"\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('abbccccccbb') == 'Yes'\nassert solution('abccddeeff') == 'No'\n\"\"\"\n\nimport unittest\nfrom collections import Counter\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"bcbcccbc\") == \"No\"\n\"\"\"\n\nimport math\n\n\"\"\"\nWe count the number of each character in the string.\nFor each character we compare it with each character in the English alphabet.\nThe number of times each character occurs in the string is compared with the number of times it occurs in the English alphabet.\nIf the number of times the character occurs in the English alphabet is the same as the number of times the character occurs in the string, the string is beautiful.\nOtherwise, the string is not beautiful.\n\"\"\"\n"
    },
    {
        "number": 4686,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"abaccaba\") == \"Yes\"\nassert solution(\"aabbcc\") == \"No\"\n\"\"\""
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\\n\") == \"3\"\n\"\"\"\n\nimport heapq"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n1 1\\n2 2\\n3 3\") == \"3\"\n\"\"\"\nfrom heapq import heappush, heappop\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 4\n1 1\n2 2\n3 3''') == '3'\nassert solution('''5 2\n1 1\n3 1\n3 3\n2 2\n4 1''') == '3'\nassert solution('''5 3\n1 1\n3 1\n3 3\n2 2\n4 1''') == '2'\nassert solution('''5 4\n1 1\n3 1\n3 3\n2 2\n4 1''') == '2'\nassert solution('''5 5\n1 1\n3 1\n3 3\n2 2\n4 1\n5 1\n''') == '2'\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4\\n1 1\\n2 2\\n3 3\") == 3\n\"\"\"\n\n\"\"\"\nGiven an array of integers. Return the sum of the largest subarray in it.\nInput Format\nFirst line of the input contains N, the number of elements in the array.\nSecond line of the input contains N space-separated integers, the elements of the array.\nOutput Format\nPrint the sum of the largest subarray in the array.\nConstraints\n1 \u2264 N \u2264 100\n1 \u2264 a[i] \u2264 10^5, for all 0 \u2264 i < N\nExample\nInput\nOutput\n3\n1 1\n1 2\n4 6\nOutput\n7\nExplanation\nThe sum of the largest subarray is 1+2+6 = 9\n\n\"\"\""
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\\n1 1\\n2 2\\n3 3\\n\") == 3\n\"\"\"\n\nfrom heapq import heappop, heappush\nfrom collections import deque"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n3 4\") == \"3\"\n\"\"\""
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\") == \"3\"\nassert solution(\"4 2\\n1 1\\n2 2\\n3 3\\n4 4\") == \"2\"\n\"\"\"\nimport sys\nimport typing"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\\n\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2\\n1 1\\n2 2\") == \"3\"\n\"\"\""
    },
    {
        "number": 4687,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\") == \"3\"\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 2') == '2'\nassert solution('4 4') == '4'\nassert solution('1 1') == '1'\nassert solution('3 2') == '1'\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2\\n\") == \"2\"\n\n\"\"\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2') == '2'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"2\"\n\"\"\"\n\n\"\"\"\nN k\n\n0 1\n\n2 2\n\n1 1\n\n2 1\n\n0 1\n\n2 1\n\n\"\"\"\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"3 4\") == \"8\"\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 2\\n') == '2'\nassert solution('2 2\\n1 1') == '1'\nassert solution('1 1\\n0') == '1'\n\"\"\""
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n\") == \"2\"\n\"\"\"\n\nfrom math import factorial\n\nn, k = list(map(int, input().split()))\n\ncount = factorial(n) // (factorial(k) * factorial(n - k))\nprint(count % (10 ** 9 + 7))\n"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2') == 2\nassert solution('2 3') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4688,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"2\"\n\nIf you test your code after every change you made, you should be able to come up with a correct solution for any input.\n\"\"\""
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20 3\\n5 10 15\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20 3\\n5 10 15\") == \"10\"\n\"\"\""
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\n1 2 3') == '6'\nassert solution('20 10\\n9 8 7 6 5 4 3 2 1') == '100'\n\"\"\"\n\nimport math\n\nK, N = [int(num) for num in stdin.split()]\nhouses = [int(num) for num in stdin.split()]\nhouses.sort()\n\nhouse_count = len(houses)\n\ndist = 0\nfor index in range(house_count):\n    left_limit = dist + 1\n    right_limit = K\n    if index == 0:\n        left_limit = 0\n    elif index == house_count - 1:\n        right_limit = K\n    else:\n        left_limit = houses[index - 1]\n        right_limit = houses[index + 1]\n    dist += (houses[index] - left_limit + 1) * (right_limit - houses[index] + 1)\n\nprint(dist)"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20 3\\n5 10 15\") == 10\n\"\"\"\n\nimport sys\n\nK, N = map(int, sys.stdin.readline().strip().split())\nA = list(map(int, sys.stdin.readline().strip().split()))\nA.sort()\nA = A[::-1]"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 10 15\") == \"10\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 3\\n5 10 15\") == \"10\"\n\"\"\"\n\nimport sys\n\nK, N = map(int, sys.stdin.readline().strip().split())\n\nhouses = list(map(int, sys.stdin.readline().strip().split()))\n\nhouses.sort()\nhouses = houses[::-1]\n\nmin_dist = 0\n\nfor house in houses[1:]:\n    if house < K:\n        break\n    dist = house - K\n    min_dist += dist\n    K += dist"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2\") == 2\nassert solution(\"20 3\") == 10\n\"\"\"\n"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('20 3\\n5 10 15\\n') == 10\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 10 15\\n') == '10'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4689,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n1 2\\n1 3') == '2'\n\"\"\""
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"5 4 3 2\") == \"20\"\n\"\"\""
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"./sample/1\") == \"15\"\nassert solution(\"./sample/2\") == \"14\"\n\"\"\"\n\n\"\"\"\n\u984c\u76ee: https://pt.kattis.com/problems/area\n\u53c3\u8003: https://coder42.tistory.com/110\n\nsample1:\n3 5 2 7\n\nsample2:\n3 5 2 6\n\n\u554f\u984c: \u8f38\u5165\u82e5\u5e72\u76f4\u65b9\u5716\u7684\u9577\u5ea6A, B, C, D\uff0c\u5224\u65b7\u5169\u8005\u4e2d\u5927\u8005(A\u2264B, C\u2264D)\n\u89e3\u6cd5:\n1. \u8f38\u5165\u82e5\u5e72\u76f4\u65b9\u5716\uff0c\u5f9einput\u8b80\u53d6\n2. \u5229\u7528split()\u51fd\u6578\u628a\u8f38\u5165\u8f49\u63db\u6210list\n3. \u5148\u7528append()\u51fd\u6578\u628alist\u4e2d\u7684\u5143\u7d20append\u5230list_list\n4. \u7528map()\u51fd\u6578\u628a\u6bcf\u500blist\u4e2d\u7684\u5b57\u4e32\u8f49\u63db\u6210int\n5. \u5148\u628aA, B, C, D\u5206\u5225\u8a2d\u6210max_a, max_b, max_c, max_d\n6. \u628amax_a, max_b, max_c, max_d\u6307\u5b9a\u7d66\u4e09\u500b\u7a7alist\n7. \u628a\u7531\u525b\u525b\u7684input()\u8b80\u53d6\u7684\u5b57\u4e32\u8f49\u63db\u6210list\u7684\u4e09\u500b\u5206\u5225\u8a2d\u6210a, b, c, d\n8. \u5148\u628amax_a, max_b, max_c, max_d\u6307\u5b9a\u7d66\u4e09\u500b\u7a7alist\n9. \u518d\u628aa, b, c, d\u5206\u5225\u8a2d\u6210a_list, b_list, c_list, d_list\n10. \u628aa_list, b_list, c_list, d_list\u6307\u5b9a\u7d66\u4e09\u500b\u7a7alist\n11. \u628aa_list, b_list, c_list, d_list\u5206\u5225\u7528append()\u51fd\u6578\u628alist\u52a0\u5165\u4e09\u500b\u7a7alist\u4e2d\n12. \u7528map()\u51fd\u6578\u628aa_list, b_list, c_list, d_list\u5206\u5225\u8f49\u63db\u6210int\n13. \u628a\u4e09\u500bint\u6307\u5b9a\u7d66\u4e09\u500b\u7a7alist\n14. \u628aa_list, b_list, c_list, d_list\u5206\u5225\u7528append()\u51fd\u6578\u628alist\u52a0\u5165\u4e09\u500b\u7a7alist\u4e2d\n15. \u628aa_list, b_list, c_list, d_list\u5206\u5225\u7528append()\u51fd\u6578\u628alist\u52a0\u5165\u4e09\u500b\u7a7alist\u4e2d\n16. \u4f7f\u7528\u5169\u8005\u76f8\u4e58\u6700\u5927\u7684\u90a3\u500b\n17. \u5229\u7528max()\u51fd\u6578\u628a\u4e09\u500blist\u4e2d\u6700\u5927\u7684\u8f38\u51fa\n\n\"\"\"\n\nlist_list = list()\nfor i in range(5):\n    list_list.append(input().split())\nlist_list = list(map(int, list_list))\n\nmax_list = [max(list_list[0]), max(list_list[1]), max(list_list[2]), max(list_list[3])]\n\na_list = []\nb_list = []\nc_list = []\nd_list = []\n\nfor i in range(5):\n    if list_list[0][i] == max_list[0]:\n        a_list.append(list_list[0][i])\n    if list_list[1][i] == max_list[1]:\n        b_list.append(list_list[1][i])\n    if list_list[2][i] == max_list[2]:\n        c_list.append(list_list[2][i])\n    if list_list[3][i] == max_list[3]:\n        d_list.append(list_list[3][i])\n\nprint(max(map(lambda x, y, z, w: x * y * z * w, a_list, b_list, c_list, d_list)) * max_list[0])"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 5 2 7') == '15'\nassert solution('5 4 3 2') == '25'\nassert solution('1 1 1 1') == '1'\nassert solution('5 5 5 5') == '25'\n\"\"\""
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\n\n\"\"\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nassert solution(\"7 5 2 3\") == \"14\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nprint(solution(\"3 5 2 7\"))\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\nprint('Test pass.')\n"
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\n\n\"\"\""
    },
    {
        "number": 4690,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5 2 7\") == \"15\"\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('AC\\nWA\\nAC\\nAC\\nWA\\nTLE\\n') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\nprint(solution(stdin.rstrip('\\n')))\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AC\") == \"AC x 3\"\nassert solution(\"WA\") == \"WA x 1\"\nassert solution(\"TLE\") == \"TLE x 2\"\nassert solution(\"RE\") == \"RE x 0\"\n\"\"\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AC\") == 'AC 3'\nassert solution(\"WA\") == 'WA 1'\nassert solution(\"TLE\") == 'TLE 2'\nassert solution(\"RE\") == 'RE 0'\nassert solution(\"TLE\\nTLE\") == 'TLE 2'\n\"\"\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\n\"\"\"\n\n\"\"\"\n\ud574\uc124\n\uc9c4\uc218\ub85c \ud478\ub294 \ubb38\uc81c\n\n\uc8fc\uc5b4\uc9c4 \ubb38\uc7a5\uc744 \ubaa8\ub450 \uc9c4\uc218\ub85c \ubcc0\ud658\n\uc9c4\uc218\ub85c \ubcc0\ud658\ud55c \ubb38\uc7a5\uc744 \ubc18\ubcf5\ud558\uc5ec \ucc3e\uace0, \uc704\uce58 \uc815\ubcf4\ub97c \uae30\ub85d\n\ucd9c\ub825\n\uc8fc\uc5b4\uc9c4 \uc9c4\uc218\ub97c \ubcc0\ud658\n\n\uc608\uc81c\nAC\nTLE\nAC\nAC\nWA\nTLE\n\nAC x 3\nWA x 1\nTLE x 2\nRE x 0\n\nT = {'A', 'B', 'C', 'D', 'E', 'F'}\n\n1. \ubb38\uc7a5\uc744 \ubaa8\ub450 \uc9c4\uc218\ub85c \ubcc0\ud658\n2. \ubc18\ubcf5\ubb38\uc744 \ud1b5\ud574 \uc9c4\uc218\ub85c \ubcc0\ud658\ub41c \ubb38\uc7a5\uc744 \ucc3e\uace0, \uc704\uce58 \uc815\ubcf4\ub97c \uae30\ub85d\n3. \ucd9c\ub825\n\n\"\"\"\n\n\"\"\"\nSolution:\nT = {'A', 'B', 'C', 'D', 'E', 'F'}\n\nT = {'A', 'B', 'C', 'D', 'E', 'F'}\nT = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n\nC[j][1] = N + 1 - j\nC[j][1] = j\n\nAC -> C[j][0] = j\nWA -> C[j][1] = j\nTLE -> C[j][2] = j\nRE -> C[j][3] = j\n\n\"\"\"\n\n\"\"\"\n\uc811\uadfc \ubc29\ubc95\n\uc8fc\uc5b4\uc9c4 \ubb38\uc7a5\uc744 \ubaa8\ub450 \uc9c4\uc218\ub85c \ubcc0\ud658\n\n\ubc18\ubcf5\ubb38\uc744 \ud1b5\ud574 \uc9c4\uc218\ub85c \ubcc0\ud658\ub41c \ubb38\uc7a5\uc744 \ucc3e\uace0, \uc704\uce58 \uc815\ubcf4\ub97c \uae30\ub85d\n\n\ucd9c\ub825\n\uc8fc\uc5b4\uc9c4 \uc9c4\uc218\ub97c \ubcc0\ud658\n\n\"\"\"\n\n\"\"\"\nT = {'A', 'B', 'C', 'D', 'E', 'F'}\nT = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n\nC = [ ['A', 0], ['B', 0], ['C', 0], ['D', 0], ['E', 0], ['F', 0] ]\nC[j][1] = N + 1 - j\nC[j][1] = j\n\nAC -> C[j][0] = j\nWA -> C[j][1] = j\nTLE -> C[j][2] = j\nRE -> C[j][3] = j\n\nC = [ ['A', 0, 0], ['B', 0, 0], ['C', 0, 0], ['D', 0, 0], ['E', 0, 0], ['F', 0, 0] ]\nC[j][1] = N + 1 - j\nC[j][1] = j\n\nAC -> C[j][0] = j\nWA -> C[j][1] = j\nTLE -> C[j][2] = j\nRE -> C[j][3] = j\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AC\") == \"AC x 3\"\nassert solution(\"WA\") == \"WA x 1\"\nassert solution(\"TLE\") == \"TLE x 2\"\nassert solution(\"RE\") == \"RE x 0\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\"\nprint(\"Passed\")\n\"\"\""
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n6\nAC\nTLE\nAC\nAC\nWA\nTLE\n\"\"\") == \"\"\"\nAC x 3\nWA x 1\nTLE x 2\nRE x 0\n\"\"\"\n\nassert solution(\n\"\"\"\n2\nAC\nTLE\n\"\"\") == \"\"\"\nAC x 1\nTLE x 1\n\"\"\"\n\nassert solution(\n\"\"\"\n10\nAC\nWA\nTLE\nAC\nWA\nTLE\nAC\nWA\nTLE\nAC\nWA\nTLE\n\"\"\") == \"\"\"\nAC x 3\nWA x 3\nTLE x 3\nRE x 0\n\"\"\"\n\nassert solution(\n\"\"\"\n10\nTLE\nTLE\nTLE\nTLE\nTLE\nTLE\nTLE\nTLE\nTLE\nTLE\nTLE\n\"\"\") == \"\"\"\nTLE x 10\n\"\"\"\n\nassert solution(\n\"\"\"\n10\nTLE\nWA\nWA\nTLE\nWA\nTLE\nAC\nAC\nWA\nAC\nAC\nWA\n\"\"\") == \"\"\"\nTLE x 3\nWA x 2\nAC x 1\nRE x 0\n\"\"\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n\") == \"AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0\\n\"\n\"\"\"\n"
    },
    {
        "number": 4691,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('AC\\nTLE\\nAC\\nAC\\nWA\\nTLE\\n') == 'AC x 3\\nWA x 1\\nTLE x 2\\nRE x 0'\n\n-----\nx = int(stdin.readline())\n\ncount_AC = 0\ncount_WA = 0\ncount_TLE = 0\ncount_RE = 0\n\nfor i in range(x):\n    case = stdin.readline().strip()\n    if case == 'AC':\n        count_AC += 1\n    elif case == 'WA':\n        count_WA += 1\n    elif case == 'TLE':\n        count_TLE += 1\n    else:\n        count_RE += 1\n\nprint('AC x', count_AC)\nprint('WA x', count_WA)\nprint('TLE x', count_TLE)\nprint('RE x', count_RE)\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('21') == '27'\n\"\"\""
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\"\n\n\"\"\"\nLet's learn some new Python while expanding our knowledge of strings.\n\nTask\nGiven a string,S, of length N that is indexed from 0 to N-1,\nprint its even-indexed and odd-indexed characters as 2 space-separated strings on a single line (see the Sample below for more detail).\n\nNote: 0 is considered to be an even index.\n\nSample Input\n\nHacker\nSample Output\n\nHce akr\n\"\"\"\n\n\"\"\"\nWe have a list of numbers.\nEach number has exactly one other number that is equal to it.\nWrite a function to return a list of these pairs.\n\ninput:\n1 2 3 4 3 4 5 6 6 5 6 3 7\n\noutput:\n[\n  [1, 3],\n  [2, 4],\n  [4, 5],\n  [5, 6],\n  [6, 6],\n  [7, 3]\n]\n\"\"\""
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"21\") == \"27\"\nprint(solution(\"21\"))\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\"\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('21') == '27'\n\nimport os, pytest\nfrom itertools import combinations\nfrom collections import defaultdict\nfrom typing import Iterator, Tuple, Dict, Union, Optional, List"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('21') == '27'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1') == '2'\nassert solution('2') == '5'\nassert solution('10') == '30'\n\nprint('PASSED')\n"
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"21\") == \"27\"\n\"\"\""
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('42') == '21'\nassert solution('24') == '2'\nassert solution('23') == '22'\n\"\"\""
    },
    {
        "number": 4692,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"21\") == \"27\"\n\n\"\"\"\n\nimport unittest\n\nclass Solution(object):\n    def solve(self, M: str) -> str:\n        if M == \"1\":\n            return \"New Year starts at 00:00:00 on 31st December\"\n        if M == \"2\":\n            return \"New Year starts at 00:00:00 on 30th December\"\n        if M == \"3\":\n            return \"New Year starts at 00:00:00 on 29th December\"\n        if M == \"4\":\n            return \"New Year starts at 00:00:00 on 28th December\"\n        if M == \"5\":\n            return \"New Year starts at 00:00:00 on 27th December\"\n        if M == \"6\":\n            return \"New Year starts at 00:00:00 on 26th December\"\n        if M == \"7\":\n            return \"New Year starts at 00:00:00 on 25th December\"\n        if M == \"8\":\n            return \"New Year starts at 00:00:00 on 24th December\"\n        if M == \"9\":\n            return \"New Year starts at 00:00:00 on 23rd December\"\n        if M == \"10\":\n            return \"New Year starts at 00:00:00 on 22nd December\"\n        if M == \"11\":\n            return \"New Year starts at 00:00:00 on 21st December\"\n        if M == \"12\":\n            return \"New Year starts at 00:00:00 on 20th December\"\n        if M == \"13\":\n            return \"New Year starts at 00:00:00 on 19th December\"\n        if M == \"14\":\n            return \"New Year starts at 00:00:00 on 18th December\"\n        if M == \"15\":\n            return \"New Year starts at 00:00:00 on 17th December\"\n        if M == \"16\":\n            return \"New Year starts at 00:00:00 on 16th December\"\n        if M == \"17\":\n            return \"New Year starts at 00:00:00 on 15th December\"\n        if M == \"18\":\n            return \"New Year starts at 00:00:00 on 14th December\"\n        if M == \"19\":\n            return \"New Year starts at 00:00:00 on 13th December\"\n        if M == \"20\":\n            return \"New Year starts at 00:00:00 on 12th December\"\n        if M == \"21\":\n            return \"New Year starts at 00:00:00 on 11th December\"\n        if M == \"22\":\n            return \"New Year starts at 00:00:00 on 10th December\"\n        if M == \"23\":\n            return \"New Year starts at 00:00:00 on 09th December\"\n        if M == \"24\":\n            return \"New Year starts at 00:00:00 on 08th December\"\n        if M == \"25\":\n            return \"New Year starts at 00:00:00 on 07th December\"\n        if M == \"26\":\n            return \"New Year starts at 00:00:00 on 06th December\"\n        if M == \"27\":\n            return \"New Year starts at 00:00:00 on 05th December\"\n        if M == \"28\":\n            return \"New Year starts at 00:00:00 on 04th December\"\n        if M == \"29\":\n            return \"New Year starts at 00:00:00 on 03rd December\"\n        if M == \"30\":\n            return \"New Year starts at 00:00:00 on 02nd December\"\n        if M == \"31\":\n            return \"New Year starts at 00:00:00 on 01st December\"\n        \n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"21\"), \"27\")\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 3') == '9'\nassert solution('1 1') == '2'\nassert solution('10 10') == 'error'\nassert solution('5 6') == '11'\n\"\"\"\n\n\"\"\"\n  The first line contains integer T, the number of test cases.\n  The next T lines contains two space-separated integers A and B.\n\n\"\"\""
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(sys.stdin.readline()) == int(sys.stdin.readline())"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 3') == '9'\n\n------\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 3\\n') == '9'\n\"\"\""
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6 3\") == \"9\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 3') == 'error'\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2\\n3 4') == '6'\nassert solution('5 5\\n4 4') == 'error'\nassert solution('1 9\\n9 1') == 'error'\n"
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6 3') == '9'\nassert solution('1 1') == 'error'\n\n\"\"\""
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2\\n') == '3'\nassert solution('1 1\\n') == 'error'\nassert solution('2 3\\n') == '5'\nassert solution('2 2\\n') == 'error'\n\nprint('All tests passed.')\n\n\"\"\""
    },
    {
        "number": 4693,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 3\") == \"9\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"1 3\") == \"error\"\n\n\"\"\"\n\n\"\"\"\n\u0414\u0430\u043d\u044b \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430: A, B. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f \u0432\u0441\u0435 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0446\u0438\u0444\u0440\u044b \u0447\u0438\u0441\u043b\u0430 A.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 A \u0438 B, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0441\u0435 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0446\u0438\u0444\u0440\u044b \u0447\u0438\u0441\u043b\u0430 A \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f \u0432 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443, \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044f \u0438\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438. \u0415\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0435 \u0446\u0438\u0444\u0440\u044b, \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u0445 \u0442\u043e\u0436\u0435.\n\nSample Input 1:\n\n4 1\n\nSample Output 1:\n\n4 1\n\nSample Input 2:\n\n7 8\n\nSample Output 2:\n\n8 7 6 5 4\n\nSample Input 3:\n\n9 6\n\nSample Output 3:\n\n9 8 7 6\n\nSample Input 4:\n\n4 4\n\nSample Output 4:\n\n4 4\n\nSample Input 5:\n\n1 8\n\nSample Output 5:\n\n8 1\n\"\"\""
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n2 3 7 9') == 7\n\n\"\"\"\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\n\"\"\""
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2 3 7 9\") == \"7\"\nassert solution(\"3\\n7 7 7\") == \"1\"\nassert solution(\"1\\n1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3 7 9\\n') == '7'\n\"\"\""
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(a_i=2, a_j=3, a_k=7, a_l=9) == 7\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1 2') == '2'\nassert solution('2 5 1') == '2'\nassert solution('1 2') == '1'\nassert solution('3 4 5') == '3'\nassert solution('4 7 8') == '3'\n"
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 7 9') == '7'\n\n\"\"\""
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 3 7 9\") == \"7\"\n\"\"\""
    },
    {
        "number": 4694,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('a\\nb\\nc') == 0\nassert solution('1\\n1\\n1') == 0\nassert solution('1\\n2\\n1') == 1\nassert solution('1\\n2\\n3') == 2\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == \"Yes\"\nassert solution(\"1 2\") == \"No\"\nassert solution(\"1 1\") == \"Yes\"\nassert solution(\"12 12\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2\\n2 3\\n3 4') == 'Yes'\nassert solution('1 3\\n2 3\\n3 4') == 'No'\n\n\"\"\""
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1 3''') == 'Yes'\n\"\"\"\n\nimport sys\n\nx, y = [int(x) for x in sys.stdin.readline().split()]"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 3\") == \"Yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2\") == \"Yes\"\nassert solution(\"1 3\") == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 1\") == \"Yes\"\nassert solution(\"3 5\\n2 1\") == \"No\"\nassert solution(\"12 22\\n1 2\") == \"Yes\"\nassert solution(\"1 2\\n1 2\") == \"No\"\nassert solution(\"1 3\\n1 2\") == \"Yes\""
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 3') == 'Yes'\nassert solution('2 3') == 'No'\nassert solution('2 4') == 'Yes'\nassert solution('2 10') == 'Yes'"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(1, 3) == \"Yes\", f\"Expected 'Yes', got {solution(1, 3)}\"\nassert solution(2, 3) == \"No\", f\"Expected 'No', got {solution(2, 3)}\"\n\"\"\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n1 3\n''') == \"Yes\"\nassert solution('''\n1 3\n''') == \"Yes\"\n\nassert solution('''\n1 2\n''') == \"No\"\nassert solution('''\n3 5\n''') == \"No\"\n\nassert solution('''\n1 2\n''') == \"No\"\n"
    },
    {
        "number": 4695,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 3\\n2 3\\n4 3\") == \"Yes\"\n\"\"\"\n\nx, y = [int(input()) for _ in range(2)]\nprint(\"Yes\" if (x**0.5).is_integer() and (y**0.5).is_integer() else \"No\")\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"Even\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == 'Even'\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n\") == 'Even'\nassert solution(\"5 5\\n\") == 'Odd'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4') == 'Even'\nassert solution('3 3') == 'Even'\nassert solution('3 5') == 'Odd'\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4\") == \"Even\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == \"Even\"\nassert solution(\"7 9\") == \"Odd\"\n\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4') == 'Even'\nassert solution('2 1') == 'Odd'\nassert solution('0 0') == 'Even'\nassert solution('0 2') == 'Odd'\nassert solution('0 1') == 'Odd'\n"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 4') == 'Even'\n\n\"\"\""
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"2\\n2\\n3\\n5\"\n) == \"Even\"\nassert solution(\n\"2\\n2\\n3\\n4\"\n) == \"Odd\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4696,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4') == 'Even'\nassert solution('3 1') == 'Odd'\nassert solution('3 2') == 'Even'\nassert solution('1 2') == 'Odd'\nassert solution('1 1') == 'Even'\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 6\") == 2\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 6\\n') == 2\n\"\"\"\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1 6''') == '2'\nassert solution('''4 3''') == '1'\nassert solution('''1 4''') == '0'\n\"\"\"\n\n\n\"\"\"\nTwo Scc groups can be created as follows:\n - Combine two c-shaped pieces into one S-shaped piece\n - Create two Scc groups, each from one S-shaped piece and two c-shaped pieces\n\nThe time complexity is O(1) and the space complexity is O(1).\n\n\"\"\""
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n3 4\\n\") == \"3\"\nassert solution(\"4 6\\n1 3\\n5 2\\n2 4\\n1 6\\n\") == \"2\"\nassert solution(\"1 1\\n2 2\\n3 3\\n\") == \"1\"\nassert solution(\"1 100\\n2 100\\n3 100\\n\") == \"1\"\nassert solution(\"1 1\\n2 1\\n3 1\\n\") == \"1\"\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 6\\n') == '2'\n\n\"\"\""
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 6\\n\") == \"2\"\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4') == '2'\nassert solution('1 6\\n5 9') == '2'\nassert solution('1 10\\n11 22') == '2'\nassert solution('1 100\\n101 201') == '2'\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 6\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 6') == 2\nassert solution('1 4') == 2\n\"\"\"\n\nfrom itertools import permutations\n"
    },
    {
        "number": 4697,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 6\\n') == '2'\nassert solution('6 9\\n') == '3'\n\nimport sys\n\ntokens = sys.stdin.read().split()\nn = int(tokens[0])\nm = int(tokens[1])\n\ns = 0\nfor i in range(n):\n    for j in range(m):\n        s += 1\n\nprint(s)\n\n\"\"\"\nThe problem is about finding the number of's' and 'c'\nIf we sum all the input and then find the number of's', we'll\nget the total number of s and c\n\"\"\"\n\nimport sys\n\ntokens = sys.stdin.read().split()\ns = int(tokens[0])\nc = int(tokens[1])\n\ns_count = 0\nfor i in range(s):\n    s_count += i + 1\n\nc_count = 0\nfor j in range(c):\n    c_count += j + 1\n\ntotal = s_count + c_count\nprint(total)\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\":\\n3\\n1 2 3\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\"\"\"\n\nfrom typing import Dict, List\n\n\"\"\"\n    input: N, T_1, T_2,..., T_N\n    output: T_1 + T_2 +... + T_N\n\"\"\"\n\n\"\"\"\n    input: N, P_1, X_1,..., P_M, X_M\n    output: X_1 + X_2 +... + X_M\n\"\"\""
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\") == \"6\\n9\"\n\nprint(solution(\"3\\n2 1 4\\n2\\n1 1\\n2 3\"))"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"3\\n2 1 4\\n2\\n1 1\\n2 3\"\n) == \"6\\n9\"\n\nassert solution(\n    \"4\\n1 1 1 1\\n2\\n1 1\\n1 1\\n1 1\"\n) == \"0\\n1\\n0\\n1\\n1\"\n\nassert solution(\n    \"3\\n2 1 4\\n2\\n1 1\\n1 1\\n1 1\"\n) == \"9\\n6\"\n\nassert solution(\n    \"3\\n1 1 1\\n2\\n1 1\\n1 1\\n1 1\"\n) == \"9\\n6\"\n\nassert solution(\n    \"5\\n1 1 1 1 1\\n1\\n2\\n1 1\\n1 1\\n1 1\\n1 1\"\n) == \"5\\n1\\n4\""
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(':2') == '1 1\\n'\n\"\"\"\n\nimport os\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''3\n2 1 4\n2\n1 1\n2 3''') == '''6\n9'''\nassert solution('''3\n2 1 4\n2\n1 1\n2 3''') == '''6\n9'''\nassert solution('''4\n5 5 5 5\n2\n1 1\n2 3''') == '''10\n14\n'''\n\nprint(solution(stdin))"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n2 1 4\") == \"6\\n9\"\n\n------"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3\n2 1 4\n2\n1 1\n2 3''') == '''6\n9'''\nassert solution('''3\n2 1 4\n3\n1 1\n2 3''') == '''8\n6'''\nassert solution('''3\n2 1 4\n3\n1 1\n2 3''') == '''5\n5'''\nassert solution('''3\n2 1 4\n3\n1 1\n2 3''') == '''4\n6'''\nassert solution('''5\n1 1\n1\n1 1\n1\n1 1''') == '''4\n1'''\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n2 1 4\\n2\\n1 1\\n2 3\\n') == '6\\n9'\n"
    },
    {
        "number": 4698,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n2 1 4\n2\n1 1\n2 3''') == '''6\n9'''\nprint(solution('''3\n2 1 4\n2\n1 1\n2 3'''), '''6\n9''')\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == \"2000\"\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'\n\nassert solution('1000 5\\n1 2 3 4 5 6 7 8 9') == '2700'\n\nassert solution('1000 6\\n0 1 2 3 4 5 6 7 8 9') == '9000'\n\nassert solution('1000 7\\n0 1 2 3 4 5 6 7 8') == '8000'\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    \"1000 8\\n\"\n    \"1 3 4 5 6 7 8 9\"\n) == \"2000\"\n\n----"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == '2000'\n\"\"\"\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\"\"\"\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000 8\\n1 3 4 5 6 7 8 9') == '2000'\n\"\"\"\n\nN, K = map(int, stdin.readline().split())\nD = list(map(int, stdin.readline().split()))\n\nD.sort()\n\nans = 0\nfor d in D:\n    if d not in [0, 2]:\n        ans = N + 1\n        break\n    else:\n        ans += N // d\n        N %= d\n\nprint(ans)\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == '2000'\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\\n\") == \"2000\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4699,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000 8\\n1 3 4 5 6 7 8 9\") == \"2000\"\n\"\"\""
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == '2'\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\\n\") == \"2\"\n\n---\n\"\"\"\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\"\"\""
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == '2'\n\"\"\"\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\n\n\"\"\"\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\n1 2 3 4\n1 3\n2 3\n2 4\") == \"2\"\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == 2\n\"\"\""
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4') == '2'\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    n, m = list(map(int, line.split()))\n    h = list(map(int, input().split()))\n    a, b = [], []\n    for i in range(m):\n        a, b = list(map(int, input().split()))\n    good_obs = set()\n    for i in range(n):\n        for j in range(m):\n            if a[j] == i or b[j] == i:\n                good_obs.add(i)\n    print(len(good_obs))\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\nassert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\nassert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\nassert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\nassert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n"
    },
    {
        "number": 4700,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\\n1 2 3 4\\n1 3\\n2 3\\n2 4\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 3') == '10'\n\"\"\"\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"10\"\nassert solution(\"2 5\") == \"7\"\nassert solution(\"6 10\") == \"9\"\n\n\"\"\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"10\"\n\n\"\"\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n') == '10'\n\"\"\"\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n3') == '10'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"10\"\n\"\"\"\n\n\"\"\"\nSolution 1"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"10\"\nprint('OK')\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"10\""
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n\") == \"10\"\n"
    },
    {
        "number": 4701,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"10\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == '1'\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"0.5\") == \"0\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"1\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '0'\n\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"0\"\nassert solution(\"0\") == \"1\"\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('0.42') == '0'\nassert solution('0.4') == '0'\nassert solution('1.0') == '1'\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '0'\nassert solution('0') == '1'\nassert solution('0.1') == '1'\n\"\"\"\n"
    },
    {
        "number": 4702,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('0') == '0'\n\"\"\""
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12\") == \"1+2\"\nassert solution(\"1234\") == \"1+2+3+4\"\nassert solution(\"+1234\") == \"1+2+3+4\"\nassert solution(\"12+34\") == \"1+2+3+4\"\nassert solution(\"1+2\") == \"1+2\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1234') == 1234\nassert solution('222222') == 2222\nassert solution('12345678') == 12345678\nassert solution('123456789') == 123456789\nassert solution('1+2') == 3\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"125\") == \"176\""
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == '11'\nassert solution('1+2') == '3'\nassert solution('2+4') == '6'\nassert solution('8+2+7+1') == '40'\nassert solution('1+2+4+7') == '28'\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"14\") == \"19\"\nassert solution(\"85\") == \"234\"\n\"\"\"\n\nfrom collections import defaultdict\n\nimport sys\n\nimport re\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"123\") == \"15\"\nassert solution(\"72\") == \"9\"\nassert solution(\"12+345\") == \"15\"\nassert solution(\"1+2+3+4+5+6+7+8+9\") == \"45\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"87\") == \"72\"\nassert solution(\"123\") == \"468\"\nassert solution(\"65\") == \"42\"\nassert solution(\"4\") == \"16\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"125\") == \"176\"\nassert solution(\"1+2+3\") == \"7\"\nassert solution(\"1+2+4\") == \"9\"\n\"\"\"\n\nimport sys\n\ns = list(sys.stdin.readline().strip())\n\nprev = -1\nans = 0\n\nfor i in range(len(s)):\n    if s[i] == \"+\":\n        prev = int(s[i - 1]) + int(s[i + 1])\n        s[i - 1] = prev\n        s[i] = \"\"\n        s[i + 1] = \"\"\n\nprint(sum(int(n) for n in s))\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('125') == '176'\nassert solution('12') == '17'\nassert solution('34') == '51'\nassert solution('12345') == '51'\nassert solution('34+1') == '53'\n\"\"\"\n"
    },
    {
        "number": 4703,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('125') == '176'\nassert solution('123') == '476'\nassert solution('9') == '36'\nassert solution('11') == '53'\nassert solution('22') == '88'\n\"\"\"\n\nimport re\nimport sys\n\n__author__ = \"Taras Basiuk\"\n__copyright__ = \"Copyright 2021, Taras Basiuk, All rights reserved\"\n__credits__ = \"Your Name\"\n__license__ = \"GPL\"\n__version__ = \"1.0\"\n__maintainer__ = \"Taras Basiuk\"\n__email__ = \"tb@tb.pl\"\n__status__ = \"Development\"\n\np = re.compile('^\\d+[+]?$')"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"1\"\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 1 2 3 4 5\") == \"2\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4 5\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\"\n\nn = int(stdin.readline().strip())\ncards = list(map(int, stdin.readline().split()))\n\nmin_diff = float(\"inf\")\nfor i in range(n):\n    if min_diff > abs(cards[i] - (i+1)):\n        min_diff = abs(cards[i] - (i+1))\n\nprint(min_diff)\n"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n6\n1 2 3 4 5 6\n''') == '1'\n\n'''\n1.4 Median\n\nGiven a stream of integers, find the median for each value in the stream.\nRecall that the median of a finite list of numbers is the \"middle\" element, if the list is sorted.\nE.g. [1, 2, 3] median is 2, [1, 2, 3, 3] median is 3.\n\nThe running time of your solution should be O(n).\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - -10^{9} \\leq A_i \\leq 10^{9}\n - A_i is an integer.\n\n-----Input-----\nThe first line of input contains an integer, n, the number of values in the stream.\nThe second line contains n space-separated integers, a_1, a_2,..., a_n.\n\n-----Output-----\nFor each value A_i, print the median value on a new line.\n\n-----Sample Input-----\n6\n1\n1\n2\n3\n4\n5\n\n-----Sample Output-----\n1\n1\n2\n3\n3\n4\n\nIf you do not know the definition of the median, see the Wikipedia page on\n\"Median.\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"1\"\n\"\"\"\n\n\"\"\"\nYou've been working on the same project for a while, and finally you've finished! \nNow you want to send the project to someone. Unfortunately, you have yet to solve all the bugs and \nto document the code you've written.\n\nBecause of this, you need to send the project to someone to ensure that there are no bugs in it. \nThis means that you need to implement a function that, given the string of the code, \nsolves the problem and returns a string that represents the solution.\n\nYou don't have the entire solution in the code you've written, \nso you need to call the function by using string concatenation.\n\nExample\nFor the string given as a parameter below, the function would return the string \"4\".\n\nsolution(\"1 2 3 4 5 6\") == \"4\"\n\n-----Input-----\nThe input string consists of characters that may be some combination of the following characters:\n{ } + *! ( )\nThe input string will always be valid.\n\n-----Output-----\nThe output must be a string consisting of only the characters \nthat can be represented in the output (this includes the strings of numbers).\n\n-----Sample Input-----\n{ } + *! ( )\n\n-----Sample Output-----\n\"4\"\n\n\"\"\"\n\n\"\"\"\nThe idea is to get the number of parentheses, then count the number of opening parentheses and closing parentheses, \nand use the minimum between those two numbers as the answer.\n\"\"\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n1 2 3 4 5 6\") == '1'\n\n\"\"\""
    },
    {
        "number": 4704,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '6\\n1 2 3 4 5 6'\n) == '1'\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20\") == \"15800\"\nprint(solution(\"20\"))\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20') == '15800'\n\"\"\"\n\nimport sys\nimport os\nfrom typing import Any, List, Tuple\n\nsys.path.append(os.path.join(os.path.dirname(__file__), os.pardir))\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"2\") == \"5\"\nassert solution(\"4\") == \"6\"\n\"\"\"\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10') == '100'\nassert solution('12') == '240'\nassert solution('20') == '1600'\n\"\"\"\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20\") == \"15800\"\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20\") == \"15800\"\n\"\"\""
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('20') == '15800'\n\"\"\""
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20\") == \"15800\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10') == '10'\nassert solution('20') == '18000'\nassert solution('50') == '45000'\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4705,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"15\") == \"15\"\nassert solution(\"15\\n20\") == \"1520\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\nassert solution('ada') == 'ad'\nassert solution('xx') == 'x'\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ant') == 'abc'\n\"\"\""
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n\"\"\"\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ant\") == \"abc\"\nassert solution(\"obe\") == \"abc\"\nassert solution(\"rec\") == \"abc\"\n"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('ant') == 'abc'\nassert solution('obe') == 'abc'\nassert solution('rec') == 'abc'\n\nassert solution('aa') == 'aaa'\nassert solution('bb') == 'bbb'"
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    \"ant\"\n) == \"abc\"\n\"\"\""
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ant\") == \"abc\"\n\"\"\""
    },
    {
        "number": 4706,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(a) == a, \"input: a\"\nassert solution(b) == b, \"input: b\"\nassert solution(c) == c, \"input: c\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('101') == '2'\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''101\n102\n103\n''') == '2'\nprint('PASSED')\n\"\"\"\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"101\") == 2\nassert solution(\"100\") == 1\nassert solution(\"011\") == 0\n\nprint(\"all tests passed.\")\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"101\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"101\") == 2\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"101\") == 2\n\"\"\"\n\ns = input()\nprint(s.count('1'))\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"101\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('101') == 2\nassert solution('110') == 3\nassert solution('1010') == 2\nassert solution('101101010') == 3\nassert solution('10101010') == 2\n\"\"\"\n"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(101) == \"2\"\nassert solution(110) == \"3\"\n\"\"\"\n\ns1, s2, s3 = input().split()"
    },
    {
        "number": 4707,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('101') == '2'\nassert solution('110') == '1'\nassert solution('011') == '0'\n\"\"\""
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n3\\n10000\\n9000\\n') == '48000'\n\"\"\"\n\nimport sys\n\nlines = sys.stdin.readlines()\n\nn, k, x, y = map(int, lines[0].split())\n\nsum_ = 0\n\nfor i in range(1, n + 1):\n    if i < k + 1:\n        sum_ += x\n    else:\n        sum_ += x\n        sum_ += y\n\nprint(sum_)"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\") == \"48000\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 5 100 200\\n3 10 10 10') == '100'\n\"\"\"\n\nfrom sys import stdin\n\nN = int(stdin.readline().rstrip())\nK = int(stdin.readline().rstrip())\nX = int(stdin.readline().rstrip())\nY = int(stdin.readline().rstrip())"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\\n\") == \"48000\"\n\"\"\"\nimport unittest"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\\n\") == \"48000\"\nassert solution(\"10\\n5\\n1\\n1\\n\") == \"100\"\nassert solution(\"100\\n5\\n1\\n1\\n\") == \"50000\"\nassert solution(\"100\\n10\\n1\\n1\\n\") == \"100000000\"\n\nprint(\"PASSED!!!\")\n"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10000\\n3\\n10000\\n9000\") == \"48000\"\nprint(\"Passed\")\n\n\"\"\""
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\") == \"48000\"\n\"\"\"\nimport os\nimport sys"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(sample_input())) == str(sample_output())\nassert solution(str(input())) == str(output())"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10000 5 3 10000 9000\") == 48000\n\"\"\"\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    def test_solution(self):\n        pass"
    },
    {
        "number": 4708,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n3\\n10000\\n9000\") == \"48000\"\n\"\"\"\n\nN = int(input())\nK = int(input())\nX = int(input())\nY = int(input())"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 + 2') == 3\n\"\"\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(1 + 2) == 3\n\"\"\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 + 2') == '3'\n\"\"\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 + 2') == '3'\nassert solution('5 + 5') == '10'\nassert solution('1 - 2') == '-1'\nassert solution('5 - 5') == '0'\nassert solution('2 * 3') == '6'\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 + 2') == '3'\n\n\"\"\"\n\nimport sys\n\n\"\"\"\ns = input()\n\nwhile s:\n    if '+' in s:\n        if len(s) == 1:\n            print(0)\n        else:\n            print(eval(s))\n    elif '-' in s:\n        if len(s) == 1:\n            print(0)\n        else:\n            print(eval(s))\n    else:\n        print(eval(s))\n    s = input()\n\"\"\"\n\nwhile True:\n    try:\n        print(eval(input()))\n    except EOFError:\n        break\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 + 2') == '3'\nassert solution('1 - 2') == '-1'\nassert solution('1 + 2 - 3') == '0'\nassert solution('1 - 2 + 3') == '4'\n\"\"\""
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\n\"\"\"\nimport sys\nimport re"
    },
    {
        "number": 4709,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 + 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000') == 'ABC'\nassert solution('11') == 'ARC'\n\"\"\"\nimport sys\n\nx = int(sys.stdin.readline())\nprint('ABC' if x < 1200 else 'ARC')\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1000') == 'ABC'\nassert solution('1234') == 'ARC'\n\"\"\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1000') == 'ABC'\n\"\"\"\n\nSmeke_Rating = int(stdin())\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000\") == \"ABC\"\nassert solution(\"1234\") == \"ARC\"\n\"\"\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1000') == 'ABC'\nprint(solution('1000'))\n\"\"\""
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000') == 'ABC'\nassert solution('1000') == 'ABC'\n\"\"\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000\") == \"ABC\"\n\n-------------\n\nSmeke has decided to participate in AtCoder Beginner Contest (ABC) if his current rating is less than 1200, and participate in AtCoder Regular Contest (ARC) otherwise.\n\nThis problem has already been solved and can be found here.\n\n\"\"\""
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1000\") == \"ABC\"\n"
    },
    {
        "number": 4710,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000\") == \"ABC\"\nprint(solution(\"1000\"))\n\nSolution\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\nimport unittest\nimport sys\nimport io\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdin, stdout = sys.stdin, sys.stdout\n        sys.stdin, sys.stdout = io.StringIO(input), io.StringIO()\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdin, sys.stdout = stdin, stdout\n        self.assertEqual(out, output)\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"100 200 300\n200 300 400\n300 400 500\"\"\"\n        output = \"\"\"200\"\"\"\n        self.assertIO(input, output)\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"10 9 7\n9 10 11\n7 11 12\"\"\"\n        output = \"\"\"8\"\"\"\n        self.assertIO(input, output)\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"2000 4000 5000\n4000 5000 6000\n5000 6000 7000\"\"\"\n        output = \"\"\"15500\"\"\"\n        self.assertIO(input, output)"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('700 600 780') == '1300'\nassert solution('500 500 500') == '0'\nassert solution('10 100 1000') == '10'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"700 600 780\") == \"1300\""
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n\"700 600 780\"\n) == \"1300\"\n\"\"\""
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('700 600 780') == '1300'\n\"\"\"\nimport sys\nfrom collections import defaultdict\n\nnums = defaultdict(int)\nfor line in sys.stdin:\n    line = line.strip()\n    if not line:\n        break\n    a, b, c = line.split()\n    nums[int(a)] += 1\n    nums[int(b)] += 1\n    nums[int(c)] += 1\n\nmin_val = min(nums.values())\nmin_keys = [k for k, v in nums.items() if v == min_val]\nprint(sum(min_keys)*2)\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\n\na, b, c = map(int, input().split())"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"700 600 780\") == \"1300\"\n\"\"\"\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"800 400 200\") == \"1100\"\nassert solution(\"700 600 780\") == \"1300\"\nassert solution(\"700 600 780\") == \"1380\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4711,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('0') == '0'\nassert solution('101') == '1'\nassert solution('1010') == '10'\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\"\nassert solution(\"a\\nbb\\nccc\\ndddd\\neee\") == \"#####\\na\\n#bb#\\n#ccc#\\n#dddd#\\neee\""
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\nabc\\narc') == '#####\\n#abc#\\n#arc#\\n#####'\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 3\\nabc\\narc') == '#####\\n#abc#\\n#arc#\\n#####'\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\nabc\\narc\\n\") == \"\"\"#####\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\nabc\\narc\") == \"#####\\n#abc#\\n#arc#\\n#####\"\nassert solution(\"4 2\\nab\\ncd\") == \"####\\n#ab#\\n#cd#\\n####\"\nassert solution(\"1 1\\na\") == \"##\\n#a#\\n##\"\nassert solution(\"3 3\\na\\nb\\nc\\nd\\ne\\nf\") == \"#####\\n#a#\\n#b#\\n#c#\\n#d#\\n#e#\\n#f#\\n#####\"\nassert solution(\"3 3\\na\\nb\\nc\\nd\\ne\\nf\\n\") == \"#####\\n#a#\\n#b#\\n#c#\\n#d#\\n#e#\\n#f#\\n#####\"\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 5\\nabcd\\nefgh\\nijkl\\nmnop\\nqrst\") == \"\"\"#####\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(input()) == expected\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"2 3\nabc\narc\"\"\") == \"\"\"#####\n"
    },
    {
        "number": 4712,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'''\n2 3\nabc\narc\n'''\n) == '#####\\n#abc#\\n#arc#\\n#####'\n\nassert solution(\n'''\n3 2\nabc\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"IIDID\") == \"2\"\n\"\"\""
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5IIDID\") == \"2\"\n\"\"\""
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5\nIIDID\n''') == 2\n\"\"\""
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(2)\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(open('test_input.txt').read()) == '2'\n\"\"\"\n\nN = int(stdin.readline().strip())\ns = stdin.readline().strip()\nx = 0\nmaximum_x = 0\nfor _ in range(N):\n    if s[_] == 'I':\n        x += 1\n        maximum_x = max(maximum_x, x)\n    else:\n        x -= 1\nprint(maximum_x)\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('IIDID') == 2\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"IIDID\") == 2\n\"\"\"\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"IIDID\") == 2\n\"\"\"\n\n\"\"\"\nHint 1\nThe first step is to find the largest and smallest possible values of x.\n\nHint 2\nOnce you have these two values, you can find the maximum value taken by x by taking the absolute value of the difference between them.\n\nHint 3\nAfter the first step, you are left with a small problem, which you can solve very easily.\n\nHint 4\nJust go over the operations one by one and observe the logic.\n\nHint 5\nNow that you are able to solve the problem in a single step, there is no need to read any input from the standard input.\n\"\"\""
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(solution) == 2\n\"\"\"\n"
    },
    {
        "number": 4713,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"IIDID\") == 2\nassert solution(\"DIDIID\") == 4\n\"\"\"\n\n\"\"\"\nExplanation:\n\nWe can interpret this problem as finding the maximum number of k changes possible in the n string,\nwhere for every change, we either increment x by 1, or decrement it by 1.\nWe can apply the dynamic programming solution we already used in problem 121, \nwith a slight modification to the base case.\n\nTo compute the maximum number of k changes possible in the n string, \nwe need to keep track of the number of the changes in each character.\nWe can do that by using a dictionary where the keys are the characters, and the values are the number of changes for that character.\n\nTo obtain the maximum number of k changes possible in the n string, \nwe need to keep track of the maximum number of k changes possible in the string so far.\nThat will be obtained by using the maximum value between the maximum number of k changes possible in the string so far, \nand the number of changes for the current character.\n\nTo obtain the maximum number of k changes possible in the n string, \nwe need to keep track of the current number of changes in the string so far.\nThat will be obtained by iterating through the characters in the string.\nIf we encounter I, we increment the current number of changes in the string, if we encounter D, \nwe decrement the current number of changes in the string.\n\nSince we are only concerned with the maximum number of k changes possible in the n string, \nwe only need to keep track of the maximum number of k changes possible in the string so far.\nWe can do that by keeping a variable max_k.\n\nWe begin by setting max_k to 0, which means that the maximum number of k changes possible in the string is 0.\n\nWe then iterate through the string.\nIf the character at the current index in the string is I, we increment max_k by 1.\nIf the character at the current index in the string is D, we decrement max_k by 1.\n\nFinally, we return max_k, which is the maximum number of k changes possible in the string.\n\"\"\""
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11009 11332') == 4\n\"\"\"\n\nimport sys\n\nfrom typing import Tuple, List, Set\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11009 11332') == 4\n\"\"\""
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(solution.__doc__) == 4\n\n-------------------------------"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('11009 11332') == 4\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11009 11332') == '4'\nprint('all tests passed')"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'No palindromic numbers exist.'\nassert solution('1 2 3 4 5') == 'No palindromic numbers exist.'\nassert solution('10 50') == '1 palindromic number exists.'\nassert solution('1 100000') == '2 palindromic numbers exist.'\nassert solution('1 1') == '2 palindromic numbers exist.'\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"11009 11332\") == 4\n\"\"\""
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11009 11332') == 4\n"
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\n\n\"\"\""
    },
    {
        "number": 4714,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('11009 11332') == 4\n\"\"\"\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1 4') == '3'\nassert solution('1 1 1') == '1'\nassert solution('1 2 3') == '0'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 1 4\") == '3'\n\"\"\""
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 1 4\") == \"3\"\n\"\"\"\n\nfrom collections import defaultdict\nimport sys\n\na, b, c = [int(i) for i in sys.stdin.readline().split()]\ncolors = defaultdict(int)\ncolors[a] += 1\ncolors[b] += 1\ncolors[c] += 1\n\nprint(len(colors))\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"3\"\n\nassert solution(\"1 1 1\") == \"1\"\n\nassert solution(\"1 1 2\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3\\n3 1 4\") == \"3\\nThree different colors: 1, 2, and 3.\"\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 4\") == 3\n\"\"\"\n"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 2 2 1 3 3\") == \"3\"\n\"\"\""
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1 4\") == 3\n\"\"\""
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 4\") == 3\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 4715,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1 2') == '0'\nassert solution('1 2 2') == '1'\nassert solution('2 3 2') == '2'\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\\n\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == 12\n\"\"\"\n\nimport sys\nfrom typing import List\n\nn, k = map(int, input().split())\nsticks: List[int] = list(map(int, sys.stdin.readline().split()))\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4 5\\n') == '12'\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 3\n1 2 3 4 5''') == 12\n\n\"\"\"\n\n\"\"\"\nimport sys\nimport itertools"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == 12\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 5\") == \"12\"\n\n\"\"\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5\") == \"12\"\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n1 2 3 4 5') == '12'\n\"\"\""
    },
    {
        "number": 4716,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 2 3 4 5\") == 12\nassert solution(\"1 1\\n1\") == 1\n\"\"\"\n\nn, k = list(map(int, stdin.readline().split()))\nl = list(map(int, stdin.readline().split()))\n\nl.sort(reverse=True)\n\nprint(sum(l[0:k]))\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 7') == 'B'\nassert solution('5 7 2') == 'B'\nassert solution('7 5 2') == 'A'\n\"\"\""
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2 7\") == \"B\"\nassert solution(\"5 7 2\") == \"A\"\n\n-----Test Input-----\n5 2 7\n5 7 2\n10 10 4\n7 7 1\n1234 2345 5\n\n-----Test Output-----\nA\nA\nB\nB\n\"\"\""
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\"\nimport sys\n\nx, a, b = list(map(int, sys.stdin.readline().split()))\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 7') == 'B'"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input_test) == \"B\"\n\"\"\""
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '1'\nassert solution('3 2 1') == '2'\nassert solution('5 2 7') == 'B'\n\n-----"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2 7\") == 'B'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\""
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 7\") == \"B\"\n\"\"\"\n"
    },
    {
        "number": 4717,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 7\") == \"B\"\nprint(solution(\"5 2 7\"))\n\n\"\"\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\nprint(solution(\"2017/01/07\"))\n\"\"\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\n\n\"\"\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('2017/01/07') == '2018/01/07'\nassert solution('2017/01/01') == '2018/01/01'\nassert solution('2017/01/31') == '2018/01/31'\n\nprint('all tests passed')\n\n\"\"\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2017/01/07') == '2018/01/07'"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n\n\"\"\"\n"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2017/01/07') == '2018/01/07'\n\"\"\"\n\ns = input()\nprint('2018/' + s[4:6] + '/' + s[:4])\n\n\n\n\"\"\"\nWrite a program to input three integers and print them in ascending order.\n\n-----Constraints-----\n - The input will be three positive integers, where the first one is not greater than the second one and the second one is not greater than the third one.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nThe first line contains an integer t, where t is the number of test cases.\nNext t lines contain three integers, each.\n\n-----Output-----\nPrint the three integers in ascending order.\n\n-----Sample Input-----\n1\n5\n3\n1\n1\n10\n\n-----Sample Output-----\n1\n1\n1\n3\n5\n10\n\"\"\""
    },
    {
        "number": 4718,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2017/01/07\") == \"2018/01/07\"\nassert solution(\"2018/01/07\") == \"2018/01/07\"\nassert solution(\"2017/02/10\") == \"2018/02/10\"\nassert solution(\"2018/01/23\") == \"2018/01/23\"\nassert solution(\"2018/02/29\") == \"2018/02/29\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\ncbaa\\ndaacc\\nacacac') == 'aac'\n\"\"\""
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"cbaa\") == \"aac\"\nassert solution(\"daacc\") == \"aac\"\nassert solution(\"acacac\") == \"caa\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"cbaa\\ndaacc\\nacacac\") == \"aac\"\n\"\"\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\") == \"aac\"\n\"\"\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\ncbaa\") == \"aac\"\nassert solution(\"3\\ndaacc\") == \"aa\"\nassert solution(\"3\\nacacac\") == \"caa\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\ncbaa\\ndaacc\\nacacac') == 'aac'\nassert solution('3\\nabac\\nbaac\\ncaac') == 'aac'\n\n-----Explanation-----\nIn the first sample input, cbaa contains 3 strings: abac, baac, caac, aac.\nFor each of these strings, the characters cbaa can be replaced by anything of the same length.\nOf these three strings, the longest is aac and the lexicographically smallest is aac.\n\nIn the second sample input, caac contains 3 strings: cabac, cbaac, cacaca.\nThe strings cabac and cbaac can be obtained from caac by removing one of the c's.\nThe strings cacaca contain no characters from cbaa.\nOf the three strings, the longest is cacaca and the lexicographically smallest is cacaca.\n\nIn the third sample input, there are no strings that can be formed by removing characters from cbaa or daacc.\nSo the only string that can be formed is aac.\n\"\"\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\\n\") == \"aac\", \"First Test Error\"\n\"\"\"\n\n\"\"\"\n1. create a set of all possible chars in the headline (for each line)\n2. sort the chars by their frequency (least common first)\n3. for each char in the headline:\n    3.1. try to create the longest string that contains the char and is lexicographically smaller than the longest string\n    3.2. if it can't be created:\n        3.2.1. delete the char and add it to the next headline\n    3.3. if the headline is empty:\n        3.3.1. return the shortest string in the set\n4. return the shortest string in the set\n\"\"\"\n\n\nimport collections\nimport itertools\nimport sys\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aac\") == \"aac\"\n\nprint(solution(\"aac\"))\n\n\"\"\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\ncbaa\\ndaacc\\nacacac\\n\") == \"aac\"\n\"\"\"\n"
    },
    {
        "number": 4719,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"cbaa\") == \"aac\"\nassert solution(\"daacc\") == \"aca\"\n\n------------------\n\nprint(''.join(sorted(max(map(max, inputs), key=len))))\n\n\nfrom itertools import zip_longest\n\n[print(''.join(i)) for i in zip_longest(*inputs, fillvalue='')]\n\nhttps://www.codewars.com/kata/56af6fba3f4c5b6d7600071c"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n1\n24 30\n\"\"\") == '7'\n\nassert solution(\"\"\"\n1\n25 24\n\"\"\") == '6'\n\nassert solution(\"\"\"\n1\n20 30\n\"\"\") == '10'\n\nassert solution(\"\"\"\n1\n20 30\n\"\"\") == '10'\n\nassert solution(\"\"\"\n1\n30 20\n\"\"\") == '0'"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 24 30\") == \"7\"\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\n24 30') == '7'\n\"\"\""
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\\n24 30\") == \"7\"\n\n\"\"\"\n\nimport unittest\nfrom collections import namedtuple\n\nSeat = namedtuple('Seat', ('left', 'right'))\nSeatRange = namedtuple('SeatRange', ('left', 'right'))"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'''\n2\n1 2\n1 3\n2 4\n3 5\n'''\n) == '5'\nprint('test passed')\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 24 30\") == \"7\"\nprint(\"Test 1 Passed\")\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n24 30\") == \"7\"\nassert solution(\"2\\n4567 9\") == \"7\"\nassert solution(\"3\\n5678 9\") == \"7\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 24 30\") == \"7\"\nprint(\"Teste unit\u00e1rio OK\")\n"
    },
    {
        "number": 4720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2\\n24 30\") == \"7\"\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"6\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4') == '6'\n\"\"\"\n\nn, m = [int(num) for num in input().split()]\n\nprint(n*m)"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == 6\n\"\"\""
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"6\"\n\n-------Solution------\n\"\"\""
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4\\n3 4') == '6'\n\"\"\"\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(input())) == str(len(str(input()).split(\" \")))\n\"\"\""
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == 6\n\"\"\"\n\nn, m = input().split()\nblocks = 2 * n + m\nprint(blocks)\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input) == test_output\n\"\"\""
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5') == '6'\n\"\"\"\n"
    },
    {
        "number": 4721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4') == '6'\n\"\"\""
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 5\\n\") == \"Possible\"\nassert solution(\"4 5\\n\"+\"9 10\\n\") == \"Possible\"\nassert solution(\"4 5\\n\"+\"9 10\\n\"+\"10 6\\n\") == \"Impossible\"\nassert solution(\"4 5\\n\"+\"9 10\\n\"+\"10 6\\n\"+\"7 3\\n\") == \"Impossible\"\nassert solution(\"4 5\\n\"+\"9 10\\n\"+\"10 6\\n\"+\"7 3\\n\"+\"8 1\\n\") == \"Impossible\"\n\nimport sys"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == 'Possible'\nassert solution(\"5 6\") == 'Impossible'\nassert solution(\"8 4\") == 'Impossible'\nassert solution(\"1 1\") == 'Impossible'\nassert solution(\"7 7\") == 'Impossible'\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 5\") == \"Possible\"\n\"\"\"\n\na, b = map(int, input().split())\n\na_m = a % 3\nb_m = b % 3"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 5\") == \"Possible\"\n\"\"\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\") == \"Possible\"\n\"\"\"\n\nimport math\n\na, b = [int(x) for x in input().split()]"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 5') == 'Possible'\n\"\"\"\n"
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\n9 9\") == \"Possible\"\n\n-----Explanation-----\nAs it is possible to give nine cookies so that each of the three goats can have three cookies.\n\"\"\""
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\") == 'Possible'\n\n\"\"\""
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n4 5\n\"\"\") == \"Possible\"\n\nassert solution(\n\"\"\"\n2 1\n\"\"\") == \"Impossible\"\n\nassert solution(\n\"\"\"\n1 1\n\"\"\") == \"Possible\"\n\"\"\"\n\nassert solution(\n\"\"\"\n10 10\n\"\"\") == \"Impossible\"\n\nassert solution(\n\"\"\"\n10 9\n\"\"\") == \"Possible\""
    },
    {
        "number": 4722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5') == 'Possible'\n\"\"\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"???tc???\") == \"atcoder\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"?tc????\") == \"atcoder\"\nassert solution(\"coder\") == \"coder\"\n\nimport unittest\nclass TestStringMethods(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"?tc????\"), \"atcoder\")\n        self.assertEqual(solution(\"coder\"), \"coder\")"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('atcoder') == 'atcoder'\nassert solution('coder') == 'coder'\nassert solution('coder_') == 'unrestorable'\nassert solution('_coder') == 'unrestorable'\nassert solution('atc_der') == 'unrestorable'\n\n\"\"\""
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"tbcoder\") == \"atcoder\"\n'''\n\nimport sys\nimport re"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('?tc????') == 'atcoder'\nassert solution('coder') == 'coder'\n\"\"\"\n\nimport sys\nfrom typing import List"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('atcoder') == 'atcoder'\nassert solution('coder') == 'coder'\nassert solution('tcoder') == 'atcoder'\nassert solution('tcoc') == 'UNRESTORABLE'\nassert solution('tcocer') == 'UNRESTORABLE'\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('coder') == 'atcoder'\nassert solution('codex') == 'UNRESTORABLE'\n\"\"\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"coder\") == \"atcoder\"\n\n\"\"\"\n\nimport unittest\nfrom collections import defaultdict\nimport itertools\n\n\nclass TestSolution(unittest.TestCase):\n    def test_case_1(self):\n        stdin = \"?tc????\"\n        T, S = stdin.split(\"\\n\")\n        assert solution(stdin) == \"atcoder\"\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('atcoder') == 'atcoder'\nassert solution('abcoder') == 'atcoder'\nassert solution('a') == 'a'\n\"\"\"\n\nimport unittest\nimport sys\nimport os\n"
    },
    {
        "number": 4723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(solution.__doc__.split(\"\\n\")[0]) == 'atcoder'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\n----\n\n0    2    2\n2    2    1\n1    1    0\n3    3    1\n2    1    0\n2    0    0\n2    2    1\n\n>>> assert solution(\"2002\\n2017\") == \"2032\"\n>>> assert solution(\"2000\\n2100\") == \"1750\"\n>>> assert solution(\"3000\\n4000\") == \"2400\"\n>>> assert solution(\"2000\\n2000\") == \"2000\"\n>>> assert solution(\"2000\\n3001\") == \"1747\"\n>>> assert solution(\"2000\\n2999\") == \"1497\"\n>>> assert solution(\"2000\\n2000\\n3000\\n4000\") == \"2032\"\n>>> assert solution(\"2000\\n2100\\n2100\") == \"1750\"\n>>> assert solution(\"2000\\n3000\\n2000\") == \"1750\"\n>>> assert solution(\"2000\\n3000\\n2100\") == \"1747\"\n>>> assert solution(\"2000\\n3000\\n2100\\n3000\") == \"1747\"\n>>> assert solution(\"2000\\n3000\\n3000\\n3000\") == \"1500\"\n>>> assert solution(\"2000\\n3000\\n2100\\n2100\") == \"1747\"\n>>> assert solution(\"2000\\n3000\\n3000\\n2100\") == \"1747\"\n>>> assert solution(\"2000\\n3000\\n3000\\n2100\\n2100\") == \"1747\"\n>>> assert solution(\"2000\\n3000\\n2100\\n2100\\n2100\") == \"1747\"\n>>> assert solution(\"2000\\n3000\\n3000\\n2100\\n2100\\n2100\") == \"1500\"\n>>> assert solution(\"2000\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n2100\\n21"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2') == '2'\nassert solution('1 1') == '1'\nassert solution('1000 1') == '1001'\nassert solution('1000 100') == '1001'\n'''"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\nprint(\"PASSED\")\n\n\"\"\""
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2002\\n2017') == '2032'\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2002\\n2017') == '2032'\n\"\"\""
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\""
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2002\\n2017') == '2032'\n\"\"\""
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\""
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2002\\n2017\") == \"2032\"\n\"\"\"\n"
    },
    {
        "number": 4724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2002\\n2017') == '2032'\nassert solution('2\\n4') == '3'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('string') == '4'\nassert solution('letter') == '2'\nassert solution('aaaaaa') == '0'\nassert solution('uncopyrightable') == '13'\nassert solution('ambidextrously') == '12'\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('string') == 4\nassert solution('letter') == 2\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\nassert solution('ambidextrously') == 12\n\"\"\""
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"string\") == \"4\"\nassert solution(\"letter\") == \"2\"\nassert solution(\"aaaaaa\") == \"0\"\nassert solution(\"uncopyrightable\") == \"13\"\nassert solution(\"ambidextrously\") == \"12\"\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\nassert solution('assesses') == 1\n\"\"\"\n\nstdin = input()\n\ncount = 0\n\nfor i in range(len(stdin)):\n    if stdin[i] not in stdin[i+1:]:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('string') == 4\nassert solution('letter') == 2\nassert solution('aaaaaa') == 0\nassert solution('uncopyrightable') == 13\nassert solution('ambidextrously') == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"string\") == \"4\"\nassert solution(\"letter\") == \"2\"\nassert solution(\"aaaaaa\") == \"0\"\nassert solution(\"uncopyrightable\") == \"13\"\nassert solution(\"ambidextrously\") == \"12\"\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('string') == 4\n\"\"\"\nimport collections"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('string') == '4'\nassert solution('letter') == '2'\nassert solution('aaaaaa') == '0'\nassert solution('uncopyrightable') == '13'\nassert solution('ambidextrously') == '12'\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"string\") == 4\nassert solution(\"letter\") == 2\nassert solution(\"aaaaaa\") == 0\nassert solution(\"uncopyrightable\") == 13\nassert solution(\"ambidextrously\") == 12\n"
    },
    {
        "number": 4725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"assesses\") == 1\n\n\"\"\""
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin_values) == stdout_values[0]\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'\n\n\"\"\"\nimport sys\nimport math\nimport collections"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('19931568 1000000 6') == 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'\n\n:param stdin:\n    String of input data\n:return:\n    String of output data\n\"\"\""
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'\nprint('The local tests are done. Click on \"Check\" for more details about scoring on LEETCODE.')\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"100000000 500 3\") == \"TLE\"\nassert solution(\"100000000 50 3\") == \"AC\"\nassert solution(\"100000000 10001 5\") == \"TLE\"\nassert solution(\"100000000 10000 5\") == \"AC\"\nassert solution(\"19931568 1000000 6\") == \"TLE\"\nprint(solution(\"100000000 10001 5\"))\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('100000000 500 3\\n') == 'TLE'\nassert solution('100000000 50 3\\n') == 'AC'\nassert solution('100000000 10001 5\\n') == 'TLE'\nassert solution('19931568 1000000 6\\n') == 'TLE'\n\"\"\"\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('100000000 5 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('19931568 1000000 6') == 'TLE'\n"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'"
    },
    {
        "number": 4726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100000000 500 3') == 'TLE'\nassert solution('100000000 50 3') == 'AC'\nassert solution('100000000 10001 5') == 'TLE'\nassert solution('100000000 10000 5') == 'AC'\nassert solution('19931568 1000000 6') == 'TLE'"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\") == \"2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64\""
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\") == \"4 0 0 0\\n8 16 8 2\\n32 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n8 16 8 2\\n32 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\") == \"0 0 0 0\\n8 16 8 2\\n32 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"8 4 0 0\\n16 16 16 16\\n32 16 16 32\\n0 0 2048 64\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0') == '4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1') == '2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2') == '0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64'\nassert solution('2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0') == '4 0 0 0\\n8 16 8 2\\n2 64 32 4\\n2048 64 0 0'\n\n\"\"\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n8 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\n\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        def combine(first, second):\n            return first * 2 + second\n        \n        def move(i, j, dire):\n            if dire == 0:\n                return i - 1, j\n            elif dire == 1:\n                return i, j - 1\n            elif dire == 2:\n                return i + 1, j\n            elif dire == 3:\n                return i, j + 1\n            \n        def merge(a, b):\n            return a + b\n        \n        def move_merge(array, dire):\n            new_array = [0] * 16\n            if dire == 0:\n                for i in range(4):\n                    for j in range(4):\n                        new_array[4 * j + i] = array[4 * i + j]\n            elif dire == 1:\n                for i in range(4):\n                    for j in range(4):\n                        new_array[4 * (3 - j) + i] = array[4 * i + j]\n            elif dire == 2:\n                for i in range(4):\n                    for j in range(4):\n                        new_array[4 * i + (3 - j)] = array[4 * i + j]\n            elif dire == 3:\n                for i in range(4):\n                    for j in range(4):\n                        new_array[4 * i + (3 - j)] = array[4 * i + j]\n            return new_array\n            \n        def move_merge_out(array, dire, out):\n            if dire == 0:\n                for i in range(4):\n                    for j in range(4):\n                        array[4 * j + i] = out[4 * i + j]\n            elif dire == 1:\n                for i in range(4):\n                    for j in range(4):\n                        array[4 * (3 - j) + i] = out[4 * i + j]\n            elif dire == 2:\n                for i in range(4):\n                    for j in range(4):\n                        array[4 * i + (3 - j)] = out[4 * i + j]\n            elif dire == 3:\n                for i in range(4):\n                    for j in range(4):\n                        array[4 * i + (3 - j)] = out[4 * i + j]\n            return array\n            \n        def game(array):\n            new_array = []\n            for i in range(4):\n                for j in range(4):\n                    if array[4 * i + j] == 0:\n                        continue\n                    new_array.append(array[4 * i + j])\n                    if len(new_array) == 4:\n                        if new_array[0] == new_array[1]:\n                            new_array[0] = combine(new_array[0], new_array[1])\n                            new_array.pop(1)\n                        if new_array[0] == new_array[2]:\n                            new_array[0] = combine(new_array[0], new_array[2])\n                            new_array.pop(2)\n                        if new_array[0] == new_array[3]:\n                            new_array[0] = combine(new_array[0], new_array[3])\n                            new_array.pop(3)\n                        if new_array[1] == new_array[2]:\n                            new_array[1] = combine(new_array[1], new_array[2])\n                            new_array.pop(2)\n                        if new_array[1] == new_array[3]:\n                            new_array[1] = combine(new_array[1], new_array[3])\n                            new_array.pop(3)\n                        if new_array[2] == new_array[3]:\n                            new_array[2] = combine(new_array[2], new_array[3])\n                            new_array.pop(3)\n                    if len(new_array) >= 4:\n                        if new_array[0] == new_array[1]:\n                            new_array[0] = combine(new_array[0], new_array[1])\n                            new_array.pop(1)\n                        if new_array[0] == new_array[2]:\n                            new_array[0] = combine(new_array[0], new_array[2])\n                            new_array.pop(2)\n                        if new_array[0] == new_array[3]:\n                            new_array[0] = combine(new_array[0], new_array[3])\n                            new_array.pop(3)\n                        if new_array[1] == new_array[2]:\n                            new_array[1] = combine(new_array[1], new_array[2])\n                            new_array.pop(2)\n                        if new_array[1] == new_array[3]:\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"8 4 0 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"4 16 8 2\\n0 0 0 4\\n0 0 2048 4\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"8 4 0 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 0 0 2\\\\n4 16 8 2\\\\n2 64 32 4\\\\n1024 1024 64 0\\\\n0\") == \\\n        \"4 0 0 0\\\\n4 16 8 2\\\\n2 64 32 4\\\\n2048 64 0 0\\\\n\"\nassert solution(\"2 0 0 2\\\\n4 16 8 2\\\\n2 64 32 4\\\\n1024 1024 64 0\\\\n1\") == \\\n        \"2 16 8 4\\\\n4 64 32 4\\\\n2 1024 64 0\\\\n1024 0 0 0\\\\n\"\nassert solution(\"2 0 0 2\\\\n4 16 8 2\\\\n2 64 32 4\\\\n1024 1024 64 0\\\\n2\") == \\\n        \"0 0 0 0\\\\n4 16 8 2\\\\n2 64 32 4\\\\n0 0 2048 64\\\\n\"\nassert solution(\"2 2 4 8\\\\n4 0 4 4\\\\n16 16 16 16\\\\n32 16 16 32\\\\n0\") == \\\n        \"4 4 8 0\\\\n8 4 0 0\\\\n32 32 0 0\\\\n32 32 32 0\\\\n\"\nassert solution(\"2 2 4 8\\\\n4 0 4 4\\\\n16 16 16 16\\\\n32 16 16 32\\\\n0\\\\n1\") == \\\n        \"2 16 8 4\\\\n8 4 0 4\\\\n32 32 0 0\\\\n32 32 32 4\\\\n0\\\\n\"\n\n----Problem-----\nYou are given a single-player game of 2048 (Wikipedia, https://en.wikipedia.org/wiki/2048) where you are playing against the computer. The goal is to get the highest score possible by moving tiles up, down, left, or right, so that all the tiles on the board are aligned toward the same direction (up, down, left, or right). The input consists of five lines, each with four integers: the first four indicate the state of the board. The last line contains an integer 0, 1, 2, or 3 indicating the direction to move (left, up, right, or down) in the next move. Each line is independent, so in the first move, you can move left to move the tiles as far as possible. In the next move, you can move left or up to move the tiles as far as possible. In the third move, you can move right or down to move the tiles as far as possible, and so on. Note that you can never move tiles to an empty cell; empty cells are considered invalid moves.\n\nA move consists of moving any number of tiles, including zero, and ends in an empty cell. In the first move, you must move at least one tile. In each subsequent move, you can move up to one more tile than in the previous move. The limit on the number of tiles in each subsequent move depends on the direction in which you are moving, as described below. If you move in the direction in which you are already moving, you can move an additional tile.\n\nGiven the input, return the maximum number of tiles that can be moved in the fourth move.\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n3\") == \"2 0 0 0\\n4 16 8 0\\n2 64 32 4\\n0 0 2048 64\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n4\") == \"2 16 8 2\\n4 0 16 2\\n2 64 32 4\\n0 0 2048 64\"\n\n\"\"\"\n"
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\\n1024 0 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\n\n-----Problem-----\nIn a game of 2048, the player can slide numbered tiles horizontally, vertically, or diagonally to combine them in one of the four directions: left, right, up, or down, producing a new tile with the number equal to the sum of the numbers on the adjacent tiles. For example, a slide of a tile to the right will be denoted by the character \">\" and a slide of a tile upwards will be denoted by the character \"^\". For example:\n\n2 2 8                   2 2 8\n4 6 4    or     =>   2 4 6\n8 4 6                   4 8 6\n\nA slide of a tile to the left will be denoted by the character \"<\" and a slide of a tile downwards will be denoted by the character \"v\". For example:\n\n2 2 8                   2 2 8\n4 6 4    or     =>   8 6 6\n8 4 6                   6 8 4\n\nWrite a function merge_tiles(board: List[List[int]]) which, given a list of lists of integers representing a game of 2048, returns a new list of lists of integers representing the update game state.\n\n-----Constraints-----\nboard will contain between 1 and 30 elements, inclusive.\nEach of the elements will be between 0 and 10,000, inclusive.\n-----Test cases-----\n\"\"\""
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\") == \"4 4 8 0\\n8 4 0 0\\n32 32 0 0\\n32 32 32 0\"\nassert solution(\"2 2 4 8\\n4 0 4 4\\n16 16 16 16\\n32 16 16 32\\n0\\n2\") == \"0 0 0 4\\n4 16 16 2\\n2 64 32 4\\n0 0 2048 64\"\n\n\"\"\""
    },
    {
        "number": 4727,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n0\") == \"4 0 0 0\\n4 16 8 2\\n2 64 32 4\\n2048 64 0 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n1\") == \"2 16 8 4\\n4 64 32 4\\n2 1024 64 0\"\nassert solution(\"2 0 0 2\\n4 16 8 2\\n2 64 32 4\\n1024 1024 64 0\\n2\") == \"0 0 0 4\\n4 16 8 2\\n2 64 32 4\\n0 0 2048 64\"\n\"\"\""
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"0\"\nassert solution(\"CH3OH 1\") == \"1\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('H 2') == '0'\nassert solution('O') == '0'\nassert solution('C2H6 10') == '6'\nassert solution('C3H8') == '0'\nassert solution('C3H8 10') == '0'\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"CH3OCH4 10\") == \"0\"\nassert solution(\"H2O 2\") == \"0\"\nassert solution(\"CH2OCH2O 10\") == \"6\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"CH2OHCH2O 10\") == \"6\"\n\"\"\"\n\nimport collections\nimport sys\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('H2O 10') == '0'\nassert solution('C6H6OCH2O 10') == '12'\nassert solution('C6H14 10') == '12'\n\"\"\""
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"0\"\nassert solution(\"CH3OH 1\") == \"1\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"H2O\") == \"0\"\nassert solution(\"C2H6O\") == \"6\"\nassert solution(\"C6H6OCH2O 10\") == \"12\"\nassert solution(\"CH3OH 1\") == \"1\"\nassert solution(\"C6H14 10\") == \"12\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"H2O 2\") == \"0\"\nassert solution(\"H2O 10\") == \"2\"\nassert solution(\"H2O 10H2O3\") == \"6\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C2H6 10C3H8\") == \"6\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"H 2\") == \"0\"\nassert solution(\"O\") == \"0\"\nassert solution(\"C2H6 10\") == \"6\"\nassert solution(\"C3H8\") == \"0\"\nassert solution(\"CH3OH 1\") == \"1\"\n"
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('H 2\\nO\\n') == '0'\nassert solution('C2H6 10\\nC3H8') == '6'\nassert solution('C6H6OCH2O 10\\nHCN') == '0'\nassert solution('C6H14 10\\nC5H10') == '12'\n\n\"\"\""
    },
    {
        "number": 4728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('H 2') == '0'\nassert solution('O') == '0'\nassert solution('C2H6 10') == '6'\nassert solution('C3H8') == '0'\nassert solution('CH3OH 1') == '1'\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\""
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"ABC HAPPYBIRTHDAYCACEY\"\n) == \"PASS\"\nassert solution(\n    \"ABC TRAGICBIRTHDAYCACEY\"\n) == \"FAIL\"\nassert solution(\n    \"ABC HAPPYBIRTHDAY\"\n) == \"FAIL\"\nassert solution(\n    \"SECRET SOMECHORESARETOUGH\"\n) == \"PASS\"\nassert solution(\n    \"SOMECHEERSARETOUGH\"\n) == \"FAIL\"\n\n-----Explanation-----\nFor the example above, we see that the given password was ABC, and the message was HAPPYBIRTHDAYCACEY. We also see that the given message is valid for the password ABC.\n\nFor the string SECRET, the password was ABC, and the message was SOMECHORESARETOUGH. However, the message is not a valid message for the password ABC.\n\nAs a function, our solution takes the string stdin, which is the concatenation of the password and the message, and returns PASS if the second string is a valid message for the given password, or FAIL otherwise.\n\"\"\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\"\"\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\"\"\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\n\"\"\""
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('ABC HAPPYBIRTHDAYCACEY') == 'PASS'\nassert solution('ABC TRAGICBIRTHDAYCACEY') == 'FAIL'\nassert solution('ABC HAPPYBIRTHDAY') == 'FAIL'\nassert solution('SECRET SOMECHORESARETOUGH') == 'PASS'\n\"\"\""
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\n\n\"\"\"\n"
    },
    {
        "number": 4729,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"ABC HAPPYBIRTHDAYCACEY\") == \"PASS\"\nassert solution(\"ABC TRAGICBIRTHDAYCACEY\") == \"FAIL\"\nassert solution(\"ABC HAPPYBIRTHDAY\") == \"FAIL\"\nassert solution(\"SECRET SOMECHORESARETOUGH\") == \"PASS\"\nprint('Success')\n\n\n\nSample Output:\n\nSuccess\n\n\"\"\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n([] [] ]\\n\") == \"] 7\"\nassert solution(\"13\\n(([] [[]] ())\\n\") == \"ok so far\"\nassert solution(\"21\\n[ { { () () () () } } ]\\n\") == \"] 20\"\nassert solution(\"27\\n[ { [[()]] (({})) } ] () {}\\n\") == \"ok so far\""
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"([] [] ]\") == \"]\"\nassert solution(\"(([] [[]] ())\") == \"ok so far\"\nassert solution(\"[ { { () () () () } } ] () {}\") == \"]\"\nassert solution(\"[ { [[()]] (({})) } ] () {}\") == \"ok so far\"\n\n\"\"\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('[ { ((())) } ] ()') == '] 17'\nassert solution('[ { ((())) } ] ()') == 'ok so far'\nassert solution('[ { ((())) } ] ()') == 'ok so far'\nassert solution('[ { ((())) } ] ()') == 'ok so far'\nassert solution('[ { ((())) } ] ()') == 'ok so far'\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'ok so far'\nassert solution('()') == ')'\nassert solution('()[]{}') == ']'\nassert solution('()[]{}()') == '}'\nassert solution('()[]{}()[]{}') == ']'\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"()()[][]{}()\") == \"()[ ]{ }()\"\nassert solution(\"([] [])[]{}()\") == \"()[]{ }()\"\nassert solution(\"[[()]][][[]]\") == \"ok so far\"\nassert solution(\"]()[][]{}(]\") == \"]\"\nassert solution(\"[{}]\") == \"ok so far\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"((()()(()())))((()))\") == \"((()()(()())))((()))\"\nassert solution(\"((()()(()())))((()))\") == \"ok so far\"\nassert solution(\"((()()(()())))((()))\") == \")\"\nassert solution(\"((()()(()())))((()))\") == \")\"\nassert solution(\"((()()(()())))((()))\") == \")\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('[ { { () () () () } ]') == ']'\nassert solution('[ { [[()]] (({})) } ] () {}') == 'ok so far'\nassert solution('( [] [] ]') == ']'\nassert solution('( [ [ [ ] ] ] )') == 'ok so far'\n\nimport unittest\nfrom unittest.mock import patch\nfrom io import StringIO\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        with patch('sys.stdin', StringIO('8\\n([] [] ]\\n')):\n            self.assertEqual(solution(stdin), '] 7')\n        with patch('sys.stdin', StringIO('13\\n(([] [[]] ())\\n')):\n            self."
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"(([] [[]] ())\") == \"]\"\nassert solution(\"[ { { () () () () } } ] (())\") == \"ok so far\"\nassert solution(\"([] [] ]\") == \"]\"\nassert solution(\"([] [])\") == \"ok so far\"\nassert solution(\"[ () ]\") == \"ok so far\"\n\nimport io, pytest\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"[ { { () () () () } ]\") == \"[\"\nassert solution(\"(([] [] ]\") == \"]\"\nassert solution(\"[ { [[()]] (({})) } ] () {}\") == \"ok so far\"\nassert solution(\"\") == \"ok so far\"\nassert solution(\"[ { [[()]] (({})) } ] ()\") == \"]\"\n"
    },
    {
        "number": 4730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"([] [] ]\") == ']'\nassert solution(\"(([] [[]] ())\") == 'ok so far'\nassert solution(\"[ { { () () () () } } ]\") == ']'\nassert solution(\"[[[()]] (({}))\") == 'ok so far'\nassert solution(\"([] [] ]\") == ']'\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\napple\\near\\nreal\\nletters\\nstyle\\n') == 'Fair Game'\nassert solution('2\\napple\\neat\\napple\\n') == 'Player 1 lost'\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\"\"5\napple\near\nreal\nletters\nstyle\n\"\"\") == \"Fair Game\"\nassert solution(\"\"\"3\napple\nextra\napple\n\"\"\") == \"Player 1 lost\"\nassert solution(\"\"\"2\napple\nneat\n\"\"\") == \"Player 2 lost\"\n\n\"\"\"\nimport collections\nfrom typing import Collection, List"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"apple\\near\\nreal\\nletters\\nstyle\") == \"Fair Game\"\nassert solution(\"apple\\nextra\\napple\\n\") == \"Player 1 lost\"\nassert solution(\"apple\\nneat\\napple\\n\") == \"Player 2 lost\"\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'Fair Game'\nassert solution('\\n') == 'Player 1 lost'\nassert solution('\\n\\n') == 'Player 2 lost'\nassert solution('\\n\\n\\n\\n') == 'Fair Game'\nassert solution('\\n\\n\\n\\n\\n\\n\\n\\n\\n') == 'Player 1 lost'\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\napple\\near\\nreal\\nletters\\nstyle') == 'Fair Game'\nassert solution('3\\napple\\nextra\\napple') == 'Player 1 lost'\nassert solution('2\\napple\\neat\\napple') == 'Player 2 lost'\n\"\"\"\n\nfrom itertools import combinations, chain\nfrom collections import Counter\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\napple\\nneat\\napple\\n\") == \"Player 2 lost\"\n\"\"\"\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\") == \"Fair Game\"\nassert solution(\"3\\napple\\nextra\\napple\") == \"Player 1 lost\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\napple\\near\\nreal\\nletters\\nstyle\") == \"Fair Game\"\nassert solution(\"3\\napple\\nextra\\napple\") == \"Player 1 lost\"\nassert solution(\"2\\napple\\neat\") == \"Player 2 lost\"\n\n---Problem Description---\nYour friend has come up with a new word-based game that starts with the word START.\n\nIn this game, the players take turns to add words to a growing board. The players also take turns to remove the last letter from a word (called a cell).\n\nEvery word must follow the rule below:\n\nEvery word must start with the letter A.\nThe length of the board is the same as the length of the first word.\nEvery cell can only contain a letter of the current player\u2019s turn.\nAt the beginning of the game, every cell in the board is set to START.\nThe first player who cannot make a move loses the game.\nThe game ends when there are no cells to add.\n\nGiven a string START, determine whether the game was won by a player or a draw by returning:\n\n\"Lose\" if the player who cannot make a move loses the game.\n\"Draw\" if the game ends because there are no more cells to add.\n\"Fair Game\" if the game ends because every cell is filled.\n\n-----Constraints-----\n1 \\leq START \\leq 100,000\n\n------Solution------"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == \"Fair Game\"\nassert solution('5\\napple\\near\\nreal\\nletters\\nstyle') == \"Fair Game\"\nassert solution('3\\napple\\nextra\\napple') == \"Player 1 lost\"\nassert solution('2\\napple\\nneat') == \"Player 2 lost\"\n\"\"\"\n\nfrom typing import List\nfrom itertools import zip_longest\n"
    },
    {
        "number": 4731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\napple\\near\\nreal\\nletters\\nstyle') == 'Fair Game'\nassert solution('3\\napple\\nextra\\napple') == 'Player 1 lost'\n\"\"\""
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1000 * 100') == '10000'\nassert solution('1000 + 100') == '1010'\n\"\"\""
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1000\\n*\\n100') == '100000'\nassert solution('10000\\n+\\n10') == '10010'\nassert solution('10\\n+\\n1000') == '1010'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 * 10\") == \"10000\"\nassert solution(\"100 + 10\") == \"110\"\nassert solution(\"100 + 100 + 100\") == \"1100\"\nprint('Success')"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000\\n*\\n100\\n\") == \"100000\"\nassert solution(\"10000\\n+\\n10\\n\") == \"10010\"\nassert solution(\"10\\n+\\n1000\\n\") == \"1010\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1000\\n*\\n100\\n') == '100000'\nassert solution('10000\\n+\\n10\\n') == '10010'\nassert solution('10\\n+\\n1000\\n') == '1010'\n\n\"\"\""
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000\\n*\\n100\") == \"100000\"\nassert solution(\"10000\\n+\\n10\") == \"10010\"\nassert solution(\"10\\n+\\n1000\") == \"1010\"\nprint(\"Success\")"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1000\\n*\\n100\") == \"100000\"\nassert solution(\"10000\\n+\\n10\") == \"1010\"\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1000\\n*\\n100\") == \"100000\"\nassert solution(\"10000\\n+\\n10\") == \"10010\"\nassert solution(\"10\\n+\\n1000\") == \"1010\"\n\"\"\""
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1000*100\") == \"100000\"\n\"\"\""
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8 out\") == \"3\\n\"\nassert solution(\"8 in\") == \"6\\n\"\nassert solution(\"52 out\") == \"8\\n\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import List\nimport unittest\n\n\nclass Solution:\n    def __init__(self, input_data: str, output_data: str):\n        self.input = input_data\n        self.output = output_data\n\n    def solution(self):\n        pass\n\n    def execute(self):\n        print(self.solution())\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.input = '8 out'\n        self.output = '3\\n'\n        self.obj = Solution(self.input, self.output)\n\n    def test_execute(self):\n        self.obj.execute()\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\n------Hint------\nThe number of in-shuffles and out-shuffles is the same, and is the result of a perfect shuffle.\n\"\"\"\n\n\"\"\"\nSolution Approach\n\nCalculate the number of cards in the deck: n.\n\nThe number of in-shuffles is the number of cards in the deck minus 1.\n\nThe number of out-shuffles is the number of cards in the deck plus 1.\n\nPrint the number of in-shuffles and out-shuffles.\n\"\"\""
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\nprint(solution(stdin))"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\"\"\"\n\n\nfrom __future__ import annotations\n\nfrom typing import Callable, Tuple, List, Optional\nimport sys\nimport itertools\nimport functools\n\nfrom test_framework import generic_test\nfrom test_framework.random_sequence_checker import run_func_with_retries\nfrom test_framework.test_failure import TestFailure\nfrom test_framework.test_utils import enable_executor_hook\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 out') == '3'\nassert solution('8 in') == '6'\nassert solution('52 out') == '8'\n\nprint(solution(stdin.read()))\n\nimport sys\nsys.stdin = open(\"test_input.txt\")"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8 out\") == '3'\nassert solution(\"8 in\") == '6'\nassert solution(\"52 out\") == '8'\n\"\"\"\n"
    },
    {
        "number": 4733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8 out\") == \"3\"\nassert solution(\"8 in\") == \"6\"\nassert solution(\"52 out\") == \"8\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\nassert solution(\"uixioztqea\") == \"uixioztqea\"\nassert solution(\"zrzjj\") == \"zrzjz\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\nassert solution(\"jesus\") == \"jesus\"\nassert solution(\"jesuse\") == \"jesuse\"\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\nprint(\"Success\")\n\n\"\"\""
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('menolaxios mox') =='menolaxiosexmox'\nassert solution('alemaxe maxos') == 'alemaxexmaxos'\nassert solution('pamoli toxes') == 'pamolextoxes'"
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\""
    },
    {
        "number": 4734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"menolaxios mox\") == \"menolaxiosexmox\"\nassert solution(\"alemaxe maxos\") == \"alemaxexmaxos\"\nassert solution(\"pamoli toxes\") == \"pamolextoxes\"\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == 'no'\nassert solution('2020') == 'yes'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\n\"\"\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\"\n\"\"\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\nprint('All tests passed.')\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\n'''"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'"
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2018\") == \"yes\"\nassert solution(\"2019\") == \"no\"\nassert solution(\"2020\") == \"yes\""
    },
    {
        "number": 4735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2018') == 'yes'\nassert solution('2019') == 'no'\nassert solution('2020') == 'yes'\n\"\"\"\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\nassert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"0\"\nassert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"0\""
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 10 10 20 0 10 10 10 10 10') == '1820000'\n\"\"\"\n\n\nfrom itertools import permutations\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\""
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 0 0 0 4 0 0 0 0 4') == '64'\n\nassert solution('10 10 10 20 0 10 10 10 10 10') == '1820000'\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\\n3\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\\n4\") == \"1820000\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\\n8\") == \"0\"\n\"\"\""
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n\"\"\"\n\n\"\"\"\n< \u308f\u305f\u3057\u304b\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u306f\u306a\u3044\u306e\u3067\u5148\u306b\u66f8\u3044\u3066\u304a\u3044\u3066\u3001\u308f\u304b\u3063\u305f\u3089\u3069\u3046\u305b\n\u308f\u304b\u3063\u305f\u3089\u3069\u3046\u305b\n> \u3053\u3046\u3044\u3046\u4e8b\u3060\u3068\u601d\u3044\u6d6e\u304b\u3093\u3067\u308b\u3051\u3069\u3001\n> \u73fe\u5728\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u306f\u306a\u3044\u306e\u3067\u5148\u306b\u66f8\u3044\u3066\u304a\u3044\u3066\u3001\u308f\u304b\u3063\u305f\u3089\u3069\u3046\u305b\n\"\"\"\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 0 0 0 4 0 0 0 0 4') == '64'\nassert solution('10 10 10 20 0 10 10 10 10 10') == '1820000'"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n"
    },
    {
        "number": 4736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"0\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\nassert solution(\"4 0 0 0 4 0 0 0 0 4\") == \"64\"\nassert solution(\"10 10 10 20 0 10 10 10 10 10\") == \"1820000\"\n\n\"\"\""
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\n\"\"\"\n\nfrom math import inf"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\"\n\n\"\"\"\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(open(\"input.txt\", \"r\").read()) == \"2 330\"\n\n\"\"\"\n\nimport itertools\nfrom math import ceil\n\nN, p = map(int, stdin.readline().split())\ntimes = list(map(int, stdin.readline().split()))\n\nmin_time = ceil(sum(times)/N)\nmin_time = max(min_time, 300)\n\nmax_time = 0\nfor i in range(len(times)):\n    if i == p:\n        continue\n    max_time += times[i]"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 0\\n30 270 995 996 997 998 999') == '2 330'\nassert solution('7 1\\n30 270 995 996 997 998 999') == '2 570'\nassert solution('7 2\\n30 270 995 996 997 998 999') == '0 0'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\\n\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\\n\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\\n\") == \"0 0\"\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 0\\n30 270 995 996 997 998 999') == '2 330'\nassert solution('7 1\\n30 270 995 996 997 998 999') == '2 570'\nassert solution('7 2\\n30 270 995 996 997 998 999') == '0 0'\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n"
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\""
    },
    {
        "number": 4737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 0\\n30 270 995 996 997 998 999\") == \"2 330\"\nassert solution(\"7 1\\n30 270 995 996 997 998 999\") == \"2 570\"\nassert solution(\"7 2\\n30 270 995 996 997 998 999\") == \"0 0\"\n\"\"\"\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('abccba') == 2\nassert solution('abccabbcaabc') == 3\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abccabba') == '2'\nassert solution('aaaaaaa') == '1'\nassert solution('abccba') == '2'\nassert solution('abcc') == '3'\nassert solution('aba') == '1'\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\n\nprint('Success')\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n\"\"\"\n\nimport math"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abbaabba\") == 2\nassert solution(\"abcdef\") == 6\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abbaabba') == 2\nassert solution('abcdef') == 6\nassert solution('aaaaaaaa') == 1\n\"\"\""
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aaaaaaaa') == 1\nassert solution('abbaabbaabba') == 2\nassert solution('abcdef') == 6\n\n\"\"\"\n\nfrom collections import Counter, defaultdict\nfrom typing import List, Tuple"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\nprint(\"Passed\")"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('aa') == 1\nassert solution('abba') == 2\nassert solution('abcdef') == 6\nassert solution('abcabcabcabc') == 3\n"
    },
    {
        "number": 4738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aaaaaaaa\") == 1\nassert solution(\"abbaabbaabba\") == 2\nassert solution(\"abcdef\") == 6\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n\") == \"2\\n1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\\n\") == \"1\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\\n\") == \"0\\n1\"\n\"\"\"\nimport sys\n\nstdin = sys.stdin.readlines()\n\nM, N = [int(x) for x in stdin[0].split()]\ntimes = [int(x) for x in stdin[1].split()]\nmilestones = [int(x) for x in stdin[2].split()]"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n') == '2\\n1 2\\n'\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == \"0\\n1\"\n\n\"\"\"\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\n'''\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\") == \"2\\n1 2\"\nassert solution(\"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\") == \"1\\n1\"\nassert solution(\"3 6\\n1 2 4\\n11 12 15 19 24 30\") == \"0\\n1\"\n\"\"\"\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40\\n\"\n) == \"2\\n1 2\"\nassert solution(\n    \"5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9\\n\"\n) == \"1\\n1\"\nassert solution(\n    \"3 6\\n1 2 4\\n11 12 15 19 24 30\\n\"\n) == \"0\\n1\"\n\"\"\"\n\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass Dataset:\n    M: int\n    N: int\n    T: list[int]\n    X: list[int]\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2\\n1 2'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9') == '1\\n1'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30') == '0\\n1'\n\n\"\"\""
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2\\n1 2'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9') == '1\\n1'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30') == '0\\n1'\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(print())\n"
    },
    {
        "number": 4739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40') == '2\\n1 2'\nassert solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9') == '1\\n1'\nassert solution('3 6\\n1 2 4\\n11 12 15 19 24 30') == '0\\n1'\n\nprint(solution('4 12\\n1 2 4 5\\n6 8 12 18 26 28 30 34 36 37 39 40'))\nprint(solution('5 10\\n1 2 3 4 5\\n0 1 2 3 4 5 6 7 8 9'))\nprint(solution('3 6\\n1 2 4\\n11 12 15 19 24 30'))\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5551212\") == \"1\"\nassert solution(\"5519876\") == \"0\"\nassert solution(\"5055555\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5551212') == 1\nassert solution('5519876') == 0\nassert solution('5055555') == 0\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5551212\") == \"1\"\nassert solution(\"5551212\") == \"1\"\nassert solution(\"5551212\") == \"1\"\nassert solution(\"5551212\") == \"1\"\nassert solution(\"5551212\") == \"1\"\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\n\"\"\""
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5551212') == 1\nassert solution('5519876') == 0\nassert solution('5055555') == 0\n\"\"\""
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\nassert solution('1234567') == '0'\nassert solution('1111111') == '1'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5551212') == '1'\nassert solution('5519876') == '0'\nassert solution('5055555') == '0'\n\"\"\""
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(5551212) == 1\nassert solution(5519876) == 0\nassert solution(5055555) == 0\n\"\"\""
    },
    {
        "number": 4740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(5551212) == 1\nassert solution(5519876) == 0\nassert solution(5055555) == 0\n\n\"\"\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\nassert solution(\"0/1\") == \"0/1\"\nassert solution(\"100/1\") == \"100/1\"\n\n\"\"\"\n\nimport sys\n\na = sys.stdin.readline().rstrip().split(\"/\")\na = [int(i) for i in a]\nc = a[0] / a[1]\nprint(int(c), \"/\", a[1], sep='')\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\n\"\"\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\nprint(solution(input()))"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('32/1') == '0/1'\nassert solution('33/1') == '5/9'\nassert solution('-40/1') == '-40/1'\n\n\"\"\"\n"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\"\"\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\n\"\"\"\n\nfrom fractions import Fraction"
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(32/1) == \"0/1\"\nassert solution(33/1) == \"5/9\"\nassert solution(-40/1) == \"-40/1\"\n\"\"\""
    },
    {
        "number": 4741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"32/1\") == \"0/1\"\nassert solution(\"33/1\") == \"5/9\"\nassert solution(\"-40/1\") == \"-40/1\"\n\"\"\""
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\nassert solution(\"7\\nD E A G B C D E\\nE F G A B C D E\") == \"Nonsense\"\n\n-----Notes-----\n\n\"\"\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\\n\") == 'Transposition'\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\\n\") == 'Inversion'\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\\n\") == 'Retrograde'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"2\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"2\\nC E G\\nD F# A\") == \"Transposition\"\n\"\"\""
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"2\\nC C G G A A G\") == \"Inversion\"\nassert solution(\"2\\nC C F F D# D# F\") == \"Retrograde\"\nassert solution(\"2\\nC C G G A A G\\nC C F F D# D# F\") == \"Transposition,Inversion,Retrograde\"\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\n\n\"\"\"\n\nimport unittest\nfrom collections import deque\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n3\nC E G\nD F# A\n\"\"\") == \"Transposition\"\n\nassert solution(\"\"\"\n7\nC C G G A A G\nC C F F D# D# F\n\"\"\") == \"Inversion\"\n\nassert solution(\"\"\"\n7\nA B C D E F G\nG F E D C B A\n\"\"\") == \"Retrograde\"\n\nassert solution(\"\"\"\n7\nC C G G A A G\nF F E D C B A\n\"\"\") == \"Nonsense\"\n\nassert solution(\"\"\"\n3\nC D E\nE B A\n\"\"\") == \"Nonsense\""
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\n\"\"\"\nimport sys\nfrom collections import deque\nfrom typing import List\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\n\"\"\"\n\nimport unittest\nimport re\n"
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\nC E G\\nD F# A\") == \"Transposition\"\nassert solution(\"7\\nC C G G A A G\\nC C F F D# D# F\") == \"Inversion\"\nassert solution(\"7\\nA B C D E F G\\nG F E D C B A\") == \"Retrograde\"\n\n\"\"\""
    },
    {
        "number": 4742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\nC E G\\nD F# A') == 'Transposition'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'\nassert solution('7\\nA B C D E F G\\nG F E D C B A') == 'Retrograde'\nassert solution('2\\nB A') == 'Nonsense'\nassert solution('7\\nC C G G A A G\\nC C F F D# D# F') == 'Inversion'\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\n\"\"\"\nimport re\nimport itertools\n\nfrom typing import List, Union\n\nVOWELS: List[str] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\nSTOP_CONS: List[str] = [\"b\", \"c\", \"d\", \"g\", \"k\", \"n\", \"p\", \"t\"]\n\nHARD_CONS: List[str] = [\"h\", \"b\", \"c\", \"d\", \"g\", \"k\", \"n\", \"p\", \"t\"]\n\nREPLACEMENT_CONS: List[List[Union[str, None]]] = [\n    [None, \"a\"],\n    [\"a\", \"e\"],\n    [\"a\", \"i\"],\n    [\"a\", \"o\"],\n    [\"a\", \"u\"],\n    [None, \"e\"],\n    [\"e\", \"i\"],\n    [\"e\", \"o\"],\n    [\"e\", \"u\"],\n    [None, \"i\"],\n    [\"i\", \"o\"],\n    [\"i\", \"u\"],\n    [None, \"o\"],\n    [\"o\", \"u\"],\n    [None, \"u\"]\n]\n\nSTOP_REPLACEMENT: List[Union[str, None]] = [None, \"a\", \"a\", \"a\", \"a\"]\n\nHARD_REPLACEMENT: List[Union[str, None]] = [None, \"e\", \"i\", \"o\", \"u\"]\n\nVOWEL_REPLACEMENT: List[Union[str, None]] = [None, \"a\", \"e\", \"i\", \"o\", \"u\"]"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\"\"\"\n\n\nimport re"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom typing import List\n\nimport regex\n\n\n@dataclass(frozen=True)\nclass Syllable:\n    string: str\n    last: str\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"I love ba-na-na\") == \"Gah kove bababa\"\nassert solution(\"Cat-a-pil-lar\") == \"Catacillar\"\nassert solution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\nsolution(\"I love ba-na-na\") == \"Gah kove bababa\"\nsolution(\"Cat-a-pil-lar\") == \"Catacillar\"\nsolution(\"Co-ding is the best\") == \"Cociccah gs the bestuh\"\n\n\"\"\"\n\nimport sys\nfrom typing import List\n\nfrom icontract import require, ensure\n\n\n@require(lambda stdin: len(stdin) > 0)\n@require(lambda stdin: len(stdin.split()) <= 50)\n@require(lambda stdin: len(stdin) > 0)\n@ensure(lambda result: len(result) <= 5 * 10 ** 4)\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('I love ba-na-na') == 'Gah kove bababa'\nassert solution('Cat-a-pil-lar') == 'Catacillar'\nassert solution('Co-ding is the best') == 'Cociccah gs the bestuh'\n\nprint(solution('I love ba-na-na'))\nprint(solution('Cat-a-pil-lar'))\nprint(solution('Co-ding is the best'))\n\"\"\"\n"
    },
    {
        "number": 4743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''I love ba-na-na\n''') == 'Gah kove bababa'\nassert solution('''Cat-a-pil-lar\n''') == 'Catacillar'\nassert solution('''Co-ding is the best\n''') == 'Cociccah gs the bestuh'\n\"\"\"\n\n\nimport string\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"6\"\nassert solution(\"4\") == \"16\"\nassert solution(\"3\") == \"14\"\nprint(\"Test pass.\")\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\n\"\"\"\n\n\n\nimport sys"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == 6\nassert solution(\"4\") == 16\n\"\"\"\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '6'\n\"\"\""
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\nprint('Test pass.')\n\n\"\"\""
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == 6\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n') == '6'\nassert solution('2\\n') == '5'\nassert solution('3\\n') == '14'\nassert solution('6\\n') == '20'\nassert solution('8\\n') == '63'\n"
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\n\n\"\"\""
    },
    {
        "number": 4744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1') == '6'\nassert solution('4') == '16'\nassert solution('3') == '14'\nassert solution('6') == '86'\n\"\"\"\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\\n\") == '3'\nassert solution(\"5 10\\n4 8 1 9 7\\n\") == '2'\nassert solution(\"4 10\\n1 3 1 7\\n\") == '4'\nassert solution(\"4 10\\n10 1 1 1\\n\") == '2'\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\") == 3\nassert solution(\"5 10\\n4 8 1 9 7\") == 2\nassert solution(\"4 10\\n1 3 1 7\") == 4\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5 6\n1 2 3 4 5\n''') == '3'\nassert solution('''5 10\n4 8 1 9 7\n''') == '2'\nassert solution('''4 10\n1 3 1 7\n''') == '4'\n\nimport sys\nassert sys.version_info >= (3, 9)\n\nfrom typing import Callable, Tuple\n\nINPUT_TYPE: Callable[[str], str] = lambda s: s.strip()"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 6\\n1 2 3 4 5\\n') == '3'\nassert solution('5 10\\n4 8 1 9 7\\n') == '2'\nassert solution('4 10\\n1 3 1 7\\n') == '4'\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 6\\n1 2 3 4 5\\n') == '3'\n\"\"\"\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\\n\") == 3\n"
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''5 6\n1 2 3 4 5\n''') == '3'\nassert solution('''5 10\n4 8 1 9 7\n''') == '2'\nassert solution('''4 10\n1 3 1 7\n''') == '4'\n\n\"\"\""
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n1 2 3 4 5\\n\") == \"3\"\n\nassert solution(\"5 10\\n4 8 1 9 7\\n\") == \"2\"\n\nassert solution(\"4 10\\n1 3 1 7\\n\") == \"4\"\n\nassert solution(\"4 10\\n7 6 5 4\\n\") == \"1\"\n\nassert solution(\"4 10\\n9 8 7 6\\n\") == \"0\""
    },
    {
        "number": 4745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4 5\\n1 2 3 4 5') == 3\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\\n\") == \"possible\"\nassert solution(\"1 2\\n1 0 1\\n0 0 0\\n\") == \"impossible\"\n\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n0 1 1\\n1 0 0\") == \"possible\"\n\"\"\""
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\\n\") == \"possible\"\nassert solution(\"1 2\\n1 0 0\\n0 1 0\\n\") == \"impossible\"\n\n\"\"\"\n\nimport math\nfrom collections import deque"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\") == \"possible\"\nassert solution(\"1 2\\n1 0 0\\n0 1 0\") == \"impossible\"\nassert solution(\"1 2\\n0 1 1\\n0 1 0\") == \"impossible\"\nassert solution(\"1 2\\n0 1 0\\n1 1 1\") == \"possible\"\n\nprint('All tests passed.')\n\"\"\""
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '1 2\\n0 1 1\\n1 0 0\\n'\n) == 'possible'\nassert solution(\n    '1 2\\n1 0 1\\n0 1 0\\n'\n) == 'impossible'\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\\n\") == \"possible\"\nassert solution(\"1 2\\n1 0 0\\n0 1 0\\n\") == \"impossible\"\n\n\"\"\"\n\nfrom typing import List\nfrom collections import deque\nfrom collections import defaultdict\nfrom queue import PriorityQueue\n\n\nclass Station:\n    def __init__(self, capacity: int, assigned_people: int, remaining_people: int):\n        self.capacity = capacity\n        self.assigned_people = assigned_people\n        self.remaining_people = remaining_people\n\n    def __str__(self):\n        return f\"capacity: {self.capacity}\\nassigned_people: {self.assigned_people}\\nremaining_people: {self.remaining_people}\"\n\n\nclass Train:\n    def __init__(self, capacity: int, stations: List[Station]):\n        self.capacity = capacity\n        self.stations = stations\n\n    def __str__(self):\n        return f\"capacity: {self.capacity}\\nstations: {self.stations}\"\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\\n\") == \"possible\"\n\"\"\""
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\\n\") == 'possible'\nassert solution(\"1 2\\n0 1 1\\n1 0 1\\n\") == 'impossible'\n\nSample Case 1:\n\"\"\"\nAt the first station there are 2 people left, 1 entered and 1 stayed. At the second station there are 3 people left, 2 entered and 1 stayed. At the third station there are 2 people left, 1 entered and 1 stayed. The number of people left at the last station is $0$.\n\nNow we can rewrite the measurements in such a way that the number of people left at the last station is $0$. This way, we can satisfy the demands at every station and then calculate the number of people that went in and that had to stay in the train at the first and last station.\n\nFrom the point of view of the train, at the first and last station there are $0$ people left and $0$ entered.\n\nNow we know that the number of people left at the last station is $0$. Therefore, at the first and last station there are $0$ people entered.\n\nWe can go on in this way:\n\nAt the first station there are $0$ people left, $0$ entered and $0$ stayed.\nAt the second station there are $1$ people left, $1$ entered and $1$ stayed.\nAt the third station there are $2$ people left, $1$ entered and $0$ stayed.\nAt the last station there are $0$ people left and $0$ entered.\nSo, at the first and last station there are $0$ people entered.\n\nAt the first station there is $0$ stayed and $0$ left.\nAt the second station there is $1$ stayed and $0$ left.\nAt the third station there is $1$ stayed and $1$ left.\nAt the last station there is $0$ stayed and $0$ left.\nSo, the number of people that went in and that had to stay in the train is $0$ + $1$ + $1$ + $0$ = $4$.\n\nAt the first station there is $0$ stayed and $0$ left.\nAt the second station there is $1$ stayed and $1$ left.\nAt the third station there is $2$ stayed and $1$ left.\nAt the last station there is $0$ stayed and $0$ left.\nSo, the number of people that went in and that had to stay in the train is $0$ + $1$ + $2$ + $0$ = $6$.\n\nAt the first station there is $0$ stayed and $0$ left.\nAt the second station there is $1$ stayed and $1$ left.\nAt the third station there is $2$ stayed and $2$ left.\nAt the last station there is $0$ stayed and $0$ left.\nSo, the number of people that went in and that had to stay in the train is $0$ + $1$ + $2$ + $0$ = $6$.\n\nAt the first station there is $0$ stayed and $0$ left.\nAt the second station there is $1$ stayed and $2$ left.\nAt the third station there is $2$ stayed and $2$ left.\nAt the last station there is $0$ stayed and $0$ left.\nSo, the number of people that went in and that had to stay in the train is $0$ + $1$ + $2$ + $0$ = $6$.\n\nThis way, we go from $0$ to $6$ and they are the same.\n\nSo, the number of people that went in and that had to stay in the train is $0$.\n\"\"\""
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n0 1 1\\n1 0 0\\n\") == \"possible\"\nassert solution(\"1 2\\n1 0 0\\n0 1 0\\n\") == \"impossible\"\n\nprint(solution(\"1 2\\n0 1 1\\n1 0 0\\n\"))\n'''\n"
    },
    {
        "number": 4746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2\\n0 1 1\\n1 0 0\\n') == \"possible\"\nassert solution('1 2\\n1 0 0\\n0 1 0\\n') == \"impossible\"\n\"\"\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\n\"\"\""
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1.875\"\nassert solution(\"6 2\") == \"4.25\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1.875\"\nassert solution(\"6 2\") == \"4.25\"\n\nprint('Success')"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''1 1''') == '1'\nassert solution('''2 3''') == '1.875'\nassert solution('''6 2''') == '4.25'\nassert solution('''3 5''') == '1.6'\nassert solution('''4 6''') == '1.6'\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\n\"\"\"\n\nfrom typing import List, Tuple\n\nfrom utils import checkValue\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == '1'\nassert solution('2 3') == '1.875'\nassert solution('6 2') == '4.25'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1\\n') == '1'\n\"\"\"\n\nn, k = map(int, input().split())\nprint(int(n * k / (n + k)))\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"1.875\"\nassert solution(\"6 2\") == \"4.25\"\n\"\"\"\n"
    },
    {
        "number": 4747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1\\n') == '1'\nassert solution('2 3\\n') == '1.875'\nassert solution('6 2\\n') == '4.25'\n\n\"\"\"\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom collections import defaultdict\nimport math\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 0\\n\") == \"0 0\"\nassert solution(\"4 2 7\\n\") == \"1 4\"\nassert solution(\"3 0 0\\n\") == \"1 6\"\nprint(\"Passed.\")\n\n\"\"\"\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n\n\"\"\"\nfrom math import gcd"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(2, 1, 0) == (0, 0)\nassert solution(4, 2, 7) == (1, 4)\nassert solution(3, 0, 0) == (1, 6)\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\nlines = [line.strip() for line in sys.stdin if line.strip()]\n\nH, N, M = list(map(int, lines[0].split()))\n\ncount = defaultdict(int)\n\nfor i in range(1, H + 1):\n    count[i] = 0\n\nfor line in lines[1:]:\n    count[int(line)] += 1\n\nmax_h = max(count.keys())\nmax_c = count[max_h]\n\nprint(max_h, max_c)\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n\"\"\""
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'\nassert solution('2 0 1') == '0 0'\nassert solution('1 1 0') == '0 0'\n\n\"\"\""
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 0\") == \"0 0\"\nassert solution(\"4 2 7\") == \"1 4\"\nassert solution(\"3 0 0\") == \"1 6\"\n\"\"\"\n\nfrom collections import Counter\n\nH, N, M = map(int, input().split())\n\nbricks = Counter(list(map(int, input().split())))\n\nextra_2 = bricks[2] // 2\nextra_4 = bricks[4] // 2\n\nans = extra_2 + extra_4\n\nfor k in range(1, H + 1):\n    extra_2 = bricks[2 * k] // k\n    extra_4 = bricks[4 * k] // k\n\n    if ans <= extra_2 + extra_4:\n        break\n    else:\n        ans = extra_2 + extra_4\n\nprint(ans, ans - extra_2 - extra_4)\n"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''1 1 0''') == '0 0'\nassert solution('''4 2 7''') == '1 4'\nassert solution('''3 0 0''') == '1 6'\nassert solution('''4 4 4''') == '0 0'\n\n-----Notes-----\n\nIn the first sample, the extra bricks required for building a height-$1$ pyramid with no additional bricks is 0. The only possible solution is to use no additional bricks.\n\nIn the second sample, Kim can build a height-$4$ pyramid using one additional $4\\times 2$-brick. She can build the bottom layer of the pyramid using an additional $2\\times 2$-brick. The total number of bricks needed to finish the pyramid is $2+4+4 = 8$. If Kim had $7$ additional $2\\times 2$-bricks, she could build the top layer of the pyramid using an additional $2\\times 2$-brick. The total number of bricks needed to finish the pyramid is $2+4+4+2+2+2 = 16$. The sample output is correct because it uses more extra $2 \\times 2$-bricks.\n\nIn the third sample, Kim can build a height-$3$ pyramid using one additional $4\\times 2$-brick. She can build the bottom layer of the pyramid using an additional $2\\times 2$-brick. The total number of bricks needed to finish the pyramid is $2+4+4 = 8$. If Kim had $7$ additional $2\\times 2$-bricks, she could build the top layer of the pyramid using an additional $2\\times 2$-brick. The total number of bricks needed to finish the pyramid is $2+4+4+2+2+2 = 16$. The sample output is correct because it uses more extra $2 \\times 2$-bricks.\n\nIn the fourth sample, Kim can build a height-$4$ pyramid using no additional $4\\times 2$-bricks. She can build the bottom layer of the pyramid using an additional $2\\times 2$-brick. The total number of bricks needed to finish the pyramid is $2+4+4 = 8$. If Kim had $7$ additional $2\\times 2$-bricks, she could build the top layer of the pyramid using an additional $2\\times 2$-brick. The total number of bricks needed to finish the pyramid is $2+4+4+2+2+2 = 16$. The sample output is correct because it uses more extra $2 \\times 2$-bricks.\n'''\nimport os\nfrom io import StringIO\nfrom unittest import mock"
    },
    {
        "number": 4748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1 0') == '0 0'\nassert solution('4 2 7') == '1 4'\nassert solution('3 0 0') == '1 6'"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\") == \"1\"\n\nassert solution(\"4\\nBWWB\\nBWBB\\nWBBW\\nWBWW\") == \"0\"\n\nassert solution(\"6\\nBWBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nWBBWWB\\nWWBWBB\") == \"0\"\n\nprint('test passed')\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('BWBWBWBW') == '1'\nassert solution('BWBWBWBW') == '1'\nassert solution('BWWBWBW') == '0'\n\n\"\"\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 0\nassert solution('BWBWBW') == 1\nassert solution('BWWBWBWB') == 1\nassert solution('BBWBWWB') == 0\nassert solution('WWWBBWBWW') == 0\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"WWWWWWWWWWWW\") == \"1\"\n\"\"\"\n\nn = int(stdin.readline().strip())\nlst = []\nfor _ in range(n):\n    lst.append(stdin.readline().strip())"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\") == '1'\nassert solution(\"4\\nBWWB\\nWBWB\\nBWWB\\nBWBW\") == '0'\nassert solution(\"6\\nBWBWWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nWBBWBB\\nWWBWBB\") == '0'\n\"\"\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\") == \"1\"\nassert solution(\"6\\nBWWB\\nWBWB\\nWBBW\\nBBWB\\nBWWB\\nWWBW\") == \"0\"\n\"\"\""
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input_1) == test_output_1\nassert solution(test_input_2) == test_output_2\nassert solution(test_input_3) == test_output_3\n\n\"\"\"\nfrom collections import deque\n\nn = int(input())\n\ngrid = []\nfor i in range(n):\n    grid.append(input())"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\nWBBW\\nWBWB\\nBWWB\\nBWBW') == 1\nassert solution('4\\nBWWB\\nWBWB\\nBWWB\\nBWBW') == 0\n\n\"\"\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nWBWB\\nBWBB\\nWBBW\\nBWBW\") == \"1\"\nassert solution(\"6\\nBWWBWB\\nWBWBWB\\nWBBWBW\\nBBWBWW\\nWWBWBB\") == \"0\"\n"
    },
    {
        "number": 4749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\nWBBW\\nWBWB\\nBWWB\\nBWBW\\n\") == \"1\"\nassert solution(\"4\\nWBWWB\\nWBWBW\\nWBBWB\\nBBWBW\\n\") == \"0\"\nassert solution(\"6\\nWBBWWB\\nWBWBWW\\nWBBWBW\\nBBWBWW\\nWBBWBB\\nWWBWBB\\n\") == \"0\"\n\nprint(\"Successfully solved!\")\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n\"\"\"\n\n\"\"\"\n4.2.2: \u041f\u043e\u0434\u0432\u043e\u0440\u043e\u0442 \u0441\u043f\u0438\u0441\u043a\u0430\n\u0414\u0430\u043d\u044b \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 1 \u2264 n \u2264 10^4 \u0438 1 \u2264 m \u2264 10^5, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u0439\u0442\u0438 \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0435\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b n + m \u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0432\u0441\u0435 \u0447\u0435\u0442\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u0438\u043c\u0435\u044e\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u0432\u0430 \u0440\u0430\u0432\u043d\u043e k. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 n = 4 \u0438 m = 5, \u0442\u043e k = 2, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0447\u0435\u0442\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 4, 8, 12 \u0438 16 \u0438\u043c\u0435\u044e\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u0432\u0430 \u0440\u0430\u0432\u043d\u043e 2. \u0412 \u043e\u0442\u0432\u0435\u0442\u0435 \u043d\u0430\u0434\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430: \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0435\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b n + m \u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0432\u0441\u0435 \u0447\u0435\u0442\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u0438\u043c\u0435\u044e\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u0432\u0430 \u0440\u0430\u0432\u043d\u043e k.\n\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0438\u043c\u0435\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c O(n + m), \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435 O(n + m + k).\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n. \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e m.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430: \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0435\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b n + m \u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e k, \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0432\u0441\u0435 \u0447\u0435\u0442\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u0438\u043c\u0435\u044e\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u0432\u0430 \u0440\u0430\u0432\u043d\u043e k.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435\n\n\u0415\u0441\u043b\u0438 \u043d\u0435\u0442 \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0442\u0430\u043a\u043e\u0433\u043e k, \u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 -1.\n\nSample Input 1:\n\n4\n5\n\nSample Output 1:\n\n8 2\n\nSample Input 2:\n\n6\n4\n\nSample Output 2:\n\n-1\n\"\"\"\n\n\"\"\"\n4.2.3: \u0418\u043d\u0434\u0435\u043a\u0441\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n\u0414\u0430\u043d \u043d\u0435\u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043d\u0435\u043f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430, \u0441\u0442\u043e\u044f\u0449\u0435\u0433\u043e \u043d\u0430 \u043d\u0435\u0447\u0435\u0442\u043d\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435. \u0415\u0441\u043b\u0438 \u0442\u0430\u043a\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043d\u0435\u0442, \u0442\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u00ab-1\u00bb.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0435\u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043d\u0435\u043f\u0443\u0441\u0442\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n \u2264 10, \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u043e\u0435 \u0432 \u0434\u0435\u0441\u044f\u0442\u0438\u0447\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0441\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f (\u043d\u0435 \u0441\u0447\u0438\u0442\u0430\u044f \u0437\u0430\u043f\u044f\u0442\u044b\u0445).\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\n\nSample Input 1:\n\n1\n\nSample Output 1:\n\n0\n\nSample Input 2:\n\n3\n\nSample Output 2:\n\n1\n\nSample Input 3:\n\n2\n\nSample Output 3:\n\n1\n\"\"\"\n\n\"\"\"\n4.2.4: \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\\n') == '2 1\\n3 4\\n3 2\\n1 2\\n3 7'\n\"\"\"\nimport sys\nimport collections"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8') == '2 1\\n3 4\\n3 2\\n1 2\\n3 7'\nassert solution('2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8') == '1 2\\n3 4\\n3 2\\n1 2\\n3 7'\nassert solution('2\\n1 2 1 2\\n2 6 3 4') == '2 1\\n3 4\\n3 2'\nassert solution('2\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3') == '2 1\\n3 4\\n3 2'\nassert solution('2\\n1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 4 5 8') == '2 1\\n3 4\\n3 2\\n1 2\\n3 7'\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1 2\") == \"3 4\"\nassert solution(\"2 6 3 4\") == \"3 2\"\nassert solution(\"1 2 1 3\") == \"1 2\"\nassert solution(\"1 4 5 8\") == \"3 7\"\n\"\"\"\n\n\nfrom sys import stdin\nfrom itertools import permutations"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8') == '2 1\\n3 4\\n3 2\\n1 2\\n3 7'\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n\"\"\"\n\nq = int(input())\n\nfor _ in range(q):\n    l1, r1, l2, r2 = map(int, input().split())\n    a, b = [], []\n    for i in range(r1-l1):\n        if l1!= r1:\n            if i % 2 == 0:\n                a.append(l1 + i)\n            else:\n                a.append(r1 - i)\n        if l2!= r2:\n            if i % 2 == 0:\n                b.append(l2 + i)\n            else:\n                b.append(r2 - i)\n\n    a = [str(i) for i in a]\n    b = [str(i) for i in b]\n    print(\" \".join(a))\n    print(\" \".join(b))\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n1 2\\n1 4\\n5 8') == '1 2\\n1 4\\n3 2\\n3 7'"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 2 3\\n3 4 5\\n5 6 7\\n6\\n1 2\") == \"3 4\"\nassert solution(\"3\\n1 2 3\\n3 4 5\\n5 6 7\\n6\\n1 2\") == \"3 2\"\nassert solution(\"3\\n1 2 3\\n3 4 5\\n5 6 7\\n6\\n1 2\") == \"1 2\"\nassert solution(\"3\\n1 2 3\\n3 4 5\\n5 6 7\\n6\\n1 2\") == \"3 7\"\n\n\"\"\""
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\") == '2 1\\n3 4\\n3 2\\n1 2\\n3 7'\n\"\"\"\n"
    },
    {
        "number": 4750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2 1 2\\n2 6 3 4\\n2 4 1 3\\n1 2 1 3\\n1 4 5 8\\n\") == \"2 1\\n3 4\\n3 2\\n1 2\\n3 7\"\n\"\"\""
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"[3,2,0,-4]\\n1\") == True\nassert solution(\"[1,2]\\n0\") == True\nassert solution(\"[1]\\n-1\") == False\nassert solution(\"[]\\n0\") == False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"[3,2,0,-4]\\n1\") == True\nassert solution(\"[1,2]\\n0\") == True\nassert solution(\"[1]\\n-1\") == False\nassert solution(\"[]\\n0\") == False\nassert solution(\"[1]\\n0\") == True\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"[3,2,0,-4]\\n1\") == True\nassert solution(\"[1,2]\\n0\") == True\nassert solution(\"[1]\\n-1\") == False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('[3,2,0,-4]') == True\nassert solution('[1,2]') == True\nassert solution('[1]') == True\nassert solution('[1,2,1]') == True\nassert solution('[1,2,1,3]') == False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('[3,2,0,-4]') == 'true'\nassert solution('[1,2]') == 'true'\nassert solution('[1]') == 'false'\n\"\"\"\n\n\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None:\n            return False\n        slow = fast = head\n        while fast is not None and fast.next is not None:\n            slow = slow.next\n            fast = fast.next.next\n            if fast == slow:\n                return True\n        return False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('[3,2,0,-4]') == True\nassert solution('[1,2]') == True\nassert solution('[1]') == False\nassert solution('[]') == False\nassert solution('[0]') == False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(1) == True\nassert solution(2) == True\nassert solution(0) == True\nassert solution(3) == False\nassert solution(0) == False\n\nn = int(stdin)\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('[3,2,0,-4]') == 'true'\nassert solution('[1,2]') == 'true'\nassert solution('[1]') == 'true'\nassert solution('[]') == 'false'\nassert solution('[1,2,3,4,5]') == 'false'\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('[3,2,0,-4]') == True\nassert solution('[1,2]') == True\nassert solution('[1]') == False\nassert solution('[1,2,3]') == False\nassert solution('[]') == False\n"
    },
    {
        "number": 4751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3,2,0,-4\", 1) == True\nassert solution(\"1,2\", 0) == True\nassert solution(\"1\", -1) == False\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(nums=[2, 7, 11, 15], target=9) == [0, 1]\n\"\"\"\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(solution.test_cases[0]) == solution.test_cases[1]\n\nSolution.main()\n\"\"\""
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(nums = [2, 7, 11, 15], target = 9) == [0, 1]\n'''"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"2 7 11 15\"\"\") == \"\"\"0 1\"\"\"\n\"\"\" \nassert solution(\"\"\"2 2 7 11 15\"\"\") == \"\"\"0 1\"\"\"\nassert solution(\"\"\"2 2 7 11 15\"\"\") == \"\"\"0 1\"\"\"\nassert solution(\"\"\"2 2 7 11 15\"\"\") == \"\"\"0 1\"\"\"\nassert solution(\"\"\"2 2 7 11 15\"\"\") == \"\"\"0 1\"\"\"\n\"\"\" \"\"\""
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(nums=[2, 7, 11, 15]) == [0, 1]\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 3 1 1 7 9') == [2, 1, 4, 5, 7]\nassert solution('5 1 3 2 4 7') == [0, 2, 3, 5, 7]\nassert solution('5 1 4 2 2') == [1, 2, 3, 4]\nassert solution('4 2 3 1 5') == [1, 0, 2, 4]\nassert solution('4 3 2 1 5') == [2, 1, 0, 4]\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(nums = [2, 7, 11, 15], target = 9) == [0, 1]\nassert solution(nums = [3, 2, 4], target = 6) == [1, 2]\nassert solution(nums = [3, 3], target = 6) == [0, 1]\n\nimport numpy as np\n\nclass Solution:\n    def twoSum(self, nums, target):\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if i!= j:\n                    if nums[i] + nums[j] == target:\n                        return [i,j]\n\nsolution = Solution()\nassert solution.twoSum(nums=[2, 7, 11, 15], target=9) == [0, 1]\nassert solution.twoSum(nums=[3, 2, 4], target=6) == [1, 2]\n"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n2\n7\n11\n15\n''') == '0, 1'\n\nassert solution('''\n1\n1\n''') == '0, 1'\n\nassert solution('''\n1\n1\n''') == '1, 1'\n\nassert solution('''\n1\n2\n''') == '1, 2'\n\nassert solution('''\n1\n2\n''') == '1, 2'"
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(nums = [2, 7, 11, 15], target = 9) == [0, 1]\n\"\"\""
    },
    {
        "number": 4752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2,7,11,15\") == '0,1'\n\n\"\"\"\nimport unittest\nfrom typing import List\n\nclass Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        seen = {}\n        for i, num in enumerate(nums):\n            if target - num in seen:\n                return [seen[target - num], i]\n            else:\n                seen[num] = i\n\n\n\nclass testsolution(unittest.TestCase):\n    def test_1(self):\n        solution = Solution()\n        self.assertEqual(solution.twoSum([2,7,11,15], 9), [0,1])\n\n    def test_2(self):\n        solution = Solution()\n        self.assertEqual(solution.twoSum([2, 7, 11, 15], 26), [1, 3])\n\n    def test_3(self):\n        solution = Solution()\n        self.assertEqual(solution.twoSum([2, 7, 11, 15], 4), [1, 2])"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n') == '0'\nassert solution('6\\n') == '1'\nassert solution('4\\n') == '1'\nassert solution('10\\n') == '6'\nassert solution('7\\n') == '2'\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n3\nSample Output 2:\n1\n''') == '1\\n'\nassert solution('''\n4\nSample Output 2:\n1\n''') == '1\\n'\nassert solution('''\n7\n''') == '0\\n'\nassert solution('''\n5\n''') == '1\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n') == '0\\n'\nassert solution('4\\n') == '1\\n'\nassert solution('5\\n') == '2\\n'\n\"\"\""
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n0 0\n0 1\n1 1\n1 1''') == '1'\nassert solution('''4\n0 0\n0 1\n0 2\n0 3\n1 1\n1 1\n2 1\n2 1\n3 1\n3 1''') == '1'\nassert solution('''4\n0 0\n0 1\n0 2\n0 3\n1 1\n1 1\n1 2\n2 1\n2 1\n3 1\n3 2\n3 2\n3 2''') == '0'\nassert solution('''5\n0 0\n0 1\n0 2\n0 3\n0 4\n1 1\n1 1\n1 2\n1 2\n1 3\n2 2\n2 2\n3 3\n3 3\n3 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\") == \"1\"\n\nprint(solution(\"3\"))\n\"\"\"\n\nfrom typing import List\nimport math"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n') == '0'\nassert solution('4\\n') == '1'\n\n\"\"\"\n\n\nfrom collections import defaultdict\nfrom typing import Dict, Tuple\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n\") == '0\\n'\nassert solution(\"4\\n\") == '1\\n'\nassert solution(\"5\\n\") == '5\\n'\n\"\"\""
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('3') == '0'\nassert solution('4') == '1'\nassert solution('1') == ''\nassert solution('2') == '0'\n"
    },
    {
        "number": 4753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n\") == \"0\"\nassert solution(\"4\\n\") == \"1\"\n\"\"\"\nfrom math import comb\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\n\nassert solution('1\\n3 7') == 'impossible'\nassert solution('1\\n7 7') == 'impossible'\nassert solution('1\\n7') == 'impossible'\n\nprint('Success')\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\nassert solution(\"1\\n3 7\") == \"impossible\"\nassert solution(\"4\\n1 1 1 1 1\") == \"impossible\"\nassert solution(\"4\\n1 2 2 2\") == \"2\"\nassert solution(\"10\\n1 2 3 4 5 6 7 8 9 10\") == \"impossible\"\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\nassert solution('3\\n1 2 3') == 'impossible'\nassert solution('1\\n3') == 'impossible'\nassert solution('1\\n1') == 'impossible'\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\nassert solution(\"1\\n3 7\") == \"impossible\"\n\"\"\"\n\nfrom typing import List\nimport sys\n\nclass Solution:\n    def __init__(self, stdin: str) -> None:\n        self.stdin = stdin\n\n    def solution(self) -> str:\n        socks = self.stdin.split(\"\\n\")[0].split()\n        socks = [int(socks[i]) for i in range(len(socks))]\n        piles = len(socks) // 2\n        socks.sort(reverse = True)\n        socks_piles = {}\n        for i in range(0, piles):\n            socks_piles[i] = socks[i]\n        moves = 0\n        i = 0\n        while i < len(socks_piles):\n            moves += 1\n            j = i + 1\n            while j < len(socks_piles):\n                if socks_piles[j] == socks_piles[i]:\n                    del socks_piles[j]\n                    j -= 1\n                j += 1\n            i += 1\n        if len(socks_piles) > 0:\n            return \"impossible\"\n        else:\n            return str(moves)\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n\"\"\""
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 2 2 1\") == \"4\"\nassert solution(\"1\\n3 7\") == \"impossible\"\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n2 2 2 1\") == \"4\"\nassert solution(\"3\\n7\") == \"impossible\"\n\"\"\"\nfrom typing import List\n\nclass Solution:\n    def solve(self, input: List[str]) -> str:\n        n = int(input[0])\n        a = list(map(int, input[1].split()))\n\n        # store the socks in a list\n        socks = []\n        for i in range(0, 2 * n, 2):\n            socks.append([a[i], a[i + 1]])\n\n        # sort the list\n        socks.sort()\n\n        # create two heaps\n        heap_low = []\n        heap_high = []\n\n        # first element is always in heap_low\n        heap_low.append(socks[0][0])\n        heap_high.append(socks[n - 1][1])\n\n        # update heap high\n        for i in range(n - 2, -1, -1):\n            heap_high.append(socks[i][1])\n\n        heap_low.sort()\n        heap_high.sort()\n\n        i = 0\n        j = 0\n        low_i = len(heap_low) - 1\n        high_j = len(heap_high) - 1\n\n        move = 0\n        # while there are still socks to be processed\n        while i <= low_i or j <= high_j:\n            # if i has socks to be processed\n            if i <= low_i:\n                # if j has socks to be processed\n                if j <= high_j:\n                    # if i has the same sock as j\n                    if heap_low[i] == heap_high[j]:\n                        move += 1\n                        heap_low.pop(i)\n                        heap_high.pop(j)\n                        low_i -= 1\n                        high_j -= 1\n                    # if i has a smaller sock than j\n                    elif heap_low[i] < heap_high[j]:\n                        move += 1\n                        heap_high.pop(j)\n                        high_j -= 1\n                    else:\n                        move += 1\n                        heap_low.pop(i)\n                        low_i -= 1\n                else:\n                    move += 1\n                    heap_low.pop(i)\n                    low_i -= 1\n            else:\n                move += 1\n                heap_high.pop(j)\n                high_j -= 1\n\n            # increase both pointers if they are still in bounds\n            if i < low_i:\n                i += 1\n            if j < high_j:\n                j += 1\n\n        if i > low_i or j > high_j:\n            return \"impossible\"\n\n        return str(move)\n"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n1 2 2 1') == '4'\nassert solution('1\\n3 7') == 'impossible'\n\"\"\"\nimport sys"
    },
    {
        "number": 4754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 2 1\") == \"4\"\nassert solution(\"3 7\") == \"impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('184 1') == '180'\nassert solution('123450995 1') == '123451000'\n\"\"\"\nimport sys\n\nc, k = input().split()\nn = int(c)\nn = (n // 10 ** int(k)) * 10 ** int(k)\nprint(n)\nsys.stdout.flush()\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"184 1\") == \"180\"\n\"\"\""
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n\"\"\""
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\n\nprint(solution(\"184 1\"))\nprint(solution(\"123450995 1\"))\n\n\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(s1) == s2\n\"\"\"\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"184 1\\n\") == \"180\"\n\ntry:\n    from nose.tools import assert_equal\n    solution(open(\"test.txt\", \"r\").read())\n\nexcept Exception as e:\n    print(e)\n\nelse:\n    try:\n        assert_equal(solution(\"123450995 1\\n\"), \"123451000\")\n    except Exception as e:\n        print(\"Solution does not work for the sample input.\")"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"184 1\") == \"180\"\nassert solution(\"123450995 1\") == \"123451000\"\nprint(\"Test pass.\")\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('184 1\\n') == '180'\nassert solution('123450995 1\\n') == '123451000'\n\"\"\""
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('11 1') == '10'\nassert solution('11 0') == '10'\nassert solution('1 1') == '0'\nassert solution('11 2') == '100'\nassert solution('11 100') == '1000'\n"
    },
    {
        "number": 4755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"184 1\") == \"180\"\n\nassert solution(\"123450995 1\") == \"123451000\"\n\nassert solution(\"100 1\") == \"100\"\n\nassert solution(\"5 2\") == \"10\"\n\nassert solution(\"4 9\") == \"10\""
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\") == \"0.000000\"\n\nassert solution(\"3\\n0 1\\n1 0\\n1 1\") == \"0.000000\"\n\nassert solution(\"3\\n0 0\\n1 1\\n0 1\") == \"1.000000\"\n\nassert solution(\"3\\n1 1\\n2 2\\n3 3\") == \"0.000000\"\n\nassert solution(\"3\\n0 1\\n0 1\\n1 0\") == \"1.000000\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3\\n') == '0.000000'\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2\\n3 4\\n5 6') == '0.0'\n\"\"\""
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\") == \"0.000000\"\nassert solution(\"1 1\\n2 2\\n3 3\\n0 1\") == \"0.000000\"\nassert solution(\"1 1\\n2 2\\n3 3\\n0 1\\n0 1\") == \"0.000000\"\nassert solution(\"1 1\\n2 2\\n3 3\\n1 1\\n0 1\") == \"0.000000\"\nassert solution(\"1 1\\n2 2\\n3 3\\n1 1\\n0 1\\n0 1\") == \"0.000000\"\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\\n2 2\\n3 3\") == '0.0'\nassert solution(\"1 0\\n1 1\") == '0.0'\nassert solution(\"3 0\\n0 0\\n1 1\") == '0.0'\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1\\n2 2\\n3 3') == '0.000000'\n\"\"\"\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.0'\nassert solution('3\\n0 1\\n1 0\\n1 1') == '0.0'\n\"\"\"\n\n\nfrom sys import stdin\nimport math\n"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1\\n2 2\\n3 3\") == \"0.000000\"\n\n\"\"\""
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n1 1\\n2 2\\n3 3\\n4 4\\n\") == \"0.000000\"\n\"\"\"\n\n\nimport numpy as np\n\nn = int(stdin.readline())\na = np.zeros((n, 2))\nfor i in range(n):\n    a[i] = [int(x) for x in stdin.readline().split()]"
    },
    {
        "number": 4756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1\\n2 2\\n3 3') == '0.0'\nassert solution('3\\n0 1\\n1 0\\n1 1') == '0.0'\n\"\"\"\n\nfrom typing import Any, List\nimport math"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''4\n3\n2 1 2\n3 2 3 4''') == '1 2 4'\n\nassert solution('''8\n5\n4 1 3 5 6\n2 5 6\n3 6 7 8\n2 6 2\n4 2 6 8 1''') == '1 2 6 8'\n\nassert solution('''5\n2\n2 1 2\n4 2 3 5''') == '1 2 3 5'\n\nassert solution('''5\n4\n4 3 2 1\n3 2 3 4\n2 1 2 3\n1 2 2 3''') == '1 2 3 4'\n\nassert solution('''3\n5\n4 2 1 3\n2 1 4\n1 4 3\n''') == '1 2 3'"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3') == '1\\n2\\n3'\nassert solution('2\\n2\\n1\\n2') == '2\\n2\\n1\\n2'\nassert solution('3\\n1\\n1\\n2\\n2\\n2') == '3\\n1\\n2\\n2\\n2\\n2'\nassert solution('1\\n3\\n4\\n5\\n4\\n2\\n1') == '1\\n3\\n4\\n5\\n4\\n2\\n1'\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''4\n3\n2 1 2\n3 2 3 4\n3 4 2 1''') == '''1\n2\n4\n'''\nassert solution('''8\n5\n4 1 3 5 6\n2 5 6\n3 6 7 8\n2 6 2\n4 2 6 8 1''') == '''1\n2\n6\n8\n'''\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\\n3 4 2 1\") == \"1\\n2\\n4\"\n\n-----\n3\n1\n2 1\n3 2 3\nSample Output 2:\n1\n2\n3\n\n-----\n4\n5\n2 1 3 5 6\n2 5 6\n2 5 2\n4 2 6 8 1\nSample Output 2:\n1\n2\n6\n8\n\n-----\n7\n2\n1 4\n2 6 2\n3 4 3\n1 3 2 5\n5 6\n6 7\nSample Output 2:\n1\n2\n3\n4\n5\n6\n7\n\"\"\""
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('4\\n2 1 2 3') == '1 2 4'\nassert solution('8\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1') == '1 2 6 8'\n\"\"\""
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\\n3 4 2 1\") == '1\\n2\\n4'\n\n\"\"\""
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n4\n3\n2 1 2\n3 2 3 4\n3 4 2 1\n''') == '''\n1\n2\n4\n'''\n\nassert solution('''\n8\n5\n4 1 3 5 6\n2 5 6\n3 6 7 8\n2 6 2\n4 2 6 8 1\n''') == '''\n1\n2\n6\n8\n'''\n\nassert solution('''\n2\n1\n1 2\n''') == '''\n1\n2\n'''\n\nassert solution('''\n3\n2\n2 1 2\n3 2 3 4\n3 4 2 1\n''') == '''\n1\n2\n4\n'''\n\nassert solution('''\n3\n2\n2 1 2\n3 2 3 4\n3 4 2 1\n''') == '''\n1\n2\n4\n'''\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(example_input_str) == expected_result_str\nprint(solution(input_str))\n"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3\\n2 1 2\\n3 2 3 4\") == '1 2 4'\nassert solution(\"8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1\") == '1 2 6 8'"
    },
    {
        "number": 4757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n2\\n1 2\\n3 4') == '1\\n2\\n4'\nassert solution('8\\n5\\n4 1 3 5 6\\n2 5 6\\n3 6 7 8\\n2 6 2\\n4 2 6 8 1') == '1\\n2\\n6\\n8'\nassert solution('6\\n2\\n1 3\\n3 1 4\\n4 3\\n5 2\\n5 4') == '2\\n4'\nassert solution('5\\n2\\n1 2\\n3 4\\n5 2\\n4 2') == '1\\n2'\n\nprint(\"Successfully passed all tests!\")\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\n\"\"\""
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\nprint('Correctness verified')\n\n----\n\n\nfrom math import factorial\nfrom itertools import product\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\n\"\"\""
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\nassert solution(\"2 2 1\") == \"4\"\n\"\"\"\n\nN, T, M = [int(c) for c in input().split()]\nprint(N * T * M)\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4 5\") == \"60\"\n\nassert solution(\"2 2 2\") == \"8\""
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4 5') == '60'\nassert solution('2 2 2') == '8'\nassert solution('3 3 3') == '24'\n\"\"\""
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 4 5\") == \"60\"\n\"\"\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\n\"\"\"\n"
    },
    {
        "number": 4758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 4 5\") == \"60\"\nassert solution(\"2 2 2\") == \"8\"\n\"\"\"\n\nimport math\n\nN, T, M = [int(n) for n in input().split()]\n\nn_eye = N + T\nn_mouth = N + M\nn_stick = N + T + M\n\nprint(math.comb(n_eye + n_mouth + n_stick, n_eye))"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 0 2\") == 1.66666\nassert solution(\"3 -1 4\") == 2.5\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n3 0 2\") == \"1.66666667\"\nassert solution(\"3\\n1 -1 4\") == \"2.5\"\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3 1 2\") == \"2.5\"\nassert solution(\"3 -1 4\") == \"2.5\"\n\nprint(solution(input()))"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3 0 2\") == \"1.6666666666666667\"\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 0 2\") == 1.6666666666666667\nassert solution(\"3 1 2\") == 2.5\nprint('Success')\n\n-----\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 0 2\\n3 0 2') == '1.6666666666666667'\nassert solution('3 -1 4\\n3 -1 4') == '2.5'\n\n\"\"\""
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 0 2\") == \"1.6666666666666667\"\nassert solution(\"3 -1 4\") == \"2.5\"\n\nprint(solution(\"3 0 2\"))\nprint(solution(\"3 -1 4\"))"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 0 2\") == \"1.6666666666666667\"\nassert solution(\"3\\n1 -1 4\") == \"2.5\"\n\nprint(solution(\"3\\n0 0 2\"))\nprint(solution(\"3\\n1 -1 4\"))\n\n\"\"\""
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 0 2\") == 1.6666666666666667\nassert solution(\"3 -1 4\") == 2.5\n\n\"\"\"\n"
    },
    {
        "number": 4759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n3 0 2\\n\") == \"1.6666666666666667\"\nassert solution(\"3\\n0 0 0\\n\") == \"2.0\"\nassert solution(\"3\\n1 -1 4\\n\") == \"2.5\"\nassert solution(\"3\\n5 5 5\\n\") == \"1.0\"\n\n\"\"\"\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3\") == \"6\"\n\"\"\""
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n\"\"\"\n\nfrom math import sqrt\n\nN, K = map(int, input().split())\n\nsq = int(sqrt(N))\nprime_list = []\ncrossed_out = []\nfor i in range(2, sq + 1):\n    if i in crossed_out:\n        continue\n    for j in range(i * i, sq + 1, i):\n        crossed_out.append(j)\n    prime_list.append(i)\n\nprint(prime_list[K - 1])\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 3\") == \"6\"\nassert solution(\"15 12\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('7 3\\n1 2 3 4 5 6 7') == '6'\n\"\"\"\n\nfrom math import ceil\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('0 0') == ''\nassert solution('1 2') == ''\nassert solution('1 2\\n0 1') == '0'\nassert solution('0 1\\n0 1') == '0'\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n\"\"\"\n\nfrom math import sqrt\n\nn, k = map(int, stdin.readline().split())"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''7 3''') == '''6'''\nassert solution('''15 12''') == '''7'''\n\"\"\"\n\nfrom math import sqrt\nfrom sys import stdin"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3\") == \"6\"\nassert solution(\"15 12\") == \"7\"\n"
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n\"\"\""
    },
    {
        "number": 4760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3') == '6'\nassert solution('15 12') == '7'\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('123864 123865') == '1'\nassert solution('198765 198769') == '0'\n\"\"\"\n\nL, H = [int(i) for i in stdin.split()]\n\ncount = 0\nfor x in range(L, H+1):\n    if x % 1 == 0 and x % 2 == 0 and x % 3 == 0 and x % 4 == 0 and x % 5 == 0 and x % 6 == 0:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\""
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('123864 123865') == '1'\nassert solution('198765 198769') == '0'\n\"\"\""
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\nassert solution(\"123456 123457\") == \"0\"\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"123864 123865\") == \"1\"\nassert solution(\"198765 198769\") == \"0\"\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123864 123865\") == 1\nassert solution(\"198765 198769\") == 0\n\"\"\"\n\nfrom sys import stdin, stdout\n\nstdin = stdin.readlines()\nL, H = [int(i) for i in stdin[0].split()]\n\nn = 0\nfor i in range(L, H+1):\n    divisor = [1]\n    for j in range(2, 7):\n        if i % j == 0:\n            divisor.append(j)\n    if all(map(lambda x: x == len(divisor), divisor)):\n        n += 1\n\nstdout.write(str(n))\n"
    },
    {
        "number": 4761,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('123864 123865') == '1'\nassert solution('198765 198769') == '0'\n\"\"\""
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"2\\n\"\n) == \"0.5\"\n\nassert solution(\n\"3\\n\"\n) == \"0.66666667\"\n\nassert solution(\n\"10\\n\"\n) == \"0.16666667\"\n\nassert solution(\n\"1000\\n\"\n) == \"0.16666667\"\n\nassert solution(\n\"10000\\n\"\n) == \"0.16666667\""
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n\") == \"0.5\"\nassert solution(\"3\\n\") == \"0.66666667\"\n\"\"\""
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2') == 0.5\nassert solution('3') == 0.66666667"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n1') == '0.50000000'\nassert solution('3\\n1') == '0.66666667'\n'''\n\nimport unittest\nimport random\nimport math\nimport numpy as np"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('1\\n') == '0'\nassert solution('2\\n') == '1/3'\nassert solution('3\\n') == '2/3'\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n') == '0.50000000'\nassert solution('3\\n') == '0.66666667'\nassert solution('1\\n') == '0.0'\n\nprint(solution(input()))\n\"\"\"\n\nN = int(input())\n\np = 1 / N\np1 = 1 - p\nprint(p1)\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n') == '0.5'\n\"\"\""
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == '0.41666667'\nassert solution('12') == '0.41666667'\nassert solution('13') == '0.5'\nassert solution('10') == '0.1'\n\"\"\""
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n') == '0.5'\n\"\"\"\n\nfrom itertools import combinations\n"
    },
    {
        "number": 4762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n\") == \"0.5\"\nassert solution(\"3\\n\") == \"0.66666667\"\n\nprint(solution(stdin.strip()))\n\n\"\"\"\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"180\") == \"triple 20\\ntriple 20\\ntriple 20\"\nassert solution(\"96\") == \"triple 19\\ndouble 15\\nsingle 9\"\n\nprint(solution(\"180\"))\nprint(solution(\"96\"))\n\"\"\"\n\nimport math\n\n\"\"\"\nFrom the input, we know that there are at most three throws.\nFrom the input, we also know that the double area is between 1 and 20 inclusive.\nFrom the input, we know that the triple area is between 1 and 20 inclusive.\nTherefore, the range of the answer can be between 1 and 80.\n\"\"\"\n\"\"\"\nFirst we check if the target score is possible. \nIn a game of darts, a player throws darts at a target board consisting of 20 different sections labelled from $1$ to $20$. When the dart hits a section that has a double area, the player scores $2$ points. \nWhen the dart hits a section that has a triple area, the player scores $3$ points. \nWhen the dart hits a section that has a double and a triple area, the player scores $6$ points. \nWhen throwing three darts, the player can therefore score a total of $180$ points by throwing all three darts in the triple area of section $20$.\n\"\"\"\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\nassert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\nassert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"180\") == \"triple 20\\ntriple 20\\ntriple 20\"\nassert solution(\"96\") == \"triple 19\\ndouble 15\\nsingle 9\"\n\n\"\"\""
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\nassert solution('1') == 'impossible'\nassert solution('11') == 'impossible'\nassert solution('21') == 'impossible'\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"180\") == \"triple 20\"\n\"\"\"\n\n\"\"\"\nIf the target score can be achieved, output at most three lines, each of the form \u201csingle $d$\u201d, \u201cdouble $d$\u201d, or \u201ctriple $d$\u201d, where $d$ is an integer between $1$ and $20$ (inclusive), such that the sum of these scores is equal to $n$. Otherwise, output \u201cimpossible\u201d. If there are multiple valid answers you may output any of them.\n\"\"\"\n\nn = int(stdin.readline().strip())\nd_to_n = {1: 20, 2: 19, 3: 18}\n\nfor d in range(1, 4):\n    s = d_to_n[d]\n    if n % s == 0:\n        print(f\"triple {s}\")\n    elif n % s == 1:\n        if s + 1 <= n:\n            print(f\"double {s + 1}\")\n        else:\n            print(\"impossible\")\n            break\n    else:\n        print(\"impossible\")\n        break\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"180\") == \"triple 20\\ntriple 20\\ntriple 20\"\nassert solution(\"96\") == \"triple 19\\ndouble 15\\nsingle 9\""
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('180') == 'triple 20\\ntriple 20\\ntriple 20'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"180\") == \"triple 20\\ntriple 20\\ntriple 20\"\nassert solution(\"96\") == \"triple 19\\ndouble 15\\nsingle 9\"\n\"\"\"\n"
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('180') == 'impossible'\nassert solution('96') == 'triple 19\\ndouble 15\\nsingle 9'\n\"\"\""
    },
    {
        "number": 4763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"180\") == \"triple 20\\ntriple 20\\ntriple 20\"\nassert solution(\"96\") == \"triple 19\\ndouble 15\\nsingle 9\"\n\"\"\"\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\n\n\"\"\"\n\n\"\"\"\nThe solution is to calculate the largest of the two pieces of cake using the formula\n\narea = (width * height) / 2\n\nIf the first cut is vertical, then the width is 2*h and the height is 2*v.\nIf the first cut is horizontal, then the width is 2*v and the height is 2*h.\n\nThe second cut is always vertical, since it can only cut into the first one. The height of the second cut is h + v, and the width is 2*h.\n\"\"\""
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(5, 2, 2) == 36\nprint(solution(5, 2, 2))\n\n----\n\nGiven the lengths of the sides of a square cake, the program should output the volume of the largest of four pieces of cake after the horizontal and vertical cuts have been made.\n\nFor each cake, the user provides the length of one of the cake sides. The input data should be provided in the form of space-separated values within a single line.\n\nSample Input 1:\n4 6 5\nSample Output 1:\n48\n\nSample Input 2:\n2 5 3\nSample Output 2:\n12\n\nSample Input 3:\n6 5 4\nSample Output 3:\n24\n\nSample Input 4:\n2 5 3\nSample Output 4:\n24\n\n----\n\nGiven two integers $n$ and $m$ (1\u2009\u2264\u2009$n$,\u2009$m$\u2009\u2264\u200910), the program should output a single line containing the integer value of the area of the right triangle with sides of length $n$ and $m$.\n\nNote that the area of the triangle can be obtained by the multiplication of the two sides.\n\n-----\n\nSample Input 1:\n3 4\nSample Output 1:\n12\n\nSample Input 2:\n3 5\nSample Output 2:\n15\n\nSample Input 3:\n4 3\nSample Output 3:\n12\n\nSample Input 4:\n3 2\nSample Output 4:\n6\n\nSample Input 5:\n2 1\nSample Output 5:\n2\n\n----\n\nGiven two integers $n$ and $m$ (1\u2009\u2264\u2009$n$,\u2009$m$\u2009\u2264\u2009100), the program should output a single line containing the integer value of the area of the right triangle with sides of length $n$ and $m$.\n\nNote that the area of the triangle can be obtained by the multiplication of the two sides.\n\n-----\n\nSample Input 1:\n3 4\nSample Output 1:\n12\n\nSample Input 2:\n2 1\nSample Output 2:\n2\n\nSample Input 3:\n3 4\nSample Output 3:\n12\n\nSample Input 4:\n4 3\nSample Output 4:\n12\n\nSample Input 5:\n10 9\nSample Output 5:\n45\n\nSample Input 6:\n5 10\nSample Output 6:\n50\n\nSample Input 7:\n5 11\nSample Output 7:\n55\n\nSample Input 8:\n4 9\nSample Output 8:\n36\n\nSample Input 9:\n3 7\nSample Output 9:\n42\n\nSample Input 10:\n3 11\nSample Output 10:\n55\n\nSample Input 11:\n5 13\nSample Output 11:\n68\n\nSample Input 12:\n7 15\nSample Output 12:\n84\n\n----\n\nGiven two integers $n$ and $m$ (1\u2009\u2264\u2009$n$,\u2009$m$\u2009\u2264\u2009100), the program should output a single line containing the integer value of the area of the right triangle with sides of length $n$ and $m$.\n\nNote that the area of the triangle can be obtained by the multiplication of the two sides.\n\n-----\n\nSample Input 1:\n3 4\nSample Output 1:\n12\n\nSample Input 2:\n2 1\nSample Output 2:\n2\n\nSample Input 3:\n3 4\nSample Output 3:\n12\n\nSample Input 4:\n4 3\nSample Output 4:\n12\n\nSample Input 5:\n5 10\nSample Output 5:\n50\n\nSample Input 6:\n5 11\nSample Output 6:\n55\n\nSample Input 7:\n4 9\nSample Output 7:\n36\n\nSample Input 8:\n7 15\nSample Output 8:\n84\n\nSample Input 9:\n7 16\nSample Output 9:\n112\n\nSample Input 10:\n5 13\nSample Output 10:\n68\n\nSample Input 11:\n5 14\nSample Output 11:\n84\n\nSample Input 12:\n8 18\nSample Output 12:\n128\n\nSample Input 13:\n7 19\nSample Output 13:\n175\n\nSample Input 14:\n6 20\nSample Output 14:\n120\n\nSample Input 15:\n11 22\nSample Output 15:\n132\n\nSample Input 16:\n12 24\nSample Output 16:\n208\n\nSample Input 17:\n13 25\nSample Output 17:\n230\n\nSample Input 18:\n14 26\nSample Output 18:\n260\n\nSample Input 19:\n15 27\nSample Output 19:\n290\n\nSample Input 20:\n16 28\nSample Output 20:\n320\n\nSample Input 21:\n17 29\nSample Output 21:\n342\n\nSample Input 22:\n18 30\nSample Output 22:\n420\n\nSample Input 23:\n19 31\nSample Output 23:\n490\n\nSample Input 24:\n20 32\nSample Output 24:\n560\n\nSample Input 25:\n21 33\nSample Output 25:\n650\n\n----\n\nGiven two integers $n$ and $m$ (1\u2009\u2264\u2009$n$,\u2009$m$\u2009\u2264\u2009100), the program should output a single line containing the integer value of the area of the right triangle with sides of length $n$ and $m$.\n\nNote that the area of the triangle can be obtained by the multiplication of the two sides.\n\n-----\n\nSample Input 1:\n3 4\nSample Output 1:\n12\n\nSample Input 2:\n2 1\nSample Output 2:\n2\n\nSample Input 3:\n3 4\nSample Output 3:\n12\n\nSample Input 4:\n4 3\nSample Output 4:\n12\n\nSample Input 5:\n5 10\nSample Output 5:\n50\n\nSample Input 6:\n5 11\nSample Output 6:\n55\n\nSample Input 7:\n4 9\nSample Output 7:\n36\n\nSample Input 8:\n7 15\nSample Output 8:\n84\n\nSample Input 9:\n7 16\nSample Output 9:\n112\n\nSample Input 10:\n5 13\nSample Output 10:\n68\n\nSample Input 11:\n5 14\nSample Output 11:\n84\n\nSample Input 12:\n8 18\nSample Output 12:\n128\n\nSample Input 13:\n7 19\nSample Output 13:\n175\n\nSample Input 14:\n6 20\nSample Output 14:\n120\n\nSample Input 15:\n11 22\nSample Output 15:\n132\n\nSample Input 16:\n12 24\nSample Output 16:\n208\n\nSample Input 17:\n13 25\nSample Output 17:\n230\n\nSample Input 18:\n14 26\nSample Output 18:\n260\n\nSample Input 19:\n15 27\nSample Output 19:\n290\n\nSample Input 20:\n16 28\nSample Output 20:\n320\n\nSample Input 21:\n17 29\nSample Output 21:\n342\n\nSample Input 22:\n18 30\nSample Output 22:\n420\n\nSample Input 23:\n19 31\nSample Output 23:\n490\n\nSample Input 24:\n20 32\nSample Output 24:\n560\n\nSample Input 25:\n21 33\nSample Output 25:\n650\n\n----\n\nGiven two integers $n$ and $m$ (1\u2009\u2264\u2009$n$,\u2009$m$\u2009\u2264\u2009100), the program should output a single line containing the integer value of the area of the right triangle with sides of length $n$ and $m$.\n\nNote that the area of the triangle can be obtained by the multiplication of the two sides.\n\n-----\n\nSample Input 1:\n3 4\nSample Output 1:\n12\n\nSample Input 2:"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 4 7') == '168'\n\"\"\""
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 2') == 36\nassert solution('10 4 7') == 168"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 4 7''') == '168'\nassert solution('''10 4 7''') == '288'\nassert solution('''5 2 2''') == '36'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 4 7') == '168'\nassert solution('5 2 2') == '36'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 4 7\") == \"168\"\nassert solution(\"5 2 2\") == \"36\"\nassert solution(\"10 10 10\") == \"0\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 4 7\") == \"168\"\n\nassert solution(\"5 2 2\") == \"36\"\nprint('Success')\n\"\"\"\n\n\"\"\"\nSample Input 1:\n10 4 7\n\nSample Output 1:\n168\n\nSample Input 2:\n5 2 2\n\nSample Output 2:\n36\n\nSample Input 3:\n10 20 7\n\nSample Output 3:\n184\n\nSample Input 4:\n15 20 7\n\nSample Output 4:\n200\n\nSample Input 5:\n5 20 3\n\nSample Output 5:\n51\n\"\"\""
    },
    {
        "number": 4764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''10 4 7''') == '''168'''\nprint(solution('''10 4 7'''))\nassert solution('''5 2 2''') == '''36'''\nprint(solution('''5 2 2'''))\nassert solution('''4 4 4''') == '''16'''\nprint(solution('''4 4 4'''))\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n3 10') == '7'\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n3 8\\n5 8\") == \"1\"\n\"\"\""
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10\\n3 8\\n5 8\") == 1\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10\") == \"7\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nsour_bitter = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\n\nsour_bitter.sort()\n\nsour = [s[0] for s in sour_bitter]\nbitter = [s[1] for s in sour_bitter]"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n3 10\\n5 9\\n6 8\") == \"3\"\n\"\"\"\n\n\nfrom itertools import combinations\nimport sys\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n3 10') == '7'\nassert solution('2\\n3 8') == '1'\n\"\"\"\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 2 3 4\") == \"1\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 10\\n3 8\\n5 8') == '1'\nassert solution('1\\n3 10') == '7'\nassert solution('2\\n3 8') == '1'\nassert solution('3\\n3 8') == '0'\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n3 1\\n2 2\\n1 1\") == \"1\"\nassert solution(\"2\\n3 8\\n5 8\") == \"1\"\nassert solution(\"1\\n3 10\") == \"7\"\n\"\"\"\n\nimport sys\nfrom typing import List\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\n"
    },
    {
        "number": 4765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10\\n3 8\\n5 8\") == \"1\"\nassert solution(\"2\\n1 1\\n2 2\") == \"0\"\n\"\"\"\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\nSimon says smile.\\n') =='smile.\\n'\nassert solution('2\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n') =='raise your right hand.\\n'\nassert solution('3\\nSimon says smile.\\n') == ''\n\n'''\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\nSimon says smile.\\nSimon says smile.\") == \"smile.\"\nassert solution(\"2\\nSimon says raise your right hand.\\nSimon says raise your left hand.\\nSimon says raise your right hand.\\nSimon says raise your left hand.\") == \"raise your right hand.\"\nassert solution(\"3\\nSimon says raise your left hand.\\nSimon says raise your right hand.\\nSimon says raise your left hand.\\nSimon says raise your right hand.\") == \"raise your left hand.\"\n\nprint('Successfully solved knapsack problem.')\n"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1\\nSimon says smile.\\n') =='smile.\\n'\nassert solution('2\\nSimon says raise your right hand.\\n'\n         'Lower your right hand.\\n'\n         'Simon says raise your left hand.\\n') =='raise your right hand.\\n' \\\n    +'raise your left hand.\\n'\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"1\nSimon says smile.\n\"\"\") == \" smile.\\n\"\nassert solution(\"\"\"3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\"\"\") == \"\"\" raise your right hand.\n raise your left hand.\n\"\"\""
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n1\nSimon says smile.\n\"\"\") == \"\"\"\n smile.\n\"\"\"\nprint(\"Test 1:\", solution(\"\"\"\n1\nSimon says smile.\n\"\"\"))\n\nassert solution(\"\"\"\n2\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\"\"\") == \"\"\"\n raise your right hand.\n raise your left hand.\n\"\"\"\nprint(\"Test 2:\", solution(\"\"\"\n2\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\"\"\"))\n\n\"\"\"\nINPUT:\n5\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon says smile.\nSimon"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\nSimon says smile.\\nSimon says raise your right hand.\\nSimon says raise your left hand.\\n\") =='smile.\\nraise your left hand.\\nraise your right hand.'\nassert solution(\"3\\nSimon says smile.\\nSimon says raise your left hand.\\nSimon says raise your right hand.\\n\") =='smile.\\nraise your right hand.\\nraise your left hand.'"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\nSimon says smile.\\n\") == \"smile.\"\nassert solution(\"2\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n\") == \"raise your right hand.\\nraise your left hand.\"\n-----Problem-----\nThe challenge is to create a program to play the game Simon Says.\n\nInput\nThe first line of the input is an integer $1 \\le N \\le 1000$, the number of commands. The next $N$ lines contain the commands. Each command is a sequence of one or more words. Each word uses only lower and uppercase characters a\u2013z. Each pair of words is separated by a single space. The command ends in a period.\n\nOutput\nThe output should contain one line for each command that begins with \u201cSimon says\u201d. The line should contain the rest of the command. If the command does not begin with \u201cSimon says\u201d, the line should be ignored.\n\nSample Input\n3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\nSample Output\nraise your right hand.\nraise your left hand.\"\"\""
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\nSimon says smile.\\n') =='smile.\\n'\nassert solution('3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n') =='raise your right hand.\\n raise your left hand.\\n'\nassert solution('2\\nSimon says raise your right hand.\\nLower your right hand.\\n') == ''\nassert solution('1\\nSimon says smile.\\n') =='smile.\\n'\n\n----------------------------------------\n\nInput:\n4\nHi\nHi\nHi\nHi\nHi\nHi\nHi\nHi\nHi\nHi\nHi\nHi\nHi\nHi\nHi\nHi\nSimon says say hi.\nHi\nHi\nHi\nHi\nHi\nHi\nHi\nHi\nSimon says say hi again.\nHi\nHi\nHi\nHi\nSimon says stop saying hi.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says stop saying hi.\nSimon says say hi.\nSimon says say hi again.\nSimon says say hi.\nHi\nSimon says stop saying hi.\nHi\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says stop saying hi.\nSimon says say hi.\nSimon says say hi again.\nSimon says say hi.\nHi\nSimon says say hi.\nHi\nSimon says stop saying hi.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi.\nSimon says say hi.\nSimon says stop saying hi.\nSimon says say hi again.\nSimon says stop saying hi.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi.\nSimon says say hi.\nSimon says stop saying hi.\nSimon says say hi again.\nSimon says stop saying hi.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says say hi again.\nSimon says stop saying hi again.\nSimon says"
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\nSimon says smile.\\n\") == \" smile.\"\nassert solution(\"3\\nSimon says raise your right hand.\\nLower your right hand.\\nSimon says raise your left hand.\\n\") == \" raise your right hand.\\n\"\n\"\"\""
    },
    {
        "number": 4766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"1\nSimon says smile.\n\"\"\") == \" smile.\"\n\nassert solution(\"\"\"3\nSimon says raise your right hand.\nLower your right hand.\nSimon says raise your left hand.\n\"\"\") == \" raise your right hand.\\n raise your left hand.\"\n\n\"\"\"\nSolution Explanation\n\nWhat do we know?\n\nWe have a fixed number of inputs, N\n\nWe have a fixed length for each input, M\n\nWe have a fixed number of commands, N\n\nWe have a fixed length for each command, M\n\nThis means that our input string can be broken down into a fixed number of chunks, each chunk comprised of M characters.\n\nIf we can assume that our input string will be \"clean\" (that is, it will not contain any extra spaces, tabs, etc), we can say that the first chunk of M characters in the first input string is always the string \"Simon says\", followed by a space.\n\nWhat do we need to do?\n\nWe need to create a function that takes in an input string of length M.\n\nWe need to create a function that takes in an input string of length M.\n\nWhat do we need to do first?\n\nThe first chunk of M characters is always \"Simon says\".\n\nWhat do we need to do next?\n\nWe need to create a function that takes in an input string of length M.\n\nWe need to create a function that takes in an input string of length M.\n\nWhat do we need to do first?\n\nThe first chunk of M characters is always \"Simon says\".\n\nWhat do we need to do next?\n\nWe need to create a function that takes in an input string of length M.\n\nWhat do we need to do first?\n\nThe first chunk of M characters is always \"Simon says\".\n\nWhat do we need to do next?\n\nWe need to create a function that takes in an input string of length M.\n\nWe need to create a function that takes in an input string of length M.\n\nWhat do we need to do first?\n\nThe first chunk of M characters is always \"Simon says\".\n\nWhat do we need to do next?\n\nWe need to create a function that takes in an input string of length M.\n\nWhat do we need to do first?\n\nThe first chunk of M characters is always \"Simon says\".\n\nWhat do we need to do next?\n\nWe need to create a function that takes in an input string of length M.\n\nWe need to create a function that takes in an input string of length M.\n\nWhat do we need to do first?\n\nThe first chunk of M characters is always \"Simon says\".\n\nWhat do we need to do next?\n\nWe need to create a function that takes in an input string of length M.\n\nWhat do we need to do first?\n\nThe first chunk of M characters is always \"Simon says\".\n\nWhat do we need to do next?\n\nWe need to create a function that takes in an input string of length M.\n\nWhat do we need to do first?\n\nThe first chunk of M characters is always \"Simon says\".\n\nWhat do we need to do next?\n\nWe need to create a function that takes in an input string of length M.\n\nWhat do we need to do first?\n\nThe first chunk of M characters is always \"Simon says\".\n\nWhat do we need to do next?\n\nWe need to create a function that takes in an input string of length M.\n\nWhat do we need to do first?\n\nThe first chunk of M characters is always \"Simon says\".\n\nWhat do we need to do next?\n\nWe need to create a function that takes in an input string of length M.\n\nWhat do we need to do first?\n\nThe first chunk of M characters is always \"Simon says\".\n\nWhat do we need to do next?\n\nWe need to create a function that takes in an input string of length M.\n\nWhat do we need to do first?\n\nThe first chunk of M characters is always \"Simon says\".\n\nWhat do we need to do next?\n\nWe need to create a function that takes in an input string of length M.\n\nWhat do we need to do first?\n\nThe first chunk of M characters is always \"Simon says\".\n\nWhat do we need to do next?\n\nWe need to create a function that takes in an input string of length M.\n\nWhat do we need to do first?\n\nThe first chunk of M characters is always \"Simon says\".\n\nWhat do we need to do next?\n\nWe need to create a function that takes in an input string of length M.\n\nWhat do we need to do first?\n\nThe first chunk of M characters is always \"Simon says\".\n\nWhat do we need to do next?\n\nWe need to create a function that takes in an input string of length M.\n\nWhat do we need to do first?\n\nThe first chunk of M characters is always \"Simon says\".\n\nWhat do we need to do next?\n\nWe need to create a function that takes in an input string of length M.\n\nWhat do we need to do first?\n\nThe first chunk of M characters is always \"Simon says\".\n\nWhat do we need to do next?\n\nWe need to create a function that takes in an input string of length M.\n\nWhat do we need to do first?\n\nThe first chunk of M characters is always \"Simon says\".\n\nWhat do we need to do next?\n\nWe need to create a function that takes in an input string of length M.\n\nWhat do we need to do first?\n\nThe first chunk of M characters is always \"Simon says\".\n\nWhat do we need to do next?\n\nWe need to create a function that takes in an input string of length M.\n\nWhat do we need to do first?\n\nThe first chunk of M characters is always \"Simon says\".\n\nWhat do we need to do next?\n\nWe need to create a function that takes in an input string of length M.\n\nWhat do we need to do first?\n\nThe first chunk of M characters is always \"Simon says\".\n\nWhat do we need to do next?\n\nWe need to create a function that takes in an input string of length M.\n\nWhat do we need to do first?\n\nThe first chunk of M characters is always \"Simon says\".\n\nWhat do we need to do next?"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\""
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 4 6 10 12 16 18\") == \"5\"\n\"\"\""
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\"\"\"\n\nstdin = input()\n\nvalues = [int(n) for n in stdin.split(' ')]\n\nprint(values)\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 0 4 6 10 12 16 18') == '5'\nassert solution('1 2 4 6 10 12 16 18') == '0'\n\"\"\""
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\n\"\"\"\n\nfrom typing import List\n\nfrom collections import deque"
    },
    {
        "number": 4767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 0 4 6 10 12 16 18\") == \"5\"\nassert solution(\"1 2 4 6 10 12 16 18\") == \"0\"\nassert solution(\"1 2 1 1 1 2 3 3 4 3\") == \"10\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\nAA\\nAC\") == \"2 1\\n0 1\"\nassert solution(\"4 3\\nGGACGT\\nGGACGA\\nGGACGC\\nGGACGG\") == \"3\\n0 1\\n0 2\\n1 3\\n2 3\"\nassert solution(\"5 3\\nCAGCACGT\\nCAGCACGA\\nCAGCACGC\\nCAGCACGG\\nCAGCACGT\") == \"3\\n0 1\\n1 2\\n2 3\\n3 4\\n0 4\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_input_1) == test_output_1\nprint(\"Test 1: \", solution(test_input_1))\nassert solution(test_input_2) == test_output_2\nprint(\"Test 2: \", solution(test_input_2))\nassert solution(test_input_3) == test_output_3\nprint(\"Test 3: \", solution(test_input_3))\nassert solution(test_input_4) == test_output_4\nprint(\"Test 4: \", solution(test_input_4))\nassert solution(test_input_5) == test_output_5\nprint(\"Test 5: \", solution(test_input_5))\n\"\"\"\n\ntest_input_1 = \"\"\"4 2\nAA\nAT\nTT\nTC\"\"\"\n\ntest_output_1 = \"\"\"3\"\"\"\n\ntest_input_2 = \"\"\"4 1\nA\nA\nG\nT\"\"\"\n\ntest_output_2 = \"\"\"2\n0 1\n0 2\n0 3\"\"\"\n\ntest_input_3 = \"\"\"4 1\nAG\nAA\nTT\nTC\"\"\"\n\ntest_output_3 = \"\"\"2\n0 1\n0 2\n0 3\"\"\"\n\ntest_input_4 = \"\"\"4 1\nAG\nAT\nTT\nTC\"\"\"\n\ntest_output_4 = \"\"\"2\n0 1\n0 2\n0 3\"\"\"\n\ntest_input_5 = \"\"\"4 1\nAG\nAA\nTT\nAC\"\"\"\n\ntest_output_5 = \"\"\"2\n0 1\n0 2\"\"\"\n\ntest_input_6 = \"\"\"3 1\nAC\nAG\nAA\"\"\"\n\ntest_output_6 = \"\"\"2\n0 1\n0 2\"\"\""
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == 3\n\"\"\"\n\n\n\nimport math\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == \"3\\n0 1\\n0 2\\n0 3\"\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == \"2\\n0 1\\n0 2\"\n\"\"\"\n\n\"\"\"\nimport sys\nfrom typing import List, Set, Dict\n\nclass Graph:\n    def __init__(self, num_vertices: int):\n        self.num_vertices = num_vertices\n        self.edges: Set[Set[int]] = [set() for _ in range(num_vertices)]\n        self.weights: List[int] = [0 for _ in range(num_vertices)]\n\n    def add_edge(self, u: int, v: int, weight: int):\n        self.edges[u].add(v)\n        self.edges[v].add(u)\n        self.weights[u] += weight\n        self.weights[v] += weight\n\n    def __str__(self) -> str:\n        return f\"{self.num_vertices}\\n\" + \"\\n\".join(f\"{u} {v} {weight}\" for u, v, weight in zip(range(self.num_vertices), range(self.num_vertices), self.weights))"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC\\n') == 3\n\nassert solution('4 1\\nA\\nA\\nG\\nT\\n') == 2\nassert solution('4 1\\nATG\\nGGC\\nTCA\\nAGT\\n') == 3\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == 3\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == 2\n\nSample Output:\n3\n0 1\n0 2\n0 3\n\nassert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == 3\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == 2\n\nSample Input 2:\n4 2\nAA\nAT\nTT\nTC\nSample Output 2:\n3\n0 1\n1 2\n2 3\n\nassert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == 3\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == 3\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == 2\n\"\"\""
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == '3\\n0 1\\n0 2\\n0 3'\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == '2\\n0 1\\n0 2\\n0 3'\n\nprint(\"Hooray!\")\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\nAA\\nAT\\nTT\\nTC') == '3'\n\nSample Input 3:\n4 1\nA\nA\nG\nT\nSample Output 3:\n2\n0 1\n0 2\n0 3\nassert solution('4 1\\nA\\nA\\nG\\nT') == '2'\n\nSample Input 4:\n4 2\nAC\nAG\nAT\nAA\nSample Output 4:\n1\n0 1\n0 2\n0 3\nassert solution('4 2\\nAC\\nAG\\nAT\\nAA') == '1'\n\nSample Input 5:\n4 2\nAA\nTT\nAA\nCC\nSample Output 5:\n1\n0 1\n0 2\n0 3\nassert solution('4 2\\nAA\\nTT\\nAA\\nCC') == '1'\n\nSample Input 6:\n4 2\nCC\nCT\nGT\nGG\nSample Output 6:\n0\n0 1\n2 3\n0 1\n0 2\n2 3\nassert solution('4 2\\nCC\\nCT\\nGT\\nGG') == '0'\n\nSample Input 7:\n4 2\nAA\nAT\nTT\nAC\nSample Output 7:\n1\n0 1\n0 2\n0 3\n"
    },
    {
        "number": 4768,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 2\\nAA\\nAT\\nTT\\nTC\") == 3\nassert solution(\"4 1\\nA\\nA\\nG\\nT\") == 2\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"babaab\") == \"baba\"\nassert solution(\"bbabab\") == \"-1\"\nassert solution(\"bbaabbb\") == \"bbabb\"\nassert solution(\"bbaabbbab\") == \"bbab\"\nassert solution(\"baba\") == \"baba\"\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('bbbbb') == 'b'\nassert solution('ab') == -1\nassert solution('abb') == 'a'\nassert solution('babb') == 'a'\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == -1\nassert solution('aaaa') == 'a'\nassert solution('ab') == -1\nassert solution('abab') == 'ab'\nassert solution('abc') == 'ab'\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == '-1'\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaa') == 'a'\nassert solution('aabbb') == 'a'\nassert solution('bbaaabaaaaaaaaaaaaaaaaa') == 'a'\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"ab\") == -1\nassert solution(\"abb\") == -1\n\nassert solution(\"abcde\") == \"a\"\nassert solution(\"aabcde\") == \"a\"\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"bbbaa\") == \"bba\"\nassert solution(\"abba\") == \"-1\"\nassert solution(\"abab\") == \"ab\""
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('abba') == 'abba'\nassert solution('bba') == 'bba'\nassert solution('abbc') == 'abb'\nassert solution('a') == 'a'\nassert solution('aaa') == 'a'\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaaa\") == \"a\"\nassert solution(\"ab\") == -1\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aaaa') == 'a'\nassert solution('ab') == '-1'\nprint('Success')\n"
    },
    {
        "number": 4769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('ab') == '-1'\nassert solution('aaaa') == 'a'\n\"\"\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3') == 'Dr. Chaz needs 1 more piece of chicken!'\n\n'''"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3') == 'Dr. Chaz will have 1 piece of chicken left over!'"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz will have 1 piece of chicken left over!\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3') == 'Dr. Chaz will have 1 piece of chicken left over!'\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20 100\") == \"Dr. Chaz will have 80 pieces of chicken left over!\"\nassert solution(\"2 3\") == \"Dr. Chaz needs 1 more piece of chicken!\"\n\"\"\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('20 100\\n2 3') == 'Dr. Chaz will have 1 piece of chicken left over!'\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 100\") == \"Dr. Chaz needs 200 pieces of chicken!\"\nassert solution(\"10 10\") == \"Dr. Chaz has enough chicken!\"\nassert solution(\"1 1\") == \"Dr. Chaz needs 1 more piece of chicken!\"\n\"\"\"\n\nimport sys\n\nassert sys.stdin.readline() == \"10 100\\n\"\nassert sys.stdin.readline() == \"10 10\\n\"\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('20 100') == 'Dr. Chaz will have 80 pieces of chicken left over!'\nassert solution('2 3') == 'Dr. Chaz will have 1 piece of chicken left over!'\n"
    },
    {
        "number": 4770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"20 100\\n2 3\") == \"Dr. Chaz will have 1 piece of chicken left over!\"\nassert solution(\"50 50\\n1 2\") == \"Dr. Chaz needs 2 more piece[s] of chicken!\"\nassert solution(\"20 10\\n10 3\") == \"Dr. Chaz will have 7 pieces of chicken left over!\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == '-2'\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == '0'\n\"\"\"\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 10\\n1 1 2\\n2 2 2\\n3 2 1') == '-2'\nassert solution('4 980\\n10 10 10\\n10 5 2\\n5 3 2\\n90 5 2') == '20'\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == \"-2\"\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == \"0\""
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10\") == '-2'\nassert solution(\"3 30\") == '0'\nassert solution(\"4 10\") == '-3'\nassert solution(\"5 10\") == '-2'\n\"\"\"\nimport math"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 10\\n1 1 2\\n2 2 2\\n3 2 1\") == '-2'\nassert solution(\"3 30\\n1 1 1\\n5 2 3\\n5 2 1\") == '0'\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '0\\n'\nassert solution('5 2 3') == '0\\n'\nassert solution('3 10') == '-2\\n'\nassert solution('10 3 30') == '0\\n'\nassert solution('20 5 10') == '0\\n'\n'''"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == '''\n\nassert solution('2 10\\n1 1 1\\n2 2 2') == '-2'\nassert solution('3 30\\n1 1 1\\n5 2 3\\n5 2 1') == '0'\n\n'''\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 10') == '-2'\nassert solution('3 30') == '0'\nassert solution('4 10') == '0'\n"
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 10') == -2\n\"\"\""
    },
    {
        "number": 4771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10\") == \"0\"\nassert solution(\"3 30\") == \"0\"\n\"\"\"\nimport sys\nimport numpy as np"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\nassert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\") == \"as\"\n\"\"\""
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(sample_input) == sample_output\n\n----Solution----\n\"\"\"\n\nimport re\nimport sys\nfrom collections import namedtuple\n\nclass Solution:\n    def solution(self, stdin):\n        words = stdin.split(\"\\n\")\n        words = [re.findall(r'\\w+', word) for word in words]\n        words = [word[0] for word in words if len(word) > 0]\n\n        words.sort()\n        return words[0]"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\nprint(solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\"))\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as') == 'as'\n\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\"\nassert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#as\") == \"as\""
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\n"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as') == 'as'\nassert solution('2 1\\na') == 'a'\nassert solution('1 1\\n#') == ''\nassert solution('1 1\\nb') == 'b'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\nluka\\no#a#\\nkula\\ni#a#\") == \"kala\""
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 4\\nluka\\no#a#\\nkula\\ni#a#') == 'kala'\nassert solution('4 4\\nluka\\no#a#\\nkula\\ni#as') == 'as'\n\"\"\"\n\nfrom collections import deque\n\nR, C = [int(i) for i in input().split()]\n\ngrid = [[j for j in input()] for i in range(R)]"
    },
    {
        "number": 4772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 4\nluka\no#a#\nkula\ni#a#''') == 'kala'\nassert solution('''4 4\nluka\no#a#\nkula\ni#as''') == 'as'\n\n'''\n\u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u043f\u0440\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438:\n\n1) \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u043c\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043d\u0435 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c\u0438 \u043f\u043e \u0445\u0435\u0448\u0443;\n2) \u0441\u043b\u043e\u0432\u0430 \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u0433\u0440\u0443\u043f\u043f\u044b \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u0441\u043b\u043e\u0432\u0430;\n3) \u0441\u043b\u043e\u0432\u0430 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0441\u043b\u043e\u0432 \u0438\u0437 \u043e\u0434\u043d\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u043c \u0441\u043b\u043e\u0432\u043e \u2018oar\u2019, \u0430 \u0438\u0437 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u2013 \u2018o\u2019, \u0442\u043e \u0438\u0441\u043a\u043e\u043c\u043e\u0435 \u0441\u043b\u043e\u0432\u043e \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u2018oar\u2019.\n\n\u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0440\u0435\u0448\u0435\u043d\u0438\u044f:\n\n1) \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u043b\u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044f, \u0442\u043e\u0433\u0434\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043a\u0430\u0436\u0434\u043e\u0435 \u0438\u0441\u043a\u043e\u043c\u043e\u0435 \u0441\u043b\u043e\u0432\u043e \u0432 \u043d\u043e\u0432\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043d\u0435 \u0442\u0430\u043a \u0436\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e, \u043a\u0430\u043a \u043f\u0440\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u0438 \u043f\u043e\u0442\u043e\u043c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430.\n2) \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044f, \u043d\u043e \u0432\u043c\u0435\u0441\u0442\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u0430\u0436\u0434\u0430\u044f \u043f\u0430\u0440\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043a\u043e\u0440\u0442\u0435\u0436.\n3) \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e.\n4) \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043b\u043e\u0432\u0430 \u0432 \u043d\u0435\u0433\u043e \u043d\u0435 \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443, \u0430 \u0441 \u043e\u0431\u0449\u0435\u0439 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u043e\u0439 \u043f\u043e \u0445\u0435\u0448\u0443.\n5) \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0430 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430: \u043f\u0435\u0440\u0432\u043e\u0435 \u2013 \u0445\u0435\u0448 \u0441\u043b\u043e\u0432 \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u044f, \u0432\u0442\u043e\u0440\u043e\u0435 \u2013 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0431\u0443\u043a\u0432\u044b \u0438\u0437 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u044f.\n6) \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e, \u043d\u043e \u043d\u0435 \u0441\u043f\u0438\u0441\u043a\u0438, \u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0441\u043b\u043e\u0432\u0430\u0440\u044f.\n'''"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('WNW') == 'WN'\nassert solution('WNWNW') == 'WN'\nassert solution('WNWNWNW') == 'WN'\nassert solution('NENW') == 'N'\nassert solution('NENNW') == 'N'\n\n'''\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"WNEENWEENEENE\") == 10\nassert solution(\"NSEW\") == 4\nprint(solution(\"WNEENWEENEENE\"))\nprint(solution(\"NSEW\"))"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"WNEENWEENEENE\") == 10\nassert solution(\"NSEW\") == 4\n\"\"\""
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"WNEENWEENEENE\") == 10\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"NSEW\") == \"4\"\n\nassert solution(\"NNENWWWWE\") == \"12\"\n\nassert solution(\"NWWNNWWWNNWWWWE\") == \"10\"\n\nassert solution(\"NWWNNNNWNNWWWWE\") == \"12\"\n\nassert solution(\"NNENWNENWNWSWWNENWWWW\") == \"14\""
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('NSEW') == 4\nassert solution('NENWSEW') == 5\nassert solution('NSEWNESEESWNWNW') == 5\n"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"NSEW\") == 4\nassert solution(\"WNWSEWNWNWSW\") == 9\nassert solution(\"NENWWWNW\") == 9\nassert solution(\"NSEWNENWWWNWNWSW\") == 14\n\"\"\""
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"NSEW\") == 4\nassert solution(\"WNWSWW\") == 12\nassert solution(\"NNNNWWNNNNNNNN\") == 10\nassert solution(\"NNNNNNNNNNNNNNNNNNNNNNNNNN\") == 13"
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"WNEENWEENEENE\") == 10\nassert solution(\"NSEW\") == 4\n\"\"\"\n\nstdin = \"WNEENWEENEENE\""
    },
    {
        "number": 4773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WNEENWEENEENE\") == \"10\"\nassert solution(\"NSEW\") == \"4\"\nassert solution(\"NWSW\") == \"4\"\nassert solution(\"NNWWWEWNWSWW\") == \"13\"\n\n\"\"\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == \"1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\"\nassert solution(\"0 4 2 2\") == \"0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\""
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n'\nassert solution(\"0 4 2 2\") == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n'\nassert solution(\"2 5 2 5\") == '2 - 5 = -3\\n2 * 5 = 10\\n'\nassert solution(\"4 7 2 2\") == 'problems ahead\\n'\n\nfrom sys import stdin"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2'\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n'"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(0) == \"problems ahead\"\nassert solution(1) == \"1 - 2 = 3 - 4\"\nassert solution(2) == \"1 / 2 = 3 / 4\"\nassert solution(3) == \"1 + 2 = 3 + 4\"\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\n'\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"\"\"1 - 2 = 3 - 4\n1 / 2 = 3 / 4\"\"\"\n\nassert solution(\"0 4 2 2\") == \"\"\"0 * 4 = 2 - 2\n0 + 4 = 2 * 2\n0 + 4 = 2 + 2\n0 / 4 = 2 - 2\"\"\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"\"\"1 - 2 = 3 - 4\n1 / 2 = 3 / 4\"\"\", solution(\"1 2 3 4\")\nassert solution(\"0 4 2 2\") == \"problems ahead\", solution(\"0 4 2 2\")\n\"\"\"\n"
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 2 3 4') == '1 - 2 = 3 - 4\\n1 / 2 = 3 / 4\\n'\nassert solution('0 4 2 2') == '0 * 4 = 2 - 2\\n0 + 4 = 2 * 2\\n0 + 4 = 2 + 2\\n0 / 4 = 2 - 2\\nproblems ahead\\n'\n\"\"\""
    },
    {
        "number": 4774,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == \"\"\"1 - 2 = 3 - 4\n1 / 2 = 3 / 4\"\"\"\nassert solution(\"0 4 2 2\") == \"problems ahead\"\nassert solution(\"0 0 0 0\") == \"problems ahead\"\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"ABBA CCCB\") == \"C..\\nC..\\nABBA\\n.B..\"\nassert solution(\"ADDSS MMMM VVVV\") == \"..S..\\n..S..\\n..S..\\n..S..\\n..S..\\n..S..\"\nassert solution(\"HH HHH\") == \"HHH\\nHHH\"\nassert solution(\"HOLAMUNDA KAKA\") == \"AKA\\nAKA\\nAKA\\nAKA\\n.M..\\n.U..\\n.N..\\n.A..\"\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('BANANA PIDZAMA') == '\\n'.join([\n    '.P....',\n    '.I....',\n    '.D....',\n    '.Z....',\n    'BANANA',\n    '.M....',\n    '.A....'])\nassert solution('MAMA TATA') == '\\n'.join([\n    '.T..',\n    'MAMA',\n    '.T..',\n    '.A..'])\nprint('all tests past')\n\n\"\"\""
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n\n----\n\nprint('Paste in your input:')\nprint('i.e.: ABBA CCBB')\nprint('Note: The length of the words must be more than 30 characters')\n\na = input('a = ')\nb = input('b = ')\n\nfor i in range(len(a)):\n    for j in range(len(b)):\n        if a[i] == b[j]:\n            print(a[i] + '.' * j, end = '')\n            break\n\nfor i in range(len(b)):\n    for j in range(len(a)):\n        if b[i] == a[j]:\n            print(b[i] + '.' * j, end = '')\n            break\n\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"\"\"\n\nprint('\\n')\nprint('SAMPLE OUTPUT 1:')\nprint('\\n')\n\na = 'BANANA PIDZAMA'\nb = 'CCBB'\n\nfor i in range(len(a)):\n    for j in range(len(b)):\n        if a[i] == b[j]:\n            print(a[i] + '.' * j, end = '')\n            break\n\nfor i in range(len(b)):\n    for j in range(len(a)):\n        if b[i] == a[j]:\n            print(b[i] + '.' * j, end = '')\n            break\n\n\"\"\"\n\n\n\n\n\n\n\n\n\n\"\"\"\nprint('\\n')\nprint('SAMPLE OUTPUT 2:')\nprint('\\n')\n\na = 'MAMA TATA'\nb = 'ABBA CCBB'\n\nfor i in range(len(a)):\n    for j in range(len(b)):\n        if a[i] == b[j]:\n            print(a[i] + '.' * j, end = '')\n            break\n\nfor i in range(len(b)):\n    for j in range(len(a)):\n        if b[i] == a[j]:\n            print(b[i] + '.' * j, end = '')\n            break\n\n\"\"\"\n\n\nprint('\\n')\nprint('YOUR OUTPUT:')\nprint('\\n')"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('BANANA PIDZAMA') == '....\\nP....\\nI....\\n....\\n....\\n....\\n....\\nM....\\nA....'\nassert solution('MAMA TATA') == '....\\nT..\\n..M\\n..A\\n..T\\n..A'\n\"\"\""
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(Test.stringToString('''BANANA PIDZAMA''')) == '''\n.P....\n.I....\n.D....\n.Z....\nBANANA\n.M....\n.A....\n'''\nassert solution(Test.stringToString('''MAMA TATA''')) == '''\n.T..\nMAMA\n.T..\n.A..\n'''\nprint(solution(Test.stringToString(input())))\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"BANANA PIDZAMA\") == \\\n    \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....\"\n\n\"\"\"\n\nfrom collections import Counter, OrderedDict"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('BANANA PIDZAMA') == '.P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....'\nassert solution('MAMA TATA') == '.T..\\nMAMA\\n.T..\\n.A..'\n\"\"\"\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('BANANA PIDZAMA') == '.P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....'\nassert solution('MAMA TATA') == '.T..\\nMAMA\\n.T..\\n.A..'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('BANANA PIDZAMA') == \".P....\\n.I....\\n.D....\\n.Z....\\nBANANA\\n.M....\\n.A....\"\nassert solution('MAMA TATA') == \".T..\\nMAMA\\n.T..\\n.A..\"\n\n\"\"\""
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n10 14\\n13 17\\n25 26\") == \"10\"\nassert solution(\"2\\n1 365\\n20 28\") == \"365\"\n\"\"\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n10 14\\n13 17\\n25 26\\n') == '10'\nassert solution('2\\n1 365\\n20 28\\n') == '365'\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6 3\") == 5\n\"\"\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 14\\n13 17\\n25 26\") == \"10\"\nassert solution(\"1 365\\n20 28\") == \"365\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n10 14\\n13 17\\n25 26') == '10'\nassert solution('2\\n1 365\\n20 28') == '365'\nprint(solution('3\\n10 14\\n13 17\\n25 26'))\nprint(solution('2\\n1 365\\n20 28'))\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6 3') == '0\\n'\nassert solution('6 5') == '1\\n'\nassert solution('6 1') == '5\\n'\nassert solution('6 2') == '4\\n'\nassert solution('6 4') == '3\\n'\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1 1\\n20 20\\n35 40\") == \"4\"\n\"\"\"\n\nN = int(stdin.readline())\narr = []\narr2 = []\n\nfor i in range(N):\n    a, b = map(int, stdin.readline().split())\n    arr.append([a, b])\n\narr.sort(key=lambda x: x[0])\narr2.append(arr[0])\n\nfor i in range(1, len(arr)):\n    arr2.append([arr2[i-1][1], arr[i][0]])\n    arr2.append([arr2[i][1], arr[i][1]])\n\narr2.sort(key=lambda x: x[0])\narr2.sort(key=lambda x: x[1])\n\nindex = 0\ni = 0\nj = 0\nwhile i < len(arr2):\n    if j < len(arr2) and arr2[j][0] <= arr2[i][1] and arr2[j][1] >= arr2[i][0]:\n        j += 1\n    elif j >= len(arr2) and arr2[i][0] <= arr2[i][1] and arr2[i][1] >= arr2[i][0]:\n        j += 1\n        i += 1\n    else:\n        index += 1\n        i += 1\n\nprint(index)\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n10 14\\n13 17\\n25 26') == '10'\nassert solution('2\\n1 365\\n20 28') == '365'\n\"\"\"\n"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n10 20\\n10 20\") == 10\nassert solution(\"5\\n10 20\\n10 20\\n5 25\\n5 25\") == 5"
    },
    {
        "number": 4776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n10 14\\n13 17\\n25 26') == '10'\nassert solution('2\\n1 365\\n20 28') == '365'\n\"\"\""
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"2 3\"\nassert solution(\"1\") == \"0 1\""
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '0 1'\nassert solution('4') == '2 3'\nassert solution('45') == '22 23'"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"0 1\"\nassert solution(\"4\") == \"2 3\"\nassert solution(\"45\") == \"0 16\"\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nBABA\\nBBABA\\nBBBAA\\nAAAAA') == '2 3'\nprint('Test pass.')\n\n\"\"\""
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4') == '2 3'\n\nSample Input 3:\n15\n\nSample Output 3:\n0 0\n\nSample Input 4:\n45\n\nSample Output 4:\n1 14\n\nSample Input 5:\n99\n\nSample Output 5:\n15 30\n'''"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == '0 1'\nassert solution('1') == '0 1'\nassert solution('3') == '2 3'\n\nimport sys\n\nassert len(sys.argv) == 2\nk = int(sys.argv[1])\n\nassert k >= 1 and k <= 45\n\ns = '1' * k"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == (\"0\", \"1\")\nassert solution(\"2\") == (\"1\", \"0\")\nassert solution(\"3\") == (\"1\", \"2\")\nassert solution(\"4\") == (\"2\", \"3\")\nassert solution(\"5\") == (\"2\", \"5\")\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '0 1'\nassert solution('1') == '0 1'\nassert solution('10') == '0 1'\nassert solution('20') == '1 0'\nassert solution('100000000') == '0 1'\n\"\"\"\n\n\nimport string\n\nK = int(input())"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"2 3\"\nassert solution(\"5\") == \"0 1\"\nassert solution(\"1\") == \"0 1\"\nassert solution(\"2\") == \"1 1\"\nassert solution(\"3\") == \"0 0\"\n"
    },
    {
        "number": 4777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n1\\n1\\n') == '0 1'\nassert solution('4\\n1\\n1\\n1\\n') == '2 3'\nassert solution('10\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '8 5'\n\n\"\"\""
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n100\\n200') == 'B 100 49'\nassert solution('2\\n100\\n99') == 'B 100 49'\nassert solution('3\\n100\\n50') == 'A 1 197'\nassert solution('4\\n100\\n99') == 'A 0 99'\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\"\n\"\"\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\"\nassert int(solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\")) == 2197\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\"\nassert solution(\"5 4\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\n\nprint(\"Successfully solved!\")\n\"\"\"\n\nimport sys\nimport math\nimport copy"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n1 100 99\\n2 100 99\\n3 100 99\") == \"B 0 99\"\nassert solution(\"4 1\\n1 100 99\\n2 100 99\\n3 100 99\\n4 100 99\") == \"A 0 99\"\n\"\"\""
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == \"B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\"\nassert solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\") == \"A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\"\n\n\"\"\"\n"
    },
    {
        "number": 4778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\") == 'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\nprint(solution(\"4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\"))"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == '1'\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '3'\nassert solution('3\\n2\\n1') == '9'\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n2\\n1\\n4\\n3\\n5') == 168\nprint(solution(stdin=input()))"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\\n\") == 168\n\"\"\"\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n2\\n1\\n4\\n3\\n5\\n\") == 168\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1\\n1\\n') == '1\\n'\nassert solution('5\\n2\\n1\\n4\\n3\\n5\\n') == '168\\n'\nassert solution('6\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n') == '2048\\n'\nassert solution('11\\n1\\n3\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n') == '64\\n'\nassert solution('15\\n2\\n5\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n') == '15\\n'\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(2) == '168'\nassert solution('5\\n2\\n1\\n4\\n3\\n5\\n') == '168'\n\"\"\"\nimport sys"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(solution.__annotations__[stdin])\n\n----------------------------------------------------------------------\n\nIn the first line, print the number of integers to be entered.\nIn the second line, print the n integers, each on a new line.\nAfter that, print the number of queries to follow.\nIn the next n lines, print the queries. Each query is of the form \"i k\"\nwhere i is the index of the number in the list and k is the index of the number to which the product of the\nsquares of the numbers at the indices i and i + 1 should be summed and then multiplied by the number at index i.\n\n-----Input-----\n5\n1\n2\n4\n3\n5\n4 0\n2 2\n3 4\n5 3\n1 2\n-----Output-----\n1\n4\n28\n24\n\nimport sys\nfrom functools import reduce\n\nn = int(input())\n\nnumbers = list(map(int, sys.stdin.readlines()))\n\nprint(numbers)\n\nn = int(input())\n\nnumbers = list(map(int, sys.stdin.readlines()))\n\nprint(numbers)\n\nn = int(input())\n\nnumbers = list(map(int, sys.stdin.readlines()))\n\nprint(numbers)\n\nn = int(input())\n\nnumbers = list(map(int, sys.stdin.readlines()))\n\nprint(numbers)\n\nfor _ in range(n):\n    i, j = map(int, input().split())\n    print(reduce(lambda a, b: a + b, map(lambda a: a ** 2, numbers[i - 1:j])))\n\n\n----------------------------------------------------------------------"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n2 1 4 3 5\\n1\") == \"168\"\nprint(solution(\"5\\n2 1 4 3 5\\n1\"))\n"
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n2 1 4 3 5\") == \"168\"\n\"\"\""
    },
    {
        "number": 4779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n2\\n1\\n4\\n3\\n5') == 168\nassert solution('2\\n1\\n1') == 1\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(0) == 'ABC'\nassert solution('ABC') == 'ABC'\nassert solution('ABCD') == 'ACBD'\nassert solution('ABBC') == 'BCAB'\nassert solution('BCDA') == 'BDCA'\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2') == 'CDBEAF'\n\"\"\"\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n0') == 'CBADEF'\nassert solution('5 5\\nCBA\\nDEF\\nGHI\\nJKL\\n0') == 'CBAJKLDEFGHI'\nassert solution('5 5\\nCBA\\nDEF\\nGHI\\nJKL\\n0') == 'CBAJKLDEFGHI'\nassert solution('5 5\\nCBA\\nDEF\\nGHI\\nJKL\\n0') == 'CBAJKLDEFGHI'\nassert solution('5 5\\nCBA\\nDEF\\nGHI\\nJKL\\n0') == 'CBAJKLDEFGHI'\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2') == 'CDBEAF'\nassert solution('3 3\\nBCA\\nDEF\\n2') == 'CBADEF'\nassert solution('3 3\\nCAB\\nDEF\\n2') == 'BCADEF'\nassert solution('3 3\\nCBA\\nDEF\\n2') == 'BACEDF'\nassert solution('3 3\\nABC\\nCAB\\n2') == 'BCADEF'\n"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3 ABC DEF 0') == 'CBADEF'\nassert solution('3 3 ABC DEF 2') == 'CDBEAF'\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\\n\") == \"CDBEAF\"\nprint('Hooray!')\n\n\"\"\""
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(s1) == s2\nprint(solution(s1))\n\n------------\n\n----SOLUTION----\n\"\"\""
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\n\"\"\""
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3\\nABC\\nDEF\\n2') == 'CDBEAF'\nassert solution('2\\nBC\\nDF') == 'BCDF'\nassert solution('4\\nDBA\\nBA\\nBCD\\nACD\\nDB') == 'DBABCDACDBA'\n\n-----Notes-----\n3 \u2264 N \u2264 10\n0 \u2264 T \u2264 50\n---\nfrom typing import List"
    },
    {
        "number": 4780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\nABC\\nDEF\\n2\") == \"CDBEAF\"\nprint(\"Success!\")\n\"\"\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'\nassert solution('3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N') == '4'\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n1\n5\n20 T\n50 T\n80 T\n50 T\n30 T\n''') == \"1\"\n\nassert solution('''\n3\n5\n100 T\n100 N\n100 T\n100 T\n100 N\n''') == \"4\"\n\n\"\"\"\nGiven a string s, remove any character that appears more than once. The string can be returned in any order.\n\nInput: s = \"ababc\"\nOutput: \"abc\"\n\nInput: s = \"tmmzuxt\"\nOutput: \"abc\"\n\"\"\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test_input_01) == test_output_01\nassert solution(test_input_02) == test_output_02\n\nprint(solution(input()))\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'\nassert solution('2\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N') == '2'\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('4\\n5\\n100 T\\n100 T\\n100 N\\n100 T\\n100 N') == '4'\nassert solution('1\\n5\\n100 T\\n100 T\\n100 N\\n100 T\\n100 N') == '1'\nassert solution('3\\n5\\n100 T\\n100 T\\n100 N\\n100 T\\n100 N') == '3'\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T\") == \"1\"\nassert solution(\"3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N\") == \"3\"\nassert solution(\"2\\n5\\n100 T\\n100 T\\n100 N\\n100 T\\n100 N\") == \"2\"\nassert solution(\"8\\n5\\n100 T\\n100 T\\n100 N\\n100 T\\n100 N\\n100 T\\n100 N\") == \"8\"\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n3\\n100 T\\n100 N\\n100 T\\n100 N\\n100 T') == '4'\nassert solution('2\\n3\\n100 T\\n100 N\\n100 T\\n100 N\\n100 T') == '2'\nassert solution('2\\n3\\n100 T\\n100 N\\n100 T\\n100 N\\n100 T') == '1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\\n5\\n20T\\n50T\\n80T\\n50T\\n30T\") == \"5\"\nassert solution(\"3\\n5\\n100T\\n100N\\n100T\\n100T\\n100N\") == \"4\""
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'\n\"\"\"\n\nfrom typing import List, Dict, Tuple\n"
    },
    {
        "number": 4781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n5\\n20 T\\n50 T\\n80 T\\n50 T\\n30 T') == '1'\nassert solution('3\\n5\\n100 T\\n100 N\\n100 T\\n100 T\\n100 N') == '4'\n\"\"\"\n\n\"\"\"\nInput:\n3\n5\n100 T\n100 N\n100 T\n100 T\n100 N\n\nOutput:\n4\n\"\"\""
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 3\\n1 2\\n2 3\\n4 1\\n\") == '6'\nassert solution(\"6 8\\n1 2\\n2 3\\n4 5\\n5 6\\n1 2\\n2 3\\n4 5\\n5 6\\n\") == '22'\n\n\"\"\""
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 3\\n4 2\\n1 2 3 4 5\\n1 2') == '6'\n\nassert solution('6 8\\n1 2\\n3 4\\n4 5\\n4 6\\n2 4\\n5 6') == '22'\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '4 3\\n'\n) == '6\\n'\n\nassert solution(\n    '6 8\\n'\n) == '22\\n'\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3\\n1 2\\n2 3\\n3 4\\n4 1\\n') == '6', 'error'\n    pass"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3\\n6 8') == '22'\n\"\"\""
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''4 3\n''') == '6'\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3\\n') == '6'\nassert solution('6 8\\n') == '22'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3\\n6 8') == '22'\nprint(solution(input()))\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 2\\n1 3\\n2 3\\n2 4\\n3 4\") == \"6\"\nassert solution(\"6 8\\n2 1\\n3 4\\n5 1\\n4 2\\n5 3\\n2 6\\n1 7\\n1 4\\n2 5\\n3 6\\n3 7\\n4 5\") == \"22\"\n"
    },
    {
        "number": 4782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''4 3\n6 8\n''') == '6'\nassert solution('''2 2\n1 2\n''') == '1'\nassert solution('''2 2\n1 2\n''') == '1'\nassert solution('''3 3\n1 2\n1 3\n2 3\n''') == '3'\nassert solution('''4 1\n1 2\n3 4\n''') == '4'\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3\\n1 2 3\\n6 5 4\\n7 8 9') == '1'\nassert solution('3 3\\n4 3 2 1\\n7 8 9') == '0'\nprint('Success')"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == '1'\n\"\"\"\n\nimport sys\nfrom typing import List, Tuple, Union\n\nfrom utils import puzzle_input\n\nexample_data = puzzle_input(24, example=True)\ndata = puzzle_input(24, example=False)\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\n\nassert solution(\"1 4\\n4 3 2 1\") == \"0\"\n\nprint(\"Well done!\")"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\nassert solution(\"1 4\\n4 3 2 1\") == \"0\"\n\n\"\"\"\n\nfrom collections import defaultdict\nimport heapq"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 3\n1 2 3\n6 5 4\n7 8 9''') == '1'\nassert solution('''1 4\n4 3 2 1''') == '0''')\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\n\"\"\"\n\nfrom sys import stdin\n\nlines = stdin.readlines()\nvault = []\nfor line in lines:\n    line = line.strip().split(\" \")\n    line = list(map(int, line))\n    vault.append(line)"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == '1'\nassert solution(\"1 4\\n4 3 2 1\") == '0'\n"
    },
    {
        "number": 4783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3\\n1 2 3\\n6 5 4\\n7 8 9\") == \"1\"\nassert solution(\"1 4\\n4 3 2 1\") == \"0\"\n\nprint(solution(input()))"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10\\n3\\n10\\n2\\n12') == '16'\n\"\"\"\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10\\n3\\n4\\n6\\n2') == '28'\nassert solution('10\\n3\\n10\\n2\\n12') == '16'\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('10\\n3\\n4\\n6\\n2'), '28')\n        self.assertEqual(solution('10\\n3\\n10\\n2\\n12'), '16')"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\"\n\"\"\""
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('10\\n3\\n4\\n6\\n2') == '28'\nassert solution('10\\n3\\n10\\n2\\n12') == '16'\n\"\"\"\n\nimport sys\n\nX = int(sys.stdin.readline().strip())\nN = int(sys.stdin.readline().strip())\n\nP = []\nfor _ in range(N):\n    P.append(int(sys.stdin.readline().strip()))\n\ntotal = 0\navailable = X\nfor p in P:\n    if available < p:\n        total += available * (N - P.index(p))\n        available = 0\n        break\n    else:\n        available -= p\n\ntotal += available * (N - P.index(p))\nprint(total)\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10\\n3\\n10\\n2\\n12') == '16'\n\"\"\"\n\nX = int(input())\nN = int(input())\n\nfor i in range(N):\n    X += int(input())\n\nprint(X)\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\n3\\n4\\n6\\n2\") == \"28\"\nprint(solution(\"10\\n3\\n4\\n6\\n2\"))"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 3\\n4\\n6\\n2') == '28'\nassert solution('10 3\\n10\\n2') == '16'\n\nprint(solution(input()))\n'''\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n2\\n3\\n3\\n1') == '7'\nassert solution('5\\n2\\n3\\n3\\n2') == '12'\n\"\"\"\n\nfrom typing import List, Tuple"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\n3\\n10\\n2\\n12\") == \"16\"\nprint(solution(\"10\\n3\\n10\\n2\\n12\"))\n\n'''\n\nx = int(input())\nN = int(input())\nL = []\nfor _ in range(N):\n    L.append(int(input()))\ns = 0\nfor i in range(N):\n    s += x\n    x = x - L[i]\n    x = x + L[i+1]\nprint(s)\n"
    },
    {
        "number": 4784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\n3\\n10\\n2\\n12') == '16'\n\"\"\"\nimport sys"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nassert solution('kiss') == 'no hiss'\nassert solution('mississippi') == 'no hiss'\nassert solution('hiss') == 'hiss'\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\nassert solution(\"trees\") == \"no hiss\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nassert solution('kiss') == 'no hiss'\nassert solution('hiss') == 'hiss'\nassert solution('mississippi') == 'hiss'\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"hiss\") == \"hiss\"\nassert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\nassert solution(\"octopiuses\") == \"no hiss\"\nassert solution(\"mississippi\") == \"hiss\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nassert solution('xenon') == 'no hiss'\nassert solution('adonis') == 'hiss'\nassert solution('bohemian') == 'hiss'\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('octopuses') == 'no hiss'\nassert solution('hiss') == 'hiss'\n\n\"\"\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"mississippi\") == \"hiss\"\nassert solution(\"amiss\") == \"hiss\"\nassert solution(\"octopuses\") == \"no hiss\"\n\"\"\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"octopuses\") == \"no hiss\"\nassert solution(\"hiss\") == \"hiss\"\nassert solution(\"aaaa\") == \"hiss\"\nassert solution(\"sss\") == \"hiss\"\nassert solution(\"aaaaa\") == \"hiss\"\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a') == 'no hiss'\nassert solution('b') == 'hiss'\nassert solution('ab') == 'no hiss'\nassert solution('ab') == 'hiss'\nassert solution('aa') == 'hiss'\n"
    },
    {
        "number": 4785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('amiss') == 'hiss'\nassert solution('octopuses') == 'no hiss'\nassert solution('doodoo') == 'hiss'\nassert solution('dogood') == 'no hiss'\n\nprint('Success')"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(stdin))\n\nSample Input 3:\n4\nmachine\nlearning\nbig\ndata\nSample Output 3:\n3\n\nSample Input 4:\n6\nmachine-learning\nmachine\nlearning\nArtificial\nIntelligence\nsample\nSample Output 4:\n3\n\n'''\nimport sys"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\nc\\nc\\nc\\nc\\n') == 3\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\nc\\nc\\nc\\n\") == \"3\"\nassert solution(\"5\\nCryptography\\nblockchain\\nArtificial Intelligence\\nMachine-Learning\\nLinux\") == \"5\"\n\"\"\""
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nc++\\nC++\\nc\\nc#\\n') == '3'\nassert solution('5\\ncryptography\\nblockchain\\nArtificial Intelligence\\nMachine Learning\\nLinux\\n') == '5'\n\n'''\n\nfrom string import ascii_lowercase, ascii_uppercase\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\nc\\nc\\nC\\nc\\n\") == \"3\"\nassert solution(\"5\\nc\\nc\\nC\\nc\\n\") == \"5\"\n\"\"\"\n\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    \"4\\nc++\\nC++\\nc\\nc#\"\n) == \"3\"\n\nassert solution(\n    \"5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux\"\n) == \"5\"\n\"\"\"\n"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\ncryptography\\nblockchain\\nArtificial intelligence\\nMachine-Learning\\nLinux\") == \"5\"\nassert solution(\"4\\nc++\\nC++\\nc\\nc#\") == \"3\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\nc\\nc\\n c\\nc') == 3\n\n\"\"\"\n\nimport string"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\n'''"
    },
    {
        "number": 4786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''5\ncryptography\nblockchain\nArtificial intelligence\nMachine-Learning\nLinux''') == '5'\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('TCGTT') == 21\nassert solution('TCGGT') == 9\n\"\"\""
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCCTC\") == 9\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('TCGTTC') == 21\nassert solution('CCC') == 9\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"TCGTTC\") == \"21\"\nassert solution(\"CCC\") == \"9\"\nassert solution(\"GGGG\") == \"0\"\nassert solution(\"TTTTT\") == \"0\"\n\"\"\""
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('TCGTTC') == '21'\nassert solution('CCC') == '9'\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\""
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"TCGTTC\") == \"21\"\nassert solution(\"CCC\") == \"9\""
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('TCGTTC') == '21'\nassert solution('CCC') == '9'\nassert solution('TTTCC') == '22'\nassert solution('TTTTT') == '12'\nassert solution('CCGCCG') == '48'\n"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"TTC\") == 9\nassert solution(\"TCG\") == 21\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"TCGTTC\") == 21\nassert solution(\"CCC\") == 9\n\"\"\""
    },
    {
        "number": 4787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('TCGTTC') == '21'\nassert solution('CCC') == '9'"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"315\\n45\") == \"90\"\nassert solution(\"180\\n270\") == \"90\"\n\"\"\""
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(['315','45']) == '90'\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"315\\n45\") == \"90\"\nassert solution(\"180\\n270\") == \"90\"\n\"\"\""
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('315 45') == '90'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('315\\n45') == '90'\n\"\"\""
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n\n\"\"\""
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"315\", \"45\") == \"90\"\nassert solution(\"180\", \"270\") == \"90\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('315\\n45') == '90'\nassert solution('180\\n270') == '90'\nassert solution('135\\n180') == '180'\nassert solution('270\\n315') == '90'\nassert solution('270\\n45') == '90'\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''315''') == '90'\nassert solution('''180''') == '90'\nassert solution('''45''') == '90'\n\"\"\"\n"
    },
    {
        "number": 4788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('315\\n45') == '90'\nprint(solution(input()))"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99\\n') == '3'\nassert solution('5\\n23\\n18\\n13\\n99\\n') == '1'\nassert solution('5\\n13\\n23\\n18\\n99\\n') == '1'\nassert solution('5\\n13\\n23\\n18\\n99\\n') == '1'\nassert solution('5\\n1\\n23\\n18\\n13\\n99\\n') == '1'\n\n\"\"\"\n\n\nfrom collections import Counter"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99\\n') == '3'\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\nassert solution(\"5\\n11\\n20\\n33\\n40\\n55\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == 3\n\"\"\""
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\n\"\"\"\n\n\"\"\"\nTHE SOLUTION:\n\nSteps:\n1. Import a file, and iterate through it\n2. Check if the current clerk's desk number is in the array of people to fill out\n3. Increment the steps by the number of people that can't be reached yet\n\"\"\""
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == 3\nassert solution('5\\n11\\n20\\n33\\n40\\n55') == 1\nassert solution('5\\n9\\n11\\n29\\n41\\n55') == 2\n\"\"\"\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(5) == 3\n\n\"\"\"\n\nn = int(stdin.readline().rstrip())\ns = [int(x) for x in stdin.readline().rstrip().split()]\n\ncount = 0\n\nfor i in range(n):\n    if s[i] < len(s) - 1:\n        s[i] += 1\n        count += 1\n    else:\n        break\n\nwhile True:\n    if s[len(s) - 1] < len(s) - 1:\n        s[len(s) - 1] += 1\n        count += 1\n    else:\n        break\n\nprint(count)\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1\\n23\\n18\\n13\\n99\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5\n1\n23\n18\n13\n99''') == '3'\n\nassert solution('''5\n1\n23\n18\n13\n99\n''') == '1'\n\nassert solution('''5\n1\n2\n3\n4\n5''') == '0'\n\nassert solution('''5\n99\n98\n97\n96\n95\n''') == '4'\n\nprint('Success')"
    },
    {
        "number": 4789,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n1\\n23\\n18\\n13\\n99') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWBWBB\") == \"1\"\n\n\"\"\"\n\n\"\"\"\nThe idea is to find an alternating sequence of W and B starting from the beginning of the string. Then apply the rules on this sequence.\n\nTo get the sequence, we use a sliding window technique:\n\nWe have two pointers: left and right, denoting the beginning and end of the window respectively.\nInitially, left and right are at the beginning of the string.\n\nWe move right pointer by 1 unit each iteration. The condition for moving the right pointer is as follows:\n\nIf the string starts with a white stone, then the right pointer should not be made to move.\nOtherwise, we move the right pointer.\n\nSimilarly, the condition for moving the left pointer is as follows:\n\nIf the string ends with a white stone, then the left pointer should not be made to move.\nOtherwise, we move the left pointer.\n\nThe problem with moving the left pointer is that if the left pointer is at index 1, then the white stone at index 0 and black stone at index 1 are adjacent.\nThis is a contradiction, since the sequence of white and black stones are alternately white and black.\n\nSo, we keep moving the left pointer until the string starts with a black stone.\n\nNow we iterate over the string and maintain a variable `count` to count the number of white stones encountered.\nAt each iteration, if the left pointer is at the end of the string, then we move the left pointer to the beginning of the string and increment `count` by 1.\nOtherwise, we move the left pointer.\n\nIf the count is odd, then this means that the sequence of white stones starting from the beginning of the string is odd and the string is not balanced.\n\nOtherwise, if the count is even, then the sequence is even. This means that the string is balanced and we can stop the loop.\n\n\"\"\""
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WWWWBB') == '1'\nassert solution('WWBWBWB') == '0'\nassert solution('WWWBWBW') == '0'\nassert solution('WWBWBWBW') == '0'\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"WWWWBBW\") == '0'\nassert solution(\"WWWWBBBWWW\") == '0'\nassert solution(\"WWWWBBBBWW\") == '0'\nassert solution(\"BBBB\") == '0'\nassert solution(\"WWWWBBBBBWWWW\") == '1'\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WWBWBB') == '1'\n\"\"\"\n\nfrom typing import Iterable\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WWBWBWW') == '1'\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"WWWWBBW\") == \"0\"\nassert solution(\"WWBWBWWBWB\") == \"1\"\nassert solution(\"BBBBBBBBBB\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WWWWBB') == '1'\nassert solution('WBBWBBW') == '0'\nassert solution('WBBBBB') == '1'\nassert solution('B') == '1'\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"WWWBBW\") == \"1\"\nassert solution(\"WWBBBW\") == \"0\"\nassert solution(\"BWBWBWBW\") == \"1\"\nassert solution(\"WBWBWBWB\") == \"0\"\n\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('WWWWBBW') == '0'\nassert solution('WWWWBB') == '1'\n\"\"\"\n"
    },
    {
        "number": 4790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('WWBWBB') == '1'\nassert solution('WWWWBBW') == '0'\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 3 3 3') == 9\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\n\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 1') == '1'\nassert solution('1 2 1 1') == '1'\nassert solution('1 2 3 2 1') == '3'\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 3 3 3') == '9'\nassert solution('1 2 1 1') == '1.299038105676658'\n\"\"\""
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1 2 1 1''') == '1.299038105676658'\nassert solution('''2 2 2 2''') == '4.0'\nassert solution('''3 3 3 3''') == '9.0'\n\"\"\"\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 3 3') == '9'\n\"\"\"\n"
    },
    {
        "number": 4791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 3 3\") == \"9\"\nassert solution(\"1 2 1 1\") == \"1.299038105676658\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('robert') == 'robert'\nassert solution('roooobert') == 'robert'\nassert solution('rrrooobbbert') == 'robert'\nassert solution('rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"robert\"\n) == \"robert\"\nassert solution(\n\"roobert\"\n) == \"robert\"\nassert solution(\n\"rroobert\"\n) == \"robert\"\nassert solution(\n\"rrroobert\"\n) == \"robert\"\nassert solution(\n\"rrroobertaa\"\n) == \"robert\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"roobert\") == \"robert\"\nassert solution(\"rooberta\") == \"robert\"\nassert solution(\"rrrooobbbert\") == \"robert\"\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"roobert\") == \"robert\"\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"robert\") == \"robert\"\nassert solution(\"rooobert\") == \"robert\"\nassert solution(\"rooobert\") == \"robert\"\nassert solution(\"rrrooobbbert\") == \"robert\"\nassert solution(\"aabbaabbaa\") == \"aabbaabba\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'ab'\nassert solution('aa') == 'a'\nassert solution('aaa') == 'a'\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rooobert') == 'robert'\n\"\"\"\n"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"roobert\") == \"robert\"\nassert solution(\"roobet\") == \"robert\"\nassert solution(\"roobetter\") == \"robert\"\n\"\"\""
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rrrooobbbert') == 'robert'\nassert solution('razza') == 'raza'\n\"\"\"\n\nimport re"
    },
    {
        "number": 4792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('robert') == 'robert'\nassert solution('rbooobert') == 'robert'\nassert solution('rrrooobbbert') == 'robert'\nassert solution('rrroooobbbert') == 'robert'\nassert solution('rrroooobbbertrrr') == 'robert'\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n\n\"\"\""
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"1000 9 7\"\"\"\n) == \"\"\"108 4\"\"\"\nprint(solution(input()))\n\nassert solution(\n\"\"\"1000 900 7\"\"\"\n) == \"\"\"Impossible\"\"\"\n\nassert solution(\n\"\"\"10000 6 9\"\"\"\n) == \"\"\"0 0\"\"\"\n\nassert solution(\n\"\"\"10000000 1 1\"\"\"\n) == \"\"\"0 0\"\"\"\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\n\"\"\""
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n\n\"\"\"\n\nimport numpy as np\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1000 9 7\") == \"108 4\"\nassert solution(\"1000 900 7\") == \"Impossible\"\n\"\"\"\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1000 9 7\\n') == '108 4'\nassert solution('1000 900 7\\n') == 'Impossible'\n\"\"\"\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1000 9 7''') == '''108 4'''\nassert solution('''1000 900 7''') == '''Impossible'''\nassert solution('''1000 9 100''') == '''Impossible'''\nassert solution('''12345 6789 10''') == '''Impossible'''\nassert solution('''12345 6789 10''') == '''Impossible'''\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1000 9 7') == '108 4'\n\nSample Input 3:\n1000 1000 1\nSample Output 3:\nImpossible\n\nSample Input 4:\n1 2 3\nSample Output 4:\nImpossible\n\n'''\n\ns,v1,v2 = input().split()\ns,v1,v2 = [int(s),int(v1),int(v2)]\n\ncount = s // v1\n"
    },
    {
        "number": 4793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1000 9 7') == '108 4'\n\"\"\"\n\nimport sys\n\nm, n, k = map(int, sys.stdin.readline().strip().split())"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 4\\n#..#\\n..X.\\n..X.\\n#XX#') == '1\\n1\\n2\\n1\\n0'\nassert solution('4 4\\n....\\n....\\n....\\n....') == '9\\n0\\n0\\n0\\n0'\n\n\"\"\"\n\nfrom typing import List, Union\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n....\\n....\\n....\\n....') == '9\\n0\\n0\\n0\\n0'\n\"\"\""
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1 1 2 1 0\"\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n#..#\\n..X.') == '1\\n1\\n2\\n1\\n0'\nassert solution('4 4\\n#..#\\n..X.\\n..X.') == '1\\n0\\n0\\n0\\n0'\nassert solution('4 4\\n#..#\\n..X.\\nXX.#\\n#XX#') == '9\\n0\\n0\\n0\\n0'\n\nprint(solution(stdin))"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\"\n"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\"\n\nprint(solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\"))"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1 1 2 1 0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9 0 0 0 0\"\n\"\"\"\n\nfrom collections import Counter\n\nR, C = [int(el) for el in input().split()]\n\ntruck_map = [input() for _ in range(R)]\n\ntruck_map_count = Counter()\nparked_car_count = 0\n\nfor row in truck_map:\n    parked_car_count += row.count(\"X\")\n    truck_map_count.update(row)"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9\\n0\\n0\\n0\\n0\"\n\n\"\"\"\n\nfrom collections import defaultdict\nimport sys"
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1 1 2 1 0\"\nassert solution(\"4 4\\n....\\n....\\n....\\n....\") == \"9 0 0 0 0\"\nassert solution(\"4 4\\n#.##\\n..X.\\n..X.\\n#.##\") == \"1 1 1 1 0\"\n\n\"\"\""
    },
    {
        "number": 4794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4 4\\n#..#\\n..X.\\n..X.\\n#XX#\") == \"1\\n1\\n2\\n1\\n0\"\n\n\"\"\"\n\nfrom itertools import product\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('213\\n1243\\n23\\n2312\\n1234') == '23235'\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"21^2 + 125^3\") == \"212\"\nassert solution(\"2^0 + 12^1 + 53^2\") == \"1953566\"\n\"\"\""
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"2\n212\n1253\"\"\"\n) == \"1953566\"\nprint(\"Test 1 OK\")\n\nassert solution(\"\"\"5\n23\n17\n43\n52\n22\"\"\"\n) == \"102\"\nprint(\"Test 2 OK\")\n\nassert solution(\"\"\"5\n20\n20\n40\n20\n40\"\"\"\n) == \"52\"\nprint(\"Test 3 OK\")\n\nassert solution(\"\"\"4\n1\n0\n10\n100\"\"\"\n) == \"11\"\nprint(\"Test 4 OK\")\n\nassert solution(\"\"\"1\n-1\"\"\"\n) == \"0\"\nprint(\"Test 5 OK\")"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n212\\n1253') == '1953566'\nassert solution('5\\n23\\n17\\n43\\n52\\n22') == '102'\n\"\"\"\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3') == '1 + 2 + 3 = 6'\nassert solution('4') == '4 = 4'\nassert solution('9 9 9 9 9 9') == '9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 = 81'\nassert solution('2 4 8 16 32') == '2 + 4 + 8 + 16 + 32 = 106'\nassert solution('3 9 27 81 243 729 14641 26791416357 1835694786 313842795 604208896') == '3 + 9 + 27 + 81 + 243 + 729 + 14641 + 26791416357 + 1835694786 + 313842795 + 604208896 = 16447697901'\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"212\\n1253\") == \"1953566\"\nassert solution(\"2\\n212\\n1253\") == \"1953566\"\nassert solution(\"5\\n23\\n17\\n43\\n52\\n22\") == \"102\"\n\nprint(solution(stdin.rstrip()))\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n12\\n1253') == '1953566'\nassert solution('5\\n23\\n17\\n43\\n52\\n22') == '102'\nprint('The local tests are done. Try Solution Online')\n"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"212\\n1253\") == \"1953566\"\nprint(solution(\"212\\n1253\"))\n\n\"\"\""
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n212\\n1253') == '1953566'\nassert solution('5\\n23\\n17\\n43\\n52\\n22') == '102'\nprint('The local tests are done. Click on \"Check\" for more details.')\n\"\"\"\n\nimport sys\n\nn = int(input())\n\nnumber_list = []\nfor i in range(n):\n    number_list.append(int(input()))"
    },
    {
        "number": 4795,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('212\\n1253') == '1953566'\nprint(solution(stdin))\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(print())"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.0 0.0 0.0\"\nassert solution(\"9 9 9\\n3 2 1\") == \"0.0 3.0 6.0\"\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.0 0.0 0.0\"\nprint(solution(\"9 9 9\\n3 2 1\"))"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 10 10\") == \"0.0 0.0 0.0\"\nassert solution(\"9 9 9\") == \"0.0 3.0 6.0\""
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 1 1') == '0.000000 0.000000 0.000000'\nassert solution('1 2 3') == '0.333333 0.666667 0.333333'\n\"\"\""
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.0 0.0 0.0\"\nassert solution(\"9 9 9\\n3 2 1\") == \"0.0 3.0 6.0\"\n\nprint(\"Success!\")\n\"\"\"\n\nimport sys\nimport os\n\nsys.path.append(os.path.join(os.path.dirname(__file__), \"../..\"))\n\nfrom utils import timeit\n"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str(input())) == str(print(...))"
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 10 10\\n3 2 1\") == \"0.000000 3.000000 6.000000\"\n\"\"\""
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n10 10 10\n3 3 3\n\"\"\") == \"\"\"\n0.000000 0.000000 0.000000\n\"\"\"\n\nassert solution(\n\"\"\"\n9 9 9\n3 2 1\n\"\"\") == \"\"\"\n0.000000 3.000000 6.000000\n\"\"\"\n\nassert solution(\n\"\"\"\n10 10 10\n3 3 5\n\"\"\") == \"\"\"\n0.000000 0.000000 5.000000\n\"\"\"\n\nassert solution(\n\"\"\"\n10 10 10\n3 2 6\n\"\"\") == \"\"\"\n0.000000 3.000000 3.000000\n\"\"\"\n\nassert solution(\n\"\"\"\n10 10 10\n1 4 6\n\"\"\") == \"\"\"\n1.000000 1.000000 1.000000\n\"\"\""
    },
    {
        "number": 4796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 10 10\\n3 3 3\") == \"0.0 0.0 0.0\"\n\"\"\""
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\nassert solution(\"ab<ca\") == \"ac\""
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\nassert solution('foss<rritun') == 'forritun'\n\nassert solution('') == ''\nassert solution('<') == ''\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(a<bc<) == 'b'\nassert solution(foss<<rritun) == 'forritun'\nassert solution(abc<<abc<<abc) == 'abcabcabc'\nassert solution(abc<abc<<abc) == 'abcabcabc'\n\"\"\"\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abc<def<ghi<jkl\") == \"defghi\"\nassert solution(\"a<b<c<d<e<f<g<h<i<j<k\") == \"hij\"\nassert solution(\"a<b<c<d<e<f<g<h<i<j<k<l\") == \"kl\"\nassert solution(\"a<b<c<d<e<f<g<h<i<j<k<l<m<n<o<p<q<r<s<t<u<v<w<x<y<z<<\") == \"wxyz\"\nassert solution(\"a<b<c<d<e<f<g<h<i<j<k<l<m<n<o<p<q<r<s<t<u<v<w<x<y<z\") == \"z\"\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n\nprint(\"Success\")\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nWrite 5 lines of code to test the correctness of solution:\n\nSample Input 1:\na<bc<\nSample Output 1:\nb\nSample Input 2:\nfoss<<rritun\nSample Output 2:\nforritun\n"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\nassert solution(\"a<b<c>d<e<f<g<h<i<j>k<l<m<n<o<p<q<r<s<t<u<v<w<x<y<z<\") == \"beforritun\"\nassert solution(\"ab<bc<cd<de<ef<fg<gh<hi<jk<kl<km<mn<no<pq<rs<tu<uv<wx<yz<\") == \"cdefghijklmnoprstuwxy\"\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"a<bc<\"), \"b\")\n        self."
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\n\"\"\""
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('a<bc<') == 'b'\nassert solution('foss<<rritun') == 'forritun'\n\nprint(solution('a<bc<'))\nprint(solution('foss<<rritun'))\n\nSolution:\n\na<bc<\n\nstdin = 'a<bc<'\n\na = stdin[0]\nbc = stdin[2:6]\n\nb = stdin.replace(bc, '')\nb = b.replace('<', '')\n\nprint(b)\n\nimport re"
    },
    {
        "number": 4797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"a<bc<\") == \"b\"\nassert solution(\"foss<<rritun\") == \"forritun\"\nassert solution(\"abc<def<ghi<jkl<mno<pqr<stu<vwx<yz<12<34\") == \"abcdefghijklmnopqrstuvwxyz1234\"\n\n\"\"\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('Knuth-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\n\nprint(solution(stdin.readline()))\n\n\"\"\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('Mirko-Slavko') == 'MS'\nassert solution('KMP') == 'KMP'\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\"\"\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\nprint(solution(\"Knuth-Morris-Pratt\"))\nprint(solution(\"Mirko-Slavko\"))\n\nSample Input 1:\nKaminsky-Kobayashi\nSample Output 1:\nKK\n\nSample Input 2:\nDawid-Tomaszewski\nSample Output 2:\nDT\n\nSample Input 1:\nDawid-Tomaszewski\nSample Output 1:\nDT\n\nSample Input 2:\nGalloway-Farley\nSample Output 2:\nGF\n\nSample Input 1:\nCzerny-Zajkowski\nSample Output 1:\nCZ\n\nSample Input 2:\nWojciech-Januszewski\nSample Output 2:\nWJ\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('Knuth-Morris-Pratt') == 'KMP'\nassert solution('Mirko-Slavko') == 'MS'\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\"\"\""
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('Mirko-Slavko') == 'MS'\nassert solution('Knuth-Morris-Pratt') == 'KMP'\n\"\"\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n"
    },
    {
        "number": 4798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Knuth-Morris-Pratt\") == \"KMP\"\nassert solution(\"Mirko-Slavko\") == \"MS\"\n\"\"\"\n\nimport string"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"3 1 0\") == \"Province or Gold\"\nassert solution(\"4 1 0\") == \"Province or Gold\"\nassert solution(\"5 1 0\") == \"Province or Gold\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"0 1 1\") == \"Province or Gold\"\nassert solution(\"2 0 1\") == \"Province or Gold\"\nassert solution(\"0 2 1\") == \"Province or Gold\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\n\"\"\""
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"2 2 0\") == \"Province or Gold\"\nassert solution(\"2 2 2\") == \"Province or Gold\"\n\n'''"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"2 0 1\") == \"Province or Gold\"\nassert solution(\"2 0 2\") == \"Province or Duchy\"\nassert solution(\"2 0 3\") == \"Province or Duchy\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\n\"\"\""
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"0 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1 0\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\n\n\"\"\""
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1 1\") == \"Estate or Copper\"\nassert solution(\"2 1 0\") == \"Province or Gold\"\nassert solution(\"2 0 0\") == \"Province or Gold\"\n\"\"\"\n"
    },
    {
        "number": 4799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 1 0') == 'Estate or Copper'\nassert solution('2 1 0') == 'Province or Gold'\nassert solution('2 1 1') == 'Province or Gold'\n\"\"\""
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.0\"\nassert solution(\"10 3\\n80 90\") == \"75.7142857\"\n\nprint(solution(input()))"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4\\n') == '6.5'\n'''\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.00\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 1\\n50 100\\n') == '75.7142857'\n\nassert solution('6 5\\n33 66\\n') == 'impossible'\n\nassert solution('6 5\\n60 33\\n') == 'impossible'\n\nprint('Success')\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 1\\n2 3') == 'impossible'\nassert solution('10 3\\n8 90') == '75.7142857'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 1\\n70 50') == '90.00'\nassert solution('10 3\\n80 90') == '75.7142857'\n"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1\\n70 50\\n') == '90.0\\n'\nassert solution('10 3\\n80 90\\n') == '75.7142857\\n'\n\n\"\"\""
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.00\"\n\n'''\n\nn, k = map(int, input().split())\nd, s = map(int, input().split())"
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\n70 50\") == \"90.0\"\nassert solution(\"10 3\\n80 90\") == \"75.7142857\"\n\"\"\""
    },
    {
        "number": 4800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1\\n70 50') == '90.00'\n\"\"\"\n\nn, k = list(map(int, input().split()))\nd, s = list(map(int, input().split()))"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 2 3 1 5 4 7 6\") == \"4 2 3 5 7\"\nassert solution(\"2 3 1 5 4 7 6\") == \"2 3 5 7\"\nassert solution(\"1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"1 2 3\") == \"1 2 3\"\nassert solution(\"1\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == '4\\n2 3 5 7'\n\"\"\""
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\n2 3 1 5 4 7 6') == '4\\n2 3 5 7'\nassert solution('5\\n1 2 3 4 5') == '5\\n1 2 3 4 5'\n\"\"\"\n\n\"\"\"\ninput()\nresult = ''\nl = len(input().split())\nresult = input().split()\nprint(l)\nprint(result)\n\"\"\""
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2, 3, 1, 5, 4, 7, 6') == '2, 3, 5, 7'\nassert solution('1, 2, 3, 4, 5') == '1, 2, 3, 4, 5'\nassert solution('2, 3, 1, 5, 4, 7, 6') == '2, 3, 5, 7'\nassert solution('1, 2, 3, 4, 5') == '1, 2, 3, 4, 5'\nassert solution('2, 3, 1, 5, 4, 7, 6') == '2, 3, 5, 7'\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"\n\nsolution()\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"\nassert solution(\"5\\n1 2 3 4 5\") == \"5\\n1 2 3 4 5\""
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2 3 1 5 7 6') == '2 3 5 7'\nassert solution('1 2 3 4 5') == '1 2 3 4 5'\n\"\"\"\n\n\"\"\"\nFor the first step, let N = 10,000. Now we consider the following N integers from 1 to N:\n\nN = 10,000\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\n11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90,\n91, 92, 93, 94, 95, 96, 97, 98, 99, 100,\n101, 102, 103, 104, 105, 106, 107, 108, 109, 110,\n111, 112, 113, 114, 115, 116, 117, 118, 119, 120,\n121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n131, 132, 133, 134, 135, 136, 137, 138, 139, 140,\n141, 142, 143, 144, 145, 146, 147, 148, 149, 150,\n151, 152, 153, 154, 155, 156, 157, 158, 159, 160,\n161, 162, 163, 164, 165, 166, 167, 168, 169, 170,\n171, 172, 173, 174, 175, 176, 177, 178, 179, 180,\n181, 182, 183, 184, 185, 186, 187, 188, 189, 190,\n191, 192, 193, 194, 195, 196, 197, 198, 199, 200,\n201, 202, 203, 204, 205, 206, 207, 208, 209, 210,\n211, 212, 213, 214, 215, 216, 217, 218, 219, 220,\n221, 222, 223, 224, 225, 226, 227, 228, 229, 230,\n231, 232, 233, 234, 235, 236, 237, 238, 239, 240,\n241, 242, 243, 244, 245, 246, 247, 248, 249, 250,\n251, 252, 253, 254, 255, 256, 257, 258, 259, 260,\n261, 262, 263, 264, 265, 266, 267, 268, 269, 270,\n271, 272, 273, 274, 275, 276, 277, 278, 279, 280,\n281, 282, 283, 284, 285, 286, 287, 288, 289, 290,\n291, 292, 293, 294, 295, 296, 297, 298, 299, 300,\n301, 302, 303, 304, 305, 306, 307, 308, 309, 310,\n311, 312, 313, 314, 315, 316, 317, 318, 319, 320,\n321, 322, 323, 324, 325, 326, 327, 328, 329, 330,\n331, 332, 333, 334, 335, 336, 337, 338, 339, 340,\n341, 342, 343, 344, 345, 346, 347, 348, 349, 350,\n351, 352, 353, 354, 355, 356, 357, 358, 359, 360,\n361, 362, 363, 364, 365, 366, 367, 368, 369, 370,\n371, 372, 373, 374, 375, 376, 377, 378, 379, 380,\n381, 382, 383, 384, 385, 386, 387, 388, 389, 390,\n391, 392, 393, 394, 395, 396, 397, 398, 399, 400,\n401, 402, 403, 404, 405, 406, 407, 408, 409, 410,\n411, 412, 413, 414, 415, 416, 417, 418, 419, 420,\n421, 422, 423, 424, 425, 426, 427, 428, 429, 430,\n431, 432, 433, 434, 435, 436, 437, 438, 439, 440,\n441, 442, 443, 444, 445, 446, 447, 448, 449, 450,\n451, 452, 453, 454, 455, 456, 457, 458, 459, 460,\n461, 462, 463, 464, 465, 466, 467, 468, 469, 470,\n471, 472, 473, 474, 475, 476, 477, 478, 479, 480,\n481, 482, 483, 484, 485, 486, 487, 488, 489, 490,\n491, 492, 493, 494, 495, 496, 497, 498, 499, 500,\n501, 502, 503, 504, 505, 506, 507, 508, 509, 510,\n511, 512, 513, 514, 515, 516, 517, 518, 519, 520,\n521, 522, 523, 524, 525, 526, 527, 528, 529, 530,\n531, 532, 533, 534, 535, 536, 537, 538, 539, 540,\n541, 542, 543, 544, 545, 546, 547, 548, 549, 550,\n551, 552, 553, 554, 555, 556, 557, 558, 559, 560,\n561, 562, 563, 564, 565, 566, 567, 568, 569, 570,\n571, 572, 573, 574, 575, 576, 577, 578, 579, 580,\n581, 582, 583, 584, 585, 586, 587, 588, 589, 590,\n591, 592, 593, 594, 595, 596, 597, 598, 599, 600,\n601, 602, 603, 604, 605, 606, 607, 608, 609, 610,\n611, 612, 613, 614, 615, 616, 617, 618, 619, 620"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3 1 5 4 7 6\") == \"4\"\nassert solution(\"1 2 3 4 5 6 7\") == \"5\"\n\nSolution.assert_solution(solution)\n"
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\n2 3 1 5 4 7 6\") == \"4\\n2 3 5 7\"\n\n\"\"\""
    },
    {
        "number": 4801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7 2 3 1 5 4 7 6\") == \"4 5 7\"\nassert solution(\"5 1 2 3 4\") == \"1 2 3 4\"\n\"\"\""
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\nprint('HERE')\nprint('HERE')\nprint('HERE')\nprint('HERE')\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\n\"\"\"\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\n\"\"\"\n\nfrom datetime import datetime, timedelta\n\nt = list(map(int, input().split()))\nh, m = t[0], t[1]\nt_str = datetime(2000, 1, 1, h, m)\nt_new = timedelta(minutes=45) + t_str\nprint(t_new.hour, t_new.minute)\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '0 10'\n) == '9 25'\nassert solution(\n    '12 30'\n) == '12 45'\n\"\"\"\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 10\") == \"9 25\"\n\"\"\""
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10 10') == '9 25'\nassert solution('0 30') == '23 45'\n\"\"\""
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\nprint('Success')\n\n----\nUsing the same input, we want to test the following cases:\n\n1. When the input time is at midnight. The output should be:\n\n21 45\n\n2. When the input time is at 00:00. The output should be:\n\n23 45\n\n3. When the input time is at 23:59. The output should be:\n\n2 45\n\n4. When the input time is at 23:59:45. The output should be:\n\n22 45\n\n5. When the input time is at 23:59:59. The output should be:\n\n22 45\n\n6. When the input time is at 23:59:59:45. The output should be:\n\n23 45\n\n7. When the input time is at 23:59:59:59. The output should be:\n\n22 45\n\n8. When the input time is at 00:00:00:45. The output should be:\n\n23 45\n\n9. When the input time is at 00:00:00:00. The output should be:\n\n23 45\n\n10. When the input time is at 00:00:00:00:45. The output should be:\n\n23 45\n\n11. When the input time is at 00:00:00:00:00. The output should be:\n\n23 45\n\n12. When the input time is at 00:00:00:00:00:45. The output should be:\n\n23 45\n\n13. When the input time is at 00:00:00:00:00:00. The output should be:\n\n23 45\n\n14. When the input time is at 00:00:00:00:00:00:45. The output should be:\n\n23 45\n\n15. When the input time is at 00:00:00:00:00:00:00. The output should be:\n\n23 45\n\n----\nSample Input 1:\n10 10\nSample Output 1:\n9 25\n\nSample Input 2:\n0 30\nSample Output 2:\n23 45\n\nSample Input 3:\n23 59\nSample Output 3:\n22 45\n\nSample Input 4:\n23 59 45\nSample Output 4:\n22 45\n\nSample Input 5:\n23 59 59 45\nSample Output 5:\n23 45\n\nSample Input 6:\n0 0 45\nSample Output 6:\n23 45\n\nSample Input 7:\n0 0 0 45\nSample Output 7:\n23 45\n\nSample Input 8:\n0 0 0 0 45\nSample Output 8:\n23 45\n\nSample Input 9:\n0 0 0 0 0 45\nSample Output 9:\n23 45\n\nSample Input 10:\n0 0 0 0 0 0 45\nSample Output 10:\n23 45\n\nSample Input 11:\n0 0 0 0 0 0 0 45\nSample Output 11:\n23 45\n\nSample Input 12:\n0 0 0 0 0 0 0 0 45\nSample Output 12:\n23 45\n\nSample Input 13:\n0 0 0 0 0 0 0 0 0 45\nSample Output 13:\n23 45\n\nSample Input 14:\n0 0 0 0 0 0 0 0 0 0 45\nSample Output 14:\n23 45\n\nSample Input 15:\n0 0 0 0 0 0 0 0 0 0 0 45\nSample Output 15:\n23 45\n\nSample Input 16:\n0 0 0 0 0 0 0 0 0 0 0 0 45\nSample Output 16:\n23 45\n\nSample Input 17:\n0 0 0 0 0 0 0 0 0 0 0 0 0 45\nSample Output 17:\n23 45\n\nSample Input 18:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 45\nSample Output 18:\n23 45\n\nSample Input 19:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 45\nSample Output 19:\n23 45\n\nSample Input 20:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 45\nSample Output 20:\n23 45\n\nSample Input 21:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 45\nSample Output 21:\n23 45\n\nSample Input 22:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 45\nSample Output 22:\n23 45\n\nSample Input 23:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 45\nSample Output 23:\n23 45\n\nSample Input 24:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 45\nSample Output 24:\n23 45\n\nSample Input 25:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 45\nSample Output 25:\n23 45\n\nSample Input 26:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 45\nSample Output 26:\n23 45\n\nSample Input 27:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 45\nSample Output 27:\n23 45\n\nSample Input 28:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 45\nSample Output 28:\n23 45\n\nSample Input 29:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 45\nSample Output 29:\n23 45\n\nSample Input 30:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 45\nSample Output 30:\n23 45\n\nSample Input 31:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 45\nSample Output 31:\n23 45\n\nSample Input 32:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 45\nSample Output 32:\n23 45\n\nSample Input 33:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 45\nSample Output 33:\n23 45\n\nSample Input 34:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 45\nSample Output 34:\n23 45\n\nSample Input 35:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 45\nSample Output 35:\n23 45\n\nSample Input 36:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 45\nSample Output 36:\n23 45\n\nSample Input 37:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 45\nSample Output 37:\n23 45\n\nSample Input 38:\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\nassert solution(\"23 59\") == \"22 44\"\n\"\"\"\n\nh1, m1 = map(int, stdin.split())\n"
    },
    {
        "number": 4802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 10\") == \"9 25\"\nassert solution(\"0 30\") == \"23 45\"\n\nprint('Test pass.')\n\n-----"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('0.36788') == '1.414214'\nassert solution('2.718281') == '1.414213'\nprint(solution(input()))\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('0.36788') == '0.984985'\nassert solution('2.718281') == '1.820190'"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\nassert solution('0.36788') == '0.36788'\nassert solution('0.007') == '0.007'\nassert solution('0.000001') == '0.000001'\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2.718281\") == \"1.414214\"\n\"\"\""
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1.000000') == '1.000000'\nassert solution('2.718281') == '1.414214'\nassert solution('0.36788') == '1.414214'\nassert solution('1.0') == '1.0'\nassert solution('2.0') == '1.414214'\n"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(2.3) == 1.0\nassert solution(1.0) == 1.0\nassert solution(2.0) == 1.41421\nassert solution(2.71828) == 2.718281\nassert solution(2.73) == 2.734408\n\"\"\""
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2.000000') == '1.414214'\nassert solution('1.000000') == '1.000000'\n\"\"\""
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2.000000\") == \"1.414214\"\nassert solution(\"1.000000\") == \"1.000000\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2.000000\") == \"1.414214\"\nassert solution(\"1.000000\") == \"1.000000\"\nassert solution(\"2.718281\") == \"1.018001\"\n\n\"\"\""
    },
    {
        "number": 4803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0.36788') == '1.414214'\nassert solution('2.718281') == '1.414213'\nassert solution('0.0000000001') == '0.0'\nassert solution('0.1') == '0.1'\nassert solution('2') == '1.414213'\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '3: 2,1'\nassert solution('50') == '50: 2,1 2,2 3,2 5,4 5,5 6,5 10,10 13,12 17,16 25,25'"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"3:\"\nassert solution(\"50\") == \"50:\"\nassert solution(\"2,1\") == \"2,1:\"\n\nassert solution(\"3,2\") == \"3,2:\"\nassert solution(\"3,4\") == \"3,4:\""
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"3: \\n2,1\"\nassert solution(\"50\") == \"50: \\n2,1\\n2,2\\n3,2\\n5,4\\n5,5\\n6,5\\n10,10\\n13,12\\n17,16\\n25,25\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '3:'+ '\\n'.join(['2,1', '2,2', '3,2'])\nassert solution('50') == '50:'+ '\\n'.join(['2,1', '2,2', '3,2', '5,4', '5,5', '6,5', '10,10', '13,12', '17,16', '25,25'])\n\n\"\"\""
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(3) == 3\nassert solution(50) == 50\n\n\"\"\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3') == '3:'\nassert solution('50') == '50:','solution(\"50\") == \"50:\", \"failed\"'\nprint('Success')"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"3:\", \"Wrong answer for 3\"\nassert solution(\"50\") == \"50:\", \"Wrong answer for 50\"\n\"\"\"\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == '3:\\\\n2,1\\\\n'\n\nassert solution('50') == '50:\\\\n2,1\\\\n2,2\\\\n3,2\\\\n5,4\\\\n5,5\\\\n6,5\\\\n10,10\\\\n13,12\\\\n17,16\\\\n25,25'\n"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3:\", \"WA1: Wrong output\"\nassert solution(\"50\") == \"50:\", \"WA2: Wrong output\"\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"3:\"\nassert solution(\"50\") == \"50:\"\nassert solution(\"100\") == \"100:\"\n\n----------------\n\n---------------------\n\"\"\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'no'\nassert solution('THERE IS NO ANSWER') == 'no'\nassert solution('THERE ARE NO ANSWER') == 'no'\nassert solution('THERE ARE NOT ANY ANSWER') == 'no'\nassert solution('THERE ARE NO ANSWERS') == 'no'\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('THE RAIN IN SPAIN') == 'yes'\nassert solution('IN THE RAIN AND THE SNOW') == 'no'\n\"\"\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\n\"\"\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('THE RAIN IN SPAIN') == 'yes'\nassert solution('IN THE RAIN AND THE SNOW') == 'no'\n\"\"\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nprint('Test pass.')\n\nprint(solution(\"THE RAIN IN SPAIN\"))\nprint(solution(\"IN THE RAIN AND THE SNOW\"))\n\n\"\"\""
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\""
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == 'yes'\nassert solution(\"IN THE RAIN AND THE SNOW\") == 'no'\nassert solution(\"THE RAIN IN SPAIN IN THE PLAIN\") == 'yes'\n\"\"\"\n"
    },
    {
        "number": 4805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"THE RAIN IN SPAIN\") == \"yes\"\nassert solution(\"IN THE RAIN AND THE SNOW\") == \"no\"\nprint(\"Successfully solved!\")\n\n\"\"\""
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\n\n\"\"\""
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\"\"\""
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"RRRRRBBBBLLLRRR\") == \"SSSSSKKKHCCCCC\"\nassert solution(\"RBRRRRBRRBRRBBLLLRRR\") == \"CHCSHHHHHSSSSSKKKHCCCCC\"\nassert solution(\"RBLLRBBLLLLRRRRR\") == \"CHCSHHHHHSSSSSKKKHCCCCC\"\nassert solution(\"RRRBBBLLRLLR\") == \"SSSKKKHCCCCCC\"\n\n\"\"\"\n\nimport re\nfrom collections import Counter\n\nregex = r\"\\b(\\w)\\1+\\b\"\n\ns = stdin\nc = Counter(re.findall(regex, s))"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('RBRR') == 'S'\nassert solution('RRLRR') == 'C'\nassert solution('RBRR') == 'S'\nassert solution('RRRR') == 'K'\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('RRBBBLLR') == 'SSKKKHHS'\nassert solution('RBLLLBRR') == 'CHCS'\n\"\"\"\n\ns = input().strip()\nans = ''\n\nwhile len(s) > 0:\n    if s[0] == 'R' and len(s) >= 2:\n        ans += 'S'\n        s = s[2:]\n    elif s[0] == 'S' and len(s) >= 2:\n        ans += 'K'\n        s = s[2:]\n    elif s[0] == 'B' and len(s) >= 2:\n        ans += 'C'\n        s = s[2:]\n    elif s[0] == 'C' and len(s) >= 2:\n        ans += 'H'\n        s = s[2:]\n    else:\n        break\n\nprint(ans)\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\""
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\nprint(\"Success\")\n\n'''\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\nprint(\"Tests passed.\")\n\n\"\"\""
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"RRBBBLLR\") == \"SSKKKHHS\"\nassert solution(\"RBLLLBRR\") == \"CHCS\"\n\"\"\"\n"
    },
    {
        "number": 4806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"RRRRRRRRRBBBBBBBBBB\") == \"S\"\nassert solution(\"RRRRRRRRRBBBBBBBBBBBBBBBB\") == \"S\"\nassert solution(\"RBRRRRRRRRBBBBBBBBBB\") == \"R\"\nassert solution(\"RBRRRRRRRRBBBBBBBBBBBB\") == \"R\"\nassert solution(\"RRRRRRRRRBBBBBBBBBBBB\") == \"R\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 7\\n\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n\"\nassert solution(\"2 4 7\\n\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\\n\"\n\nprint('Success')\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\"\nassert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\"\nassert solution(\"2 4 19\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n9\\nFizzBuzz\\n17\"\nassert solution(\"2 3 5\") == \"1\\nFizz\\n3\\nFizz\\n5\"\nassert solution(\"2 3 19\") == \"1\\nFizz\\n3\\nFizz\\n19\""
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 7\") == \"\"\"1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7\"\"\"\nassert solution(\"2 4 7\") == \"\"\"1\nFizz\n3\nFizzBuzz\n5\nFizz\n7\"\"\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 2\") == \"1\"\nassert solution(\"1 1 3\") == \"Fizz\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3 7\") == \"\"\"1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7\"\"\"\n\nassert solution(\"2 4 7\") == \"\"\"1\nFizz\n3\nFizzBuzz\n5\nFizz\n7\"\"\"\n\"\"\"\nProblem Description\n\nWrite a program that, given an integer number $N$, computes the first $n$ Fibonacci numbers.\n\nFibonacci numbers are the numbers in the following integer sequence:\n\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, \u2026\n\nThe Fibonacci numbers are defined as follows:\n\n$F_0=0$\n$F_1=1$\n$F_{n+1}=F_n+F_{n-1}$ for all $n\\ge 0$\n\nNote that the first Fibonacci number $F_0=0$ is not to be included in the above sequence.\n\nGiven an integer $N$, implement a function that returns the first $N$ Fibonacci numbers.\n\nYou are guaranteed that $N$ will be a positive integer, and that $N\\ge 0$.\n\nExamples:\n\n1. Given $N=1$, your function should return $F_1=1$\n2. Given $N=4$, your function should return $F_4=3$\n3. Given $N=20$, your function should return $F_{20}=6765$\n\n\n\n\"\"\""
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\""
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3 7\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\"\nassert solution(\"2 4 7\") == \"1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7\"\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3 7\\n\") == \"1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7\\n\"\n\"\"\""
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 7\\n') == '1\\nFizz\\nBuzz\\nFizz\\n5\\nFizzBuzz\\n7'\nassert solution('2 4 7\\n') == '1\\nFizz\\n3\\nFizzBuzz\\n5\\nFizz\\n7'\n\"\"\"\n"
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3 7\\n\") == \"\"\"1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7\"\"\""
    },
    {
        "number": 4807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''2 3 7''') == '''1\nFizz\nBuzz\nFizz\n5\nFizzBuzz\n7'''\nassert solution('''2 4 7''') == '''1\nFizz\n3\nFizzBuzz\n5\nFizz\n7'''\n\"\"\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2\\n3 3 3 2') == \"It hadn't snowed this early in 3 years!\"\nassert solution('2 10\\n0 100') == \"It hadn't snowed this early in 0 years!\"\n\n\"\"\"\nfrom typing import List, Dict, Tuple, Optional, Union\nimport collections\nimport itertools\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'\n\"\"\""
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'\n\nprint(solution('4 2\\n3 3 3 2'))\nprint(solution('2 10\\n0 100'))\n\"\"\"\n\n\"\"\"\nBig-O: O(n log n)\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is 1. The algorithm takes O(n log n) time, because it does a sort and runs a binary search on the array.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is 2. The algorithm takes O(n log n) time, because it does a sort and runs a binary search on the array.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is 0. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n-1. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n+1. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n+2. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n+3. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n+4. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n+5. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n+6. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n+7. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n+8. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n+9. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n+10. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n+11. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n+12. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n+13. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n+14. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n+15. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n+16. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n+17. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n+18. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n+19. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n+20. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n+21. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n+22. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n+23. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n+24. The algorithm takes O(n) time, because it just iterates through the array once.\n\nThe worst case scenario is an array of size n where the gap between the last element and the first element is n+25. The algorithm takes O(n) time, because it"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    '4 2\\n'\n    '3 3 3 2\\n'\n    ) == 'It hadn\\'t snowed this early in 3 years!'\n\nassert solution(\n    '2 10\\n'\n    '0 100\\n'\n    ) == 'It hadn\\'t snowed this early in 0 years!'\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\nassert solution(\"0 100\") == \"It hadn't snowed this early in 0 years!\"\nassert solution(\"100 100\") == \"It hadn't snowed this early in 0 years!\"\n\nimport sys\n\ntry:\n    n, m = [int(x) for x in sys.stdin.readline().split()]\nexcept:\n    raise Exception(\"input format error\")\n\na = [int(x) for x in sys.stdin.readline().split()]\n\nimport itertools"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\nassert solution(\"2 10\\n0 100\") == \"It hadn't snowed this early in 0 years!\"\n\"\"\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'\nassert solution('1 1\\n1') == 'It had never snowed this early!'\nassert solution('1 2\\n2 3') == 'It had never snowed this early!'\nassert solution('2 1\\n1') == 'It had never snowed this early!'\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 2\\n3 3 3 2\") == \"It hadn't snowed this early in 3 years!\"\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 2\\n3 3 3 2') == 'It hadn\\'t snowed this early in 3 years!'\nassert solution('2 10\\n0 100') == 'It hadn\\'t snowed this early in 0 years!'\n"
    },
    {
        "number": 4808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 2\\n3 3 3 2') == \"It hadn't snowed this early in 3 years!\"\nassert solution('2 10\\n0 100') == \"It hadn't snowed this early in 0 years!\"\n\"\"\"\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('12, 7') == '7'\nassert solution('2, 9') == '1'\nassert solution('10, 20') == '10'\nassert solution('9, 16') == '9'\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 10\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9\n0 1\n2 3\n4 5\n6 7\n8 9"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 2') == '7'\nassert solution('10 10') == '2'\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 2\") == 2\n\"\"\"\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('10 2') == '2'\nassert solution('10 10') == '7'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3') == '2'\nassert solution('7 9') == '7'\nassert solution('1 9') == '1'\nassert solution('7 10') == '2'\nassert solution('10 5') == '3'\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 2\") == \"2\"\nassert solution(\"10 10\") == \"7\""
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 2') == 2\n\n\"\"\""
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1'\nassert solution('4\\n') == '1'\nassert solution('2\\n') == '2'\nassert solution('3\\n') == '3'\n"
    },
    {
        "number": 4809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 2\") == \"7\"\n\n\"\"\"\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\n\"\"\"\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\nassert solution('bokko') == 'bokko'\nassert solution('koksiku') == 'koksiku'\nassert solution('kooko') == 'kooko'\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\n\"\"\"\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\nprint('Success')\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\nassert solution('qqqqqqqq') == 'qqqqqqqq'\nassert solution('eetcode') == 'eetcode'\nassert solution('uulacdedfr') == 'uulacdedfr'\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('bok') == 'bok'\nassert solution('koaski') == 'kakosi'\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nprint('Success')"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"bokko\") == \"bokko\"\nassert solution(\"fvadsfgkvsbfyafjvbnm\") == \"fvadsfgkvsbfyafjvbnm\"\nassert solution(\"aabbccdd\") == \"aabbccdd\"\n\"\"\"\n\nimport numpy as np\n\ninput_ = input()\n\nr, c = int(np.ceil(len(input_) ** 0.5)), len(input_) // 2 + 1\nm = np.array([list(input_[:c])] * r, dtype=str).T\n\ncol = m.shape[1]\ncol_iter = iter(range(col))\nrow = m.shape[0]\nrow_iter = iter(range(row))\n\nfor j in col_iter:\n    for i in row_iter:\n        print(m[i][j], end=\"\")\n    print()\n"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4810,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"bok\") == \"bok\"\nassert solution(\"koaski\") == \"kakosi\"\nassert solution(\"sladoz\") == \"sladoz\"\nassert solution(\"qwertyuiop\") == \"qwertyuiop\"\nassert solution(\"abcd\") == \"abcd\"\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n3\\n5\\n6\\n1\\n1') == '3 2'\n\"\"\""
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == (0, 0)\nassert solution('7') == (1, 1)\nassert solution('4') == (1, 1)\nassert solution('16') == (4, 1)\nassert solution('30') == (5, 2)\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"8 2\"\nassert solution(\"7\") == \"8 3\""
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n2\") == \"4 2\"\nassert solution(\"15\\n4\") == \"16 2\"\nassert solution(\"34\\n8\") == \"32 4\"\nassert solution(\"5\\n2\") == \"5 2\"\nassert solution(\"100\\n1\") == \"101 2\"\n\"\"\""
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2') == '1 2'\nassert solution('6\\n2') == '2 3'\n\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('6') == '8 2'\nassert solution('7') == '8 3'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6') == '8 2'\nassert solution('7') == '8 3'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\n') == '8 2'\nassert solution('7\\n') == '8 3'\n\"\"\""
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"0 1\"\nassert solution(\"4\\n2\") == \"2 2\"\nassert solution(\"6\\n2\") == \"2 0\"\nassert solution(\"7\\n4\") == \"4 3\"\n\"\"\"\n"
    },
    {
        "number": 4811,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6') == '8 2'\nassert solution('7') == '8 3'\n\"\"\"\n\nfrom math import ceil, log2\n\nK = int(stdin.readline().strip())"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"stair\") == \"YES\"\nassert solution(\"drought\") == \"NO\"\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nlines = []\nfor line in stdin:\n    lines.append(line.rstrip('\\n'))\n\nword = lines[0]\n\n_rhyme_ = \"erres airs ears ares aires eet eat\".split(\" \")\n_rhyme_ += \"apples and pears plates of meat difficult route\".split(\" \")\n_rhyme_ += \"tasty sprout forever in doubt\".split(\" \")\n_rhyme_ += \"aught ought aut acht\".split(\" \")\n_rhyme_ += \"ought oubt outte out oute\".split(\" \")\n\nfor line in lines[2:5]:\n    print(\"YES\" if line in _rhyme_ else \"NO\")\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('chairs') == 'NO'\nassert solution('pales') == 'YES'\nassert solution('tasty') == 'YES'\nassert solution('drought') == 'NO'\nassert solution('apple') == 'NO'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"stairs\") == \"YES\"\nassert solution(\"drought\") == \"YES\"\nassert solution(\"dove\") == \"NO\"\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(example_1) == example_2\n"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('drought') == 'NO'\nassert solution('stairs') == 'YES'\n\"\"\""
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\nstairs\n2\nerres airs ears ares aires\neet eat\n2\napples and pears\nplates of meat\n''') == '''\nYES\nNO\n'''\n\nassert solution('''\ndrought\n2\naught ought aut acht\nought oubt outte out oute\n5\ntasty sprout\ndifficult route\nworried and frantic\nforever in doubt\napples and pears\n''') == '''\nYES\nYES\nYES\nYES\nNO\n'''\n\nassert solution('''\ntimetable\n3\nprepositions in\nan allen twain\na lloyd\nA v.v.\n7\nin of to\nan o'\na p.p.\nA v.v.\nin on\nof is at\nA v.v.\nin in\nA v.v.\nA v.v.\n''') == '''\nYES\nNO\nYES\n'''\n\nassert solution('''\ndictionary\n2\neres\nairs\nares\naires\neet\neat\n2\napples and pears\nplates of meat\n''') == '''\nYES\nNO\n'''\n\nassert solution('''\nelvis\n3\nouch\naros\naris\neet\neat\n2\napples and pears\nplates of meat\n''') == '''\nYES\n'''"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('stairs') == 'YES'\n\"\"\"\n\nfrom typing import List, Tuple\nfrom collections import defaultdict\nfrom itertools import chain"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('stairs', 2, ['erres', 'airs', 'ares'], ['eet', 'eat'], 2, ['apples and pears', 'plates of meat']) == ['YES', 'NO']\nassert solution('drought', 2, ['aught', 'ought', 'aut', 'acht'], ['ought', 'outte', 'out', 'oute'], 5, ['tasty sprout', 'difficult route', 'worried and troubled', 'forever in doubt', 'apples and pears']) == ['YES', 'YES', 'YES', 'NO', 'NO']\n\n\"\"\"\n\nimport sys\nimport re\nfrom typing import List"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"stairs\") == \"NO\"\nassert solution(\"drought\") == \"NO\"\nassert solution(\"durft\") == \"YES\"\n\"\"\"\nimport sys\n\nfor line in sys.stdin:\n    if line == \"\":\n        break\n\n    word = line.strip()\n\n    for _ in range(int(sys.stdin.readline())):\n        ends = sys.stdin.readline().strip().split()\n        for e in ends:\n            if word.endswith(e):\n                break\n        else:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")"
    },
    {
        "number": 4812,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''\ni am\n2\nerres\nares\naires\neres\nere\nrees\neet\neat\na\nears\nare\n''') == '\\n'.join(['YES', 'NO', 'YES', 'NO', 'YES', 'NO', 'YES', 'YES', 'YES', 'NO'])\n\nassert solution('''\na\n2\nerres\nares\naires\neres\nere\nrees\neet\neat\na\nears\nare\n''') == '\\n'.join(['NO', 'YES', 'NO', 'YES', 'NO', 'YES', 'NO', 'YES', 'NO', 'YES'])\n\nassert solution('''\ndr\n2\nought\noutte\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout\noute\nout"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'LOSE'\nassert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(HANGMAN) == \"WIN\"\nassert solution(BANANA) == \"LOSE\""
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    'HANGMAN'\n) == 'WIN'\nassert solution(\n    'BANANA'\n) == 'LOSE'\n\"\"\""
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\nassert solution(HANGMAN) == \"WIN\"\nassert solution(BANANA) == \"LOSE\"\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\nassert solution(\"H\") == \"WIN\"\nassert solution(\"B\") == \"LOSE\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\") == 'WIN'\nassert solution(\"BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ\\n\") == 'LOSE'\n\"\"\"\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"HANGMAN\") == \"WIN\"\nassert solution(\"BANANA\") == \"LOSE\"\nassert solution(\"ABBBAAAA\") == \"LOSE\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"WIN\"\nassert solution(\"ABCDEGFGHIJKLMNOPQRSTUVWXYZ\") == \"WIN\"\n"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('HANGMAN\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'WIN'\nassert solution('BANANA\\nABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'LOSE'\n\"\"\"\n\nimport string\n\nword = stdin[0][:-1]\nchars = stdin[1][:-1]"
    },
    {
        "number": 4813,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('HANGMAN') == 'WIN'\nassert solution('BANANA') == 'LOSE'\nassert solution('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'WIN'\nassert solution('ZYXWVUTSRQPONMLKJIHGFEDCBA') == 'LOSE'\n\nprint('all tests passed.')\n\n\"\"\"\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\nassert solution(\"1\\nHOPE\") == \"INCREASING\"\nassert solution(\"1\\nALI\") == \"DECREASING\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n\"\"\""
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\nprint(\"Success!\")\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\nprint(solution(\"5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM\"))\nprint(solution(\"11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\"))"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\nassert solution('5\\nBOB\\nJOE\\nAL\\nADAM') == 'INCREASING'\nassert solution('8\\nBOB\\nJOE\\nAL\\nADAM\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\nassert solution('2\\nAL\\nBOB') == 'INCREASING'\n"
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"JOE\\nBOB\\nANDY\\nAL\\nADAM\") == \"DECREASING\"\nassert solution(\"ALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN\") == \"NEITHER\"\n\"\"\""
    },
    {
        "number": 4814,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\nassert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\nassert solution('11\\nHOPE\\nALI\\nBECKY\\nJULIE\\nMEGHAN\\nLAUREN\\nMORGAN\\nCARLI\\nMEGAN\\nALEX\\nTOBIN') == 'NEITHER'\nassert solution('5\\nJOE\\nBOB\\nANDY\\nAL\\nADAM') == 'DECREASING'\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 10 13\") == \"George wins!\"\nassert solution(\"4 10 13\") == \"Nina wins!\"\nassert solution(\"3 10 11\") == \"No winner!\"\nassert solution(\"3 10 12\") == \"No winner!\"\nassert solution(\"3 10 11\") == \"No winner!\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\"\nassert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"Nina wins!\\nJess wins!\\nNina wins!\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\"\nassert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"Nina wins!\\nJess wins!\\nNo winner!\"\nprint('Success')"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1') == 'George wins!\\nNina wins!\\nJess wins!'\nassert solution('4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2') == 'Nina wins!\\nJess wins!\\nNo winner!'\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nNina wins!\\nJess wins!\"\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 10 13\") == \"George wins!\"\nassert solution(\"4 10 13\") == \"Nina wins!\"\n\"\"\""
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"George wins!\\nJess wins!\\n\"\nprint('Success')\n\n-----\n"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\n') == 'George wins!\\nNina wins!\\nJess wins!'\nassert solution('4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\\n') == 'Nina wins!\\nJess wins!\\n'"
    },
    {
        "number": 4815,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 10 13\\nJohn\\nKelly\\nGeorge\\nKelly 1\\nGeorge 2\\nKelly 1\\nJohn 2\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\\nGeorge 3\\nGeorge 1\\nJohn 3\\nKelly 3\\nKelly 1\") == \"\"\"George wins!\nJess wins!\nNo winner!\"\"\"\n\nassert solution(\"4 10 13\\nBob\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"\"\"Nina wins!\nJess wins!\nNo winner!\"\"\"\n\nassert solution(\"3 10 13\\nNina\\nJess\\nTim\\nNina 2\\nBob 2\\nNina 1\\nJess 3\\nBob 2\\nJess 2\\nNina 1\\nJess 2\\nNina 3\\nBob 1\\nNina 3\\nJess 3\\nBob 2\") == \"\"\"Jess wins!\nNina wins!\nNo winner!\"\"\"\n\n\"\"\"\nI couldn't come up with any solution on my own, but then I found this one:\nhttps://www.youtube.com/watch?v=H8KAL9rY6Gw\nand it is a nice video, if you like it, I will be grateful if you can upvote it and leave a comment!\n\nThis solution is very clever, so I have no doubt that it is not my own solution, but I'm happy if you like it!\n\"\"\"\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n\nSample Input 1:\n5 2 7 7 5\nSample Output 1:\n3.0\n\nSample Input 2:\n8 -1 1 0 1 4\nSample Output 2:\n5.0\n\nSample Input 1:\n5 -3 1 7 5\nSample Output 1:\n8.0\n\nSample Input 2:\n9 -3 1 1 3\nSample Output 2:\n5.0\n\nSample Input 1:\n8 -2 1 5 4\nSample Output 1:\n5.0\n\nSample Input 2:\n10 0 0 3 6\nSample Output 2:\n4.0\n\nSample Input 1:\n7 -1 -5 7 7\nSample Output 1:\n5.0\n\nSample Input 2:\n7 4 -2 1 4\nSample Output 2:\n2.0\n\nSample Input 1:\n9 -4 -3 1 3\nSample Output 1:\n4.0\n\nSample Input 2:\n9 9 -4 -3 1\nSample Output 2:\n4.0\n\nSample Input 1:\n8 -4 -2 1 3\nSample Output 1:\n3.0\n\nSample Input 2:\n8 3 -3 2 -1\nSample Output 2:\n4.0\n\nSample Input 1:\n5 7 -3 0 4\nSample Output 1:\n5.0\n\nSample Input 2:\n5 3 0 0 7\nSample Output 2:\n4.0\n\nSample Input 1:\n8 -1 -3 0 4\nSample Output 1:\n3.0\n\nSample Input 2:\n8 -3 0 -5 1\nSample Output 2:\n4.0\n\nSample Input 1:\n8 -1 -4 0 4\nSample Output 1:\n4.0\n\nSample Input 2:\n9 -3 -4 1 1\nSample Output 2:\n4.0\n\nSample Input 1:\n-1 7 1 3 9\nSample Output 1:\n6.0\n\nSample Input 2:\n-2 8 -4 -5 1\nSample Output 2:\n8.0\n\nSample Input 1:\n-2 -3 0 -2 -1\nSample Output 1:\n2.0\n\nSample Input 2:\n-3 -3 0 -2 1\nSample Output 2:\n2.0\n\nSample Input 1:\n-2 -6 3 -5 3\nSample Output 1:\n1.0\n\nSample Input 2:\n-1 -3 2 -1 3\nSample Output 2:\n1.0\n\nSample Input 1:\n-3 -2 3 -5 -2\nSample Output 1:\n3.0\n\nSample Input 2:\n-1 -3 2 0 4\nSample Output 2:\n3.0\n\nSample Input 1:\n0 -5 0 0 7\nSample Output 1:\n7.0\n\nSample Input 2:\n7 -3 2 -1 7\nSample Output 2:\n3.0\n\nSample Input 1:\n8 1 -4 0 -1\nSample Output 1:\n4.0\n\nSample Input 2:\n4 1 -2 0 1\nSample Output 2:\n2.0\n\nSample Input 1:\n8 -6 -2 0 -1\nSample Output 1:\n4.0\n\nSample Input 2:\n8 -3 -2 0 1\nSample Output 2:\n2.0\n\nSample Input 1:\n3 -1 2 -1 -2\nSample Output 1:\n2.0\n\nSample Input 2:\n3 -1 0 2 -2\nSample Output 2:\n2.0\n\nSample Input 1:\n4 -2 -1 1 3\nSample Output 1:\n3.0\n\nSample Input 2:\n5 0 0 -1 1\nSample Output 2:\n2.0\n\nSample Input 1:\n1 -5 -4 3 -1\nSample Output 1:\n1.0\n\nSample Input 2:\n0 -4 -3 3 -2\nSample Output 2:\n4.0\n\nSample Input 1:\n-1 2 -2 -4 -2\nSample Output 1:\n4.0\n\nSample Input 2:\n-3 -4 -5 -1\nSample Output 2:\n4.0\n\nSample Input 1:\n4 -4 -2 -3 1\nSample Output 1:\n4.0\n\nSample Input 2:\n0 -4 -2 -3 1\nSample Output 2:\n2.0\n\nSample Input 1:\n-1 -4 -5 -2\nSample Output 1:\n4.0\n\nSample Input 2:\n-1 -2 -3 -4\nSample Output 2:\n2.0\n\nSample Input 1:\n-1 5 -4 3 -2\nSample Output 1:\n1.0\n\nSample Input 2:\n-1 1 -3 -4 -2\nSample Output 2:\n2.0\n\nSample Input 1:\n-1 -3 0 4 -2\nSample Output 1:\n3.0\n\nSample Input 2:\n-1 1 -3 0 4\nSample Output 2:\n3.0\n\nSample Input 1:\n-1 -2 0 4 -2\nSample Output 1:\n2.0\n\nSample Input 2:\n-1 -3 2 0 4\nSample Output 2:\n3.0\n\nSample Input 1:\n-1 -4 -5 -2\nSample Output 1:\n4.0\n\nSample Input 2:\n-1 -4 -5 -2\nSample Output 2:\n4.0\n\nSample Input 1:\n-1 2 -2 -3 1\nSample Output 1:\n4.0\n\nSample Input 2:\n-1 2 -2 -3 1\nSample Output 2:\n4.0\n\nSample Input 1:\n-1 2 -2 3 1\nSample Output 1:\n4.0\n\nSample Input 2:\n-1 2 -2 3 1\nSample Output 2:\n4.0\n\nSample Input 1:\n-1 2 0 3 -2\nSample Output 1:\n4.0\n\nSample Input 2:\n-1 2 0 3 -2\nSample Output 2:\n4.0\n\nSample Input 1:\n0 0 -5 3 4\nSample Output 1:\n3.0\n\nSample Input 2:\n0 -4 0 3 4\nSample Output 2:\n4.0\n\nSample Input 1:\n-2 -1 0 3 4\nSample Output 1:\n4.0\n\nSample Input 2:\n-2 -1 0 3 4\nSample Output 2:\n4.0\n\nSample Input 1:\n1 -2 0 3 -2\nSample Output 1:\n3.0\n\nSample Input 2:\n1 -2 0 3 -2\nSample Output 2:\n3.0\n\nSample Input 1:\n0 -3 0 3 -2\nSample Output 1:\n4.0\n\nSample Input 2:\n0 -3 0 3 -2\nSample Output 2:\n4.0\n\nSample Input 1:\n-1 3 0 -2 4\nSample Output 1:\n2.0\n\nSample Input 2:\n-1 3 0 -2 4\nSample Output 2:\n2.0\n\nSample Input 1:\n-1 3 -4 -5 -2\nSample Output 1:\n5.0\n\nSample Input 2:\n-1 3 -4 -5 -2\nSample Output 2:\n5.0\n\nSample Input 1:\n-3 5 0 2 -1\nSample Output 1:\n5.0\n\nSample Input 2:\n-3 5"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''7 3 0 0 5 4''') == '2.0'\n\"\"\"\n\nfrom sys import stdin, stdout\nimport math\n\ninput = stdin.readline\n\nx, y, x1, y1, x2, y2 = map(int, input().split())\n\nside_a = math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\nside_b = math.sqrt((x1 - x)**2 + (y1 - y)**2)\nside_c = math.sqrt((x2 - x)**2 + (y2 - y)**2)"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''7 3 0 0 5 4''') == '2.0'\nassert solution('''6 0 0 2 7 6''') == '2.0'\n\n-----Explanation-----\nIn the first test case, the point is at $(7, 3)$ and the house is located at $(3, 5)$.\nThe minimum distance is $\\sqrt{13} = 2.828$ and it is reached at $(x, y)$ with the rope of length $2$.\nIn the second test case, the point is at $(6, 0)$ and the house is located at $(0, 2)$.\nThe minimum distance is $\\sqrt{8} = 2.828$ and it is reached at $(x, y)$ with the rope of length $2$.\n'''\n\nimport math\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\n\"\"\""
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"7 3 0 0 5 4\") == \"2.0\"\nassert solution(\"6 0 0 2 7 6\") == \"2.0\"\nassert solution(\"7 0 0 2 7 6\") == \"2.0\"\nassert solution(\"7 0 0 2 7 6\") == \"2.0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('2') == 2.0\nassert solution('7 3 0 0 5 4') == 2.0\nassert solution('6 0 0 2 7 6') == 2.0\n\nimport math\nassert solution('7 3 0 0 5 4') == 2.0\n"
    },
    {
        "number": 4816,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('7 3 0 0 5 4') == '2.0'\nassert solution('6 0 0 2 7 6') == '2.0'\n\"\"\"\n\nimport math\nfrom decimal import Decimal"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('330') == '0'\nassert solution('156') == '165'\n\nprint(solution(stdin.readline().strip()))\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"123\") == \"132\"\nassert solution(\"01234\") == \"1234\"\nassert solution(\"456\") == \"579\"\nassert solution(\"09\") == \"9\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('15') == '16'\nassert solution('3') == '0'\n\"\"\""
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('12') == '13'\nassert solution('1') == '0'\nassert solution('0') == '0'\nassert solution('1111') == '1112'\nassert solution('1011') == '1012'\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('156') == '165'\nassert solution('330') == '0'\n\"\"\"\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('156') == '165'\nassert solution('330') == '0'\n\"\"\""
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"156\") == \"165\"\nassert solution(\"330\") == \"0\"\nprint('All tests passed.')\n\n\"\"\""
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('213') == 213\nassert solution('101') == 101\nassert solution('122') == 121\nassert solution('111') == 110\nassert solution('123') == 132\n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('156') == '165'\nassert solution('330') == '0'\nprint('All tests passed.')\n\n\u0417\u0430\u0434\u0430\u0447\u0430 10\n\u041e\u0434\u043d\u0430 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e. \n\u041d\u0443\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u044b \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c, \u0444\u0430\u043c\u0438\u043b\u0438\u0435\u0439, \u043e\u043a\u043b\u0430\u0434\u043e\u043c, \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u043c \u043e\u0442 \u043e\u043a\u043b\u0430\u0434\u0430, \n\u0438 \u0441\u0442\u0430\u0442\u0443\u0441\u043e\u043c (\u0434\u043e\u043b\u0436\u0435\u043d \u043b\u0438 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a \u0438\u043c\u0435\u0442\u044c \u0434\u0435\u043b\u043e \u0441 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u043c). \n\u041e\u0431\u0449\u0438\u0439 \u043e\u043a\u043b\u0430\u0434 \u0434\u0435\u043b\u0435\u0433\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430\u043c \u043f\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044e \u043f\u043e \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438. \n\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438\u043c\u0435\u0435\u0442 \u043e\u043a\u043b\u0430\u0434 \u043c\u0435\u043d\u0435\u0435 20 \u0442\u044b\u0441., \n\u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0438\u0445 \u0438\u043c\u0435\u043d\u0430, \u0444\u0430\u043c\u0438\u043b\u0438\u0438 \u0438 \u043e\u043a\u043b\u0430\u0434 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430.\n\nclass Worker:\n    def __init__(self, name, surname, salary, percent, text):\n        self.name = name\n        self.surname = surname\n        self.salary = salary\n        self.percent = percent\n        self.text = text\n        self.full_salary = salary + (salary * (percent/100))\nclass Company:\n    def __init__(self, name):\n        self.name = name\n        self.list_of_workers = []\n    def add_worker(self, worker):\n        self.list_of_workers.append(worker)\n    def count_salary(self):\n        salary_list = []\n        for worker in self.list_of_workers:\n            if worker.full_salary < 20000:\n                salary_list.append(worker.name + \" \" + worker.surname)\n        return print(*salary_list, sep = \", \")\n        \n"
    },
    {
        "number": 4817,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6\") == \"9\"\nassert solution(\"85\") == \"95\"\nassert solution(\"1\") == \"9\"\nassert solution(\"99\") == \"99\"\nassert solution(\"0\") == \"0\"\n\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    \"\"\"\n    Finds the smallest number larger than X consisting of the same digits as X\n    \"\"\"\n    def solution(self, x):\n        \"\"\"\n        :type x: str\n        :rtype: str\n        \"\"\"\n        for i in range(1,10000000):\n            if sorted(str(x)) == sorted(str(i)):\n                return i\n        return \"0\"\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        "
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000') == '4'\nassert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000') == '3'\n\n---- Notes ----\n- Task can take more than one quiet interval\n\n'''\nimport sys"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000\n''') == '4'\n\n'''\n    If a task is specified by an interval $[t_1, t_2]$, we can split it into a first part $[t_1, t_2]$ where music is not playing and a second part $[t_{2+}, t_2]$ where music is playing.\n\n    When a quiet interval $[\\ell_1, \\ell_2]$ is specified, we split it into a first part $[\\ell_1, \\ell_2]$ where music is not playing and a second part $[\\ell_{2+}, \\ell_2]$ where music is playing.\n\n    We can determine which task is the most competitive when we compare the number of tasks that can be accomplished when music is not playing (the first part of the interval) and music is playing (the second part of the interval). If music is playing, then we only need to complete the task with the smallest start time (that is, the shortest task).\n\n    In the example below, if there are 4 tasks and 4 quiet intervals, the maximum number of tasks that Zac can complete is 3, as we can split the 4th task into two thirds each, each with music playing on one half and music not playing on the other.\n    \n    Given a list of times $t_ i$ (in milliseconds) that each task will take and a list of times $\\ell _ j$ (in milliseconds) specifying the lengths of the intervals when no music is playing, what is the maximum number of tasks that Zac can complete?\n'''\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000') == '4'\nassert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000') == '3'\nassert solution('5 5\\n10 20000 120000 100000\\n100000 1020000 110000\\n100000 1020000 101000\\n100000 1020000 101000\\n100000 1020000 101000') == '4'\nassert solution('5 5\\n10 20000 120000 100000\\n100000 1020000 110000\\n100000 1020000 101000\\n100000 1020000 101000\\n100000 1020000 101000') == '4'\nassert solution('5 5\\n100 5002\\n200 12003\\n300 18004\\n400 30000\\n500 20001') == '1'\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open(\"inputs/input1.txt\").read()) == \"4\"\nassert solution(open(\"inputs/input2.txt\").read()) == \"3\"\nassert solution(open(\"inputs/input3.txt\").read()) == \"2\"\n\nprint(solution(open(\"inputs/input.txt\").read()))\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2') == ''\nassert solution('2 1') == ''\nassert solution('2 2') == ''\nassert solution('3 2') == ''\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000\\n\") == \"4\", \"Wrong result for input 1\"\nassert solution(\"4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000\\n\") == \"3\", \"Wrong result for input 2\"\nprint(\"Correct!\")\n\n\"\"\"\n\nn, m = input().split(\" \")\nt = list(map(int, input().split(\" \")))\nl = list(map(int, input().split(\" \")))\ncount = 0\nfor i in range(len(t)):\n    for j in range(len(l)):\n        if t[i] >= l[j] and t[i+1] <= l[j]:\n            count += 1\n            break\n        elif j == len(l)-1 and t[i] >= l[j]:\n            count += 1\nprint(count)\n\n\"\"\"\n4 4\n180000 185000 199999 100000\n199999 180000 170000 120000\n\"\"\"\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 4\\n150000 100000 160000 100000 180000\\n190000 170000 140000 160000') == '4'\nassert solution('4 4\\n180000 185000 199999 100000\\n199999 180000 170000 120000') == '3'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(['5 4', ['150000 100000 160000 100000 180000', '190000 170000 140000 160000']]) == '4'\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 4\n150000 100000 160000 100000 180000\n190000 170000 140000 160000''') == 4\n\nassert solution('''4 4\n180000 185000 199999 100000\n199999 180000 170000 120000''') == 3\n"
    },
    {
        "number": 4818,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(input()))\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1\\n1\\n1\\n1\\n1\\n1') == '2'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '6'\nassert solution('0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0') == '1'\nassert solution('39\\n40\\n41\\n0\\n1\\n2\\n40\\n41\\n0\\n1') == '6'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"0\\n42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\nassert solution(\"0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\") == \"1\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\\n42\\n84\\n420\\n126\") == \"1\"\nassert solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1\\n') == '1\\n'\nassert solution('1\\n2\\n') == '2\\n'\nassert solution('1\\n2\\n3\\n') == '3\\n'\nassert solution('1\\n2\\n3\\n4\\n') == '2\\n'\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\nassert solution('0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0') == '1'\nassert solution('39\\n40\\n41\\n0\\n1\\n2\\n40\\n41\\n0') == '6'"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '10'\nassert solution('1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n') == '1'\nassert solution('1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n') == '1'\n\"\"\"\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '1'\nassert solution('39\\n40\\n41\\n0\\n1\\n2\\n40\\n41\\n0\\n1') == '6'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"10\"\nassert solution(\"42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\") == \"1\"\nassert solution(\"3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\") == \"0\"\n\nimport json\nimport unittest\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        with open('./test_solution.json', 'r') as f:\n            data = json.load(f)\n        data = data['solution']\n        for test, expected in data.items():\n            self.assertEqual(solution(test), expected)"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126\\n420\\n84\\n126\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '2'\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10') == '10'\nassert solution('42\\n84\\n252\\n420\\n840\\n126\\n42\\n84\\n420\\n126') == '1'\nassert solution('39\\n40\\n41\\n0\\n1\\n2\\n40\\n41\\n0') == '6'\n\nprint('Success')\n\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4819,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n') == '10'\n\"\"\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''13 3\n''') == 'yes'\nassert solution('''1 0\n''') == 'yes'\nassert solution('''13 11\n''') == 'no'\nassert solution('''1 2\n''') == 'no'\nassert solution('''3 5\n''') == 'no'\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"4 1\") == \"no\"\nassert solution(\"4 6\") == \"no\"\n\n\"\"\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"no\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"10 10\") == \"yes\"\nassert solution(\"13 3\") == \"yes\"\nassert solution(\"10 15\") == \"no\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\n\n---\nSample Input 1:\n13 2\nSample Output 1:\nno\n\nSample Input 2:\n1000 1\nSample Output 2:\nno\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7 4\") == \"yes\"\nassert solution(\"4 0\") == \"yes\"\nassert solution(\"7 2\") == \"no\"\nassert solution(\"10 3\") == \"no\"\n\nprint('Success')\n\n\"\"\""
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\nassert solution(\"100 1000\") == \"no\"\nassert solution(\"12 100\") == \"no\"\n\n-----Explanation-----\nIn Sample Input 1, we have N = 13 and b = 3. One way to compress these 13 files into files of size at most 3 bits is as follows:\n\nWe compress file 1 into a file of size 3, 1, 0, and 0.\nWe compress file 2 into a file of size 3, 1, 0, and 0.\nWe compress file 3 into a file of size 3, 1, 0, and 0.\nWe compress file 4 into a file of size 3, 1, 0, and 0.\nWe compress file 5 into a file of size 3, 1, 0, and 0.\nWe compress file 6 into a file of size 3, 1, 0, and 0.\nWe compress file 7 into a file of size 3, 1, 0, and 0.\nWe compress file 8 into a file of size 3, 1, 0, and 0.\nWe compress file 9 into a file of size 3, 1, 0, and 0.\nWe compress file 10 into a file of size 3, 1, 0, and 0.\nWe compress file 11 into a file of size 3, 1, 0, and 0.\nWe compress file 12 into a file of size 3, 1, 0, and 0.\nIn Sample Input 2, the files are not allowed to be compressed, so we answer \u201cno\u201d.\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"13 3\") == \"yes\"\nassert solution(\"1 0\") == \"yes\"\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\n"
    },
    {
        "number": 4820,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('13 3') == 'yes'\nassert solution('1 0') == 'yes'\nassert solution('5 5') == 'no'\nassert solution('4 9') == 'no'\nassert solution('7 1') == 'no'\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\n\n\"\"\"\nimport collections\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\n\"\"\"\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(P01K02H03H04) == '12 12 11 13'\nassert solution(H02H10P11H02) == 'GRESKA'\nprint(solution(stdin))\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"P01K02H03H04\") == '12 12 11 13'\nassert solution(\"H02H10P11H02\") == 'GRESKA'\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\nprint(\"Passed!\")\n\n----INPUT:----\nPPK00HKKT34H00T01P09K02H03H04H10H01T12K06H04H02H11H09P13H00H02H01T03H08H09T09T04P02H05H12T08H05H03T04H07H01T10T07H06T11T03P01T08H04H03P02T08H12T03H10P12P05T06H01P13T11H12P08T08H07H09H10H01P09T02H03H09T12P10T10P04T07H11H12P01P06T11H09H10H11P13H06T04P10T12P11T06H03H02T03P01P12T05H10T07H03T04H09H04P09H05T10P07H07T10P11T07H02P04H08T05P12T11H04H10T08T11P02P10P12H05H01P11H02T03H09P04P04H11H10P03H01T03P10H08P11T02H05H05T01H07P07P08T09P12P08P12T12H09H05T05H02P09H01H04T04P10H03T12H06P12H03H09P02T05H10T04H07H10P05H12H12T08P04T11H05T12H01T06H13H12P03T06H07H09P09H05H09P12H10T12H12T04T04H10P10H12T03P04P09T04H02H10P11T10H05H13T04T05P12H02P02H12H09P10H04H12T12P03P03H12P11T10H03H11H09H12T12P04P08T09H13T12H08T12H05P03H13P03H02P09T05H05H10P13T03H10P08H03P07T10H10P03T05H11T05H12T12P11T06P10T13P07P08P12H04T02H03H03P12H08P13P10H11T02H11H04H12P04T12H03H12T03P12T10H12H12H12T03H12H03P10P03T07P11H11H02T03P03H11T10H08H04H03P01P12H03H09H12P04H03H12P08T08H07H13P12H06P12T03H06P13H12P13H12P09H11T12H12P07H03T13P12T04T08H02H11H11T08T10H09P08H10T09H06H11P10H12P12H11P13H01P13H11P09T12H02H10P09H04H12T12H05P10T11H03H11T04H11H02T08T04P12T03H10T09H07T09H07P04P13H10H10H01P02T02P13H03P12P11T08T10H09T06H10P03H03P12P13H07H02H03H07T10T12H12T09P06H12H08P07T10H11H05H10T03H11P11T12T07H04T11H08H07H03H12H03H08P11T10T12P09P07T07H03P13P07H12H10T08H12H02P11T09H12P12P02T03P12P09P03T03P12H05T10H08H10H04T12H11T07P10T03H02P11T09H05H04T05P11T08H11H09P03T08H07T03T05T12H11P08H04T06H05H08T05T06H09P03T10H11H12P02T12H13P05T04H05P11T10H08P03T10P08H09P08P02H12H12P11P08T12H12P11T05P03H09H13P04P04H12P12H02P02P12P12T12H12H12P04T03H06H08T12H12H13H13T03H03H12H12P11H03H02T09H13T09P10H12H12P09T04P11P10H12T12H12H12H03H12H11P12H09H12H02P11H07H10H13H10H11H12H11H02P09H04H10T05P12T08H10T11H03H02P07H09H03T12H10H08H11P09H04H10H10H05P07T12H10H10H12H07T09H13P10H11T12H02H02P12H11P12H07P07T12H11H12P09H08T12H02P03T03H06H10P03H02P03P13H12T11H11P04H12T09H04H10P10H12H07P12H08H05H02H10P12P02H04P11T10H10H11P10H12H12T02P02P08H02P07P12T05H12T10T07H03H03P12T03H12T12H03H11H12P12P12H07H09H02H02H05H04T08P09H10H09H11T07P02H12H12H13P09H09P08H13H03P10H03T02P10P12H09H02H11H03H09P09H03H08T10P12H11P13H11P08P07T08H12H10P10H13T12P11T10H12T02H06H09H12T07P05P11T10H11T10T03H12P07T10H05H10T02P04H07T10H05H11H12T03H02H03H07T10T12H03H12T10H06H12H"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('P01K02H03H04') == '12 12 11 13'\nassert solution('H02H10P11H02') == 'GRESKA'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''P01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01K02H03H04\nP01"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"P01K02H03H04\") == \"12 12 11 13\"\nassert solution(\"H02H10P11H02\") == \"GRESKA\"\nassert solution(\"P01K02H03H04P01K02H03H04\") == \"GRESKA\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 4821,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"P01K02H03H04\") == '12 12 11 13'\nassert solution(\"H02H10P11H02\") == 'GRESKA'\n\"\"\"\n\ns = input()\ncards = {\n    \"P\": 0,\n    \"K\": 0,\n    \"H\": 0,\n    \"T\": 0\n}\n\nfor i in s:\n    if i[0] == \"P\":\n        cards[\"P\"] += 1\n    elif i[0] == \"K\":\n        cards[\"K\"] += 1\n    elif i[0] == \"H\":\n        cards[\"H\"] += 1\n    elif i[0] == \"T\":\n        cards[\"T\"] += 1\n\nprint(cards[\"P\"] % 13, cards[\"K\"] % 13, cards[\"H\"] % 13, cards[\"T\"] % 13)"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....') == '1'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*') == '2'\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5 3\", \".....\\n.*.*.\\n.....\") == '1'\nassert solution(\"7 6 4\", \"......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\\n\") == '2'\nassert solution(\"4 3 2\", \"....\\n*.*\\n....\") == '0'\nassert solution(\"4 6 2\", \"....\\n.*.*\\n....\\n.*.*\\n....\\n*.*\\n*.*\\n*.*\") == '1'\nassert solution(\"3 4 1\", \"....\\n.*.*\\n....\\n*.*\\n....\") == '2'\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\") == \"1\\n+-..\\n|.*\\n+-..\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\") == \"2\\n......\\n.*.*.*\\n+-..|\\n|.*|.\"\nassert solution(\"9 4 4\\n........\\n........\\n........\\n........\\n........\\n....*..\\n....*..\\n....*..\\n....*..\") == \"5\\n........\\n....*..\\n....*..\\n...*..\\n....*.\"\nassert solution(\"5 5 5\\n.....\\n.*.*\\n*.*.*\\n*.*.*\\n*.*.*\") == \"6\\n*.*.*\\n*.*.*\\n*.*.*\\n*.*.*\"\nassert solution(\"10 10 10\\n........\\n........\\n........\\n........\\n........\\n........\\n........\\n........\\n....*..\\n....*..\") == \"9\\n........\\n....*..\\n....*..\\n...*..\\n....*.\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\\n\") == \"1\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\\n\") == \"2\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....\\n') == '1'\nassert solution('7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\\n') == '2'\n\nimport os\nimport io\nimport unittest\nfrom unittest.mock import patch\n\n\nclass TestSolution(unittest.TestCase):\n\n    def test_solution_1(self):\n        with patch('sys.stdin', io.StringIO(\"\\n\".join([\n            '3 5 3',\n            '.....',\n            '*.*.*',\n            '.....',\n        ]))):\n            with patch('sys.stdout', new_callable=io.StringIO) as stdout:\n                solution()\n                self.assertEqual(stdout.getvalue(), \"\\n\".join([\n                    '1',\n                ]) + '\\n')\n\n    def test_solution_2(self):\n        with patch('sys.stdin', io.StringIO(\"\\n\".join([\n            '7 6 4',\n            '......',\n            '*.*.*.',\n            '......',\n            '*.*..',\n            '..*...',\n            '..*...',\n            '*....*',\n        ]))):\n            with patch('sys.stdout', new_callable=io.StringIO) as stdout:\n                solution()\n                self.assertEqual(stdout.getvalue(), \"\\n\".join([\n                    '2',\n                ]) + '\\n')\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5 3') == '1'\nassert solution('7 6 4') == '2'\nassert solution('7 7 7') == '0'\n\nassert solution('') == ''\n\nassert solution('1 1 1') == '0'\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\") == \"1\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5 3\") == \"1\"\nassert solution(\"7 6 4\") == \"2\"\n\n\"\"\"\n\nimport sys\nimport numpy as np"
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5 3\\n.....\\n.*.*.\\n.....\") == \"1\"\nassert solution(\"7 6 4\\n......\\n.*.*.*\\n......\\n.*.*..\\n..*...\\n..*...\\n*....*\") == \"2\""
    },
    {
        "number": 4822,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 5 3\\n.....\\n.*.*.\\n.....') == '1'\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\"\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\n\"\"\""
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"AC AH AS KD\") == \"4\"\n\"\"\"\n\n\n\"\"\"\n[SOLUTION]\n\n[SOLUTION]"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\"\n\nprint(solution(\"AC AD AH AS KD\"))\nprint(solution(\"2C 4D 4H 2D 2H\"))\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2C 4D 4H 2D 2H') == 3\n\"\"\"\nfrom collections import Counter\n\nfrom typing import List"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AC AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\nassert solution(\"3C 3D 3H 3S 3S\") == 0\nassert solution(\"JD TC TH 7C 7D 7S\") == 0\nassert solution(\"AS AD KD AC\") == 0\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AC AD AH AS KD\") == \"4\"\nassert solution(\"2C 4D 4H 2D 2H\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\nassert solution(\"3C 3S 3H 3D 3C\") == 4\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2C 4D 4H 2D 2H\") == 3\nassert solution(\"3S 9S KS AS QS\") == 0\nassert solution(\"3S 9S KS AS QS\") == 0\nassert solution(\"AS KS AS QS JS\") == 0\nassert solution(\"6C 7C 8C 9C TC\") == 12\n"
    },
    {
        "number": 4823,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"AC AD AH AS KD\") == 4\nassert solution(\"2C 4D 4H 2D 2H\") == 3\nassert solution(\"3C 3S 3H 3D 3C\") == 6\nassert solution(\"AC KC KH QH JH\") == 10\n\nprint(\"all tests passed.\")\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('6 5\\n2 1 1 1 0 1\\n') == '5'\n\nassert solution('5 1\\n0 0 0 0 0\\n') == '7'\n\nassert solution('5 1\\n1 1 1 1 1\\n') == '0'\n\nassert solution('7 5\\n1 1 1 1 1 1\\n') == '0'\n\nassert solution('7 3\\n1 0 0 1 1 0\\n') == '0'"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 1 1 1 0 1\") == 5\nassert solution(\"6 5\") == 7"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 5\\n2 1 1 1 0 1\\n') == '5'\nassert solution('5 1\\n0 0 0 0 0\\n') == '7'\n\"\"\"\n\nimport sys\nimport functools"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1 1 1 0 1\") == \"5\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 5\", \"0 1 0 1 0 1\") == \"7\"\nassert solution(\"1 1\", \"0 0\") == \"1\"\nassert solution(\"2 1 1\", \"0 1 0\") == \"0\"\nassert solution(\"1 2 3\", \"1 0 1\") == \"0\"\nassert solution(\"10 10 10\", \"1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1 1 0 1\") == \"5\"\n\nimport re\nimport sys"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1\\n0 0 0 0 0') == '7'\n\"\"\"\n"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 5\\n2 1 1 1 0 1\") == \"5\"\nassert solution(\"5 1\\n0 0 0 0 0\") == \"7\"\nprint(\"Success\")\n\n-------------Result-------------\nSuccess\n\nProcess finished with exit code 0\n'''"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 1\\n0 0 0 0 0\") == \"7\"\nprint(solution(\"5 1\\n0 0 0 0 0\"))"
    },
    {
        "number": 4824,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1\\n0 0 0 0 0\") == \"7\"\nprint(solution(input()))\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$. '\nassert solution('What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]? '\n\n## One-Liner\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('All your base are belong to us') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\nassert solution('What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@'\nassert solution('I\\'m NOT kidding!') == '\\/\\/[-]@'\nassert solution('\\t') == '\\t'\nassert solution(' ') ==''\n\n\"\"\"\n\nfrom string import ascii_lowercase, ascii_uppercase\n\nmapper = {\n    'a': '@',\n    'b': '8',\n    'c': '(',\n    'd': '|)',\n    'e': '3',\n    'f': '#',\n    'g': '6',\n    'h': '[-]',\n    'i': '|',\n    'j': '_|',\n    'k': '<',\n    'l': '1',\n   'm': '[]\\/[]',\n    'n': '[]\\[]',\n    'o': '0',\n    'p': '|D',\n    'q': '(,)',\n    'r': '|Z',\n   's': '$',\n    't': '\\'][\\'',\n    'u': '|_|',\n    'v': '\\/',\n    'w': '\\/\\/',\n    'x': '}{',\n    'y': '`/',\n    'z': '2',\n}\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\""
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"All your base are belong to us.\") == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 \\'][\\'0 |_|$.\\n'\nassert solution(\"What's the Frequency, Kenneth?\") == '\\/\\/[-]@\\'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3\\'][\\'[-]?\\n'\n\nassert solution(\"All your base are belong to us.\") == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 \\'][\\'0 |_|$.\\n'\nassert solution(\"What's the Frequency, Kenneth?\") == '\\/\\/[-]@\\'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3\\'][\\'[-]?\\n'\n\nassert solution(\"All your base are belong to us.\") == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 \\'][\\'0 |_|$.\\n'\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"All your base are belong to us.\") == \\\n    \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \\\n    \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\nassert solution(\"HaGdA: f0rF4 t0rU7 hOr3n5 \\u0400 G0raBm3s! \\n\\nHaGdA: f0rF4 t0rU7 hOr3n5 \\u0400 G0raBm3s!\") == \\\n    \"HaGdA: f0rF4 t0rU7 hOr3n5 @|Z3!\\n\\nHaGdA: f0rF4 t0rU7 hOr3n5 @|Z3!\\n\"\n\"\"\"\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 `]['0 |_|$.\\n', \"Simple test\"\nprint(\"Cool!\")\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('All your base are belong to us.') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n'\nassert solution('What\\'s the Frequency, Kenneth?') == '\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n'\n\n-----Explanation-----\nAll your base are belong to us.\n\na, All your base are belong to us.\n\nAll your base are belong to us.\n\na, All your base are belong to us.\n\nA, All your base are belong to us.\n\nA, All your base are belong to us.\n\na, All your base are belong to us.\n\na, All your base are belong to us.\n\nAll your base are belong to us.\n\nThe original, English alphabet letters and symbols have been translated into the new New Alphabet, leaving them intact.\n\na, All your base are belong to us.\n\na, All your base are belong to us.\n\na, All your base are belong to us.\n\na, All your base are belong to us.\n\na, All your base are belong to us.\n\nAll your base are belong to us.\n\na, All your base are belong to us.\n\na, All your base are belong to us.\n\na, All your base are belong to us.\n\na, All your base are belong to us.\n\nAll your base are belong to us.\n\nThe symbols,.! etc. have also been translated.\n\na, All your base are belong to us.\n\na, All your base are belong to us.\n\na, All your base are belong to us.\n\na, All your base are belong to us.\n\na, All your base are belong to us.\n\nAll your base are belong to us.\n\na, All your base are belong to us.\n\na, All your base are belong to us.\n\na, All your base are belong to us.\n\na, All your base are belong to us.\n\na, All your base are belong to us.\n\nAll your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong to us.\n\n[-]\n\na, All your base are belong"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 ']['0 |_|$.\\n\"\nassert solution(\"What's the Frequency, Kenneth?\") == \"\\/\\/[-]@'][''$ ']['[-]3 #|Z3(,)|_|3[]\\[](`/, |<3[]\\[][]\\[]3']['[-]?\\n\"\n\"\"\"\n\nimport sys\n\nchars = \"abcdefghijklmnopqrstuvwxyz\"\nchars_dict = {}\n\nfor i in range(0, len(chars)):\n    chars_dict[chars[i]] = chr(ord(chars[i]) + 1)\n\nfor line in sys.stdin:\n    for char in line:\n        if char in chars:\n            print(chars_dict[char], end=\"\")\n        else:\n            print(char, end=\"\")\n    print()\n"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('All your base are belong to us.\\n') == '@11 `/0|_||Z [email\u00a0protected]$3 @|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 8310[]\\[]6 '\n                                                    '@|Z3 83"
    },
    {
        "number": 4825,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"All your base are belong to us.\") == \"@@1 @|Z1[email\u00a0protected]11 @|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z1 3[%][^][$^][]10 @@|Z"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1') == 'Alice'\nassert solution('2') == 'Bob'\n\"\"\""
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\n\nassert solution(\"5\") == \"Alice\"\nassert solution(\"6\") == \"Bob\"\n\nassert solution(\"7\") == \"Alice\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\n\n---\nSample Input 3:\n6\nSample Output 3:\nAlice\n\nSample Input 4:\n9\nSample Output 4:\nBob\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(0) == \"Alice\"\nassert solution(1) == \"Alice\"\nassert solution(2) == \"Bob\"\nassert solution(3) == \"Alice\"\nassert solution(4) == \"Bob\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\nassert solution(\"3\") == \"Bob\"\n\"\"\""
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"Alice\"\nassert solution(\"9\") == \"Alice\"\nassert solution(\"5\") == \"Bob\"\nassert solution(\"18\") == \"Alice\"\n\nprint(\"All tests passed.\")\n\"\"\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2') == 'Bob'\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\nassert solution(\"100\") == \"Bob\"\nassert solution(\"10000000\") == \"Bob\"\n"
    },
    {
        "number": 4826,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open(r'C:\\Users\\Mateo\\Documents\\GitHub\\pytest-workspace\\sample-input.txt').readline()) == 'Bob'"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 this is sentence of letters') == 'this is sentence of letters thirtyone'\nassert solution('2 three is letters') == 'three is letters thirtyone'\nassert solution('3 thirteen is letters') == 'thirteen is letters thirtyone'\nassert solution('4 fourteen is letters') == 'fourteen is letters thirtyone'\nassert solution('5 five is letters') == 'five is letters thirtyone'\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"this sentence has $ letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"this sentence has thirtyone letters\") == \"this sentence has thirtyone letters\"\n\nassert solution(\"two $ is the number of letters here\") == \"two twos are the number of letters here\"\nassert solution(\"two twos are the number of letters here\") == \"two twos are the number of letters here\"\nassert solution(\"three $ is the number of letters here\") == \"three threes are the number of letters here\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\nthis\\nsentence\\nhas\\n$\\nletters\") == \"this sentence has thirtyone letters\"\nassert solution(\"7\\n$\\nis\\nthe\\nnumber\\nof\\nletters\\nhere\") == \"thirty is the number of letters here\"\n\"\"\""
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n    \"this sentence has thirtyone letters\"\n) == \"thirty one letters\"\nassert solution(\n    \"Blah blah seventeen\"\n) == \"Blah blah seventeen\"\nassert solution(\n    \"This sentence has thirtyone letters\"\n) == \"this sentence has thirtyone letters\"\nassert solution(\n    \"This sentence has thirtyone letters\"\n) == \"this sentence has thirty one letters\"\nassert solution(\n    \"this sentence has thirtyone letters\"\n) == \"this sentence has thirty one letters\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"this sentence has thirtyone letters\") == \"this sentence has $ letters\"\nassert solution(\"thirty is the number of letters here\") == \"thirty is the number of letters here\""
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"this sentence has $ letters\") == \"this sentence has thirtyone letters\"\nassert solution(\"onehundrednineteen\") == \"onehundrednineteen\"\nassert solution(\"threehundrednineteen\") == \"threehundrednineteen\"\nassert solution(\"fivehundredthirty\") == \"fivehundredthirty\"\nassert solution(\"seventyseven\") == \"seventyseven\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('this sentence has $ letters') == 'this sentence has thirtyone letters'\nassert solution('that is the number of letters') == 'that is the number of letters'\nassert solution('that is the number of letters') == 'that is the number of letters'\nassert solution('that is the number of letters') == 'that is the number of letters'\nassert solution('that is the number of letters') == 'that is the number of letters'\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"this\") == \"this sentence has $ letters\"\nassert solution(\"this sentence\") == \"this sentence has $ letters\"\nassert solution(\"this sentence has\") == \"this sentence has $ letters\"\nassert solution(\"this sentence has one\") == \"this sentence has onehundred one letters\"\nassert solution(\"this sentence has one one\") == \"this sentence has onehundred one letters\"\n"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"this sentence has thirtyone letters\") == \"this sentence has $ letters\"\nassert solution(\"blah blah seventeen\") == \"blah blah seventeen\"\nassert solution(\"100500\") == \"onehundredfivethousand\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4827,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"twenty\"\nassert solution(\"1\") == \"one\"\nassert solution(\"11\") == \"eleven\"\nassert solution(\"19\") == \"nineteen\"\nassert solution(\"18\") == \"eighteen\"\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\"\"\""
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('Abcd') == '0'\nassert solution('EaEbFabG') == '5'\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n\nprint(solution(\"Abcd\"))\nprint(solution(\"EaEbFabG\"))\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('Abcd') == '0'\nassert solution('EaEbFabG') == '5'"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Abcd\") == 0\nassert solution(\"EaEbFabG\") == 5\n\nprint(solution(input()))"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Abcd\") == \"0\"\nassert solution(\"EaEbFabG\") == \"5\"\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    'Abcd'\n) == '0'\nassert solution(\n    'EaEbFabG'\n) == '5'\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('Abcd') == 0\nassert solution('EaEbFabG') == 5\n\n\"\"\"\n\n\nfrom re import findall\n"
    },
    {
        "number": 4828,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Abcd\") == 0\nassert solution(\"EaEbFabG\") == 5\n\n\"\"\"\n\nfrom typing import Dict, List, Set\n\n\nclass State:\n    def __init__(self):\n        self.instruction = None\n        self.acc = None\n        self.index = None\n        self.changed = False\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\nassert solution('0 0') == 'Not a moose'\nassert solution('1 0') == 'Even 1'\nassert solution('1 1') == 'Odd 2'\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"0 0\") == \"Not a moose\"\nassert solution(\"10 10\") == \"Even 26\"\nassert solution(\"5 3\") == \"Odd 5\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"2 2\") == \"Not a moose\"\n\n\"\"\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\n\"\"\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\n\"\"\""
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''2 3\n3 3''') == \"Odd 6\"\n\nassert solution('''0 0\n0 0''') == \"Not a moose\"\n\nassert solution('''1 1\n1 1''') == \"Even 1\"\n\nassert solution('''1 2\n2 1''') == \"Even 2\"\n\nassert solution('''1 2\n2 2''') == \"Even 2\""
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\n\"\"\"\n\nimport math\n\nlines = [line.strip() for line in open('input.txt').readlines()]\n\nleft, right = lines[0].split()\nleft = int(left)\nright = int(right)\n\nleft_tine_count = 0\nright_tine_count = 0"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"Odd 6\"\nassert solution(\"3 3\") == \"Even 6\"\nassert solution(\"1 1\") == \"Not a moose\"\nassert solution(\"3 2\") == \"Even 5\"\nassert solution(\"4 3\") == \"Odd 10\"\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\nassert solution('3 3') == 'Even 6'\n\nSample Input 3:\n0 1\nSample Output 3:\nNot a moose\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4829,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3') == 'Odd 6'\nassert solution('3 3') == 'Even 6'\nassert solution('0 0') == 'Not a moose'\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(2) == 2\nassert solution(3) == 2\nassert solution(4) == 1\nassert solution(5) == 3\nassert solution(6) == 3\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(None) == None\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"tomo\") == \"1\"\nassert solution(\"mono\") == \"1\"\nassert solution(\"dak\") == \"2\"\nassert solution(\"6666\") == \"2\"\nassert solution(\"ja\") == \"2\"\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\ntomo\nmono\ndak\n6666''') == '1'\nassert solution('''2\nja\nla\n52''') == '2'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == stdout\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"g-4 i-444 h-44 t-8\") == \"h\"\nassert solution(\"1-3 abc\") == \"abc\"\nassert solution(\"1-3 a b c\") == \"a\"\nassert solution(\"1-3 a b c d\") == \"ab\"\nassert solution(\"1-3 a b c d e\") == \"abcde\"\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == 'a'\nassert solution('123') == 'a'\nassert solution('1223') == 'ad'\nassert solution('1234') == 'abd'\nassert solution('2323') == 'abcd'\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('tomo') == 1\nassert solution('mono') == 1\nassert solution('dak') == 2\nassert solution('6666') == 2\n\nprint(solution(stdin))\n\n\"\"\"\n\n\"\"\"\nSolution\n\nInput:\n3\ntomo\nmono\ndak\n\nOutput:\n1\n\nExplanation:\ntomo, mono and dak can be mapped to the keys 2, 5 and 6.\n\nInput:\n2\nja\nla\n52\n\nOutput:\n2\n\nExplanation:\nj, a and l can be mapped to the keys 2, 4 and 5 respectively.\n\nWe have to find the number of words in the dictionary that can be mapped to the input string.\n\nWhat is the maximum possible length of the input string S?\n\nGiven an input string S, the maximum possible length of the input string S is 1000.\n\nNow, we can find the frequency of each digits in the input string S.\n\nGiven an input string S of length at most 1000, find the number of words in the dictionary that can be mapped to the input string S.\n\nFor each character c, we can press the key of the corresponding frequency.\n\nWe will map each word in the dictionary to the input string S.\n\nThe problem is to find the number of possible mappings of all the words in the dictionary to the input string S.\n\nLet dp[i] be the number of possible mappings of the first i words in the dictionary to the input string S.\n\nLet f[i] be the number of unique frequencies of the first i characters in the input string S.\n\nWe can see that dp[i] = dp[i - 1] + f[i].\n\nWe will use a DP approach to solve the problem.\n\nThe total number of unique frequencies of the input string S is equal to the sum of the frequencies of the first character of the input string S.\n\nFor each character of the input string S, we can press the key of the corresponding frequency.\n\nWe will keep tracking of the frequency of each character in the input string S in an array freq[].\n\nWhen we press the key of the frequency of the current character of the input string S, we can press the corresponding key of the frequency of the first character of the input string S.\n\nIf the current character of the input string S is the same as the first character of the input string S, then we have to press the key of the frequency of the current character of the input string S, but in that case the frequency of the first character of the input string S will be equal to the frequency of the current character of the input string S.\n\nWe can see that freq[i] is equal to freq[i - 1] + freq[i - 1] + 1, where freq[0] = f[0] = 0.\n\nSince dp[i] = dp[i - 1] + freq[i], we can see that dp[i] = dp[i - 1] + f[i].\n\nGiven the frequencies of the first i characters of the input string S, we can compute the dp array in O(N), where N is the length of the input string S.\n\nTo find the number of words in the dictionary that can be mapped to the input string S, we can compute the number of words in the dictionary that can be mapped to the input string S using the array dp.\n\nThe number of words in the dictionary that can be mapped to the input string S is equal to dp[N].\n\nSo, the overall time complexity of our solution is O(N), where N is the length of the input string S.\n\nTo find the number of words in the dictionary that can be mapped to the input string S, we will calculate the number of unique frequencies in the input string S.\n\nWe will use a hash table freq to store the frequency of each character in the input string S.\n\nGiven an input string S of length at most 1000, find the number of words in the dictionary that can be mapped to the input string S.\n\nWe will keep updating the hash table freq while we iterate through the input string S.\n\nGiven an input string S of length at most 1000, find the number of words in the dictionary that can be mapped to the input string S.\n\nLet freq[i] be the frequency of the first character of the input string S.\n\nWe will keep tracking of the frequency of each character in the input string S in an array freq[].\n\nWhen we press the key of the frequency of the current character of the input string S, we can press the corresponding key of the frequency of the first character of the input string S.\n\nIf the current character of the input string S is the same as the first character of the input string S, then we have to press the key of the frequency of the current character of the input string S, but in that case the frequency of the first character of the input string S will be equal to the frequency of the current character of the input string S.\n\nWe can see that freq[i] is equal to freq[i - 1] + freq[i - 1] + 1, where freq[0] = f[0] = 0.\n\nSince dp[i] = dp[i - 1] + freq[i], we can see that dp[i] is equal to dp[i - 1] + freq[i].\n\nGiven the frequencies of the first i characters of the input string S, we can compute the dp array in O(N), where N is the length of the input string S.\n\nTo find the number of words in the dictionary that can be mapped to the input string S, we can compute the number of words in the dictionary that can be mapped to the input string S using the array dp.\n\nThe number of words in the dictionary that can be mapped to the input string S is equal to dp[N].\n\nSo, the overall time complexity of our solution is O(N).\n\"\"\"\n\n\"\"\"\nSample Input 1\n3\ntomo\nmono\ndak\n6666\nSample Output 1\n1\n\nSample Input 2\n2\nja\nla\n52\nSample Output 2\n2\n"
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\ntomo\\nmono\\ndak\\n6666\") == \"1\"\n\nassert solution(\"2\\nja\\nla\\n52\") == \"2\""
    },
    {
        "number": 4830,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\nassert solution('2') == ''\n\nassert solution('12') == ''\n\nassert solution('123') == ''\n\nassert solution('1') == 'a'"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('A') ==..#..\nassert solution('DOG') ==..#...#...*..\nassert solution('HELLE') ==....#....#....*....\n\"\"\""
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A\") == \".#.#.\\n#.#.#\\n.A.#\\n#.#.#\\n#.#.#\"\nassert solution(\"DOG\") == \".#.#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\""
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('A') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\\n'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\\n'\nassert solution('ZERO') == '#.#.#.#.Z.#.#.#.\\n#.#.#.#.Z.#.#.#.\\n#.#.#.#.Z.#.#.#.\\n#.#.#.#.Z.#.#.#.\\n#.#.#.#.Z.#.#.#.\\n#.#.#.#.#.Z.#.#.#\\n#.#.#.#.#.Z.#.#.#\\n#.#.#.#.#.Z.#.#.#\\n#.#.#.#.#.Z.#.#.#\\n#.#.#.#.#.Z.#.#.#\\n#.#.#.#.#.Z.#.#.#\\n#.#.#.#.#.Z.#.#.#\\n#.#.#.#.#.Z.#.#.#\\n#.#.#.#.#.Z.#.#.#\\n#.#.#.#.#.Z.#.#.#\\n#.#.#.#.#.Z.#.#.#\\n'\nassert solution('O') == '..#.#.#.O\\n#.#.#.#.O\\n#.#.#.#.O\\n#.#.#.#.O\\n#.#.#.#.O\\n#.#.#.#.O\\n#.#.#.#.O\\n#.#.#.#.O\\n#.#.#.#.O\\n#.#.#.#.O\\n#.#.#.#.O\\n#.#.#.#.O\\n#.#.#.#.O\\n#.#.#.#.O\\n#.#.#.#.O\\n#.#.#.#.O\\n#.#.#.#.O\\n#.#.#.#.O\\n#.#.#.#.O\\n#.#.#.#.O\\n#.#.#.#.O\\n#.#.#.#.O\\n#.#.#.#.O\\n#.#.#.#.O\\n'\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('A') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..'\n\"\"\"\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('A') == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\\n'\nassert solution('DOG') == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\\n'\n\n-----Notes-----\nThe order of the output lines should be the same as the order of the input lines.\nThe number of lines outputted should be at least $5$.\nAll the input data will be valid and the tests will not penalize you for using more than $15$ lines of code.\n\"\"\"\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A\") == '..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\\n'\nassert solution(\"DOG\") == '..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\\n'\n\nprint(\"All tests passed.\")\n\"\"\"\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A\") == \".#.#.\\n#.#.\\n.#.#\"\nassert solution(\"DOG\") == \"...#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n...#...#...*..\""
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A\") == \"..#..\\n.#.#.\\n#.A.#\\n.#.#.\\n..#..\"\nassert solution(\"DOG\") == \"..#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n..#...#...*..\"\n\"\"\"\n\nfrom string import ascii_uppercase\nfrom typing import List\n"
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('A') == '..#..\\n.##.\\n#.A.\\n##.\\n..#..'\nassert solution('DOG') == '..#...#...*..\\n.###.#.#.*.*.\\n#.D.#.O.*.G.*\\n.###.#.#.*.*.\\n..#...#...*..'\n\"\"\""
    },
    {
        "number": 4831,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A\") == \"...#.#..\\n#.#.#.#\\n..#.#..\\n..#.#..\\n...\"\nassert solution(\"DOG\") == \"...#...#...*..\\n.#.#.#.#.*.*.\\n#.D.#.O.*.G.*\\n.#.#.#.#.*.*.\\n...#...#...*..\""
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"20\"\nassert solution(\"1\") == \"3.14159265\"\nassert solution(\"3\") == \"14.142135623730951\"\nassert solution(\"9\") == \"36.288086642590469\"\nassert solution(\"13\") == \"4268.816425904916\"\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\n\"\"\"\n\nR = int(input())\nprint(2 * R * R * pi)\nprint(2 * R * R)\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '3.141593'\nassert solution('21') == '1385.442360'"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n2') == '3.141593'\nassert solution('20\\n10') == '885.442360'\nassert solution('4\\n5') == '9.422210'\nassert solution('19\\n15') == '1285.442360'\nassert solution('15\\n15') == '0.0'\n\nprint('The local tests are done. Click on \"Check\" for more real tests.')\n\n-----Problem-----\nA city is being built in the shape of a rectangle with four straight edges. The city is being built in an almost two-dimensional setting, where the ground is flat and all buildings are at the same height. The city is being built with six floors of height h, starting at the ground floor, and building only from height h to h+1.\n\nTo make sure the building is physically correct, the construction company requires that the sum of the four sides of every building, except for two of them, must be equal to the height of the building at each floor.\n\nFor example, suppose the height of the ground floor is h = 5.0 and the heights of the other floors are h = 6.0, h = 7.0 and h = 8.0. In this case, the buildings at each floor are shown in the following figure:\n\nWe want to know if it is possible to build the city using four straight edges. For example, the heights of the four sides of the building at the ground floor are: 4.0, 4.0, 4.0 and 4.0. This means that the ground floor can be built with four straight edges. But the buildings at other floors are at different heights. For example, the building at the second floor can be built only using four straight edges.\n\nWe will use the notation \"A_h\" to denote the sum of the four sides of the building at the floor h.\n\nThe building at the nth floor can be built using four straight edges only if:\n\n1) The sum of the four sides of the building at the ground floor is equal to the height of the building at the ground floor: A_0 = h\n2) The sum of the four sides of the building at the nth floor is equal to the height of the building at the nth floor: A_n = h + n\n3) The difference between the sum of the sides of the building at the ground floor and the sum of the sides of the building at the nth floor is equal to the height of the building at the nth floor: A_0 - A_n = h + n\n4) The difference between the sum of the sides of the building at the ground floor and the sum of the sides of the building at the nth floor cannot be greater than the height of the building at the nth floor: A_0 - A_n <= h + n\n5) There are only four distinct numbers that can be obtained using the four sides of the building at the ground floor and the four sides of the building at the nth floor, but not all of them are equal to the height of the building at the nth floor:\n    1. n + 1\n    2. 2 * n\n    3. 2 * (n+1)\n    4. n + 2\nThe sum of these four values is equal to the height of the building at the nth floor: A_n = n + 1 + 2n + 2n + 1 = n * h + h + 1 + h = 2nh + h + 1 + h = (2n + 1)h.\n\nWrite a program that takes two integers m and n and then outputs whether it is possible to build the city using four straight edges.\n\n-----Solution-----\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\") == 3.141593\nassert solution(\"21\") == 1385.442360\n\"\"\""
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"3.141593\"\nassert solution(\"21\") == \"1385.442360\"\n\"\"\"\nimport math\n\nR = int(input())\n\nprint(math.pi * R ** 2)\nprint(math.pi * R ** 2 + R ** 2)\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == 3.141593\nassert solution('21') == 1385.442360\nassert solution('10000') == 2.0\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == '3.141593'\nassert solution('2') == '2.000000'\nassert solution('3') == '4.250000'\nassert solution('4') == '8.350000'\nassert solution('5') == '14.245000'\n\"\"\"\n"
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\") == 3.141593\nassert solution(\"21\") == 1385.442360\nassert solution(\"1\")!= solution(\"2\")\nassert solution(\"1\") == solution(\"1\")\nassert solution(\"2\") == solution(\"2\")\n\"\"\""
    },
    {
        "number": 4832,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10') == 'True'\nassert solution('11') == 'False'\nassert solution('12') == 'False'\n\"\"\""
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 -2 3\") == \"2\"\n\"\"\"\n\nn = int(input())\nk = list(map(int, input().split()))\n\nprint(sum(k))\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2\\n-4 3\\n-4 -5') == '-5'\nassert solution('3\\n-2 3 4') == '5'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n-2 3') == '2'\nassert solution('5\\n129 44 394 253 147') == '0'\n\"\"\""
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 -2 3\\n') == '2'\n\"\"\"\n\na = int(input())\nb = list(map(int, input().split()))\nc = 0\nfor i in b:\n    if i < 0:\n        c += i\nprint(c)\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n1 -2 3\n''') == '2'\n\nassert solution('''5\n129 44 394 253 147\n''') == '0'\n\n\"\"\""
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 -2 3\\n\") == \"2\"\n\"\"\"\nimport re"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 -2 3') == '2'\nassert solution('3\\n129 44 394 253 147') == '0'\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\nk = sys.stdin.readline().strip().split(' ')\n\nsum_ = 0\nfor num in k:\n    sum_ += int(num)\nprint(sum_)\n"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 -2 3\\n\") == \"2\"\n\"\"\""
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 -2 3\\n\") == 2\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4833,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"3\n1 -2 3\n\"\"\") == '2'\nassert solution(\"\"\"5\n129 44 394 253 147\n\"\"\") == '0'\n\n\"\"\"\n\nS = [0] * 100010\nn = int(input())\nk = [0] + list(map(int, input().split()))\nfor i in range(1, n + 1):\n    S[i] = S[i - 1] - k[i - 1]\nprint(sum(S))\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n2 2 2') == '6'\n\"\"\"\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom typing import List\n\n\n@dataclass\nclass Team:\n    time: int\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2 2\\n3 4 1 2\\n') == '8', 'Bad result'\nassert solution('1 1 1\\n2 2 2\\n') == '6', 'Bad result'\n\"\"\""
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\nassert solution(\"3\\n4 1 2\") == \"8\"\n\nprint(solution(input()))\n\nimport sys\n\nprint(sum(list(map(lambda x: int(x) * 2, list(sys.stdin.readline().strip().split())))))\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3\\n2 2 2\") == \"6\"\n\"\"\"\n\nimport math\nimport sys\n\nn = int(input())\nstdin = list(map(int, input().split()))\nstdin.sort()"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 2 2\") == \"6\"\n\nassert solution(\"3 1 2\") == \"7\"\n\nassert solution(\"4 1 2\") == \"8\"\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n2 2 2') == '6'\nassert solution('3\\n4 1 2') == '8'\n\nassert solution('1\\n5') == '5'\nassert solution('1\\n1') == '1'\n\nassert solution('1\\n1') == '1'\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n2 2 2') == '6'\n\"\"\"\n\nn = int(input())\ntimes = list(map(int, input().split()))\n\nfor i in range(1, n):\n    times[i] = max(times[i], times[i - 1] + times[i])\n\nprint(max(times))\n"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n4 1 2\") == 8\n\"\"\"\n\nimport sys\nimport itertools\n\nn = int(sys.stdin.readline().strip())\na = list(map(int, sys.stdin.readline().strip().split()))"
    },
    {
        "number": 4834,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 1 2\\n') == '8'\nassert solution('3 2 1\\n') == '6'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11\\n') == '2'\nassert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11\\n') == 'NOT POSSIBLE'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\n\"\"\"\n\nimport sys\nfrom collections import deque\n\ninput = sys.stdin.readline\n\nt, n, m = list(map(int, input().split()))\ngrid = [input().rstrip() for _ in range(n)]\n\nstart = None\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == \"S\":\n            start = (i, j)\n\ndx = [-1, 1, 0, 0]\ndy = [0, 0, -1, 1]"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == 2\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == \"NOT POSSIBLE\"\n\"\"\"\n\nimport collections\n\nclass MazeSolver:\n    def __init__(self, input_file_name):\n        with open(input_file_name, \"r\") as f:\n            first_line = f.readline().split()\n            self.time = int(first_line[0])\n            self.width = int(first_line[1])\n            self.height = int(first_line[2])\n            self.input = [line.strip() for line in f.readlines()]\n            self.grid = [[] for _ in range(self.height)]\n            for i, row in enumerate(self.input):\n                for j, col in enumerate(row):\n                    if col == \"1\":\n                        self.grid[i].append(1)\n                    elif col == \"0\":\n                        self.grid[i].append(0)\n                    elif col == \"S\":\n                        self.start_point = (i, j)\n                    elif col == \"U\":\n                        self.up_points.append((i, j))\n                    elif col == \"D\":\n                        self.down_points.append((i, j))\n                    elif col == \"L\":\n                        self.left_points.append((i, j))\n                    elif col == \"R\":\n                        self.right_points.append((i, j))\n\n    def solve(self):\n        queue = collections.deque()\n        queue.append(self.start_point)\n        distance = {self.start_point: 0}\n        parent = {self.start_point: None}\n        while queue:\n            current_point = queue.popleft()\n            for direction in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                neighbor = (current_point[0] + direction[0], current_point[1] + direction[1])\n                if neighbor not in distance or distance[neighbor] > distance[current_point] + 1:\n                    distance[neighbor] = distance[current_point] + 1\n                    parent[neighbor] = current_point\n                    queue.append(neighbor)\n                    if self.grid[neighbor[0]][neighbor[1]] == 1:\n                        return distance[neighbor]\n\n\n\ninput_file_name = \"tests/parsed/sample.txt\"\nsolver = MazeSolver(input_file_name)\nsolution = solver.solve()\nprint(solution)\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == '2'\nassert solution('2 4 4\\n1111\\n1S01\\n1011\\n0L11') == 'NOT POSSIBLE'\n\"\"\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == '2'\n\n\"\"\"\n\nt, n, m = map(int, stdin.readline().strip().split())\ngrid = []\nfor _ in range(n):\n    grid.append(list(stdin.readline().strip()))"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == \"2\"\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == \"NOT POSSIBLE\"\n\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == expected_output_1\n\"\"\""
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0U11\") == '2'\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0L11\") == 'NOT POSSIBLE'\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0R11\") == 'NOT POSSIBLE'\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0D11\") == 'NOT POSSIBLE'\nassert solution(\"2 4 4\\n1111\\n1S01\\n1011\\n0S11\") == 'NOT POSSIBLE'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4835,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 4 4\\n1111\\n1S01\\n1011\\n0U11') == '2'\nassert solution('2 4 4\\n1111\\n1S01\\n1011\\n0L11') == 'NOT POSSIBLE'\n\nassert solution('1 1 1\\n1S') == 'NOT POSSIBLE'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('10 100\\n1 1 1 1 1 1 1 1 1 1') == '10'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\"\"\"\n\nn,c = [int(i) for i in input().split()]\nw = [int(i) for i in input().split()]\n\nmax_w = 0\nfor i in w:\n    if i > max_w:\n        max_w = i\n\ncur_w = 0\nfruits = []\nfor i in w:\n    if cur_w + i <= c:\n        cur_w += i\n    else:\n        fruits.append(i)\n        cur_w = i\n\nmax_fruits = len(fruits)"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\n\"\"\"\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\n3 1 2 1 1\") == '4'\nassert solution(\"7 5\\n1 5 4 3 2 1 1\") == '3'\nassert solution(\"1 1\\n1\") == '1'\nassert solution(\"1 1\\n2\") == '1'\nassert solution(\"2 1\\n1\") == '1'\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\n1 5 4 3 2 1 1\") == \"3\"\nassert solution(\"7 5\\n1 5 4 3 2 1 1\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 5\\n3 1 2 1 1\") == 4\n\"\"\""
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\n1 5 4 3 2 1 1') == '3'\n"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\n\"\"\"\n\nimport sys\nimport math\nfrom itertools import permutations"
    },
    {
        "number": 4836,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5\\n3 1 2 1 1') == '4'\nassert solution('7 5\\n1 5 4 3 2 1 1') == '3'\nassert solution('7 5\\n1 1 1 1 1 1') == '0'\nassert solution('7 5\\n1 1 1 1 2') == '1'\nassert solution('7 5\\n1 1 1 2') == '1'\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"SSPPR\", 1) == \"5\"\nassert solution(\"SSPPR\", 2) == \"10\"\nprint(\"Test cases passed.\")"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\"\nassert solution(\"5\\nSSPPR\\n3\\nPPRRS\\nRRSSP\\n\") == \"10\\n20\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\"\n\nprint('The code ran Correctly')"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"SSPPR\\n1\\nSSPPR\\n\") == \"5\\n10\"\nassert solution(\"SSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == \"10\\n15\"\n\n\"\"\"\n\nimport sys\n\nR, S = sys.stdin.readline(), sys.stdin.readline()\n\nwhile len(R)!= 0:\n    s, p, r = S.count('S'), S.count('P'), S.count('R')\n    n = int(sys.stdin.readline())\n    for i in range(n):\n        s += sys.stdin.readline().count('S')\n        p += sys.stdin.readline().count('P')\n        r += sys.stdin.readline().count('R')\n    print(s, p, r)\n    R, S = sys.stdin.readline(), sys.stdin.readline()\n\n\"\"\"\n\nimport sys\n\nR, S = sys.stdin.readline(), sys.stdin.readline()\n\nwhile len(R)!= 0:\n    s = p = r = 0\n    n = int(sys.stdin.readline())\n    for i in range(n):\n        s += sys.stdin.readline().count('S')\n        p += sys.stdin.readline().count('P')\n        r += sys.stdin.readline().count('R')\n    print(s, p, r)\n    R, S = sys.stdin.readline(), sys.stdin.readline()\n\"\"\""
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5SSPPR') == '5 10', 'Test #1, actual: {}'.format(solution('5SSPPR'))\nassert solution('5SSPPR') == '5 10', 'Test #2, actual: {}'.format(solution('5SSPPR'))\n\nprint('Success')\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"SSPPR\") == \"5\", \"Test 1 Failed\"\nassert solution(\"SSPPR\") == \"10\", \"Test 2 Failed\"\nassert solution(\"SSPPR\") == \"5\", \"Test 3 Failed\"\nprint(\"All tests passed\")\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n\") == '5\\n10'\n\nassert solution(\"5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n\") == '10\\n15'\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"SSPPR\") == \"5\\n10\"\nassert solution(\"SSPPR\", 2) == \"10\\n15\"\nassert solution(1, []) == None\nassert solution(\"SSPPR\", 1) == \"5\\n5\"\nassert solution(\"SSPPR\", 0) == \"5\\n5\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n2\\nPPRRS\\nRRSSP\") == \"10\\n15\"\nassert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n4\\nRPRSP\\nPPRRSS\\n\") == \"10\\n15\"\n\nassert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n4\\nRPRSP\\nPPRRSS\\n\\n3\\nSSSSS\\nSSPSS\\nSSSSS\\nSSSPS\\nSSSPP\\nSSPPS\") == \"15\\n15\"\nassert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n4\\nRPRSP\\nPPRRSS\\n\\n3\\nSSSSS\\nSSPSS\\nSSSSS\\nSSSPS\\nSSSPP\\nSSPPS\\n\\n2\\nSSSSS\\nSSPSS\\nSSSSS\\nSSPPS\\nSSSPP\\nSSPPS\") == \"15\\n15\"\nassert solution(\"5\\nSSPPR\\n1\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n4\\nRPRSP\\nPPRRSS\\n\\n3\\nSSSSS\\nSSPSS\\nSSSSS\\nSSSPS\\nSSSPP\\nSSPPS\\n\\n2\\nSSSSS\\nSSPSS\\nSSSSS\\nSSSPS\\nSSSPP\\nSSPPS\\n\\n1\\nSSSSS\\nSSPSS\\nSSSSS\\nSSSPS\\nSSSPP\\nSSPPS\") == \"15\\n15\"\n"
    },
    {
        "number": 4837,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\nSSPPR\\n1\\nSSPPR\\n') == '5\\n10'\nassert solution('5\\nSSPPR\\n2\\nPPRRS\\nRRSSP\\n') == '10\\n15'\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n7\\n11\\n') == '4'\nassert solution('5\\n2\\n5\\n9\\n10\\n17\\n') =='still running'\n\"\"\""
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') =='still running'\nassert solution('2') == '2'\nassert solution('5') =='still running'\nassert solution('7') == '4'\nassert solution('10') =='still running'\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\") == \"still running\"\nassert solution(\"2\\n5\\n9\\n10\\n17\\n\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\") == \"still running\""
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n7\\n11\\n') == '4'\nassert solution('5\\n2\\n5\\n9\\n10\\n17\\n') =='still running'\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n7\\n11\\n') == '4\\n'\nassert solution('5\\n2\\n5\\n9\\n10\\n17\\n') =='still running\\n'\n\nprint('Success')\n\n########################################################################\n\n-----\n\nimport sys\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2\\n7\\n11\\n\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\\n\") == \"still running\"\n"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n7\\n11\\n\") == \"4\"\n\n-----Constraints-----\n$1 \\leq N \\leq 1000$\n$0 \\leq t \\leq 10^6$\n\"\"\""
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n7\") == \"4\"\nassert solution(\"5\\n2\\n5\\n9\\n10\") == \"still running\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"4\"\nassert solution(\"9\\n3\\n1\\n3\\n5\\n6\\n3\\n2\\n2\\n3\\n9\\n2\\n2\\n4\\n2\\n3\\n9\\n2\\n2\\n2\\n2\\n2\\n2\\n1\\n5\\n9\\n3\\n2\\n6\\n9\\n3\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\n4\\n9\\n2\\n6\\n6\\"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n7\\n11\") == \"4\\nstill running\"\nassert solution(\"5\\n2\\n5\\n9\\n10\\n17\") == \"still running\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4838,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2\\n7\\n11\\n') == '4\\n'\n\nsolution('5\\n2\\n5\\n9\\n10\\n17\\n')\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 4 2\") == \"0.5\"\nassert solution(\"3\\n2 1 3\") == \"impossible\""
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6\\n6 1 3 2 2 3') == '0.6'\nassert solution('2\\n2 2') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"impossible\"\nassert solution(\"6 1 3 2 2 3\") == \"0.6\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 1 3 2 2 3\\n2 2') == '0.6'\n\n\"\"\"\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n6 1 3 2 2 3\") == \"0.6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '6\\n6 1 3 2 2 3'\n) == '0.6'\nassert solution(\n    '2\\n2 2'\n) == 'impossible'\n\"\"\"\n\nimport sys\n\nfrom typing import List\n\nsys.setrecursionlimit(10 ** 7)\n"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\n6 1 3 2 2 3\") == \"0.6\"\nassert solution(\"2\\n2 2\") == \"impossible\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"6 1 3 2 2 3\") == \"0.6\"\nassert solution(\"2 2\") == \"impossible\"\n\"\"\""
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6 1 3 2 2 3\") == \"0.6\"\nassert solution(\"2 2\") == \"impossible\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4839,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('6 1 3 2 2 3') == '0.6'\nassert solution('2 2') == 'impossible'\n\"\"\"\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"\n\"\"\"\n\nstdin = [line.strip() for line in open('./input.txt', 'r')]\n\na1, b1, a2, b2 = [int(num) for num in stdin[0].split()]"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\n\"\"\""
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"\nassert solution(\"1 8 1 8\\n1 10 2 5\\n1 6 1 6\") == \"Gunnar\"\n\"\"\"\n\nimport pytest\n\n@pytest.mark.parametrize('test_input, expected', [('1 4 1 4\\n1 6 1 6', 'Emma'),\n                                                  ('1 8 1 8\\n1 10 2 5', 'Tie'),\n                                                  ('1 8 1 8\\n1 10 2 5\\n1 6 1 6', 'Gunnar')])\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1 4 1 4\n1 6 1 6''') == \"Emma\"\nassert solution('''1 8 1 8\n1 10 2 5''') == \"Tie\"\n\"\"\""
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    '1 4 1 4\\n'\n    '1 6 1 6') == 'Emma'\nassert solution(\n    '1 8 1 8\\n'\n    '1 10 2 5') == 'Tie'\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"\nassert solution(\"1 12 1 12\\n1 10 2 5\") == \"Gunnar\"\n\"\"\"\n\nimport sys\nimport ast\nimport operator\n\nstdin = sys.stdin\n\ninput = stdin.readline\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 4 1 4\", \"1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\", \"1 10 2 5\") == \"Tie\"\nassert solution(\"1 8 3 8\", \"1 10 2 5\") == \"Gunnar\"\nassert solution(\"1 8 3 8\", \"1 10 1 10\") == \"Tie\"\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 4 1 4\") == \"Emma\"\nassert solution(\"1 8 1 8\") == \"Tie\"\nassert solution(\"1 10 2 5\") == \"Tie\"\n"
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\""
    },
    {
        "number": 4840,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 4 1 4\\n1 6 1 6\") == \"Emma\"\nassert solution(\"1 8 1 8\\n1 10 2 5\") == \"Tie\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 3 mumble 5') =='makes sense'\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'\n\n\"\"\""
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n\"\"\""
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 2 3 mumble 5') == \"makes sense\"\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') == \"something is fishy\"\n\"\"\""
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8 1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n1 2 3 mumble 5') == \"makes sense\"\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') == \"something is fishy\"\nprint(\"All tests passed.\")\n\"\"\""
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n\"\"\""
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 1 2 3 mumble 5') =='makes sense'\nassert solution('8 1 2 3 mumble mumble 7 mumble 8') =='something is fishy'"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8\\n1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\""
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 2 3 mumble 5') =='makes sense'\nassert solution('8\\n1 2 3 mumble mumble 7 mumble 8') =='something is fishy'"
    },
    {
        "number": 4841,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 1 2 3 mumble 5\") == \"makes sense\"\nassert solution(\"8 1 2 3 mumble mumble 7 mumble 8\") == \"something is fishy\"\n\"\"\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == '0 0'\nassert solution('1 2 3 4 5') == '1 3 3 4'\nassert solution('2 3 5 7 10 11 13 14 15 16 17 18 20') == '1 0 0 0 0 1 1 1 2 2 1 0 0'\nassert solution
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"\nassert solution(\"1 9\") == \"1 10\"\nassert solution(\"2 9\") == \"2 10\"\nassert solution(\"1 9 9\") == \"1 10 10\"\n\n\"\"\"\n\nfrom typing import List, Dict\nfrom math import inf\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 9 25 49 81') == '2 121'\nassert solution('5 3 6 9 12 15') == '1 18'\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 9 25 49 81') == '2 121'"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 6 9 12 15') == '1 18'\nassert solution('4 9 25 49 81') == '2 121'\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 6 9 12 15\") == \"1 18\"\nassert solution(\"4 9 25 49 81\") == \"2 121\"\nassert solution(\"5 2 3 4 6 7\") == \"0 40\"\nassert solution(\"1 2 3 4 5\") == \"0 6\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\") == \"1 5\"\n"
    },
    {
        "number": 4842,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 6 9 12 15\") == '1 18'\nassert solution(\"4 9 25 49 81\") == '2 121'\nassert solution(\"6 9 15 23 42\") == '2 9'\nassert solution(\"1 2 3 4 5\") == '0'\n\"\"\""
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\n\n\"\"\"\n\n\"\"\"\nThe Eight Queens problem is a famous computer science problem involving\nthe placement of eight queens on a chessboard such that no two queens\ncan attack each other.\n\n\n\n\nThis can be solved by backtracking, since the eight queens problem\nis clearly a generalization of the N queens problem.\n\n\"\"\"\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4''') == 'CORRECT'\nassert solution('''0\n2 3\n1 0\n0 2\n3 1''') == 'INCORRECT'\nassert solution('''4\n2 3\n1 0\n0 2\n3 1''') == 'INCORRECT'\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\nassert solution('4\\n2 3\\n1 0\\n0 2\\n3 1') == 'CORRECT'\n\nassert solution('4\\n2 3\\n1 0\\n0 2\\n3 1') == 'CORRECT'\nassert solution('4\\n2 3\\n1 0\\n0 2\\n3 1') == 'CORRECT'\nassert solution('4\\n2 3\\n1 0\\n0 2\\n3 1') == 'CORRECT'\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\nassert solution('8\\n0 2\\n1 6\\n3 1\\n5 0\\n4 3\\n7 2\\n6 9') == 'INCORRECT'\n\n-----------BETTER SOLUTION (slide 12)----------\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\\n\") == \"CORRECT\"\n\n########################################################################\n\nimport sys"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\nassert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\n\n-----Problem-----\nGiven the positions of the queens, check whether or not it is a valid solution to the \u201ceight queens puzzle\u201d.\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\nfor i in range(N):\n    x, y = map(int, sys.stdin.readline().split())\n    for j in range(N):\n        if j == x:\n            print(\"INCORRECT\")\n            break\n        if abs(j - x) == abs(i - y):\n            print(\"INCORRECT\")\n            break\n    else:\n        print(\"CORRECT\")\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\n\"\"\"\n\nimport sys\nimport unittest\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 3\\n1 0\\n0 2\\n3 1') == 'CORRECT'\nassert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4') == 'CORRECT'\nassert solution('8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\\n') == 'CORRECT'\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\"\n\n\"\"\"\n"
    },
    {
        "number": 4843,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n1 5\\n6 2\\n3 1\\n5 0\\n4 6\\n0 3\\n2 7\\n7 4\") == \"CORRECT\"\nassert solution(\"4\\n2 3\\n1 0\\n0 2\\n3 1\") == \"CORRECT\""
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\n\nprint(solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\"))\nprint(solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\"))\n\n'''\n'''\n\nN = int(input())\nmatrix = []\nfor i in range(N):\n    matrix.append(list(map(int,input().split())))"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n'3\\n0 1 1\\n1 0 1\\n1 1 0'\n) == '1 1 1'\nassert solution(\n'3\\n0 0 1 1\\n1 0 1 1\\n1 1 0'\n) == '1 2 1'\nassert solution(\n'3\\n0 0 1 1\\n1 0 1 1\\n1 1 0'\n) == '1 1 1'\nassert solution(\n'5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0'\n) == '1 2 3 1 11'\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n0 0 0 0\\n0 0 0 0\\n1 0 0 0\\n1 1 1 1\") == \"1 1 1 1\"\nassert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\n\"\"\"\n\n\nfrom typing import List\n\nclass Solution:\n    def find_min_max_elements(self, matrix: List[List[int]]):\n        first_elem, first_row = 0, 0\n        last_elem, last_row = 0, 0\n        for i in range(len(matrix)):\n            for j in range(len(matrix)):\n                if i == j:\n                    first_elem = min(first_elem, matrix[i][j])\n                    last_elem = max(last_elem, matrix[i][j])\n                if i < j:\n                    first_row = min(first_row, matrix[i][j])\n                    last_row = max(last_row, matrix[i][j])\n        return first_elem, first_row, last_elem, last_row\n\n    def reconstruct_array(self, matrix: List[List[int]]):\n        first_elem, first_row, last_elem, last_row = self.find_min_max_elements(matrix)\n        first_line = 0\n        last_line = 0\n        for i in range(len(matrix)):\n            for j in range(len(matrix)):\n                if i < j and matrix[i][j] == first_elem:\n                    first_line = min(first_line, j)\n                if i > j and matrix[i][j] == last_elem:\n                    last_line = max(last_line, j)\n        return first_line * last_line + first_row * last_row\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n0 1 1\n1 0 1\n1 1 0''') == '1 1 1'\nassert solution('''5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0''') == '1 2 3 1 11'\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"3\n0 1 1\n1 0 1\n1 1 0\"\"\") == \"1 1 1\"\nassert solution(\"\"\"5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0\"\"\") == \"1 2 3 1 11\"\n\"\"\"\n\u0414\u0432\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\u0445 \u0432 \u0432\u0438\u0434\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043f\u043e\u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u0431\u043e\u0438\u0445 \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432.\n\n-----\na = [0, 1, 2, 3]\nb = [1, 2, 3, 4]\n\na(0) = 0\nb(0) = 1\n\na(1) = 1\nb(1) = 2\n\na(2) = 2\nb(2) = 3\n\na(3) = 3\nb(3) = 4\n\"\"\"\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\n\narray = [[int(i) for i in sys.stdin.readline().strip().split()] for _ in range(n)]\n\ns_matrix = []\n\nfor i in range(n):\n    s_matrix.append([0 for j in range(n)])\n\nfor i in range(n):\n    for j in range(n):\n        for m in range(n):\n            s_matrix[i][j] += array[i][m] & array[m][j]\n\nfor line in s_matrix:\n    sys.stdout.write(' '.join([str(i) for i in line]) + '\\n')"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n0 1 1\\n1 0 1\\n1 1 0\") == \"1 1 1\"\nassert solution(\"5\\n0 0 1 1 1\\n0 0 2 0 2\\n1 2 0 1 3\\n1 0 1 0 1\\n1 2 3 1 0\") == \"1 2 3 1 11\"\n\n\"\"\"\n\nfrom sys import stdin\n\nsize = int(stdin.readline().strip())\nmatrix = []\nfor _ in range(size):\n    matrix.append(list(map(int, stdin.readline().split())))\n\ndp = [[0 for _ in range(size)] for _ in range(size)]\nresult = [0 for _ in range(size)]\n\nfor j in range(size):\n    for i in range(size):\n        dp[i][j] = matrix[i][j]\n        if i == j:\n            dp[i][j] = 0\n\nfor j in range(size):\n    for i in range(size):\n        if i > j:\n            dp[i][j] = dp[i - 1][j] + matrix[i][j]\n\nfor j in range(size):\n    for i in range(size):\n        if i + 1 < j:\n            dp[i][j] = max(dp[i][j], dp[i][j - 1])\n\nfor j in range(size):\n    for i in range(size):\n        if i > j:\n            result[j] = max(result[j], dp[i][j])\n\nprint(' '.join(map(str, result)))\n"
    },
    {
        "number": 4844,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n0 1 1\n1 0 1\n1 1 0''') == '1 1 1'\nassert solution('''5\n0 0 1 1 1\n0 0 2 0 2\n1 2 0 1 3\n1 0 1 0 1\n1 2 3 1 0''') == '1 2 3 1 11'\nassert solution('''4\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0''') == '1 1 1 1'\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\n\"\"\"\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"16 1\") == \"Saturday\"\nassert solution(\"3 8\") == \"Sunday\"\nassert solution(\"23 12\") == \"Monday\"\nassert solution(\"2 16\") == \"Tuesday\"\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"17 1\") == \"Saturday\"\n\"\"\"\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"17 1\") == \"Saturday\"\n\n\"\"\"\n\n\n\"\"\"\nSOLUTION\n\"\"\""
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"25 12\") == \"Sunday\"\n\"\"\""
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"17 1\") == \"Saturday\"\n\"\"\"\n\n\"\"\"\nExplaination:\n    $2009$ is a leap year.\n    day in a month are numbered from 1 to 31\n\"\"\"\n\nimport sys\nfrom datetime import date\nimport calendar\n\nday = sys.stdin.readline().split()\n\nday_of_the_week = calendar.weekday(2009, int(day[0]), int(day[1]))\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1 1') == 'Thursday'\nprint(solution('1 1'))\n\n-----Explanation-----\nThis is a simple calendar application, where you provide two numbers in a single line: day and month.\n\nYour program should output the name of the day of the week that corresponds to that date.\n\nThe following table represents the days of the week:\n\nday    Monday    Tuesday    Wednesday    Thursday    Friday    Saturday    Sunday\n1        Sun        Mon        Tue        Wed        Thu        Fri        Sat\n2        Mon        Tue        Wed        Thu        Fri        Sat        Sun\n3        Tue        Wed        Thu        Fri        Sat        Sun        Mon\n4        Wed        Thu        Fri        Sat        Sun        Mon        Tue\n5        Thu        Fri        Sat        Sun        Mon        Tue        Wed\n6        Fri        Sat        Sun        Mon        Tue        Wed        Thu\n7        Sat        Sun        Mon        Tue        Wed        Thu        Fri\n8        Sun        Mon        Tue        Wed        Thu        Fri        Sat\n9        Mon        Tue        Wed        Thu        Fri        Sat        Sun\n10        Tue        Wed        Thu        Fri        Sat        Sun        Mon\n11        Wed        Thu        Fri        Sat        Sun        Mon        Tue\n12        Thu        Fri        Sat        Sun        Mon        Tue        Wed\n\nSample Input 1:\n1 1\nSample Output 1:\nThursday\nSample Input 2:\n17 1\nSample Output 2:\nSaturday\n\"\"\"\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1') == 'Thursday'\nassert solution('17 1') == 'Saturday'\n\nSample Input 3:\n18 2\nSample Output 3:\nFriday\n\"\"\"\n"
    },
    {
        "number": 4845,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"Thursday\"\nassert solution(\"17 1\") == \"Saturday\"\n\"\"\"\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40'\nassert solution('100\\n500\\n12\\n') == '129\\n480'"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n100\\n4') == '4\\n40'\n\"\"\""
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''1\n100\n4\n''') == '4\\n40'\nprint('Test 1 OK')\n\nassert solution('''1\n100\n12\n''') == '129\\n480'\nprint('Test 2 OK')\n\nassert solution('''1\n100\n12\n''') == '129\\n480'\nprint('Test 3 OK')\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n100\\n4\\n') == '4\\n40'\nassert solution('100\\n500\\n12\\n') == '129\\n480'\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n100\\n4\\n12') == '4\\n129'\nprint('The local tests are done.')\"\"\""
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''1\n100\n4\n''') == '4\\n40'\n\nassert solution('''1\n100\n12\n''') == '129\\n480'\n\nassert solution('''1\n100\n12\n''') == '129\\n480'\n\nassert solution('''1\n100\n12\n''') == '129\\n480'\n\nassert solution('''1\n100\n12\n''') == '129\\n480'"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''1\n100\n4\n''') == '4'\nassert solution('''1\n100\n12\n''') == '129'\nassert solution('''5\n100\n12\n''') == '12'\nassert solution('''3\n100\n12\n''') == '12'\nassert solution('''1\n1000\n36\n''') == '1002'\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n100\\n4\\n12\") == \"129\"\nassert solution(\"1\\n100\\n4\\n12\") == \"4\"\nassert solution(\"1\\n100\\n2\\n12\") == \"40\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1\\n100\\n4\\n\") == \"4\\n40\"\nprint('Hooray!')\n\n\"\"\"\n\nfrom unittest import TestCase\nfrom typing import List\nimport unittest\n"
    },
    {
        "number": 4846,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"100 500 12\") == \"129 480\"\nassert solution(\"1 10000 4\") == \"10 9999\"\n\"\"\""
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4') == '4.0\\n3'\nassert solution('3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3') == '6.0\\n3'\nassert solution('2 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3') == '5.0\\n3'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '4.0\\n3'\n\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '6.0\\n3'\n\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '6.0\\n3'\n\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '6.0\\n3'\n\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '6.0\\n3'"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\") == \"6.0\\n0\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\"\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''1 1\n5 1\n3 3\n4''') == '4.0\\n3'\nassert solution('''1 1\n5 1\n3 3\n4''') == '6.0\\n3'\nassert solution('''1 1\n5 1\n3 3\n4''') == '6.0\\n3'\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n3 11\n3 12\n3 13\n3 14\n3 15\n3 16\n3 17\n3 18\n3 19\n3 20\n3 21\n3 22\n3 23\n3 24\n3 25\n3 26\n3 27\n3 28\n3 29\n3 30\n3 31\n3 32\n3 33\n3 34\n3 35\n3 36\n3 37\n3 38\n3 39\n3 40\n3 41\n3 42\n3 43\n3 44\n3 45\n3 46\n3 47\n3 48\n3 49\n3 50\n3 51\n3 52\n3 53\n3 54\n3 55\n3 56\n3 57\n3 58\n3 59\n3 60\n3 61\n3 62\n3 63\n3 64\n3 65\n3 66\n3 67\n3 68\n3 69\n3 70\n3 71\n3 72\n3 73\n3 74\n3 75\n3 76\n3 77\n3 78\n3 79\n3 80\n3 81\n3 82\n3 83\n3 84\n3 85\n3 86\n3 87\n3 88\n3 89\n3 90\n3 91\n3 92\n3 93\n3 94\n3 95\n3 96\n3 97\n3 98\n3 99\n3 100''') == '6.0\\n3'\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1\\n5 1\\n3 3\\n4') == '4.0\\n3'\n"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == '4.0\\n3'\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == '6.0\\n3'\n\nprint('The code ran Correctly')"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\\n3 1\\n3 2\\n3 3\\n3 4\") == \"4.0\\n3\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\") == \"6.0\\n3\""
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '6.0\\n3'\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '6.0\\n3'\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '6.0\\n3'\nassert solution('''1 1\n5 1\n3 3\n4\n3 1\n3 2\n3 3\n3 4''') == '6.0\\n3'\n\n-----Problem-----\nOpenLand 2019\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 1\\n5 1\\n3 3\\n4\") == \"4.0\\n3\"\nassert solution(\"1 1\\n5 1\\n3 3\\n4\") == \"6.0\\n3\"\nassert solution(\"3 2\\n5 4\\n1 6\\n3\\n2 4\\n3 5\\n4 3\\n\") == \"6.0\\n3\"\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 4847,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(1, 1) == '4.0'\nassert solution(5, 1) == '6.0'\nassert solution(3, 1) == '4.0'\nassert solution(5, 3) == '7.0'\nassert solution(5, 5) == '8.0'\n\"\"\""
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(3)) == '2'\nassert solution(str(30)) == '7'\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\nassert solution('5') == '2'\n\"\"\"\n\nimport math\n\nn = int(input())"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '2'\n\nassert solution('30') == '7'\n\nprint(solution(stdin.readline()))"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == 2\n\"\"\"\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"30\") == \"7\"\n\"\"\"\n\nimport math\nfrom math import gcd"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3') == '2'\nassert solution('30') == '7'"
    },
    {
        "number": 4848,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3''') == '''2'''\nassert solution('''30''') == '''7'''"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\\nHE GOT AWAY!\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1 2\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n\nimport re"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\\n2\\n3\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\n\"\"\""
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\\n\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\\n\"\n\"\"\"\nfrom typing import List\nfrom collections import defaultdict\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1\") == \"1\"\nassert solution(\"N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1\") == \"HE GOT AWAY!\"\n\n\"\"\"\n\nimport sys\n\nlines = sys.stdin.readlines()\n\nfor line in lines:\n    if line.strip() == \"N-FBI1\":\n        print(\"1\")\n    elif line.strip() == \"9A-USKOK\":\n        print(\"1\")\n    elif line.strip() == \"I-NTERPOL\":\n        print(\"1\")\n    elif line.strip() == \"G-MI6\":\n        print(\"1\")\n    elif line.strip() == \"RF-KGB1\":\n        print(\"1\")\n    else:\n        print(\"HE GOT AWAY!\")\n"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('N-FBI1\\n9A-USKOK\\nI-NTERPOL\\nG-MI6\\nRF-KGB1') == '1\\nHE GOT AWAY!'\nassert solution('N321-CIA\\nF3-B12I\\nF-BI-12\\nOVO-JE-CIA\\nKRIJUMCAR1') == 'HE GOT AWAY!'\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4849,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\nprint(solution(input()))\n\"\"\"\n\n\"\"\"\n\u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438:\n1. \u041f\u0440\u0438\u0431\u0430\u0432\u0438\u0442\u044c, \u0412\u044b\u0447\u0435\u0441\u0442\u044c, \u0423\u043c\u043d\u043e\u0436\u044c, \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c, \u0421\u043b\u043e\u0436\u0438\u0442\u044c, \u0412\u044b\u0432\u043e\u0434\n2. \u041f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u043a \u0442\u0438\u043f\u0443 float\n3. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f, \u0432\u044b\u0432\u043e\u0434 \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0431 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u043c \u0438\u043b\u0438 \u043d\u0435\u0443\u0441\u043f\u0435\u0448\u043d\u043e\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043d\u043e \u043d\u0435 \u0432\u044b\u0432\u043e\u0434 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\n4. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\n5. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0438 \u0432\u044b\u0432\u043e\u0434 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b, \u043d\u043e \u043d\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\n\"\"\""
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 3 3\\n4 5 4\") == \"6.843530573929037\"\nprint(solution(\"3 3 3\\n4 5 4\"))\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n3 3 3\\n4 5 4\") == '6.843530573929037'\n\"\"\"\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n2 3 3\\n4 5 4') == '6.843530573929037'"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n3 3 3\\n4 5 4') == '8.0'\n\"\"\"\nimport math\nimport math_tools"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1\\n2\\n3\\n') == '6.0'\nassert solution('5\\n4\\n3\\n2\\n1') == '2.5'\nassert solution('10\\n5\\n6\\n1\\n8\\n12\\n4\\n7\\n9\\n3\\n2') == '31.5'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n3 3 3\\n4 5 4') == '8.0'\n\"\"\""
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1\\n2 3\\n3 5') == '4.0'\nassert solution('2\\n3 5\\n3 4') == '7.0'\nassert solution('3\\n6 8\\n5 3\\n3 2') == '8.0'\n\"\"\"\n\nimport sys\nfrom math import sqrt\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n3 3 3\\n4 5 4\") == '8.0'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\\n3 3 3\\n4 4 5\") == \"8.0\"\n\nhttps://app.codility.com/demo/results/trainingE4NGFQ-GDW/\n\"\"\""
    },
    {
        "number": 4850,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n3 3 3\\n4 5 4\") == \"6.843530573929037\"\n\"\"\"\n\nimport math\n\nn = int(input())\n\nfor _ in range(n):\n    a, b, c = map(float, input().split())\n\n    h = (a**2 + b**2 + c**2)/2\n\n    if h == (a + b + c):\n        print(\"0.0\")\n    elif h < (a + b + c):\n        print(\"%.6f\" % math.sqrt(h*(a+b+c-h)))\n    else:\n        print(\"%.6f\" % math.sqrt(((a-h)*(a-h)+(b-h)*(b-h)+(c-h)*(c-h))))\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\nassert solution('123') == '132'\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\nprint('Success')\n\n*\n\n-The number given as input is greater than 1000000000, which is the limit of the challenge.\n\n-I believe you don't need to use the entire input. This can be altered, but I'm not sure if that's a good idea.\n\n-The output always needs to be a string, so it will always be a number. If the number is 25 and you try to run your code, then it'll complain about converting an int to a string. If you remove the string, then it'll run fine.\n\n-The output needs to be an integer, so it will always be a number. It has to be an integer because the output needs to be greater than or equal to the input number.\n\n-To get the output to be greater than or equal to the input number, just add the number given as input to 1 and then run the solution again.\n\n-The output needs to be greater than the input number, so it will always be greater than 0 and greater than the input number.\n\n-Just like in some other problems, your solution can contain any number of lines of code.\n\n-You can have any number of lines of code in your solution, but the function solution(stdin) must be there, because we'll call the solution() function to test it.\n\n-You don't have to worry about function documentation, because the test function we provide will take care of that.\n\n-Just like in other problems, you do not need to worry about how to display the output. The test function will print out the output for you.\n\n-You can do whatever you want with the input. You do not need to be concerned with the input in any way. It is not needed in any way.\n\n-This problem also has no input tests for you. If you want to test your solution, you can write any test you want.\n\n-You can not assume that the input will be a valid integer. The input will not always be a valid integer.\n\n-The input will always be a valid integer, so you can safely convert it to an integer.\n\n-If you want to do any input validation, you can, but just to be safe, it's not necessary.\n\n-The output will always be a valid integer, so you can just convert it to an integer.\n\n-If your solution is more than one line of code, you can just put it all on one line.\n\n-I think the solution will have one or two lines of code. If it's more than one line of code, then I don't know what the hell you did.\n\n-It's not necessary to know the solution, but if you want to know the solution, then it's not necessary to submit your solution. Just submit your code.\n\n-I will use your solution, so you don't need to submit it.\n\n-If you want to be really safe, then you can write your code in the test function, as I did with the input and output prompts.\n\n-If you have any questions, then feel free to ask in the discussion forums!\n\n-I will only ask questions regarding the solution, so if you don't know the solution, then you will be safe.\n\n-The test function will run your solution and compare the output against the expected output. If it matches, then your code is correct. If it doesn't match, then it's not correct.\n\n-To ensure that your code is correct, the test function will tell you if the output of your code is not equal to the expected output. If the output does not match, then it will give you the expected output, and the actual output. This is to help you figure out what is wrong with your code.\n\n-There are no test cases for this problem.\n\n-To run the test cases, you will have to manually open up the command line and go to the folder with the file. It should be in the same folder as the test function. You should also put the file in the same folder as this file.\n\n-If you want to get a list of the test cases, then you should go to the website (instead of the file), and the instructions on how to run the test cases.\n\n-To see a list of the test cases, you can go to the website (instead of the file), and the instructions on how to run the test cases.\n\n-All the test cases are correct and you should be able to submit them. There is no wrong answer for this problem.\n\n-Do not write comments in the solution. The test function will test the code based on these comments.\n\n-Do not use comments in your solution. The test function will test the code based on these comments.\n\n-Do not write your code in the test function. The test function will test your code based on your comments.\n\n*\n\n-----Time Complexity-----\n\nTime complexity is O(1).\n\n-----Space Complexity-----\n\nSpace complexity is O(1).\n\n-----Test Cases-----\n\nInput:\n8\n\nOutput:\n8\n\nInput:\n25\n\nOutput:\n27\n\nInput:\n90\n\nOutput:\n90\n\nInput:\n75\n\nOutput:\n75\n\nInput:\n100\n\nOutput:\n120\n\nInput:\n100\n\nOutput:\n120\n\nInput:\n17\n\nOutput:\n117\n\nInput:\n123\n\nOutput:\n129\n\nInput:\n27\n\nOutput:\n27\n\nInput:\n42\n\nOutput:\n42\n\nInput:\n35\n\nOutput:\n47\n\nInput:\n39\n\nOutput:\n39\n\nInput:\n65\n\nOutput:\n73\n\nInput:\n78\n\nOutput:\n81\n\nInput:\n69\n\nOutput:\n69\n\nInput:\n125\n\nOutput:\n126\n\nInput:\n137\n\nOutput:\n137\n\nInput:\n853\n\nOutput:\n853\n\nInput:\n171\n\nOutput:\n171\n\nInput:\n1\n\nOutput:\n1\n\nInput:\n33\n\nOutput:\n33\n\nInput:\n13\n\nOutput:\n13\n\nInput:\n99\n\nOutput:\n99\n\nInput:\n225\n\nOutput:\n246\n\nInput:\n102\n\nOutput:\n102\n\nInput:\n58\n\nOutput:\n58\n\nInput:\n27\n\nOutput:\n27\n\nInput:\n15\n\nOutput:\n15\n\nInput:\n18\n\nOutput:\n18\n\nInput:\n125\n\nOutput:\n125\n\nInput:\n0\n\nOutput:\n0\n\nInput:\n3\n\nOutput:\n3\n\nInput:\n33\n\nOutput:\n33\n\nInput:\n66\n\nOutput:\n66\n\nInput:\n19\n\nOutput:\n19\n\nInput:\n98\n\nOutput:\n98\n\nInput:\n33\n\nOutput:\n33\n\nInput:\n69\n\nOutput:\n69\n\nInput:\n23\n\nOutput:\n23\n\nInput:\n31\n\nOutput:\n31\n\nInput:\n110\n\nOutput:\n110\n\nInput:\n0\n\nOutput:\n0\n\nInput:\n9\n\nOutput:\n9\n\nInput:\n19\n\nOutput:\n19\n\nInput:\n115\n\nOutput:\n115\n\nInput:\n19\n\nOutput:\n19\n\nInput:\n20\n\nOutput:\n20\n\nInput:\n8\n\nOutput:\n8\n\nInput:\n34\n\nOutput:\n34\n\nInput:\n79\n\nOutput:\n79\n\nInput:\n26\n\nOutput:\n26"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(24) == 24\nassert solution(25) == 27\n\"\"\"\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\nprint('Test pass.')"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\nassert solution('1234') == '1234'\nassert solution('2') == '3'\nassert solution('3') == '3'\n"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"24\") == \"24\"\nassert solution(\"25\") == \"27\"\n\"\"\""
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('24') == '24'\nassert solution('25') == '27'\n\"\"\"\n\nn = input()"
    },
    {
        "number": 4851,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\n\n-----\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+2+3+4+5+6+7+8+9\") == \"188\""
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4') == '7'\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\n\"\"\"\nfrom typing import List, Dict\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1+2+3+4+5+6+7+8+9') == '188'\nassert solution('1+2+3+4+5+6+7+8+9+9') == '381'\n\n'''\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\n\"\"\""
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1+9+8+4') == '7'\nassert solution('1+2+3+4+5+6+7+8+9') == '188'\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4+3+9+7+8+5+9+9\") == \"188\"\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import zip_longest\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1+2+3+4+5+6+7+8+9') == '188'\nassert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4') == '7'\nassert solution('1+9+8+4') == '7'\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\nassert solution(\"1+9+8+4\") == \"7\"\n"
    },
    {
        "number": 4852,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1+9+8+4') == '7'\nassert solution('1+2+3+4+5+6+7+8+9') == '188'\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 5 2\\n') == '2 5'\nassert solution('2 2 -4 5\\n') == '5 -2 4'\nassert solution('1 10 -30 3 4 5 8\\n') == '10 -8 7 3 4'\nassert solution('1 10 -30 3 4 5 8\\n') == '10 -8 7 3 4'\nassert solution('1 10 -30 3 4 5 8\\n') == '10 -8 7 3 4'\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 2 3') == '3 5 7'\nassert solution('1 2 -3 5') == '-3 1 2'\n\nassert solution('2 2 -4 5') == '5 -2 4'\nassert solution('3 -3 -5 7 -2') == '-1 -1 3 3'\nassert solution('6 0 -1 4 6 -1') == '5 1 -1 2 -3'\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"1 4 -2 5\") == \"5 -2 4\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\n\"\"\""
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\n\"\"\"\n\nfrom math import comb\nimport numpy as np\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 -4 5\") == \"5 -2 4\"\nassert solution(\"3 4 1 -2 4 -4\") == \"4 -10 4\"\nassert solution(\"4 5 6 3 2\") == \"15 14 8 6\"\nassert solution(\"6 -1 0 6 -1 0 1\") == \"4 -15 -4 5\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 5 2\\n') == '2 5'\n\"\"\""
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1 5 2\\n1 2 3\") == \"2 5\"\nassert solution(\"2 2 -4 5\\n3 -1 1\") == \"5 -2 4\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 5 2\") == \"2 5\"\nassert solution(\"2 2 -4 5\") == \"5 -2 4\"\n\"\"\"\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 5 2\\n') == '2 5'\nassert solution('2 2 -4 5\\n') == '5 -2 4'\n"
    },
    {
        "number": 4853,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 5 2') == '2 5'\nassert solution('2 2 -4 5') == '5 -2 4'\nassert solution('2 4 3') == '4 4 3'\n\nprint(solution(stdin.rstrip()))\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1 2 1 2\\n2 1 2 1 2') == '2 2 2 1 1'\nassert solution('5 2\\n2 1 2 1 2') == '2 2 2 1 1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\""
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 2\\n2 1 2 1 2') == '2 2 2 1 1'\nassert solution('9 3\\n1 3 3 3 2 2 2 1 1') == '1 1 1 3 3 3 2 2 2'\n\"\"\""
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\\n\") == \"2 2 2 1 1\\n\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\\n\") == \"1 1 1 3 3 3 2 2 2\\n\"\n\nprint(solution(stdin.strip()))"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\") == \"2 2 2 1 1\"\nassert solution(\"9 3\\n1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"\n\"\"\"\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2\\n2 1 2 1 2') == '2 2 2 1 1'\n\"\"\"\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 2\\n2 1 2 1 2\\n\") == \"2 2 2 1 1\"\nprint(solution(\"9 3\\n1 3 3 3 2 2 2 1 1\\n\"))\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 2\\n2 1 2 1 2') == '2 2 2 1 1'\n\"\"\""
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1 2 1 2\") == \"2 2 1 1 1\"\nassert solution(\"1 3 3 3 2 2 2 1 1\") == \"1 1 1 3 3 3 2 2 2\"\n\"\"\"\n"
    },
    {
        "number": 4854,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 1 2 1 2') == '2 2 1 1'\n\"\"\"\n\nN, C = (int(x) for x in input().split())\n\nvalues = input().split()\n\nvalues.sort(key=lambda x: (int(x), values.index(x)))\n\nprint(' '.join(values))\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n    '38 24'\n) == '875'\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"38 24\") == \"875\"\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 1\") == \"3\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"1 100\") == \"100\"\nassert solution(\"23 1\") == \"7\"\n\nimport unittest\nfrom io import StringIO\nimport sys\nimport copy\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdin, stdout = sys.stdin, sys.stdout\n        sys.stdin, sys.stdout = StringIO(input), StringIO()\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdin, sys.stdout = stdin, stdout\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"38 24\"\"\"\n        output = \"\"\"875\"\"\"\n        self."
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"38 24\") == \"875\"\n\"\"\"\n\na, i = [int(i) for i in input().split()]\nprint(i * max(a, i))\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('38 24') == '875'\nassert solution('1 100') == '100'\n\"\"\"\n\nfrom math import log\n\na, i = map(int, input().split())\nprint(i * log(a, 10) // log(10, 2))\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"38 24\"\n) == \"875\"\nassert solution(\n\"1 100\"\n) == \"100\"\nprint(\"The local tests are done.\")\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str_input) == str_expected\nprint(str_input)\n'''\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('42 24') == '875'\nassert solution('1 100') == '100'\n\"\"\""
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('38 24') == '875'\n\"\"\"\n"
    },
    {
        "number": 4855,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n'38 24'\n) == '875'\n\nassert solution(\n'1 100'\n) == '100'\n\nprint('All tests passed.')"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n\n\"\"\""
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n\"\"\""
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\nassert solution('21 9 10') == '321'\n\"\"\""
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n\"\"\""
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\nassert solution('912 999') == '999'\nassert solution('0 11') == '11'"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('734 893') == '437'\nassert solution('221 231') == '132'\n\nprint(solution(input()))\n\nhttps://www.codewars.com/kata/564d6c3e87bd3d9a8fb0003e\n\"\"\"\n"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"734 893\") == \"437\"\nassert solution(\"221 231\") == \"132\"\nassert solution(\"123 123\") == \"123 123\"\n\"\"\"\n\nn = input()\nn = n.split(\" \")\na, b = map(int, n)"
    },
    {
        "number": 4856,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('734 893') == '437'\n\"\"\""
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n\"\"\""
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\nassert solution(\"0 96\") == \"impossible\"\nassert solution(\"1 96\") == \"impossible\"\nassert solution(\"11 96\") == \"impossible\"\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\nprint(solution(\"11 131\"))\nprint(solution(\"7 96\"))\n\"\"\""
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\n\"\"\"\n\nl, w = map(int, input().split())\n\nwhile l!= 0:\n    x = w\n    s = \"\"\n    i = 0\n    while i < l:\n        w -= 1\n        if w < x - 1:\n            s += \"-\"\n        else:\n            s += chr(97 + w)\n        i += 1\n    print(s)\n    l, w = map(int, input().split())\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n\"\"\""
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n\"\"\"\n\na, b = input().split()\na = int(a)\nb = int(b)\n\nfor i in range(a+1):\n    for j in range(b+1):\n        if (i+j) == a and (i*26 + j*9) == b:\n            print(''.join(sorted(list(str(i)+str(j)))))\n            break\n        elif (i+j) == a and (i*26 + j*9) > b:\n            break"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11 131') == 'programming'\nassert solution('7 96') == 'contest'\n\"\"\""
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution([\"11\", \"131\"]) == \"programming\"\nassert solution([\"7\", \"96\"]) == \"contest\"\n"
    },
    {
        "number": 4857,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"11 131\") == \"programming\"\nassert solution(\"7 96\") == \"contest\"\nassert solution(\"13 5\") == \"impossible\"\nassert solution(\"1 1\") == \"impossible\"\nassert solution(\"1 3\") == \"impossible\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 'X'\\nX^\\n--\\n\\n.X\\n--\") == \".^\\n--\"\nassert solution(\"3 12 'A'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\\nBABABABABAB\\nBBABABABABAB\\nABABABABABAB\\n\\nBBABABABABAB\\nBBBABABABABB\") == \"BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n\\nBBABABABABAB\\nBBBABABABABB\"\n\n\"\"\"\n\nfrom collections import Counter\nfrom typing import Counter\nimport unittest\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 12 'A'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\") == \"\"\"ABABABABABAC\nBBABABABABAB\nBBABABABABAB\n\"\"\"\n\n\"\"\"\n--- Part Two ---\nThe director of the ZOO finds your answer to be incorrect. It seems you have not used all the camera's footage, which means you have not analyzed it.\n\nAn unexpected camera malfunction has occurred and your frame rate has become irregular. Some of the images are missing a frame. Even the first and last images have been lost.\n\nYou have no choice but to step forward to the next batch of images and analyze them.\n\nThe images that need frames missing are stored in a 2D array, images. The number of rows in this array is equal to the number of images in the batch. The number of columns is equal to the number of frames that image needs to be missing. The missing frames are stored in a separate 2D array, missing_frames.\n\nFor example, if the first image needs two frames to be missing, the first row in the missing_frames array will be equal to [1, 1]. If the last image needs two frames to be missing, the last row of the missing_frames array will be equal to [4, 4].\n\nThe other rows in the missing_frames array correspond to the missing frames in each image.\n\nThe first image in this batch is missing the first frame (because it has only one frame). It is missing frames (1, 1) in its missing_frames array. The second image also has only one frame missing, it is missing the second frame (1, 2) in its missing_frames array. The third image has three missing frames: (1, 1) in its first row, (2, 1) in its second row, and (2, 2) in its second row. The fourth image has only one frame missing, it is missing (2, 2) in its second row.\n\nGiven the 2D array of missing frames and the 2D array of images, reconstruct the original images and print them out on separate lines. The original frame rate of the images should not be altered.\n\n-----Input-----\nThe first line of input contains two integers $N$ and $M$ ($1 \\leq N, M \\leq 1000$) - the number of rows and columns in the array of images respectively.\n\nThe next line contains $N$ strings separated by a space - the row lengths of the array of images. The $i$-th row has length $lengths[i]$.\n\nNext, there are $N$ lines of input, each containing $M$ strings. The $j$-th line of this input contains $lengths[j]$ characters. Each character is either the standard ASCII letter or the standard ASCII character with the accentuation mark ($\\overline{}$), or one of the following special characters:\n\n'*' - a pixel of the original image is to be copied into the missing frame\n\n'#' - a pixel of the original image is to be removed\n\n'@' - the corresponding missing frame is to be filled with a pixel from the original image that is to be removed from the original image\n\n'.' - the corresponding missing frame is to be filled with a pixel from the original image that is to be copied into the missing frame\n\n'-' - the corresponding missing frame is to be filled with a pixel from the original image that is to be removed, and the corresponding pixel of the original image is to be copied into the missing frame\n\n'$' - the corresponding missing frame is to be filled with a pixel from the original image that is to be removed, and the corresponding pixel of the original image is to be removed\n\n''- a pixel of the original image is to be copied into the missing frame\n\nThe original frame rate of the images is 25 frames per second (FPS).\n\n-----Output-----\nPrint $N$ lines of output - each line has to contain exactly $M$ characters. Each character has to be either the standard ASCII letter or the standard ASCII character with the accentuation mark ($\\overline{}$), or one of the following special characters:\n\n'*' - a pixel of the original image is to be copied into the missing frame\n\n'#' - a pixel of the original image is to be removed\n\n'@' - the corresponding missing frame is to be filled with a pixel from the original image that is to be removed from the original image\n\n'.' - the corresponding missing frame is to be filled with a pixel from the original image that is"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 2 'X'\\nX^\\n--\\n.X\\n--\") == \".^\\n--\\n\"\nassert solution(\"3 12 'A'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\") == \"BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n\"\n\n\"\"\""
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 2 'X'\") == \"X^\\n--\\n.X\\n--\\n\"\nassert solution(\"3 12 'A'\") == \"ABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\"\n\"\"\""
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\".X\\n--\\n\") == \".^\\n--\\n\"\nassert solution(\"3 12 'A'\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n\") == \"BBABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n2 2 'X'\nX^\n--\n\n.X\n--\n\"\"\"\n) == \"\"\"\n.^\n--\n\"\"\"\n\nassert solution(\n\"\"\"\n3 12 'A'\nABABABABABAC\nBABABABABABB\nABABABABABAB\n\nBABABABABABA\nBBABABABABAB\nBABABABABABA\n\"\"\"\n) == \"\"\"\nBBABABABABAC\nBBBABABABABA\nBBABABABABAB\n\"\"\"\n\n)\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 'X'\") == \"XX\"\nassert solution(\"3 12 'A'\") == \"ABABABABABAC\"\nassert solution(\"3 12 'A'\") == \"ABABABABABAC\"\nassert solution(\"3 12 'A'\") == \"ABABABABABAC\"\nassert solution(\"3 12 'A'\") == \"ABABABABABAC\"\n\"\"\""
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('.^\\n--\\n') == '--\\n'\nassert solution('X^\\n--\\n') == '--\\n'\nassert solution('A^\\nABABABABABAC\\nBABABABABABB\\nABABABABABAB\\n') == 'ABABABABABAC\\nBBBABABABABB\\nBBABABABABAB\\n'\n\"\"\"\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(str(input())) == str(expected_output)\n"
    },
    {
        "number": 4858,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 2 \"X\"'\n    == 'X^'\n    )\n\nassert solution('3 12 \"A\"'\n    == 'ABABABABABAC'\n    )\n\"\"\"\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\"\nassert solution(\"100 80 60 240\") == \"0 0 4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\nprint(solution('100 80 60 240'))\n\n\"\"\"\n\nimport sys\nimport itertools\nimport collections"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\n\"\"\""
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 4 4 14') == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\n\"\"\""
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 4 4 14\") == \"1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\nassert solution(\"100 80 60 240\") == \"0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0\"\n\nprint(solution(\"2 4 4 14\"))\nprint(solution(\"100 80 60 240\"))\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(2,4,4,14) == '1 0 3\\n1 1 2\\n1 2 1\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\nassert solution(100, 80, 60, 240) == '0 0 4\\n0 3 0\\n1 1 1\\n1 2 0\\n1 3 0\\n3 0 2\\n3 1 1\\n5 0 1\\n5 1 0\\n7 0 0'\n\nprint(solution('2 4 4 14'))\nprint(solution('100 80 60 240'))"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 6 4 14') == '1 1 2'\nassert solution('100 80 60 240') == '0 0 4'\nassert solution('2 4 4 14') == '1 0 3'\n\n---Problem description---\nLet's try to find all possible answers for Theta's math homework. Her worksheet has a certain number of birds, dogs, and cats on a farm. Together they have $14$ legs. How many birds, dogs, and cats could there be? Write down as many answers as you can!\n\nIt is always the same problem, just written in different ways: sometimes with horses, cows, sheep, goats, chickens, beetles, or even spiders \u2013 but never with snakes or fishes!\n\nCan you write a program to double-check Theta\u2019s answers?\n\n-----Input-----\nInput consists of a single line with $4$ integers: $b$, $d$, $c$, and $l$, with $b$, $d$, and $c$ representing the numbers of legs the first, second, and third type of animal has. You are given that $0 < b, c, d \\le 100$ because some farm animals in these math problems may be centipedes. The total number of legs is given by $l$ ($0 \\le l \\le 250$).\n\n-----Output-----\nOutput all possible answers, each on a separate line, in lexicographical order so that they are sorted by the number of the first animal, ties broken by the second and third animal numbers\u2019, respectively. Separate the number of the first, second, and third animal with spaces. If there are no possible solutions, output impossible on a single line!\n\n-----Examples-----\nSample Input 1:\n2 4 4 14\nSample Output 1:\n1 0 3\n1 1 2\n1 2 1\n1 3 0\n3 0 2\n3 1 1\n5 0 1\n5 1 0\n7 0 0\n\nSample Input 2:\n100 80 60 240\nSample Output 2:\n0 0 4\n0 3 0\n1 1 1\n\nimport unittest\nimport collections\nimport itertools\n\n\nclass TestSolution(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution('2 4 4 14'), '1 0 3')\n\n    def test_2(self):\n        self.assertEqual(solution('100 80 60 240'), '0 0 4')\n"
    },
    {
        "number": 4859,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 4 4 14\") == \"\"\"1 0 3\n1 1 2\n1 2 1\n1 3 0\n3 0 2\n3 1 1\n5 0 1\n5 1 0\n7 0 0\n\"\"\"\nassert solution(\"100 80 60 240\") == \"\"\"0 0 4\n0 3 0\n1 1 1\n\"\"\"\n\"\"\"\nSample Input 2:\n6 0 6 0\nSample Output 2:\nimpossible\n\"\"\"\n\"\"\"\nSample Input 3:\n0 1 3 0\nSample Output 3:\n0 0 1\n1 1 1\n2 2 0\n3 0 0\n4 0 1\n\"\"\"\n\n\"\"\"\nSample Input 3:\n0 0 0 0\nSample Output 3:\nimpossible\n\"\"\"\n\nSample Input 4:\n4 4 4 16\nSample Output 4:\n1 2 2 2\n2 1 1 1\n3 0 2 1\n3 1 1 2\n4 1 1 2\n\"\"\"\n\n\"\"\"\nSample Input 5:\n1 0 3 0\nSample Output 5:\n1 1 1\n\"\"\"\n\"\"\"\nSample Input 6:\n0 1 3 0\nSample Output 6:\nimpossible\n\"\"\"\n\"\"\"\nSample Input 7:\n2 2 2 2\nSample Output 7:\n1 1 1\n\"\"\"\n\"\"\"\nSample Input 8:\n1 0 3 0\nSample Output 8:\nimpossible\n\"\"\"\n\"\"\"\nSample Input 9:\n0 1 0 0\nSample Output 9:\n0 0 1\n1 1 1\n\"\"\"\n\"\"\"\nSample Input 10:\n0 0 0 0\nSample Output 10:\nimpossible\n\"\"\"\n\"\"\"\nSample Input 11:\n0 0 0 0\nSample Output 11:\n0 0 0\n\"\"\"\n\n\"\"\"\nSample Input 12:\n3 3 2 1\nSample Output 12:\n1 1 1\n2 2 0\n3 0 0\n\"\"\"\n\"\"\"\nSample Input 13:\n3 3 2 1\nSample Output 13:\n1 1 1\n2 1 1\n3 1 0\n\"\"\"\n\"\"\"\nSample Input 14:\n3 2 1 3\nSample Output 14:\n1 1 1\n2 2 0\n3 0 0\n\"\"\"\n\"\"\"\nSample Input 15:\n4 2 1 2\nSample Output 15:\n1 1 1\n2 1 1\n3 1 0\n4 0 1\n\"\"\"\n\nSample Input 16:\n1 0 2 0\nSample Output 16:\nimpossible\n\"\"\"\nSample Input 17:\n0 0 2 2\nSample Output 17:\nimpossible\n\"\"\"\nSample Input 18:\n1 1 2 1\nSample Output 18:\n1 1 1\n2 1 1\n\"\"\"\nSample Input 19:\n2 2 2 1\nSample Output 19:\n1 1 1\n2 1 1\n\"\"\"\n\"\"\"\nSample Input 20:\n0 1 3 0\nSample Output 20:\n0 0 1\n1 0 1\n2 0 1\n3 1 0\n\"\"\"\n\nSample Input 21:\n2 0 2 0\nSample Output 21:\nimpossible\n\"\"\"\nSample Input 22:\n0 2 0 2\nSample Output 22:\n1 0 1\n2 2 0\n3 0 1\n\"\"\"\n\n\"\"\"\nSample Input 23:\n1 0 2 0\nSample Output 23:\nimpossible\n\"\"\"\n\"\"\"\nSample Input 24:\n0 0 0 0\nSample Output 24:\nimpossible\n\"\"\"\n\"\"\"\nSample Input 25:\n1 0 2 0\nSample Output 25:\nimpossible\n\"\"\"\n\"\"\"\nSample Input 26:\n0 0 0 0\nSample Output 26:\nimpossible\n\"\"\"\n\"\"\"\nSample Input 27:\n2 0 2 0\nSample Output 27:\nimpossible\n\"\"\"\n\n\"\"\"\nSample Input 28:\n0 0 0 0\nSample Output 28:\nimpossible\n\"\"\"\n\nSample Input 29:\n1 2 3 3\nSample Output 29:\n1 1 1\n2 1 1\n3 2 0\n4 0 1\n\"\"\"\n\nSample Input 30:\n0 0 0 0\nSample Output 30:\nimpossible\n\"\"\"\nSample Input 31:\n0 0 0 0\nSample Output 31:\nimpossible\n\"\"\"\n\nSample Input 32:\n1 2 3 3\nSample Output 32:\n1 1 1\n2 1 1\n3 2 0\n4 0 1\n\"\"\"\n\nSample Input 33:\n2 2 2 2\nSample Output 33:\n1 2 1\n2 1 1\n3 0 1\n4 0 1\n\"\"\"\n\nSample Input 34:\n1 2 3 3\nSample Output 34:\n1 1 1\n2 1 1\n3 1 0\n4 0 1\n\"\"\"\n\nSample Input 35:\n1 2 2 3\nSample Output 35:\n1 1 1\n2 1 1\n3 1 0\n4 0 1\n\"\"\"\n\nSample Input 36:\n0 1 2 3\nSample Output 36:\n0 1 1\n1 0 1\n2 0 1\n3 0 1\n\"\"\"\n\nSample Input 37:\n0 0 2 3\nSample Output 37:\nimpossible\n\"\"\"\n\nSample Input 38:\n0 0 0 2\nSample Output 38:\nimpossible\n\"\"\"\n\nSample Input 39:\n0 0 0 2\nSample Output 39:\nimpossible\n\"\"\"\n\nSample Input 40:\n0 0 2 2\nSample Output 40:\nimpossible\n\"\"\"\n\nSample Input 41:\n0 0 0 2\nSample Output 41:\n0 0 0\n1 0 0\n2 2 0\n\"\"\"\n\nSample Input 42:\n1 0 2 1\nSample Output 42:\n1 1 1\n2 1 1\n3 0 1\n4 0 1\n\"\"\"\n\nSample Input 43:\n1 0 3 0\nSample Output 43:\n1 1 1\n2 1 1\n3 1 0\n\"\"\"\n\nSample Input 44:\n1 0 3 0\nSample Output 44:\nimpossible\n\"\"\"\n\nSample Input 45:\n0 0 0 0\nSample Output 45:\nimpossible\n\"\"\"\n\nSample Input 46:\n0 0 0 0\nSample Output 46:\nimpossible\n\"\"\"\n\nSample Input 47:\n1 1 2 1\nSample Output 47:\n1 1 1\n2 1 1\n\"\"\"\n\nSample Input 48:\n0 1 2 2\nSample Output 48:\nimpossible\n\"\"\"\n\nSample Input 49:\n0 0 0 0\nSample Output 49:\nimpossible\n\"\"\"\n\nSample Input 50:\n2 0 0 0\nSample Output 50:\n0 0 0\n1 0 0\n2 0 0\n\"\"\"\n\nSample Input 51:\n0 0 0 0\nSample Output 51:\nimpossible\n\"\"\"\n\nSample Input 52:\n2 1 1 1\nSample Output 52:\n2 1 1\n1 1 1\n\"\"\"\n\nSample Input 53:\n2 1 1 1\nSample Output 53:\n1 1 1\n2 1 1\n\"\"\"\n\nSample Input 54:\n2 0 1 1\nSample Output 54:\nimpossible\n\"\"\"\n\nSample Input 55:\n0 0 1 2\nSample Output 55:\n0 0 1\n1 0 1\n2 0 1\n\"\"\"\n\nSample Input 56:\n0 1 2 0\nSample Output 56:\n0 1 1\n1 0 1\n2 0 1\n\"\"\"\n\nSample Input 57:\n1 1 1 0\nSample Output 57:\n0 0 1\n1 0 1\n2 0 1\n\"\"\"\n\nSample Input 58:\n1 1 1 1\nSample Output 58:\n0 0 1\n1 0 1\n2 0 1\n\"\"\"\n\nSample Input 59:\n0"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n9\n2\n4\n5\n7\n8\n9\n10\n11\n13\n\"\"\") == 'good job'\nassert solution(\"\"\"\n9\n2\n4\n5\n7\n8\n9\n10\n11\n13\n\"\"\") == '1 3 6 12'\nassert solution(\"\"\"\n8\n2\n4\n6\n7\n9\n10\n11\n13\n\"\"\") == '1 3 5 7 10 12'\nassert solution(\"\"\"\n9\n2\n4\n5\n7\n8\n9\n10\n11\n13\n\"\"\") == '1 3 6 12'\nassert solution(\"\"\"\n9\n2\n4\n5\n7\n8\n9\n10\n11\n13\n\"\"\") == '1 3 6 12'\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n2\\n3\\n4\\n5\\n7\\n8\\n9\\n10') == '6\\n12\\n13'\n\"\"\"\n\nn = int(stdin.readline().strip())\n\nlst = set(range(1, 201))\nlst_t = set()\nfor _ in range(n):\n    lst_t.add(int(stdin.readline().strip()))\n\nfor x in lst_t:\n    lst.remove(x)\n\nprint('\\n'.join(map(str, sorted(lst))))\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == \"good job\"\nassert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\\n\") == \"1\\n3\\n6\\n12\\n\"\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1\\n2') == '1'\nassert solution('1\\n2\\n3\\n4') == '1\\n2\\n3\\n6'\nassert solution('1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30') == '1\\n3\\n6\\n12\\n15\\n18\\n21\\n24\\n27\\n30'\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n'9\\n'\n'2\\n'\n'4\\n'\n'5\\n'\n'7\\n'\n'8\\n'\n'9\\n'\n'10\\n'\n'11\\n'\n'13\\n') == 'good job'\nassert solution(\n'9\\n'\n'2\\n'\n'4\\n'\n'5\\n'\n'7\\n'\n'8\\n'\n'9\\n'\n'10\\n'\n'11\\n'\n'13\\n') == '1\\n3\\n6\\n12\\n'\n\n'''\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=None)\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1\\n2\\n4\") == \"good job\"\nassert solution(\"9\\n1\\n2\\n4\\n5\\n7\\n8\\n9\\n10\") == \"1\\n3\\n6\"\n\"\"\"\n\n\"\"\"\nn = int(stdin.readline())"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n5\\n7\\n8\\n9\\n10\\n11\") == \"good job\"\nassert solution(\"4\\n2\\n3\\n5\\n1\\n6\\n7\") == \"1\\n3\\n6\"\n\"\"\"\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13') == 'good job'\nassert solution('9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13') == '1\\n3\\n6\\n12'\nassert solution('9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13') == '1\\n3\\n6\\n12'\nassert solution('9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13') == '1\\n3\\n6\\n12'\nassert solution('9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13') == '1\\n3\\n6\\n12'\n"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9\\n2\\n4\\n5\\n7\\n8\\n9\\n10\\n11\\n13\") == \"good job\"\nassert solution(\"1\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"1\\n3\\n5\\n7\\n9\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"1\\n3\\n5\\n7\\n9\\n11\\n13\"\nassert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\") == \"1\\n3\\n5\\n7\\n9\\n11\\n13\"\n\n\"\"\"\n\nimport sys\nimport unittest"
    },
    {
        "number": 4860,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\n2\\n5\\n8\\n4\\n9\\n3\\n1\\n6\\n12\\n\") == \"good job\"\n\nassert solution(\"7\\n2\\n5\\n8\\n4\\n9\\n3\\n1\\n6\\n12\\n\") == \"1\\n3\\n6\\n12\"\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nimport math\nimport sys\n\nfrom helper import *\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\n\nfrom math import sqrt\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\""
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\""
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(io.StringIO(test_cases[0])) == (solution(io.StringIO(test_cases[0])))[0]\n\"\"\"\n\nimport math\n\n_p = 1000 * 1000 * 1000  # p is in the billions\n_s = 1000000  # s is in meters\n_v = 50  # v is in meters per second\n\nn = int(input())\np = float(input())\ns = float(input())\nv = float(input())\n\n_s_plus_c = _s / (1 + _s / _v)  # (s + c)\n\n_n_log_2n = n * math.log(n, 2)\n_n_sqrt_2 = n ** 0.5\n_n_c_sqrt_2 = _n_sqrt_2 * math.cbrt(2)\n\n_t = (_n_log_2n * (_n_c_sqrt_2 + _s_plus_c)) / p\n\nprint(f'{_t:.6f}')\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"10 8.9 40075000 272.1\"\n) == \"157079.04857106 15.598261092309\"\n\"\"\""
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 8.9 40075000 272.1') == '157079.04857106 15.598261092309'\nassert solution('4 7.5 50 7.9') == '1270.821874577 0.7381405864075'\n\"\"\"\n"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''10 8.9 40075000 272.1''') == '157079.04857106 15.598261092309'\n'''\n\n\nimport math"
    },
    {
        "number": 4861,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 8.9 40075000 272.1\") == \"157079.04857106 15.598261092309\"\n\"\"\"\n\nfrom typing import Tuple\nimport sys\nimport math\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"0\"\n\nassert solution(\"4\") == \"3\"\n\nassert solution(\"12\") == \"14\"\n\nassert solution(\"13\") == \"44\"\n\nassert solution(\"32\") == \"1355\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == '0'\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == '0'\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == '0'\n\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5') == '4'\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == 0\nassert solution('3') == 4\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == 0\nassert solution('1') == 0\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"0\"\n\"\"\""
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"2\"\nassert solution(\"10\") == \"4\"\nassert solution(\"6\") == \"3\"\nassert solution(\"20\") == \"10\"\nassert solution(\"50\") == \"25\"\n"
    },
    {
        "number": 4862,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"0\"\n\n-----Problem-----\n\nn,\n\n-----Challenge-----\nWrite the solution as a single line of Python, and test it by running \u201cpython solution.py < input.txt\u201d\n\n\"\"\""
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == \"3\"\nassert solution(\"4\\nA\\nB\\nC\\nD\") == \"0\"\nassert solution(\"4\\nA\\nA\\nC\\nD\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\n\") == \"3\"\nassert solution(\"4\\nA\\nA\\nB\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A\") == 1\nassert solution(\"A B\") == 1\nassert solution(\"A B C\") == 2\nassert solution(\"A B C D\") == 3\n\"\"\"\n\nn = int(input())\nresult = 0\nfor i in range(1, n + 1):\n    if i % 4 == 1:\n        result += 1\nprint(result)\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('A\\nA\\nA\\nA\\n') == '3'\nassert solution('A\\nB\\nC\\nD\\n') == '1'\nassert solution('A\\nB\\nA\\nD\\n') == '1'\n\"\"\""
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AA\\nA\\nA\\nA\\n\") == \"3\"\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(open(\"input.txt\").read()) == \"3\"\n\nSample Input:\n5\nA\nB\nC\nD\nD\nSample Output:\n5\n"
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''4\nA\nA\nA\nA''') == '3'\nassert solution('''5\nA\nB\nA\nC\nD''') == '5'\n\"\"\""
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == \"3\"\n\"\"\""
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nA\\nA\\nA\\nA\") == \"3\"\n\"\"\""
    },
    {
        "number": 4863,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '0'\nassert solution('A') == '1'\nassert solution('ABC') == '2'\nassert solution('ABCD') == '3'\n'''"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\".x.\\nx.x\\n.x.\") == \"...xx..\\nxx..xx\\n...xx..\""
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\".x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\nassert solution(\".x.\\nx.\\nx.x\\n.x.x\\n.x.\") == \"..xx...\\nxx..xx\\n..xx...\"\nassert solution(\".\\nx.\\nx.x\\n.x.\") == \"..xx...\\nxx..xx\\n..xx...\"\nassert solution(\".\\nx.x\\n.x.\") == \"..xx...\\nxx..xx\\n..xx...\"\nassert solution(\".\\nx.x\\n.x.x\\n.x.\") == \"..xx...\\nxx..xx\\n..xx...\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 3 1 2\\n.x.\\nx.x\\n.x.\\n') == '..xx..\\nxx..xx\\n..xx..\\n'\nassert solution('4 4 1 2\\n.x.\\nx.x\\n.x.\\n') == '...x...\\nxx.x.x\\n...x...\\n'\n\nSolution:\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\nprint(solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\"))\n\n-----Test Input-----\n1 1 1 1\n.x\n.\n.\n\n-----Test Output-----\n..x\n..\n..\n\n-----Test Input-----\n2 2 1 1\n.x.\n.x.\n.\n.\n.\nSample Output:\n..xx\nxx..\n.xx.\n..xx\n.xx.\n.\n..\n.\n\n-----Test Output-----\n..xx\nxx..\n.xx.\n..xx\n.xx.\n.\n..\n.\n\n-----Test Input-----\n5 2 2 2\n.x.\n.x.\n.\n.\n.\nSample Output:\n..xx\n..xx\n..x..\n.x..x\n..x..\n\n-----Test Output-----\n..xx\n..xx\n..x..\n.x..x\n..x..\n\n-----Test Input-----\n2 3 1 3\nx.\nx.\nx.\nSample Output:\nx.x.\nxx..\n.x.x\nx.x.\n\n-----Test Output-----\nx.x.\nxx..\n.x.x\nx.x.\n\"\"\""
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"...xx..\\nxx..xx\\n..xx..\\n\"\nassert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"...x.x\\nxx.x.\\n.x..x\\n\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\".x.\\nx.x\\n.x.\") == \".xx..\\nxx..xx\\n..xx..\"\n\"\"\"\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\\n\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"..xx..\\nxx..xx\\n..xx..\"\nprint(solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\"))\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 3 1 2\\n.x.\\nx.x\\n.x.') == '..xx..\\nxx..xx\\n..xx..'\nprint(solution(stdin))\n"
    },
    {
        "number": 4864,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 3 1 2\\n.x.\\nx.x\\n.x.\") == \"...xx..\\nxx..xx\\n..xx..\\n\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"\"\"\n1\nF 60 13 20\n\"\"\"\n) == \"\"\"\n14 20\n\"\"\"\nassert solution(\n\"\"\"\n2\nF 30 3 30\nB 60 3 30\n\"\"\"\n) == \"\"\"\n4 30\n18 30\n\"\"\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(string) == result\n\n\"\"\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('F 60 13 20') == '14 20'\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"F 60 13 20\\n\") == \"14 20\""
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('F 60 13 20') == '14 20'\n\"\"\""
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"B 60 13 20\") == \"0 1\"\n\"\"\""
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\nassert solution(\"B 60 13 20\") == \"23 19\"\nassert solution(\"F 0 13 20\") == \"23 19\"\nassert solution(\"B 0 13 20\") == \"1 13\"\nassert solution(\"B 100 13 20\") == \"23 13\"\n\"\"\"\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\"\n\"\"\"\nimport sys\n\ncases = int(sys.stdin.readline().strip())\nfor _ in range(cases):\n    cmd, d, h, m = sys.stdin.readline().strip().split()\n    d, h, m = int(d), int(h), int(m)\n    if cmd == \"F\":\n        h = (h + d) % 24\n        m = (m + d * 60) % 60\n    else:\n        h = (h - d) % 24\n        m = (m - d * 60) % 60\n    print(h, m)\n"
    },
    {
        "number": 4865,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"F 60 13 20\") == \"14 20\""
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"OCT 32\") == \"nope\"\nassert solution(\"MAR 32\") == \"nope\"\nassert solution(\"FEB 31\") == \"nope\"\nassert solution(\"FEB 32\") == \"nope\"\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('NOV 11') == 'nope'\n\n\"\"\""
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(SAMPLE_INPUT) == SAMPLE_OUTPUT\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"OCT 32\") == \"nope\"\n\nimport datetime"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == 'nope'\nassert solution('OCT 31') == 'yup'\nassert solution('SEP 1') == 'nope'\nassert solution('OCT 29') == 'yup'"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('OCT 31') == 'yup'\nassert solution('NOV 21') == 'nope'\nassert solution('NOV 20') == 'nope'\nassert solution('NOV 31') == 'nope'\nassert solution('OCT 28') == 'yup'\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"NOV 25\") == \"nope\"\nassert solution(\"NOV 24\") == \"nope\"\nassert solution(\"NOV 23\") == \"nope\"\n\nassert solution(\"OCT 31\") == \"yup\"\n"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    'OCT 31'\n) == 'yup'\nassert solution(\n    'NOV 25'\n) == 'nope'\nassert solution(\n    'SEP 30'\n) == 'nope'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4866,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"OCT 31\") == \"yup\"\nassert solution(\"SEP 9\") == \"nope\"\nassert solution(\"SEP 1\") == \"yup\"\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0438\u043b\u0438 \u043a\u043e\u043d\u0446\u043e\u043c \u0433\u043e\u0434\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u0441 \u0434\u0430\u0442\u043e\u0439 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd.mm.yyyy.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u00abYES\u00bb, \u0435\u0441\u043b\u0438 \u0434\u0430\u0442\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0433\u043e\u0434\u0430, \u0438 \u00abNO\u00bb \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0414\u0430\u0442\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0433\u043e\u0434\u0430, \u0435\u0441\u043b\u0438 \u0440\u0430\u0432\u043d\u0430 01.01 \u0438\u043b\u0438 01.02, 15.02 \u0438 \u0442. \u0434.\n\nSample Input:\n12.05.2019\nSample Output:\nNO\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0438\u043b\u0438 \u043a\u043e\u043d\u0446\u043e\u043c \u0433\u043e\u0434\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u0441 \u0434\u0430\u0442\u043e\u0439 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd.mm.yyyy.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u00abYES\u00bb, \u0435\u0441\u043b\u0438 \u0434\u0430\u0442\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0433\u043e\u0434\u0430, \u0438 \u00abNO\u00bb \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0414\u0430\u0442\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0433\u043e\u0434\u0430, \u0435\u0441\u043b\u0438 \u0440\u0430\u0432\u043d\u0430 01.01 \u0438\u043b\u0438 01.02, 15.02 \u0438 \u0442. \u0434.\n\nSample Input:\n12.05.2019\nSample Output:\nNO\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0438\u043b\u0438 \u043a\u043e\u043d\u0446\u043e\u043c \u0433\u043e\u0434\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u0441 \u0434\u0430\u0442\u043e\u0439 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd.mm.yyyy.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u00abYES\u00bb, \u0435\u0441\u043b\u0438 \u0434\u0430\u0442\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0433\u043e\u0434\u0430, \u0438 \u00abNO\u00bb \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0414\u0430\u0442\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0433\u043e\u0434\u0430, \u0435\u0441\u043b\u0438 \u0440\u0430\u0432\u043d\u0430 01.01 \u0438\u043b\u0438 01.02, 15.02 \u0438 \u0442. \u0434.\n\nSample Input:\n12.05.2019\nSample Output:\nNO\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0438\u043b\u0438 \u043a\u043e\u043d\u0446\u043e\u043c \u0433\u043e\u0434\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u0441 \u0434\u0430\u0442\u043e\u0439 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 dd.mm.yyyy.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u00abYES\u00bb, \u0435\u0441\u043b\u0438 \u0434\u0430\u0442\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0433\u043e\u0434\u0430, \u0438 \u00abNO\u00bb \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0414\u0430\u0442\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0433\u043e\u0434\u0430, \u0435\u0441\u043b\u0438 \u0440\u0430\u0432\u043d\u0430 01.01 \u0438\u043b\u0438 01.02, 15.02 \u0438 \u0442. \u0434.\n\nSample Input:\n12.05.2019\nSample Output:\nNO\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0434"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nera\\nirak\") ==\\\n'#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#'\n\n-----Solution-----\n\"\"\"\n\nm, n = map(int, stdin.readline().split())\nu, l, r, d = map(int, stdin.readline().split())\ns = list(stdin.readline().strip())"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\\n') == '#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#'\nprint('Passed')\n\nassert solution('4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\\n') == '#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#'\nprint('Passed')\n\nassert solution('5 5\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak\\n') == '#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.'\nprint('Passed')\n\nassert solution('5 5\\n1 1 1 1\\nhoni\\noker\\nnera\\nirak\\n') == '#.#.#.#.\\n#.#.#.#.\\n#.honi#.\\n#.oker.#\\n#.nera#.\\n#.irak.#\\n#.#.#.#.\\n#.#.#.#.'\nprint('Passed')\n\nassert solution('6 6\\n4 2 2 2\\nhoni\\noker\\nnera\\nirak\\n') == '#.honi#.\\n#.#oker.#\\n#.nera#.\\n#.#irak.#\\n#.#.#.#.\\n#.irak.#.\\n#.#.#.#.\\n#.honi#.\\n#.#oker.#'\nprint('Passed')"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nera\\nirak\") == \"#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#\"\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak') == '#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n.#.#.#.#\\n'\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nera\\nirak\") == \"#.#.#.#\\n#.#.#.#\\n#.honi#\\n#oker.#\\n#.nera#\\n#irak.#\\n#.#.#.#\\n#.#.#.#\"\nprint(solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nera\\nirak\"))\n\"\"\""
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4 4\\n2 2 2 2\\nhoni\\noker\\nnera\\nirak') == '#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.'\n\n\"\"\"\n\nimport string\nimport sys"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 4 2 2 \\nhoni\\noker\\nnera\\nirak\") == \"\"\"#.#.#.#.\n.#.#.#.#\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nera\\nnera\") == \"#.#.#.#.\\n.#.#.#.#\\n#.honi#.\\n.#oker.#\\n#.nera#.\\n.#irak.#\\n#.#.#.#.\\n#.#.#.#.\"\n\n\"\"\"\n"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 4\\n2 2 2 2\\nhoni\\noker\\nera\\nirak\") == '#.#.#.#\\n#.#.#.#\\n#.honi#\\n#oker.#\\n#.nera#\\n#irak.#\\n#.#.#.#\\n#.#.#.#'\n\n------\n\nWrite a function:"
    },
    {
        "number": 4867,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n    4 4\n    2 2 2 2\n    \"\"\") == \"\"\"\n    #.#.#.#.\n    .#.#.#.#\n    #.honi#.\n    .#oker.#\n    #.nera#.\n    .#irak.#\n    #.#.#.#.\n    .#.#.#.#\n    \"\"\"\n\n)\n\n\"\"\"\n\nLet's recap all the necessary conditions to create a crossword puzzle solution.\n\nLet's consider the first two conditions. Mirko wants to assemble a crossword puzzle with $M \\times N$ letters, and the frame should be $U$ characters wide on top, $L$ characters on the left, $R$ characters on the right and $D$ characters on the bottom side. So the puzzle could be constructed with the following way:"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\\n\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\nprint('Successfully passed.')\n\n-----Problem-----\n\nYou and a friend have decided to play a simple game. You have a piece of paper and take turns to flip it upside down. If you flip it once, you win.\n\nThe first person to flip it wins. If it is not possible to win, return \"No one\".\n\nExample\nFor n = 1, the output should be\n\nflippingGame(n) = \"First\".\n\nThere are no ways to win, so the first person to flip it wins.\n\nFor n = 2, the output should be\n\nflippingGame(n) = \"Second\".\n\nThe first person to flip it wins, and the second person flips it in the opposite direction and loses.\n\nFor n = 4, the output should be\n\nflippingGame(n) = \"No one\".\n\nThe first person flips it in the opposite direction and loses, the second person flips it and wins, and the third person flips it in the opposite direction and loses. Since no one can win, there is no winner.\n\n-----Solution-----\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == '+---+---+---+---+---+---+---+---+\\n|r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+'\n\nassert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == '+---+---+---+---+---+---+---+---+\\n|r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+'\n\nassert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == '+---+---+---+---+---+---+---+---+\\n|r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin))\n\n-----\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n    \n    White = [\"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\", \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\"]\n    Black = [\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\", \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\", \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\"]\n    stdout = \"\"\"\n.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|.p.|.p.|.p.|.p.|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\"\n    assert solution(stdin) == stdout\nprint(solution(stdin))\n\n\n    \nWhite = [\"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\", \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\", \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\", \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\"]\nBlack = [\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\", \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\", \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\"]\nstdout = \"\"\"\n.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|.p.|.p.|.p.|.p.|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\"\nassert solution(stdin) == stdout\nprint(solution(stdin))\n\n\n\nWhite = [\"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\", \"a2\", \"b2\", \"c2\", \"d2\", \""
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"\"\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\"\") == \"\"\"+---+---+---+---+---+---+---+---+\n|r.|:::|b.|:q:|k.|:::|n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|:p:|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6') == '+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+'\n\"\"\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\n"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\n\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\"\n\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\ndef solution(stdin: str) -> str:\\n    pass\\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\ndef solution(stdin: str) -> str:\\n    pass\\nassert solution(\"White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\") == \"+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---"
    },
    {
        "number": 4868,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('r.b.q.k.n.r') == '+---+---+---+---+---+---+---+---+'\nassert solution('r.b.q.k.n.r') == '+---+---+---+---+---+---+---+---+'\nassert solution('r.b.q.k.n.r') == '+---+---+---+---+---+---+---+---+'\nassert solution('r.b.q.k.n.r') == '+---+---+---+---+---+---+---+---+'\nassert solution('r.b.q.k.n.r') == '+---+---+---+---+---+---+---+---+'\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('1.1111 11.1111') == 'Need more materials!'\n\"\"\"\n\nimport math\n\nA, N = list(map(float, input().split()))\nprint('Diablo is happy!' if N <= A * math.sqrt(2) else 'Need more materials!')\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"4.000000 5.000000\") == \"Need more materials!\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\n\"\"\""
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('0.947478 1.947478') == 'Need more materials!'\nassert solution('1.0 1.0') == 'Diablo is happy!'\nassert solution('0.947478 1.947478') == 'Need more materials!'\nassert solution('1.0 1.1') == 'Need more materials!'\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1.000000 4.000000') == 'Diablo is happy!'\nassert solution('1.0000000 4.000000') == 'Need more materials!'\n\n-----Solution-----"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1.0 4.0') == 'Diablo is happy!'\nassert solution('0.0 4.0') == 'Need more materials!'\n\"\"\"\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(a) == solution.__doc__\n\nprint(solution(a))"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1.0 4.0') == 'Diablo is happy!'\nassert solution('3.0 4.0') == 'Need more materials!'\nassert solution('1.0 0.0') == 'Need more materials!'\nassert solution('0.0 4.0') == 'Diablo is happy!'\nassert solution('4.0 0.0') == 'Diablo is happy!'\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1.0 4.0\") == \"Need more materials!\"\nassert solution(\"0.1 5.0\") == \"Diablo is happy!\"\n\"\"\"\n\n\nfrom math import sqrt\n"
    },
    {
        "number": 4869,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1.000000 4.000000\") == \"Diablo is happy!\"\nassert solution(\"5.500000 10.000000\") == \"Need more materials!\"\nassert solution(\"0.000000 0.000000\") == \"Need more materials!\"\nassert solution(\"4.000000 6.000000\") == \"Diablo is happy!\"\nassert solution(\"4.000000 5.000000\") == \"Need more materials!\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"20 10 15 5 1\") == \"use the stairs\"\nassert solution(\"1 1 1 1 1\") == \"use the stairs\"\nassert solution(\"10 1 10 3 1\") == \"12\"\n\"\"\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 1 10 2 1') == 6\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 1 10 2 1') == '6'\nassert solution('4 1 4 3 1') == 'use the stairs'\n\"\"\""
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''10 1 10 2 1''') == '6'\nassert solution('''1 1 1 1 1''') == 'use the stairs'\nassert solution('''2 3 5 2 1''') == 'use the stairs'\nassert solution('''1 2 3 1 1''') == '6'\nassert solution('''2 2 4 1 2''') == 'use the stairs'\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"10 10 10 10 10\") == \"use the stairs\"\n\n\"\"\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nprint(solution(\"10 1 10 2 1\"))\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 1 10 2 1\") == \"use the stairs\"\nassert solution(\"10 1 10 4 2\") == \"use the stairs\"\nassert solution(\"10 1 10 10 1\") == \"use the stairs\"\n\"\"\"\n"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\n\"\"\""
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 1 10 2 1\") == \"6\"\nassert solution(\"10 10 1 1 1\") == \"use the stairs\"\n\"\"\"\n\nimport sys\n\nf, s, g, u, d = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 4870,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 1 10 2 1\") == \"use the stairs\"\nassert solution(\"10 10 1 2 1\") == \"11\"\nassert solution(\"10 10 10 2 1\") == \"11\"\nassert solution(\"10 10 10 10 2 1\") == \"11\"\nassert solution(\"10 10 10 10 10 2 1\") == \"13\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n500\\n120\\n75') == '128.8\\n89.06666666666666'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n500\\n120\\n75') == '128.8\\n89.06666666666666'\nassert solution('4\\n1500\\n60\\n150\\n75') == '1024.0\\n7.0'\n\"\"\""
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    '3\\n500\\n120\\n75'\n) == '128.8'\nassert solution(\n    '3\\n8\\n3\\n7'\n) == '17.0'\nassert solution(\n    '5\\n500\\n120\\n75\\n8\\n8'\n) == '160.8'\nassert solution(\n    '7\\n11\\n3\\n5\\n8\\n9\\n1'\n) == '232.14285714285714'\nassert solution(\n    '7\\n1\\n4\\n9\\n3\\n6\\n7'\n) == '238.07142857142857'\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n500\n120\n75''') == '128.8'\nassert solution('''3\n500\n120\n75''')!= '128.9'\nassert solution('''3\n500\n120\n75''')!= '128.7'\nassert solution('''3\n500\n120\n75''')!= '128.6'\nassert solution('''4\n500\n120\n75\n1000\n120''')!= '121.0'\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"6\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == '128.8'\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n1\\n2\\n3\\n\") == \"1\\n2\\n4\\n\"\nassert solution(\"5\\n1\\n2\\n3\\n4\\n\") == \"5\\n25.0\\n\"\nassert solution(\"3\\n1\\n2\\n\") == \"6.0\\n\"\nassert solution(\"4\\n1\\n1\\n\") == \"3.0\\n\"\nassert solution(\"4\\n1\\n1\\n1\\n\") == \"4.0\\n\"\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n500\\n120\\n75') == '128.8'\n\"\"\""
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\\n500\\n120\\n75\") == '128.8'\nassert solution(\"2\\n200\\n120\\n81\") == '175.0'\nassert solution(\"3\\n100\\n110\\n120\") == '175.0'\nassert solution(\"1\\n100\\n110\\n120\") == '175.0'\nassert solution(\"2\\n110\\n120\\n80\") == '150.0'\n"
    },
    {
        "number": 4871,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n500\\n120\\n75') == '128.8\\n89.06666666666666'"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5\\n1 45 65 84 346') == '4'\n\n'''\nimport re\n\nn = int(input())\nd = list(map(int, input().split(' ')))\n\nn_d = 0\nfor i, day in enumerate(d):\n    if day < 20:\n        n_d += (20 - day)\n        if n_d >= 20:\n            print(i)\n            break\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n1 45 65 84 346') == 4\n\n\"\"\"\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2\n2\n3\n4\n5''') == '''2\n1\n3\n4\n5'''\nassert solution('''1\n2\n3\n4\n5''') == '''2\n1\n3\n4\n5'''\n\n\"\"\""
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('5\\n1 45 65 84 346') == '4'\nassert solution('4\\n1 45 65 84 346') == '1'"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n1 45 65 84 346') == '4'\n\"\"\"\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n1 45 65 84 346') == 4\n\"\"\"\n\nn = int(input())\n\nd = list(map(int, input().split()))"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 3 1 2\") == \"2\"\nassert solution(\"4\\n2 3 1 2\") == \"2\"\nassert solution(\"4\\n3 3 3 3\") == \"1\"\nassert solution(\"4\\n3 3 2 3\") == \"0\"\nassert solution(\"4\\n3 3 1 3\") == \"0\"\n"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n1 45 65 84 346') == '4'\n\n\"\"\"\n\nstdin = input().split()\nstdin = list(map(int, stdin))\n\ndirt = input().split()\ndirt = list(map(int, dirt))"
    },
    {
        "number": 4872,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 45 65 84 346\") == \"4\"\nprint(solution(input()))\n\nclass CodeSignalSolution:\n    def solve(self, stdin):\n        return\n\nCodeSignalSolution(\"5\\n1 45 65 84 346\").solve()\n\"\"\"\n\nimport datetime"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == \"1\"\nassert solution(\"3 5\\n..T.#\\n..P.\\nT....\\n\") == \"2\"\n\"\"\"\n\nW, H = map(int, input().split())\n\nm = [list(input()) for _ in range(H)]"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\n\"\"\"\n\nimport collections\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == 1\nassert solution(\"7 4\\n#######\\n#P.GTG#\\n#######\\n#.G.#T#\\n#..TGG#\\n#######\") == 2\nassert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\\n#.#G.T#\\n#..TGG#\\n#######\") == 2\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('3 3') == '0'\nassert solution('3 2\\n.GG#\\n#G.G') == '2'\nassert solution('3 2\\n.P#\\n#G.G') == '2'\nassert solution('3 2\\n.P#\\n#G.#') == '2'\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######\") == '1'\nassert solution(\"7 4\\n#######\\n#P.GTG#\\n#.TGG#\\n#######\") == '0'\nassert solution(\"7 4\\n#######\\n#P.GTG#\\n.TGG#\\n#######\") == '0'\nassert solution(\"7 4\\n#######\\n#.GTG#\\n#.TGG#\\n#######\") == '1'\nassert solution(\"7 4\\n#######\\n.#.GTG#\\n#.TGG#\\n#######\") == '0'\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''7 4\n#######\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\nassert solution('7 4\\n#######\\n#.TGG#\\n#P.GTG#\\n#######') == '0'\nassert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\nassert solution('7 4\\n#######\\n#P.GTG#\\n#G..TGG#\\n#######') == '2'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7 4\\n#######\\n#P.GTG#\\n#..TGG#\\n#######') == '1'\n\n-----Problem-----\nYou are given a rectangular map of width $W$ and height $H$, and you have to find how much gold you can get if you\u2019re playing a simplified version of the game.\n\n-----Constraints-----\n$W \\geq 3$\n$H \\geq 3$\n$W,H \\leq 50$\n\n\"\"\"\n\nimport sys\n\nfrom typing import List, NamedTuple, Tuple\n\nW, H = map(int, sys.stdin.readline().split())\nwalls: List[Tuple[int, int]] = [\n    (x, y)\n    for x, line in enumerate(sys.stdin)\n    for y, char in enumerate(line)\n    if char == '#'\n]\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input) == output\n"
    },
    {
        "number": 4873,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('P') == 'P'\nassert solution('P.GTG#') == 'G'\nassert solution('P.GTG#.TGG#') == 'G'\nassert solution('P.#GTG#.TGG#') == 'T'\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == \"5\"\n\n-----Problem-----\nThis problem was asked by Google.\n\nGiven a string, determine whether any permutation of it is a palindrome. For example, carrace should return true, since it can be rearranged to form racecar, which is a palindrome. daily should return false, since there's no rearrangement that can form a palindrome.\n\n-----Solution-----\nThis problem is an example of a dynamic problem.\n\nWe can treat the string as a graph, with each character as a vertex, and each edge as an edge between two characters.\n\nWe can then do a breadth-first search to test whether the graph is bipartite.\n\nIf the graph is bipartite, then there must be a single source, and if the graph is not bipartite, then we have no source.\n\nIf the graph is not bipartite, then we know that the graph is not a palindrome, and there is no source.\n\nWe can then just do a breadth-first search to find the source of the graph.\n\nTime complexity: O(n), where n is the length of the string.\n\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____\\n\") == 5\n\"\"\"\n\nn, m = [int(i) for i in input().split()]\ngrid = [list(input()) for _ in range(n)]"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____\\n') == '5'\nassert solution('13 50\\n______$$$________$$$______$$$________$$$______$$$____\\n______$$$________$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____\\n') == '5'\nassert solution('13 50\\n______$$$________$$$______$$$________$$$______$$$____\\n______$$$________$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____\\n') == '5'\nassert solution('13 50\\n______$$$________$$$______$$$________$$$______$$$____\\n______$$$________$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$\\n\") == 5\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$\\n\") == \"5\"\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$_\\n___$____$___$_____$___$____$____$_____$___$____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == 5\n\n//14\nsolution(stdin) == 14\nassert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$_\\n___$____$___$_____$___$____$____$_____$___$____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == 14\n\n//34\nsolution(stdin) == 34\nassert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$_\\n___$____$___$_____$___$____$____$_____$___$____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == 34\n\n//94\nsolution(stdin) == 94\nassert solution(stdin) == 94\nassert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == 5\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == \"5\"\nprint(solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == \"5\")\nprint(solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == \"8\")\nprint(solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___\\n___$____$___$_____$___$____$____$_____$___$____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n__$_____$___$_____$___$_____$___$_____$___$_____\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____\\n') == '5'\n\"\"\"\n"
    },
    {
        "number": 4874,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"13 50\\n____$$$_______$$$______$$$________$$$______$$$____\\n____$$$_______$$$______$$$________$$$______$$$____\\n_____$_________$________$__________$________$_____\\n___$_$_$_____$_$_$____$_$_$______$_$_$____$_$_$___\\n__$__$_$____$__$__$___$_$__$____$__$__$___$_$__\\n_$____$$____$__$__$___$$____$___$__$__$___$$____$_\\n$_____$$___$___$___$__$$_____$_$___$___$__$$_____$\\n_____$_$______$_$_____$_$_________$_$_____$_$_____\\n____$___$____$___$____$___$______$___$____$___$___\\n___$____$___$_____$___$____$____$_____$___$____$__\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n__$_____$___$_____$___$_____$___$_____$___$_____$_\\n_$$_____$$_$$_____$$_$$_____$$_$$_____$$_$$_____$$\") == 5\n\nassert solution(\"13 50\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\") == 0\n\nassert solution(\"13 50\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\") == 5\n\nassert solution(\"13 50\\n_____$$$$$______$$$________$$$______$$$_____\\n___$$$_______$$$________$$$______$$$_______$$$___\\n__$$$____$$$________$$$____$$$____$$$________$$_\\n_$$$___$$$________$$$___$$$___$$$________$$$____$$___\\n$$___$$$__$________$$$__$$$__$$$________$$$____$$___\\n$$$____$$$________$$$__$$$__$$$________$$$______$$$__\\n$$$____$$$________$$$__$$$__$$$________$$$_______$$$__\\n$$$____$$$________$$$__$$$__$$$________$$$________$$$__\\n$$$____$$$________$$$__$$$__$$$________$$$________$$$__\\n_$$$__$$$________$$$__$$$__$$$________$$$________$$$__\\n__$$$__$$$________$$$__$$$__$$$________$$$________$$$__\\n___$$$__$$$________$$$__$$$__$$$________$$$________$$$__\\n____$$$__$$$________$$$__$$$__$$$________$$$________$$$__\\n_____$$$$$______$$$_______$$$$$______$$$_____\\n_____$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\") == 50\n\nassert solution(\"13 50\\n__________$$__________$_________$_________$_________\\n__________$$__________$_________$_________$_________\\n__________$$__________$"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nassert solution(\"i can t speak pig latin\") == \"iayay cantpay igpay atinlay\"\nassert solution(\"i can t speak pig latin\") == \"iayay cantpay igpay atinlay\"\nassert solution(\"i can t speak pig latin\") == \"iayay cantpay igpay atinlay\"\nassert solution(\"i can t speak pig latin\") == \"iayay cantpay igpay atinlay\"\n\n\"\"\"\n\nimport re\n\nvowels = \"aeiou\"\nconsonants = \"bcdfghjklmnpqrstvwxyz\""
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nassert solution(\"this is a test\") == \"histay isyay aay esay ityay test\"\n\n\"\"\"\n\nimport re\nimport string\n\nVOWELS = set('aeiou')"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nassert solution(\"hello there!\") == \"elloHay orldway ityay ehay orldway erehay otay!\"\n\"\"\"\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\nassert solution('i can\\'t speak pig latin') == 'iyay antcay eakspay igpay atinlay'\nassert solution('i can\\'t speak English') == 'iay ay eknay iay inlay'\nassert solution('i can\\'t speak English') == 'iay ay eknay iay inlay'\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\n\"\"\""
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\n\"\"\"\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('i can speak pig latin') == 'iayay antcay eakspay igpay atinlay'\nassert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\nassert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\nassert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\""
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('i cant speak pig latin') == 'iyay antcay eakspay igpay atinlay'\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4875,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"i cant speak pig latin\") == \"iyay antcay eakspay igpay atinlay\"\nassert solution(\"i'll speak pig latin\") == \"i'llsay ayay speakyay igpay atinlay\"\nassert solution(\"i'll eat your porridge\") == \"i'llsay ayay eatyouroyay orjday inlay\"\n\"\"\"\nimport re\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n''') == 'nymble'\nprint('OK')\n\nassert solution('''5\n1\nzadarma\nsalad\nnymble\npancakes\n3\nnymble\npancakes\nzadarma\nsalad\nzadarma\nsalad\nzadarma\npancakes\nzadarma\nzadarma\nzadarma\nzadarma\n''') == 'zadarma'\nprint('OK')\n\nassert solution('''5\n1\nzadarma\nsalad\nnymble\npancakes\n3\nnymble\npancakes\nzadarma\nsalad\nzadarma\nsalad\nzadarma\npancakes\nzadarma\nzadarma\nzadarma\nzadarma\n''') == 'Anywhere is fine I guess'\nprint('OK')\n\nprint(solution(input()))\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == \"Anywhere is fine I guess\"\nassert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"nymble\"\nassert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"nymble\"\nassert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"nymble\"\nassert solution(\"2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\") == \"nymble\"\n\n\"\"\""
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch\\n') == 'nymble'\n\"\"\"\n\nimport sys\nimport re"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n\"\"\") == \"nymble\"\n\nassert solution(\"\"\"\n2\n2\nq\npotatoes\nsalad\n3\nnymble\npancakes\npea soup\npunsch\n\"\"\") == \"Anywhere is fine I guess\"\n\"\"\")\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\pea soup\\npunsch') == 'nymble'\nassert solution('2\\n2\\nq\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\pea soup\\npunsch') == 'Anywhere is fine I guess'\n\n\"\"\"\nimport sys\nimport itertools"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\npea soup\\npancakes\\nnymble\\npunsch\") == \"nymble\"\n\"\"\"\n\nimport sys\nimport re\n\nstdin = sys.stdin.read()\nstdin = re.sub(r'\\n\\s*\\n', '\\n', stdin)\nstdin = re.sub(r'\\n\\s*', '\\n', stdin)\nstdin = re.sub(r'\\n','', stdin)\nstdin = re.sub(r'^\\s', '', stdin)\nstdin = re.sub(r'\\s$', '', stdin)\nstdin = stdin.strip()\n\nfor menu in stdin.split('\\n\\n'):\n    name, items = menu.split('\\n')\n    items = items.split('\\n')\n    items = [i for i in items if i!= '']\n    if 'pea soup' in items and 'pancakes' in items:\n        print(name)\n        break\n    else:\n        print('Anywhere is fine I guess')\n"
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('q\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\nassert solution('q\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'Anywhere is fine I guess'\nassert solution('q\\npotatoes\\nsalad\\n3\\nnymble\\npancakes\\npea soup\\npunsch') == 'nymble'\n\n\"\"\""
    },
    {
        "number": 4876,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == \"Anywhere is fine I guess\"\nassert solution('1\\nq\\nq\\nq') == 'Anywhere is fine I guess'\nassert solution('1\\npea soup\\npea soup\\npea soup') == 'Anywhere is fine I guess'\nassert solution('1\\npea soup\\nsalad\\npea soup') == 'nymble'\nassert solution('1\\npea soup\\npea soup\\npea soup') == 'nymble'\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 0 15\") == \"3\"\n\"\"\""
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 0 15\") == 3\n\"\"\""
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 0 15') == '3'\n\n\"\"\"\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 0 15') == 3\nassert solution('5 1 15') == 2\nassert solution('5 5 15') == 1\nassert solution('5 10 15') == 0\n\"\"\"\n\nfrom typing import Tuple"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 0 15\") == 3\n\"\"\"\n\nimport math"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 0 15\") == 3\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 0 15\") == \"3\"\n'''\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '5 0 15\\n'\n) == '3'\nassert solution(\n    '1 0 15\\n'\n) == '5'\n\"\"\"\n\nfrom math import ceil, log\n\nstdin = input()\n\na, b, h = [int(i) for i in stdin.split(' ')]\n\nprint(ceil(log(h, (a + b))))\n"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 0 15\") == 3\n\"\"\"\n\na, b, h = map(int, input().split())\nprint(h//(a-b))"
    },
    {
        "number": 4877,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 0 15') == 3\n\"\"\"\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"11 15\") == \"19\"\nassert solution(\"9 10\") == \"11\"\nassert solution(\"6 7\") == \"7\"\nassert solution(\"12 13\") == \"13\"\n\nSample Input:\n9 10\nSample Output:\n10\n\"\"\"\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"11 15\") == \"19\"\nassert solution(\"-6 -6\") == \"0\"\nassert solution(\"-1 -1\") == \"0\"\nassert solution(\"0 -1\") == \"0\"\nassert solution(\"0 0\") == \"0\"\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"11 15\") == \"19\"\nassert solution(\"1 1\") == \"1\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"11 15\") == \"19\"\n\"\"\""
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('11 15') == '19'\n\"\"\"\n\n_, _ = input(), input()\nprint(int(sum(map(int, input().split())) / 2))\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('12 32') == 36\n\"\"\"\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(test_input) == test_output"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('11 15') == '19'\nprint(solution(stdin.rstrip()))\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 15\") == \"19\"\n\n\"\"\"\n\na, b = map(int, input().split())\nprint(a+b)\n"
    },
    {
        "number": 4878,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 11\") == \"10\"\nassert solution(\"14 14\") == \"14\"\nassert solution(\"-5 -5\") == \"-5\"\nassert solution(\"10 -10\") == \"10\"\nassert solution(\"-10 10\") == \"0\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"South East West\") == \"No\"\n\n\"\"\""
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('North South East') == 'No'\nassert solution('North South West') == 'Yes'\nassert solution('East West West') == 'No'\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('North') == 'No'\nassert solution('South') == 'Yes'\nassert solution('South West') == 'No'\nassert solution('South East') == 'Yes'\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"West South East\") == \"No\"\nassert solution(\"South East South\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"South East West\") == \"No\"\n\"\"\""
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"North South South\") == \"No\"\nassert solution(\"North North East\") == \"No\"\nassert solution(\"South South East\") == \"No\"\nassert solution(\"East West West\") == \"Yes\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"South West East\") == \"Yes\"\n\nassert solution(\"West North East\") == \"No\"\n\nassert solution(\"South East South\") == \"No\"\n\n-----Constraints-----\n|a|, |b|, |c| \u2264 20\n\na, b, c are strings with the value of one of the four strings:\nNorth, South, East, or West.\n\n\"\"\"\n"
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"South West East\") == \"Yes\"\nassert solution(\"South East West\") == \"No\"\n\"\"\""
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('South West East') == 'Yes'\nassert solution('North East West') == 'No'\nprint('Success')\n\n-------------\nSample Input:\nNorth East West\nSample Output:\nYes\n-------------\nSample Input:\nSouth West East\nSample Output:\nYes\n-------------\nSample Input:\nSouth East South\nSample Output:\nNo\n-------------\nSample Input:\nNorth West West\nSample Output:\nYes\n\"\"\"\n\n\"\"\"\n-----\nSample Input:\nSouth West East\nSample Output:\nYes\n\"\"\""
    },
    {
        "number": 4879,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"North South East\") == \"Yes\"\nassert solution(\"North East South\") == \"No\"\nassert solution(\"North East West\") == \"Yes\"\nassert solution(\"South West East\") == \"No\"\nassert solution(\"South East West\") == \"No\"\n\"\"\"\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 16\\n again\\n pirpumsemoystoal\") == \"marywasnosyagain\"\nassert solution(\"5 16\\n marywasnosyagain\\n pirpumsemoystoal\") == \"again\"\nassert solution(\"5 16\\n marywasnosyagain\\n pirpumsemoystoal\") == \"marywasnosyagain\""
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\n\"\"\"\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 16\\naa\\nabab') =='marywasnosyagain'\n\"\"\"\n\nfrom string import ascii_lowercase"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 16\\naagain\\npirpumsemoystoal\") == \"marywasnosyagain\""
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\nassert solution(\"5 16\\nxyz\\nzxwvu\") == \"xyzabcd\"\n\"\"\"\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 16\\nagain\\npirpumsemoystoal') =='marywasnosyagain'\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") =='marywasnosyagain'\nassert solution(\"5 16\\nagain\\npirpumsemoystoal\\nqwertuio\") =='marywasnosyagain'\nassert solution(\"5 16\\nfghjik\\najjwwapqosmw\\nzxcvbnm\") =='marywasnosyagain'\nassert solution(\"5 16\\nfghjik\\najjwwapqosmw\\nzxcvbnm\\nqwertuio\") =='marywasnosyagain'\n\"\"\"\n\nimport unittest\nfrom collections import Counter\nimport string\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 16\\naagain\\npirpumsemoystoal') =='marywasnosyagain'\n\"\"\"\n"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"4 5\nagain\npirpumsemoystoal\"\"\"\n) == \"marywasnosyagain\"\nassert solution(\n\"\"\"4 16\nagain\npirpumsemoystoal\"\"\"\n) == \"marywasnosyagain\"\nassert solution(\n\"\"\"7 12\nbwadwdkcwfnpwdbrvgtzxwfmnhdqnwctpkxkhpkpqahfwyjxmmtflqrsyqzjuzpcnycqmjxnjqzmwfxqpccgpxpjhxmzqdrfmjfzlvjxnsqxqpqxbzgkccwstssmslblzjmnmtzyjgjthbbjfjrulxnfbdrxnzmdzjmbcvqmlxnqclwcbsnwsjhvxlccsxzsjgrphmuycvkfzszqfhncstqmtxwqqwbgjnqapssjukhvlbkrxqmjxnkzmlcclyzjxqmlsjtjnrsyhlzjrjkxrctgszmzychrhlwctmcmjxnzmvcclhszsjzwjnhvxqjdcevndnhftznzmszgccfzmwyjxmvjzkzwmmlccbznznznzmchsjxmzqmwvjxnndzmccwstssmslblzjmnmtzyjgjthbbjfjrulxnfbdrxnzmdzjmbcvqmlxnqclwcbsnwsjhvxlccsxzsjgrphmuycvkfzszqfhncstqmtxwqqwbgjnqapssjukhvlbkrxqmjxnkzmlcclyzjxqmlsjtjnrsyhlzjrjkxrctgszmzychrhlwctmcmjxnzmvcclhszsjzwjnhvxqjdcevndnhftznzmszgccfzmwyjxmvjzkzwmmlccbznznznzmchsjxmzqmwvjxnndzmccwstssmslblzjmnmtzyjgjthbbjfjrulxnfbdrxnzmdzjmbcvqmlxnqclwcbsnwsjhvxlccsxzsjgrphmuycvkfzszqfhncstqmtxwqqwbgjnqapssjukhvlbkrxqmjxnkzmlcclyzjxqmlsjtjnrsyhlzjrjkxrctgszmzychrhlwctmcmjxnzmvcclhszsjzwjnhvxqjdcevndnhftznzmszgccfzmwyjxmvjzkzwmmlccbznznznzmchsjxmzqmwvjxnndzmccwstssmslblzjmnmtzyjgjthbbjfjrulxnfbdrxnzmdzjmbcvqmlxnqclwcbsnwsjhvxlccsxzsjgrphmuycvkfzszqfhncstqmtxwqqwbgjnqapssjukhvlbkrxqmjxnkzmlcclyzjxqmlsjtjnrsyhlzjrjkxrctgszmzychrhlwctmcmjxnzmvcclhszsjzwjnhvxqjdcevndnhftznzmszgccfzmwyjxmvjzkzwmmlccbznznznzmchsjxmzqmwvjxnndzmccwstssmslblzjmnmtzyjgjthbbjfjrulxnfbdrxnzmdzjmbcvqmlxnqclwcbsnwsjhvxlccsxzsjgrphmuycvkfzszqfhncstqmtxwqqwbgjnqapssjukhvlbkrxqmjxnkzmlcclyzjxqmlsjtjnrsyhlzjrjkxrctgszmzychrhlwctmcmjxnzmvcclhszsjzwjnhvxqjdcevndnhftznzmszgccfzmwyjxmvjzkzwmmlccbznznznzmchsjxmzqmwvjxnndzmccwstssmslblzjmnmtzyjgjthbbjfjrulxnfbdrxnzmdzjmbcvqmlxnqclwcbsnwsjhvxlccsxzsjgrphmuycvkfzszqfhncstqmtxwqqwbgjnqapssjukhvlbkrxqmjxnkzmlcclyzjxqmlsjtjnrsyhlzjrjkxrctgszmzychrhlwctmcmjxnzmvcclhszsjzwjnhvxqjdcevndnhftznzmszgccfzmwyjxmvjzkzwmmlccbznznznzmchsjxmzqmwvjxnndzmccwstssmslblzjmnmtzyjgjthbbjfjrulxnfbdrxnzmdzjmbcvqmlxnqclwcbsnwsjhvxlccsxzsjgrphmuycvkfzszqfhncstqmtxwqqwbgjnqapssjukhvlbkrxqmjxnkzmlcclyzjxqmlsjtjnrsyhlzjrjkxrctgszmzychrhlwctmcmjxnzmvcclhszsjzwjnhvxqjdcevndnhftznzmszgccfzmwyjxmvjzkzwmmlccbznznznzmchsjxmzqmwvjxnndzmccwstssmslblzjmnmtzyjgjthbb"
    },
    {
        "number": 4880,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 16\\nagain\\npirpumsemoystoal\") == \"marywasnosyagain\"\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10') == 'Odd'\n\nassert solution('1') == 'Even'\n\nassert solution('0') == 'Even'\n\nassert solution('101') == 'Odd'\n\nassert solution('0 0') == 'Either'"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"Odd\"\nassert solution(\"2\") == \"Even\"\nassert solution(\"3\") == \"Odd\"\nassert solution(\"4\") == \"Even\"\nassert solution(\"5\") == \"Odd\"\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Odd'\nassert solution('4') == 'Even'\nassert solution('5') == 'Odd'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1') == 'Odd'\nassert solution('2') == 'Even'\nassert solution('3') == 'Either'\nassert solution('4') == 'Even'\nassert solution('5') == 'Odd'\n\"\"\"\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1') == 'Odd'\nassert solution('10') == 'Odd'\nassert solution('3') == 'Even'\nassert solution('2') == 'Even'\nassert solution('3') == 'Odd'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == 'Odd'\nassert solution('2') == 'Odd'\nassert solution('3') == 'Either'\nassert solution('4') == 'Even'\nassert solution('5') == 'Odd'\n\"\"\""
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"Either\"\nassert solution(\"0\") == \"Odd\"\nassert solution(\"9\") == \"Odd\"\nassert solution(\"100\") == \"Even\"\nassert solution(\"101\") == \"Odd\"\n\"\"\"\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1') == 'Odd'\nassert solution('2') == 'Even'\nassert solution('5') == 'Either'\n\nassert solution('3') == 'Even'\nassert solution('4') == 'Odd'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == 'Either'\nassert solution('2') == 'Even'\nassert solution('3') == 'Odd'\nassert solution('4') == 'Even'\nassert solution('5') == 'Odd'\n"
    },
    {
        "number": 4881,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '3'\n) == 'Odd'\n\nassert solution(\n    '9'\n) == 'Even'\n\nassert solution(\n    '1'\n) == 'Odd'\n\nassert solution(\n    '15'\n) == 'Odd'\n\nassert solution(\n    '5'\n) == 'Even'"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\""
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == '3\\n1\\n4\\n1\\n5'\n\n\"\"\"\n\nn = int(input())\nanswer = ''\nfor i in range(n):\n    num = int(input())\n    answer += str(len(str(num))) + '\\n'\n\nprint(answer)\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n\"\"\"\n\n\"\"\"\nDaniil decides to become a cost estimator. He came up with an interesting way to estimate costs: he performs a certain number of trials, and for each trial he picks a random number between 0 and 10^{100}. He reports this number to the boss, who reports it to you.\n\nAfter doing this, he wants you to help him by writing a program that reports for him the number of digits needed to represent the numbers he reports.\n\nInput\nThe input begins with the number of trials $T$ (1\u2009\u2264\u2009$T$\u2009\u2264\u200910) \u2014 the number of rounds in the estimation game. After this, there are $T$ lines containing an integer between 0 and 10^{100} ($10^{100}$\u2009\u2264\u2009$X$\u2009\u2264\u200910), and the number of digits is the number of digits required to represent the number $X$.\n\nOutput\nOutput $T$ lines, containing the number of digits needed to represent the number reported by the boss for each of the rounds.\n\nExample\nSample input:\n5\n314\n1\n5926\n5\n35897\nSample output:\n3\n1\n4\n1\n5\n\n\"\"\"\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2\\n7\\n7\\n5\\n1\\n\") == \"3\\n2\\n3\\n3\\n1\\n\"\n\n\"\"\""
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\nprint(solution(input()))\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n314\\n1\\n5926\\n5\\n35897\") == \"3\\n1\\n4\\n1\\n5\"\n\"\"\"\n\nN = int(input())\n\nfor _ in range(N):\n    print(len(str(int(input()))))\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('7\\n25\\n65536\\n99999\\n1\\n') == '6\\n31\\n11\\n5\\n1'\nassert solution('314\\n1\\n5926\\n5\\n35897\\n') == '3\\n1\\n4\\n1\\n5'\nassert solution('0\\n0\\n0\\n0\\n0\\n') == '1\\n1\\n2\\n2\\n3\\n4'\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\nassert solution('4\\n5\\n1\\n34\\n2\\n45') == '3\\n2\\n1\\n2'\nassert solution('1\\n100') == '1\\n3'\nassert solution('2\\n0') == '1\\n1'\nassert solution('0\\n1') == '1\\n1'\n\nprint(solution('1\\n100'))\nprint(solution('2\\n0'))\nprint(solution('0\\n1'))\n"
    },
    {
        "number": 4882,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\nassert solution('3\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'\nassert solution('4\\n314\\n1\\n5926\\n5\\n35897') == '3\\n1\\n4\\n1\\n5'"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"9 5\\n\"\n\"c t\\n\"\n\"i r\\n\"\n\"k p\\n\"\n\"o c\\n\"\n\"r o\\n\"\n\"t e\\n\"\n\"t f\\n\"\n\"u h\\n\"\n\"w p\\n\"\n\"we we\\n\"\n\"can the\\n\"\n\"work people\\n\"\n\"it of\\n\"\n\"out the\") == \"yes\\n\" * 7\n\nassert solution(\"9 5\\n\"\n\"c t\\n\"\n\"i r\\n\"\n\"k p\\n\"\n\"o c\\n\"\n\"r o\\n\"\n\"t e\\n\"\n\"t f\\n\"\n\"u h\\n\"\n\"w p\\n\"\n\"we we\\n\"\n\"can the\\n\"\n\"work people\\n\"\n\"it of\\n\"\n\"out the\") == \"yes\\n\" * 7\n\n\"\"\""
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('9 5\\nc t\\ni r\\nk p\\n'\\\n    'o c\\n'\\\n    'r o\\n'\\\n    't e\\n'\\\n    't f\\n'\\\n    'u h\\n'\\\n    'w p\\n'\\\n    'we we\\n'\\\n    'can the\\n'\\\n    'work people\\n'\\\n    'it of\\n'\\\n    'out the') == 'yes\\n'\n\nassert solution('9 5\\nc t\\ni r\\nk p\\n'\\\n    'o c\\n'\\\n    'r o\\n'\\\n    't e\\n'\\\n    't f\\n'\\\n    'u h\\n'\\\n    'w p\\n'\\\n    'we we\\n'\\\n    'can the\\n'\\\n    'work people\\n'\\\n    'it of\\n'\\\n    'out the') == 'yes\\n'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"9 5\\n\"\n        \"c t\\n\"\n        \"i r\\n\"\n        \"k p\\n\"\n        \"o c\\n\"\n        \"r o\\n\"\n        \"t e\\n\"\n        \"t f\\n\"\n        \"u h\\n\"\n        \"w p\\n\"\n        \"we we\\n\"\n        \"can the\\n\"\n        \"work people\\n\"\n        \"it of\\n\"\n        \"out the\") == \"yes\"\nassert solution(\"9 5\\n\"\n        \"c t\\n\"\n        \"i r\\n\"\n        \"k p\\n\"\n        \"o c\\n\"\n        \"r o\\n\"\n        \"t e\\n\"\n        \"t f\\n\"\n        \"u h\\n\"\n        \"w p\\n\"\n        \"we we\\n\"\n        \"can the\\n\"\n        \"work people\\n\"\n        \"it of\\n\"\n        \"out the\") == \"yes\"\nassert solution(\"9 5\\n\"\n        \"c t\\n\"\n        \"i r\\n\"\n        \"k p\\n\"\n        \"o c\\n\"\n        \"r o\\n\"\n        \"t e\\n\"\n        \"t f\\n\"\n        \"u h\\n\"\n        \"w p\\n\"\n        \"we we\\n\"\n        \"can the\\n\"\n        \"work people\\n\"\n        \"it of\\n\"\n        \"out the\") == \"no\"\nassert solution(\"9 5\\n\"\n        \"c t\\n\"\n        \"i r\\n\"\n        \"k p\\n\"\n        \"o c\\n\"\n        \"r o\\n\"\n        \"t e\\n\"\n        \"t f\\n\"\n        \"u h\\n\"\n        \"w p\\n\"\n        \"we we\\n\"\n        \"can the\\n\"\n        \"work people\\n\"\n        \"it of\\n\"\n        \"out the\") == \"no\"\nassert solution(\"9 5\\n\"\n        \"c t\\n\"\n        \"i r\\n\"\n        \"k p\\n\"\n        \"o c\\n\"\n        \"r o\\n\"\n        \"t e\\n\"\n        \"t f\\n\"\n        \"u h\\n\"\n        \"w p\\n\"\n        \"we we\\n\"\n        \"can the\\n\"\n        \"work people\\n\"\n        \"it of\\n\"\n        \"out the\") == \"yes\"\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"9 5\\nc t\\ni r\\nk p\\no c\\n r o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\") == \"yes\\nno\\nno\\nyes\\nyes\\n\"\nassert solution(\"8 5\\nc o\\nr o\\nt e\\nt f\\n u h\\nw p\\nwe we\\ncan the\\nwork people\\nit of\") == \"no\\no\\nno\\nyes\\nyes\\n\"\n\nprint(\"Successfully passed all tests\")"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('9 5\\nt c\\ni r\\nk p\\no c\\nr o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of') == 'yes\\nno\\nno\\nyes\\nyes\\nyes\\n'\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('9 5\\nc\\ti\\nr\\nk\\np\\no\\r\\nt\\te\\t\\t\\tf\\tu\\hw\\wp\\wee\\can\\th\\tw\\or\\te\\n\\to\\t\\tt\\n') == 'yes'\nassert solution('9 5\\nc\\ti\\nr\\nk\\np\\no\\r\\nt\\te\\t\\t\\tf\\tu\\hw\\wp\\wee\\can\\th\\tw\\or\\te\\n\\to\\t\\tt\\n') == 'no'\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"9 5\\n\"\n\"c t\\n\"\n\"i r\\n\"\n\"k p\\n\"\n\"o c\\n\"\n\"r o\\n\"\n\"t e\\n\"\n\"t f\\n\"\n\"u h\\n\"\n\"w p\\n\"\n\"we we\\n\"\n\"can the\\n\"\n\"work people\\n\"\n\"it of\\n\"\n\"out the\") == \"yes\\nno\\nno\\nyes\\nyes\\n\"\nprint(\"Test 1 OK\")\n\nassert solution(\"9 5\\n\"\n\"f r\\n\"\n\"a t\\n\"\n\"o h\\n\"\n\"o b\\n\"\n\"o a\\n\"\n\"a h\\n\"\n\"t d\\n\"\n\"l l\\n\"\n\"a i\\n\"\n\"o c\\n\"\n\"r g\\n\"\n\"r t\\n\"\n\"h w\\n\"\n\"c w\\n\"\n\"k k\\n\"\n\"s a\\n\"\n\"t e\\n\"\n\"p l\\n\"\n\"p a\\n\"\n\"p h\\n\"\n\"r w\\n\"\n\"e r\\n\"\n\"t h\\n\"\n\"w f\\n\"\n\"w t\\n\"\n\"w r\\n\"\n\"c r\\n\"\n\"c w\\n\"\n\"a a\\n\"\n\"o i\\n\"\n\"o n\\n\"\n\"o a\\n\"\n\"u h\\n\"\n\"r g\\n\"\n\"h o\\n\"\n\"b n\\n\"\n\"b h\\n\"\n\"t o\\n\"\n\"t w\\n\"\n\"t o\\n\"\n\"p w\\n\"\n\"p o\\n\"\n\"p h\\n\"\n\"r k\\n\"\n\"r w\\n\"\n\"w a\\n\"\n\"w k\\n\"\n\"w n\\n\"\n\"w t\\n\"\n\"k i\\n\"\n\"k w\\n\"\n\"s o\\n\"\n\"s p\\n\"\n\"s b\\n\"\n\"o o\\n\"\n\"o c\\n\"\n\"o w\\n\"\n\"o a\\n\"\n\"o n\\n\"\n\"o k\\n\"\n\"o n\\n\"\n\"w f\\n\"\n\"w k\\n\"\n\"w n\\n\"\n\"w i\\n\"\n\"w w\\n\"\n\"w s\\n\"\n\"w r\\n\"\n\"w t\\n\"\n\"w f\\n\"\n\"w n\\n\"\n\"w k\\n\"\n\"w g\\n\"\n\"w t\\n\"\n\"w p\\n\"\n\"w r\\n\"\n\"w g\\n\"\n\"w c\\n\"\n\"w i\\n\"\n\"w o\\n\"\n\"w k\\n\"\n\"w r\\n\"\n\"w b\\n\"\n\"w a\\n\"\n\"w o\\n\"\n\"w r\\n\"\n\"w h\\n\"\n\"w p\\n\"\n\"w g\\n\"\n\"w t\\n\"\n\"w a\\n\"\n\"w b\\n\"\n\"w p\\n\"\n\"w a\\n\"\n\"w p\\n\"\n\"w c\\n\"\n\"w h\\n\"\n\"w t\\n\"\n\"w i\\n\"\n\"w f\\n\"\n\"w b\\n\"\n\"w k\\n\"\n\"w g\\n\"\n\"w i\\n\"\n\"w r\\n\"\n\"w a\\n\"\n\"w k\\n\"\n\"w f\\n\"\n\"w a\\n\"\n\"w f\\n\"\n\"w p\\n\"\n\"w r\\n\"\n\"w a\\n\"\n\"w r\\n\"\n\"w r\\n\"\n\"w h\\n\"\n\"w p\\n\"\n\"w t\\n\"\n\"w i\\n\"\n\"w w\\n\"\n\"w b\\n\"\n\"w k\\n\"\n\"w b\\n\"\n\"w r\\n\"\n\"w a\\n\"\n\"w b\\n\"\n\"w h\\n\"\n\"w c\\n\"\n\"w r\\n\"\n\"w g\\n\"\n\"w k\\n\"\n\"w a\\n\"\n\"w p\\n\"\n\"w a\\n\"\n\"w a\\n\"\n\"w n\\n\"\n\"w p\\n\"\n\"w b\\n\"\n\"w r\\n\"\n\"w h\\n\"\n\"w c\\n\"\n\"w b\\n\"\n\"w k\\n\"\n\"w a\\n\"\n\"w h\\n\"\n\"w p\\n\"\n\"w g\\n\"\n\"w i\\n\"\n\"w p\\n\"\n\"w h\\n\"\n\"w r\\n\"\n\"w i\\n\"\n\"w a\\n\"\n\"w t\\n\"\n\"w o\\n\"\n\"w p\\n\"\n\"w b\\n\"\n\"w w\\n\"\n\"w o\\n\"\n\"w p\\n\"\n\"w r\\n\"\n\"w r\\n\"\n\"w r\\n\"\n\"w p\\n\"\n\"w a\\n\"\n\"w k\\n\"\n\"w a\\n\"\n\"w w\\n\"\n\"w n\\n\"\n\"w n\\n\"\n\"w"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('9 5\\nc t\\ni r\\nk p\\no c\\nor o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of') == 'yes\\nno\\nno\\nyes\\nyes'\nassert solution('9 5\\nc t\\ni r\\nk p\\no c\\nor o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of') == 'yes\\nno\\nno\\nyes\\nyes'\nassert solution('9 5\\nc t\\ni r\\nk p\\no c\\nor o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of') == 'yes\\nno\\nno\\nyes\\nyes'\nassert solution('9 5\\nc t\\ni r\\nk p\\no c\\nor o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of') == 'yes\\nno\\nno\\nyes\\nyes'\nassert solution('9 5\\nc t\\ni r\\nk p\\no c\\nor o\\nt e\\nt f\\nu h\\nw p\\nwe we\\ncan the\\nwork people\\nit of') == 'yes\\nno\\nno\\nyes\\nyes'\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('0\\n') == ''\nassert solution('1\\n') == ''\nassert solution('2\\n') == ''\nassert solution('3\\n') == ''\n"
    },
    {
        "number": 4883,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9 5\\nc\\ti\\r\\nk\\np\\no\\r\\nt\\te\\t\\tf\\tu\\hw\\wp\\we\\tw\\w\\can\\th\\to\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tw\\r\\n') == 'yes'\nassert solution('9 5\\nc\\ti\\r\\nk\\np\\no\\r\\nt\\te\\t\\tf\\tu\\hw\\wp\\we\\tw\\w\\can\\th\\to\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tw\\r\\n') == 'yes'\nassert solution('9 5\\nc\\ti\\r\\nk\\np\\no\\r\\nt\\te\\t\\tf\\tu\\hw\\wp\\we\\tw\\w\\can\\th\\to\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tw\\r\\n') == 'yes'\nassert solution('9 5\\nc\\ti\\r\\nk\\np\\no\\r\\nt\\te\\t\\tf\\tu\\hw\\wp\\we\\tw\\w\\can\\th\\to\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tw\\r\\n') == 'yes'\nassert solution('9 5\\nc\\ti\\r\\nk\\np\\no\\r\\nt\\te\\t\\tf\\tu\\hw\\wp\\we\\tw\\w\\can\\th\\to\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tw\\r\\n') == 'yes'"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''2 1\ncarrots?\nbunnies''') == 1\n\nprint(solution(input()))\n\n-----Explanation-----\nThere are two contestants in this contest. They solved 1 and 1 huffle-puff problem in total. All of them are good at describing themselves, so I assume that if I give them 1 carrot, they will not choke.\n\nSo, I will give them 1 carrot.\n'''\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies') == 1\n\n\"\"\"\nimport re"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies') == 1\n\"\"\""
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == 1\n\n\"\"\"\n\nimport re\n\nimport pytest\n\nfrom.. import decorators\n\n\n@decorators.debug\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies') == 1\nassert solution('1 1\\ncarrots?\\nbunnies') == 0\nassert solution('2 1\\ncarrots?\\nrabbits') == 0\nassert solution('2 1\\ncarrots?\\njumps') == 0\nassert solution('2 1\\ncarrots?\\nsheep') == 1\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1\\ncarrots?\\nbunnies\") == 1\n\"\"\"\n"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 1\\ncarrots?\\nbunnies') == 1\n\"\"\"\n\nimport re"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"0\"\nassert solution(\"2 2\") == \"1\"\n\"\"\""
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == 1\n\nSample Input:\n3 2\naddddd\neeeee\nfffff\nSample Output:\n0"
    },
    {
        "number": 4884,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 1\\ncarrots?\\nbunnies\") == 1\nprint(solution(\"2 1\\ncarrots?\\nbunnies\"), 1)\nassert solution(\"5 4\\ncarrots?\\nbunnies\\ndog\\npoop\\ncat\\nbutter\") == 5\nprint(solution(\"5 4\\ncarrots?\\nbunnies\\ndog\\npoop\\ncat\\nbutter\"), 5)\nassert solution(\"5 4\\ncarrots?\\nbunny\\ndog\\npoop\\ncat\\nbutter\") == 4\nprint(solution(\"5 4\\ncarrots?\\nbunny\\ndog\\npoop\\ncat\\nbutter\"), 4)\nassert solution(\"5 4\\ncarrots?\\nbunny\\ndog\\npoop\\ncat\\nbutter\") == 4\nprint(solution(\"5 4\\ncarrots?\\nbunny\\ndog\\npoop\\ncat\\nbutter\"), 4)\nassert solution(\"5 4\\ncarrots?\\nbunny\\ndog\\npoop\\ncat\\nbutter\") == 4\nprint(solution(\"5 4\\ncarrots?\\nbunny\\ndog\\npoop\\ncat\\nbutter\"), 4)\n"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"..k..\") == \"Kd1\"\nassert solution(\"..p..\") == \"Pf3\"\nassert solution(\"...r....\") == \"Kd8\"\nassert solution(\"r...p..\") == \"Ra7\"\nassert solution(\"r.p.p..\") == \"Kd8\"\n"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(test_stdin_1) == test_stdout_1\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"White: Kd1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4,Kd8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6 Black: Kd8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\"\n\nassert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\""
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n') == 'White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6'\nassert solution('+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+\\n') == 'White: Ke1"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\") == \\\n    \"White: Kd1,Qd1,Ka1,Qh1,Kh1,Kg1,Kf1,Kh2,Kg2,Kf2,Kg3,a1,b1,c1,d1,e1,f1,g1,h1,a2,a3,e4,h5,a6,a7,e7,a8,h8,e8,e7,f7,h7,f8,g8,h8,Kf1,Kg3,Kg2,Kh1,Kh2,Kg1,Kf3,a2,b2,c2,d2,e2,f2,g2,h2,a3,e3,f3,d4,b5,d5,f5,a4,b4,c4,d4,e4,f4,g4,h4,a5,b5,c5,d5,e5,f5,g5,h5,Kf2,Kg2,Kg1,Kf3,a4,b4,c4,d4,e4,f4,g4,h4,Kf3,Kg1,Kg2,a5,b5,c5,d5,e5,f5,g5,h5\"\nassert solution(\"+---+---+---+---+---+---+---+---+\") == \\\n    \"Black: Kd8,Qd8,Ka8,Qh8,Kh8,Kg8,Kf8,Kh7,Kg7,Kf7,Kg6,a8,b8,c8,d8,e8,f8,g8,h8,a7,b7,c7,d7,e7,f7,g7,h7,a6,b6,c6,d6,e6,f6,g6,h6,Kf8,Kg6,Kg7,Kf7,Kg8,Kf6,Kh7,Kh8,Kg6,Kf7,Kg7,Kf8,a7,b7,c7,d7,e7,f7,g7,h7,Kf7,Kg6,Kg7,Kf8,a6,b6,c6,d6,e6,f6,g6,h6,Kf6,Kg8,Kg7,Kf7,Kg8,Kf7,Kg7,Kf8,Kg6,Kf7,Kg7,Kg8,Kf6,Kh8,Kh7,Kh6,Kh8,Kg8,Kf7,Kf8,Kf8,Kg7,Kh8,Kh7,Kh6,Kh8,Kg8,Kf7,Kg7,Kf8,Kf8,Kh8,Kh7,Kh6,Kh8,Kg8,Kf8,Kg7,Kg6,Kg8,Kf8,Kg8,Kh8,Kh7,Kh6,Kh8,Kg8,Kf8,Kf8,Kg7,Kh8,Kh7,Kh6,Kh8,Kg8,Kf8,Kf8,Kg7,Kh8,Kh7,Kh6,Kh8,Kg8,Kf8,Kf8,Kf8,Kg7,Kh8,Kh7,Kh6,Kh8,Kg8,Kf8,Kf8,Kf8,Kh8,Kh7,Kh6,Kh8,Kg8,Kf8,Kf8,Kf8,Kh8,Kh7,Kh6,Kh8,Kg8,Kf8,Kf8,Kf8,Kh8,Kh7,Kh6,Kh8,Kg8,Kf8,Kf8,"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('...|:::|...|:::|...|:::|...|:::|...|:::|...|:::|...|:::|...|:::|...|:::|...|') == 'White: a2,c2,d2,f2,g2,h2,a3,e4'\nassert solution('...|:::|...|:::|...|:::|...|:::|...|:::|...|:::|...|:::|...|:::|...|:::|...|') == 'Black: a7,b7,c7,d7,e7,f7,h7,h6'\nassert solution('+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|::q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|::p|.p|::p|.p|::p|.p|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+') == 'White: a2,c2,d2,f2,g2,h2,a3,e4 Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6'\n\nassert solution('+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|::q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|::p|.p|::p|.p|::p|.p|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:p:|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:P:|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+') == 'White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6'\nassert solution('+---+---+---+---+---+---+---+---+\\n|r|::|b|:q|:k|::|n|:r|\\n+---+---+---+---+---+---+---+---+\\n|:p|p|p|p|p|p|::|p|\\n+---+---+---+---+---+---+---+---+\\n|...|::|n|::|...|::|...|::|...|\\n+---+---+---+---+---+---+---+---+\\n|::|...|::|...|::|...|::|...|::|\\n+---+---+---+---+---+---+---+---+\\n|...|::|...|::|p|::|...|::|...|::|\\n+---+---+---+---+---+---+---+---+\\n|p|p|p|p|p|p|p|p|p|\\n+---+---+---+---+---+---+---+---+\\n|r|n|b|q|k|b|::|r|\\n+---+---+---+---+---+---+---+---+') == 'White: Kd1,Ka1,Qa1,Rb1,Rc1,Rd1,Re1,a2,b2,c2,d2,e2,f2,g2,h2,a3,c3,e3,h3,a4,b4,d4,e4,f4,g4,h4,a5,d5,e5,f5,g5,h5,a6,b6,d6,e6,f6,g"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6\n\"\"\"\nassert solution(\"\"\"\n+---+---+---+---+---+---+---+---+\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\n+---+---+---+---+---+---+---+---+\n|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|\n+---+---+---+---+---+---+---+---+\n|...|:::|.n.|:::|...|:::|...|:p:|\n+---+---+---+---+---+---+---+---+\n|:::|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|...|:::|...|:::|.P.|:::|...|:::|\n+---+---+---+---+---+---+---+---+\n|:P:|...|:::|...|:::|...|:::|...|\n+---+---+---+---+---+---+---+---+\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\n+---+---+---+---+---+---+---+---+\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\n+---+---+---+---+---+---+---+---+\n\"\"\") == \"\"\"\nWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"+---+---+---+---+---+---+---+---+\") == \"White: Kh1,Qh1,Kh2,Qd2,Kg1,Qg1,Kh3,Qh3,Kh4,Qd4,Kf1,Qf1,Kh5,Qh5,Kh6,Qd6,Kg7,Qg7,Kh7,Qh7,Kh8,Qh8\"\nassert solution(\"+---+---+---+---+---+---+---+---+\") == \"Black: Kh1,Qh1,Kh2,Qd2,Kg1,Qg1,Kh3,Qh3,Kh4,Qd4,Kf1,Qf1,Kh5,Qh5,Kh6,Qd6,Kg7,Qg7,Kh7,Qh7,Kh8,Qh8\"\nassert solution(\"+---+---+---+---+---+---+---+---+\") == \"Black: Kh1,Qh1,Kh2,Qd2,Kg1,Qg1,Kh3,Qh3,Kh4,Qd4,Kf1,Qf1,Kh5,Qh5,Kh6,Qd6,Kg7,Qg7,Kh7,Qh7,Kh8,Qh8\"\nassert solution(\"+---+---+---+---+---+---+---+---+\") == \"White: Kd1,Qh1,Kg1,Kh1,Qd2,Qh2,Kg2,Kh3,Qd3,Qh3,Kg3,Kh4,Kf1,Qf1,Kh5,Qg5,Kh6,Qg6,Kh7,Kg7,Kh8\"\nassert solution(\"+---+---+---+---+---+---+---+---+\") == \"White: Kh1,Qh1,Kh2,Qd2,Kg1,Qg1,Kh3,Qh3,Kh4,Qd4,Kf1,Qf1,Kh5,Qg5,Kh6,Qg6,Kh7,Kg7,Kh8\"\n"
    },
    {
        "number": 4885,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|::p|::p|::p|::p|::p|::p|::p|::p|\\n+---+---+---+---+---+---+---+---+\\n|.p.|.p.|.p.|.p.|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|\\n+---+---+---+---+---+---+---+---+\\n|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|\\n+---+---+---+---+---+---+---+---+') == 'White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4\\nBlack: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6'\n\nassert solution('+---+---+---+---+---+---+---+---+\\n|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|\\n+---+---+---+---+---+---+---+---+\\n|::p|::p|::p|::p|::p|::p|::p|::p|\\n+---+---+---+---+---+---+---+---+\\n|.p.|.p.|.p.|.p.|.p.|:::|.p.|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|.n.|:::|...|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|...|:::|...|:::|.P.|:::|...|:::|...|\\n+---+---+---+---+---+---+---+---+\\n|:::|...|:::|...|:::|...|:::|...|:::|\\n+---+---+---+---+---+---+---+---+\\n|.P.|:::|.P.|:P:|...|:P:|.P.|:P"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\n\"\"\""
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''8 3\n''') == 'Your wish is granted!'\n\nassert solution('''8 2\n''') == 'You will become a flying monkey!'\n\nassert solution('''5 1\n''') == 'Your wish is granted!'\n\nassert solution('''10 9\n''') == 'Your wish is granted!'\n\nassert solution('''2 1\n''') == 'You will become a flying monkey!'"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('10 3') == 'You will become a flying monkey!'\n\"\"\"\n\nn, k = input().split()\nn, k = int(n), int(k)\ncnt = 0\nnums = set()\nfor i in range(n+1):\n    nums.add(i)\nfor i in range(1, n+1):\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i)\n    if i in nums:\n        nums.remove(i"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(stdin)) == str(stdin)\n\nSample Input:\n8 8\nSample Output:\nYour wish is granted!\n\"\"\"\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(input()) == output()\nprint(solution(input()))\n\n-----Solution-----\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"8 3\") == \"Your wish is granted!\"\n\"\"\""
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\n\nassert solution('8 1') == 'You will become a flying monkey!'\nassert solution('6 4') == 'You will become a flying monkey!'\nassert solution('10 3') == 'You will become a flying monkey!'\nassert solution('100 3') == 'You will become a flying monkey!'\n\nprint(\"Successfully solved!\")\n-----"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n8 3\n''') == 'Your wish is granted!'\n'''\n"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('2 3') == 'You will become a flying monkey!'\n'''\n\n'''\nThe Wizard says, \"The number of players in the game is $n$. Players are numbered $1, 2, \\ldots, n$. In each turn, a player asks you whether the number is $k$ or not (i.e., is $k$ in the set $1, 2, \\ldots, n$?) or $k+$ or $k-$. You must answer these questions honestly (without lying). The player who asks the last question is the winner. If you do not know the secret number, you can answer $k$, $k+$, or $k-$ for each question, and you can skip a turn. You must answer the questions within $K$ guesses.\"\n\nThe Wizard says, \"The number of players in the game is $n$. Players are numbered $1, 2, \\ldots, n$. In each turn, a player asks you whether the number is $k$ or not (i.e., is $k$ in the set $1, 2, \\ldots, n$?) or $k+$ or $k-$. You must answer these questions honestly (without lying). The player who asks the last question is the winner. If you do not know the secret number, you can answer $k$, $k+$, or $k-$ for each question, and you can skip a turn. You must answer the questions within $K$ guesses.\"\n\nThe Wizard says, \"The number of players in the game is $n$. Players are numbered $1, 2, \\ldots, n$. In each turn, a player asks you whether the number is $k$ or not (i.e., is $k$ in the set $1, 2, \\ldots, n$?) or $k+$ or $k-$. You must answer these questions honestly (without lying). The player who asks the last question is the winner. If you do not know the secret number, you can answer $k$, $k+$, or $k-$ for each question, and you can skip a turn. You must answer the questions within $K$ guesses.\"\n\nThe Wizard says, \"The number of players in the game is $n$. Players are numbered $1, 2, \\ldots, n$. In each turn, a player asks you whether the number is $k$ or not (i.e., is $k$ in the set $1, 2, \\ldots, n$?) or $k+$ or $k-$. You must answer these questions honestly (without lying). The player who asks the last question is the winner. If you do not know the secret number, you can answer $k$, $k+$, or $k-$ for each question, and you can skip a turn. You must answer the questions within $K$ guesses.\"\n\nThe Wizard says, \"The number of players in the game is $n$. Players are numbered $1, 2, \\ldots, n$. In each turn, a player asks you whether the number is $k$ or not (i.e., is $k$ in the set $1, 2, \\ldots, n$?) or $k+$ or $k-$. You must answer these questions honestly (without lying). The player who asks the last question is the winner. If you do not know the secret number, you can answer $k$, $k+$, or $k-$ for each question, and you can skip a turn. You must answer the questions within $K$ guesses.\"\n\nThe Wizard says, \"The number of players in the game is $n$. Players are numbered $1, 2, \\ldots, n$. In each turn, a player asks you whether the number is $k$ or not (i.e., is $k$ in the set $1, 2, \\ldots, n$?) or $k+$ or $k-$. You must answer these questions honestly (without lying). The player who asks the last question is the winner. If you do not know the secret number, you can answer $k$, $k+$, or $k-$ for each question, and you can skip a turn. You must answer the questions within $K$ guesses.\"\n\nThe Wizard says, \"The number of players in the game is $n$. Players are numbered $1, 2, \\ldots, n$. In each turn, a player asks you whether the number is $k$ or not (i.e., is $k$ in the set $1, 2, \\ldots, n$?) or $k+$ or $k-$. You must answer these questions honestly (without lying). The player who asks the last question is the winner. If you do not know the secret number, you can answer $k$, $k+$, or $k-$ for each question, and you can skip a turn. You must answer the questions within $K$ guesses.\"\n\nThe Wizard says, \"The number of players in the game is $n$. Players are numbered $1, 2, \\ldots, n$. In each turn, a player asks you whether the number is $k$ or not (i.e., is $k$ in the set $1, 2, \\ldots, n$?) or $k+$ or $k-$. You must answer these questions honestly (without lying). The player who asks the last question is the winner. If you do not know the secret number, you can answer $k$, $k+$, or $k-$ for each question, and you can skip a turn. You must answer the questions within $K$ guesses.\"\n\nThe Wizard says, \"The number of players in the game is $n$. Players are numbered $1, 2, \\ldots, n$. In each turn, a player asks you whether the number is $k$ or not (i.e., is $k$ in the set $1, 2, \\ldots, n$?) or $k+$ or $k-$. You must answer these questions honestly (without lying). The player who asks the last question is the winner. If you do not know the secret number, you can answer $k$, $k+$, or $k-$ for each question, and you can skip a turn. You must answer the questions within $K$ guesses.\"\n\nThe Wizard says, \"The number of players in the game is $n$. Players are numbered $1, 2, \\ldots, n$. In each turn, a player asks you whether the number is $k$ or not (i.e., is $k$ in the set $1, 2, \\ldots, n$?) or $k+$ or $k-$. You must answer these questions honestly (without lying). The player who asks the last question is the winner. If you do not know the secret number, you can answer $k$, $k"
    },
    {
        "number": 4886,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('8 3') == 'Your wish is granted!'\nassert solution('5 2') == 'You will become a flying monkey!'\nassert solution('1 0') == 'You will become a flying monkey!'\nassert solution('2 2') == 'You will become a flying monkey!'\nassert solution('4 4') == 'You will become a flying monkey!'\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"16\") == \"16\"\n\n\"\"\"\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('16') == '16'\n\nimport os, io, time, contextlib\nfrom collections import deque, OrderedDict, defaultdict, Counter\nfrom math import log, gcd, ceil, floor, sqrt, pi, factorial, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product, combinations_with_replacement\nfrom decimal import Decimal\nfrom bisect import bisect_left, bisect_right\nfrom fractions import Fraction\nfrom functools import reduce\nfrom operator import add, mul, itemgetter\nfrom copy import deepcopy\n\nos.environ['OUTPUT_PATH'] = 'out.txt'\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('16') == '16'\n\nSample Input:\n23\nSample Output:\n40\n\nimport math"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"16\") == \"16\"\n\"\"\"\n\n\nimport math\nimport sys"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"16\") == \"16\"\n'''\n\nfrom math import sqrt"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('16') == '16'\n'''"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('16') == '16'\nassert solution('10') == '16'\nassert solution('1') == '1'\nassert solution('16.89') == '16'\nassert solution('16.9') == '17'\n\"\"\"\n"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('16') == '16'\nassert solution('1') == '1'\nassert solution('10') == '11'\nassert solution('10 ** 18') == '10 ** 18'\n\"\"\"\n\nimport sys\n\na = int(sys.stdin.readline().strip())\nprint(a)"
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('16') == '16'\n\"\"\""
    },
    {
        "number": 4887,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"16\") == \"16\"\n\n\"\"\"\n\na = int(stdin.readline())\n\nprint(a)\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 180\\n45 30 55 20 80 20\") == \"4\"\n\"\"\"\n\nT, N = input().split(\" \")\nT = int(T)\nN = int(N)\ntasks = list(map(int, input().split(\" \")))"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 180\\n45 30 55 20') == '4'\n\"\"\"\n\nfrom sys import stdin\n\nn, t = map(int, stdin.readline().split())\n\narr = list(map(int, stdin.readline().split()))\n\ncount = 0\n\nwhile len(arr)!= 0:\n    i = arr.index(max(arr))\n    count += 1\n    t -= arr[i]\n    arr.pop(i)\n    if t < 0:\n        count -= 1\n        break\n\nprint(count)\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('6 180\\n45 30 55 20 80 20') == '4'\nprint(solution(input()))\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('6 180\\n45 30 55 20 80 20') == '4'\nprint(solution(stdin))\n\n'''\n\nfrom typing import List"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 180\\n1 2 3 4 5 6\") == \"4\"\n\"\"\""
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''\n6 180\n45 30 55 20 80 20\n''') == '4'\n\n--------------------------------------------------------------------------------------------------------------------------------------\n\nFor the second part of this exercise, we will be replacing the existing do_twice function with a decorator called create_and_do, which will wrap the original function and allow it to be called multiple times.\n\nNote: In the rest of the chapter, you will see the do_twice_new function being used. That function does the exact same thing as the do_twice function, but it uses decorators to create the do_twice_new function.\n\n--------------------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 180\\n45 30 55 20 80 20\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 180\\n45 30 55 20 80\\n') == '4'\n\"\"\""
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 180\\n1 2 3 4 5 6\") == \"4\"\n\"\"\"\nimport sys"
    },
    {
        "number": 4888,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 180\\n45 30 55 20 80 20') == '4'\n\n\"\"\"\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\nprint(solution(input()))\n\n\n'''\nfrom typing import List"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\n\"\"\""
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"21 34 18 9\") == \"79\"\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\nprint(solution(\"4\\n21\\n34\\n18\\n9\"))\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\\\n21\\\\n34\\\\n18\\\\n9\") == \"79\"\n\"\"\"\n\n\"\"\"\nThe first line consist of an integer $N$, the number of steel rods she has. Then follows $N$ lines, each containing a single integer $l_ i$ representing the length of the steel rod in cm.\n\"\"\"\n\nn = int(input())\narr = [int(num) for num in input().split()]\n\nprint(max(arr) * (n - 2) + sum(arr))\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n21\\n34\\n18\\n9') == '79'\nassert solution('3\\n5\\n12') == '26'\n\"\"\"\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\n21\\n34\\n18\\n9\") == \"79\"\n"
    },
    {
        "number": 4889,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(4) == 79"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''5 3 3 4\n0 1 4''') == '2 3 0'\nassert solution('''5 1 3 4\n0 1 4''') == 'impossible'\n'''\n\n-----Solution-----\n\nThe main idea is to find the ratio of each slot for each student to see which slot can be filled with soda.\n\nInitially, the ratio is 0, meaning all of the students can always take soda from the front of the fridge.\n\nIf it's greater than 0, then we can only have a limited number of students for each slot.\n\nIf it's less than 0, then we can only take the slot with more soda.\n\nWe do this until we either reach the end of the new soda bottles, or we have a ratio of 0 for each slot.\n\nOnce we have our refill scheme, we just need to swap the soda bottles in the front of the fridge.\n\nSo basically we go through each student, starting at the end, and then go through each slot and swap the soda bottles if needed.\n\nNow all the soda bottles in the front of the fridge are evenly distributed across the slots.\n\nSo we can use a greedy algorithm to find the best refill scheme, which will maximize the probability of each student getting a cold soda.\n\nThis is a very similar problem to finding the minimum number of elements to be removed from a sorted array to make it sorted.\n\nThe following is my solution.\n\n'''\n\nfrom typing import List\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3 3 4\\n0 1 4') == '2 3 0'\n\"\"\"\n\n\"\"\"\nA easy way is to randomly refill the most often used slot. Then refill the one with the least number of other ones. \nWe only have to keep track of the number of each ones in the slots.\n\"\"\""
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\\n\") == \"2 3 0\"\n\nassert solution(\"5 3 3 4\\n2 3 4\\n\") == \"impossible\"\n\"\"\"\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 3 4\\n0 1 4') == '2 3 0'\nassert solution('6 6 6 6 6 6\\n1 2 3 4 5 6') == 'impossible'\nassert solution('5 3 3 4\\n0 1 4') == '2 3 0'"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\nassert solution(\"3 3 2 5\\n0 1 4\") == \"impossible\"\nassert solution(\"3 3 2 0\\n0 1 4\") == \"impossible\"\nassert solution(\"3 3 2 2\\n0 1 4\") == \"2 3 0\"\n\nprint(\"Successfully passed all tests\")\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\nassert solution(\"8 5 5 1\\n0 1 2 3 4\") == \"5 4 0 1 2\"\nassert solution(\"5 3 3 4\\n2 2 5\") == \"impossible\"\nassert solution(\"5 3 3 4\\n0 1 1\") == \"2 3 0\"\nassert solution(\"5 3 3 4\\n0 1 4\") == \"5 4 0\""
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 3 4\\n0 1 4') == '2 3 0'\nassert solution('5 3 3 4\\n0 2 4') == 'impossible'\nassert solution('5 3 3 4\\n0 1 4\\n0 2 4\\n0 3 4\\n0 4 4') == '3 3 2 1'\nassert solution('5 3 3 4\\n0 1 4\\n1 2 4') == '2 3 0'\nassert solution('5 3 3 4\\n0 1 4\\n1 2 4\\n1 3 4\\n1 4 4') == '2 3 1 0'\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\nassert solution(\"5 2 3 4\\n0 2 4\") == \"impossible\"\n\"\"\"\n\nfrom math import inf\nfrom collections import Counter\n"
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4890,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 3 4\\n0 1 4\") == \"2 3 0\"\n\"\"\"\n\nfrom collections import deque, namedtuple\nfrom math import inf\nimport random\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"3 3 3 3 3 0\") == \"0 0 0 0 0 0\"\nassert solution(\"7 7 7 7 7 7\") == \"0 0 0 0 0 0 0\"\nassert solution(\"1 0 0 0 0 0\") == \"1 0 0 0 0 0\"\nassert solution(\"-1 -2 -3 -4 -5 -6\") == \"-1 -1 -1 -1 -1 -1\"\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 0 0 0 0 0\") == \"0 0 0 0 0 0\"\nassert solution(\"1 0 1 1 1 1\") == \"0 0 0 0 0 0\"\nassert solution(\"0 1 1 2 2 2\") == \"1 0 0 0 0 1\"\nassert solution(\"0 0 0 1 2 2\") == \"0 0 0 1 2 2\"\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"1 1 1 1 1 1\") == \"0 0 0 0 0 0\"\n\n-----Notes-----\n- Each of the input numbers is between 0 and 10.\n\n\"\"\""
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\n\n\"\"\""
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\nassert solution(\"0 1 2 2 2 2\") == \"1 1 0 0 0 0\"\nassert solution(\"3 0 0 0 0 0\") == \"3 3 0 0 0 0\"\n\"\"\"\n\ninputs = [\n    \"0 1 2 2 2 7\",\n    \"0 1 2 2 2 2\",\n    \"3 0 0 0 0 0\"\n]\n\nfor input in inputs:\n    k = int(input.split(' ')[0])\n    q = int(input.split(' ')[1])\n    r = int(input.split(' ')[2])\n    b = int(input.split(' ')[3])\n    n = int(input.split(' ')[4])\n    p = int(input.split(' ')[5])\n\n    king = q + r + b + n - 2 * p\n    queen = 2 * q + 2 * r + 2 * b + 2 * n - 4 * p\n    rook = r + b + n - 2 * p\n    bishop = b + n - 2 * p\n    knight = n - 2 * p\n    pawn = p\n\n    print(str(king) + \" \" + str(queen) + \" \" + str(rook) + \" \" + str(bishop) + \" \" + str(knight) + \" \" + str(pawn))\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(input()) == output()\n\n\"\"\"\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\n\"\"\""
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"0 1 2 2 2 7\") == \"1 0 0 0 0 1\"\n\"\"\"\n"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\nprint(solution('0 1 2 2 2 7'))\n\n\"\"\"\n\nfrom typing import List, Any, Union"
    },
    {
        "number": 4891,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('0 1 2 2 2 7') == '1 0 0 0 0 1'\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\nassert solution(\"4\\nqwerty 0.1111\\n123456 0.8888\\nqwerty 0.1111\\nqwerty 0.1111\") == \"1.1110\"\n\"\"\"\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == '1.3334'\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == '1.3334'\nassert solution(\"1\\n123456 0.6666\") == '1.3333'\nassert solution(\"3\\n123456 0.6666\\nqwerty 0.3334\\nqwerty 0.3334\") == '2.0000'\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == '1.3334'\n\nSolution:\n    n = int(stdin.readline().rstrip())\n    p = [list(map(float, stdin.readline().rstrip().split())) for _ in range(n)]\n    p.sort(key=lambda x: x[1])\n    q = [p[i][0] for i in range(len(p))]\n    return str(sum([(1 - p[i][1]) / (p[i][1] - p[i - 1][1]) for i in range(1, n)]))\n\nMore solutions:"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n\nassert solution('2\\n123456 1.1111\\nqwerty 0.3333') == '2.0000'\n\nassert solution('3\\n123456 0.6666\\nqwerty 0.3333\\n111111 0.1111') == '3.1111'\n\nassert solution('3\\n111111 0.1111\\n123456 0.6666\\nqwerty 0.3333') == '3.1111'\n\nassert solution('4\\n111111 0.1111\\n123456 0.6666\\nqwerty 0.3333\\n111111 0.1111') == '5.5556'"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\nassert solution('3\\n1234 12.0\\n4321 42.0') == '2.0'\n\nfrom unittest.mock import patch\nfrom io import StringIO\nimport sys\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdin, stdout = sys.stdin, sys.stdout\n        sys.stdin, sys.stdout = StringIO(input), StringIO()\n        resolve()\n        sys.stdin, sys.stdout = stdin, stdout\n        self.assertEqual(\n            sys.stdout.getvalue(),\n            output\n        )\n\n    @patch('sys.stdin', StringIO('2\\n123456 0.6666\\nqwerty 0.3334\\n'))\n    def test_\u5165\u529b\u4f8b_1(self):\n        self.assertIO(\n            input(),\n            '1.3334\\n'\n        )\n\n    @patch('sys.stdin', StringIO('3\\n1234 12.0\\n4321 42.0\\n'))\n    def test_\u5165\u529b\u4f8b_2(self):\n        self.assertIO(\n            input(),\n            '2.0\\n'\n        )\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n\n\"\"\"\nimport sys\n\nN = int(sys.stdin.readline())\n\nps = []\n\nfor _ in range(N):\n    p, pr = sys.stdin.readline().split(' ')\n    p, pr = float(p), float(pr)\n    ps.append((p, pr))\n\nps.sort(key=lambda x: x[0])"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n'''\n\nimport sys"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n123456 0.6666\\nqwerty 0.3334') == '1.3334'\n\nassert solution('2\\n1234 56 0.5678\\nqwerty 0.4') == '1.4'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4892,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\n123456 0.6666\\nqwerty 0.3334\") == \"1.3334\"\n\"\"\"\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 1\\n1 2 4\") == \"1\"\n\"\"\"\nimport math\nfrom math import ceil\nfrom typing import List\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        inputs = stdin.splitlines()\n        n = int(inputs[0].split()[0])\n        p = int(inputs[0].split()[1])\n        car_dist = list(map(int, inputs[1].split()))\n\n        def get_min_dist(current_dist: List[int]):\n            next_dist = [ceil(dist / p) for dist in current_dist]\n            return min(next_dist)\n\n        return str(get_min_dist(car_dist))\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\nassert solution('5 2\\n2 6 1 7 10 3') == '5'\nassert solution('5 3\\n3 4 1 4 9') == '3'\nassert solution('4 3\\n3 3 1 5') == '1'\n\n---Problem 3---\nGiven a string s consisting of characters a, b and c of any length, determine if it is possible to put a dot between every two consecutive characters, in order to create a palindrome.\n\nFor example, given the string \"aba\", it is possible to obtain a palindrome by putting a dot between the first and second character, resulting in \"aba\", which is a palindrome.\n\nFor example, given the string \"abcdef\", it is not possible to obtain a palindrome by putting a dot between any of the characters, so the resulting string doesn't form a palindrome.\n\n-----Input-----\nA line of string with an arbitrary length consisting of characters a, b and c of any length.\n\n-----Output-----\nA line containing the boolean value \"True\" if it is possible to obtain a palindrome with a dot between every consecutive characters, and \"False\" otherwise.\n\n-----Examples-----\nSample Input:\nabacaba\nSample Output:\nTrue\n\nSample Input:\ncacac\nSample Output:\nFalse"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 4') == '1'\nassert solution('2 6 3 1') == '2'\nassert solution('4 4 2 1') == '1'\nassert solution('2 2 2 1') == '1'\nassert solution('4 4 2') == '2'\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n1 2 4\") == \"1\"\n\"\"\""
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 1\\n1 2 4\") == \"1\"\n\n\n\nimport math"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 1\\n1 2 4\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3 1\\n1 2 4') == '1'\n\nfrom math import inf\n"
    },
    {
        "number": 4893,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 1\\n1 2 4') == 1\n\"\"\"\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:                                                               \\nF: -------------------------------------*--------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:                                                  *        \\ng: -----------------------------------------------*----------\\nf:                                                           \\ne: ----------------------------------------------------------\\nd:                                                           \\nc:                                                           \\nb:                                                           \\na: ----------------------------------------------------------'\n\nassert solution('1\\na') == 'G:           \\nF: ----------------------------------------------------------\\nE:           \\nD: ----------------------------------------------------------\\nC:           \\nB: ----------------------------------------------------------\\nA:           \\ng: -----------------------------------------------*----------\\nf:                                                           \\ne: ----------------------------------------------------------\\nd:                                                           \\nc:                                                           \\nb:                                                           \\na: ----------------------------------------------------------'\n\nassert solution('2\\nA A') == 'G:           \\nF: ----------------------------------------------------------\\nE:           \\nD: ----------------------------------------------------------\\nC:           \\nB: ----------------------------------------------------------\\nA: * *     *      * *     **    *\\ng: -----------------------------------------------*----------\\nf:                                                           \\ne: ----------------------------------------------------------\\nd:                                                           \\nc:                                                           \\nb:                                                           \\na: ----------------------------------------------------------'\n\nassert solution('1\\nc') == 'G:           \\nF: ----------------------------------------------------------\\nE:           \\nD: ----------------------------------------------------------\\nC: * *     *      * *     **    *\\ng: -----------------------------------------------*----------\\nf:                                                           \\ne: ----------------------------------------------------------\\nd:                                                           \\nc:                                                           \\nb:                                                           \\na: ----------------------------------------------------------'\n\nassert solution('1\\nA A B B B') == 'G:           \\nF: ----------------------------------------------------------\\nE:           \\nD: ----------------------------------------------------------\\nC:           \\nB: * *     *      * *     **    *\\nA: * *     *      * *     **    *\\ng: -----------------------------------------------*----------\\nf:                                                           \\ne: ----------------------------------------------------------\\nd:                                                           \\nc:                                                           \\nb:                                                           \\na: ----------------------------------------------------------'"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\"\n\nassert solution(\"9\\nA C G E D B A B C C\") == \"\"\"G:\nF:-------------------------------------*\nE: *        *\nD: ***********************\nC: *\nB: ***********************\nA: ***********************\ng: ***********************\nf: ***********************\ne: ***********************\nd: ***********************\nc: ***********************\nb: ***********************\na: ***********************\"\"\"\n\n\"\"\"\n7. Write a program that takes a list of digits and converts it into a list of letters, similar to the previous program.\n\nInput:\nA list of digits, each of which is in the range 0 to 9, inclusive.\n\nOutput:\nA list of letters corresponding to the input digits.\n\nExample:\n\nInput:\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nOutput:\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']\n\"\"\"\n\"\"\"\n8. Write a program that takes a list of numbers and returns the sum of all even numbers in the list.\n\nInput:\nA list of numbers.\n\nOutput:\nThe sum of all even numbers.\n\nExample:\n\nInput:\n[3, 7, 6, 1, 2, 4]\n\nOutput:\n10\n\"\"\"\n\"\"\"\n9. Write a program that returns the index of the first occurrence of a given element in a given list.\n\nInput:\nA list of numbers.\n\nOutput:\nThe index of the first occurrence of the given element in the list.\n\nExample:\n\nInput:\n[2, 1, 2, 3, 2, 2, 1, 2]\n2\n\nOutput:\n2\n\"\"\"\n\"\"\"\n10. Write a program that takes a list of numbers and returns a list that contains only the even numbers from the original list.\n\nInput:\nA list of numbers.\n\nOutput:\nA list of even numbers.\n\nExample:\n\nInput:\n[3, 7, 6, 1, 2, 4]\n\nOutput:\n[6, 2, 4]\n\"\"\"\n\"\"\"\n11. Write a program that takes a list of numbers and returns the average value of all even numbers in the list.\n\nInput:\nA list of numbers.\n\nOutput:\nThe average value of all even numbers in the list.\n\nExample:\n\nInput:\n[3, 7, 6, 1, 2, 4]\n\nOutput:\n6.5\n\"\"\"\n\"\"\"\n12. Write a program that takes a list of numbers and returns a list that contains only the odd numbers from the original list.\n\nInput:\nA list of numbers.\n\nOutput:\nA list of odd numbers.\n\nExample:\n\nInput:\n[3, 7, 6, 1, 2, 4]\n\nOutput:\n[1, 3, 5]\n\"\"\"\n\"\"\"\n13. Write a program that takes a list of numbers and returns a list that contains only the negative numbers from the original list.\n\nInput:\nA list of numbers.\n\nOutput:\nA list of negative numbers.\n\nExample:\n\nInput:\n[-3, -7, -6, -1, -2, -4]\n\nOutput:\n[-3, -7, -6, -1, -2, -4]\n\"\"\"\n\"\"\"\n14. Write a program that takes a list of numbers and returns a list that contains all the even numbers from the original list multiplied by 2.\n\nInput:\nA list of numbers.\n\nOutput:\nA list of even numbers.\n\nExample:\n\nInput:\n[3, 7, 6, 1, 2, 4]\n\nOutput:\n[12, 14, 16, 2, 4]\n\"\"\"\n\"\"\"\n15. Write a program that takes a list of numbers and returns a list that contains the original list concatenated with the original list reversed.\n\nInput:\nA list of numbers.\n\nOutput:\nA list of the original list concatenated with the original list reversed.\n\nExample:\n\nInput:\n[3, 7, 6, 1, 2, 4]\n\nOutput:\n[3, 7, 6, 1, 2, 4, 4, 3, 7, 6, 1, 2, 4]\n\"\"\"\n\"\"\"\n16. Write a program that takes a list of numbers of the same size, and returns the difference between the largest and smallest values in the list.\n\nInput:\nA list of numbers.\n\nOutput:\nThe difference between the largest and smallest"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\n\"\"\"\n\n\"\"\"\n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043d\u0435\u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u0430\u0440\u044b \u043d\u043e\u043c\u0435\u0440\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u043d\u043e\u043c\u0435\u0440\u0430 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0432\u043e\u0437\u0432\u0435\u0441\u0442\u0438 \u0435\u0435 \u0432 \u043a\u0443\u0431, \u0443\u043c\u043d\u043e\u0436\u0438\u0432 \u043d\u0430 \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0440\u044b, \u0437\u0430\u0442\u0435\u043c \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0447\u0438\u0441\u043b\u043e \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0440\u0430\u0432\u0435\u043d\u0441\u0442\u0432\u043e \u0441\u0443\u043c\u043c\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. \u0412\u0441\u0435\u0433\u043e \u0442\u0440\u0438 \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443, \u043e\u0442\u0441\u0442\u0443\u043f\u044b \u043c\u0435\u0436\u0434\u0443 \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438 \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u0448\u0430\u0433\u043e\u043c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0430 \u043d\u0430 \u043d\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $1 \\le n \\le 100$, \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b $n$ \u043d\u043e\u043c\u0435\u0440\u0430 \u0441\u0442\u0440\u043e\u043a \u0438 \u043d\u043e\u043c\u0435\u0440 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u043f\u0430\u0440\u044b. \u0412\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0437\u0430\u0434\u0430\u043d\u044b \u043e\u0442 1 \u0434\u043e $10^3$.\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0442\u0440\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0444\u043e\u0440\u043c\u0430\u0442\u0443. \u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0432 \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u043e\u0434 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438, \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 - \u0432 \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u043e\u0434 \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438, \u0442\u0440\u0435\u0442\u044c\u044f \u0441\u0442\u0440\u043e\u043a\u0430 - \u0432 \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u043e\u0434 \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 1. \u0421\u0442\u0440\u043e\u043a\u0438 \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 2. \u0421\u0442\u0440\u043e\u043a\u0438 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0445 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0445 \u0431\u0443\u043a\u0432 \u043e\u0442 a \u0434\u043e g.\n\nSample Input 1:\n3\n1 2\nSample Output 1:\na\nb\nc\na\nb\nc\na\nb\nc\n\nSample Input 2:\n4\n1 1\nSample Output 2:\n1\n1\n1\n1\n\"\"\"\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:                                                   \\nF: -------------------------------------*--------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:                                                  *        \\ng: -----------------------------------------------*----------\\nf:                                                   \\ne: ----------------------------------------------------------\\nd:                                                   \\nc:                                                   \\nb:                                                   \\na: ----------------------------------------------------------'\n\"\"\"\nimport re\n\nfrom _collections import defaultdict\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == 'G:\\nF: --*--*-*--*-\\nE: **  **    **\\nD: ---**---**-\\nC: **  **     **\\nB: --**---**---\\nA:\\nG: --*--*-*--*-\\nF: **  **    **\\nE: **  **    **\\nD: ---**---**-\\nC: **  **     **\\nB: --**---**---\\nA: **  **    **\\ng: --*--*-*--*-\\nf: **  **    **\\ne: ---**---**-\\nd: **  **    **\\nc: **  **    **\\nb: **  **    **\\na: ---**---**-\\n'\n-----\n3.28\n-----\nIt seems like we\u2019ve run into the same problem we saw in the previous problem. The solution is similar to the previous problem, but it is not as straightforward. As you can see in the sample output, we have different patterns for the treble clef and the bass clef. The top staff has the treble clef, which has notes in the staff with the highest pitches. The bottom staff has the bass clef, which has notes in the staff with the lowest pitches.\n\nIn the previous problem, the top staff was left as is, and the bottom staff was mirrored. Instead, the treble clef and bass clef had to be swapped. This made the code more complicated. The next step is to determine which notes are on the bottom staff and which notes are on the top staff.\n\n-----Input-----\nThe input for this problem consists of two lines. The first line contains an integer $1 \\le n \\le 100$ indicating the number of notes in the song. The second line contains $n$ notes. Each note consists of two parts: the pitch and the duration. The pitch is a letter a through g or A through G. Lowercase letters indicate the octave below uppercase letters, and we consider c to represent so-called \u2018middle c\u2019. The duration, which is optional, is a positive integer indicating a multiplier of the length of the default note. (If you are musical you\u2019ll notice we\u2019ve made many simplifying assumptions, such as leaving out many octaves, sharps, flats, rests, time signatures, etc.)\n\n-----Output-----\nFor each song, print a text-based representation on two staffs. The two staves should have the same format, as described in the example above. You should print the treble clef on the top staff and the bass clef on the bottom staff. The staffs should be only as long as necessary to complete the song.\n\n-----Examples-----\nSample Input:\n27\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\nSample Output:\nG:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:\nG:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:\nG:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA: * *     *      * *     **    * *           *         ** **\ng:\nf: ----------------------------------------------------------\ne: ----------------------------------------------------------\nd:                                                   \nc:                                                   \nb:                                                   \na: ----------------------------------------------------------\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == 'G:                                                   \\nF: -------------------------------------*--------------------\\nE:       *   *          *             *   *                  \\nD: ----*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:                                                  *        \\ng: -----------------------------------------------*----------\\nf:                                                               \\ne: ----------------------------------------------------------\\nd:                                                               \\nc:                                                               \\nb:                                                               \\na: ----------------------------------------------------------'\n"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2') == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\"\n\n\"\"\"\nNotes:\n    1. Input is stripped.\n    2. Each input line is stripped of all whitespace.\n    3. Then we convert to list.\n    4. Then we iterate through the list converting each element to a string.\n    5. Then we convert to a list of lists.\n    6. Then we iterate through the list of lists to remove all whitespace.\n    7. Then we iterate through the list of lists to convert the strings to integers.\n    8. We create a list of integers.\n    9. We iterate through the list and make the corresponding element of the list the length of the previous element.\n    10. Then we create a list of lists of ints.\n    11. We iterate through the list of lists to convert the ints to their corresponding element of the list.\n    12. We create an empty list.\n    13. We iterate through the list of lists to go through each element of the list.\n    14. We create an empty list for the second time.\n    15. We iterate through the list and go through each element of the list.\n    16. We create an empty list for the third time.\n    17. We iterate through the list and go through each element of the list.\n    18. We create an empty list for the fourth time.\n    19. We iterate through the list and go through each element of the list.\n    20. We create an empty list for the fifth time.\n    21. We iterate through the list and go through each element of the list.\n    22. We create an empty list for the sixth time.\n    23. We iterate through the list and go through each element of the list.\n    24. We create an empty list for the seventh time.\n    25. We iterate through the list and go through each element of the list.\n    26. We create an empty list for the eighth time.\n    27. We iterate through the list and go through each element of the list.\n    28. We create an empty list for the ninth time.\n    29. We iterate through the list and go through each element of the list.\n    30. We create an empty list for the tenth time.\n    31. We iterate through the list and go through each element of the list.\n    32. We create an empty list for the eleventh time.\n    33. We iterate through the list and go through each element of the list.\n    34. We create an empty list for the twelfth time.\n    35. We iterate through the list and go through each element of the list.\n    36. We create an empty list for the thirteenth time.\n    37. We iterate through the list and go through each element of the list.\n    38. We create an empty list for the fourteen time.\n    39. We iterate through the list and go through each element of the list.\n    40. We create an empty list for the fifteenth time.\n    41. We iterate through the list and go through each element of the list.\n    42. We create an empty list for the sixteen time.\n    43. We iterate through the list and go through each element of the list.\n    44. We create an empty list for the seventeen time.\n    45. We iterate through the list and go through each element of the list.\n    46. We create an empty list for the eighteen time.\n    47. We iterate through the list and go through each element of the list.\n    48. We create an empty list for the nineteen time.\n    49. We iterate through the list and go through each element of the list.\n    50. We create an empty list for the twenty time.\n    51. We iterate through the list and go through each element of the list.\n    52. We create an empty list for the twenty one time.\n    53. We iterate through the list and go through each element of the list.\n    54. We create an empty list for the twenty two time.\n    55. We iterate through the list and go through each element of the list.\n    56. We create an empty list for the twenty three time.\n    57. We iterate through the list and go through each element of the list.\n    58. We create an empty list for the twenty four time.\n    59. We iterate through the list and go through each element of the list.\n    60. We create an empty list for the twenty five time.\n    61. We iterate through the list and go through each element of the list.\n    62. We create an empty list for the twenty six time.\n    63"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\", f\"failed at: {stdin}\"\n\n-----Problem-----\nWhen working with large data, it is a good idea to avoid writing the entire data into memory at once. Instead, we should \u201cpage\u201d the data into a buffer, page_size. When a function reads a chunk, it should either read page_size or page_size - 1 bytes.\n\nWrite a program that pages the input into chunks of size page_size (for this problem, page_size is always a power of 2). The program should print the current chunk index and the chunk. At the end of the input, print the total number of chunks.\n\n-----Input-----\nThe input for your program consists of a file containing lines of text, one per line. The first line of the input file contains two integers, n and page_size (n is the number of lines in the file and page_size is the size of each page in bytes). After that, there is one line per line in the file.\n\n-----Output-----\nThe program should print the chunk index and the chunk. At the end of the input, it should also print the total number of chunks. Each chunk is printed in the form:\n\nChunk: chunk_index\nchunk\n\n-----Examples-----\nSample Input:\n3 13\nHello, world!\nThis is a chunk\npage_size is 13\nSample Output:\nChunk: 0\nHello, world!\nThis is a chunk\npage_size is 13\nChunk: 1\nis a chunk\npage_size is 13\nHello,\nworld!\nThis is a chunk\npage_size is 13\nThis is a chunk\npage_size is 13\nHello, world!\nThis is a chunk\npage_size is 13\nThis is a chunk\npage_size is 13\nHello,\nworld!\nThis is a chunk\npage_size is 13\nThis is a chunk\npage_size is 13\nHello,\nworld!\nThis is a chunk\npage_size is 13\nThis is a chunk\npage_size is 13\nHello, world!\nThis is a chunk\npage_size is 13\nThis is a chunk\npage_size is 13\nHello,\nworld!\nThis is a chunk\npage_size is 13\nThis is a chunk\npage_size is 13\nHello, world!\nThis is a chunk\npage_size is 13\nThis is a chunk\npage_size is 13\nHello, world!\nThis is a chunk\npage_size is 13\nThis is a chunk\npage_size is 13\nHello,\nworld!\nThis is a chunk\npage_size is 13\nThis is a chunk\npage_size is 13\nHello,\nworld!\nThis is a chunk\npage_size is 13\nThis is a chunk\npage_size is 13\nHello,\nworld!\nThis is a chunk\npage_size is 13\nThis is a chunk\npage_size is 13\nHello,\nworld!\nThis is a chunk\npage_size is 13\nThis is a chunk\npage_size is 13\nHello,\nworld!\nThis is a chunk\npage_size is 13\nThis is a chunk\npage_size is 13\nHello,\nworld!\nThis is a chunk\npage_size is 13\nThis is a chunk\npage_size is 13\nHello,\nworld!\nThis is a chunk\npage_size is 13\nThis is a chunk\npage_size is 13\nHello,\nworld!\nThis is a chunk\npage_size is 13\nThis is a chunk\npage_size is 13\nHello,\nworld!\nThis is a chunk\npage_size is 13\nThis is a chunk\npage_size is 13\nHello,\nworld!\nThis is a chunk\npage_size is 13\nThis is a chunk\npage_size is 13\nHello,\nworld!\nThis is a chunk\npage_size is 13\nThis is a chunk\npage_size is 13\nHello,\nworld!\nThis is a chunk\npage_size is 13\nThis is a chunk\npage_size is 13\nHello,\nworld!\nThis is a chunk\npage_size is 13\nThis is a chunk\npage_size is 13\nHello,\nworld!\nThis is a chunk\npage_size is 13\nThis is a chunk\npage_size is 13\nHello,\nworld!\nThis is a chunk\npage_size is 13\nThis is a chunk\npage_size is 13\nHello,\nworld!\nThis is a chunk\npage_size is 13\nThis is a chunk\npage_size is 13\nHello,\nworld!\nThis is a chunk\npage_size is 13\nThis is a chunk\npage_size is 13\nHello,\nworld!"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \\\n\"G:\\nF: ---------------------*------------**----------------\\nE:       *   *          *             *   *                  \\nD: --*-------**-----*-------------*-------*----------------\\nC: * *     *      * *     **    * *           *         ** **\\nB: --------------------------**-----------------*-----*------\\nA:\\ng: -------------------------------*----------\\nf:                                    \\ne: ----------------------------------------------------------\\nd:                                    \\nc:                                    \\nb:                                    \\na: ----------------------------------------------------------\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4894,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"27\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\"\n\nassert solution(\"22\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\"\n\nassert solution(\"10\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\"\n\nassert solution(\"19\\nC C D E C E D2 C C D E C2 B2 C C D E F E D C B g A B C2 C2\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\"\n\nassert solution(\"4\\nA C G E D C B A g C C D B A A G C A g C\") == \"\"\"G:\nF: -------------------------------------*--------------------\nE:       *   *          *             *   *                  \nD: ----*-------**-----*-------------*-------*----------------\nC: * *     *      * *     **    * *           *         ** **\nB: --------------------------**-----------------*-----*------\nA:                                                  *        \ng: -----------------------------------------------*----------\nf:                                                           \ne: ----------------------------------------------------------\nd:                                                           \nc:                                                           \nb:                                                           \na: ----------------------------------------------------------\"\"\""
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\n\nassert solution('5\\n2 1 2 3 2') == 'possible'\n\nassert solution('3\\n1 1 1') == 'possible'\n\nassert solution('3\\n1 1 4') == 'impossible'\n\nassert solution('3\\n5 1 5 2') == 'impossible'"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"3 1 1\"\n) == \"possible\"\nassert solution(\n    \"3 2 1\"\n) == \"impossible\""
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\nassert solution('3\\n1 2 1') == 'possible'\nassert solution('3\\n1 1 2') == 'impossible'\nassert solution('3\\n2 1 1') == 'possible'\nassert solution('3\\n1 3 1') == 'possible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"possible\"\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1 1\") == \"possible\"\nassert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"6\\n1 1 1 1 1 1\") == \"possible\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 2 2\\n1 1 1') == 'possible'\nassert solution('2 2 2\\n2 2 1') == 'possible'\nassert solution('2 2 2\\n2 1 1') == 'possible'\nassert solution('2 2 2\\n2 2 1') == 'possible'\nassert solution('2 2 2\\n1 1 1') == 'possible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 1 5\") == \"possible\"\nassert solution(\"3 1 5\") == \"possible\"\nassert solution(\"4 1 5\") == \"impossible\"\nassert solution(\"5 1 5\") == \"impossible\"\n\n\"\"\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n1 1 1 1') == 'possible'\nassert solution('3\\n1 1 1') == 'possible'\nassert solution('4\\n1 1 1 0') == 'possible'\nassert solution('3\\n1 1 1') == 'possible'\nassert solution('5\\n1 1 1 1 1') == 'possible'\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n1 1 1\") == \"possible\"\nassert solution(\"5\\n1 1 1 1 1\") == \"possible\"\nassert solution(\"7\\n1 1 1 1 1 1 1\") == \"possible\"\nassert solution(\"8\\n1 1 1 1 1 1 1 1\") == \"possible\"\nassert solution(\"9\\n1 1 1 1 1 1 1 1 1\") == \"possible\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 1\") == \"possible\"\nassert solution(\"3 0 1\") == \"impossible\"\nassert solution(\"3 0 0\") == \"impossible\"\nassert solution(\"1 1 1\") == \"possible\"\nassert solution(\"1 0 1\") == \"impossible\"\n"
    },
    {
        "number": 4895,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 1 1') == 'possible'\nassert solution('3\\n1 1 2') == 'impossible'\n\n----Input:----\n3\n1 1 1\n----Output:----\npossible\n\n----Input:----\n4\n1 1 1\n----Output:----\nimpossible\n\n----Input:----\n2\n1 1 1\n2 1 1\n----Output:----\npossible\n\n----Input:----\n2\n1 1 1\n2 1 1\n----Output:----\nimpossible\n\n----Input:----\n6\n1 1 1\n2 2 1\n3 1 1\n4 1 1\n5 1 1\n6 1 1\n----Output:----\npossible\n\n----Input:----\n7\n1 1 1\n2 2 1\n3 1 1\n4 1 1\n5 1 1\n6 1 1\n7 1 1\n----Output:----\nimpossible\n\n----Input:----\n8\n1 1 1\n2 2 1\n3 1 1\n4 1 1\n5 1 1\n6 1 1\n7 1 1\n8 1 1\n----Output:----\npossible\n\n----Input:----\n3\n2 2 1\n1 1 1\n3 1 1\n----Output:----\nimpossible\n\n----Input:----\n4\n1 1 1\n2 2 1\n1 1 1\n3 1 1\n----Output:----\npossible\n\n----Input:----\n5\n1 1 1\n2 2 1\n1 1 1\n2 2 1\n3 1 1\n----Output:----\nimpossible\n\n----Input:----\n6\n1 1 1\n2 2 1\n1 1 1\n3 1 1\n2 1 1\n4 1 1\n5 1 1\n----Output:----\nimpossible\n\n----Input:----\n7\n1 1 1\n2 2 1\n1 1 1\n2 2 1\n3 1 1\n4 1 1\n5 1 1\n6 1 1\n----Output:----\nimpossible\n\n----Input:----\n8\n1 1 1\n2 2 1\n1 1 1\n2 2 1\n3 1 1\n4 1 1\n5 1 1\n6 1 1\n7 1 1\n8 1 1\n----Output:----\nimpossible\n\n----Input:----\n9\n1 1 1\n2 2 1\n1 1 1\n2 2 1\n3 1 1\n4 1 1\n5 1 1\n6 1 1\n7 1 1\n8 1 1\n9 1 1\n----Output:----\nimpossible\n\n----Input:----\n10\n1 1 1\n2 2 1\n1 1 1\n2 2 1\n3 1 1\n4 1 1\n5 1 1\n6 1 1\n7 1 1\n8 1 1\n9 1 1\n10 1 1\n----Output:----\nimpossible\n\n----Input:----\n11\n1 1 1\n2 2 1\n1 1 1\n2 2 1\n3 1 1\n4 1 1\n5 1 1\n6 1 1\n7 1 1\n8 1 1\n9 1 1\n10 1 1\n11 1 1\n----Output:----\nimpossible\n\n----Input:----\n12\n1 1 1\n2 2 1\n1 1 1\n2 2 1\n3 1 1\n4 1 1\n5 1 1\n6 1 1\n7 1 1\n8 1 1\n9 1 1\n10 1 1\n11 1 1\n12 1 1\n----Output:----\nimpossible\n\n----Input:----\n13\n1 1 1\n2 2 1\n1 1 1\n2 2 1\n3 1 1\n4 1 1\n5 1 1\n6 1 1\n7 1 1\n8 1 1\n9 1 1\n10 1 1\n11 1 1\n12 1 1\n13 1 1\n----Output:----\nimpossible\n\n----Input:----\n14\n1 1 1\n2 2 1\n1 1 1\n2 2 1\n3 1 1\n4 1 1\n5 1 1\n6 1 1\n7 1 1\n8 1 1\n9 1 1\n10 1 1\n11 1 1\n12 1 1\n13 1 1\n14 1 1\n----Output:----\nimpossible\n\n----Input:----\n15\n1 1 1\n2 2 1\n1 1 1\n2 2 1\n3 1 1\n4 1 1\n5 1 1\n6 1 1\n7 1 1\n8 1 1\n9 1 1\n10 1 1\n11 1 1\n12 1 1\n13 1 1\n14 1 1\n15 1 1\n----Output:----\nimpossible\n\n----Input:----\n16\n1 1 1\n2 2 1\n1 1 1\n2 2 1\n3 1 1\n4 1 1\n5 1 1\n6 1 1\n7 1 1\n8 1 1\n9 1 1\n10 1 1\n11 1 1\n12 1 1\n13 1 1\n14 1 1\n15 1 1\n16 1 1\n----Output:----\nimpossible\n\n----Input:----\n17\n1 1 1\n2 2 1\n1 1 1\n2 2 1\n3 1 1\n4 1 1\n5 1 1\n6 1 1\n7 1 1\n8 1 1\n9 1 1\n10 1 1\n11 1 1\n12 1 1\n13 1 1\n14 1 1\n15 1 1\n16 1 1\n17 1 1\n----Output:----\nimpossible\n\n----Input:----\n18\n1 1 1\n2 2 1\n1 1 1\n2 2 1\n3 1 1\n4 1 1\n5 1 1\n6 1 1\n7 1 1\n8 1 1\n9 1 1\n10 1 1\n11 1 1\n12 1 1\n13 1 1\n14 1 1\n15 1 1\n16 1 1\n17 1 1\n18 1 1\n----Output:----\nimpossible\n\n----Input:----\n19\n1 1 1\n2 2 1\n1 1 1\n2 2 1\n3 1 1\n4 1 1\n5 1 1\n6 1 1\n7 1 1\n8 1 1\n9 1 1\n10 1 1\n11 1 1\n12 1 1\n13 1 1\n14 1 1\n15 1 1\n16 1 1\n17 1 1\n18 1 1\n19 1 1\n----Output:----\nimpossible\n\n----Input:----\n20\n1 1 1\n2 2 1\n1 1 1\n2 2 1\n3 1 1\n4 1 1\n5 1 1\n6 1 1\n7 1 1\n8 1 1\n9 1 1\n10 1 1\n11 1 1\n12 1 1\n13 1 1\n14 1 1\n15 1 1\n16 1 1\n17 1 1\n18 1 1\n19 1 1\n20 1 1\n----Output:----\nimpossible\n\n----Input:----\n21\n1 1 1\n2 2 1\n1 1 1\n2 2 1\n3 1 1\n4 1 1\n5 1 1\n6 1 1\n7 1 1\n8 1 1\n9 1 1\n10 1 1\n11 1 1\n12 1 1\n13 1 1\n14 1 1\n15 1 1\n16 1 1\n17 1 1\n18 1 1\n19 1 1\n20 1 1\n21 1 1\n----Output:----\nimpossible\n\n----Input:----\n22\n1 1 1\n2 2 1\n1 1 1\n2 2 1\n3 1 1\n4 1 1\n5 1 1\n6 1 1\n7 1 1\n8 1 1\n9 1 1\n10 1 1\n11 1 1\n12 1 1\n13 1 1\n14"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\n4 3 3 2 1 2 2 1 1 3\") == 3\nassert solution(\"10\\n1 1 2 2 3 3 4 4 5 5 6\") == 0\n\"\"\""
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n'''\n10\n4 3 3 2 1 2 2 1 1 3\n'''\n) == 3\n\nassert solution(\n'''\n1\n1\n'''\n) == 0\n\nassert solution(\n'''\n5\n1 2 3 4 5\n'''\n) == 1\n\nassert solution(\n'''\n7\n2 3 2 1 3 1 3\n'''\n) == 2\n\nassert solution(\n'''\n12\n1 1 1 1 1 1 1 1 1\n'''\n) == 1"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4 3 3 2 1 2 2 1 1 3') == 3\n\n\"\"\""
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 3 3 2 1 2 2 1 1 3') == 3\n\"\"\""
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4 3 3 2 1 2 2 1 1 3') == 3\n\"\"\""
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(sample_input_1)) == str(sample_output_1)\n\nprint(solution(str(stdin)))\n\n\"\"\"\n\nfrom sys import stdin\n\nstdin = stdin.read()\nstdin = [int(x) for x in stdin.split()]\n\nn = stdin[0]\nbricks = stdin[1:]\n\nm = max(bricks)\nbricks = [x for x in bricks if x <= m]\n\ncount = 0\n\nfor i in range(n):\n    count += len([x for x in bricks if x <= i + 1])\n\nprint(count)\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4 3 3 2 1 2 2 1 1 3') == 3\nassert solution('4 3 3 2 1 2 2 1 1 3') == 3\nassert solution('4 3 3 2 1 2 2 1 1 3') == 3\nassert solution('4 3 3 2 1 2 2 1 1 3') == 3\nassert solution('4 3 3 2 1 2 2 1 1 3') == 3\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 3 3 2 1 2 2 1 1 3') == 3\n\"\"\"\n\nimport sys\n\ninput_list = list(map(int, input().split()))\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\\\n4 3 3 2 1 2 2 1 1 3\") == 3\n\n\"\"\"\n\nfrom typing import List\n\nN = int(stdin.readline())\nbricks = list(map(int, stdin.readline().split()))\n\ncount = 0\nstack = []\n\nfor b in bricks:\n    while len(stack)!= 0 and stack[-1] <= b:\n        stack.pop()\n    if len(stack) == 0:\n        count += 1\n    stack.append(b)\nprint(count)\n"
    },
    {
        "number": 4896,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 3 3 2 1 2 2 1 1 3') == 3\nassert solution('6 4 1 2 1 2 1 3') == 3\nassert solution('1 2 2 1 1 1 1 2 2 1 1 1 1 2 2 2 1 1 2 2') == 3\nassert solution('4 3 3 2 2 2 1 1 1 1 3') == 2\n\"\"\"\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(a) == b\nprint(solution(a))\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('\\n') == '\\n'\nassert solution('\\n\\n') == '\\n'\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\nJAMES 9.88 8.95\\nROBERT 8.65 7.80\\nWILLIAM 8.36 6.90\\nDAVID 8.06 6.00\") == \"DAVID\"\nassert solution(\"4\\nTHOMAS 9.72 8.61\\nDANIEL 9.64 7.68\\nCALVIN 9.88 8.35\") == \"CALVIN\"\nassert solution(\"4\\nBRIAN 8.84 7.99\\nBOB 8.90 7.66\\nDAN 8.69 7.90\") == \"BOB\"\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1.1\\n1.2') == '1.1'\nassert solution('3\\n1.1\\n1.2\\n1.3') == '1.2'\nassert solution('4\\n1.1\\n1.2\\n1.3\\n1.4') == '1.3'\nassert solution('5\\n1.1\\n1.2\\n1.3\\n1.4\\n1.5') == '1.4'\n\"\"\"\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('\\n'.join([\n    '6',\n    'ASHMEADE 9.90 8.85',\n    'BLAKE 9.69 8.72',\n    'BOLT 9.58 8.43',\n    'CARTER 9.78 8.93',\n    'FRATER 9.88 8.92',\n    'POWELL 9.72 8.61',\n])) == '35.54\\nCARTER\\nBOLT\\nPOWELL\\nBLAKE'\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.54\"\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61') == '35.54'\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\nASHMEADE 9.90 8.85\\nBLAKE 9.69 8.72\\nBOLT 9.58 8.43\\nCARTER 9.78 8.93\\nFRATER 9.88 8.92\\nPOWELL 9.72 8.61\") == \"35.54\"\n"
    },
    {
        "number": 4897,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\\nA 9.90 10.85\\nB 9.69 10.72\\n\") == \"10.01\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"3\\n1 2\\n2 4\") == \"2\"\nassert solution(\"3\\n1 2\\n2 4\\n5 6\") == \"2\"\nassert solution(\"5\\n1 2\\n2 4\\n5 6\\n7 8\\n9 10\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\\n1 2\\n2 4\\n5 6\") == 2"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 2\\n2 4\\n5 6\\n\") == \"2\"\n\n---------------------"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''3\n1 2\n2 4\n5 6''') == 2\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n3 4\\n4 5') == 2\nassert solution('2 5\\n3 4\\n4 5') == 1\nassert solution('1 1\\n1 1') == 0"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n1 2\\n2 4\\n5 6\") == 2\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 2\\n2 4\") == \"2\"\nassert solution(\"3\\n1 2\\n2 4\") == \"2\"\nassert solution(\"3\\n1 2\\n2 4\") == \"2\"\n\n\"\"\"\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 2\") == \"2\"\nassert solution(\"2\\n1 2\\n5 6\") == \"2\"\nassert solution(\"2\\n1 2\\n5 6\\n2 4\") == \"2\"\nassert solution(\"2\\n1 2\\n5 6\\n2 4\\n3 6\") == \"1\"\nassert solution(\"3\\n1 2\\n5 6\\n2 4\\n3 6\\n4 8\") == \"0\"\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 2\\n2 4\\n5 6\\n') == 2\n\"\"\"\n"
    },
    {
        "number": 4898,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2\\n2 3\\n4 5') == '1'\nassert solution('6\\n1 2\\n2 3\\n4 5\\n6 7') == '3'\nassert solution('2\\n4 5\\n5 6') == '1'\n\"\"\"\n\nfrom collections import namedtuple\n\nimport sys\n\nassert len(sys.argv) == 2\n\nTEMPERATURE_RANGE = (1, 2 * 10 ** 6)\nMINION = namedtuple('MINION', ['low', 'high'])\n\nwith open(sys.argv[1]) as f:\n    for line in f:\n        range_ = [int(x) for x in line.strip().split()]\n        MINIONS.append(MINION(range_[0], range_[1]))\n\nmin_rooms = 1\nmax_rooms = 10 ** 6\n\nwhile min_rooms < max_rooms:\n    mid_rooms = (min_rooms + max_rooms) // 2\n    if check_for_minions(MINIONS, mid_rooms):\n        min_rooms = mid_rooms + 1\n    else:\n        max_rooms = mid_rooms - 1\n\nprint(min_rooms)\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"hey\") == \"heey\"\n\"\"\""
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"hey\") == \"heey\"\n\n\"\"\""
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('hey') == 'heey'\nassert solution('heyyy') == 'heehee'\nassert solution('h' * 1000) == 'heeeeeeeeeeeeeeeeeeeeee'\nassert solution('h' * 1001) == 'heeeeeeeeeeeeeeeeeeeeeeeeeee'\nassert solution('h' * 1002) == 'heeeeeeeeeeeeeeeeeeeeeeeeeeee'\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('he') == 'hee'\nassert solution('hee') == 'heee'\nassert solution('hey') == 'heey'\nassert solution('heyhey') == 'heeeee'\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('hey') == 'heey'\nassert solution('hHey') == 'heeey'\nassert solution('heeey') == 'heeheey'\nassert solution('hHeYY') == 'heeeeeey'\nassert solution('HEy') == 'heey'\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''hey''') == 'heey'\nassert solution('''heey''') == 'heehe'\nassert solution('''hell''') == 'helle'\nassert solution('''y''') == 'ye'\nassert solution('''yye''') == 'ye'\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('hey') == 'heey'\nassert solution('Bye') == 'Byy'\nassert solution('Later') == 'Lyla'\nassert solution('I love you') == 'I yeeyy'\nprint(solution('I love you'))\nprint(solution('Bye'))\nprint(solution('Later'))\nprint(solution('I love you'))\n'''"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"he\") == \"hee\"\nassert solution(\"hey\") == \"heey\"\nassert solution(\"hello\") == \"hheelllloo\"\nassert solution(\"hihi\") == \"hheehiihii\"\nassert solution(\"hi\") == \"hhee\"\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"hey\") == \"hee\"\nassert solution(\"hi\") == \"hii\"\nassert solution(\"i\") == \"eee\"\nassert solution(\"bye\") == \"Bee\"\nassert solution(\"Later!\") == \"Latee!\"\n"
    },
    {
        "number": 4899,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('hey') == 'heey'\nassert solution('hi') == 'hee'\nassert solution('hello') == 'hee'\nassert solution('what\\'s up') == 'hee'\nassert solution('bye') == 'eey'\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"\"\"4\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0\"\"\") == \"\"\"1 2\n1 3\n1 4\"\"\"\nprint(solution(\"\"\"4\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0\"\"\"), \"\"\"1 2\n1 3\n1 4\"\"\")"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''4\n0 1 1 2\n1 0 2 3\n1 2 0 3\n2 3 3 0''') == '1 2\\n1 3\\n1 4'\n\nassert solution('''8\n0 7 9 10 0 1 2 3 4\n1 0 6 8 11 9 7 10 0\n2 7 0 6 9 8 10 11 3\n3 8 11 9 0 7 10 6 2 4\n4 10 3 2 7 11 8 9 0 5\n5 9 4 10 8 3 11 7 0 2\n6 8 2 11 10 7 9 5 3 0\n7 9 5 11 2 0 10 3 4 8\n8 6 10 4 9 2 11 0 7 5''') == '6 10\\n2 6\\n5 4\\n1 7\\n6 0\\n9 3\\n8 1\\n4 5\\n10 8\\n7 2\\n11 4\\n3 7\\n0 9\\n10 5\\n2 11\\n9 5\\n7 8'\n\nassert solution('''3\n1 0 2\n2 3 0\n3 1 0''') == '2 0\\n2 3\\n0 1\\n1 2\\n1 0\\n0 2\\n0 3'\n\nassert solution('''7\n0 1 1 1 1 2 1\n2 1 1 1 1 2 1\n3 1 1 1 1 2 1\n4 1 1 1 1 2 1\n5 1 1 1 1 2 1\n6 1 1 1 1 2 1\n7 1 1 1 1 2 1''') == '0 1\\n1 2\\n2 0\\n3 5\\n4 6\\n5 7\\n6 0\\n7 4\\n1 1\\n2 2\\n3 3'\n\nassert solution('''2\n0 1\n1 0''') == '0 1\\n1 0\\n1 0'"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(1) == '1 2'\nassert solution(4) == '1 2\\n2 3\\n3 4'\n\"\"\""
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\n\n-----Notes-----\nThe total number of roads connecting any two villages will always be at most $n(n-1)/2$. Thus, there is no need to construct the entire table and then distributing it to all the villages, since the number of road connections is at most $n(n-1)/2$.\n\n-----Test Case-----\n(i.e. the testing suite)\n\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def read_from_stdin_until_given_char(self, stdin: str, given_char: str) -> str:\n        out_str = \"\"\n        line_str = \"\"\n        while True:\n            char = stdin.read(1)\n            if char == given_char:\n                return out_str\n            if not char:\n                return line_str\n            out_str += char\n            line_str += char"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\""
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(test_input) == expected_output\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\n"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\nassert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\nassert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\nassert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\n\n\"\"\""
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0') == '1 2\\n1 3\\n1 4'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4900,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n0 1 1 2\\n1 0 2 3\\n1 2 0 3\\n2 3 3 0\") == \"1 2\\n1 3\\n1 4\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nassert solution(\"WAWXGOMRU\") == \"ABCD\"\nassert solution(\"KOKECPITLO\") == \"ABCD\"\nassert solution(\"YINVPVJLR\") == \"ABCD\"\nassert solution(\"IRWQDRPIXU\") == \"ABCD\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nprint(solution(\"EWPGAJRB\"))\n\n--------Challenge--------\nThe task is to solve this cipher programmatically.\n\n------Solution------\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nassert solution(\"KFBNXJCMKQ\") == \"SIGVQLACLWD\"\nassert solution(\"UDWLZUJNHR\") == \"QKLFJVICSPG\"\nassert solution(\"GHVZOMDQKR\") == \"YXEZTUWGJS\"\nassert solution(\"VULCZHUIVN\") == \"KZPYEWHGRS\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nprint(solution(\"EWPGAJRB\"))\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\n\n\"\"\"\nimport time\n\nclass Solution:\n    def divide(self, s: str) -> list:\n        if not s or len(s) == 1:\n            return s\n        mid = len(s) // 2\n        return [s[:mid], s[mid:]]\n    \n    def rotate(self, s: str, num_rotate: int) -> str:\n        \"\"\"\n        >>> Solution().rotate('ABCD', 0)\n        'ABCD'\n        >>> Solution().rotate('ABCD', 1)\n        'BCDA'\n        >>> Solution().rotate('ABCD', 2)\n        'CDAB'\n        >>> Solution().rotate('ABCD', 3)\n        'DBCA'\n        >>> Solution().rotate('ABCD', 4)\n        'DABC'\n        >>> Solution().rotate('ABCD', 5)\n        'EABD'\n        >>> Solution().rotate('ABCD', 6)\n        'FGAB'\n        >>> Solution().rotate('ABCD', 7)\n        'EGBD'\n        >>> Solution().rotate('ABCD', 8)\n        'HGDA'\n        >>> Solution().rotate('ABCD', 9)\n        'IJAB'\n        >>> Solution().rotate('ABCD', 10)\n        'JABI'\n        >>> Solution().rotate('ABCD', 11)\n        'KBCD'\n        >>> Solution().rotate('ABCD', 12)\n        'LACD'\n        >>> Solution().rotate('ABCD', 13)\n        'LACD'\n        >>> Solution().rotate('ABCD', 14)\n        'LACD'\n        >>> Solution().rotate('ABCD', 15)\n        'LACD'\n        >>> Solution().rotate('ABCD', 16)\n        'LACD'\n        >>> Solution().rotate('ABCD', 17)\n        'LACD'\n        >>> Solution().rotate('ABCD', 18)\n        'LACD'\n        >>> Solution().rotate('ABCD', 19)\n        'LACD'\n        >>> Solution().rotate('ABCD', 20)\n        'LACD'\n        >>> Solution().rotate('ABCD', 21)\n        'LACD'\n        >>> Solution().rotate('ABCD', 22)\n        'LACD'\n        >>> Solution().rotate('ABCD', 23)\n        'LACD'\n        >>> Solution().rotate('ABCD', 24)\n        'LACD'\n        >>> Solution().rotate('ABCD', 25)\n        'LACD'\n        >>> Solution().rotate('ABCD', 26)\n        'LACD'\n        >>> Solution().rotate('ABCD', 27)\n        'LACD'\n        >>> Solution().rotate('ABCD', 28)\n        'LACD'\n        >>> Solution().rotate('ABCD', 29)\n        'LACD'\n        >>> Solution().rotate('ABCD', 30)\n        'LACD'\n        >>> Solution().rotate('ABCD', 31)\n        'LACD'\n        >>> Solution().rotate('ABCD', 32)\n        'LACD'\n        >>> Solution().rotate('ABCD', 33)\n        'LACD'\n        >>> Solution().rotate('ABCD', 34)\n        'LACD'\n        >>> Solution().rotate('ABCD', 35)\n        'LACD'\n        >>> Solution().rotate('ABCD', 36)\n        'LACD'\n        >>> Solution().rotate('ABCD', 37)\n        'LACD'\n        >>> Solution().rotate('ABCD', 38)\n        'LACD'\n        >>> Solution().rotate('ABCD', 39)\n        'LACD'\n        >>> Solution().rotate('ABCD', 40)\n        'LACD'\n        >>> Solution().rotate('ABCD', 41)\n        'LACD'\n        >>> Solution().rotate('ABCD', 42)\n        'LACD'\n        >>> Solution().rotate('ABCD', 43)\n        'LACD'\n        >>> Solution().rotate('ABCD', 44)\n        'LACD'\n        >>> Solution().rotate('ABCD', 45)\n        'LACD'\n        >>> Solution().rotate('ABCD', 46)\n        'LACD'\n        >>> Solution().rotate('ABCD', 47)\n        'LACD'\n        >>> Solution().rotate('ABCD', 48)\n        'LACD'\n        >>> Solution().rotate('ABCD', 49)\n        'LACD'\n        >>> Solution().rotate('ABCD', 50)\n        'LACD'\n        >>> Solution().rotate('ABCD', 51)\n        'LACD'\n        >>> Solution().rotate('ABCD', 52)\n        'LACD'\n        >>> Solution().rotate('ABCD', 53)\n        'LACD'\n        >>> Solution().rotate('ABCD', 54)\n        'LACD'\n        >>> Solution().rotate('ABCD', 55)\n        'LACD'\n        >>> Solution().rotate('ABCD', 56)\n        'LACD'\n        >>> Solution().rotate('ABCD', 57)\n        'LACD'\n        >>> Solution().rotate('ABCD', 58)\n        'LACD'\n        >>> Solution().rotate('ABCD', 59)\n        'LACD'\n        >>> Solution().rotate('ABCD', 60)\n        'LACD'\n        >>> Solution().rotate('ABCD', 61)\n        'LACD'\n        >>> Solution().rotate('ABCD', 62)\n        'LACD'\n        >>> Solution().rotate('ABCD', 63)\n        'LACD'\n        >>> Solution().rotate('ABCD', 64)\n        'LACD'\n        >>> Solution().rotate('ABCD', 65)\n        'LACD'\n        >>> Solution().rotate('ABCD', 66)\n        'LACD'\n        >>> Solution().rotate('ABCD', 67)\n        'LACD'\n        >>> Solution().rotate('ABCD', 68)\n        'LACD'\n        >>> Solution().rotate('ABCD', 69)\n        'LACD'\n        >>> Solution().rotate('ABCD', 70)\n        'LACD'\n        >>> Solution().rotate('ABCD', 71)\n        'LACD'\n        >>> Solution().rotate('ABCD', 72)\n        'LACD'\n        >>> Solution().rotate('ABCD', 73)\n        'LACD'\n        >>> Solution().rotate('ABCD', 74)\n        'LACD'\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\n\"\"\"\n\nmessage = input()\n\nleft = message[:len(message)//2]\nright = message[len(message)//2:]\n\nrotations = {\n    'A': 0,\n    'B': 1,\n    'C': 2,\n    'D': 3,\n    'E': 4,\n    'F': 5,\n    'G': 6,\n    'H': 7,\n    'I': 8,\n    'J': 9,\n    'K': 10,\n    'L': 11,\n    'M': 12,\n    'N': 13,\n    'O': 14,\n    'P': 15,\n    'Q': 16,\n    'R': 17,\n    'S': 18,\n    'T': 19,\n    'U': 20,\n    'V': 21,\n    'W': 22,\n    'X': 23,\n    'Y': 24,\n    'Z': 25,\n}\n\nrotations_left = {\n    'A': 0,\n    'B': 1,\n    'C': 2,\n    'D': 3,\n    'E': 4,\n    'F': 5,\n    'G': 6,\n    'H': 7,\n    'I': 8,\n    'J': 9,\n    'K': 10,\n    'L': 11,\n    'M': 12,\n    'N': 13,\n    'O': 14,\n    'P': 15,\n    'Q': 16,\n    'R': 17,\n    'S': 18,\n    'T': 19,\n    'U': 20,\n    'V': 21,\n    'W': 22,\n    'X': 23,\n    'Y': 24,\n    'Z': 25,\n}\n\nrotations_right = {\n    'A': 26,\n    'B': 25,\n    'C': 24,\n    'D': 23,\n    'E': 22,\n    'F': 21,\n    'G': 20,\n    'H': 19,\n    'I': 18,\n    'J': 17,\n    'K': 16,\n    'L': 15,\n    'M': 14,\n    'N': 13,\n    'O': 12,\n    'P': 11,\n    'Q': 10,\n    'R': 9,\n    'S': 8,\n    'T': 7,\n    'U': 6,\n    'V': 5,\n    'W': 4,\n    'X': 3,\n    'Y': 2,\n    'Z': 1,\n}\n\nrotation = 0\n\nfor x, y in zip(left, right):\n    rotation += rotations[x]\n    rotation += rotations_right[y]\n\nrotation = rotation % 26\n\ndecrypted_left = ''\ndecrypted_right = ''\n\nfor x in left:\n    decrypted_left += chr((rotations[x] - rotation) % 26 + 65)\n\nfor x in right:\n    decrypted_right += chr((rotations_right[x] - rotation) % 26 + 65)\n\nprint(decrypted_left + decrypted_right)"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\nassert solution('WMGXGJEB') == 'XYZIJKL'\nassert solution('WMGXGJEB') == 'XYZIJKL'\nassert solution('WMGXGJEB') == 'XYZIJKL'\nassert solution('WMGXGJEB') == 'XYZIJKL'\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"EWPGAJRB\") == \"ABCD\"\nprint(solution(\"KASJAERLK\"))\n\"\"\""
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\n\"\"\"\n"
    },
    {
        "number": 4901,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('EWPGAJRB') == 'ABCD'\nprint(solution(stdin))\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"bac\") == 1\nassert solution(\"abc\") == 2\nassert solution(\"def\") == 0\nassert solution(\"abab\") == 0\nassert solution(\"aaa\") == 0\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abc') == 2\n\n\"\"\"\n\nimport string"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\") == 0\nassert solution(\"aaaaaaaa\") == 1\nassert solution(\"abcdefg\") == 0\nassert solution(\"ab\") == 1\nassert solution(\"ac\") == 1\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('abc') == 2\nassert solution('abcd') == 0\n\"\"\"\nimport string\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"bcad\") == 1\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('abc') == 2\nassert solution('abcdefg') == 0\n\"\"\""
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"abcba\") == 0\nassert solution(\"abca\") == 1\nassert solution(\"abbc\") == 1\nassert solution(\"abbbbc\") == 1\n\"\"\""
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"ab\") == 1\nassert solution(\"aab\") == 1\nassert solution(\"aba\") == 0\nassert solution(\"a\") == 0\nassert solution(\"abcd\") == 2\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"abc\") == 2\nassert solution(\"bac\") == 0\nassert solution(\"acd\") == 0\nassert solution(\"efg\") == 1\nassert solution(\"fgh\") == 1\n"
    },
    {
        "number": 4902,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('abba') == 2\nassert solution('abc') == 0\n\n-----Notes-----\nThis problem will require some experimentation in order to solve. We'll need to try and create a map of all possible permutations of the remaining letters in the string and then compare that to all of the actual permutations of a palindrome.\n\nThis is an excercise to fill up your brain and practice various algorithmic techniques.\n\"\"\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('aaah') == 'no'\nassert solution('a') == 'go'\nassert solution('aaaaaah') == 'no'\nassert solution('aaaaaah') == 'go'\n\n\"\"\""
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"aaaaaah\") == \"no\"\nassert solution(\"aaah\") == \"go\"\n\"\"\"\n\nstdin = input()\ndoctor = input()"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaah\") == \"no\"\n\"\"\"\n\nprint(\"go\" if \"aaaaa\" in stdin else \"no\")\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('aaah') == 'go'\nassert solution('aaaaaah') == 'no'\nassert solution('aaaaaah') == 'go'\nassert solution('aaaaaah') == 'no'\n\"\"\""
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"aaah\") == \"go\"\n\nassert solution(\"aaaaah\") == \"no\"\n\n\"\"\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(stdin) == \"go\"\n\nSample Input:\na\na\nSample Output:\nno\n\"\"\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('aaah') == 'no'\nassert solution('aaaaah') == 'go'\n\"\"\"\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaah\") == \"no\"\n\"\"\""
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('aaah') == 'no'\nassert solution('aaaaah') == 'go'\n"
    },
    {
        "number": 4903,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"aaah\") == \"go\"\nassert solution(\"aaaaah\") == \"no\"\n\"\"\"\n\na = input().split(\"h\")[0]\nb = input().split(\"h\")[0]\n\nprint(\"go\" if len(a) < len(b) else \"no\")\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A1B2A2B2A2B2A1B1A1B1A1B2\") == \"A\"\nassert solution(\"A1A2B1A2B2A1A2A2B2\") == \"B\"\n\"\"\"\n\n\"\"\"\nShortest Code\nfor line in stdin.splitlines():\n    print(\"A\" if line.count(\"1\") > line.count(\"2\") else \"B\")\n\"\"\"\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"B2B1A2B2A1A2A2A2\") == \"B\"\nassert solution(\"A1A1B1A1A2A2A2A2\") == \"A\"\nassert solution(\"B1A1B1A1A2A2A2A2\") == \"B\"\nassert solution(\"B1A1B1A1A1A2A2A2\") == \"B\"\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A2B1B2A1A2A2A2A2\") == \"B\"\nassert solution(\"A2B1A2A2B2A1A2A2A2\") == \"A\"\n\"\"\""
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('A2B1A2B2A1A2A2A2') == 'A'\nassert solution('A2B1B2A1A2A2A2') == 'B'\nassert solution('B2A1A2B2A1A2A2') == 'A'\nassert solution('B2A1B2A1A2A2') == 'B'\nassert solution('A2A1B2A1B2A2') == 'B'\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A2B1A2B2A1A2A2B2\") == \"B\"\nassert solution(\"A2B1A2B2B2A1A2A2A2\") == \"A\"\n\nprint(solution(\"A2B1A2B2A1A2A2A2\"))\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A2B1A2B2A1A2\") == \"B\"\nassert solution(\"A2B1A2B2A2A1A2\") == \"A\"\nassert solution(\"B2A1B2A2B1A2A2A2\") == \"B\"\nassert solution(\"A2B2A1B2A2B1A2A2A2\") == \"B\"\n"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A2A2A2B1B1A2B2A1\") == \"B\"\nassert solution(\"B2B2A1A1A1A2A2A2\") == \"A\"\nassert solution(\"A2A2B2B2A2B2B1A2B1\") == \"B\"\n\n\"\"\"\n\nimport re"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A2B1A2B2A1A2A2A2\") == \"B\"\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4904,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"A2B1A2B2A1A2A2A2\") == \"A\"\nassert solution(\"A2B1A2B2A1A2A2A1\") == \"B\"\nassert solution(\"A1B2A2A2B1B2A1A2A2A1\") == \"A\"\n\"\"\""
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 3 1\\n2 1 0\\n2\\n2 2 3\\n3 1 2\\n1 1 1\") == \"7\"\nassert solution(\"4 3 6\\n1 2 3\\n2 3 4\\n3 4 3\\n3\\n2 2 1\\n2\\n2 2 2\\n2 1 2\\n4 2 2\\n2 1 1\\n3 2 1\\n1 2 1\") == \"10\"\n\"\"\"\n\nfrom sys import stdin\nfrom itertools import product"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1\\n3 2 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n1 2\\n\") == \"21\"\n\nprint(solution(\"8 8 10\\n1 2 8\\n1 3 7\\n1 4 7\\n1 5 9\\n1 6 8\\n1 7 4\\n1 8 9\\n1 9 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n1 8 3\\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n1 2 3\\n2 3 4\\n3 4 5\\n4 5 6\") == \"9\"\nassert solution(\"4\\n1 2 3\\n3 2 1\\n3 4 1\\n1 4 2\\n2 3 4\\n3 4 5\\n4 5 6\\n4 5 6\") == \"6\"\n\nprint(solution(\"3\\n1 2 2\\n2 3 3\"))\n\nassert solution(\"2\\n1 2 3\\n2 3 4\") == \"8\"\nassert solution(\"5\\n1 2 3\\n2 3 4\\n3 4 5\\n4 5 6\\n5 1 4\") == \"5\"\nassert solution(\"3\\n1 2 2\\n2 3 3\") == \"3\"\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 2\\n1 2 2\\n1 3 5\\n1 4 1\") == \"6\"\n\"\"\"\n\nN, M = [int(i) for i in input().split()]\nstart, end, k, n = [int(i) for i in input().split()]\ns = [int(i) for i in input().split()]\n\nminutes = min(k, abs(start - n))\n\nprint(minutes + sum(s[minutes:-minutes]))\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15') == '21'\n\n\"\"\"\n\n\nimport collections\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\") == \"21\"\nprint(solution(\"6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\"))\n\n\"\"\"\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''\n6 5\n1 6 20 4\n5 3 2 4\n1 2 2\n2 3 8\n2 4 3\n3 6 10\n3 5 15\n''') == '21'\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3 10\\n1 2 5\\n') == '15'\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\\n1 2 5\\n1 2 3\\n2 3 3\\n2 3 5\\n2 3 3\\n3 4 10\\n3 4 5\\n3 4 3\\n3 5 5\\n3 5 3\\n3 5 5\\n3 5 3\\n3 5 5\") == \"21\"\n"
    },
    {
        "number": 4905,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"6 5\\n1 6 20 4\\n5 3 2 4\\n1 2 2\\n2 3 8\\n2 4 3\\n3 6 10\\n3 5 15\") == '21'\nassert solution(\"7 3\\n1 2 7\\n2 3 9\\n3 4 10\\n4 5 11\\n5 6 12\\n6 7 13\\n7 1 15\\n1 2 3\") == '14'\nassert solution(\"7 4\\n1 2 7\\n2 3 9\\n3 4 10\\n4 5 11\\n5 6 12\\n6 7 13\\n7 1 15\\n1 2 3\") == '15'\nassert solution(\"9 5\\n1 2 8\\n2 3 10\\n3 4 12\\n4 5 13\\n5 6 17\\n6 7 19\\n7 8 21\\n8 9 23\\n9 1 25\\n9 10 27\\n1 10 28\") == '19'\n\nSample Input:\n3 5\n1 2 5\n2 3 4\n1 3 7\nSample Output:\n9\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\nassert solution('E HELLO') == 'H3e2l3o1'\n\nimport re\nimport sys"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\nprint(solution(\"E HHHeellloWooorrrrlld!!\"))\n\nassert solution(\"D H3e2l3o1W1o3r4l2d1!2\") == \"HHHeellloWooorrrrlld!\"\nprint(solution(\"D H3e2l3o1W1o3r4l2d1!2\"))\n\nassert solution(\"E H3e2l3o1W1o3r4l2d1!2\") == \"H3e2l3o1W1o3r4l2d1!2\"\nprint(solution(\"E H3e2l3o1W1o3r4l2d1!2\"))\n\nassert solution(\"D H3e2l3o1W1o3r4l2d1!2\") == \"HHHeellloWooorrrrlld!\"\nprint(solution(\"D H3e2l3o1W1o3r4l2d1!2\"))\n\n-----Explanation-----\nAssertionError: Expected 'H3e2l3o1W1o3r4l2d1!2'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'H3e2l3o1W1o3r4l2d1!2'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'H3e2l3o1W1o3r4l2d1!2'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'H3e2l3o1W1o3r4l2d1!2'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'H3e2l3o1W1o3r4l2d1!2'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'H3e2l3o1W1o3r4l2d1!2'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'H3e2l3o1W1o3r4l2d1!2'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'H3e2l3o1W1o3r4l2d1!2'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'H3e2l3o1W1o3r4l2d1!2'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'H3e2l3o1W1o3r4l2d1!2'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'H3e2l3o1W1o3r4l2d1!2'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'H3e2l3o1W1o3r4l2d1!2'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'H3e2l3o1W1o3r4l2d1!2'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'H3e2l3o1W1o3r4l2d1!2'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'H3e2l3o1W1o3r4l2d1!2'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'H3e2l3o1W1o3r4l2d1!2'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'H3e2l3o1W1o3r4l2d1!2'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'H3e2l3o1W1o3r4l2d1!2'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'H3e2l3o1W1o3r4l2d1!2'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'H3e2l3o1W1o3r4l2d1!2'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'H3e2l3o1W1o3r4l2d1!2'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'H3e2l3o1W1o3r4l2d1!2'\nExpected 'HHHeellloWooorrrrlld!'\nExpected 'HHHeellloWoo"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\nassert solution('D 1yWWz') == 'yWWz'\nassert solution('D 8L9') == 'LLL'\nassert solution
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\nassert solution(\"D 1H3e2l3o1W1o3r4l2d1!2\") == \"HHHeellloWooorrrrlld!!\"\n\nimport codewars_test as test\n\ntest.assert_equals(solution(\"E HHHeellloWooorrrrlld!!\"), \"H3e2l3o1W1o3r4l2d1!2\")\ntest.assert_equals(solution(\"D 1H3e2l3o1W1o3r4l2d1!2\"), \"HHHeellloWooorrrrlld!!\")\n\"\"\"\n\nimport re"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\"\"\"\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\nassert solution('D HHHeellloWooorrrrlld!!') == 'HHHeellloWooorrrrlld!!'\n\n\"\"\""
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\nassert solution(\"D 5H3e2l3o1W1o3r4l2d1!2\") == \"HHeellloWooorrrrlld!!\"\nassert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\nassert solution(\"D 5H3e2l3o1W1o3r4l2d1!2\") == \"HHeellloWooorrrrlld!!\"\n"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\"\"\"\n\nimport sys\nimport re\n\nwhile True:\n    line = sys.stdin.readline().strip()\n    if line == '':\n        break\n    elif line[0] == 'E':\n        print(encode(line[2:]))\n    else:\n        print(decode(line[2:]))"
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"E HHHeellloWooorrrrlld!!\") == \"H3e2l3o1W1o3r4l2d1!2\"\n\n\"\"\"\n\nimport sys\n\n\"\"\"\nE HHHeellloWooorrrrlld!!\nH3e2l3o1W1o3r4l2d1!2\n\nH3e2l3o1W1o3r4l2d1!2\n\n\"\"\""
    },
    {
        "number": 4906,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('E HHHeellloWooorrrrlld!!') == 'H3e2l3o1W1o3r4l2d1!2'\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == 'Alice'\nassert solution('9') == 'Bob'\n\"\"\""
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"1\") == \"Bob\"\nassert solution(\"3\") == \"Alice\"\n\"\"\""
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n'''\n''') == 'Alice'\n\nassert solution(\n'''\n''') == 'Bob'\n\nassert solution(\n'''\n''') == 'Alice'\n\nassert solution(\n'''\n''') == 'Bob'\n\nassert solution(\n'''\n''') == 'Alice'"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2\\n') == 'Alice'\nassert solution('1\\n') == 'Bob'\n\nSample Input:\n9\nSample Output:\nAlice\n3\n\n\"\"\""
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2') == 'Alice'\nassert solution('3') == 'Bob'\nassert solution('8') == 'Alice'\nassert solution('10') == 'Bob'\nassert solution('11') == 'Alice'\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n') == 'Alice'\nassert solution('3\\n') == 'Bob'\nassert solution('4\\n') == 'Alice'\nassert solution('5\\n') == 'Bob'\nassert solution('6\\n') == 'Alice'\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2') == 'Alice'\nassert solution('3') == 'Bob'\nassert solution('5') == 'Bob'\nassert solution('7') == 'Alice'\nassert solution('8') == 'Alice'\n"
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"Alice\"\n\"\"\""
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"Alice\"\nassert solution(\"2\") == \"Bob\"\nassert solution(\"1\") == \"Alice\"\nassert solution(\"4\") == \"Bob\"\nassert solution(\"7\") == \"Alice\"\n\n-----Constraints-----\n1 <= n <= 10^9\n\n\"\"\""
    },
    {
        "number": 4907,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"Alice\"\nassert solution(\"3\") == \"Bob\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 8') == '5+3=8'\nassert solution('6 10 8') == '6+10=16'\nassert solution('2 3 2') == '2*3=6'\nassert solution('10 10 10') == '10/10=1'\nassert solution('15 16 8') == '15-16=1'\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5 3 8') == '5+3=8'\nassert solution('5 3 9') == '5+3=9'\nassert solution('5 3 2') == '5-3=2'\nassert solution('5 3 2') == '5-3=2'\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\n\"\"\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 8') == '5+3=8'\nassert solution('5 3 9') == '5+3=9'\nassert solution('5 3 7') == '5+3=7'\n\n---Problem---\nLittle Mirko wrote into his math notebook an equation containing three positive integers, the equals sign and one of the four basic arithmetic operations (addition, subtraction, multiplication and division).\n\nDuring another class, Slavko erased the equals sign and the operations from Mirko\u2019s notebook. Help Mirko by reconstructing the equation from the three integers.\n\n-----Input-----\nThe first line of input contains three integers less than 100, separated by spaces. The input data will guarantee that a solution, although not necessarily unique, will always exist.\n\n-----Output-----\nOn a single line, output a valid equation containing the three integers (in the same order), an equals sign and one of the four operations. If there are multiple solutions, output any of them.\n\n-----Examples-----\nSample Input:\n5 3 8\nSample Output:\n5+3=8\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 8') == '5+3=8'\nassert solution('5 3 1') == '5+1=3'\nassert solution('9 9 9') == '9+9=18'\n\nSample Input:\n8 2 9\nSample Output:\n8+2=9\n8-2=6\n8*2=16\n8/2=4\n8*2=16\n6/2=3\n6/2=3"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 8') == '5+3=8'\nassert solution('1 1 1') == '1+1=1'\nassert solution('4 4 6') == '4+4=6'\nassert solution('2 3 9') == '2+3=9'\nassert solution('4 9 12') == '4+9=12'\n\"\"\"\n\na, b, c = [int(x) for x in input().split()]\nprint(a, \"+\", b, \"=\", c)\nprint(a, \"-\", b, \"=\", c)\nprint(a, \"*\", b, \"=\", c)\nprint(a, \"/\", b, \"=\", c)\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 8') == '5+3=8'\nassert solution('2 1 4') == '2+1=4'\nassert solution('3 5 7') == '3+5=7'\nassert solution('2 3 3') == '2+3=5'\nassert solution('7 2 2') == '7+2=9'\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"7 3 5\") == \"7+3=5\"\nassert solution(\"2 6 4\") == \"2*6=4\"\nassert solution(\"12 6 5\") == \"12/6=2\"\nassert solution(\"5 6 6\") == \"5*6=30\""
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 8\") == \"5 + 3 = 8\"\nassert solution(\"1 2 3\") == \"1 + 2 = 3\"\nassert solution(\"1 3 5\") == \"1 + 3 = 5\"\nassert solution(\"1 3 -5\") == \"1 - 3 = -5\"\nassert solution(\"1 3 - -5\") == \"1 - 3 = 5\"\n"
    },
    {
        "number": 4908,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 8\") == \"5+3=8\"\nassert solution(\"5 3 9\") == \"5+3=9\"\nassert solution(\"5 3 10\") == \"5+3=10\"\nassert solution(\"5 3 11\") == \"5+3=11\"\nassert solution(\"5 3 12\") == \"5+3=12\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n1 2 2 3 1\") == \"YES\"\nassert solution(\"6\\n1 2 2 2 2 2\") == \"YES\"\nassert solution(\"4\\n1 3 2 1\") == \"NO\"\nassert solution(\"3\\n1 2 2\") == \"NO\"\nassert solution(\"5\\n2 1 3 1 1\") == \"NO\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 2 2 1 1 3 1 1\") == \"YES\"\nassert solution(\"8 3 2 1 1 3 1 1\") == \"YES\"\nassert solution(\"8 3 2 1 1 3 1 1\") == \"NO\"\n\"\"\"\n\nimport sys\nimport os\nfrom random import randint\nimport collections"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(output())\n\n----\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == \"YES\"\n\n\"\"\"\n\nimport sys\nfrom itertools import permutations"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\nassert solution('10\\n1 1 2 3 4 5 6 7 8 9 10') == 'NO'\nassert solution('5\\n2 2 3 2 2') == 'YES'\nassert solution('5\\n1 2 1 2 3') == 'NO'\n\"\"\"\n\nfrom collections import defaultdict, deque\nimport sys\nimport re\n\nassert solution('''8\n3 2 2 1 1 3 1 1''') == 'YES'\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('8\\n3 2 2 1 1 3 1 1') == 'YES'\nassert solution('8\\n1 1 1 1 1 1 1 1') == 'NO'\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nnums = list(map(int, sys.stdin.readline().split()))\nnums.append(0)\n\nd = [0 for _ in range(n + 1)]"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 2 2 2\\n\") == \"YES\"\nassert solution(\"5\\n2 2 2 1 1\\n\") == \"YES\"\nassert solution(\"6\\n2 2 2 1 1 3\\n\") == \"YES\"\nassert solution(\"7\\n2 2 2 1 1 3 1\\n\") == \"YES\"\nassert solution(\"8\\n2 2 2 1 1 3 1 1\\n\") == \"NO\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"6\\n2 4 4 5 5\") == \"YES\"\nassert solution(\"2\\n1 1\") == \"NO\"\nassert solution(\"5\\n2 3 3 4\") == \"NO\"\nassert solution(\"8\\n3 3 3 3 3 3 3 3\") == \"YES\"\nassert solution(\"7\\n1 1 1 1 1 1 1 1\") == \"YES\"\n"
    },
    {
        "number": 4909,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"8\\n3 2 2 1 1 3 1 1\") == 'YES'\n\n\"\"\"\n\nfrom itertools import combinations\nfrom math import factorial"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"10\\nghost\") == \"ghost\"\n\"\"\"\n\nfrom typing import List\nfrom collections import Counter\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\"\nassert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"mummy\"\nassert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"witch\"\n\"\"\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\"\nassert solution(\"5\\nghost\\nmummy\\nwitch\\ndemon\\n\") == \"ghost\"\nassert solution(\"5\\nghost\\nghost\\nmummy\\nwitch\\n\") == \"ghost\"\nassert solution(\"3\\nghost\\nghost\\n\") == \"ghost\"\n\"\"\"\n\nN = int(input())\nresp_dict = {}\nfor i in range(N):\n    resp = input()\n    if resp not in resp_dict:\n        resp_dict[resp] = 1\n    else:\n        resp_dict[resp] += 1\nmax_key = max(resp_dict, key=resp_dict.get)\nresp_list = []\nfor i in resp_dict.keys():\n    if resp_dict[i] == resp_dict[max_key]:\n        resp_list.append(i)\nresp_list.sort()\nfor i in resp_list:\n    print(i)"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\n\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\"\n) == \"ghost\\nmummy\\nwitch\"\n\n\"\"\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"ab\") == \"\"\nassert solution(\"abcd\") == \"\"\nassert solution(\"abcdabcd\") == \"\"\nassert solution(\"a\") == \"\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('asdf') == 'ghost'\nassert solution('adsf') == 'ghost'\nassert solution('fdgdg') == 'ghost'\n\"\"\""
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == \"ghost\\nmummy\\nwitch\\ndemon\\ndemon\"\nassert solution(\"12\\nred\\nblue\\ngreen\\nyellow\\npurple\\ngreen\\nyellow\\npurple\") == \"red\\nblue\\ngreen\\nyellow\\npurple\"\nassert solution(\"6\\nred\\nblue\\ngreen\\nyellow\\npurple\") == \"blue\\ngreen\\nyellow\"\nassert solution(\"5\\nred\\nblue\\ngreen\\nred\\nblue\\ngreen\") == \"red\\nblue\\ngreen\"\nassert solution(\"3\\nred\\ngreen\\nblue\") == \"red\\ngreen\\nblue\"\n\"\"\"\n\nimport math\nfrom collections import Counter\n\n\"\"\"\nD = no. of colours\nN = no. of participants\nn = no. of colours given by each participant\n\nTotal ways of picking colours:\nnCr = D!(n!(D - n)!) / n!(D - n)!\n\nProbability of picking a colour:\nnCr = nCr / D!(n!(D - n)!)\n\nProbability of picking a colour (in each category):\nnCr = nCr / n!(D - n)!\n\nProbability of picking a colour (in each category):\nnCr = nCr / n!(D - n)!\n\"\"\""
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\") == 'ghost'\n\"\"\""
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"ghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\") == \"ghost\"\nassert solution(\"ghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\") == \"mummy\"\nassert solution(\"ghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\") == \"witch\"\nassert solution(\"ghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\") == \"ghost\"\nassert solution(\"ghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\") == \"demon\"\n"
    },
    {
        "number": 4910,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n\"10\\nghost\\nmummy\\nwitch\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\\ndemon\"\n) == \"ghost\\nmummy\\nwitch\"\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\") == 'Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\\n'"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(stdin) == stdout"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\") == \"Artist Album Song_Title Length_seconds\"\n\n\"\"\"\n\n\nimport io\nimport sys\n\n\nclass Solution:\n    def solve(self, input_stream):\n        attributes = input_stream.readline().strip().split(' ')\n        n_songs = int(input_stream.readline())\n        songs = []\n        for i in range(n_songs):\n            songs.append(input_stream.readline().strip().split(' '))\n\n        for i in range(int(input_stream.readline())):\n            sort_attr = input_stream.readline().strip()\n            songs = sorted(songs, key=lambda s: (-int(s[attributes.index(sort_attr)]), sort_attr))\n\n        for song in songs:\n            print(' '.join(song))\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''Artist Album Song_Title Length_seconds\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title''') == '''Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n\nArtist Album Song_Title Length_seconds\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\nGeorge_Winston Summer Lullaby 215\n'''\n\n\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''Artist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\n''') == '''Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n'''\nassert solution('''Album Artist Song_Title Year_of_Release\n11\nWie ziehen sich die Fr\u00e4ulein_in_Griechenland die_aus_Hannover_Mecklenburg_Stade_oben_der_Vorschau nach_zu_Hamburg_und_oben_der_Freiheit?_Das_letzte_Kommunismus_in_Griechenland.mp3_Wie_ziehen_sich_die_Fr\u00e4ulein_in_Griechenland_die_aus_Hannover_Mecklenburg_Stade_oben_der_Vorschau_nach_zu_Hamburg_und_oben_der_Freiheit?.mp3_Wie_ziehen_sich_die_Fr\u00e4ulein_in_Griechenland_die_aus_Hannover_Mecklenburg_Stade_oben_der_Vorschau_nach_zu_Hamburg_und_oben_der_Freiheit?.mp3_Wie_ziehen_sich_die_Fr\u00e4ulein_in_Griechenland_die_aus_Hannover_Mecklenburg_Stade_oben_der_Vorschau_nach_zu_Hamburg_und_oben_der_Freiheit?_Das_letzte_Kommunismus_in_Griechenland.mp3_Wie_ziehen_sich_die_Fr\u00e4ulein_in_Griechenland_die_aus_Hannover_Mecklenburg_Stade_oben_der_Vorschau_nach_zu_Hamburg_und_oben_der_Freiheit?_Das_letzte_Kommunismus_in_Griechenland.mp3_Wie_ziehen_sich_die_Fr\u00e4ulein_in_Griechenland_die_aus_Hannover_Mecklenburg_Stade_oben_der_Vorschau_nach_zu_Hamburg_und_oben_der_Freiheit?.mp3_Wie_ziehen_sich_die_Fr\u00e4ulein_in_Griechenland_die_aus_Hannover_Mecklenburg_Stade_oben_der_Vorschau_nach_zu_Hamburg_und_oben_der_Freiheit?.mp3_Wie_ziehen_sich_die_Fr\u00e4ulein_in_Griechenland_die_aus_Hannover_Mecklenburg_Stade_oben_der_Vorschau_nach_zu_Hamburg_und_oben_der_Freiheit?.mp3_Wie_ziehen_sich_die_Fr\u00e4ulein_in_Griechenland_die_aus_Hannover_Mecklenburg_Stade_oben_der_Vorschau_nach_zu_Hamburg_und_oben_der_Freiheit?.mp3_Wie_ziehen_sich_die_Fr\u00e4ulein_in_Griechenland_die_aus_Hannover_Mecklenburg_Stade_oben_der_Vorschau_nach_zu_Hamburg_und_oben_der_Freiheit?_Das_letzte_Kommunismus_in_Griechenland.mp3_Wie_ziehen_sich_die_Fr\u00e4ulein_in_Griechenland_die_aus_Hannover_Mecklenburg_Stade_oben_der_Vorschau_nach_zu_Hamburg_und_oben_der_Freiheit?_Das_letzte_Kommunismus_in_Griechenland.mp3_Wie_ziehen_sich_die_Fr\u00e4ulein_in_Griechenland_die_aus_Hannover_Mecklenburg_Stade_oben_der_Vorschau_nach_zu_Hamburg_und_oben_der_Freiheit?_Das_letzte_Kommunismus_in_Griechenland"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\"\"\"\n\n\"\"\"\nThe above solution is by forked from another project, where I also have a version that uses a method from the built-in Python `sorted()` function. The two versions are both correct and work for this problem.\n\nIn the following solution, I include the `sorted()` function in the solution, which is a bit more efficient, since the `sorted()` function takes the string as an input and does not use a `for` loop, while this `sorted()` function loops over the string and sorts it line by line.\n\n`sorted()` takes the input string and makes a copy of it to sort, then returns a new string containing the sorted version of the input string.\n\nThe `sorted()` function is not used if the input string is a list of lists, which happens in this problem. It is used if the input string is a list of strings.\n\"\"\"\n"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title\") == \"Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n3\\nArtist\\nAlbum\\nSong_Title') == 'Artist Album Song_Title Length_seconds\\nGeorge_Winston Summer Lullaby 215\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nTchaikovsky Piano_Favorites November 163'\nprint('Correctness test passed')\n\n---Sample Test Case(s)---\nInput:\nArtist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\nOutput:\nArtist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n\nInput:\nArtist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\nOutput:\nArtist Album Song_Title Length_seconds\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n\nInput:\nArtist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\nOutput:\nArtist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n\nInput:\nArtist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\nOutput:\nArtist Album Song_Title Length_seconds\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n\nInput:\nArtist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\nOutput:\nArtist Album Song_Title Length_seconds\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\n\nInput:\nArtist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nSong_Title\nLength_seconds\nOutput:\nArtist Album Song_Title Length_seconds\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\") == \"Artist Album Song_Title Length_seconds\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n\"\nprint(solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\"))\nassert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\") == \"Artist Album Song_Title Length_seconds\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n\"\nassert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\") == \"Artist Album Song_Title Length_seconds\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n\"\nassert solution(\"Artist Album Song_Title Length_seconds\\n5\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\") == \"Artist Album Song_Title Length_seconds\\nTchaikovsky Piano_Favorites November 163\\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\\nJames_Taylor Dad_Loves_His_Work London_Town 236\\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\\nGeorge_Winston Summer Lullaby 215\\n\"\n\nSample Input 1:\nArtist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\nSample Output 1:\nArtist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n\nSample Input 2:\nArtist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\nSample Output 2:\nArtist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n\nSample Input 3:\nArtist Album Song_Title Length_seconds\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames"
    },
    {
        "number": 4911,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"Artist Album Song_Title Length_seconds\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n\"\"\"\n\nassert solution(\"Artist Album Song_Title Length_seconds\") == \"\"\"Artist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n\"\"\"\n\n\"\"\"\n5\nTchaikovsky Piano_Favorites November 163\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nGeorge_Winston Summer Lullaby 215\n3\nArtist\nAlbum\nSong_Title\nSample Output:\nArtist Album Song_Title Length_seconds\nGeorge_Winston Summer Lullaby 215\nJames_Taylor Dad_Loves_His_Work Hard_Times 192\nJames_Taylor Dad_Loves_His_Work London_Town 236\nJames_Taylor Dad_Loves_His_Work Summers_Here 163\nTchaikovsky Piano_Favorites November 163\n\"\"\""
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == 'NO'\nassert solution('1\\n1') == 'YES'\nassert solution('2\\n1') == 'YES'\nassert solution('3\\n1') == 'NO'\nassert solution('2\\n2') == 'YES'\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\nassert solution(\"2 10 7\\n6 3 7\") == \"NO\"\nassert solution(\"2 10 7\\n2 2 2 2 2 2 2\") == \"YES\"\nassert solution(\"2 10 7\\n6 7 7\") == \"NO\"\n\n-----Note-----\nThis is a sample test case. The test is done for various cases. The test is case sensitive.\n\"\"\"\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\n\"\"\"\n\n\"\"\"\nYou're given three integers:,, and. You can rotate digits in. You can only rotate the digits to one another if they are adjacent in the number. For example, we can rotate the digits in. We cannot rotate the digits in because they are not adjacent in the number.\n\nYou can rotate the digits in. If it is rotated, then your score is. Your goal is to rotate the digits in so that the resulting number has the highest score.\n\nReturn the number that results in the highest score.\n\nInput Format\n\nThe three integers,, and, respectively.\n\nConstraints\n\nOutput Format\n\nPrint the number that results in the highest score.\n\nSample Input 0\n\n6 12 3\nSample Output 0\n\n932736452\n\"\"\"\n\n\"\"\"\nYou're given a string. We'll say that the front is the first 3 chars of the string. If the string length is less than 3, the front is whatever is there. Return a new string which is 3 copies of the front.\n\nSample Input\n\nWhat front? I'm front!\nSample Output\n\nI'm front!I'm front!I'm front!\n\"\"\"\n\n\"\"\"\nYou're given a string. Return a new string which is made of every other char starting with the first, so \"Hello\" yields \"Hlo\".\n\nSample Input\n\nWhat front? Hl\nSample Output\n\nHlo\n\"\"\"\n\n\"\"\"\nYou're given a string. Let's call any (contiguous) substring of that string a *window*. Return the window with the greatest number of unique characters.\n\nFor example, given the string, the windows are,, and. Of these, the last window has the most number of unique characters: it contains the letters that appear 2 times in the string.\n\nSample Input\n\nababcabc\nSample Output\n\nabc\n\"\"\"\n\n\"\"\"\nYou're given a string. Return the number of times that the string 'Alice' occurs anywhere in.\n\nFor example, count_a('Alice and Bob go to the same school.') should return 1.\n\ncount_a('We live in a kingdom of our own.') should return 0.\n\"\"\"\n\n\"\"\"\nYou're given a string. You can perform two types of operations on the string:\n\nRemove the leftmost character from the string.\nRemove the rightmost character from the string.\nReturn the minimum number of operations needed to make the string empty.\nSample Input\n\nThe cake is a lie!\nSample Output\n\n5\nExplanation\n\nWe can perform the following sequence of operations to make the string empty:\n\nDelete the leftmost character, so the string becomes ;\nDelete the rightmost character, so the string becomes ;\nDelete the leftmost character, so the string becomes ;\nDelete the rightmost character, so the string becomes.\nWe need 5 operations to make the string empty.\n\"\"\"\n\n\"\"\"\nYou're given a string. Return True if it is possible to make the string empty by removing exactly one character, otherwise return False.\n\nNote: You can't replace a character that is not there with a character that is already there.\n\nFor example:\n\n>>> is_removable('aabbcc')\nTrue\n>>> is_removable('aabbccc')\nFalse\n>>> is_removable('aabbcccc')\nFalse\n>>> is_removable('aabbcc')\nFalse\n>>> is_removable('baab')\nTrue\n>>> is_removable('baabb')\nFalse\n\"\"\"\n\n\"\"\"\nYou're given a string and a non-negative integer. Check if the string is a subsequence of the specified length.\n\nSample Input:\n\ntourist\n2\ntourist\n7\ntourist\n6\ntourist\ntourist\ntourist\ntourist\n5\ntourist\nSample Output:\n\nYes\nYes\nYes\nNo\n\"\"\"\n\n\"\"\"\nYou're given a string and a non-negative integer. Check if the string is a subsequence of the specified length.\n\nSample Input:\n\ntourist\n2\ntourist\n7\ntourist\n6\ntourist\ntourist\ntourist\ntourist\n5\ntourist\nSample Output:\n\nYes\nYes\nYes\nNo\n\"\"\"\n\n\"\"\"\nYou're given a string. Check if it is a palindrome.\n\nSample Input:\n\na\nSample Output:\n\nYes\n\"\"\"\n\n\"\"\"\nYou're given a string. Check if it is a palindrome.\n\nSample Input:\n\na\nSample Output:\n\nYes\n\"\"\"\n\n\"\"\"\nYou're given a string. Check if it is a palindrome.\n\nSample Input:\n\nmanana\nSample Output:\n\nYes\n\"\"\"\n\n\"\"\"\nYou're given a string. Check if it is a palindrome.\n\nSample Input:\n\nracecar\nSample Output:\n\nYes\n\"\"\"\n\n\"\"\"\nYou're given a string. Check if it is a palindrome.\n\nSample Input:\n\nababa\nSample Output:\n\nYes\n\"\"\"\n\n\"\"\"\nYou're given a string. Check if it is a palindrome.\n\nSample Input:\n\nabba\nSample Output:\n\nYes\n\"\"\"\n\n\"\"\"\nYou're given a string. Check if it is a palindrome.\n\nSample Input:\n\na\nSample Output:\n\nNo\n\"\"\"\n\n\"\"\"\nYou're given a string. Check if it is a palindrome.\n\nSample Input:\n\naab\nSample Output:\n\nYes\n\"\"\"\n\n\"\"\"\nYou're given a string. Check if it is a palindrome.\n\nSample Input:\n\nabbbab\nSample Output:\n\nNo\n\"\"\"\n\n\"\"\"\nYou're given a string. Check if it is a palindrome.\n\nSample Input:\n\nabcdcba\nSample Output:\n\nYes\n\"\"\"\n\n\"\"\"\nYou're given a string. Check if it is a palindrome.\n\nSample Input:\n\nabcba\nSample Output:\n\nYes\n\"\"\"\n\n\"\"\"\nYou're given a string. Check if it is a palindrome.\n\nSample Input:\n\nbaa\nSample Output:\n\nNo\n\"\"\"\n\n\"\"\"\nYou're given a string. Check if it is a palindrome.\n\nSample Input:\n\nabc\nSample Output:\n\nNo\n\"\"\"\n\n\"\"\"\nYou're given a string. Check if it is a palindrome.\n\nSample Input:\n\na\nSample Output:\n\nYes\n\"\"\"\n\n\"\"\"\nYou're given a string. Check if it is a palindrome.\n\nSample Input:\n\naa\nSample Output:\n\nYes\n\"\"\"\n\n\"\"\"\nYou're given a string. Check if it is a palindrome.\n\nSample Input:\n\naabb\nSample Output:\n\nYes\n\"\"\"\n\n\"\"\"\nYou're given a string. Check if it is a palindrome.\n\nSample Input:\n\naababa\nSample Output:\n\nNo\n\"\"\"\n\n\"\"\"\nYou're given a string. Check if it is a palindrome.\n\nSample Input"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\n\n\"\"\"\n\nimport sys\n\nfrom typing import List\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(str([\n    2,\n    10,\n    7,\n])) == 'YES'\nassert solution(str([\n    2,\n    10,\n    7,\n])) == 'YES'\nassert solution(str([\n    2,\n    10,\n    7,\n])) == 'YES'\nassert solution(str([\n    2,\n    10,\n    7,\n])) == 'YES'\nassert solution(str([\n    2,\n    10,\n    7,\n])) == 'YES'\n\"\"\"\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 10 7\\n5 5 5 5 5 5 5\") == \"YES\"\n\"\"\"\n\nimport sys\n\nh, w, n = map(int, sys.stdin.readline().strip().split())\nl = list(map(int, sys.stdin.readline().strip().split()))\n\nl.sort()\n\nans = 'NO'\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 10 7\n5 5 5 5 5 5 5''') == 'YES'\nassert solution('''2 10 7\n2 2 2 2 2 2 2''') == 'NO'\nassert solution('''2 10 7\n2 2 2 2 2 2 2\n5 5 5 5 5 5 5''') == 'NO'\nassert solution('''2 10 7\n2 2 2 2 2 2 2\n2 2 2 2 2 2 2\n5 5 5 5 5 5 5''') == 'YES'\nassert solution('''2 10 7\n2 2 2 2 2 2 2\n2 2 2 2 2 2 2\n5 5 5 5 5 5 5\n5 5 5 5 5 5 5''') == 'NO'\n\n'''\n\n'''\n"
    },
    {
        "number": 4912,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 10 7\\n5 5 5 5 5 5 5') == 'YES'\nassert solution('2 10 7\\n5 3 5 5 5 5 5') == 'NO'\n\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"YYNY\") == \"Not Effective\"\nassert solution(\"NNNN\") == \"100.000000\"\nassert solution(\"YYYY\") == \"Not Effective\"\nassert solution(\"NNNY\") == \"66.666667\"\nassert solution(\"YYNN\") == \"50.000000\"\n\"\"\"\n\nN = int(input())\nvaccines = []\nfor i in range(N):\n    line = input().split()\n    vaccines.append(line)\n\ncont = [0, 0, 0]\nfor i in range(N):\n    for j in range(3):\n        if vaccines[i][j] == \"Y\":\n            cont[j] += 1\n\nefficacy = [cont[0]/N, cont[1]/N, cont[2]/N]\nprint(efficacy)\nprint(round(efficacy[0]*100, 2), end=\"\")\nprint(\"% \", end=\"\")\nprint(round(efficacy[1]*100, 2), end=\"\")\nprint(\"% \", end=\"\")\nprint(round(efficacy[2]*100, 2), end=\"\")\nprint(\"%\")\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\") == \"66.666667\\n50.000000\"\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''\n10\nNYNY\nNNYY\nNYYY\nNYYN\nNNNY\nYYNN\nYYYN\nYYNY\nYYNN\nYYNY\n''') == '''\nNot Effective\n66.666667\n50.000000\n'''\n\nprint('Success')\n'''\n\n'''\n'''\nWrite 5 lines of code to test the correctness of solution:\nTo determine the efficacy of a vaccine against a disease, a clinical trial is needed. Some participants are given the real vaccine, while others are given a placebo as the control group. The participants are tracked to determine if they are infected by three different strains (A, B, and C) of a virus. The efficacy of the vaccine against infection by a particular strain is simply the percentage reduction of the infection rate of the vaccinated group compared to the control group.\n\nFor example, suppose that there are $40$ people in the vaccinated group, $8$ of which are infected by strain B. Then the infection rate is $20$%. Further suppose that $50$ people are in the control group, and $30$ people are infected by strain B. Then the infection rate for the control group is $60$%. Thus the vaccine efficacy against infection is approximately $66.67$% (since $20$% is a $66.67$% percentage reduction of $60$%). If the infection rate for a particular strain in the vaccinated group is not lower than that of the control group, the vaccine is not effective against infection by that strain.\n\nWhat is the vaccine efficacy against infection by the three strains?\n\n-----Input-----\nThe first line of input contains an integer $N$ ($2 \\leq N \\leq 10000$) containing the number of participants in the clinical trial.\n\nThe next $N$ lines describe the participants. Each of these lines contains a string of length four. Each letter is either \u2018Y\u2019 or \u2018N\u2019. The first letter indicates whether the participant is vaccinated with the real vaccine, and the remaining three letters indicate whether the participant is infected by strain A, B, and C, respectively.\n\nThere is at least one participant in the vaccinated group and the control group. There is at least one participant in the control group infected by each strain (but they may be different participants).\n\n-----Output-----\nDisplay the vaccine efficacy against infection by strain A, B, and C in that order. If the vaccine is not effective against infection by a particular strain, display Not Effective for that strain instead. Answers with an absolute error or relative error of at most $10^{-2}$ will be accepted.\n\n-----Examples-----\nSample Input:\n10\nNYNY\nNNYY\nNYYY\nNYYN\nNNNY\nYYNN\nYYYN\nYYNY\nYYNN\nYYNY\nSample Output:\nNot Effective\n66.666667\n50.000000\n'''\nimport sys"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nYNYY\\nNYNN\\nYNYN\\nNNNN') == '66.666667'\nassert solution('6\\nYYNN\\nYYYN\\nYYNY\\nNYNN\\nNNYY') == '50.000000'\nassert solution('8\\nYNNN\\nYYYN\\nYNNN\\nYNNN\\nNNNN\\nNNYY') == '50.000000'\n\"\"\""
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\") == 'Not Effective\\n66.666667\\n50.000000'\n\"\"\"\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN') == '66.666667\\n50.000000\\nNot Effective'"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('NYNY') == 'Not Effective'\nassert solution('NNYY') == '66.666667'\nassert solution('NYYY') == '50.000000'\nassert solution('NYYN') == 'Not Effective'\nassert solution('NNNY') == '66.666667'\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('NYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\\nYYNY') == '66.666667\\n50.000000'\n\n-----Notes-----\nConstraints\n\n1 \u2264 N \u2264 10000\nThe input is guaranteed to be valid.\n\"\"\""
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY\\nYYNN\") == '66.666667\\n50.000000'\n\"\"\"\n"
    },
    {
        "number": 4913,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10\\nNYNY\\nNNYY\\nNYYY\\nNYYN\\nNNNY\\nYYNN\\nYYYN\\nYYNY') == '66.666667\\n50.000000'\n\"\"\"\n\n\nimport re\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"BAACC\") == \"3\"\nassert solution(\"CABAB\") == \"1\"\nassert solution(\"ABCBA\") == \"0\"\nassert solution(\"AABAAB\") == \"2\"\nassert solution(\"AABAABB\") == \"2\"\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('BAACC') == 'Bruno'\n\nassert solution('CCAABB') == 'Goran'\n\nassert solution('CABB') == 'Adrian'\n\"\"\"\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('ABCABCABC') == 'ABCABC'\nassert solution('ABCABCABCBA') == 'ABCABC'\nassert solution('BCCACCBA') == 'Bruno'\nassert solution('BAABBCA') == 'Goran'\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''5\nBAACC''') == '3\\nBruno'\nassert solution('''1\nA''') == '1\\nAdrian'\nassert solution('''5\nABCA''') == '5\\nBruno'\nassert solution('''4\nBCDAC') == '4\\nGoran'\nassert solution('''5\nCABBAC') == '5\\nBruno'\n'''\n) == '''5\nBruno\n'''\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"AB\") == (\"Bruno\", \"Goran\", \"Adrian\")\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5\nBAACC''') == '3\\nBruno'\nassert solution('''5\nCABACB''') == '2\\nAdrian'\nassert solution('''5\nABABAB''') == '1\\nGoran'\nassert solution('''5\nAABBCC''') == '0\\nEveryone'\nprint('Passed')\n\n------Solution------\n\"\"\"\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0442\u0435\u0441\u0442\u0430. \u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u043e\u0442 1 \u0434\u043e 100.\n\u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0441\u0442\u0440\u043e\u043a \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u0430 \u0446\u0435\u043f\u043e\u0447\u043a\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0430.\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0430 \u0432\u0435\u0440\u043d\u044b\u0439 \u043e\u0442\u0432\u0435\u0442.\n\u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0444\u0440\u0430\u0437\u0443 \"Right answer!\" \u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0430, \u0435\u0441\u043b\u0438 \u043e\u0442\u0432\u0435\u0442 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c, \u0438 \"Wrong answer\" \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\nSample Input 1:\n5\n101\nBAC\n101\nCBA\n101\nABC\n101\nBABC\n101\nABCD\n101\nABBC\nSample Output 1:\nRight answer!\nRight answer!\nRight answer!\nRight answer!\nWrong answer!\nRight answer!\nRight answer!\nWrong answer!\nRight answer!\nWrong answer!\n\nSample Input 2:\n5\n10\nABCD\n101\nABCD\n101\nABCD\n101\nABCD\n101\nABCD\n101\nABCD\nSample Output 2:\nRight answer!\nRight answer!\nRight answer!\nRight answer!\nRight answer!\nWrong answer!\nRight answer!\nRight answer!\nRight answer!\nRight answer!\n\"\"\""
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('AAABBC') == 'Goran'\n\nassert solution('BBAABB') == 'Adrian'\n\nassert solution('ABAABB') == 'Bruno'\n\nprint(solution(stdin))\n\"\"\"\n\nN = int(input())\na = input()\nstdin = ''\n\nfor i in range(N):\n    stdin += input()[0]\n\nstdin = stdin * 2\n\ncorrect = [0] * (N * 3)\n\nfor i in range(len(stdin) - N + 1):\n    correct[int(stdin[i:i + N], 3)] += 1\n\nmax_correct = max(correct)\n\nans = ''\n\nfor i in range(len(correct)):\n    if correct[i] == max_correct:\n        ans += chr(i + 97)\n\nprint(max_correct)\nprint(sorted(ans))\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('BAACC') == '3'\nassert solution('CCAABBC') == '2'\nassert solution('CCABABC') == '1'\nassert solution('CAABAAA') == '0'\n\nassert solution('ABCBBABCC') == '2'\n"
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"BAACC\") == \"Bruno\"\n\"\"\""
    },
    {
        "number": 4914,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"BAACC\") == \"3\"\nassert solution(\"BAABC\") == \"Bruno\"\nassert solution(\"CBAAC\") == \"2\"\nassert solution(\"CBAAA\") == \"3\"\n\"\"\"\n\nn = int(input())\nans = \"ABC\" * n\nprint(len(ans))\nprint(\"ABC\")\nprint(\"BAC\")\nprint(\"CAB\")\nprint(\"ABA\")\nprint(\"ABB\")\nprint(\"BBA\")\nprint(\"BBB\")\nprint(\"CBA\")\nprint(\"CBB\")\nprint(\"ABA\")\nprint(\"ABB\")\nprint(\"BBA\")\nprint(\"BBB\")"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == (3, 543)\n\"\"\"\n\n\"\"\"\nSolution: O(n)\nInput:\n3 E right\n10 A wrong\n30 C wrong\n50 B wrong\n100 A wrong\n200 A right\n250 C wrong\n300 D right\n-1\nOutput:\n3 543\n\nRuntime: 32 ms, faster than 97.71% of Python3 online submissions for The Contest.\nMemory Usage: 12.7 MB, less than 100.00% of Python3 online submissions for The Contest.\n\"\"\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\") == \"3 543\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == (-1, 0)\nassert solution('3 E right') == (3, 5)\nassert solution('10 A wrong') == (1, 5)\nassert solution('30 C wrong') == (0, 30)\nassert solution('50 B wrong') == (1, 45)\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == \"3 543\"\n\"\"\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\") == (\n    3, 543)\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == (\n    3, 543\n)\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '0 -1'\n\"\"\"\n\nimport sys\nimport time"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 E right\\n10 A wrong\\n30 C wrong\\n50 B wrong\\n100 A wrong\\n200 A right\\n250 C wrong\\n300 D right\\n-1\") == (3, 543)\n"
    },
    {
        "number": 4915,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"3 E right\\n\"\n    \"10 A wrong\\n\"\n    \"30 C wrong\\n\"\n    \"50 B wrong\\n\"\n    \"100 A wrong\\n\"\n    \"200 A right\\n\"\n    \"250 C wrong\\n\"\n    \"300 D right\\n\"\n    \"-1\\n\") == (\"3 543\", None)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5') == '5'\nassert solution('10 5\\n5 5 5 5 2 2 2 2 1 1 1\\n4 1 1 3 2 2 3 1 4 1\\n5 5 4 1 2 3 1 5 3 2\\n4 5 4 3 2 2 2 1 4 3\\n4 2 3 3 1 1 1 4 2 3\\n5 2 1 1 2 2 2 5 4 1\\n3 1 3 1 4 2 5 3 1 2\\n1 4 3 1 3 2 3 1 5 5') == '-1'\n\n-----Problem-----\nSunny Tse can solve this problem in O(n^2) time. How is this possible?\n\nAnswer:\nIf you can make the path exactly one step, then there is one possible solution.\n\nIf you can make the path more than one step, then there are many possible solutions.\n\nThere is a shortcut: the total distance is equal to the sum of all distances between the tiles you visit. The sum of all distances between the tiles you visit is equal to the sum of all distances between the tiles you visit plus the distance between the tile you start on and the tile you end on.\n\nThis shortcut works because the sum of all distances between the tiles you visit is equal to the sum of all distances between the tiles you visit plus the distance between the tile you start on and the tile you end on.\n\n-----Solution-----\nThe code below works and runs in O(n^2) time and O(n^2) space."
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '5'\nassert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '-1'\nassert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '17'\nassert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '9'\nassert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '14'\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5') == '5'\n\n\"\"\"\nfrom sys import stdin\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_solution\n\n\"\"\"\n\nfrom collections import deque\nfrom itertools import permutations"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\") == \"5\"\n\"\"\""
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\\n\") == \"5\"\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1\\n3 4 2 5 2 5 3 4 4 2\") == \"5\"\n\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(5,5,1,1) == 5\nassert solution(4,5,4,2) == -1\nassert solution(10,5,1,1) == 5\nassert solution(3,3,1,1) == -1\nassert solution(4,4,1,1) == -1\n\"\"\""
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '5'\n"
    },
    {
        "number": 4916,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '5'\nassert solution('10 5\\n5 1 3 4 2 4 2 1 2 1\\n4 5 3 4 1 5 3 1 1 4\\n4 2 4 1 5 4 5 2 4 1\\n5 2 1 5 5 3 5 2 3 2\\n5 5 2 3 2 3 1 5 5 5\\n3 4 2 4 2 2 4 4 2 3\\n1 5 1 1 2 5 4 1 5 3\\n2 2 4 1 2 5 1 4 3 5\\n5 3 2 1 4 3 5 2 3 1') == '-1'\nassert solution('1 1\\n1') == '-1'\nassert solution('1 10\\n10 1') == '1'\nassert solution('4 4\\n1 2 3 4\\n2 3 4 1\\n3 4 1 2\\n4 1 2 3') == '4'\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2\\n1 7') == 'edward is right'\nassert solution('3\\n1 2\\n3 4\\n1 7') == 'edward is right'\nassert solution('3\\n1 2\\n3 4\\n1 7') == 'gunilla has a point'\nassert solution('3\\n1 2\\n3 4\\n1 7\\n3 7') == 'edward is right'\n\n------Solution------\n>>>\n\n-----Test Data-----\n2\n1 7\n5 5\n3\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3 4\n1 7\n3 7\n5\n1 2\n3"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(s) == \"gunilla has a point\"\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(test1) == 'edward is right'\nassert solution(test2) == 'gunilla has a point'\nprint('Test Success!')"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n1 7\\n5 5\") == \"gunilla has a point\"\nassert solution(\"2\\n1 7\\n5 5\") == \"edward is right\"\n\nprint(solution())\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1 7') == 'edward is right'\nassert solution('2\\n5 5') == 'gunilla has a point'\n\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n1 7\\n5 5') == 'gunilla has a point'\nassert solution('2\\n5 1\\n5 5') == 'edward is right'\n'''\n\nimport re"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n1 7\") == \"gunilla has a point\"\nassert solution(\"3\\n1 7\\n3 4\") == \"edward is right\"\nassert solution(\"3\\n1 7\\n3 8\") == \"edward is right\"\nassert solution(\"3\\n1 7\\n3 9\") == \"edward is wrong\"\nassert solution(\"3\\n1 7\\n3 10\") == \"edward is wrong\"\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2\\n1 7\") == \"edward is right\"\nassert solution(\"2\\n5 5\") == \"gunilla has a point\"\n\n-----Solution-----\nimport sys"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''3\n2 7\n1 1\n2 3''') == 'gunilla has a point'\nassert solution('''5\n1 6\n2 8\n3 8\n4 9\n5 8''') == 'edward is right'\n\n-----Explanation-----\nWe have $N = 2$, and we can see that the intervals of time at which we look back are:\n$[0, 1], [0, 2]$, $[0, 3], [0, 4]$, $[0, 5]$, $[0, 6], [0, 7]$, $[0, 8]$.\n\nFrom the intervals we can see that the last time at which we look back was second 1, and the second time at which we look back was second 5.\n\nSince the last time at which we look back was second 1, it is impossible that the pot started boiling at the same time, and hence, Edward can confirm his hypothesis.\n\nSince the last time at which we look back was second 5, it is possible that the pot started boiling at the same time, and hence, Gunilla can confirm her hypothesis.\n'''\n"
    },
    {
        "number": 4917,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(open('input.txt').read()) == 'edward is right'"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''\n10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10\n''') == \"'''\n10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10\n'''\"\nprint(solution('''\n10 11\nt 1 10\nt 1 2\nt 1 3\ns 1\ns 2\ns 3\ns 4\nt 5 6\ns 5\ns 6\ns 10\n'''))\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nprint(solution('test'))"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10 11\\nt 1 10\\nt 1 2\\nt 1 3\\ns 1\\ns 2\\ns 3\\ns 4\\nt 5 6\\ns 5\\ns 6\\ns 10\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"\n\n-----Explanation-----\nAll the size information about groups can be extracted from the previous input and the output can be printed as a result.\n\n\"\"\"\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 10\\n\"\n\"t 1 3\\n\"\n\"t 2 4\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 1\\n\"\n\"t 5 6\\n\"\n\"s 5\\n\"\n\"t 1 2\\n\"\n\"t 2 4\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"t 5 6\\n\"\n\"t 5 6\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"t 1 10\\n\"\n\"t 1 2\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"t 1 2\\n\"\n\"t 2 4\\n\"\n\"t 1 3\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"t 1 3\\n\"\n\"t 1 2\\n\"\n\"t 1 10\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"t 1 10\\n\"\n\"t 2 4\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"t 1 2\\n\"\n\"t 2 4\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s 1\\n\"\n\"s"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\na\\nb\\nc\\nd\\ne\\nf\\ng\\nh\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\na\\nb\\nc\\nd\\ne\\nf\\ng\\nh\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n4\\n4\"\n\n\"\"\"\n\nn, q = list(map(int, stdin.readline().split()))\nfor _ in range(q):\n    query = stdin.readline().split()\n    if query[0] == \"s\":\n        print(n - int(query[-1]))\n    elif query[0] == \"t\":\n        n -= int(query[-1])\n        n -= int(query[-2])\n        print(n)\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 2\\n\") == \"2\""
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 5\\n1\\n2\\n3') == '1\\n2\\n3\\n4'\nassert solution('4 11\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\nt 1 10\\nt 1 2\\nt 1 3\\nt 1 4\\nt 1 5\\nst 1\\nt 1 6\\nt 1 7\\nt 1 8\\nt 1 9\\nst 1\\nt 1 10\\nst 1\\nt 1 11\\nst 1\\nt 1 12\\nst 1\\nt 1 13\\nst 1\\nt 1 14\\nst 1\\nt 1 15\\n') == '1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n'\n"
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"10 11\\n\"\n\"t 1 10\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"s 4\\n\"\n\"t 5 6\\n\"\n\"s 5\\n\"\n\"s 6\\n\"\n\"s 10\") == '4\\n4\\n4\\n1\\n2\\n2\\n4\\n'\n\n\"\"\""
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"10 11\\n\"\n        \"t 1 10\\n\"\n        \"t 1 2\\n\"\n        \"t 1 3\\n\"\n        \"s 1\\n\"\n        \"s 2\\n\"\n        \"s 3\\n\"\n        \"s 4\\n\"\n        \"t 5 6\\n\"\n        \"s 5\\n\"\n        \"s 6\\n\"\n        \"s 10\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"\n\nassert solution(\"10 10\\n\"\n        \"t 1 2\\n\"\n        \"s 1\\n\"\n        \"t 1 2\\n\"\n        \"t 3 4\\n\"\n        \"s 3\\n\"\n        \"s 4\\n\"\n        \"t 1 2\\n\"\n        \"t 3 4\\n\"\n        \"t 1 2\\n\"\n        \"s 1\\n\"\n        \"s 2\\n\"\n        \"s 3\\n\"\n        \"s 4\") == \"1\\n2\\n2\\n1\\n2\\n1\\n4\\n\"\n\nassert solution(\"10 10\\n\"\n        \"t 1 2\\n\"\n        \"s 1\\n\"\n        \"s 1\\n\"\n        \"t 1 2\\n\"\n        \"t 3 4\\n\"\n        \"t 1 2\\n\"\n        \"s 1\\n\"\n        \"s 2\\n\"\n        \"s 3\\n\"\n        \"s 4\") == \"1\\n2\\n2\\n1\\n2\\n1\\n4\\n\"\n\nassert solution(\"10 10\\n\"\n        \"t 1 2\\n\"\n        \"s 1\\n\"\n        \"s 1\\n\"\n        \"t 1 2\\n\"\n        \"t 3 4\\n\"\n        \"t 1 2\\n\"\n        \"t 3 4\\n\"\n        \"s 1\\n\"\n        \"s 2\\n\"\n        \"s 3\\n\"\n        \"s 4\") == \"1\\n2\\n2\\n1\\n2\\n1\\n4\\n\"\n\nassert solution(\"10 10\\n\"\n        \"t 1 2\\n\"\n        \"s 1\\n\"\n        \"s 1\\n\"\n        \"t 1 2\\n\"\n        \"t 3 4\\n\"\n        \"t 1 2\\n\"\n        \"s 1\\n\"\n        \"s 2\\n\"\n        \"s 3\\n\"\n        \"s 4\") == \"1\\n2\\n2\\n1\\n2\\n1\\n4\\n\""
    },
    {
        "number": 4918,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"10 11\\n\"\n\"t 1 10\\n\"\n\"t 1 2\\n\"\n\"t 1 3\\n\"\n\"s 1\\n\"\n\"s 2\\n\"\n\"s 3\\n\"\n\"s 4\\n\"\n\"t 5 6\\n\"\n\"s 5\\n\"\n\"s 6\\n\"\n\"s 10\") == \"4\\n4\\n4\\n1\\n2\\n2\\n4\\n\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\n\") == '2016\\n1982\\n2016\\n'\nprint(solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\n\"))\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('\\n') == ''\nassert solution('Iceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n') == '2015\\n1982\\n2016\\n'\nprint(solution(stdin))"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n\"\"\"\n4\nIceland 2016\nSweden 2015\nIceland 1982\nNorway 1999\n\"\"\"\n) == \"\"\"\n2015\n1982\n2016\n\"\"\"\n\nassert solution(\n\"\"\"\n3\nIceland 1\nIceland 2\nNorway 1\n\"\"\"\n) == \"\"\"\n1981\n1996\n\"\"\"\n\nassert solution(\n\"\"\"\n4\nIceland 2\nIceland 1\nIceland 3\nIceland 4\n\"\"\"\n) == \"\"\"\n1981\n1980\n1982\n1996\n\"\"\"\n\n)\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\\n') == '2015\\n1982\\n2016\\n'\n\n---\n\nimport itertools"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''4\nIceland 2016\nSweden 2015\nIceland 1982\nNorway 1999''') == '''2015\n1982\n2016\n'''\n\nassert solution('''2\nAustralia 0\nIceland 1\nAustralia 1\nIceland 2''') == '''Iceland\nIceland\n'''\n\nassert solution('''2\nAustralia 0\nAustralia 1\nIceland 1\nIceland 2''') == '''Iceland\nIceland\n'''\n\nassert solution('''1\nGermany 1\n''') == '''Germany\n'''\n\nassert solution('''1\nUnited States 1\n''') == '''United States\n'''"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\") == '2015\\n1982\\n2016\\n'\n\nSample Input:\n10\nIceland 2016\nSweden 2015\nIceland 1982\nNorway 1999\nIceland 2012\nIceland 2012\nIceland 2012\nIceland 2012\nIceland 2012\nIceland 2012\nIceland 2012\nIceland 2012\n3\nIceland 1\nIceland 2\nIceland 3\n\nSample Output:\n2015\n2012\n2016\n\"\"\"\n\nn = int(input())\nDict = dict()\nfor _ in range(n):\n    s = input().split()\n    Dict[s[0]] = s[1]\nfor _ in range(int(input())):\n    s, k = input().split()\n    print(Dict[s])\n"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2') == '2015\\n1982\\n2016'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2015\\n1982\\n2016\""
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4\\nIceland 2016\\nSweden 2015\\nIceland 1982\\nNorway 1999\\n3\\nSweden 1\\nIceland 1\\nIceland 2\") == \"2015\\n1982\\n2016\"\n\"\"\""
    },
    {
        "number": 4919,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"\"\"\n    4\n    Iceland 2016\n    Sweden 2015\n    Iceland 1982\n    Norway 1999\n    3\n    Sweden 1\n    Iceland 1\n    Iceland 2\n    \"\"\"\n) == '2015\\n1982\\n2016'\nprint(solution(input()))"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\n\n\"\"\"\n\nfrom collections import Counter\nimport math"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('abbcccddddeeeee') == 10\n\"\"\""
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('abbcccddddeeeee') == 10\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"abccddde\") == 10\nassert solution(\"abbcccddddeeeee\") == 10\nassert solution(\"abbcccddddde\") == 10\n\"\"\"\n\nimport itertools\nfrom collections import Counter\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\n\"\"\""
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10\n\n-------\n>>> solution(\"abbcccddddeeeee\")\n10\n\n-------\n>>> solution(\"abcdefghijklmnopqrstuvwxyz\")\n0\n\n-------\n>>> solution(\"aabbcccddddeeeee\")\n0\n\n-------\n>>> solution(\"ab\")\n0\n\n-------\n>>> solution(\"\")\n1\n\n-------\n>>> solution(\"abab\")\n0\n\n-------\n>>> solution(\"aaa\")\n3\n\n-------\n>>> solution(\"a\")\n1\n\n-------\n>>> solution(\"abab\")\n0\n\n-------\n>>> solution(\"abbcccddddeeeee\")\n10\n\n-------\n>>> solution(\"abbcccddddeeeeee\")\n0\n\n>>> solution(\"abbcccddddeeeee\")\n10\n\n>>> solution(\"abbcccddddeeeeee\")\n0\n\n>>> solution(\"abbcccddddeeeeee\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeee\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeee\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeee\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeee\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeee\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeee\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeee\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeer\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeer\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\"abbcccddddeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr\")\n0\n\n>>> solution(\""
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"abbcccddddeeeee\") == 10"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('a b') == 'ab'\nassert solution('a b c') == 'abc'\nassert solution('a b c d') == 'abcd'\n"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('abbcccddddeeeee') == 10"
    },
    {
        "number": 4920,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == 0\nassert solution('a') == 0\nassert solution('aa') == 0\nassert solution('aa') == 0\nassert solution('a') == 0\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\") == \\\n    \". will save the world from inefficiency... and its humanity\"\nassert solution(\"Inefficiency is a blight on the world and its\") == \\\n    \". is a blight on.. and its\"\n\"\"\"\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\") == \"Engineering will save the world from inefficiency\"\nassert solution(\"Inefficiency is a blight on the world and its\") == \"Inefficiency. is a blight on the world and its\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\") == \"Engineering will save the world from inefficiency\\n. is a blight on the world and its\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nInefficiency is a blight on the world and its\") == \"Engineering will save the world from inefficiency\\n. is a blight on the world and its\\n. is a blight on the world and its\"\n\nSolution"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''Engineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity''') == '''Engineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity'''\nassert solution('''Engineering will save the world from inefficiency\nInefficiency is a blight on the world and its\nhumanity\n''') == '''Engineering will save the world from inefficiency\n. is a blight on.. and its\nhumanity'''\n\n-----Constraints-----\nThe test cases will always be valid and in the format described.\nIt is guaranteed that all lines will contain at most $200$ characters, and no line will contain more than $100$ characters.\n\n------Notes------\n\n'''"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('Hello world') == 'Hello world'\nassert solution('Hello world. Hello world') == 'Hello world.'\nassert solution('a a a a a a a a a a a a a') == 'a.'\nassert solution('i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i i"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\\n\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\\n\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\\n\\n\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\\n\\n\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\\n\\n\\n\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\\n\\n\\n\"\nassert solution(\"Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\\n\\n\\n\\n\") == \"Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\\n\\n\\n\\n\"\n\nSample Input:\nThe fun is in the science\nThe great fun is in the science\nThe great fun is in the science\n\nSample Output:\nThe fun is in the science\nThe. is in the science\nThe. is in the science\n\n\"\"\"\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\\nEngineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\\nEngineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity\\n') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its\\nhumanity') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its\\nhumanity'\nassert solution('Engineering will save the world from inefficiency\\nInefficiency is a blight on the world and its') == 'Engineering will save the world from inefficiency\\n. is a blight on.. and its'\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Engineering will save the world from inefficiency\\n\"\n    \"Inefficiency is a blight on the world and its\\n\"\n    \"humanity\") == \"Engineering will save the world from inefficiency\\n.\"\nassert solution(\"Engineering will save the world from inefficiency\\n\"\n    \"Inefficiency is a blight on the world and its\\n\"\n    \"humanity\") == \"Engineering will save the world from inefficiency\\n.\"\n\"\"\"\n\nimport os\nimport sys\n"
    },
    {
        "number": 4921,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(solution_tester.stdin_str(\n    '/Users/thomaswileman/Desktop/wileman/aoc/2020/day_04/test_input.txt')) == solution_tester.stdout_str(\n    '/Users/thomaswileman/Desktop/wileman/aoc/2020/day_04/test_output.txt')\n\"\"\"\n\nimport os\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\n\"3 3\\n1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n\") == \"unsatisfactory\"\n\"\"\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3''') == 'unsatisfactory'\nassert solution('''5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3''') =='satisfactory'\n\n'''\nSample Input 2\n5 2\n-1 2 3\n1 -2 3\n1 -2 -3\n1 2 -3\n1 2 3\nSample Output 2\nsatisfactory\n'''\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\\n-1 -2 3\") == \"unsatisfactory\"\nassert solution(\"1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\") == \"unsatisfactory\"\nassert solution(\"1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"satisfactory\"\nassert solution(\"1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n1 2 3\") == \"satisfactory\"\nassert solution(\"1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n1 2 3\\n1 2 3\") == \"satisfactory\"\n\nsolution(stdin)\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3''') == 'unsatisfactory'\n\nassert solution('''6 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3\n1 -2 -1''') =='satisfactory'\n\nassert solution('''5 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3\n1 -2 -1''') =='satisfactory'\n\nassert solution('''6 3\n-1 2 3\n-1 -2 3\n1 -2 3\n1 -2 -3\n1 2 -3\n1 -2 -1''') == 'unsatisfactory'\n\nprint('Successfully solved {}'.format(__file__))\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\nassert solution(\"3 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"satisfactory\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"unsatisfactory\"\nassert solution(\"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == \"satisfactory\"\n\"\"\""
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\\n') == 'unsatisfactory'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3') == 'unsatisfactory'\n\"\"\"\n"
    },
    {
        "number": 4922,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    \"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") == 'unsatisfactory'\nassert solution(\n    \"5 3\\n-1 2 3\\n-1 -2 3\\n1 -2 3\\n1 -2 -3\\n1 2 -3\") =='satisfactory'\n\"\"\"\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''3\n1 1 1\n''') == 'none'\n\nassert solution('''5\n1 1 2 2 1\n''') == 'none'\n\nassert solution('''2\n1 1\n''') == 'none'\n\nassert solution('''3\n1 1 2\n''') == 'none'\n\nassert solution('''6\n2 2 2 2 2 2\n''') == 'none'"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1\\n1\\n1\\n1') == 'none'\nassert solution('4\\n1\\n2\\n3\\n1') == '0'\nassert solution('4\\n1\\n2\\n3\\n5') == 'none'\nassert solution('4\\n1\\n2\\n3\\n4') == '0'\nassert solution('4\\n1\\n2\\n3\\n6') == '0'\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 4 5\") == \"none\"\n\nassert solution(\"1 1 1 2 3 3\") == \"none\"\n\nassert solution(\"4 5 5 5 5 5\") == \"none\"\n\nassert solution(\"1 1 2 2 2\") == \"none\"\n\nassert solution(\"4 1 5 3 2 2\") == \"none\""
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n6 6\\n1 1 2 3\") == \"none\"\nassert solution(\"5\\n1 1 2 2\\n1 1 2 3\\n1 1 2 3\\n1 1 2 3\") == \"none\"\nassert solution(\"5\\n4 4\\n2 2 2\\n2 2 1\\n1 1 1\") == \"none\"\nassert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\nassert solution(\"8\\n2 2 2 2 2 2 2 2\") == \"none\"\n\nprint(solution(\"3\\n1 1 2 3\"))\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('8\\n1 1 1 5 3 4 6 6') == '4'\nassert solution('8\\n1 1 1 1 5 3 4 6 6') == 'none'\nassert solution('8\\n1 1 1 1 1 5 3 4 6 6') == 'none'\nassert solution('8\\n1 1 1 1 1 5 3 4 4 6 6') == 'none'\nassert solution('8\\n1 1 1 1 1 1 5 3 4 4 6 6') == 'none'"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 1 1 1\") == \"none\"\nassert solution(\"6\\n1 1 1 1 2 2\") == \"none\"\nassert solution(\"4\\n2 2 4 6\") == \"none\"\nassert solution(\"5\\n1 1 3 4 6\") == \"none\"\nassert solution(\"8\\n1 1 1 1 2 2 2 2\") == \"none\"\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\na = [int(i) for i in sys.stdin.readline().split()]\n\nuniq = [0]*7\n\nfor i in a:\n    if uniq[i] == 0:\n        uniq[i] += 1\n    else:\n        uniq[i] -= 1\n\nfor i in range(7):\n    if uniq[i] >= 0:\n        print(i)\n        break\nelse:\n    print(\"none\")\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('8\\n1 1 1 5 3 4 6 6') == '4'\nassert solution('8\\n1 1 1 5 3 4 6 6') == '4'\nassert solution('8\\n3 5 4 3 6 1 1') == 'none'\nassert solution('8\\n1 1 1 5 3 4 6 6') == '4'\nassert solution('8\\n1 1 5 3 4 6 6') == 'none'\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"8\\n1 1 1 5 3 4 6 6\") == \"4\"\nassert solution(\"8\\n1 1 2 5 3 4 6 6\") == \"none\"\nassert solution(\"8\\n1 2 2 5 3 4 6 6\") == \"none\"\nassert solution(\"8\\n1 2 3 4 5 6 6\") == \"none\"\nassert solution(\"8\\n1 2 3 5 3 4 6 6\") == \"none\"\n\nprint(\"Successfully solved!\")\n"
    },
    {
        "number": 4923,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('a\\nb\\nc\\nd\\ne\\nf') == 'none'\nassert solution('1 1 1 2 2 3 3') == 'none'\n\n---Problem 2---\nThe Brute Force Attack\nThe Task\n\nYou have been provided with a function that can hash a string into a 32 bit integer. You need to create a hash function that will be able to convert a string of length $n$ into an integer in less than $O(n)$ time.\n\nThe hash function will create a number with the first $m$ digits representing the characters in the string. You need to output the number as an integer.\n\nThe number will be between 0 and $2^n - 1$, and the $0$th digit will be 0.\n\nThe character at position $i$ in the string should be encoded at position $i * m + i$ in the number.\n\nFor example, if the string was \"problems\", the hash function would be able to convert that string into a number of at least 38 bits. The first 36 digits would be 0, since there are 36 characters in the string. The 36th character (the $i$th character) would be represented by the number $38 * 36 + 36 = 1456$. There are also 36 zeroes in the beginning, so the number will have at least 38 bits. Thus, the resulting number will be $38 * 36 + 36 = 1456 \\times 36 = 140736$."
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"04:00:00\") == \"16:00:00\"\nassert solution(\"06:30:45\") == \"15:30:45\"\nassert solution(\"18:15:34\") == \"21:15:34\"\n\"\"\""
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"22:00:00\") == \"08:00:00\"\nassert solution(\"22:59:59\") == \"01:00:00\"\nassert solution(\"23:00:00\") == \"01:00:00\"\nassert solution(\"01:00:00\") == \"01:00:00\"\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''20:00:00\n04:00:00''') == '08:00:00'\n'''\n\n'''\n\nfrom collections import defaultdict\nfrom dataclasses import dataclass\nfrom typing import Dict, List, Optional\n\nfrom dataclasses_json import dataclass_json\n\n\n@dataclass_json\n@dataclass\nclass BorkoTime:\n    hours: int\n    minutes: int\n    seconds: int\n\n    def __init__(self, hours: int, minutes: int, seconds: int):\n        self.hours = hours\n        self.minutes = minutes\n        self.seconds = seconds\n\n    @property\n    def time(self) -> str:\n        return f\"{self.hours:02d}:{self.minutes:02d}:{self.seconds:02d}\"\n\n\n@dataclass_json\n@dataclass\nclass BorkoMirko:\n    mirko_time: BorkoTime\n    borko_time: BorkoTime\n    borko_microprocessor: str\n    borko_sodium: str\n    borko_water: str\n    borko_bag: str\n\n    def __init__(self, mirko_time: BorkoTime, borko_time: BorkoTime, borko_microprocessor: str, borko_sodium: str, borko_water: str, borko_bag: str):\n        self.mirko_time = mirko_time\n        self.borko_time = borko_time\n        self.borko_microprocessor = borko_microprocessor\n        self.borko_sodium = borko_sodium\n        self.borko_water = borko_water\n        self.borko_bag = borko_bag\n\n    def calculate_borko_time(self) -> str:\n        mirko_time_seconds = self.mirko_time.hours * 3600 + self.mirko_time.minutes * 60 + self.mirko_time.seconds\n        borko_time_seconds = self.borko_time.hours * 3600 + self.borko_time.minutes * 60 + self.borko_time.seconds\n        borko_microprocessor_seconds = int(self.borko_microprocessor)\n        borko_sodium_seconds = int(self.borko_sodium)\n        borko_water_seconds = int(self.borko_water)\n        borko_bag_seconds = int(self.borko_bag)\n\n        return BorkoTime(0, 0, 0)\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"20:00:00\") == \"20:00:00\"\nassert solution(\"04:00:00\") == \"04:00:00\"\nassert solution(\"06:00:00\") == \"06:00:00\"\nassert solution(\"22:00:00\") == \"22:00:00\"\n\"\"\"\n\nimport datetime"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('20:00:00') == '08:00:00'\nassert solution('04:00:00') == '12:00:00'\nassert solution('20:00:00')!= '08:00:00'\nassert solution('20:00:00')!= '16:00:00'\n\n\"\"\"\n\nfrom datetime import datetime\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"04:00:00\") == \"08:00:00\"\nassert solution(\"08:00:00\") == \"08:00:00\"\nassert solution(\"20:40:00\") == \"08:40:00\"\nassert solution(\"23:59:59\") == \"23:59:59\"\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"23:59:59\") == \"07:59:59\"\nassert solution(\"23:00:00\") == \"00:00:00\"\nassert solution(\"01:20:00\") == \"00:20:00\"\nassert solution(\"01:00:00\") == \"23:59:59\"\n\"\"\"\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"20:00:00\") == \"08:00:00\"\nassert solution(\"04:00:00\") == \"12:00:00\"\nassert solution(\"19:59:59\") == \"08:59:59\"\nassert solution(\"00:00:00\") == \"00:00:00\"\nassert solution(\"00:30:00\") == \"00:30:00\"\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\n    \"20:00:00\"\n) == \"08:00:00\"\nassert solution(\n    \"04:00:00\"\n) == \"08:00:00\"\nassert solution(\n    \"19:59:59\"\n) == \"23:59:59\"\nassert solution(\n    \"0:00:00\"\n) == \"0:00:00\"\nassert solution(\n    \"24:00:00\"\n) == \"00:00:00\"\n\"\"\"\n\nfrom datetime import datetime\n\nstdin = input().split(\":\")\nstdin_2 = input().split(\":\")\n\ndt = datetime(\n    int(stdin[0]),\n    int(stdin[1]),\n    int(stdin[2]),\n    int(stdin_2[0]),\n    int(stdin_2[1]),\n    int(stdin_2[2])\n)\n\ndt_2 = datetime(\n    int(stdin_2[0]),\n    int(stdin_2[1]),\n    int(stdin_2[2]),\n    int(stdin[0]),\n    int(stdin[1]),\n    int(stdin[2])\n)\n\ndelta = dt_2 - dt\n\nprint(delta)\n"
    },
    {
        "number": 4924,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '20:00:00'\n) == '08:00:00'\n\nassert solution(\n    '23:59:59'\n) == '23:59:59'\n\nassert solution(\n    '12:10:10'\n) == '12:10:10'\n\nassert solution(\n    '00:00:00'\n) == '00:00:00'\n\nprint('All tests passed.')\n\n\"\"\"\n\nimport unittest\nfrom typing import List\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        now = stdin.split(':')\n        time = int(now[0]) * 3600 + int(now[1]) * 60 + int(now[2])\n        exp = '04:00:00'\n        exp_h, exp_m, exp_s = exp.split(':')\n        exp_time = int(exp_h) * 3600 + int(exp_m) * 60 + int(exp_s)\n\n        if time < exp_time:\n            return now[0] + ':' + now[1] + ':' + now[2]\n        else:\n            return str(int(now[0]) + 1).zfill(2) + ':' + now[1] + ':' + now[2]\n\n\nclass TestSolution(unittest.TestCase):\n    def setUp(self):\n        self.solution = Solution()\n\n    def test(self):\n        self.assertEqual(\n            '08:00:00',\n            self.solution(\n                '20:00:00'\n            )\n        )\n        self."
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n') == '1'\nassert solution('2 3\\n') == '2'\nassert solution('1 2\\n3 4\\n') == '1'\nassert solution('2 3\\n1 4\\n') == '2'\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == 4\n\"\"\"\n\nimport math"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"31 6\") == 4\n\n-----Notes-----\nConsider the following problem: you have a roll of length $\\ell$ and can only use $n$ centimetres of it. Every time you visit the toilet, you use exactly $n$ centimetres of the roll. This roll runs out after visiting a toilet and you need to replace it. Now you need to use the backup roll and not use the regular roll for toilet visits. \n\nIt is easy to show that, no matter how large $n$ is, $n$ can always be minimized to the smallest value $\\leq \\frac{\\ell}{2}$ (this is because if you have $\\ell$ centimetres to use, you can always replace the roll by using the backup roll).\n\nNow, we can argue that the backup roll is always bigger than the regular roll. Then we can use a greedy algorithm to select the minimal value of $n$ to achieve the required answer. That is, if we are at step $i$ of the algorithm, we can replace the regular roll with the backup roll, and if we are at step $i + 1$ we can replace the backup roll with the regular roll. The first step of the algorithm is to replace the regular roll. This means that we can always replace the regular roll with the backup roll at step $i + 1$.\n\nThe second step of the algorithm is to replace the backup roll. This means that we can always replace the backup roll with the regular roll at step $i + 2$.\n\nThe third step of the algorithm is to replace the regular roll. This means that we can always replace the regular roll with the backup roll at step $i + 3$.\n\nThe fourth step of the algorithm is to replace the regular roll. This means that we can always replace the regular roll with the backup roll at step $i + 4$.\n\nThe fifth step of the algorithm is to replace the regular roll. This means that we can always replace the regular roll with the backup roll at step $i + 5$.\n\nThe sixth step of the algorithm is to replace the regular roll. This means that we can always replace the regular roll with the backup roll at step $i + 6$.\n\nThe seventh step of the algorithm is to replace the regular roll. This means that we can always replace the regular roll with the backup roll at step $i + 7$.\n\nThe eight step of the algorithm is to replace the regular roll. This means that we can always replace the regular roll with the backup roll at step $i + 8$.\n\nThe ninth step of the algorithm is to replace the regular roll. This means that we can always replace the regular roll with the backup roll at step $i + 9$.\n\nThe tenth step of the algorithm is to replace the regular roll. This means that we can always replace the regular roll with the backup roll at step $i + 10$.\n\nThe algorithm terminates at step $10$. This means that we can always replace the regular roll with the backup roll at step $11$, and since we use the backup roll at step $11$ to replace the regular roll, we can replace the regular roll at step $11$ with the backup roll at step $12$.\n\nIn conclusion, the final answer is $12$.\n\n-----Hash Table-----\nThe algorithm is similar to the one we have discussed in class, but with a slight modification. In the class we had the following recurrence:\n\n- at step i, if i < n, then it is possible to replace the regular roll with the backup roll\n- at step i, if i >= n, then it is possible to replace the backup roll with the regular roll\n\nHowever, if the backup roll is used to replace the regular roll, then it is possible to use the regular roll to replace the backup roll at step i + 1. Thus, we have the following recurrence:\n\n- at step i, if i < n, then it is possible to replace the regular roll with the backup roll\n- at step i, if i >= n, then it is possible to replace the backup roll with the regular roll at step i + 1\n\nThe base case is the following: if i < n, then it is possible to replace the regular roll with the backup roll. If i >= n, then it is possible to replace the backup roll with the regular roll at step i + 1.\n\nThe solution is to iterate over the range of step values, and maintain a dictionary that maps each step to the minimum value of $n$ such that we can replace the regular roll with the backup roll at that step.\n\nThe following is an O(n) algorithm, where n is the number of steps, and it is relatively straightforward:\n\n- initialize dictionary with all keys to None\n- for each step i, check if i < n and if the regular roll can be replaced with the backup roll. Then we need to update the dictionary with the step i as the key to the minimum value of n that can be used to replace the regular roll with the backup roll at that step\n- after checking all steps, return the minimum value of n, where the regular roll can be replaced with the backup roll\n\nAn example of a solution:"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('31 6') == '4'\nassert solution('4 8') == '4'\nassert solution('0 0') == '0'\nassert solution('1 0') == '0'\nassert solution('2 1') == '0'\n\nimport sys\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"31 6\") == \"4\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('31 6') == 4\nprint(solution(input()))\n\n-----Test Format-----\nThe test format is described by the following examples.\n\nTest 1\nInput\n\n11 7\nOutput\n\n5\n\n-----\nSample 1\nThe regular roll has length 11 and Nick starts with 6 centimetres.\n\nIn the first visit he takes 7 centimetres and then goes to the store, so he gets a new roll of length 11.\n\nIn the second visit he takes 6 centimetres and then goes to the store, so he gets a new roll of length 10.\n\nIn the third visit he takes 6 centimetres and then goes to the store, so he gets a new roll of length 9.\n\nIn the fourth visit he takes 5 centimetres and then goes to the store, so he gets a new roll of length 8.\n\nIn the fifth visit he takes 5 centimetres and then goes to the store, so he gets a new roll of length 7.\n\nIn the sixth visit he takes 5 centimetres and then goes to the store, so he gets a new roll of length 6.\n\nIn the seventh visit he takes 4 centimetres and then goes to the store, so he gets a new roll of length 5.\n\nIn the eighth visit he takes 4 centimetres and then goes to the store, so he gets a new roll of length 4.\n\nIn the ninth visit he takes 4 centimetres and then goes to the store, so he gets a new roll of length 3.\n\nIn the tenth visit he takes 3 centimetres and then goes to the store, so he gets a new roll of length 2.\n\nIn the eleventh visit he takes 3 centimetres and then goes to the store, so he gets a new roll of length 1.\n\nIn the twelfth visit he takes 2 centimetres and then goes to the store, so he gets a new roll of length 0.\n\nThis process continues until all rolls run out, so he can use his backup rolls. In the first visit he takes the first backup roll, 4 centimetres, then replaces it with the regular roll, 11 centimetres. In the second visit he takes the second backup roll, 5 centimetres, then replaces it with the regular roll, 10 centimetres. In the third visit he takes the third backup roll, 6 centimetres, then replaces it with the regular roll, 9 centimetres. In the fourth visit he takes the fourth backup roll, 5 centimetres, then replaces it with the regular roll, 8 centimetres. In the fifth visit he takes the fifth backup roll, 4 centimetres, then replaces it with the regular roll, 7 centimetres. In the sixth visit he takes the sixth backup roll, 3 centimetres, then replaces it with the regular roll, 6 centimetres. In the seventh visit he takes the seventh backup roll, 2 centimetres, then replaces it with the regular roll, 5 centimetres. In the eighth visit he takes the eighth backup roll, 1 centimetres, then replaces it with the regular roll, 4 centimetres. In the ninth visit he takes the ninth backup roll, 0 centimetres, then replaces it with the regular roll, 3 centimetres. In the tenth visit he takes the tenth backup roll, -1 centimetre, then replaces it with the regular roll, 2 centimetres. In the eleventh visit he takes the eleventh backup roll, -2 centimetres, then replaces it with the regular roll, 1 centimetres. In the twelfth visit he takes the twelfth backup roll, -3 centimetres, then replaces it with the regular roll, 0 centimetres.\n\nThe process ends when the regular roll runs out, and thus we can use all backup rolls.\n\nThe process ends when the regular roll runs out, and thus we can use all backup rolls.\n\nSo, the smallest integer $k$ such that crises will never happen when using $k$ layers of rolls is 4.\n\nSample 2\nInput\n\n11 7\nOutput\n\n4\n\n-----\nSample 2\nThe regular roll has length 11 and Nick starts with 6 centimetres.\n\nIn the first visit he takes 7 centimetres and then goes to the store, so he gets a new roll of length 11.\n\nIn the second visit he takes 6 centimetres and then goes to the store, so he gets a new roll of length 10.\n\nIn the third visit he takes 6 centimetres and then goes to the store, so he gets a new roll of length 9.\n\nIn the fourth visit he takes 5 centimetres and then goes to the store, so he gets a new roll of length 8.\n\nIn the fifth visit he takes 5 centimetres and then goes to the store, so he gets a new roll of length 7.\n\nIn the sixth visit he takes 5 centimetres and then goes to the store, so he gets a new roll of length 6.\n\nIn the seventh visit he takes 4 centimetres and then goes to the store, so he gets a new roll of length 5.\n\nIn the eighth visit he takes 4 centimetres and then goes to the store, so he gets a new roll of length 4.\n\nIn the ninth visit he takes 4 centimetres and then goes to the store, so he gets a new roll of length 3.\n\nIn the tenth visit he takes 3 centimetres and then goes to the store, so he gets a new roll of length 2.\n\nIn the eleventh visit he takes 3 centimetres and then goes to the store, so he gets a new roll of length 1.\n\nIn the twelfth visit he takes 2 centimetres and then goes to the store, so he gets a new roll of length 0.\n\nThis process continues until all rolls run out, so he can use his backup rolls. In the first visit he takes the first backup roll, 4 centimetres, then replaces it with the regular roll, 11 centimetres. In the second visit he takes the second backup roll, 5 centimetres, then replaces it with the regular roll, 10 centimetres. In the third visit he takes the third backup roll, 6 centimetres, then replaces it with the regular roll, 9 centimetres. In the fourth visit he takes the fourth backup roll, 5 centimetres, then replaces it with the regular roll, 8 centimetres. In the fifth visit he takes the fifth backup roll, 4 centimetres, then replaces it with the regular roll, 7 centimetres. In the sixth visit he takes the sixth backup roll, 3 centimetres, then replaces it with the regular roll, 6 centimetres. In the seventh visit he takes the seventh backup roll, 2 centimetres, then replaces it with the regular roll, 5 centimetres. In the eighth visit he takes the eighth backup roll, 1 centimetres, then replaces it with the regular roll, 4 centimetres. In the ninth visit he takes the ninth backup roll, 0 centimetres, then replaces it with the regular roll, 3 centimetres. In the tenth visit he takes the tenth backup roll, -1 centimetre, then replaces it with the regular roll, 2 centimetres. In the eleventh visit he takes the eleventh backup roll, -2 cent"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('31 6') == '4'\n\nassert solution('1 1') == '1'\n\nassert solution('1 2') == '2'\n\nassert solution('1 3') == '2'\n\nassert solution('1 4') == '3'"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"31 6\") == 4\n'''"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('31 6\\n') == 4\n\"\"\"\n"
    },
    {
        "number": 4925,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"31 6\") == 4\nassert solution(\"5 5\") == 1\nassert solution(\"11 11\") == 1\nassert solution(\"31 31\") == 1\n\"\"\""
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3') == '2.6666666666666665'\n\"\"\"\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3\") == 2.6666666666666665\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"2.6666666666666665\"\nassert solution(\"4\") == \"2.8333333333333335\"\nassert solution(\"10\") == \"2.706885000000000000000000005\"\n\nimport math\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3') == 2.6666666666666665\n\n\"\"\""
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3') == '2.6666666666666665'\n\"\"\"\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2.6666666666666665\"\n\nimport sys"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(3) == 2.6666666666666665\n\"\"\"\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3') == 2.6666666666666665\nprint(solution(stdin))\n'''\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3\") == 2.6666666666666665\n\"\"\"\n\nimport math\n\nn = int(stdin.readline().strip())\n\nprint(math.e ** (1 / n))\n"
    },
    {
        "number": 4926,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3') == 2.6666666666666665\n\"\"\"\nimport math\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"1 3 5\") == \"opponent\"\nassert solution(\"10 100 100\") == \"paul\"\nassert solution(\"7 3 3\") == \"opponent\"\nassert solution(\"2 5 10\") == \"paul\"\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 7\") == 'paul'\nassert solution(\"10 7 5\") == 'opponent'\nassert solution(\"5 3 0\") == 'paul'\nassert solution(\"0 5 0\") == 'opponent'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"5 4 7\") == \"opponent\"\nassert solution(\"5 3 4\") == \"paul\"\nassert solution(\"5 4 3\") == \"opponent\"\nassert solution(\"7 5 3\") == \"opponent\"\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"6 5 9\") == \"opponent\"\n\"\"\""
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(5 3 7) == \"paul\"\nassert solution(3 2 5) == \"opponent\"\nassert solution(9 3 9) == \"paul\"\n\nSample Input:\n3 2 5\nSample Output:\nopponent\n\nassert solution(3 2 5) == \"opponent\"\nassert solution(9 3 9) == \"paul\"\n\nSample Input:\n9 3 9\nSample Output:\npaul"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 3 7\") == 'paul'\n\nassert solution(\"3 5 3\") == 'opponent'\n\n\"\"\""
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 3 7') == 'paul'\nassert solution('4 2 5') == 'opponent'\nassert solution('6 0 3') == 'paul'\nassert solution('7 7 7') == 'opponent'\nassert solution('7 7 0') == 'paul'\n\"\"\""
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"3 3 7\") == \"opponent\"\nassert solution(\"10 100 100\") == \"paul\"\nassert solution(\"5 3 2\") == \"opponent\"\nassert solution(\"7 10 4\") == \"paul\"\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4927,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 3 7\") == \"paul\"\nassert solution(\"2 7 1\") == \"opponent\"\n\n\"\"\"\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2') == 2\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 2\n\"\"\""
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1\\n\") == \"2\"\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == 2\n\"\"\"\nimport math\nfrom typing import List\nimport unittest\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n') == 2\n\"\"\"\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"2\"\nprint(solution(\"1\"))\n\"\"\"\nimport math"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1') == 2\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n    '1'\n) == '2'\n\"\"\"\nimport unittest\nfrom unittest.mock import patch\n"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == '2'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4928,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4') == 2\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"123a\") == \"No\"\n\n-----Solution-----\nclass Solution:\n    def validate(self, s: str) -> str:\n        if s == s.upper() or s == s.lower():\n            return \"Yes\"\n        elif s.count(\"0\") <= 1:\n            return \"No\"\n        else:\n            return \"Yes\" if len(set(list(s))) == 10 and len(s) == 10 else \"No\"\n\nsolution = Solution().validate\n\n-----Test-----\nimport unittest\nfrom utils import compare\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_compare(self):\n        self.assertEqual(compare(solution, \"123\", \"123a\"), \"Yes\")\n        self.assertEqual(compare(solution, \"123789\", \"123789\"), \"Yes\")\n        self.assertEqual(compare(solution, \"123789a\", \"123789a\"), \"No\")\n        self."
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('123') == 'Yes'\nassert solution('123a') == 'No'\nassert solution('1234') == 'Yes'\nassert solution('12345') == 'No'\nassert solution('123456') == 'Yes'\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'No'\nassert solution('123') == 'No'\nassert solution('123a') == 'Yes'\nassert solution('1234567') == 'No'\nassert solution('12345678') == 'No'\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"123a\") == \"No\"\nassert solution(\"123a123a\") == \"No\"\nassert solution(\"1234\") == \"No\"\nassert solution(\"12341234\") == \"No\"\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 'Yes'\nassert solution('123') == 'No'\nassert solution('123a') == 'No'\nassert solution('123456') == 'No'\nassert solution('12345a') == 'No'\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"abc\") == \"No\"\nassert solution(\"abcdefg\") == \"No\"\nassert solution(\"12345\") == \"Yes\"\nassert solution(\"a1b2c3d4\") == \"Yes\"\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''123\n123a''') == 'No'\nassert solution('''123\nc0deninja5''') == 'Yes'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"123a\") == \"No\"\nassert solution(\"0aa1\") == \"No\"\nassert solution(\"12a0\") == \"Yes\"\nassert solution(\"12a11\") == \"Yes\"\n\"\"\""
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"123\", \"123\") == \"Yes\"\nassert solution(\"123\", \"1234\") == \"No\"\nassert solution(\"123\", \"1234a\") == \"No\"\n\nassert solution(\"123\", \"12345\") == \"Yes\"\nassert solution(\"123\", \"12345a\") == \"No\""
    },
    {
        "number": 4929,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"123\") == \"Yes\"\nassert solution(\"123a\") == \"No\"\nassert solution(\"101\") == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\n
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('papapripikapa') == 'zelena paprika'\nassert solution('kemija') == 'kepemipijapa'\nassert solution('zelena paprika') == 'zelena paprika'\nassert solution('kemija') == 'kepemipijapa'\n\"\"\"\n\n\"\"\"\nProblems:\n- cannot take multiple consecutive vowels\n- cannot take multiple consecutive consonants\n- cannot take multiple consecutive spaces\n- cannot have multiple consecutives spaces, ex: \"kapele \"\n\"\"\"\n\nclass Solution:\n    def decodeString(self, s):\n        def get_num(s):\n            num = ''\n            while s and s[0].isdigit():\n                num += s[0]\n                s = s[1:]\n            return int(num) if num else 1\n\n        def decode_recursive(s, cur_idx):\n            nonlocal open_bracket\n            cur_str = ''\n            cur_num = 0\n            while cur_idx < len(s):\n                if s[cur_idx] == ']':\n                    open_bracket -= 1\n                    if open_bracket == 0:\n                        break\n                elif s[cur_idx].isdigit():\n                    cur_num = get_num(s[cur_idx:])\n                    cur_idx += 1\n                elif s[cur_idx].isalpha():\n                    cur_str += s[cur_idx]\n                    cur_idx += 1\n                elif s[cur_idx] == '[':\n                    open_bracket += 1\n                else:\n                    cur_str += s[cur_idx]\n                    cur_idx += 1\n            return cur_str*cur_num, cur_idx\n\n        open_bracket = 0\n        cur_idx = 0\n        s = ''.join(s)\n        while cur_idx < len(s):\n            if s[cur_idx] == ']':\n                open_bracket -= 1\n            elif s[cur_idx].isdigit():\n                cur_str, cur_idx = decode_recursive(s, cur_idx)\n                s = s[:cur_idx] + cur_str + s[cur_idx:]\n            elif s[cur_idx].isalpha():\n                s = s[:cur_idx] + s[cur_idx].lower() + s[cur_idx+1:]\n            elif s[cur_idx] == '[':\n                open_bracket += 1\n            else:\n                cur_idx += 1\n        return s\n\ns = Solution()\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\"\"\"\n\n\nimport re"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'\nassert solution('vrvpgeeweeeppi') == 'vrvleeeeeeppi'\nassert solution('gplmeuepa') == 'gpllleeeeeeppi'\nassert solution('ngpmeuepa') == 'ngllleeeeeeppi'\nassert solution('zpelepenapa') == 'zeleneppi'\n"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\n\"\"\"\n\nimport re\nimport collections"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'\n\"\"\"\n\nimport sys\nimport string"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"zepelepenapa papapripikapa\") == \"zelena paprika\"\n\"\"\"\n\nimport re"
    },
    {
        "number": 4930,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('zepelepenapa papapripikapa') == 'zelena paprika'\nassert solution('kazuha papa') == 'kazuha papapa'\nassert solution('papa poka') == 'papa pokapoka'\nassert solution('kumisuga ponpon') == 'kumisugaponpon'\nassert solution('mikipiki ma mihin') =='mikipikimaimi'\n\"\"\"\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"32 2\") == \"-32\"\nassert solution(\"32 2\") == \"-32\"\nassert solution(\"32 2\") == \"-32\"\nassert solution(\"32 2\") == \"-32\"\nassert solution(\"32 2\") == \"-32\"\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"32 2\") == \"-32\""
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('32 2') == '-32'\nassert solution('32 2') == '-32'\nassert solution('32 2') == '-32'\nassert solution('32 2') == '-32'\nassert solution('32 2') == '-32'\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"32 2\") == \"-32\"\n'''\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(str(sample_input_1)) == str(sample_output_1)\nassert solution(str(sample_input_2)) == str(sample_output_2)\n\"\"\"\n\nimport math"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('32 2') == '-32'\nassert solution('32 2') == '-32'\nassert solution('32 2') == '-32'\nassert solution('32 2') == '-32'\nassert solution('32 2') == '-32'\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"32 2\") == \"-32\"\nassert solution(\"32 1\") == \"IMPOSSIBLE\"\nassert solution(\"1 1\") == \"IMPOSSIBLE\"\nassert solution(\"1 2\") == \"ALL GOOD\"\nassert solution(\"-1 1\") == \"ALL GOOD\"\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"32 2\") == \"-32\"\n\"\"\""
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"32 2\") == \"-32\"\nassert solution(\"100 5\") == \"IMPOSSIBLE\"\nassert solution(\"64 4\") == \"ALL GOOD\"\nassert solution(\"0 1\") == \"IMPOSSIBLE\"\nassert solution(\"0 0\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4931,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"32 2\") == \"-32\"\n\"\"\"\n\n\"\"\"\nThe purpose of this problem is to work out the temperature in Celsius\nwhere the temperature in Fahrenheit is given by the equation:\n\n\u00b0F = (9/5) * \u00b0C + 32\n\nThe temperature in Celsius is then converted to Fahrenheit by \nmultiplying it by 9/5, and then adding 32. This is called a \"conversion\nfunction\".\n\nWrite a program that prompts the user for the Celsius temperature and\nconverts it to Fahrenheit, outputting it to the screen. Ensure that the\nprogram also works correctly with negative temperatures.\n\nInput Format\nA single line containing the temperature, measured in Celsius, \nto convert to Fahrenheit.\n\nConstraints\n- 100 \u00b0C < T \u2264 100 \u00b0C\n\nOutput Format\nOutput the Fahrenheit temperature equivalent to the given Celsius temperature.\n\"\"\""
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"one\"\nassert solution(\"3 3 3\") == \"none\"\nassert solution(\"4 3 2\") == \"both\"\nassert solution(\"1 1 1\") == \"both\"\n\"\"\"\n\nfrom dataclasses import dataclass\n\n@dataclass(frozen=True)\nclass Time:\n    minute: int\n\n    def __add__(self, other):\n        return Time(self.minute + other.minute)\n\n    def __sub__(self, other):\n        return Time(self.minute - other.minute)\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"one\"\nassert solution(\"1 2 2\") == \"none\"\n\n\"\"\"\n\nfrom typing import List, Tuple\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('2 2 3 3\\n1 3 4') == 'both'\nassert solution('2 2 3 3\\n1 2 4') == 'one'\nassert solution('2 2 3 3\\n1 2 4') == 'none'\n\nimport unittest\nclass TestSolution(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution('2 2 3 3\\n1 2 4'), 'both')\n    def test_2(self):\n        self.assertEqual(solution('2 2 3 3\\n1 2 4'), 'one')\n    def test_3(self):\n        self."
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1 1 1 1') == 'both'\nassert solution('1 1 1 0') == 'none'\nassert solution('0 1 1 1') == 'both'\nassert solution('1 1 1 1') == 'one'\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 2 3 3\") == \"both\"\nassert solution(\"1 3 4\") == \"one\"\nassert solution(\"5 5 5 5\") == \"none\"\n\"\"\""
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 3 4\\n2 3 4') == 'both'\nassert solution('1 2 2\\n1 3 4') == 'one'\nassert solution('1 2 3\\n1 1 4') == 'none'\nassert solution('2 2 3 3\\n1 3 4') == 'both'\nassert solution('3 2 3\\n3 3 4') == 'one'\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 2 3 3\\n1 3 4\") == \"both\"\nassert solution(\"1 2 3 3\\n1 3 4\") == \"one\"\nassert solution(\"2 2 3 3\\n1 2 3 4\") == \"none\"\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 2 3 3\\n1 3 4') == 'both'\nassert solution('2 2 3 3\\n1 1 1 1') == 'one'\nassert solution('2 2 3 3\\n1 3 1 3') == 'none'\n\"\"\""
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 2 3 3\\n1 3 4') == 'both'\nassert solution('2 2 3 3\\n2 1 4') == 'one'\nassert solution('2 2 3 3\\n3 2 4') == 'none'\n"
    },
    {
        "number": 4932,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\n    '2 2 3 3'\n) == 'both'\n\nassert solution(\n    '1 3 4'\n) == 'none'\n\nassert solution(\n    '2 2 1 1'\n) == 'one'\n\nprint('Test pass.')"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 6 8') == 10\n\n-----Solution-----\nx, y, z = [int(n) for n in stdin.split()]\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4 6 8\") == \"10\"\nassert solution(\"1 2 1\") == \"2\"\nassert solution(\"1 1 1\") == \"1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 6 8\") == \"10\"\n\"\"\""
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4 6 8') == '10'\nassert solution('1 5 7') == '12'\nassert solution('3 5 7') == '12'\nassert solution('4 6 8 9') == '10'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6 8\") == \"10\"\n\"\"\""
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 6 8\") == \"10\"\nassert solution(\"4 6 8\") == \"10\"\nassert solution(\"4 6 8\") == \"10\"\nassert solution(\"4 6 8\") == \"10\"\nassert solution(\"4 6 8\") == \"10\"\n"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 6 8\") == 10\nassert solution(\"-4 6 8\") == 10\nassert solution(\"1 2 3\") == 4\nassert solution(\"0 0 0\") == 0\n\nSample Input:\n-1 -2 3\nSample Output:\n4\n\n------Solution------"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 6 8') == '10'\n\nimport sys; sys.stdin.readline().split()"
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 6 8\") == \"10\"\nassert solution(\"1 2 3\") == \"4\"\nassert solution(\"-2 -3 2\") == \"0\""
    },
    {
        "number": 4933,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 6 8') == '10'\n\"\"\"\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"500 70\") == \"533\"\n\"\"\""
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('500 70') == '533'\nassert solution('1 1') == '1'\nassert solution('1 89') == '1'\nassert solution('1000 89') == '1000'\nassert solution('1000 1') == '1'\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('500 70') == '533'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2 10') == '21'\nassert solution('1 1') == '1'\nassert solution('3 1') == '4'\nassert solution('4 20') == '43'\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1') == '1'\nassert solution('1 2') == '2'\nassert solution('2 1') == '2'\nassert solution('2 2') == '4'\nassert solution('2 3') == '7'\n"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"500 70\") == \"533\"\n\"\"\"\n\nh, v = map(int, stdin.readline().split())\n\nprint((v+1)*(h/v+1))"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"500 70\") == \"533\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"500 70\") == \"533\"\nassert solution(\"500 70\") == \"533\"\nassert solution(\"500 70\") == \"533\"\n\"\"\""
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(input()) == output()\"\"\"\n\n\n\n\"\"\"You are standing in a room with n lights which are turned on, and you have a switch which you can press to turn off exactly one light. \nYou want to do this such that you spend as little time as possible and still turn off all the lights.\n\nGiven an array lights of n numbers, for each i (1 <= i <= n) lights[i] represents the number of LEDs that light i will be turned on. \nFor example, if lights = [3, 1, 2, 1], then you will turn off the third, fourth, and fifth lights. You will take one second to switch the first and second lights on, and one second to switch the third and fourth lights on, \nso your total time is one second.\n\nGiven an array of numbers, where each number represents how many seconds you must spend to toggle the corresponding light, determine the minimum total time required to turn off all the lights.\n\n-----Sample Input-----\n6\n2 4 5 3 2 2\n-----Sample Output-----\n12\n\"\"\"\n\n\"\"\"\nYou are standing in a room with n lights which are turned on, and you have a switch which you can press to turn off exactly one light. \nYou want to do this such that you spend as little time as possible and still turn off all the lights.\n\nGiven an array lights of n numbers, for each i (1 <= i <= n) lights[i] represents the number of LEDs that light i will be turned on. \nFor example, if lights = [3, 1, 2, 1], then you will turn off the third, fourth, and fifth lights. You will take one second to switch the first and second lights on, and one second to switch the third and fourth lights on, \nso your total time is one second.\n\nGiven an array of numbers, where each number represents how many seconds you must spend to toggle the corresponding light, determine the minimum total time required to turn off all the lights.\n\n-----Sample Input-----\n6\n1 1 1 1 1 1\n-----Sample Output-----\n6\n\"\"\""
    },
    {
        "number": 4934,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"500 70\") == \"533\"\nprint(solution(\"500 70\"))\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 9\\n69 60\\n100 60') == '39.0\\n30.0'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 9\\n69 60\\n100 60') == '39.0\\n30.0'\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n\n\"\"\"\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 9\\n69 60\\n100 60') == '39.0\\n30.0'\n\"\"\"\nimport sys"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n\"\"\"\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n\"\"\"\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\") == \"39.0\\n30.0\"\n\"\"\"\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(open('./sample-input.txt', 'r').read()) == open('./sample-output.txt', 'r').read()\nprint(solution(open('./input.txt', 'r').read()))\n\"\"\"\n\nimport numpy as np\n\nN = int(input().strip())\ng = float(input().strip())\nD = []\nfor i in range(N):\n    D.append([int(x) for x in input().strip().split(' ')])\ntheta = np.array(D)[:, 1]\n\nprint(np.sqrt(g * np.cos(np.radians(theta))) * np.array(D)[:, 0])\n"
    },
    {
        "number": 4935,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 9\\n69 60\\n100 60\\n\") == \"39.0\\n30.0\"\nprint(solution(\"2 9\\n69 60\\n100 60\\n\"))\n\"\"\"\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\nassert solution('3\\n15 20 20') == '0 15'\nassert solution('7\\n5 10 20 4 15 30 3') == '1 12'"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\n\n\"\"\"\n\nfrom collections import defaultdict\nimport sys\n\nn = int(sys.stdin.readline())\ntemp = [int(i) for i in sys.stdin.readline().split()]\n\ntemp_dict = defaultdict(int)\nfor i, t in enumerate(temp):\n    temp_dict[i + 1] = t\n\nmax_temp = max(temp_dict.values())\nmax_temp_days = [k for k, v in temp_dict.items() if v == max_temp]\n\nmin_temp_days = sorted([k for k, v in temp_dict.items() if v == min(temp_dict.values())])\n\nprint(min(max_temp_days), max(min_temp_days))"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == '2 28'\n\"\"\""
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == '1 1'\nassert solution('1 2 3 4 5') == '1 2 4'\nassert solution('4 5 1 1 1 1 1') == '4 5'\nassert solution('3 2 1 5 1 2') == '1 2'\nassert solution('1 3 1 1 2 2') == '1 3'\n'''"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\n\"\"\"\n\nimport sys\nfrom typing import List\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('5\\n5\\n5\\n5\\n5') == '2 0'\n\"\"\""
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\nassert solution(\"6\\n23 27 32 31 32 40\") == \"5 32\"\nassert solution(\"2\\n3 1 2\") == \"1 2\"\n\"\"\"\n\nimport sys\nfrom itertools import groupby"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5\\n23 27 31 28 30\") == \"2 28\"\n"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n23 27 31 28 30') == '2 28'\nassert solution('10\\n8 4 14 3 2 15 6 17 1 16') == '6 16'"
    },
    {
        "number": 4936,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('''3\n3 6 7\n7 2 5\n2 4 8''') == '3 2'\nassert solution('''6\n2 2 2 2 2 2\n2 2 2 2 2 2\n2 2 2 2 2 2\n2 2 2 2 2 2\n2 2 2 2 2 2\n2 2 2 2 2 2''') == '1 5'\nassert solution('''8\n1 5 9 7 10 3 6 2\n10 10 9 10 9 7 5 4\n3 3 3 3 3 3 3 3 3\n3 7 6 5 10 9 2 7 4\n3 7 10 9 6 8 4 9 5\n2 4 5 6 7 7 10 10\n8 2 7 6 8 5 7 9\n7 4 5 7 10 10 9 2''') == '5 4'\nassert solution('''6\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1''') == '1 5'\nassert solution('''6\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1''') == '1 5'\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 6\\n1 2 3\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 6\\n1 2 3') == '2'\n\"\"\""
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''3 6\n1 2 3''') == '2'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 6\\n1 2 3\") == \"2\"\n\"\"\"\n\nn, a = map(int, stdin.readline().split())\nships = list(map(int, stdin.readline().split()))\n\nships_at_a = 0\nships_not_at_a = 0\n\nmax_ships_at_a = 0\nfor ship in ships:\n    if ship <= a:\n        ships_at_a += 1\n        max_ships_at_a = max(max_ships_at_a, ships_at_a)\n    else:\n        ships_not_at_a += 1\n\nprint(max_ships_at_a - 1 if max_ships_at_a > 1 else max_ships_at_a)\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 6\\n1 2 3 4 5\") == \"2\"\nprint(solution(stdin))\n\nimport stdin"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 6\\n1 2 3\") == 2\n\"\"\"\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 6\\n1 2 3') == '2'\n\n---\nSample Input:\n3 6\n1 2 3\n4 1 2\nSample Output:\n0\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''3 6\n1 2 3''') == 2\nprint(solution(stdin))\n"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 6\\n1 2 3\") == 2\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4937,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 6\\n1 2 3') == 2\n\nassert solution('3 6\\n2 2 3') == 1\n\"\"\"\n\nstdin = input()\nnum_solar_systems, num_ships_total = [int(x) for x in stdin.split()]\nfleet_sizes = [int(x) for x in input().split()]\n\ntotal_ships_in_fleets = sum(fleet_sizes)"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('''1\nWWWWWWW''') == '7'\nassert solution('''0\nMMMMMMM''') == '1'\nassert solution('''5\nMMMMBWMM''') == '4'\nassert solution('''8\nMMMMMWMW''') == '8'\nassert solution('''0\nMWMWMWW''') == '1'\n'''"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"MWWMWMMWM\") == 9\n\"\"\""
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1MWWMWMMWM\") == 9\nassert solution(\"2MWWWMMMW\") == 8\n\"\"\""
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"MWWMWMMWM\") == \"9\"\nassert solution(\"WWWWMMMMM\") == \"9\"\nassert solution(\"WWWWM\") == \"4\"\n\n\"\"\"\n\nimport os\nimport sys\nfrom typing import Iterator\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"MWWMWMMWM\") == \"9\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('WMWMWMMW') == 9\nassert solution('WWMWWWWWMW') == 12\n\n\"\"\""
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('MWWMWMMWM') == '9'\n\"\"\""
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"MWWMWMMWM\") == 9\n\"\"\"\n\nfrom itertools import dropwhile, accumulate"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('MWWMWMMWM') == 9\nprint(solution('MWWMWMMWM'))\n"
    },
    {
        "number": 4938,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"WM\") == \"WM\"\nassert solution(\"WWMWMW\") == \"9\"\nassert solution(\"WMWMW\") == \"WMW\"\nassert solution(\"WWWWMW\") == \"8\"\nassert solution(\"WWMWMWMWWMW\") == \"13\"\n\n\"\"\"\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 2\\n5 3\\n2 0 1\\nundo 2') == '2'\nassert solution('4 2\\n3 2\\n3 3\\nundo 1') == '3'\nassert solution('4 2\\n0 3\\n1 0\\nundo 1') == '1'\nassert solution('4 2\\n0 3\\n0 1\\nundo 1') == '0'\n\"\"\"\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 4\n8 -2 3 undo 2''') == '3'\nassert solution('''5 4\n8 -2 3 undo 2\n0 undo -2''') == '0'\nassert solution('''5 4\n8 -2 3 undo 2\n8 -2 3 undo 2\n8 -2 3 undo 2''') == '0'\nassert solution('''5 4\n8 -2 3 undo 2\n8 -2 3 undo 2\n8 -2 3 undo 2\n8 -2 3''') == '4'\nassert solution('''5 4\n8 -2 3 undo 2\n8 -2 3 undo 2\n8 -2 3 undo 2\n8 -2 3''') == '0'\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\nassert solution('5 3\\n3 4 undo 2') == '0'\n\nprint(solution(stdin))\n\"\"\"\n\nimport collections\nimport itertools"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 4\\n8 -2 3 undo 2') == '3'\n\"\"\"\n\nn, k = [int(x) for x in stdin.split()]\n\nl = [int(x) for x in stdin.split()]\n\nfor i in range(len(l)):\n    if l[i] == 0:\n        egg = i\n    elif l[i] > 0:\n        egg -= l[i]\n    else:\n        egg += l[i]\n        egg %= n\nprint(egg)\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n3 1\") == \"1\"\nassert solution(\"5 3\\n-1 -1 1 -1 1 1\") == \"3\"\nassert solution(\"5 4\\n8 -2 3 undo 2\") == \"0\"\nassert solution(\"5 5\\n3 -3 3 undo 2\") == \"2\"\nassert solution(\"5 5\\n8 2 3 undo 2\") == \"2\"\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"8 -2 3 undo 2\") == \"3\"\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''\n5 4\n8 -2 3 undo 2\n''') == '3'\n\n'''\nThe code for this module is as follows:\n\n```python\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(open('test_input.txt').read()) == '2'\n\"\"\"\n\n\nfrom typing import List\n\nimport unittest\n\nn, k = list(map(int, input().split()))\ncommand = [list(map(int, input().split())) for _ in range(k)]\n"
    },
    {
        "number": 4939,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 4\\n8 -2 3 undo 2\") == '3'\n\"\"\""
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 3\\n1 2 3\\n3 2 1') == '6 7'\n\nimport os\nimport io\nimport unittest\n\nclass TestMaze(unittest.TestCase):\n\n    def test_maze(self):\n        with open(os.path.join(os.path.dirname(__file__), 'input.txt')) as intput:\n            n, m = map(int, intput.readline().split())\n            p = [list(map(int, intput.readline().split())) for _ in range(n)]\n        with open(os.path.join(os.path.dirname(__file__), 'output.txt')) as output:\n            result = str(solution(io.BytesIO(str.encode(output.read()))))\n        with open(os.path.join(os.path.dirname(__file__), 'expected.txt')) as expected:\n            expected_result = str(expected.read().strip())\n        self.assertEqual(expected_result, result)\n\nunittest.main()\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n\"\"\"\n\nimport sys\nimport os\nfrom collections import defaultdict"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == '6 7'\n\n-----Constraints-----\n$1 \\leq N,M \\leq 10^6$\n\n$1 \\leq P_{i,j} \\leq 10^6$ for all $i, j \\in [1,M]$.\n\n-----Hints-----\nYou may find the function `min()` useful.\n\"\"\"\n\n\nimport os\nimport typing\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(str(input())) == str(output())\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2 3\\n1 2 3\\n3 2 1') == '6 7'"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 3\\n1 2 3\") == \"6 7\"\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n1 2 3\\n3 2 1') == '6 7'\nassert solution('5 4\\n1 2 5 3 4\\n2 2 1\\n3 2 1') == '4 4\\n1 3\\n1 2'\nassert solution('2 1\\n1 1') == '2 1'\nassert solution('5 4\\n1 2 5 3 4\\n2 2 1\\n3 2 1') == '4 4\\n1 3\\n1 2'\nassert solution('5 5\\n1 2 5 3 4\\n2 2 1\\n3 2 1\\n4 2 1\\n5 2 1') == '4 4\\n1 3\\n1 2'\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 2 3\\n3 2 1\") == \"6 7\"\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2 3\\n1 2 3\\n3 2 1') == '6 7'\n"
    },
    {
        "number": 4940,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n2 3\n1 2 3\n3 2 1\n\"\"\") == \"6 7\"\n\n---Problem 2---\nJohn has been provided with a task: he needs to find out the highest value of f(x) among all x in the range [a, b].\n\nJohn has been provided with a function f(x) that returns the value of the function on input x.\n\nWrite a function:"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect') == '64 correct\\n665 incorrect'\nassert solution('7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect') == '64 correct\\n665 incorrect'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('6\\n'\n                'mollen mollendag mollen p\u00e5 s\u00f6ndagen\\n'\n                 'gullen dag hevnen p\u00e5 s\u00f6ndagen\\n'\n                'mollen f\u00f6rsvinner p\u00e5 s\u00f6ndagen\\n'\n                 'gullen p\u00e5 fredag\\n'\n                 'gullen dag p\u00e5 s\u00f6ndagen\\n'\n                 'gullen dag f\u00f6rsvinner p\u00e5 s\u00f6ndagen\\n'\n                 ) == '10 correct\\n4 incorrect'\n\nassert solution('6\\n'\n                'mollen mollendag mollen p\u00e5 s\u00f6ndagen\\n'\n                 'gullen dag hevnen p\u00e5 s\u00f6ndagen\\n'\n                'mollen f\u00f6rsvinner p\u00e5 s\u00f6ndagen\\n'\n                 'gullen p\u00e5 fredag\\n'\n                 'gullen dag p\u00e5 s\u00f6ndagen\\n'\n                 'gullen dag f\u00f6rsvinner p\u00e5 s\u00f6ndagen\\n'\n                 ) == '9 correct\\n5 incorrect'\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''7\nals mollen mollen mollen mollen mollen mollen\n4\nals when correct\nmollen moles correct\nmollen destroy correct\nmollen mills incorrect''') == '''64 correct\n665 incorrect'''\n\nassert solution('''6\nvraag 2\ndag 2\nhet 2\nmoeder 2\nzeep 2\nvraag 1\ndag 1\nhet 1\nmoeder 1\nzeep 1\nvraag 0\ndag 0\nhet 0\nmoeder 0\nzeep 0''') == '''3 correct\n3 incorrect'''\n\n\"\"\"\n\nimport string\nimport numpy as np\n\nn = int(input())\ns = input()\n\ndict1 = dict()\nfor i in range(int(input())):\n    word1, word2, word3 = input().split()\n    dict1[word1] = word2\n    dict1[word2] = word3\n    dict1[word3] = word1\n\nm = int(input())\ndict2 = dict()\nfor i in range(m):\n    a, b, c = input().split()\n    dict2[a] = b\n    dict2[b] = c\n    dict2[c] = a\n\nl1 = []\nl2 = []\nl3 = []\nl4 = []\nfor i in range(n):\n    for j in range(m):\n        if s[i] == dict2[dict1[s[i]]]:\n            l2.append(dict1[s[i]])\n        if s[i] == dict1[s[i]]:\n            l1.append(dict2[s[i]])\n        if s[i] == dict1[dict2[s[i]]]:\n            l3.append(dict1[s[i]])\n        if s[i] == dict2[dict1[s[i]]]:\n            l4.append(dict1[s[i]])\n        if s[i] == dict1[dict2[s[i]]]:\n            l1.append(dict2[s[i]])\n\nprint(len(set(l1)), len(set(l2)))\nprint(len(set(l3)), len(set(l4)))\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n' +'mollen\\n' +'mollen\\n' +'mollen\\n' +'mollen\\n') == 'correct\\ncorrect\\ncorrect\\n'\nassert solution('4\\n' +'mollen\\n' +'mollen\\n' +'mollen\\n' +'mollen\\n') == 'correct\\n'\nassert solution('4\\n' +'mollen\\n' +'molen\\n' +'mollen\\n' +'molen\\n') == 'incorrect\\ncorrect\\n'\nassert solution('5\\n' +'mollen\\n' +'mollen\\n' +'mollen\\n' +'mollen\\n' +'mollen\\n') == 'correct\\ncorrect\\ncorrect\\ncorrect\\ncorrect\\n'\nassert solution('5\\n' +'mollen\\n' +'molen\\n' +'mollen\\n' +'molen\\n' +'mollen\\n') == 'correct\\nincorrect\\ncorrect\\nincorrect\\ncorrect\\n'\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(open('./test_input_1').read()) == \"64 correct\"\nassert solution(open('./test_input_2').read()) == \"665 incorrect\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\nprint('Test: OK')\n\nassert solution(\"7\\nkatten katzen katzen katzen katzen katzen katzen\\n4\\nkatten katze correct\\nkatze destroy correct\\nkatzen mills incorrect\") == \"65 correct\\n661 incorrect\"\nprint('Test: OK')\n\nassert solution(\"7\\nlassen lassen lassen lassen lassen lassen\\n4\\nlassen lassie correct\\nlassen lassie destroy correct\\nlassen lassie mills incorrect\") == \"65 correct\\n656 incorrect\"\nprint('Test: OK')\n\nassert solution(\"7\\nkatten katzen katzen katzen katzen katzen katzen\\n4\\nkatze correct\\nkatze destroy correct\\nkatzen mills incorrect\") == \"65 correct\\n661 incorrect\"\nprint('Test: OK')\n\nassert solution(\"7\\nkatten katzen katzen katzen katzen katzen katzen\\n4\\nkatze correct\\nkatze destroy correct\\nkatzen mills incorrect\") == \"65 correct\\n661 incorrect\"\nprint('Test: OK')"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\n mollen destroy correct\\n mollen mills incorrect\") == '64\\n665'\nassert solution(\"4\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\n mollen destroy correct\\n mollen mills incorrect\") == '64\\n665'\n\nassert solution(\"4\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\n mollen moles correct\\n mollen destroy correct\\n mollen mills incorrect\") == '64\\n665'\nassert solution(\"4\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\n mollen destroy correct\\n mollen mills incorrect\") == '64\\n665'\n\nassert solution(\"4\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\n mollen moles correct\\n mollen destroy correct\\n mollen mills incorrect\") == '64\\n665'\n"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\\n\") == \"64\\n665\"\nprint(solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\\n\"))\nassert solution(\"6\\na b c correct\\nb c d correct\\nb c e correct\\n\") == \"4\\ncorrect\"\nprint(solution(\"6\\na b c correct\\nb c d correct\\nb c e correct\\n\"))\nassert solution(\"8\\nable correct\\nabout correct\\nabove correct\\naccording correct\\nacross correct\\nafter correct\\nagain correct\\nagainst correct\\nall correct\\nalmost correct\\nalready correct\\nalso correct\\namid correct\\namong correct\\nanother correct\\naplace correct\\naquestion correct\\naround correct\\nas correct\\nat correct\\nbe correct\\nbecause correct\\nbefore correct\\nbehind correct\\nbelow correct\\nbeneath correct\\nbeside correct\\nby correct\\ncalm correct\\ncome correct\\nduring correct\\neach correct\\neither correct\\nevery correct\\nfor correct\\ngoat correct\\ngreater correct\\nhow correct\\nin correct\\nin spite of correct\\ninstead correct\\nis correct\\nit correct\\nlesser correct\\nlike correct\\nlittle correct\\nmuch correct\\nnearer correct\\nnot correct\\nof correct\\noff correct\\noncorrect\\nopposite correct\\nrather correct\\nround about correct\\nsince correct\\nso correct\\nthan correct\\nthat correct\\nthe correct\\ntheir correct\\nthese correct\\nthem correct\\nthese two correct\\nthey correct\\nthese three correct\\nthis correct\\nthese four correct\\nthese five correct\\nthese six correct\\nthrough correct\\nto correct\\ntogether correct\\ntoo correct\\ntoward correct\\nunder correct\\nuntil correct\\nup correct\\nupon correct\\nwith correct\\nwithout correct\\nwould correct\\n\") == \"83\\ncorrect\"\nprint(solution(\"8\\nable correct\\nabout correct\\nabove correct\\naccording correct\\nacross correct\\nafter correct\\nagain correct\\nagainst correct\\nall correct\\nalmost correct\\nalready correct\\nalso correct\\namid correct\\namong correct\\nanother correct\\naplace correct\\naquestion correct\\naround correct\\nas correct\\nat correct\\nbe correct\\nbecause correct\\nbefore correct\\nbehind correct\\nbelow correct\\nbeneath correct\\nbeside correct\\nby correct\\ncalm correct\\ncome correct\\nduring correct\\neach correct\\neither correct\\nevery correct\\nfor correct\\ngoat correct\\ngreater correct\\nhow correct\\nin correct\\nin spite of correct\\ninstead correct\\nis correct\\nit correct\\nlesser correct\\nlike correct\\nlittle correct\\nmuch correct\\nnearer correct\\nnot correct\\nof correct\\noff correct\\noncorrect\\nopposite correct\\nrather correct\\nround about correct\\nsince correct\\nso correct\\nthan correct\\nthat correct\\nthe correct\\ntheir correct\\nthese correct\\nthem correct\\nthese two correct\\nthey correct\\nthese three correct\\nthis correct\\nthese four correct\\nthese five correct\\nthese six correct\\nthrough correct\\nto correct\\ntogether correct\\ntoo correct\\ntoward correct\\nunder correct\\nuntil correct\\nup correct\\nupon correct\\nwith correct\\nwithout correct\\nwould correct\\n\"))\n\nassert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\\n4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\\n\") == \"66\\n11\\n3\\n8\\n2\\n4\\n7\\n5\\n7\\n4\\n4\\n3\\n3\\n3\\n4\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\n5\\"
    },
    {
        "number": 4941,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"7\\nals mollen mollen mollen mollen mollen mollen\") == \"64 correct\\n665 incorrect\"\nassert solution(\"4\\nals when correct\\nmollen moles correct\\nmollen destroy correct\\nmollen mills incorrect\") == \"64 correct\\n665 incorrect\"\n\n\"\"\""
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\n\n\"\"\""
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n2 3 4 3') == '7'\nassert solution('5\\n3 3 4 1 1') == '6'\nassert solution('6\\n4 2 6 6 4') == '8'\nassert solution('7\\n2 1 7 1 3') == '7'\n\"\"\"\n\n\nimport sys\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4\\n2 3 4 3\") == 7\n\"\"\"\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('4\\n2 3 4 3') == '7'\n\"\"\"\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\n\n\"\"\"\n\nN = int(input())\nn = list(map(int, input().split()))\n\nn.sort()"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n2 3 4 3\") == \"7\"\n\n\"\"\""
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 3 4 3') == '7'\n'''"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4\\n2 3 4 3') == '7'\n\"\"\"\n\nn = int(input())\nl = [int(x) for x in input().split()]\n\nm = 1000001\nl.sort()\nprint(l[n-1] + 1)\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 3 4 3') == '7'\nassert solution('1\\n1') == '1'\nassert solution('6\\n1 1 1 1 1 1') == '6'\nassert solution('6\\n1 1 1 1 1 1') == '1'\nassert solution('6\\n1 1 1 1 1 1') == '1'\n"
    },
    {
        "number": 4942,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 4 3\") == 7\n\"\"\"\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('2.5\\n2.5') == '0.0 0.0\\n2.5 2.5'\nassert solution('3\\n0 0\\n1 1\\n0 2') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\nassert solution('5\\n0 0\\n2 2\\n0 4\\n2 4') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0\\n2.0 4.0'\nassert solution('3\\n0 0\\n1 1\\n2 2') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n\nSample Input:\n2\n3\n0 0\n1 0\n1 2\n2\n2\n0 0\n1 0\n0 1\nSample Output:\n0.0 0.0\n1.0 1.0\n0.0 4.0\n2.0 2.0\n0.0 4.0"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(open(\"input.txt\").read()) == open(\"output.txt\").read()"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n0 0\\n1 1\\n0 2') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\nassert solution('5\\n0 0\\n1 1\\n0 2\\n0 3\\n0 4') == '0.0 0.0\\n1.0 1.0\\n0.0 4.0'\n\"\"\"\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n0 0\\n1 1\\n0 2') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\nassert solution('3\\n0 0\\n1 1\\n0 2') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2\\n1 1\\n1 1\\n1 1') == '0.0 0.0\\n1.0 2.0'\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n0 0\\n1 1\\n0 2\\n3 3\") == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n\"\"\"\n\nfrom math import sqrt\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n0 0\n1 1\n0 2''') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\nassert solution('''2\n0 0\n1 1\n0 2''') == '0.0 0.0\\n1.0 1.0'\n\"\"\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n0 0\\n1 1\\n0 2') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n\"\"\"\n\n\nclass Solution:\n    def __init__(self) -> None:\n        self.min_x = 0\n        self.min_y = 0\n\n    def solution(self, stdin: str) -> str:\n        n = int(stdin.split('\\n')[0])\n        data = []\n        for line in stdin.split('\\n')[1:]:\n            x, y = map(int, line.split())\n            data.append((x, y))\n\n        data.sort(key=lambda x: x[1])\n        sorted_data = sorted(data, key=lambda x: x[0])\n\n        self.min_x = sorted_data[0][0]\n        self.min_y = sorted_data[0][1]\n\n        for i in range(1, n):\n            if sorted_data[i][0] >= sorted_data[i - 1][0] + self.min_y:\n                self.min_y = sorted_data[i][1]\n\n        return '\\n'.join('{} {}'.format(x, y) for x, y in sorted_data)\n"
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('0 0\\n1 1\\n0 2') == '0.0 0.0\\n2.0 2.0\\n0.0 4.0'\n\n\"\"\""
    },
    {
        "number": 4943,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n0 0\\n1 1\\n0 2\\n4\") == \"0.0 0.0\\n2.0 2.0\\n0.0 4.0\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\n\"\"\"\n\nn = int(input())\nday = 0\nwhile n > 1:\n    day += 1\n    n -= 3\n\nprint(day)"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1') == 1\n\"\"\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 1\nassert solution('3') == 2\nassert solution('4') == 2\n\"\"\""
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"2\"\nassert solution(\"1000\") == \"100\"\nassert solution(\"12345\") == \"5\"\nassert solution(\"123456\") == \"6\"\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == 1\n\"\"\""
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1') == 1\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(1) == 1\n\n\"\"\""
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4') == 1\n\"\"\"\n\nfrom sys import stdin\nimport math\n"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1') == 1\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4944,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(sample_input_output[0])) == str(sample_input_output[1])\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('12 16') == '34'\nassert solution('12 1') == '12'\nassert solution('2 16') == '32'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3 1\\n12 16') == '34'\n\"\"\"\na, b = map(int, stdin.readline().split())\nm, sigma = map(int, stdin.readline().split())"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('3 1\\n12 16\\n8 2') == '16'\nassert solution('1 1\\n1 1\\n1 1') == '1'\n'''"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('4 5') == '5'\nassert solution('1 2') == '2'\nassert solution('2 3') == '6'\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3 1\n12 16''') == '34'\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(str(__import__('sys').stdin.read())) == '34'"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 1\\n12 16') == '34'\nassert solution('3 1\\n5 7') == '7'\n\n\"\"\"\n\n\n\nimport sys\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n3 4') == '29'\nassert solution('2 1\\n4 1') == '4'\nassert solution('1 1\\n1 1') == '0'\nassert solution('4 2\\n0 4') == '6'\nassert solution('4 2\\n1 4') == '5'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 1\n9 10\n20 14\n5 4\n10 9\n1 2\n1 4\n3 2\n5 6\n2 4\n3 6\n4 6\n5 6\n6 6\n7 6\n8 6\n9 6\n10 6\n11 6\n12 6\n13 6\n14 6\n15 6\n16 6\n17 6\n18 6\n19 6\n20 6\n21 6\n22 6\n23 6\n24 6\n25 6\n26 6\n27 6\n28 6\n29 6\n30 6\n31 6\n32 6\n33 6\n34 6\n35 6\n36 6\n37 6\n38 6\n39 6\n40 6\n41 6\n42 6\n43 6\n44 6\n45 6\n46 6\n47 6\n48 6\n49 6\n50 6\n51 6\n52 6\n53 6\n54 6\n55 6\n56 6\n57 6\n58 6\n59 6\n60 6\n61 6\n62 6\n63 6\n64 6\n65 6\n66 6\n67 6\n68 6\n69 6\n70 6\n71 6\n72 6\n73 6\n74 6\n75 6\n76 6\n77 6\n78 6\n79 6\n80 6\n81 6\n82 6\n83 6\n84 6\n85 6\n86 6\n87 6\n88 6\n89 6\n90 6\n91 6\n92 6\n93 6\n94 6\n95 6\n96 6\n97 6\n98 6\n99 6\n100 6''') == '34'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4945,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('1 1') == 1\nassert solution('1 2') == 2\nassert solution('2 2') == 4\nassert solution('3 3') == 6\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4\\n1 2 3 1') == 3"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4\\n1 2 3 1') == 3\n'''\n\nimport sys\n\nn = int(sys.stdin.readline().strip())\narr = [int(n) for n in sys.stdin.readline().strip().split(' ')]"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('4\\n1 2 3 1') == 3\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4\\n1 2 3 1\") == \"3\"\n\"\"\""
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n1 2 3 1') == 3\nassert solution('4\\n3 2 1 3') == 4\n\"\"\"\nimport sys"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4\\n1 2 3 1\") == \"3\"\nassert solution(\"8\\n1 1 1 1 1 2 2 2\") == \"3\"\nassert solution(\"8\\n1 1 2 2 1 2 1 1\") == \"4\"\nassert solution(\"5\\n1 2 2 1 2\") == \"2\"\nassert solution(\"4\\n2 1 2 2\") == \"1\"\n"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(input) == output\n\n----Input Constraints----\nThe number of guests is between 1 and 1e5.\n\n----Output Constraints----\nThe output is guaranteed to fit in a signed 32-bit integer.\n\n----Test Case----\nYou may test this function in your interpreter after importing it.\n\nWhen you have your solution, submit it on the programming assignment page and validate your solution by running it on the tests in the interpretator.\n'''\n\n'''\nHere's the algorithm:\n1. Sort the languages\n2. For each pair of languages, check if they differ by at least 1 seat\n3. If so, then the new number of seats is the sum of the difference in position for each pair.\n4. Repeat until we've gone through all pairs of languages.\n'''"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n1 2 3 1\") == 3"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n1 2 3 1') == 3\n\"\"\"\n\nimport math\n\nn = int(input())\n\nlangs = list(map(int, input().split()))"
    },
    {
        "number": 4946,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n1 2 3 1') == 3\n\"\"\"\n\n\"\"\"\nn = int(input())\narr = list(map(int, input().split()))\nprint(min(arr[i] - arr[i - 1] for i in range(1, n)) - n)\n\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\nprint(min(arr[i] - arr[i - 1] for i in range(1, n)) - n)"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1.0') == '1088'\n\"\"\""
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1.0\") == \"1088\"\n\"\"\"\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3.4\") == \"1793\"\nassert solution(\"1.5\") == \"2000\"\n\nprint(solution(\"1.5\"))"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1.0') == '1088'\nassert solution('0.50') == '9'\nassert solution('0.50') == '9'\nassert solution('0.51') == '10'\nassert solution('0.52') == '10'\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('2.1') == '1266'\nassert solution('6.4') == '1080'\nassert solution('3.1') == '1220'\nassert solution('3.9') == '1220'\nassert solution('4.0') == '1333'\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.0\") == \"1088\"\n\"\"\""
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1.0\") == \"1088\"\n\"\"\"\n\nfrom decimal import Decimal"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(1)) == '1088'\nassert solution(str(0)) == '0'\nassert solution(str(0.5)) == '571'\nassert solution(str(0.52)) == '591'\nassert solution(str(0.53)) == '592'\n"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"0.0\") == \"1000\"\nassert solution(\"2.4\") == \"1204\"\nassert solution(\"2.5\") == \"1205\"\nassert solution(\"4.9\") == \"4909\"\n\n\"\"\"\n\nfrom collections import namedtuple\n\nMiles = namedtuple(\"Miles\", \"distance\")\nRoman_Pace = namedtuple(\"Roman_Pace\", \"pace\")"
    },
    {
        "number": 4947,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(1.0) == \"1088\"\nassert solution(0.5) == \"688\"\nassert solution(0.15) == \"516\"\nassert solution(0.7) == \"908\"\nassert solution(0.83) == \"934\"\n\"\"\"\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4 6\\n0 0 0 100\\n0 0 100 100\\n0 0 100 200\\n0 0 200 100\\n1 0 200 200\\n1 0 200 300\\n1 0 300 100\\n1 0 300 200\\n1 0 300 300\\n2 0 300 200\\n2 0 300 100\\n2 0 300 0\\n\") == \"25.000000000\\n25.000000000\\n25.000000000\\n25.000000000\"\nassert solution(\"0 6\\n0 0 0 100\\n0 0 100 100\\n0 0 100 200\\n0 0 200 100\\n1 0 200 200\\n1 0 200 300\\n1 0 300 100\\n1 0 300 200\\n1 0 300 300\\n2 0 300 200\\n2 0 300 100\\n2 0 300 0\\n\") == \"25.000000000\\n25.000000000\\n25.000000000\\n25.000000000\"\nassert solution(\"6 1\\n0 0 0 100\\n0 0 100 100\\n0 0 100 200\\n0 0 200 100\\n1 0 200 200\\n1 0 200 300\\n1 0 300 100\\n1 0 300 200\\n1 0 300 300\\n2 0 300 200\\n2 0 300 100\\n2 0 300 0\\n\") == \"25.000000000\\n25.000000000\\n25.000000000\"\nassert solution(\"0 0\\n0 0 100\\n0 100 100\\n0 100 200\\n100 0 100\\n100 100 100\\n100 200 100\\n200 0 100\\n200 100 100\\n200 100 200\\n100 0 200\\n100 100 200\\n100 200 100\\n200 0 200\\n200 100 200\\n200 100 100\\n100 0 300\\n100 0 200\\n100 100 200\\n100 200 100\\n200 0 300\\n200 0 200\\n200 100 200\\n200 100 100\\n100 0 400\\n100 100 200\\n100 200 100\\n100 200 200\\n200 0 400\\n200 100 200\\n200 100 100\\n100 0 300\\n100 100 200\\n100 200 100\\n200 0 200\\n200 100 200\\n200 100 100\\n100 0 400\\n100 100 200\\n100 200 100\\n100 200 200\\n200 0 300\\n200 0 100\\n200 100 200\\n200 100 100\\n200 0 100\\n200 100 200\\n100 0 300\\n100 0 200\\n100 100 200\\n100 200 100\\n200 0 300\\n200 0 200\\n200 100 200\\n200 100 100\\n100 0 400\\n100 0 300\\n100 100 200\\n100 200 100\\n100 100 200\\n200 0 200\\n200 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0 100\\n100 0"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 4\\n\"\n                \"100 0 0\\n\"\n                \"0 0 100\\n\"\n                \"0 100 100\\n\"\n                \"0 100 0\\n\") == \"25.000000000\"\n\n---\n\nThe answer is 25.0 as per the question.\n\nIf the radius and the x,y,z of the hole are same then the volume is 4/3pi r^3 * (2r)^3 = 4/3pi r^3 * r^3 = 4/3pi r^3 * r^3\n\nSo, for all the radius of the hole,\n\nVolume of the sphere = 4/3pi * r^3\n\nThus, Volume of the sphere = 4/3pi * r^3 * r^3\n\nSo, for all the radius of the hole,\n\nVolume of the sphere = 4/3pi * r^3 * r^3\n\nThus, Volume of the sphere = 4/3pi * r^3 * r^3 * r^3\n\nSo, for all the radius of the hole,\n\nVolume of the sphere = 4/3pi * r^3 * r^3 * r^3 * r^3\n\nSo, for all the radius of the hole,\n\nVolume of the sphere = 4/3pi * r^3 * r^3 * r^3 * r^3 * r^3\n\nThus, for all the radius of the hole,\n\nVolume of the sphere = 4/3pi * r^3 * r^3 * r^3 * r^3 * r^3 * r^3\n\nSo, for all the radius of the hole,\n\nVolume of the sphere = 4/3pi * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3\n\nThus, for all the radius of the hole,\n\nVolume of the sphere = 4/3pi * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3\n\nSo, for all the radius of the hole,\n\nVolume of the sphere = 4/3pi * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3\n\nSo, for all the radius of the hole,\n\nVolume of the sphere = 4/3pi * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3\n\nSo, for all the radius of the hole,\n\nVolume of the sphere = 4/3pi * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3 * r^3"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"0 4\") == \"25.000000000\\n25.000000000\\n25.000000000\\n25.000000000\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"0 4\\n2 0 1 0\\n3 0 2 0\\n4 0 3 0\") == \"25.000000000\\n25.000000000\\n25.000000000\\n25.000000000\"\n\n----\n\nOf course you have all heard of the International Cheese Processing Company. Their machine for cutting a piece of cheese into slices of exactly the same thickness is a classic. Recently they produced a machine able to cut a spherical cheese (such as Edam) into slices \u2013 no, not all of the same thickness, but all of the same weight! But new challenges lie ahead: cutting Swiss cheese. \n\nSwiss cheese such as Emmentaler has holes in it, and the holes may have different sizes. A slice with holes contains less cheese and has a lower weight than a slice without holes. So here is the challenge: cut a cheese with holes in it into slices of equal weight.\n\nBy smart sonar techniques (the same techniques used to scan unborn babies and oil fields), it is possible to locate the holes in the cheese up to micrometer precision. For the present problem you may assume that the holes are perfect spheres.\n\nEach uncut block has size $100 \\times 100 \\times 100$ where each dimension is measured in millimeters. Your task is to cut it into $s$ slices of equal weight. The slices will be $100$\u00a0mm wide and $100$\u00a0mm high, and your job is to determine the thickness of each slice.\n\n-----Input-----\nThe first line of the input contains two integers $n$ and $s$, where $0 \\leq n \\leq 10000$ is the number of holes in the cheese, and $1 \\le s \\le 100$ is the number of slices to cut. The next $n$ lines each contain four positive integers $r$, $x$, $y$, and $z$ that describe a hole, where $r$ is the radius and $x$, $y$, and $z$ are the coordinates of the center, all in micrometers.\n\nThe cheese block occupies the points $(x,y,z)$ where $0 \\le x,y,z \\le 100000$, except for the points that are part of some hole. The cuts are made perpendicular to the $z$ axis.\n\nYou may assume that holes do not overlap but may touch, and that the holes are fully contained in the cheese but may touch its boundary.\n\n-----Output-----\nDisplay the $s$ slice thicknesses in millimeters, starting from the end of the cheese with $z=0$. Your output should have an absolute or relative error of at most $10^{-6}$.\n\n-----Examples-----\nSample Input:\n0 4\n2 0 1 0\n3 0 2 0\n4 0 3 0\nSample Output:\n25.000000000\n25.000000000\n25.000000000\n25.000000000\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"0 4\") == \"25.000000\\n25.000000\\n25.000000\\n25.000000\"\n\"\"\"\n\nfrom math import pi"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"0 4\\n1 1 1 1\\n2 2 2 2\\n3 3 3 3\\n4 4 4 4\\n5 5 5 5\") == \"25.000000000\\n25.000000000\\n25.000000000\\n25.000000000\"\nprint(\"Successfully passed!\")\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('4, 6, 10, 20\\n') == '25.000000000, 25.000000000, 25.000000000, 25.000000000'\nassert solution('6, 1, 100, 100, 100, 100\\n') == '100.000000, 100.000000, 100.000000, 100.000000, 100.000000, 100.000000'\nassert solution('8, 0, 0, 0, 0, 0, 0, 0\\n') == '100.000000, 100.000000, 100.000000, 100.000000, 100.000000, 100.000000, 100.000000, 100.000000'\n"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('0 4\\n50 0 50 0 50\\n0 50 0 50 0\\n0 0 50 0 50\\n0 0 0 50 0') == '25.000000000\\n25.000000000\\n25.000000000\\n25.000000000'\n\n\"\"\""
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 1\\n0 0 0 100\\n100 0 0 0\\n0 100 0 0\\n100 100 0 0') == '100.000000'\n\n-----Problem-----\nNikita is very fond of playing with boxes. One day he decided to divide his little box into $n$ cubes, each with side length $1$, and to cover the cubes with a number of overlapping squares of size $r$ with the same number.\n\nThe size of the box, the side length of the cubes and the length of the squares is given as positive numbers. Nikita made $k$ cuts on the right side of the box, and wanted to know the maximum thickness of the resulting cubes.\n\nFor example, given $n=3$, $k=4$ and $r=1$, the cutting of the box into three cubes makes the maximum thickness equal to 2.\n\nTo calculate the maximum thickness, Nikita makes cuts at points $x_1,x_2,x_3$,..., $x_{k-1}$, $x_k$ on the right side of the box. The thickness of the cubes is then the difference between $x_k$ and $x_k-1$, because the cubes are put on top of each other. The maximum thickness of the cubes is the maximum thickness of these boxes, that is, $max(x_k-x_{k-1})$.\n\nYour task is to calculate the maximum thickness of the resulting cubes.\n\n-----Solution-----\nYou have to calculate the thickness of each cube.\n\nTo find the maximum thickness of the cubes, you will need to know the thickness of the boxes before the last cut, because the last cut is not counted.\n\nThe thickness of the boxes is the difference between the rightmost point and the leftmost point of the boxes.\n\nSo, for every cut, you need to calculate the maximum thickness of the cubes before the next cut, and then take the maximum.\n\nLet\u2019s start with a simple example. The picture below shows how to divide the box into cubes. The initial box is green, the boxes after cuts are blue, and the last cut is red.\n\nTo divide the box into cubes, you need to determine the coordinates of the first points on the right and left of the box, and then calculate the thickness of the boxes on these points.\n\nHere are the coordinates of the first points:\n\nleftmost point:\n\n$x_0 = y_0 = 0$\n\nrightmost point:\n\n$x_n = y_n = x_n\u22121$\n\nThis is the thickness of the boxes before the last cut:\n\n$max(0, x_n\u2212x_0)$.\n\nTo find the thickness of the cubes, you need to calculate the thickness of the boxes before the next cut, and then take the maximum.\n\nHere are the thicknesses of the boxes before the next cut:\n\nthickness of the boxes before the first cut:\n\n$max(0, x_n\u2212x_0)$.\n\nthickness of the boxes before the second cut:\n\n$max(0, x_n\u2212x_1)$.\n\nthickness of the boxes before the third cut:\n\n$max(0, x_n\u2212x_2)$.\n\nThe maximum thickness of the cubes is the maximum of these three numbers.\n\nThe code below shows how to find the maximum thickness of the cubes:"
    },
    {
        "number": 4948,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"0 4\\n5.0 6.0 7.0 1.0\") == \"25.0\"\nassert solution(\"0 10\\n5.0 6.0 7.0 1.0\") == \"25.0\"\nassert solution(\"0 11\\n5.0 6.0 7.0 1.0\") == \"50.0\"\nassert solution(\"0 12\\n5.0 6.0 7.0 1.0\") == \"50.0\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"\n\n-------------------------------------------\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == \"DA\\nDA\\nDA\\nNE\\nNE\"\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('''5 3 4\n3\n4\n5\n6\n7''') == 'DA DA DA NE NE'\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 3 4\\n3\\n4\\n5\\n6\\n7\\n') == 'DA\\nDA\\nDA\\nNE\\nNE\\n'\n\nn, w, h = map(int, stdin.split())\nprint('DA' if (w * h >= w + h) and (w * h >= n) else 'NE')\n\n\"\"\"\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(test_input) == test_output\n\"\"\"\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 3 4\\n3\\n4\\n5\\n6\\n7') == 'DA\\nDA\\nDA\\nNE\\nNE'\nprint(solution(input()))\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3 4') == 'DA'\nassert solution('5 3 4') == 'NE'\n\n'''\n\nimport sys\n\na, b, c = map(int, input().split())\nl = list(map(int, sys.stdin.readlines()))\n\nfor i in range(len(l)):\n    if l[i] <= b - a:\n        print('DA')\n    else:\n        print('NE')\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 3 4\\n3\\n4\\n5\\n6\\n7\") == 'DA\\nDA\\nDA\\nNE\\nNE'\n\n\"\"\"\n\nimport unittest\nfrom unittest.mock import patch\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 2 4\") == \"DA\\nDA\\nDA\"\nassert solution(\"5 3 4\") == \"NE\\nDA\\nDA\\nDA\"\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 4949,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('') == '''\n\n'''\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(a) == b\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"0 0\\n7 42\") == 6\n\"\"\""
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n2\n0 0\n7 42\n\"\"\") == \"6\"\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''2\n0 0\n7 42''') == '6'\n\nassert solution('''2\n0 0\n7 42''') == '6'\n\nassert solution('''2\n0 0\n7 42''') == '6'\n\nassert solution('''2\n0 0\n7 42''') == '6'\n\nassert solution('''2\n0 0\n7 42''') == '6'"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(readlines()) == OUTPUT\n\"\"\"\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5\\n0 0\\n1 2\\n1 2\\n2 2\\n2 3\\n0 0\\n1 2\\n1 2\\n2 2\\n2 3\") == \"2\"\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/5da1b1255e9c3ecf8500004a\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2\\n0 0\\n7 42\\n\") == \"6\"\nassert solution(\"3\\n0 0\\n7 42\\n1 2\\n\") == \"8\"\nassert solution(\"3\\n0 0\\n7 42\\n1 2\\n3 3\\n\") == \"10\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_0) == \"6\"\nassert solution(test_input_1) == \"6\"\nassert solution(test_input_2) == \"10\"\nassert solution(test_input_3) == \"8\"\nassert solution(test_input_4) == \"8\"\n\nprint(solution(input()))\n\nimport os\nimport io\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        with open(os.path.dirname(__file__) + '/sample_input.txt', 'r') as f:\n            with io.StringIO(solution(f.read())) as compressed:\n                with open(os.path.dirname(__file__) + '/sample_output.txt', 'r') as g:\n                    expected = g.read()\n                    self."
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2\\n0 0\\n7 42\") == \"6\"\n\n\"\"\""
    },
    {
        "number": 4950,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(example1) == 6\n\n\"\"\""
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == 'correct'\nassert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\\nBOB -> ALICE\") == '4'\nassert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\\nALICE -> CARL\") == '1'\n\nassert solution(\"1\\n-> TRUE\") == 'correct'\nassert solution(\"1\\n-> TRUE\\nTRUE -> TRUE\") == 'correct'\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n1\n-> 1\n1 -> 1\n-> 1\n1 -> 1\n''') == 'correct'\nassert solution('''\n3\n-> A\n-> B\n-> C\nA B -> A\nA B -> B\n-> C\nA -> A\n''') == '2'\nassert solution('''\n2\n-> A\n-> B\nA B -> A\nA -> A\n-> B\nA -> B\n''') == '1'\nassert solution('''\n2\n-> B\n-> A\nA B -> B\nB -> A\n''') == '1'\nassert solution('''\n3\n-> A\n-> B\n-> C\nA B C -> A\nA B C -> B\nA B -> C\n''') == '2'\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n-> ALICE\n-> BOB\nALICE BOB -> CARL\n\"\"\") == \"correct\"\nassert solution(\"\"\"\n-> ALICE\n-> BOB\nALICE BOB -> CARL\n\"\"\") == \"3\"\nassert solution(\"\"\"\n-> ALICE\n-> BOB\nALICE BOB -> CARL\n\"\"\") == \"correct\"\n\n\"\"\"\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\\n\") == \"correct\"\n\"\"\"\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n-> ALICE\n-> BOB\nALICE BOB -> CARL''') == 'correct'\nassert solution('''6\n-> ALICE\n-> BOB\nALICE -> BOB -> CARL -> DANIEL -> ALICE\n-> DANIEL\nALICE -> BOB -> CARL -> DANIEL -> ALICE -> DANIEL\n-> CARL\nALICE -> BOB -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> DANIEL -> ALICE -> DANIEL\n-> BOB\nALICE -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> DANIEL -> ALICE -> DANIEL\n-> DANIEL\nALICE -> BOB -> CARL -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> CARL -> DANIEL -> ALICE -> DANIEL\n-> CARL\nALICE -> BOB -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> DANIEL -> ALICE -> DANIEL\n-> BOB\nALICE -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> DANIEL -> ALICE -> DANIEL\n-> DANIEL\nALICE -> BOB -> CARL -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> CARL -> DANIEL -> ALICE -> DANIEL\n-> CARL\nALICE -> BOB -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> DANIEL -> ALICE -> DANIEL\n-> DANIEL\nALICE -> BOB -> CARL -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> CARL -> DANIEL -> ALICE -> DANIEL\n-> CARL\nALICE -> BOB -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> DANIEL -> ALICE -> DANIEL\n-> BOB\nALICE -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> DANIEL -> ALICE -> DANIEL\n-> DANIEL\nALICE -> BOB -> CARL -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> CARL -> DANIEL -> ALICE -> DANIEL\n-> CARL\nALICE -> BOB -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> DANIEL -> ALICE -> DANIEL\n-> DANIEL\nALICE -> BOB -> CARL -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> CARL -> DANIEL -> ALICE -> DANIEL\n-> CARL\nALICE -> BOB -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> DANIEL -> ALICE -> DANIEL\n-> BOB\nALICE -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> DANIEL -> ALICE -> DANIEL\n-> DANIEL\nALICE -> BOB -> CARL -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> CARL -> DANIEL -> ALICE -> DANIEL\n-> CARL\nALICE -> BOB -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> DANIEL -> ALICE -> DANIEL\n-> DANIEL\nALICE -> BOB -> CARL -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> CARL -> DANIEL -> ALICE -> DANIEL\n-> CARL\nALICE -> BOB -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> DANIEL -> ALICE -> DANIEL\n-> DANIEL\nALICE -> BOB -> CARL -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> CARL -> DANIEL -> ALICE -> DANIEL\n-> CARL\nALICE -> BOB -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> DANIEL -> ALICE -> DANIEL\n-> DANIEL\nALICE -> BOB -> CARL -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> CARL -> DANIEL -> ALICE -> DANIEL\n-> CARL\nALICE -> BOB -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> DANIEL -> ALICE -> DANIEL\n-> DANIEL\nALICE -> BOB -> CARL -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> CARL -> DANIEL -> ALICE -> DANIEL\n-> CARL\nALICE -> BOB -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> DANIEL -> ALICE -> DANIEL\n-> DANIEL\nALICE -> BOB -> CARL -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> CARL -> DANIEL -> ALICE -> DANIEL\n-> CARL\nALICE -> BOB -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> DANIEL -> ALICE -> DANIEL\n-> DANIEL\nALICE -> BOB -> CARL -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> CARL -> DANIEL -> ALICE -> DANIEL\n-> CARL\nALICE -> BOB -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> DANIEL -> ALICE -> DANIEL\n-> DANIEL\nALICE -> BOB -> CARL -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> CARL -> DANIEL -> ALICE -> DANIEL\n-> CARL\nALICE -> BOB -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> DANIEL -> ALICE -> DANIEL\n-> DANIEL\nALICE -> BOB -> CARL -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> CARL -> DANIEL -> ALICE -> DANIEL\n-> CARL\nALICE -> BOB -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> DANIEL -> ALICE -> DANIEL\n-> DANIEL\nALICE -> BOB -> CARL -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> CARL -> DANIEL -> ALICE -> DANIEL\n-> CARL\nALICE -> BOB -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> DANIEL -> ALICE -> DANIEL\n-> DANIEL\nALICE -> BOB -> CARL -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> CARL -> DANIEL -> ALICE -> DANIEL\n-> CARL\nALICE -> BOB -> DANIEL -> ALICE\n-> ALICE\nALICE -> BOB -> DANIEL -> ALICE -> DANIEL\n-> DANIEL\nALICE -> BOB -> CARL -> DANIEL -> ALICE\n-> ALICE\nALICE ->"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL\") == \"correct\"\nassert solution(\"5\\n-> ELLEN\\n-> KIRK\\n-> SAM\\n-> BOB\\n-> MARY\\nELLEN KIRK -> BOB\\nSAM BOB -> CARL\\nKIRK MARY -> BOB\\nMARY KIRK -> ALICE\\nBOB SAM -> CARL\") == \"3\"\n\nprint(solution(\"5\\n-> ELLEN\\n-> KIRK\\n-> SAM\\n-> BOB\\n-> MARY\\nELLEN KIRK -> BOB\\nSAM BOB -> CARL\\nKIRK MARY -> BOB\\nMARY KIRK -> ALICE\\nBOB SAM -> CARL\"))\n\"\"\"\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''3\n-> ALICE\n-> BOB\nALICE BOB -> CARL\n''') == 'correct'\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3\\n-> ALICE\\n-> BOB\\nALICE BOB -> CARL') == 'correct'\n\"\"\"\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n-> ALICE\n-> BOB\nALICE BOB -> CARL\n\"\"\") == \"correct\"\nassert solution(\"\"\"\n-> C\n-> A\n-> B\n-> A\nA -> B -> C\n\"\"\") == \"1\"\nassert solution(\"\"\"\n-> A\n-> B\nA B -> A\n\"\"\") == \"2\"\nassert solution(\"\"\"\n-> A\n-> B\nA B -> C\nA C -> D\n\"\"\") == \"3\"\nassert solution(\"\"\"\n-> A\n-> B\nA B -> C\nA C -> D\nD -> A\n\"\"\") == \"2\"\n"
    },
    {
        "number": 4951,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(str(sys.stdin.read())) == 'correct'\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\\n') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\\n') == 'Runoff!'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\\n\") == \"Connie Froggatt\"\nprint('Test pass.')"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Penny Franklin\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Penny Franklin\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\n\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\nn = int(input())\nnumbers = Counter()\n\nfor line in sys.stdin:\n    name = line.strip()\n    if name == \"***\":\n        break\n    numbers[name] += 1"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Alyssa Symons\\nVictory Holmes\\nJames Dunn\\nJames Dunn\\nJames Dunn\\nJames Dunn\\nJames Dunn\\nJames Dunn\\nJames Dunn\\nJames Dunn\\n***\") == \"James Dunn\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***''') == 'Connie Froggatt'\nassert solution('''Rory Johnson\nArya Stark\nJon Snow\nJaime Lannister\nCersei Lannister\nJaime Lannister\nCersei Lannister\nTyrion Lannister\nTyrion Lannister\nArya Stark\nCersei Lannister\nTyrion Lannister\nCersei Lannister\nCersei Lannister\n***''') == 'Jaime Lannister'\nassert solution('''Kit Harington\nKit Harington\nArya Stark\nJon Snow\nJon Snow\nCersei Lannister\nTyrion Lannister\nTyrion Lannister\nArya Stark\nJon Snow\n***''') == 'Runoff!'\nassert solution('''Penny Franklin\nMarti Graham\nConnie Froggatt\nJoseph Ivers\nConnie Froggatt\nPenny Franklin\nConnie Froggatt\nBruce Stanger\nConnie Froggatt\nBarbara Skinner\nBarbara Skinner\n***''') == 'Runoff!'\n\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\n\"Penny Franklin\\n\"\n\"Marti Graham\\n\"\n\"Connie Froggatt\\n\"\n\"Joseph Ivers\\n\"\n\"Connie Froggatt\\n\"\n\"Penny Franklin\\n\"\n\"Connie Froggatt\\n\"\n\"Bruce Stanger\\n\"\n\"Connie Froggatt\\n\"\n\"Barbara Skinner\\n\"\n\"Barbara Skinner\") == \"Connie Froggatt\"\nassert solution(\n\"Penny Franklin\\n\"\n\"Marti Graham\\n\"\n\"Connie Froggatt\\n\"\n\"Joseph Ivers\\n\"\n\"Connie Froggatt\\n\"\n\"Penny Franklin\\n\"\n\"Barbara Skinner\\n\"\n\"Barbara Skinner\") == \"Runoff!\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Connie Froggatt\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\nassert solution(\"Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***\") == \"Runoff!\"\n"
    },
    {
        "number": 4952,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Connie Froggatt'\nassert solution('Penny Franklin\\nMarti Graham\\nConnie Froggatt\\nJoseph Ivers\\nConnie Froggatt\\nPenny Franklin\\nConnie Froggatt\\nBruce Stanger\\nConnie Froggatt\\nBarbara Skinner\\nBarbara Skinner\\n***') == 'Runoff!'\n\n\"\"\"\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == '2'\n\"\"\"\n\nfrom collections import deque\nfrom typing import List\nimport string\n\ntest_cases = [\n    (7, ['Jabba-the-Hutt Huttese', 'Bib-Fortuna Huttese Basic', 'Boba-Fett Basic Huttese', 'Chewbacca Shyriiwook Basic', 'Luke Basic Jawaese Binary', 'Grakchawwaa Shyriiwook Basic Jawaese', 'R2D2 Binary Basic']),\n]\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        result: List[int] = []\n        n: int = int(stdin.split()[0])\n        if n < 1 or n > 100:\n            return ''\n        \n        for i in range(1, n + 1):\n            c = stdin.split('\\n')[i]\n            c = c.split()\n            if len(c) < 2 or len(c[0]) < 1 or len(c[1]) < 1 or len(c[1]) > 20:\n                return ''\n            \n            result.append(c)\n        \n        if len(result) <= 1:\n            return '0'\n        \n        count = 0\n        possible_characters = {name: [] for name in result[0][0]}\n        for c in result:\n            char = c[0]\n            possible_characters[char] += c[1:]\n        \n        for c in possible_characters:\n            queue = deque([c])\n            visited = {c: 1}\n            while queue:\n                curr_character = queue.popleft()\n                if curr_character not in possible_characters:\n                    continue\n                for next_character in possible_characters[curr_character]:\n                    if next_character not in visited:\n                        queue.append(next_character)\n                        visited[next_character] = 1\n            count += len(visited)\n        \n        return str(count)"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''\n5\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n''') == '2'\nassert solution('''\n4\nPolly-Murray Huttese\nFran Huttese\nPolly-Murray Jawaese\nFran-Murray Jawaese\n''') == '3'\nassert solution('''\n9\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\nPolly-Murray Huttese\nFran Huttese\nPolly-Murray Jawaese\nFran-Murray Jawaese\n''') == '4'\nassert solution('''\n1\nJabba-the-Hutt Huttese\n''') == '1'\nassert solution('''\n2\nPolly-Murray Huttese\nPolly-Murray Jawaese\n''') == '1'\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic') == '2'\nassert solution('2\\nFran Basic\\nIan Basic') == '1'\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''\n7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n''') == '2'\nassert solution('''\n7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n''') == '3'\nassert solution('''\n8\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\nFalkor-Barth Jawaese Basic\nGreedo Jawaese\nSullustan Jawaese\nBin Doh Jawaese\nBrenna Jawaese\n''') == '4'\nassert solution('''\n8\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\nFalkor-Barth Jawaese Basic\nGreedo Jawaese\nSullustan Jawaese\nBin Doh Jawaese\nBrenna Jawaese\n''') == '3'\nassert solution('''\n9\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\nFalkor-Barth Jawaese Basic\nGreedo Jawaese\nSullustan Jawaese\nBin Doh Jawaese\nBrenna Jawaese\n''') == '3'\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\"\nprint(\"OK\")\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic\") == \"2\"\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('7\\nJabba-the-Hutt Huttese\\nBib-Fortuna Huttese Basic\\nBoba-Fett Basic Huttese\\nChewbacca Shyriiwook Basic\\nLuke Basic Jawaese Binary\\nGrakchawwaa Shyriiwook Basic Jawaese\\nR2D2 Binary Basic') == 2\n'''\nimport re"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(SAMPLE_INPUT) == OUTPUT_SAMPLE_1\n\n\"\"\"\n"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n''') == '2'\nprint('Test 1: ', solution('''\n7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n'''))\n\nassert solution('''\n8\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\nJayme Owonubi Jawaese\nSithu Sithu Jawaese\nAckbar Basic\n''') == '6'\nprint('Test 2: ', solution('''\n8\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\nJayme Owonubi Jawaese\nSithu Sithu Jawaese\nAckbar Basic\n'''))\n\nassert solution('''\n10\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\nJayme Owonubi Jawaese\nSithu Sithu Jawaese\nAckbar Basic\nR2D2 Binary Basic\nTheon Mon Calamity Jawaese\nBasic Phrase Jawaese\nGrakchawwaa Jawaese\nBoba-Fett Jawaese\n''') == '6'\nprint('Test 3: ', solution('''\n10\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\nJayme Owonubi Jawaese\nSithu Sithu Jawaese\nAckbar Basic\nR2D2 Binary Basic\nTheon Mon Calamity Jawaese\nBasic Phrase Jawaese\nGrakchawwaa Jawaese\nBoba-Fett Jawaese\n'''))\n\nassert solution('''\n11\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\nJayme Owonubi Jawaese\nSithu Sithu Jawaese\nAckbar Basic\nR2D2 Binary Basic\nTheon Mon Calamity Jawaese\nBasic Phrase Jawaese\nGrakchawwaa Jawaese\nBoba-Fett Jawaese\nShyriiwook Jawaese\n''') == '6'\nprint('Test 4: ', solution('''\n11\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\nJayme Owonubi Jawaese\nSithu Sithu Jawaese\nAckbar Basic\nR2D2 Binary Basic\nTheon Mon Calamity Jawaese\nBasic Phrase Jawaese\nGrakchawwaa Jawaese\nBoba-Fett Jawaese\nShyriiwook Jawaese\n'''))\n\nassert solution('''\n6\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n''') == '3'\nprint('Test 5: ', solution('''\n6\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n'''))"
    },
    {
        "number": 4953,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"\"\"7\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\n\"\"\") == \"2\"\n\nassert solution(\"\"\"3\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\n\"\"\") == \"2\"\n\nassert solution(\"\"\"8\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\nLuke Basic Jawaese Binary\nGrakchawwaa Shyriiwook Basic Jawaese\nR2D2 Binary Basic\nFran Huttese\nIan Huttese\nPolly Huttese\nSpencer Huttese\n\"\"\") == \"2\"\n\nassert solution(\"\"\"3\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\n\"\"\") == \"2\"\n\nassert solution(\"\"\"4\nJabba-the-Hutt Huttese\nBib-Fortuna Huttese Basic\nBoba-Fett Basic Huttese\nChewbacca Shyriiwook Basic\n\"\"\") == \"1\""
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\n\"\"\"\n\n\"\"\"\n\nN, B, H, W = list(map(int, stdin.readline().split()))\nprice = list(map(int, stdin.readline().split()))\nbed = list(map(int, stdin.readline().split()))"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"10 3 2 3\\n200\\n27 3 20\") == \"900\"\nassert solution(\"10 3 2 3\\n200\\n27 3 20\") == \"900\"\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 1000 2 3\\n200\\n27 3 20\") == \"900\"\n\"\"\"\n\nfrom heapq import heappush, heappop"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == 900\n\"\"\"\n\nn, budget, h, w = (int(i) for i in stdin.readline().split())\ncost = [int(i) for i in stdin.readline().split()]\n\ncost.sort(reverse=True)\n\nbest = 0\nfor i in range(h):\n    for j in range(w):\n        s = sum([cost[i * w + j] for i in range(j, j + n, w)])\n        if s <= budget and s > best:\n            best = s\n\nprint(best)\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"\nprint(solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\"))\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == '900'\n\n\"\"\"\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3') == '1'\n\"\"\"\n\nimport math\n\nn, b, h, w = [int(i) for i in input().split()]\n\ncost = 0\nfor i in range(h):\n    p, b = [int(i) for i in input().split()]\n    if p > b:\n        cost += p * w\n    else:\n        cost += b * w\n    if cost > b:\n        print('stay home')\n        break\nelse:\n    print(cost)"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 1000 2 3\\n200\\n0 2 2\\n300\\n27 3 20') == '900'\n\"\"\""
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 100 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"900\"\nassert solution(\"4 100 2 3\\n200\\n27 3 20\") == \"stay home\"\nassert solution(\"4 100 2 3\\n200\\n27 3 20\\n300\\n27 3 20\") == \"stay home\"\nassert solution(\"4 100 2 3\\n200\\n0 2 2\\n300\\n27 3 20\") == \"stay home\"\nassert solution(\"4 100 2 3\\n200\\n0 2 2\\n300\\n27 3 20\\n300\\n27 3 20\") == \"stay home\"\n\nprint(solution(\"4 100 2 3\\n200\\n0 2 2\\n300\\n27 3 20\"))\nprint(solution(\"4 100 2 3\\n200\\n27 3 20\"))\nprint(solution(\"4 100 2 3\\n200\\n27 3 20\\n300\\n27 3 20\"))\nprint(solution(\"4 100 2 3\\n200\\n0 2 2\\n300\\n27 3 20\"))\nprint(solution(\"4 100 2 3\\n200\\n0 2 2\\n300\\n27 3 20\\n300\\n27 3 20\"))\n\n-----Problem-----\nN, B, H, W = list(map(int, stdin.readline().split()))\nfor i in range(H):\n    p, a = list(map(int, stdin.readline().split()))\n    if sum(a[0:W]) <= B:\n        print(p * W)\n        break\nelse:\n    print(\"stay home\")\n"
    },
    {
        "number": 4954,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input) == test_output\nprint(solution(input))\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    \"10\\n\"\n    \"C D F D C D F F F C \"\n    ) == \"A# C D# F\"\n\"\"\"\nimport sys\nfrom typing import List\n\nsys.setrecursionlimit(10000)\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"10\\nC D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"3\\nG G G\") == \"none\"\nassert solution(\"5\\nC C C C C\") == \"none\"\n\"\"\""
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('C D F D C D F F F C') == 'A# C D# F'\nassert solution('G D B A G G B A B G') == 'C D F G'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"10 C D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"1 C D F D C D F F F C\") == \"none\"\nassert solution(\"1 C D F D C D F F F C B\") == \"A# C D# F B\"\nassert solution(\"1 C D F D C D F F F C E\") == \"A# C D# F E\"\nassert solution(\"1 C D F D C D F F F C G\") == \"A# C D# F G\"\n"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"10\\nC D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"7\\nA B C D E F G A\") == \"none\""
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('10\\nC D F D C D F F F C') == 'A# C D# F'\nassert solution('1\\nC') == 'none'\nassert solution('100\\n
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('10 C D F D C D F F F C') == 'A# C D# F'"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"C D F D C D F F F C \") == \"A# C D# F\"\nassert solution(\"C D F D C D F F F C \") == \"A# C D# F\"\nassert solution(\"C D F D C D F F F C \") == \"A# C D# F\"\n\n-----Input-----\n3\nA B C\n\n-----Output-----\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C"
    },
    {
        "number": 4955,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"C D F D C D F F F C\") == \"A# C D# F\"\nassert solution(\"C D F F C C D C D F F F C\") == \"none\"\nassert solution(\"C D F F C C D C D F F F C\") == \"none\"\nassert solution(\"C D F F C C D C D F F F C\") == \"none\"\nassert solution
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"hai talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\n\"\"\""
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"jag visar och b\u00e4r en hund\") == \"haer talar vi rikssvenska\"\nassert solution(\"klar med fiends klar med fiends\") == \"klar med fiends klar med fiends\"\nassert solution(\"klar med fiends klar med fiends l\u00e4r sig n\u00e4stan\") == \"klar med fiends klar med fiends\""
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'\nassert solution('dae ju traeligt va') == 'haer talar vi rikssvenska'\nassert solution('dae ju traeligt va') == 'dae ae ju traeligt va'\n\nassert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''dae ae ju traeligt va''') == 'dae ae ju traeligt va'\nassert solution('''noe stod heller i b\u00e5ten''') == 'haer talar vi rikssvenska'\n'''"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(stdin) == expected\n\n\"\"\""
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('dae ae ju traeligt va') == 'dae ae ju traeligt va'\nassert solution('haer talar vi rikssvenska') == 'haer talar vi rikssvenska'\n\"\"\"\n"
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"hae rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae ae ju traeligt va ja\") == \"dae ae ju traeligt va\"\n\"\"\""
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\"\nassert solution(\"dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va dae ae ju traeligt va\") == \"dae ae ju traeligt va\""
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"dae ae ju traeligt va\") == \"dae ae ju traeligt va\"\nassert solution(\"haer talar vi rikssvenska\") == \"haer talar vi rikssvenska\""
    },
    {
        "number": 4956,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(stdin) == expected\n----------------------------\n\n##  0:00 | 1.50s | 0.06s\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"2 5\\n..#.#\\n.#..#\") == \"..E..\\n.#.#.#\"\nassert solution(\"1 1\\n.#\") == \"#\"\n\n\"\"\"\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(solution.__doc__) == 'E..E#.'\n\"\"\"\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\".#.#.\\n.###.\\n##.#.\\n#.##.\\n####\\n#.##.\\n#.#.#\") == \"E.E#E\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\\n\", \"The first example test failed.\"\n\nassert solution(\"###\\n#.#\\n#.#\\n###\") == \"E#E\\n#.E\\n##E\\n\", \"The second example test failed.\"\n\nprint('The local tests are done. Click on \"Check\" to get your score.')\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\".#..#\\n\"\n\".....\\n\"\n\"#####\\n\"\n\"....#\\n\"\n\"...##\") == \"...#E..\\n\" \\\n\"..#E..\\n\" \\\n\"#..E#.\\n\" \\\n\"E...#E\\n\" \\\n\"##E.E#\"\n\n\"\"\"\n\nfrom collections import deque\n\n\nclass Land:\n    def __init__(self, water=False):\n        self.water = water\n        self.coffee = False\n        self.adjacent = []\n\n    def add_adjacent(self, adjacent):\n        if adjacent not in self.adjacent:\n            self.adjacent.append(adjacent)\n\n    def get_adjacent(self):\n        return self.adjacent\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n\n\"\"\""
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\n\nprint(solution(stdin.strip()))\n\n\"\"\"\n\"\"\"\n---------------\nShort Answer\n---------------\n\"\"\"\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\nassert solution('5 6\\n.##.#\\n.##.#\\n#.#.#\\n.#.##\\n.###.') == '.##.#\\n.##.#E\\n.#.#E\\n#.#.#\\n.###E'\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\n\"\"\"\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#\") == \"E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#\"\nassert solution(\"1 1\\n#\") == \"E\"\nassert solution(\"3 3\\n#.#\\n#.#\\n#.#\") == \"E..E.#\"\nassert solution(\"4 5\\n..#.#\\n#....\\n.##.#\\n#...#\") == \"E..#E#\"\nassert solution(\"3 2\\n..#\\n#..\\n\") == \"E.#\"\n"
    },
    {
        "number": 4957,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 6\\n....#.\\n....#.\\n#.....\\n......\\n##...#') == 'E..E#.\\n..E.#E\\n#..E..\\n.E...E\\n##E.E#'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\nprint(solution(stdin))\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.readlines()\n\na = [int(x) for x in stdin[0].split()]\nb = [int(x) for x in stdin[1].split()]\n\nassert len(a) == 6\nassert len(b) == 2\n\na.sort(reverse=True)\nb.sort(reverse=True)\n\nsuma = sum(a)\nsumb = sum(b)"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\n\"\"\""
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\"\"\""
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2 2 2 2') == '1 1 1'\nassert solution('1 2 2 1') == '2 1 2'\nassert solution('1 1 1 1 1 1 1 1 1 1') == '1 1 1 1 1 1 1 1 1'\nassert solution('1 1 2 3 1') == '1 3 1 1'\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\n\n\"\"\"\n\na = [12, 8, 2, 4, 10, 3, 25, 14]"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\nassert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\nassert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\n\"\"\"\n\nimport sys\nimport itertools\n\nN = list(map(int, sys.stdin.readline().strip().split()))\nN.sort(reverse=True)\n\nA = [N[-1] - N[-2], N[-2] - N[-3]]\nA.sort(reverse=True)\n\nfor i in range(3):\n    print(N[i], end=\" \")\n\nprint(\"\")\n\nfor i in range(2):\n    print(A[i], end=\" \")\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\nassert solution('2 5 5 5 1') == '2 5 5 5 1'\nassert solution('20 19 17 18 5') == '20 18 5 17 19'\nassert solution('1 2 1 1 2') == '2 1 1 2 1'\n\"\"\"\n\nfrom itertools import combinations\n\nN = [int(n) for n in stdin.split()]\n\ntotal = sum(N)\nnums = sorted(N, reverse=True)\n\nfor i in range(len(nums)):\n    if total - nums[i] < (nums[i] * 6):\n        break\n\nfor c in combinations(nums, i):\n    if sum(c) == total / 6:\n        print(*c, sep=' ')\n        break\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\"\"\"\n"
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"12 8 2 4 10 3 25 14\") == \"12 10 3 8 4 2\"\n\"\"\""
    },
    {
        "number": 4958,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('12 8 2 4 10 3 25 14') == '12 10 3 8 4 2'\n\nprint(solution('12 8 2 4 10 3 25 14'))"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('0 0 0') == ''\nassert solution('0 1 3') == '1'\nassert solution('9 0 3') == '4'\nassert solution('1 0 3') == '0'\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"9 0 3\") == \"4\"\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('9 0 3') == '4'\nassert solution('1 0 0') == '0'\nassert solution('0 1 0') == '1'\nassert solution('1 0 2') == '2'\nassert solution('2 3 4') == '6'\n\nimport os, io, time, collections, math, operator\nfrom functools import reduce\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('9 0 3') == '4'\nassert solution('1 1 1') == '1'\nassert solution('1 1') == '2'\nassert solution('1') == '0'\nassert solution('1 1 1') == '1'\n\"\"\""
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"9 0 3\") == \"4\"\n\"\"\"\n\ne, f, c = map(int, input().split())\n\nprint(e + f // c)\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\n    '9 0 3'\n) == '4'\nassert solution(\n    '9 0 0'\n) == '0'\nassert solution(\n    '2 1 0'\n) == '0'\nassert solution(\n    '8 9 6'\n) == '5'\nassert solution(\n    '9 0 0'\n) == '0'\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('9 0 3') == '4'\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('''9 0 3''') == '4'\nassert solution('''9 9 9''') == '0'\nassert solution('''9 9 9''') == '0'\nassert solution('''9 9 0''') == '0'\nassert solution
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"9 0 3\") == \"4\"\nassert solution(\"1 1 0\") == \"1\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"1 1 1 1 1\") == \"2\"\n"
    },
    {
        "number": 4959,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('9 0 3') == '4'\n\"\"\"\n\ne, f, c = input().split()\ne = int(e)\nf = int(f)\nc = int(c)\nprint(e // (c - f) + e % (c - f))\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1010\") == \"12\"\nprint(solution(\"1010\"))\n\n\"\"\""
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1010\") == \"12\"\nassert solution(\"11100110011\") == \"132\"\nassert solution(\"11111101111\") == \"139\"\nassert solution(\"11101111110\") == \"140\"\nassert solution(\"110111101010\") == \"158\"\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1010\") == \"12\"\nassert solution(\"1111\") == \"7\"\nassert solution(\"11101101010\") == \"8\"\nassert solution(\"11101101011\") == \"8\"\nassert solution(\"110011101011\") == \"13\"\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1010') == '12'\nassert solution('100101101100010') == '232'\n\"\"\""
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1010') == '12'\nassert solution('11010') == '14'\nassert solution('111110') == '17'\nassert solution('111111110') == '255'\nassert solution('101010') == '216'\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1010') == '12'\nassert solution('11101110110011001101') == '132'\nassert solution('1110111011001101111011101110111101110111100110111111101111011110111101111011110111101111011110111111110111101111011110111101111011110111111111111011110111111110111101111011111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1010\") == \"12\"\nassert solution(\"10110\") == \"14\"\nassert solution(\"1100100\") == \"144\"\nassert solution(\"1111111\") == \"255\"\nprint(\"All tests passed.\")"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1010') == '12'\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1010') == '12'\nassert solution('1100100') == '24'\nassert solution('1101111') == '25'\nassert solution('11100101110111010') == '257'\nassert solution('11100101110111010') == '257'\n"
    },
    {
        "number": 4960,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1010\") == 12\nassert solution(\"10101010\") == 170\nassert solution
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdin\nprint(solution(stdin))\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 3\\n..o\\no..') == '2'\nprint(solution(stdin))\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3\\n..o\\no..\\n\") == 2\n\n\"\"\""
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2 3\\no..\\noo.') == '2'\n\"\"\"\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == \"2\"\nprint(solution(\"2 3\\n..o\\no..\"))\n\n-----Problem-----\n\nA nice part of the Roman Catholic Mass is the rite of peace when people shake hands with their neighbours and say \u201cpeace be with you\u201d. Mirko has found a way to turn this ritual into his own favor. Inside the church, there are $R$ rows of benches where each row can hold a capacity of $S$ people. We can imagine the seating order as a matrix sized $R \\times S$ where each element represents either a person or an empty seating space. Let us assume that each person shakes hands with their neighbours. That means that the neighbours are located in one of the eight neighbouring elements (if such element exists):\n\nA seating order of the people inside the church has been given before Mirko enters. Mirko is, of course, late for the morning Mass and will sit in an empty space so that he shakes hands with as many people as he can. If there are no empty seats left, Mirko will simply give up on the idea and go to the evening Mass instead. We can assume that nobody enters the church after Mirko.\n\nCalculate the total number of handshakes given during the morning Mass.\n\n-----Input-----\nThe first line of input contains positive integers $R$ and $S$ ($1 \\leq R, S \\leq 50$) as stated in the text. Each of the following $R$ lines contains $S$ characters. These $R \\times S$ characters represent the seating order. The character \u201c.\u201d (dot) represents an empty place and the character \u201co\u201d (lowercase letter o) represents a person.\n\n-----Output-----\nThe first and only line of output should contain the required number of handshakes.\n\n-----Examples-----\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n1 1\no.\nSample Output:\n0\n\nSample Input:\n2 2\n..o\noo.\nSample Output:\n1\n\nSample Input:\n2 2\noo.\noo.\nSample Output:\n0\n\nSample Input:\n3 3\n.o.\n.o.\n.o.\nSample Output:\n6\n\nSample Input:\n3 2\n.o.\n.o.\noo.\nSample Output:\n4\n\nSample Input:\n3 1\n.o.\n.o.\n.o.\nSample Output:\n1\n\nSample Input:\n3 2\n.o.\n.o.\noo.\nSample Output:\n1\n\nSample Input:\n4 1\n.o.\n.o.\no.o.\n.o.\nSample Output:\n2\n\nSample Input:\n4 2\n.o.\n.o.\no.o.\n.o.\nSample Output:\n0\n\nSample Input:\n2 2\no.\noo.\nSample Output:\n1\n\nSample Input:\n2 3\n..o\noo.\nSample Output:\n2\n\nSample Input:\n3 3\noo.\noo.\noo.\nSample Output:\n0\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input:\n2 3\n..o\no..\nSample Output:\n2\n\nSample Input"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2 3\\n..o\\no..') == '2'\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 3\\n..o\\no..') == '2'\n\nassert solution('4 10\\n.o.\\no.o.\\no.o.\\no.o.\\no.o.\\no.o.\\no.o.\\no.o.') == '0'\n\nassert solution('3 8\\n..o\\no..\\no..') == '1'\nassert solution('2 3\\n.o.\\no.\\n..') == '0'\nassert solution('4 10\\n.o.\\no.o.\\no.o.\\no.o.\\no.o.\\no.o.\\no.o.') == '0'\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 3\\n..o\\no..') == '2'\n\"\"\""
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 3\\n..o\\no..\") == \"2\"\n\n\"\"\"\n\nimport re\n\nR, S = map(int, input().split())\norder = []\nfor _ in range(R):\n    order.append(input())\n\npattern = re.compile(\"[o]+\")\n\ncount = 0\n\nfor row in order:\n    # print(row)\n    while pattern.search(row):\n        start = row.find(\"o\")\n        end = start + 1\n        # print(f\"start={start}, end={end}\")\n        while end < S and row[start:end]!= \".\":\n            end += 1\n        if end == S:\n            break\n        row = row[0:start] + \".\" * (end - start) + row[end:]\n        count += end - start\n\nprint(count)\n"
    },
    {
        "number": 4961,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3\\no..\\no.') == 2\n\"\"\""
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(open(r\"../assets/problems/75/input1.txt\", \"r\")) == open(r\"../assets/problems/75/output1.txt\", \"r\").read()\n\"\"\"\n\nimport itertools\nimport sys\n\nfrom itertools import product\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\nassert solution(\"5 3\\n3 2\\n3 2\\n3 2\\n3 2\") == 'SMECE\\nSMECE\\nSMECE\\nSMECE'\nassert solution(\"5 3\\n1 2\\n1 2\\n1 3\\n1 2\") == 'LADICA\\nLADICA\\nSMECE\\nSMECE'\nassert solution(\"5 3\\n1 2\\n1 2\\n1 2\\n3 2\") == 'SMECE\\nSMECE\\nSMECE\\nSMECE'\nassert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n3 2\") == 'LADICA\\nLADICA\\nSMECE\\nSMECE'\n\n-----Solution-----\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\nprint(solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\"))\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\n\n\"\"\"\n\nimport sys\nimport json"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"\"\"\n5 3\n1 2\n1 3\n1 2\n1 3\n1 2\n\"\"\") == \"\"\"\nLADICA\nLADICA\nLADICA\nSMECE\nSMECE\n\"\"\"\n\nassert solution(\"\"\"\n4 3\n1 2\n1 3\n1 2\n1 3\n\"\"\") == \"\"\"\nLADICA\nSMECE\nLADICA\nSMECE\n\"\"\"\n\n\"\"\"\nimport sys\n\nclass Node:\n    def __init__(self):\n        self.number = 0\n        self.count = 0\n        self.left = None\n        self.right = None\n        \n    def __repr__(self):\n        return 'Node(number={}, count={}, left={}, right={})'.format(self.number, self.count, self.left, self.right)"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n1 3\\n1 2\\n3 4\\n1 3\\n3 4\") == \"LADICA\\nLADICA\\nSMECE\\nSMECE\"\n\"\"\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\n\n-----Explanation-----\nThe items are all distributed among the three drawers. As you can see, the first two items end up in the drawer corresponding to the first drawer. The last item is thrown away because it cannot be stored in the first drawer.\n\"\"\"\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2') == 'LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE'\n"
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n1 3\\n1 2\") == \"LADICA\\nLADICA\\nLADICA\\nSMECE\\nSMECE\"\nassert solution(\"5 3\\n1 2\\n1 3\\n1 2\\n3 5\") == \"LADICA\\nSMECE\\nSMECE\\nLADICA\\nLADICA\"\n\n\"\"\""
    },
    {
        "number": 4962,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(test_input_1) == test_output_1"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"0\\n1\") == \"1 2\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"2\\n0\") == \"1 2\"\nassert solution(\"3\\n2 1 0\") == \"2 1 3\"\nassert solution(\"4\\n3 2 1 0\") == \"2 1 3 4\"\nassert solution(\"5\\n4 3 2 1 0\") == \"2 1 4 3 5\"\n\nassert solution(\"4\\n1 1 1 1\") == \"1 2 3 4\"\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 1 3 4 2\") == \"2 1 4 3 5\"\n\"\"\""
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"2\\n0\") == \"1 2\""
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\n    \"2\\\\n0\"\n) == \"1 2\"\nassert solution(\n    \"4\\\\n2 2 1 1\"\n) == \"3 1 2 4\"\nassert solution(\n    \"2\\\\n0\"\n) == \"1 2\"\n\"\"\"\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('2\\n0') == '1 2'\n\"\"\"\n\nfrom itertools import combinations\n\nn = int(input())\narr = list(map(int, input().split()))\nprint(' '.join(list(map(str, sorted([i + 1 for i in list(combinations(arr, n - 1))])))))\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2\\n0') == '1 2'\nassert solution('1\\n0') == '1'\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint(solution('1\\n0'))\n\nprint(solution('2\\n0'))\nprint("
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == '1 2'\nassert solution('2\\n1') == '2 1'\nassert solution('2\\n0') == '1 2'\nassert solution('2\\n1 2') == '2 1'\nassert solution('2\\n2 1') == '2 1'\n"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('2\\n0\\n') == '1 2'\nassert solution('4\\n2\\n2\\n0\\n') == '2 1 3 4'\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4963,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4\\n0 1 3 2') == '1 2 3 0'\nassert solution('3\\n0 1 2') == '2 1 0'\nassert solution('2\\n1 0') == '0 1'\nassert solution('3\\n0 2 1') == '2 0 1'\n\n'''"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('4 2 3\\n0 1\\n0 1') == '1'\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(input()) == output()\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\") == \"1\"\nassert solution(\"4 1 1\\n1 2\\n1 3\\n1 4\\n1 2\\n1 3\") == \"1\"\nassert solution(\"7 4 7\\n0 1\\n0 4\\n0 2\\n0 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 5\\n1 4\\n1 3\\n1 2\\n1 6\\n1 5\\n1 7\\n1 6\\n1 4\\n1 3\\n1 5\\n1 7\\n1 5\\n1 4\\n1 2\\n1 4\\n1 6\\n1 3\\n1 3\\n1 4\\n1 6\\n1 6\\n1 5\\n1 4\\n1 3\\n1 5\\n1 7\\n1 5\\n1 6\\n1 5\\n1 3\\n1 6\\n1 7\\n1 5\\n1 7\\n1 6\\n1 5\\n1 6\\n1 7\\n1 7\\n1 6\\n1 3\\n1 3\\n1 6\\n1 5\\n1 4\\n1 4\\n1 3\\n1 5\\n1 7\\n1 7\\n1 5\\n1 6\\n1 7\\n1 7\\n1 7\\n1 4\\n1 3\\n1 4\\n1 5\\n1 3\\n1 3\\n1 6\\n1 6\\n1 7\\n1 3\\n1 3\\n1 6\\n1 7\\n1 5\\n1 6\\n1 7\\n1 5\\n1 7\\n1 4\\n1 3\\n1 4\\n1 4\\n1 3\\n1 4\\n1 5\\n1 6\\n1 6\\n1 4\\n1 5\\n1 5\\n1 6\\n1 7\\n1 6\\n1 6\\n1 7\\n1 7\\n1 6\\n1 4\\n1 7\\n1 7\\n1 5\\n1 6\\n1 7\\n1 7\\n1 6\\n1 7\\n1 5\\n1 4\\n1 5\\n1 3\\n1 6\\n1 4\\n1 7\\n1 7\\n1 6\\n1 5\\n1 6\\n1 6\\n1 6\\n1 6\\n1 7\\n1 7\\n1 7\\n1 6\\n1 4\\n1 6\\n1 7\\n1 6\\n1 7\\n1 6\\n1 6\\n1 4\\n1 7\\n1 7\\n1 7\\n1 7\\n1 7\\n1 6\\n1 6\\n1 4\\n1 7\\n1 6\\n1 4\\n1 6\\n1 4\\n1 6\\n1 7\\n1 6\\n1 4\\n1 5\\n1 3\\n1 3\\n1 5\\n1 4\\n1 4\\n1 5\\n1 5\\n1 7\\n1 6\\n1 4\\n1 6\\n1 6\\n1 6\\n1 7\\n1 7\\n1 6\\n1 7\\n1 5\\n1 7\\n1 5\\n1 7\\n1 6\\n1 5\\n1 7\\n1 5\\n1 7\\n1 5\\n1 6\\n1 7\\n1 7\\n1 7\\n1 6\\n1 7\\n1 5\\n1 7\\n1 7\\n1 7\\n1 7\\n1 6\\n1 6\\n1 7\\n1 6\\n1 7\\n1 7\\n1 6\\n1 7\\n1 7\\n1 6\\n1 7\\n1 7\\n1 6\\n1 7\\n1 5\\n1 5\\n1 7\\n1 6\\n1 6\\n1 7\\n1 5\\n1 7\\n1 6\\n1 4\\n1 5\\n1 5\\n1 6\\n1 7\\n1 4\\n1 5\\n1 7\\n1 6\\n1 7\\n1 5\\n1 4\\n1 6\\n1 5\\n1 4\\n1 7\\n1 5\\n1 7\\n1 4\\n1 7\\n1 7\\n1 6\\n1 7\\n1 7\\n1 7\\n1 7\\n1 6\\n1 7\\n1 5\\n1 7\\n1 7\\n1 6\\n1 7\\n1 5\\n1 7\\n1 5\\n1 7\\n1 6\\n1 7\\n1 6\\n1 7\\n1 5\\n1 6\\n1 7\\n1 6\\n1 7\\n1 7\\n1 5\\n1 6\\n1 6\\n1 4\\n1 5\\n1 5\\n1 6\\n1 7\\n1 7\\n1 4\\n1 6\\n1 7\\n1 5\\n1 7\\n1 4\\n1 6\\n1 7\\n1 7\\n1 7\\n1 6\\n1 7\\n1 7\\n1 7\\n1 7\\n1 7\\n1 7\\n1 6\\n1 7\\n1 7\\n1 6\\n1 7\\n1 7\\n1 7\\n1 7\\n1 7\\n1 7\\n1 7\\n1 7\\n1 7\\n1 6\\n1 6\\n1 6\\n1 7\\n1 7\\n1 7\\n1 6\\n1 7\\n1 7\\n1 6\\n1 7\\n1 7\\n1 7\\n1 6\\n1 6\\n1 7\\n1 7\\n1 7\\n1 7\\n1 7\\n1 6\\n1 6\\n1 7\\n1 7\\n1 7\\n1 7\\n1 7\\n1 7\\n1 7\\n1 7\\n1 7\\n1 7\\n1"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"4 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\") == \"1\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 3 3\\n0 1\\n0 1\\n0 0\") == \"0\"\nassert solution(\"4 2 2\\n0 1\\n1 2\\n2 3\\n3 4\") == \"3\"\n\"\"\"\n\n\"\"\"\nhttps://www.codewars.com/kata/578553e6b8f4688fec0005a1/train/python\n\n1. Write an algorithm that calculates the maximal sum of some non-empty array of integers. This array can contain negative numbers.\n\n2. Write an algorithm to replace all but one digits in a number, i.e. 12345 becomes 54321.\n\n3. Write an algorithm that finds the minimal number of moves needed to obtain a strictly increasing sequence from an input, starting from zero. For example, the sequence, starting from 0: 0, 3, 2, 6, 9, 7 becomes strictly increasing: 1, 2, 3, 4, 5, 6.\n\n4. Write an algorithm that finds the minimal number of moves needed to obtain a strictly increasing sequence from an input, starting from zero. For example, the sequence, starting from 0: 0, 3, 2, 6, 9, 7 becomes strictly increasing: 1, 2, 3, 4, 5, 6.\n\n5. Write an algorithm that finds the minimal number of moves needed to obtain a strictly increasing sequence from an input, starting from zero. For example, the sequence, starting from 0: 0, 3, 2, 6, 9, 7 becomes strictly increasing: 1, 2, 3, 4, 5, 6.\n\n6. Write an algorithm that finds the minimal number of moves needed to obtain a strictly increasing sequence from an input, starting from zero. For example, the sequence, starting from 0: 0, 3, 2, 6, 9, 7 becomes strictly increasing: 1, 2, 3, 4, 5, 6.\n\n7. Write an algorithm that finds the minimal number of moves needed to obtain a strictly increasing sequence from an input, starting from zero. For example, the sequence, starting from 0: 0, 3, 2, 6, 9, 7 becomes strictly increasing: 1, 2, 3, 4, 5, 6.\n\n8. Write an algorithm that finds the minimal number of moves needed to obtain a strictly increasing sequence from an input, starting from zero. For example, the sequence, starting from 0: 0, 3, 2, 6, 9, 7 becomes strictly increasing: 1, 2, 3, 4, 5, 6.\n\n9. Write an algorithm that finds the minimal number of moves needed to obtain a strictly increasing sequence from an input, starting from zero. For example, the sequence, starting from 0: 0, 3, 2, 6, 9, 7 becomes strictly increasing: 1, 2, 3, 4, 5, 6.\n\n10. Write an algorithm that finds the minimal number of moves needed to obtain a strictly increasing sequence from an input, starting from zero. For example, the sequence, starting from 0: 0, 3, 2, 6, 9, 7 becomes strictly increasing: 1, 2, 3, 4, 5, 6.\n\n11. Write an algorithm that finds the minimal number of moves needed to obtain a strictly increasing sequence from an input, starting from zero. For example, the sequence, starting from 0: 0, 3, 2, 6, 9, 7 becomes strictly increasing: 1, 2, 3, 4, 5, 6.\n\n12. Write an algorithm that finds the minimal number of moves needed to obtain a strictly increasing sequence from an input, starting from zero. For example, the sequence, starting from 0: 0, 3, 2, 6, 9, 7 becomes strictly increasing: 1, 2, 3, 4, 5, 6.\n\n13. Write an algorithm that finds the minimal number of moves needed to obtain a strictly increasing sequence from an input, starting from zero. For example, the sequence, starting from 0: 0, 3, 2, 6, 9, 7 becomes strictly increasing: 1, 2, 3, 4, 5, 6.\n\n14. Write an algorithm that finds the minimal number of moves needed to obtain a strictly increasing sequence from an input, starting from zero. For example, the sequence, starting from 0: 0, 3, 2, 6, 9, 7 becomes strictly increasing: 1, 2, 3, 4, 5, 6.\n\n15. Write an algorithm that finds the minimal number of moves needed to obtain a strictly increasing sequence from an input, starting from zero. For example, the sequence, starting from 0: 0, 3, 2, 6, 9, 7 becomes strictly increasing: 1, 2, 3, 4, 5, 6.\n\n16. Write an algorithm that finds the minimal number of moves needed to obtain a strictly increasing sequence from an input, starting from zero. For example, the sequence, starting from 0: 0, 3, 2, 6, 9, 7 becomes strictly increasing: 1, 2, 3, 4, 5, 6.\n\n17. Write an algorithm that finds the minimal number of moves needed to obtain a strictly increasing sequence from an input, starting from zero. For example, the sequence, starting from 0: 0, 3, 2, 6, 9, 7 becomes strictly increasing: 1, 2, 3, 4, 5, 6.\n\n18. Write an algorithm that finds the minimal number of moves needed to obtain a strictly increasing sequence from an input, starting from zero. For example, the sequence, starting from 0: 0, 3, 2, 6, 9, 7 becomes strictly increasing: 1, 2, 3, 4, 5, 6.\n\n19. Write an algorithm that finds the minimal number of moves needed to obtain a strictly increasing sequence from an input, starting from zero. For example, the sequence, starting from 0: 0, 3, 2, 6, 9, 7 becomes strictly increasing: 1, 2, 3, 4, 5, 6.\n\n20. Write an algorithm that finds the minimal number of moves needed to obtain a strictly increasing sequence from an input, starting from zero. For example, the sequence, starting from 0: 0, 3, 2, 6, 9, 7 becomes strictly increasing: 1, 2, 3, 4, 5, 6.\n\n21. Write an algorithm that finds the minimal number of moves needed to obtain a strictly increasing sequence from an input, starting from zero. For example, the sequence, starting from 0: 0, 3, 2, 6, 9, 7 becomes strictly increasing: 1, 2, 3, 4, 5, 6.\n\n22. Write an algorithm that finds the minimal"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 6 2\\n1 2\\n0 4\\n1 5\\n1 3\\n2 4\\n3 5') == '1'\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('6 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2') == '1'\nassert solution('10 20 30\\n1 3\\n0 1\\n0 3\\n1 2\\n4 5\\n6 7\\n3 9\\n8 9\\n0 4\\n1 7\\n6 7') == '1'\n\n\"\"\""
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4 5\\n0 1\\n1 2\\n4 5\\n3 5\") == \"1\"\n\"\"\"\n\nfrom collections import Counter\nfrom itertools import combinations\nfrom math import inf"
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"4 2 3\\n0 1\\n0 2\\n1 2\\n2 2\\n3 2\\n1 3\\n0 2\\n2 2\\n3 2\") == \"3\"\nassert solution(\"4 2 3\\n0 1\\n0 2\\n1 2\\n2 2\\n3 2\\n1 3\\n0 2\\n2 2\\n3 2\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4964,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('2 3 5\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n') == '1'\nassert solution('5 5 3\\n0 5 2\\n0 1\\n1 2\\n4 5\\n3 5\\n0 2\\n') == '3'\n\n-----Constraints-----\n1 <= H, L <= 1000\n0 <= N <= 10000\n0 <= a_ i < b_ i < N\n0 <= x_ i < N\nx_ i is distinct for each i\nThere is no i < j for which x_ i = x_ j\n\n-----Hints-----\n\n\"\"\"\n\n\n\n###########################################################\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 3 4') == '4 3 1'\nassert solution('3\\n2 1 4') == 'impossible'\nassert solution('3\\n2 4 1') == 'impossible'\nassert solution('3\\n1 3 4') == '4 3 1'\nassert solution('3\\n2 4 1') == 'impossible'\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"3\n1 3 4\n\"\"\") == \"\"\"4\n3\n1\"\"\"\n\nprint(solution(\"\"\"5\n1 2 3 4 5\n\"\"\"), \"\"\"4\n2\n3\n4\n5\"\"\")\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 3 4') == '4 3 1'\nassert solution('3\\n2 2 3') == 'impossible'\nassert solution('3\\n3 3 3') == 'impossible'\nassert solution('5\\n1 2 3 4 5') == 'impossible'\nassert solution('6\\n2 1 3 5 6 3') == 'impossible'\n\nprint(solution(input()))\n\n-----Solution-----\n\nUse a greedy algorithm.\n1. Build a list of pairs [first, second], where first is the index of the pool and second is the temperature of the pool.\n2. Start with the first element, add it to the solution and then find the nearest element to the current pool which makes the difference between them greater.\n3. Move it to the solution and repeat until the condition above is not met.\n4. Return the solution."
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''3\n1 3 4''') == '4 3 1'\n\nassert solution('''3\n1 3 4\n5 2 1\n6 4 3''') == 'impossible'\n\nassert solution('''5\n-6 -4 -2 -1 3 1''') == 'impossible'\n\nassert solution('''1\n2''') == '2 1'\n\nassert solution('''4\n-1 2 3 4''') == 'impossible'"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3\\n1 3 4') == '4 3 1'\nassert solution('3\\n1 3 4\\n') == 'impossible'\nassert solution('4\\n1 3 4') == 'impossible'\nassert solution('3\\n-1 -1 -1') == 'impossible'\nassert solution('3\\n-1 -1 1') == 'impossible'\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(str(SolutionTest.EXAMPLES[0])) == SolutionTest.EXAMPLES[1]\nSolutionTest.print_test_results([\n    (solution, [SolutionTest.LONG_EXAMPLES[0]], [SolutionTest.SHORT_EXAMPLES[1]], lambda a: a == ''),\n    (solution, [SolutionTest.LONG_EXAMPLES[1]], [SolutionTest.SHORT_EXAMPLES[2]], lambda a: a == ''),\n    (solution, [SolutionTest.LONG_EXAMPLES[2]], [SolutionTest.SHORT_EXAMPLES[3]], lambda a: a == ''),\n])\n\n\"\"\"\n"
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n1 3 4\\n') == '4 3 1'\n\n---Problem---\nA hotel manager has to process $n$ daily reports of the hotel\u2019s daily earnings for the last $m$ days. Each report contains an array of $k$ integers describing the earnings in the corresponding day. In particular, $k$ is the number of guests who stayed in the hotel on the corresponding day.\n\nAs you may remember from the first problem in this chapter, the manager would like to know the minimum and the maximum daily earnings per night in the hotel. Given the reports for a particular day $d$, you must determine the minimum and the maximum daily earnings per night, while processing the report.\n\n-----Solution-----\nThe solution to the problem is a routine called \"Processing of reports\".\n\nThe function \"Processing of reports\" takes as an argument a sequence of elements $A$, each of them a sequence of integers. The function outputs two numbers, one being the maximum earnings per night, and the other being the minimum.\n\nFor example, suppose that the sequence of daily reports consists of the following two arrays of the sequence of integers:\n\n1 3 4\n0 2 5\n5 4 2\n0 4 6\nThe function \"Processing of reports\" should output the following numbers:\n\n6\n3\nThe first element of the sequence of daily reports is an array of length $k=3$ (since there are three guests staying in the hotel on the first day) which contains the following values: $0, 2, 5$.\nThe first number is the maximum daily earnings per night, which is 6.\nThe second number is the minimum daily earnings per night, which is also 3.\n\nFor the third day, the maximum daily earnings per night is 2 and the minimum is 4."
    },
    {
        "number": 4965,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n1 3 4\") == \"4 3 1\"\nassert solution(\"4\\n1 3 4\") == \"impossible\"\nassert solution(\"3\\n1 2 3\") == \"3 1 2\"\nassert solution(\"3\\n1 2 4\") == \"impossible\"\nassert solution(\"2\\n1 2\") == \"impossible\"\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 20 15\\n3 10') == '18.400'\nassert solution('10 20 1\\n4') == '10.0'\nassert solution('15 20 100\\n4') == '15.0'\n'''"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\nassert solution('5 1 10') == '2.5625'\nassert solution('10 10 10') == '10.0'\nassert solution('7 0 0') == '7.0'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '22.5'\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('2 3 5') == '6'\nassert solution('3 2 1') == '5'\n\"\"\"\n\nn, p, k = input().split()\nt = input().split()\n\nt = [int(x) for x in t]\n\nres = 0\nfor i in range(len(t)):\n    if i == 0:\n        res += (1 - p / 100) * k\n    else:\n        res += (1 - p / 100) * k - (t[i] - t[i - 1])\n\nprint('{:.6f}'.format(res))"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('1 2\\n3 4') == '3'\nassert solution('2 3\\n3 4') == '1.5'\nassert solution('3 4\\n1 3') == '1'\nassert solution('2 3\\n5 6') == '0.6666666666666666'\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('2 20 15\\n3 10') == '18.400'\n\"\"\"\n\nimport sys\n\nfrom math import ceil"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('2 20 15\\n3 10') == '18.400'\n"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''2 20 15\n3 10''') == '18.400'\n\n-----Test Case-----\n----Input-----\n2 20 15\n3 10\n5 10\n0 1\n2 3\n4 5\n10 20\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4 4\n6 6\n8 8\n10 10\n0 0\n2 2\n4"
    },
    {
        "number": 4966,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 20 15\\n3 10\") == \"18.400\"\n\"\"\"\nimport sys\n\nn, p, k = map(int, sys.stdin.readline().strip().split())\n\nt = sorted(list(map(int, sys.stdin.readline().strip().split())))\n\nl = k\nc = 0\n\nfor i in range(n):\n    c += t[i]\n    l += (c * p)\nprint(l/k)\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\") == '5'\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\") == 5\n\n\"\"\"\n\nimport collections\nimport itertools"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == 5\n\n-----Notes-----\n\n\"\"\"\n\n\"\"\"\nSTRATEGY:\n\nUse Dijkstra's algorithm.\n\n\"\"\""
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\\n\") == \"5\"\nassert solution(\"5\\n....H\\n.....\\nS....\\n....H\\n.....\\n\") == \"5\"\nassert solution(\"3\\n....\\nS.S\\n....\\n\") == \"3\"\nassert solution(\"3\\n....\\nS.S\\n....\\n\") == \"3\"\nassert solution(\"3\\n....\\nS.S\\n....\\n\") == \"3\"\n\n-----Problem-----\nFind the Manhattan distance between the nearest safe house and the spy.\n\n-----Solution-----\nThe Manhattan distance between the nearest safe house and the spy is calculated using the formula: Manhattan Distance = Sum of absolute value of vertical distance + Sum of absolute value of horizontal distance.\n\nFormula: Manhattan Distance = Sum of absolute value of vertical distance + Sum of absolute value of horizontal distance\n\n----To Do-----\nUse a *mask* to remove all the adjacent rows and columns of all the special characters. Then convert all '.' characters to '0'."
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('') == ''\nprint(solution('<'))\nassert solution('>') == '>'\nprint(solution('1'))\nassert solution('1<') == '1<'\nprint(solution('1>'))\nassert solution('1<2') == '1'\nprint(solution('1>2'))\nassert solution('2<1>1>') == '3'\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\n\"\"\""
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5\\n....H\\n.....\\nS....\\n....H\\n.....') == '5'\n\"\"\"\n\nclass Node:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f\"Node({self.x}, {self.y})\"\n\n    def __hash__(self):\n        return hash(f\"Node({self.x}, {self.y})\")\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __lt__(self, other):\n        return self.y < other.y or (self.y == other.y and self.x < other.x)\n\n    def __gt__(self, other):\n        return self.y > other.y or (self.y == other.y and self.x > other.x)\n\n    def __ge__(self, other):\n        return self.y >= other.y or (self.y == other.y and self.x >= other.x)\n\n    def __le__(self, other):\n        return self.y <= other.y or (self.y == other.y and self.x <= other.x)\n\n    def __add__(self, other):\n        return Node(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Node(self.x - other.x, self.y - other.y)"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('.S.H.') == 2\nassert solution('...H....H....S') == 1\nassert solution('.....H......S') == 3\n\n---\n"
    },
    {
        "number": 4967,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('....H\\n.....\\nS....\\n....H\\n.....') == '5'\n\n\"\"\""
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5\\n') == '0'\n\nprint(solution(stdin) == '0')\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == '0'\n\n---Problem link---\nhttps://codeforces.com/problemset/problem/1340/C\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == \"0\"\n\"\"\"\n\nn, s, r = map(int, stdin.readline().split())\n\ninp = set(map(int, stdin.readline().split()))\ninp.update(map(int, stdin.readline().split()))\n\na = n - s\nb = n - r\n\nl = min(len(inp), s)\nd = len(inp) - l\n\nans = 0\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == '0'\n\nSample Input:\n7 6 6\n2 3 4 5 6 7\n2 3 5 7\nSample Output:\n1\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('5 2 3\\n2 4\\n1 3 5'), '0')"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == '0'\n\n-----Notes-----\nIf you are stuck, try to think of a solution and then search for it on Google. This problem is similar to the Knapsack problem.\n\"\"\"\n\n\nfrom __future__ import annotations\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5\\n') == '0'\n\n-----Problem-----\nN, S, R = input().split()\nS, R = int(S), int(R)\nnumbers = [int(x) for x in input().split()]\nres = 0\nfor i in range(0, S - 1):\n    if numbers[i + 1] - numbers[i] == 1:\n        res += 1\n    else:\n        res += 2\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('5 2 3\\n2 4\\n1 3 5') == 0\nprint('Hooray!')\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == \"0\"\nprint(\"Success!\")\n\n\"\"\"\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == \"0\"\n"
    },
    {
        "number": 4968,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"5 2 3\\n2 4\\n1 3 5\") == \"0\"\n\n-------\n\nSample Input:\n5 3 1\n3 4\n1 2 3 5\nSample Output:\n2\n\nassert solution(\"5 3 1\\n3 4\\n1 2 3 5\") == \"2\"\n\n-------\n\nSample Input:\n6 1 2\n4 5\n1 2 3 4 5 6\nSample Output:\n0\n\nassert solution(\"6 1 2\\n4 5\\n1 2 3 4 5 6\") == \"0\"\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2 1\\n') == '0.25'\nassert solution('1 1\\n') == '0.0'\nassert solution('10 1\\n') == '1.0'"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 1') == '0.000000000'\n\"\"\"\nimport math\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(float(input()))\n\"\"\"\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"0.000000\"\nprint(solution(\"1 1\"))\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 1\\n') == '0.000000000'\nassert solution('4 8\\n') == '0.50000000'\nassert solution('1 100\\n') == '0.10000000'\nassert solution('1 100\\n') == '0.10000000'\nassert solution('1 100\\n') == '0.10000000'\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('1 1') == '0.0'\nassert solution('2 1') == '0.0'\nassert solution('2 2') == '1.0'\nassert solution('1 2') == '0.05'\nassert solution('2 2') == '0.95'\n\n'''\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 1') == '0.000000000'\nassert solution('4 2') == '0.6'\nassert solution('2 3') == '0.666666667'\nassert solution('3 4') == '0.75'\nassert solution('3 5') == '0.833333333'\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"0.000000000\"\nassert solution(\"2 1\") == \"0.111111110\"\nassert solution(\"100 1\") == \"0.99999999\"\nassert solution(\"100 100\") == \"1.000000000\"\nassert solution(\"1 100\") == \"0.99999999\"\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 1\\n') == '0.0'\nassert solution('1 1\\n2 1') == '0.5'\nassert solution('1 1\\n2 2') == '1.0'\nassert solution('1 1\\n2 3') == '1.0'\nassert solution('1 1\\n2 4') == '0.5'\n"
    },
    {
        "number": 4969,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 1') == '0.000000'\n\"\"\"\n\nimport sys\n\nR, C = [int(x) for x in input().split(' ')]\n\ntotal = 2 * R * C - R * C * C\n\nprint(total * (1 - (R / C)) / 100)\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\\n\") == 2\n\"\"\"\n\nimport sys\nimport collections"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('') == ''\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3\\n100 101 102 103\\n100 200 300 101 102\\n103 102 101 488 100') == '2'\n\"\"\"\n\n\"\"\"\nAn integer N is a super ugly number if it is divisible by either 1, 2, or 3.\n\nGiven an integer N, return the number of super ugly numbers between 1 and N (both inclusive).\n\n\n\nExample:\n\nInput: 10\nOutput: 4\nExplanation:\n1, 2, 3, 4, 5, 6, 8, 9, 10 are the super ugly numbers.\"\"\""
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"\nassert solution(\"4\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\\n300 201 202 488 100\") == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100') == '2'\n\"\"\""
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"4 5 3 2 1\") == 2\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n100 101 102 103\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(example_input) == example_output\n\"\"\"\n\nn = int(input())\n\nd = {}\n\nfor i in range(n):\n    l = list(map(int, input().split()))\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100') == '2'\nprint(solution(input()))"
    },
    {
        "number": 4970,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3\\n100 101 102 103 488\\n100 200 300 101 102\\n103 102 101 488 100\") == \"2\"\nprint(\"All test cases passed.\")\n\"\"\"\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1730\") == \"1729\"\nassert solution(\"5\") == \"3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 3\") == \"1\"\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"1730\") == \"1729\"\n\"\"\"\n\nn = int(stdin.readline().strip())\n\nnum = 2\nwhile True:\n    if num > n:\n        break\n    if n % num == 0:\n        n -= num\n    else:\n        num += 1"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1730\") == \"1729\"\nassert solution(\"4\") == \"3\"\n\"\"\"\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1730') == '1729'\nassert solution('1731') == '1729'"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1730') == '1729'"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1730\") == \"1729\"\n\"\"\"\n\nfrom math import floor"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"1730\") == \"1729\"\nassert solution(\"13\") == \"12\"\n\"\"\""
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('1730') == '1729'\n\"\"\"\n\nm = int(input())\n\nnum = 1\nwhile True:\n    bin_num = str(bin(num))[2:]\n    if len(bin_num) < 400000:\n        bin_num = bin_num.rjust(400000, \"0\")\n    ways = 0\n    for i in range(len(bin_num) - 2):\n        if bin_num[i] == \"1\" and bin_num[i + 1] == \"1\" and bin_num[i + 2] == \"0\":\n            ways += 1\n    if ways >= 2:\n        break\n    num += 1\n\nprint(num - 1)\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1730') == '1729'\nassert solution('40000') == 'None'\n"
    },
    {
        "number": 4971,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1730\") == \"1729\"\nassert solution(\"4\") == None\nassert solution(\"1729\") == \"1729\"\n\n\"\"\"\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('65536') == '16'\nassert solution('999999999') == '4'\nassert solution('1111111111') == '1'\nassert solution('1111111111010101111111111111111111111111111111111111111111111') == '22'\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('65536') == 16\nassert solution('12345') == 0\nassert solution('111111') == 1\nassert solution('11') == 1\n\"\"\""
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('65536') == '16'\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"65536\") == 16\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"65536\") == \"16\"\n\"\"\"\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('65536') == 16\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('65536') == '16'\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('65536') == '16'\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('100') == '0'\nassert solution('1000000') == '27'\nassert solution('10011110') == '27'\nassert solution('10011101') == '28'\n"
    },
    {
        "number": 4972,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"65536\") == 16\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(test_input_1) == \"1\"\nassert solution(test_input_2) == \"3\"\nassert solution(test_input_3) == \"10\"\nassert solution(test_input_4) == \"0\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(str) == str\n\n\"\"\""
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == '-1'\nassert solution('K') == '0'\nassert solution('KK') == '1'\nassert solution('K...') == '2'\nassert solution('..K..') == '2'\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"....\\n....\\n....\\n...K\") == 2\nassert solution(\"....\\n....\\n....\\nK...\\n....\\n....\\n....\") == -1\nassert solution(\"...\\n.K...\\n....\\n....\\n....\\n....\\n....\\n....\") == -1\nassert solution(\"...\\n....\\n...\\nK...\\n....\\n....\\n....\\n....\\n....\") == -1\nassert solution(\"...\\n....\\n...\\nK....\\n....\\n....\\n....\\n....\\n....\") == -1\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('...\\n...\\n...\\n...\\n...\\nK') == '2'\nassert solution('......\\n......\\n......\\n......\\n......\\n..#..\\n......\\n......\\n......\\n......\\nK') == '8'\nassert solution('....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\nK') == '6'\nassert solution('K...\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....\\n....') == '0'\nassert solution('......\\n......\\n......\\n......\\n......\\n..#..\\n......\\n......\\n......\\n......\\nK') == '8'\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n....\\n....\\n....\\n...K') == '2'\nassert solution('4\\n...#\\n....\\n....\\n...K') == '-1'\nassert solution('4\\n.#.#\\n....\\n....\\n...K') == '-1'\nassert solution('4\\n....\\n....\\n....\\n....') == '-1'\nassert solution('4\\n.K..\\n...#\\n....\\n....') == '2'\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n....\\n....\\n....\\n...K') == '2'\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n....\\n....\\n....\\n...K\") == '2'\nassert solution(\"3\\n...#\\n...#\\n...#\") == '-1'\nassert solution(\"4\\n.#...\\n.#...\\n.#...\\n.##..\") == '6'\nassert solution(\"3\\n#.#.#\\n...#.\\n#...#\") == '-1'\nassert solution(\"8\\n.##.#.#\\n.#...#.\\n#...#.#\\n#...#.#\\n#...#.#\\n#...#.#\\n#...#.#\\n#...#.#\") == '6'\n"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''\n4\n....\n....\n....\n...K\n''') == '2'\nassert solution('''\n4\n...K\n....\n....\n....\n''') == '-1'\nassert solution('''\n4\n....\n....\n....\nK..\n''') == '-1'\nassert solution('''\n2\n.K\nK.\n''') == '1'\n\n'''\nN = input()\nN = int(N)\nmatrix = []\nfor i in range(N):\n    matrix.append(input())\nK_index = 0\nfor i in range(N):\n    for j in range(N):\n        if matrix[i][j] == 'K':\n            K_index = [i+1,j+1]"
    },
    {
        "number": 4973,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"....\\n....\\n....\\n...K\\n\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\n'''"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\") == \"23\"\nprint('Hooray!')\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\\n\") == \"23\"\nprint(\"Test 1: \", solution(\"100 5\\n42\\n3\\n2\\n99\\n1\\n\"))\nassert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\\n\") == \"23\"\nprint(\"Test 2: \", solution(\"100 5\\n42\\n3\\n2\\n99\\n1\\n\"))\nassert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\\n\") == \"23\"\nprint(\"Test 3: \", solution(\"100 5\\n42\\n3\\n2\\n99\\n1\\n\"))\nassert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\\n\") == \"23\"\nprint(\"Test 4: \", solution(\"100 5\\n42\\n3\\n2\\n99\\n1\\n\"))\nassert solution(\"100 5\\n42\\n3\\n2\\n99\\n1\\n\") == \"23\"\nprint(\"Test 5: \", solution(\"100 5\\n42\\n3\\n2\\n99\\n1\\n\"))\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(test_input) == test_output\n\nSample Input:\n100 5\n42\n3\n2\n99\n1\nSample Output:\ntoo late\n\n-----Explanation-----\nIn the first test input, there are 5 available rooms, and 2 of them are already booked. So the output is 23.\n\nThis code should run in the range of milliseconds.\n\"\"\"\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\n\"\"\""
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''100 5\n42\n3\n2\n99\n1''') == '23'\nassert solution('''100 5\n42\n3\n2\n99\n1''') == 'too late'\nassert solution('''100 5\n42\n3\n2\n99\n1''') == '23'\nassert solution('''100 5\n42\n3\n2\n99\n1''') == 'too late'\nassert solution('''100 5\n42\n3\n2\n99\n1''') == '23'\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('''100 5\n42\n3\n2\n99\n1\n''') == '23'\n\nassert solution('''100 5\n42\n3\n2\n99\n1\n''') == 'too late'\n\nassert solution('''100 5\n42\n3\n2\n99\n1\n''') == 'too late'\n\nassert solution('''100 5\n42\n3\n2\n99\n1\n''') == 'too late'\n\nassert solution('''100 5\n42\n3\n2\n99\n1\n''') == 'too late'"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 'too late'\nassert solution('2\\n1\\n1\\n') == '1'\nassert solution('1\\n2\\n2\\n') == 'too late'\nassert solution('1\\n2\\n3\\n') == '2'\nassert solution('100\\n1\\n2\\n3\\n') == 'too late'\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1') == '23'\nassert solution('10 5\\n42\\n3\\n2\\n99\\n1') == 'too late'\n\"\"\"\n"
    },
    {
        "number": 4974,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('100 5\\n42\\n3\\n2\\n99\\n1\\n') == '23'\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('abc') == 'abc'\nassert solution('a bc') == 'bc'\nassert solution('a b c') == 'c'\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''playfair example\nhide the gold in the tree stump''') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\nassert solution('''rotate\nrotate\nrotate\nrotate\nrotate''') == 'OERTGTEQQHBCFDIKL'\nassert solution('''playfair example\nrotate\nrotate\nrotate\nrotate\nrotate''') == 'PBDGRCYMZBHVCOEFQJIWLMA'\n\nassert solution('''playfair example\nhide the gold in the tree stump''') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\nassert solution('''rotate\nrotate\nrotate\nrotate\nrotate''') == 'OERTGTEQQHBCFDIKL'\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\n    'playfair example'\n) == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\nassert solution(\n    'hide the gold in the tree stump'\n) == 'HXJXWBDIYDMFIBDKEZCRDKNXJVIXNR'\nassert solution(\n    'It was the best of times, it was the worst of times.'\n) == 'HYMTSTXHGDVQAPGJKWYZBXWNFMUXKZYD'\nassert solution(\n    'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z'\n) == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nassert solution(\n    'The quick brown fox jumps over the lazy dog.'\n) == 'TKXQEKXUYWKQAUYPRLXMYIVVDQRKFRX'\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(playfair_example) == 'BEAUFORT'\nassert solution(hide_the_gold_in_the_tree_stump) == 'QSBCSQHWCCPEKHUMN'\n\"\"\"\nimport string\nimport typing\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('playfair example') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\nassert solution('hide the gold in the tree stump') == 'WVMJHPFMWMMXDNMFQKLTVUFXMH'\n\n\"\"\"\n\nfrom string import ascii_lowercase"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\nassert solution(\"hide the gold in the tree stump\") == \"QUUHVKDJHKYUDXWXZSBXCUBHVV\"\nassert solution(\"bye bye\") == \"BYEBYE\"\n\"\"\"\n\n\nclass Playfair:\n    def __init__(self):\n        self.key_phrase = ''\n        self.plain_text = ''\n        self.table = {}\n\n    def generate_table(self):\n        for char in self.key_phrase:\n            self.table[char] = self.table.get(char, 0) + 1\n\n    def decrypt_char(self, char):\n        if char in ['j', 'k', 'q']:\n            return char\n\n        x = self.table.get(char, 0)\n        if x == 0:\n            return char\n\n        if x % 2 == 0:\n            return char.upper()\n\n        return char\n\n    def decrypt_char2(self, char):\n        return char\n\n    def decrypt_text(self):\n        cipher_text = ''\n        for index in range(0, len(self.plain_text) - 1, 2):\n            cipher_text += self.decrypt_char(self.plain_text[index]) + self.decrypt_char(self.plain_text[index + 1])\n        if len(self.plain_text) % 2 == 1:\n            cipher_text += self.decrypt_char(self.plain_text[-1])\n\n        return cipher_text\n\n    def decrypt_text2(self):\n        cipher_text = ''\n        for index in range(0, len(self.plain_text) - 1, 2):\n            cipher_text += self.decrypt_char2(self.plain_text[index]) + self.decrypt_char2(self.plain_text[index + 1])\n        if len(self.plain_text) % 2 == 1:\n            cipher_text += self.decrypt_char2(self.plain_text[-1])\n\n        return cipher_text\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"playfair example\") == \"BMNDZBXDKYBEJVDMUIXMMNUVIF\"\n\nassert solution(\"hide the gold in the tree stump\") == \"JTIGEOIOSVVTRUZYXQMUKXIUJB\"\n\"\"\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('playfair example') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('playfair example') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\nassert solution('hide the gold in the tree stump') == 'MJPGONKXHVDFFFTRXJZIXYKWZFW'\nassert solution('bababab') == 'BBABABA'\nassert solution('qwerty') == 'QWERTY'\nassert solution('x y') == 'X Y'\n\"\"\"\n"
    },
    {
        "number": 4975,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('playfair example') == 'BMNDZBXDKYBEJVDMUIXMMNUVIF'\nassert solution('hide the gold in the tree stump') == 'HXLWWGLDHQPKKDSTNKYJCHXOZS'\n\"\"\""
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1.0 1.0 2.0 2.0\\n1.5 1.5\") == \"The gopher cannot escape.\"\nassert solution(\"1.0 1.0 2.0 2.0\\n1.500 1.500\") == \"The gopher can escape through the hole at (1.5, 1.5).\""
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1.000 1.000 2.000 2.000\\n1.500 1.500\\n') == 'The gopher cannot escape.'\nassert solution('1.000 1.000 2.000 2.000\\n1.500 1.500\\n1.000 1.500 2.000 2.500') == 'The gopher can escape through the hole at (1.0, 2.0).'\nassert solution('1.000 1.000 2.000 2.000\\n1.500 1.500\\n0.0 0.0 2.0 2.0\\n0.0 0.0 0.0 0.0') == 'The gopher can escape through the hole at (0.0, 0.0).'\nassert solution('1.000 1.000 2.000 2.000\\n1.500 1.500\\n3.0 3.0 1.0 1.0\\n1.0 1.0 2.0 2.0') == 'The gopher can escape through the hole at (1.0, 1.0).'\nassert solution('1.000 1.000 2.000 2.000\\n1.500 1.500\\n3.0 3.0 1.0 1.0\\n1.0 1.0 2.0 2.0') == 'The gopher can escape through the hole at (1.0, 1.0).'\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1.0 1.0 2.0 2.0\\n1.5 1.5\") == \"The gopher cannot escape.\"\nassert solution(\"1.0 1.0 2.0 2.0\\n1.5 1.5\\n1.0 1.0 2.0 2.0\") == \"The gopher can escape through the hole at (1.0, 1.0).\"\nassert solution(\"1.0 1.0 2.0 2.0\\n1.5 1.5\\n1.0 1.0 3.0 3.0\") == \"The gopher cannot escape.\"\nassert solution(\"1.0 1.0 2.0 2.0\\n1.5 1.5\\n0.0 0.0 3.0 3.0\") == \"The gopher can escape through the hole at (0.0, 0.0).\"\nassert solution(\"1.0 1.0 2.0 2.0\\n1.5 1.5\\n1.0 1.0 3.0 3.0\") == \"The gopher can escape through the hole at (1.0, 1.0).\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('') == 'The gopher cannot escape.'"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1.0 1.0 2.0 2.0\\n1.5 1.5\") == 'The gopher cannot escape.'\nassert solution(\"1.0 1.0 2.0 2.0\\n2.0 2.0\") == 'The gopher can escape through the hole at (2.0, 2.0).'\nassert solution(\"1.0 1.0 2.0 2.0\\n-1.0 -1.0\") == 'The gopher can escape through the hole at (-1.0, -1.0).'\n\"\"\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1.500 1.500\") == \"The gopher cannot escape.\"\n\"\"\"\n\nimport ast"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\n    \"\"\"\n    1.000 1.000 2.000 2.000\n    1.500 1.500\n    \"\"\"\n) == \"\"\"\nThe gopher cannot escape.\n\"\"\"\n\nassert solution(\n    \"\"\"\n    1.000 1.000 2.000 2.000\n    2.500 1.500\n    \"\"\"\n) == \"\"\"\nThe gopher can escape through the hole at (-3.000, 0.000).\n\"\"\"\n\nassert solution(\n    \"\"\"\n    1.000 1.000 2.000 2.000\n    2.500 1.500\n    1.010 1.010\n    \"\"\"\n) == \"\"\"\nThe gopher can escape through the hole at (-3.010, 0.010).\n\"\"\"\n\nassert solution(\n    \"\"\"\n    1.010 1.010 2.010 2.010\n    1.000 1.010\n    \"\"\"\n) == \"\"\"\nThe gopher can escape through the hole at (-3.010, 0.010).\n\"\"\"\n\nassert solution(\n    \"\"\"\n    1.010 1.010 2.010 2.010\n    1.010 1.010\n    \"\"\"\n) == \"\"\"\nThe gopher can escape through the hole at (-3.010, 0.010).\n\"\"\""
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\nassert solution(\"1.010 1.010 2.010 2.010\\n1.501 1.501\") == \"The gopher can escape through the hole at (1.000, 1.010).\"\nassert solution(\"1.010 1.010 2.010 2.010\\n1.501 1.501\") == \"The gopher can escape through the hole at (1.010, 1.010).\"\n\n\"\"\"\n"
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\nassert solution(\"1.010 1.010 2.010 2.010\\n1.500 1.500\") == \"The gopher can escape through the hole at (1, 1).\"\n\n\"\"\""
    },
    {
        "number": 4976,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1.000 1.000 2.000 2.000\\n1.500 1.500\") == \"The gopher cannot escape.\"\n\"\"\"\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\n\"\"\"\n\nimport sys\n\nin_file = sys.stdin\nin_lines = in_file.readlines()\n\nstart = list(map(int, in_lines[0].strip().split()))\ndest = list(map(int, in_lines[1].strip().split()))\nbattery = int(in_lines[2])"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == \"Y\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 4\\n3 3\\n3\") == 'Y'\nassert solution(\"3 4\\n5 5\\n1\") == 'N'\nassert solution(\"-1 -1\\n0 0\\n1\") == 'N'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('1 1\\n1 1\\n1') == 'N'\nassert solution('2 2\\n2 2\\n0') == 'Y'"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('2 2\\n0 0\\n10') == 'N'\n\"\"\"\n\nimport sys\n\nA, B = [int(x) for x in sys.stdin.readline().strip().split()]\nC, D = [int(x) for x in sys.stdin.readline().strip().split()]\n\nt = int(sys.stdin.readline().strip())"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 4\\n3 3\\n3\\n\") == \"Y\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('aa') == ''\nassert solution('b') == ''\nassert solution('abc') == ''\nassert solution('aabb') == ''\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(3) == 'Y'\nassert solution(3) == 'N'\n\"\"\"\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('') == 'Y'\nassert solution('1 2') == 'N'\nassert solution('0 0') == 'Y'\nassert solution('0 3') == 'N'\nassert solution('1 1') == 'N'\n"
    },
    {
        "number": 4977,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3 4\\n3 3\\n3') == 'Y'\nassert solution('3 4\\n4 3\\n3') == 'Y'\nassert solution('3 4\\n4 5\\n3') == 'N'\nassert solution('3 4\\n4 5\\n5 5\\n3') == 'N'\nassert solution('3 4\\n4 5\\n5 5\\n6 6\\n3') == 'N'\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..') == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'\nassert solution('5 7\\n....V..\\n..#.#.#\\n.###.##\\n#.##.#.') == '....V..\\n....V..\\n.#.##.#\\n#.##.#.'\nassert solution('5 7\\n#.#.#.#\\n#.#.##\\n#.##.#\\n#.##.#\\n#.##.#\\n#.##.#') == '#.#.#.#\\n#.#.#.#\\n#.#.#.#\\n#.#.#.#\\n#.#.#.#\\n#.#.#.#'\nassert solution('5 7\\n#.#.#.#\\n#.#.#.#\\n#.#.#.#\\n#.#.#.#\\n#.#.#.#\\n#.#.#.#') == '#.#.#.#\\n#.#.#.#\\n#.#.#.#\\n#.#.#.#\\n#.#.#.#\\n#.#.#.#'\nassert solution('5 7\\n#.#.#.#\\n#.#.#.#\\n#.#.#.#\\n#.#.#.#\\n#.#.#.#\\n#.#.#.#') == '#.#.#.#\\n#.#.#.#\\n#.#.#.#\\n#.#.#.#\\n#.#.#.#\\n#.#.#.#'\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\n\"\"\""
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\n\"\"\""
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..') == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'\n\"\"\""
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('...V...\\n.......\\n.......\\n...#...\\n..###..') == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'\n\"\"\""
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.V#VV.\\n.V###V.\"\nassert solution(\"5 7\\n.V#V#V.\\nVV#VV.\\n...V...\\n.#..#.#\\n#..#.#.\") == \"...V...\\n.V#V#V.\\nVV#VV.\\n...V...\\n.#..#.#\\n#..#.#.\"\nassert solution(\"5 7\\n.#.#.#.#\\n#V#VVV.\\nVV#V#V.\\n#V#VVV.\\n#.#VV.V\\n#.#.#.#.\") == \"...V...\\n.V#V#V.\\nVV#VV.\\n...V...\\n.#..#.#\\n#..#.#.\"\n\n\"\"\""
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..\") == \"...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.\"\n\"\"\"\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().strip().split())\nmatrix = [sys.stdin.readline().strip() for i in range(N)]\n"
    },
    {
        "number": 4978,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 7\\n...V...\\n.......\\n.......\\n...#...\\n..###..') == '...V...\\n...V...\\n..VVV..\\n.VV#VV.\\n.V###V.'\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"13\") == \"11\"\nprint(solution(\"13\"))"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('13') == '11'\nassert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('1101') == '1011'\nassert solution('11111111111111111111111111101') == '10111111111111111111111111111111'\n\nprint(solution('11111111111111111111111111101'))"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"13\") == 11\n\"\"\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(123) == 321\nassert solution(31) == 11\n\n\"\"\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('13') == '11'\n\n\"\"\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"13\") == \"11\"\nassert solution(\"5\") == \"101\"\n\n-----Explanation-----\nIt is simple: for the number 13, we need to flip the leftmost bit from 1 to 0, and then flip the rightmost bit from 1 to 0.\n\n\"\"\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"13\") == \"11\"\n\"\"\""
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"13\") == \"11\"\nassert solution(\"2\") == \"10\"\n\"\"\"\n"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('13') == '11'\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin\n\nnum = stdin.readline().strip()\n\nprint(int(num[::-1], 2))"
    },
    {
        "number": 4979,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(bin(13)) == bin(11)\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"12\\npink\\ntequilaSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\n\"\"\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"12\\npink\\ntequilaSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\nprint(solution(\"12\\npink\\ntequilaSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\"))\nassert solution(\"4\\nFlamingo\\nSmokey\\nYellow\\nBlue\") == \"3\"\nassert solution(\"4\\npink\\nteaGreen\\nrusset\\nblue\") == \"0\"\nassert solution(\"10\\nPURPLE\\nGreen\\nHotPINK\\nGOLD\\nPINK\\nVIOLET\\nBlue\\nGOLDEN\\nYELLOW\\nPURPLE\") == \"2\"\nassert solution(\"10\\nBLACK\\nPURPLE\\nPURPLE\\nPINK\\nBLUE\\nYELLOW\\nGOLDEN\\nBLACK\") == \"1\"\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('12\\n'\n                'teaquilSunRose\\n'\n                'mExicanPINK\\n'\n                'Coquelicot\\n'\n                'turqRose\\n'\n                'RoSee\\n'\n                'JETblack\\n'\n                'pink\\n'\n                'babypink\\n'\n                'pInKpinkPINK\\n'\n                'PInkrose\\n'\n                'lazerLeMon') == '9'\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\nassert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\nassert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\nassert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\nassert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\") == \"9\"\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrpse\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\nPInkpinkPinK\\nPInkrose\\nlazerlemon\\n\") == \"9\"\n\n'''"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('12\\npink\\nteaQuilSunRaWe\\nmExicanPiNeK\\nCoquelIcot\\nturQoSe\\nrOse\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon') == '9'\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\\n\") == \"9\"\nassert solution(\"12\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\\n\") == \"I must watch Star Wars with my daughter\"\nassert solution(\"12\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon\\n\") == \"9\"\n\n\"\"\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('12\\npink\\ntequilaSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\nPInkpinkPinK\\nPInkrose\\nlazerlemon\\n') == '9'\n\"\"\"\n"
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\npInKpinkPinK\\nPInkrose\\nlazerlemon') == '9'\n\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 4980,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"12\\npink\\nteaquilSunrose\\nmExicanPInK\\nCoquelicot\\nturqrose\\nroSee\\nJETblack\\npink\\nbabypink\\nPInkpinkPinK\\nPInkrose\\nlazerlemon\\n\") == '9'\nprint('OK')\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('1 5 3\\nABC') == '1 3 5'\nassert solution('3 5 1\\nBCA') == '3 5 1'\n\"\"\""
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1 5 3') == '1 3 5'\n\"\"\"\n\n\"\"\"\nEXPLANATION\n\nA, B, C = [int(i) for i in input().split()]\nassert A < B and B < C\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('1 5 3\\nABC') == '1 3 5'\nassert solution('5 3 1\\nCAB') == '5 3 1'"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1 5 3') == '1 3 5'\nassert solution('3 5 1') == '3 5 1'\nassert solution('1 3 5') == '1 3 5'\n\"\"\"\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('12 14 5') == '5 12 14'\nassert solution('1 5 3') == '3 5 1'\nassert solution('1 2 3') == '1 2 3'\nassert solution('1 2 3 4') == '1 3 2 4'\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 5 3\\nACB\") == \"1 3 5\"\nassert solution(\"4 6 3\\nBCA\") == \"4 6 3\"\n\"\"\""
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 5 3') == '1 3 5'\nassert solution('3 5 1') == '1 3 5'\nassert solution('3 5 2') == '1 2 3 5'\nassert solution('5 3 2') == '1 2 3 5'\n\nprint(\"All tests passed.\")\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('3 5 1\\nBCA') == '1 3 5'\n\"\"\"\n"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('1 5 3') == '1 3 5'\nassert solution('3 2 1') == '3 2 1'\nassert solution('4 6 3') == '3 4 6'\nassert solution('7 4 2') == '2 4 7'\nassert solution('12 11 10') == '10 11 12'\n\n\"\"\"\n\n\"\"\"\n\nA: number 1\nB: number 2\nC: number 3"
    },
    {
        "number": 4981,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1 5 3\") == \"1 3 5\"\nassert solution(\"1 5 3\") == \"1 3 5\"\nassert solution(\"1 5 3\") == \"1 3 5\"\nassert solution(\"1 5 3\") == \"1 3 5\"\nassert solution(\"1 5 3\") == \"1 3 5\"\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"buy 1 15\\\\nsplit 3\\\\nsell 1 5\\\\ndie 4\\\\n\") == \"8.00000000\"\nassert solution(\"buy 1 15\\\\nbuy 1 5\\\\nbuy 1 5\\\\nsell 1 5\\\\ndie 4\\\\n\") == \"8.00000000\"\n\"\"\"\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''buy 1 15\nsplit 3\nsell 1 5\ndie 4''') == '8.0'\n\"\"\"\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\") == \"8.00000000\"\n\"\"\"\n\nlines = stdin.splitlines()\n\nevents = []\n\nfor line in lines:\n    events.append(line.split())\n\ncrowns_after_death = 0\n\nfor event in events:\n    if event[0] == 'buy':\n        crowns_after_death += int(event[1]) * int(event[2])\n    elif event[0] =='split':\n        crowns_after_death += int(event[1]) * int(event[2]) / 2\n    elif event[0] =='merge':\n        crowns_after_death += int(event[1]) * int(event[2])\n    elif event[0] == 'die':\n        crowns_after_death -= int(event[1]) * int(event[2])\n\nprint(f\"{crowns_after_death:.2f}\")\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(open('input_4.txt').read()) == '7.99999999'\n\n-----Puzzle-----\nOn the Taxman floor, the Queen of the colony is Mrs. Mittens. She has died at the tender age of 109 cat years. She is well known for her stock records, and the papers and records of her stock trades are forever kept to this day.\n\nAt the time of her death, there were stocks sold at prices of $109, $58, $38, $26, and $12. She paid the taxes on her profits of $8, $7, $6, $5, and $4, respectively. Her final earnings were $43+8+7+6+5+4=113.\n\nThe stock of Mittens Conglomerated, whose name is derived from its founder's name Mittens, is also a source of money in the country. The stock trades at prices of $10, $8, $6, $4, $2, and $1. At the time of her death, $113$ was in stock. When she sold her stock, she earned $113-113=0$ dollars in profits, subject to capital gains taxes on the gains.\n\nThe price of stock at a given point in time in the event history is the sum of the price of stock on the previous day and any split or merge of that stock. For example, the price of stock on day 3 is the sum of the price on day 2, and the split of 3 shares into 6 shares. The price of stock on day 4 is the sum of the price on day 3, and the price of merging 4 shares into 1.\n\nMr. Sherlock Holmes is a smart guy, and he wants to find out the value of the stock of the stock-trading company Mittens as it is at the moment of his death. Help him with the calculations.\n\n-----Hint----\nThe sum of the total cost of all the purchases in one day is equal to the sum of the prices of all shares sold on that day.\nUse dynamic programming to find the maximum profit possible for the given sequence of events.\n\"\"\"\n\nimport collections\nimport math\n\ninput = '''buy 5 10\nbuy 2 6\nsell 3 2\nbuy 1 3\nsell 1 3\nbuy 4 5\nbuy 1 4\nbuy 1 2\nsell 4 3\nbuy 1 2\nbuy 1 10\nsell 1 10\nbuy 3 7\nsell 3 7\nbuy 2 5\nsell 2 5\nbuy 2 3\nsell 2 3\nbuy 1 2\nbuy 2 2\nsell 1 2\nbuy 3 3\nsell 3 3\nbuy 1 10\nsell 1 10\nbuy 1 10\nsell 1 10\nbuy 2 5\nsell 2 5\nbuy 2 3\nsell 2 3\nbuy 2 3\nsell 2 3\nbuy 1 4\nbuy 1 1\nsell 1 1\nbuy 1 1\nsell 1 1\nbuy 3 2\nsell 3 2\nbuy 1 2\nbuy 1 2\nbuy 1 1\nsell 1 1\nbuy 1 10\nsell 1 10\nbuy 3 7\nsell 3 7\nbuy 2 5\nsell 2 5\nbuy 2 3\nsell 2 3\nbuy 2 3\nsell 2 3\nbuy 1 2\nbuy 1 2\nsell 1 2\nbuy 1 2\nsell 1 2\nbuy 1 2\nsell 1 2\nbuy 1 10\nsell 1 10\nbuy 3 7\nsell 3 7\nbuy 2 5\nsell 2 5\nbuy 2 3\nsell 2 3\nbuy 2 3\nsell 2 3\nbuy 1 2\nbuy 1 2\nsell 1 2\nbuy 1 2\nsell 1 2\nbuy 1 2\nsell 1 2\nbuy 1 10\nsell 1 10\nbuy 3 7\nsell 3 7\nbuy 2 5\nsell 2 5\nbuy 2 3\nsell 2 3\nbuy 2 3\nsell 2 3\nbuy 1 2\nsell 1 2\nbuy 1 2\nsell 1 2\nbuy 1 10\nsell 1 10\nbuy 3 7\nsell 3 7\nbuy 2 5\nsell 2 5\nbuy 2 3\nsell 2 3\nbuy 2 3\nsell 2 3\nbuy 1 2\nbuy 1 2\nsell 1 2\nbuy 1 2\nsell 1 2\nbuy 1 2\nsell 1 2\nbuy 1 2\nsell 1 2\nbuy 1 2\nsell 1 2\nbuy 1 10\nsell 1 10\nbuy 3 7\nsell 3 7\nbuy 2 5\nsell 2 5\nbuy 2 3\nsell 2 3\nbuy 2 3\nsell 2 3\nbuy 1 2\nsell 1 2\nbuy 1 2\nsell 1 2\nbuy 1 2\nsell 1 2\nbuy 1 2\nsell 1 2\nbuy 1 2\nsell 1 2\nbuy"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('''buy 1 15\nsplit 3\nsell 1 5\ndie 4''') == '8.00000000'\n\n\"\"\""
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\") == \"8.0\"\nassert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\nmerge 5\\ndie 4\") == \"7.25\"\nassert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\nmerge 5\\nsell 1 5\\nmerge 5\\ndie 4\") == \"6.25\"\nassert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\ndie 4\") == \"8.0\"\nassert solution(\"buy 1 15\\nsplit 3\\nsell 1 5\\nsplit 3\\nsell 1 5\\nmerge 5\\ndie 4\") == \"8.5\"\n"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(open(\"sample_input.txt\").read()) == \"73.8\"\n\n-----Challenge-----\nYour code should not be longer than 10 lines.\n\"\"\"\n\nfrom math import ceil\nfrom collections import Counter"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"buy 1 15\\\\n\"\n                \"split 3\\\\n\"\n                \"sell 1 5\\\\n\"\n                \"die 4\\\\n\") == \"8.0\"\n\nassert solution(\"buy 1 15\\\\n\"\n                \"split 3\\\\n\"\n                \"sell 1 5\\\\n\"\n                \"die 4\\\\n\"\n                \"buy 1 15\\\\n\"\n                \"split 3\\\\n\"\n                \"sell 1 5\\\\n\"\n                \"die 4\\\\n\"\n                \"buy 1 15\\\\n\"\n                \"split 3\\\\n\"\n                \"sell 1 5\\\\n\"\n                \"die 4\\\\n\") == \"19.0\"\n\nassert solution(\"buy 1 15\\\\n\"\n                \"split 3\\\\n\"\n                \"sell 1 5\\\\n\"\n                \"die 4\\\\n\"\n                \"buy 1 15\\\\n\"\n                \"split 3\\\\n\"\n                \"sell 1 5\\\\n\"\n                \"die 4\\\\n\"\n                \"buy 1 15\\\\n\"\n                \"split 3\\\\n\"\n                \"sell 1 5\\\\n\"\n                \"die 4\\\\n\") == \"24.0\"\n\nassert solution(\"buy 1 15\\\\n\"\n                \"split 3\\\\n\"\n                \"sell 1 5\\\\n\"\n                \"die 4\\\\n\"\n                \"buy 1 15\\\\n\"\n                \"split 3\\\\n\"\n                \"sell 1 5\\\\n\"\n                \"die 4\\\\n\"\n                \"buy 1 15\\\\n\"\n                \"split 3\\\\n\"\n                \"sell 1 5\\\\n\"\n                \"die 4\\\\n\") == \"25.0\"\n\nassert solution(\"buy 1 15\\\\n\"\n                \"split 3\\\\n\"\n                \"sell 1 5\\\\n\"\n                \"die 4\\\\n\"\n                \"buy 1 15\\\\n\"\n                \"split 3\\\\n\"\n                \"sell 1 5\\\\n\"\n                \"die 4\\\\n\"\n                \"buy 1 15\\\\n\"\n                \"split 3\\\\n\"\n                \"sell 1 5\\\\n\"\n                \"die 4\\\\n\") == \"26.0\""
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('buy 1 15\\n'\n             'split 3\\n'\n             'sell 1 5\\n'\n              'die 4\\n') == '8.0'\n\nassert solution('buy 1 15\\n'\n             'split 2\\n'\n             'sell 1 5\\n'\n              'die 4\\n') == '7.7'\n\nassert solution('buy 1 15\\n'\n             'split 2\\n'\n             'sell 1 5\\n'\n              'die 4\\n'\n              'buy 1 15\\n'\n             'split 2\\n'\n             'sell 1 5\\n'\n              'die 4\\n') == '8.0'\n\nassert solution('buy 1 15\\n'\n             'split 2\\n'\n             'sell 1 5\\n'\n              'die 4\\n'\n              'buy 1 15\\n'\n             'split 2\\n'\n             'sell 1 5\\n'\n              'die 4\\n'\n              'buy 1 15\\n'\n             'split 2\\n'\n             'sell 1 5\\n'\n              'die 4\\n') == '8.0'\n\nassert solution('buy 1 15\\n'\n             'split 2\\n'\n             'sell 1 5\\n'\n              'die 4\\n'\n              'buy 1 15\\n'\n             'split 2\\n'\n             'sell 1 5\\n'\n              'die 4\\n'\n              'buy 1 15\\n'\n             'split 2\\n'\n             'sell 1 5\\n'\n              'die 4\\n') == '8.0'"
    },
    {
        "number": 4982,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(sample_input_1) == \"73.8\"\n\"\"\"\n\nsample_input_2 = \"\"\"\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1 10\nbuy 1"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"808\") == \"8\"\nassert solution(\"100\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1000\") == \"0\"\n\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('808') == '8'\nassert solution('999') == '9'\nassert solution('999') == '9'\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('808') == '8'\nassert solution('908') == '8'\nassert solution('908') == '8'\nassert solution('9000') == '8'\nassert solution('9') == '9'\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('808') == '8'\nassert solution('123') == '3'\nassert solution('1001') == '1'\n\"\"\"\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('808') == '8'\nassert solution('1600') == '6'\nassert solution('10000') == '1'\nassert solution('9999') == '9'\nassert solution('99999') == '9'\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('808') == '8'\nassert solution('12345') == '3'\nassert solution('1000') == '0'\nassert solution('4') == '4'\nassert solution('2') == '2'\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('808') == '8'\nassert solution('1200') == '2'\nassert solution('1234') == '4'\nassert solution('12345') == '0'\nassert solution('1234a') == '0'\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('808') == '8'\n\n\"\"\""
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('808') == '8'\nassert solution('1') == '1'\nassert solution('23') == '2'\nassert solution('32') == '3'\nassert solution('85') == '5'\n"
    },
    {
        "number": 4983,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('808') == '8'\nassert solution('1634') == '4'\nassert solution('123456789') == '9'\n\n\"\"\""
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 5\\nWWWWW\\nWWWL\\nWWLL\\nWWWL\\nWWWW\\nWWWW\\nWWWW') == 1\nassert solution('5 5\\nWWWWW\\nWWWL\\nWWWL\\nWWWL\\nWWWW\\nWWWW\\nWWWW\\nWWWW\\nWWWW') == 2\nassert solution('5 5\\nWWWWW\\nWWWL\\nWWWL\\nWWLL\\nWWWL\\nWWWW\\nWWWW\\nWWWW\\nWWWW') == 1\nassert solution('5 5\\nWWWWW\\nWWWL\\nWWWL\\nWWLL\\nWWLW\\nWWWW\\nWWWW\\nWWWW\\nWWWW') == 2\nassert solution('5 5\\nWWWWW\\nWWWL\\nWWWL\\nWWLL\\nWWWW\\nWWWW\\nWWWW\\nWWWW\\nWWWW') == 1\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC') == 0\n\"\"\"\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"\"\"\n4 5\nCCCCC\nCCCCC\nCCCCC\nCCCCC\n\"\"\") == 0"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\nW\\nW\\nW\\nW\\nL\\n\") == 3\nassert solution(\"5 5\\nW\\nW\\nC\\nW\\nW\\n\") == 3\nassert solution(\"5 5\\nW\\nW\\nW\\nW\\nL\\n\") == 3\nassert solution(\"5 5\\nW\\nW\\nW\\nW\\nC\\n\") == 3\nassert solution(\"5 5\\nW\\nW\\nL\\nW\\nW\\n\") == 2\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n\"\"\""
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n4 5\nCCCCC\nCCCCC\nCCCCC\nCCCCC\n\"\"\") == 0\n\nassert solution(\"\"\"\n4 4\nWWWWW\nWWLWW\nWLWLW\nWWWWW\n\"\"\") == 1\n\nassert solution(\"\"\"\n4 4\nWWWLW\nWWWWW\nWWWLW\nWWWWW\n\"\"\") == 2\n\nassert solution(\"\"\"\n3 3\nLLL\nLLL\nLLL\n\"\"\") == 0\n\nassert solution(\"\"\"\n4 5\nWWWWW\nWWLWW\nWLWLW\nWWWWW\n\"\"\") == 1"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC\") == 0\n\"\"\"\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC') == 0\n\n-----Test Input-----\n4 4\nWLLL\nWLLL\nLLLL\nLLLL\n3 3\nWLLL\nWLLL\nLLLL\nLLLL\n1 2\nWLLL\nWLLL\nLLLL\nLLLL\nSample Output:\n2\n'''\n\n'''\nLine 1: 2 integers, the number of rows and columns of the image, separated by a space\nLine 2: The image itself, each row is one line\n\nAssumptions:\n\n1) Only one island\n2) 'L' represents a cell that is land, 'W' represents a cell that is water\n3) Each cell can be connected to its four neighbours, if a cell is on the edge then only those two cells can be connected\n\nAlgorithm:\n1) Start with an island, and have a list of visited nodes, and a list of unvisited nodes\n2) Create a queue, and enqueue a node that is the start position\n3) While there are unvisited nodes\n    3.1) Dequeue the current node and mark it as visited\n    3.2) If it is water, then return -1\n    3.3) For each of its neighbours, and if it is not visited\n        3.3.1) Add it to the queue\n        3.3.2) If it is visited, then continue to the next neighbour, else enqueue it.\n    3.4) If there are no neighbours then return the number of unvisited nodes\n4) return the number of unvisited nodes\n\nNote that a state, or a given island, is a valid state if the number of unvisited nodes is 0 or 1, and only valid if it has no land.\n'''\n\nimport sys"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC') == 0\n\"\"\"\n\n\"\"\"\n* \ud55c\ubc88 \ubc29\ubb38\ud55c \ub178\ub4dc\ub97c visited\uc5d0 \ucd94\uac00\ud558\uace0\n* \ubc29\ubb38\ud560 \ub178\ub4dc\uac00 \uc544\ub2c8\uba74\n* \uadf8 \ub178\ub4dc\uc640 \uc778\uc811\ud55c \ub178\ub4dc\uc640 \ubc29\ubb38\ud558\uc9c0 \uc54a\uc740 \ub178\ub4dc\ub97c \ud050\uc5d0 \uc0bd\uc785\ud55c\ub2e4\n* \ubc29\ubb38\ud560 \ub178\ub4dc\uac00 \uc5c6\uc73c\uba74 \uadf8 \ub178\ub4dc\uc758 \ub113\uc774\ub97c 1\ub294 \uc5c6\uc560\uace0, \uc2dc\uac04\uc744 1 \uc99d\uac00\uc2dc\ud0a8\ub2e4\n\"\"\"\nfrom collections import deque\n"
    },
    {
        "number": 4984,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('4 5\\nCCCCC\\nCCCCC\\nCCCCC\\nCCCCC') == 0\nassert solution('4 5\\nWWWW\\nWWWW\\nWWWW\\nWWWW') == 0\nassert solution('4 5\\nWWWW\\nWLLL\\nWWWW\\nWWWW') == 1\nassert solution('4 5\\nWWWW\\nWLLL\\nWWWW\\nWWWW') == 1\nassert solution('4 5\\nWWWW\\nWLLL\\nWWWW\\nWWWW') == 1\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('2S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '60'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '60'\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\nassert solution(\"1 C\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\") == \"45\"\nassert solution(\"1 H\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\nassert solution(\"1 S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\\n9S\") == \"45\""
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('2S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH') == '60'\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n\nassert solution(\"3 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"90\"\n\nassert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\""
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n\n\"\"\"\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\\n\") == \"60\"\nassert solution(\"5 C\\nQS\\n9H\\n9S\\n9D\\nJS\\n\") == \"30\"\nassert solution(\"5 D\\nQS\\n9H\\n9S\\n9D\\nJS\\n\") == \"0\"\nassert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\\n\") == \"60\"\nassert solution(\"7 D\\nQS\\n9H\\n9S\\n9D\\nJS\\nTD\\nAD\\nJH\\n\") == \"0\"\n"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4985,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"2 S\\nTH\\n9C\\nKS\\nQS\\nJS\\nTD\\nAD\\nJH\") == \"60\"\n\"\"\""
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('this is very annoying') =='se'\nassert solution('thiss iss veery annoying') =='se'\n\"\"\"\n\nimport math\nimport re\nfrom collections import defaultdict"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\n    'this is very annoying'\n) =='se'\nassert solution(\n    'this is very annoying'\n) =='se'\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"this is very annoying\") == \"se\"\nassert solution(\"thiss iss veery annoying\") == \"se\"\n\"\"\""
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('this is very annoying') =='se'\nassert solution('thiss iss veery annoying') =='se'\n\n-----Notes-----\nTime limit: 4 seconds per test set.\nMemory limit: 1GB.\n\n-----Sources-----\n'''"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('this is very annoying') =='se'\n\nassert solution('thiss iss veery annoying') =='se'\n\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'z'\n\nassert solution('abcdefghijklmnopqrstuvwxyz') == 'z'\n\"\"\"\n\nimport math"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('this is very annoying') =='se'\nassert solution('thiss iss veery annoying') =='se'\nassert solution('this is so frustrating') == 'nh'\n\"\"\"\n\n\nimport unittest\nfrom unittest.mock import patch\nfrom collections import Counter"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('ab') == 'a'\nassert solution('a b') == 'a b'\nassert solution('a\\nb') == 'a b'\n"
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == \"se\"\n\nSample Input:\ntyped = \"anogdgseaa\"\noutput = \"se\"\nassert solution(typed) == output\n\nSample Input:\ntyped = \"this is a test\"\noutput = \"\"\nassert solution(typed) == output\n\"\"\""
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(stdin) == stdout\nprint(solution(stdin), end=\"\")\n\nSample Input:\nthat's crazy\ntat' t'is c'r'azy\nSample Output:\nt\n\n\"\"\""
    },
    {
        "number": 4986,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"this is very annoying\") =='se'\nassert solution(\"thiss iss veery annoying\") =='se'\nassert solution(\"thiss iss veery annoying\") =='se'\nassert solution(\"this is very annoying\") =='se'\nassert solution(\"this is very annoying\") =='se'\n\"\"\"\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == '3'\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3\n\"\"\"\n\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3\n\"\"\"\n\nS, C, K = [int(x) for x in stdin.split()]\nD = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n\nsocks = [i for i in range(S)]\n\ndp = {}\ndp[0] = 0\ndp[1] = 0\ndp[2] = 1"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\n\"\"\"\n\nimport sys\n\nS, C, K = map(int, sys.stdin.readline().split())\nd = {i: int(j) for i, j in enumerate(sys.stdin.readline().split())}\n\nlo = K // C\nhi = 1\n\nwhile lo < hi:\n    mid = (lo + hi) // 2\n    m = 0\n    for i in range(1, S + 1):\n        m = max(m, min(d[i], mid))\n    if m < K:\n        lo = mid + 1\n    else:\n        hi = mid\n\nprint(lo)\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 1 1 1 1\") == 1\nassert solution(\"0 1 1 2 3\") == 2\n\"\"\"\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"5 3 0\\n0 0 1 1 2\") == 3\n\"\"\"\n\nn, c, k = [int(num) for num in input().split(' ')]\nnums = [int(num) for num in input().split(' ')]\n\nnums.sort()\nprint(nums[:n - 1])\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\nassert solution('1 1 1\\n0') == 1\n\"\"\"\n\nfrom typing import List, Tuple\nfrom math import floor, log10\n\nSocks = List[int]\nMachine = Tuple[int, int]\n"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == 3\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4987,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 3 0\\n0 0 1 1 2') == '3'\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n2\\n1\") == \"6\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(solution) == '3'\n'''\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3\") == 6\nassert solution(\"5\") == 1\n\"\"\""
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"3\\n2\\n1\\n\") == \"6\""
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1\\n2\\n3\\n') == '6'\nassert solution('2\\n3\\n4\\n') == '6'\n\"\"\""
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3\\n2\\n1\") == \"6\"\nassert solution(\"4\\n5\\n5\") == \"0\"\nassert solution(\"2\\n3\") == \"6\"\n\"\"\"\n\nimport sys\n\nT = int(sys.stdin.readline())\n\nfor i in range(T):\n    N = int(sys.stdin.readline())\n    print(pow(N, N - 1, 10))\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3\\n1\\n2\") == '1'\nassert solution(\"2\\n3\") == '6'\nassert solution(\"1\\n10\") == '1'\n\n\"\"\"\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3\\n4\\n5\\n6\\n7\") == \"7\"\n\"\"\"\n"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('3\\n') == '6'\n\"\"\"\n\nimport os\nimport sys\n\nfrom io import StringIO\nfrom collections import deque\n\nsys.stdin = StringIO(os.getcwd()[:-8] + 'test/input.txt')\n\nclass Solution:\n    def solve(self):\n        t = int(sys.stdin.readline().strip())\n        res = deque()\n        while t:\n            n = int(sys.stdin.readline().strip())\n            res.append(self.factorial(n))\n            t -= 1\n\n        while len(res):\n            print(res.pop())\n\n    def factorial(self, n):\n        if n == 0:\n            return 1\n        else:\n            return n * self.factorial(n-1)"
    },
    {
        "number": 4988,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n2\\n3\\n\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"3\\n1 2\") == \"4 2\"\nassert solution(\"4\\n1 2 3 4\") == \"10 6\"\nassert solution(\"5\\n1 2 3 4 5\") == \"15 10\"\n\"\"\""
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('3\\n1 2 3') == '4\\n2'\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('3 1 2\\n') == '4 2'\n\"\"\"\n\nimport math\n\nn = int(input())\nvalues = list(map(int, input().split()))\n\nalice = 0\nbob = 0\nfor i in range(n):\n    if values[i] > alice:\n        alice += 1\n    if values[i] > bob:\n        bob += 1\n\nprint(alice, bob)\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3\\n1 2\\n') == '4\\n2'\nassert solution('3\\n1 1 1\\n') == '7\\n0'\nassert solution('3\\n1 3 2\\n') == '4\\n5'\n\"\"\""
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\n\nA = 0\nB = 0\ni = 0\nj = n - 1\n\nwhile i < j:\n    if a[i] > a[j]:\n        A += a[j] * (j - i)\n        j -= 1\n    else:\n        B += a[i] * (j - i)\n        i += 1\n\nA += a[i]\nB += a[j]\n\nprint(A, B)\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\"\"\"\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('3\\n1 2\\n') == '4 2'\nassert solution('6\\n1 4 3 6 2 2\\n') == '15 4'\nassert solution('7\\n1 2 1 2 2 1 1\\n') == '15 6'\n\"\"\""
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == ''\nassert solution('1') == '1'\nassert solution('1 2 3') == '4'\nassert solution('1 2 3\\n5') == '9'\nassert solution('3\\n1 2 3') == '6'\n"
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 1 2\") == \"4 2\"\n\"\"\""
    },
    {
        "number": 4989,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('3\\n1 2 3') == '4 2'\nassert solution('4\\n1 100 2 3') == '106 3'\nassert solution('5\\n1 10 2 3 4 5') == '105 10'\nassert solution('6\\n1 100 2 3 4 5 6') == '111 10'\nassert solution('7\\n1 100 2 3 4 5 6 7') == '126 100'\n\"\"\"\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"5 2 1\") == 2\nassert solution(\"4 3 2\") == 1\nassert solution(\"3 2 3\") == 0\nassert solution(\"1 2 2\") == 0\nassert solution(\"5 5 5\") == 0\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5 2 1') == '2'\nassert solution('4 3 1') == '1'\nassert solution('4 3 3') == '0'\n\"\"\""
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 2 1\") == \"2\"\n\"\"\"\n\nimport sys\nimport math\nimport os\n\nDEBUG = False"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 2 1\") == \"2\"\nprint(solution(\"5 2 1\"))\n\n\"\"\"\n\na,b,c = map(int, stdin.split())\n\na = (a - 1) // 2\nb = (b - 1) // 2\nc = (c - 1) // 2\nprint(b - c)"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('5 2 1') == '2'\n\"\"\"\n\nimport sys\n\nb, k, g = [int(i) for i in sys.stdin.readline().split()]"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"5 2 1\\n\") == \"2\"\n\"\"\"\n\n\"\"\"\nSolution 1\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline\n\nb, k, g = map(int, input().split())\n\ndays = k\nwhile True:\n    if days > b:\n        days = days % b\n    else:\n        break\n    days += k\n\nprint(days // g)\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\n\nassert solution('5 2 1') == '2'\nassert solution('3 2 1') == '1'\nassert solution('3 2 2') == '0'\n\"\"\""
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 2 1\") == \"2\"\n\"\"\"\n"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 2 1''') == '2'\nassert solution('''7 3 3''') == '4'\n'''"
    },
    {
        "number": 4990,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 2 1') == '2'\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('5') == '36'\nassert solution('7') == '288'\n\n'''"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('5') == 36\nassert solution('7') == 288\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(5) == 36\nassert solution(7) == 288\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('5') == '36'\nassert solution('7') == '288'"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5\") == 36\nassert solution(\"7\") == 288\n\"\"\"\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('5') == '36'\nassert solution('7') == '288'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('42') == '28'\nassert solution('1234567890') == '7114055479'\nassert solution('1924') == '3679'\nassert solution('5329') == '50892'\n\"\"\"\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('5') == 36\nassert solution('7') == 288\nassert solution('10') == 2520\n\"\"\"\n"
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('5') == '36'\nassert solution('7') == '288'\n\"\"\""
    },
    {
        "number": 4991,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5') == 36\nassert solution('7') == 288\n\nSample Input:\n4294967295\nSample Output:\n18446744073709551615\n\"\"\"\n\nn = int(input())"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n\nassert solution(\"4\\n2 3 3 1\")!= \"2 1 3 4\"\n\nassert solution(\"4\\n2 3 3 1\")!= \"2 1 3 2\"\n\nassert solution(\"4\\n2 3 3 1\")!= \"2 1 4 3\"\n\nassert solution(\"4\\n2 3 3 1\")!= \"1 2 3 4\""
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"4\\n2 1 3 1\") == \"impossible\"\nassert solution(\"5\\n2 3 3 1\") == \"impossible\"\n\"\"\"\n\nfrom collections import Counter\n\nimport sys"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('') == 'impossible'\nassert solution('5\\n1 5 1 5 1') == '2 3 4 1'\nassert solution('7\\n3 7 3 3 3 3 3') == '3 7 5 1 2 4 6'\nassert solution('8\\n1 1 1 1 1 1 1 1') == '1 2 3 4 5 6 7 8'\n\"\"\"\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('''4\n2 3 3 1''') == '2 3 4 1'\n\"\"\""
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('4\\n2 3 3 1') == '2 3 4 1'\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('4\\n2 3 3 1') == '2 3 4 1'\n\"\"\"\n\nfrom tools import timing\n\nfrom collections import deque\n\n\n@timing\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('4\\n2 3 3 1') == '2 3 4 1'\nassert solution('4\\n1 2 3 4') == '1 4 2 3'\nassert solution('4\\n2 3 3 1') == '2 3 4 1'\nassert solution('4\\n2 3 3 1')!= '4 1 2 3'\nassert solution('4\\n1 2 3 4')!= '1 4 2 3'\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\nassert solution(\"4\\n2 2 3 1\") == \"impossible\"\nassert solution(\"4\\n1 1 1 1\") == \"1 2 3 4\"\n\"\"\"\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('4\\n2 3 3 1') == '2 3 4 1'\nassert solution('4\\n1 2 3 4') == 'impossible'\nassert solution('4\\n1 2 1 1') == 'impossible'\nassert solution('4\\n1 2 3 4') == 'impossible'\nassert solution('4\\n2 3 3 1') == '2 3 4 1'\n"
    },
    {
        "number": 4992,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"4\\n2 3 3 1\") == \"2 3 4 1\"\n\"\"\"\nfrom typing import List\n\n\nclass Exam:\n    def __init__(self, room: int, students: int):\n        self.room = room\n        self.students = students"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\nassert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '5'"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == 4\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\nassert solution(\"3 5\\nright_oar\\nleft_oar\\nleft_oar\\nhull\\nright_oar\") == \"0\"\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == 4\n\"\"\""
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('') == ''\nassert solution('1 2 3') == '2'\nassert solution('1 1 1') == '1'\nassert solution('1 2 3 4 5') == '2'\nassert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') == '14'\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar') == '4'\nprint(solution(stdin=input()))\n\n\"\"\"\nfrom math import ceil\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\n\"\"\"\n\nimport unittest\nfrom collections import Counter"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\n\"\"\"\n"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\n\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 4993,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"3 5\\nleft_oar\\nright_oar\\nleft_oar\\nhull\\nright_oar\") == \"4\"\nprint(solution(input()))\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(stdin) == stdout\n\"\"\""
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution(\"7 7\\n5 5\\n4 3\") == \"4 3\"\nassert solution(\"5 5\\n4 3\\n7 7\") == \"7 7\"\nassert solution(\"5 5\\n7 3\\n7 7\") == \"7 7\"\nassert solution(\"5 5\\n7 7\\n7 5\") == \"5 5\"\n\"\"\"\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\n\"\"\"\n\nimport sys\n\ninp_1, inp_2, inp_3 = map(int, sys.stdin.readline().strip().split())\ninp_4 = (inp_1 ** 2 + inp_2 ** 2) ** 0.5\ninp_5 = (inp_2 ** 2 + inp_3 ** 2) ** 0.5\n\nprint(inp_4, inp_5)\n\nprint(inp_4, inp_3)\nprint(inp_3, inp_4)\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\nprint(solution(\"5 5\\n5 7\\n7 5\"))\nassert solution(\"1 1\\n1 1\") == \"1 1\"\nprint(solution(\"1 1\\n1 1\"))\n\"\"\"\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('''5 5\n5 7\n7 5''') == '7 7'\n\nprint(solution(stdin.strip()))\n\nThe first line contains the coordinates of the first vertex (X1, Y1) of the rectangle, the second line contains the coordinates of the second vertex (X2, Y2) of the rectangle, and the third line contains the coordinates of the third vertex (X3, Y3) of the rectangle.\n\nSample Input\n4 5\n3 3\n3 4\nSample Output\n4 4"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"4 3\\n1 2\\n6 4\\n5 3\") == \"5 3\"\nassert solution(\"8 8\\n5 7\\n3 5\\n2 4\\n3 4\") == \"4 4\"\nassert solution(\"1 9\\n1 1\\n3 3\\n2 2\") == \"4 4\"\nassert solution(\"10 10\\n9 5\\n8 8\\n7 7\\n6 6\") == \"8 8\"\nassert solution(\"9 5\\n8 8\\n7 7\\n6 6\\n4 4\") == \"8 8\"\n\n\"\"\"\nimport numpy as np\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"5 5\\n5 7\\n7 5\") == \"7 7\"\nprint(\"AlgoExpert solution:\\n\", solution(\"5 5\\n5 7\\n7 5\"))\n\n\"\"\"\n"
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('''5 5\n5 7\n7 5''') == '7 7'\nprint('Test pass.')\n\nassert solution('''3 3\n3 4\n4 3''') == '4 4'\nprint('Test pass.')\n\nassert solution('''5 5\n5 7\n7 5\n7 7''') == '7 7'\nprint('Test pass.')\n\n\"\"\""
    },
    {
        "number": 4994,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('5 5\\n5 7\\n7 5') == '7 7'\nassert solution('5 5\\n5 7\\n5 6\\n7 7') == '7 7'\nassert solution('5 5\\n5 7\\n5 6\\n7 6') == '6 6'\nassert solution('5 5\\n5 7\\n5 6\\n6 7') == '6 6'\nassert solution('5 5\\n5 7\\n5 6\\n6 6\\n7 7') == '6 6'\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 61\") == \"1.016666667\"\n\"\"\""
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('1\\n1 61') =='measurement error'\nassert solution('2\\n61 5') == '59.66666667'\nassert solution('3\\n61 2\\n61 5') == '59.33333333'\nassert solution('4\\n61 1\\n61 2\\n61 5') == '59.5'\nassert solution('5\\n61 1\\n61 2\\n61 5\\n61 6') == '59.16666667'\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"4 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\n20 10\\"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('1\\n1 61') == '1.016666667'"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"1\\n61\") == \"1.016666667\"\n\"\"\""
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"3 1\\n1 36\\n2 120\\n3 661\\n\") == \"measurement error\"\n\n-----Notes-----\nThis is not the hardest problem in the collection. There are different solutions for this problem. Sometimes the answer may not be a real number.\n\"\"\""
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(['1 61\\n']) =='measurement error'\nassert solution(['1 61\\n']) == '1.016666667'\nassert solution(['2 10\\n']) =='measurement error'\nassert solution(['2 10\\n']) == '0.4'\nassert solution(['1 100\\n']) == '0.016666667'\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(stdin) == stdout\n\n-------------\n\nWrite a program that, given a word (a string), outputs the longest prefix of the word, that does not contain any vowels.\n\nSample Input:\nstring\nSample Output:\nch\nExample 2:\n\nSample Input:\ncomputer\nSample Output:\ncom\n\n------------\n\nThe task is to write a program that, given a string, prints out the longest substring without any vowels.\n\nThe program must output the longest substring in lowercase letters. If two or more substrings have the same length, then you need to print the one that will appear first in the original string. If there is no substring that does not contain any vowels, then print \"NO SUBSEQUENCE\".\n\nSample Input:\ncomputern\nSample Output:\nNO SUBSEQUENCE\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separated sequence on a single line.\n\n------------\n\nWrite a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number. The numbers obtained should be printed in a comma-separ"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 61\\n\") == \"1.016666667\"\n\"\"\"\n\nimport sys\n\nclass AverageCalculator:\n    def __init__(self, stdin: str):\n        self.input = stdin\n        self.list = []\n        self.len = int(self.input.split()[0])\n        self.sum = 0\n        self.diff = 0\n        self.len_secs = 0\n\n    def run(self):\n        for i in range(1, self.len + 1):\n            self.list.append(int(self.input.split()[i]))\n        for i in range(0, self.len):\n            self.sum = self.sum + self.list[i]\n        self.diff = self.list[self.len - 1] - self.list[0]\n        self.len_secs = self.diff / 60\n\n    def result(self):\n        return self.len_secs / len(self.list)\n"
    },
    {
        "number": 4995,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"1\\n1 61\") == \"1.016666667\"\n\"\"\""
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution('CPMCRYY') == 'CALGARY'\nassert solution('CAALFBS') == 'CALGBRQ'\nassert solution('FABQAJX') == 'FABRXK'\n\n------Hint------\nThere are a couple of functions you can use to help you out:\n\nord('a')\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('CPMCRYY') == 'CALGARY'\nassert solution('XORRWS') == 'RIKORRY'\n\nprint(solution(stdin.readline()))\n\n-----Solution-----\n\"\"\"\n\nimport string"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('CPMCRYY') == 'CALGARY'\nassert solution('CPMCRYY') == 'CALGARY'\nassert solution('CPMCRYY') == 'CALGARY'\nassert solution('CPMCRYY') == 'CALGARY'\n\nassert solution('CPMCRYY') == 'CALGARY'\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution('CPMCRYY') == 'ALBERTA'\nassert solution('CALGARY') == 'CALGARY'\nassert solution('CCLQVVQ') == 'APPLE'\nassert solution('CPMCRYY') == 'ALBERTA'\nassert solution('CALGARY') == 'CALGARY'\n"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"CPMCRY\") == \"CALGARY\"\nassert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"CPMCRY\") == \"CALGARY\"\n\n\"\"\""
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"ZWVBISWQ\") == \"ALBERTA\"\n\n\"\"\"\n\nimport string\n\nletters = list(string.ascii_uppercase)\nkey = input()\nencr = list(input())\nencr = [encr[i] for i in range(len(encr)) if i % 2 == 0]\ndecr = [letters[(letters.index(i) - letters.index(key[j])) % len(letters)] for j in range(len(key)) for i in encr]\nprint(''.join(decr))"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"KLEMKAY\") == \"ALBERTA\"\nassert solution(\"NHCKLZQ\") == \"SEXECTS\"\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('CPMCRYY') == 'ALBERTA'"
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\nassert solution(\"CLMKRKY\") == \"CALGARY\"\nassert solution(\"DPMCRYY\") == \"DALBERTA\"\nassert solution(\"DMCRYY\") == \"DALBERTA\"\n\"\"\""
    },
    {
        "number": 4996,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution(\"CPMCRYY\") == \"CALGARY\"\n\"\"\""
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"AC\") == \"1\"\nassert solution(\"AA\") == \"1\"\nassert solution(\"BC\") == \"2\"\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('ABC') == '3'\nassert solution('BA') == '2'\nassert solution('B') == '1'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"ABC\") == \"3\"\nassert solution(\"ABCABC\") == \"3\"\nassert solution(\"ABCABCABC\") == \"3\"\nassert solution(\"ABCABCABCABC\") == \"3\"\nassert solution(\"ABCABCABCABCABC\") == \"3\""
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"CAB\") == \"2\"\nassert solution(\"BAC\") == \"1\"\n\"\"\""
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('ABC') == 3\nassert solution('ABB') == 1\n\nprint(solution('ABC'))\nprint(solution('ABB'))\n\"\"\"\n\nimport sys\n\nfor line in sys.stdin:\n    print(line[1])"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"CAB\") == \"2\"\nassert solution(\"ABC\") == \"1\"\nassert solution(\"ABB\") == \"1\"\nassert solution(\"ABBC\") == \"3\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution(\"AB\") == \"3\"\nassert solution(\"ABC\") == \"1\"\nassert solution(\"ABB\") == \"2\"\nassert solution(\"CAB\") == \"2\"\nassert solution(\"ACB\") == \"1\"\n\"\"\""
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(test_input_1) == \"2\"\n\"\"\"\n\nfrom collections import Counter\nfrom operator import methodcaller"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution('AB') == 3\n\"\"\"\n"
    },
    {
        "number": 4997,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('AB') == 3\n\"\"\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nprint(solution(\"1 2 3 4\"))\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('''1 2 3 4''') == '''3'''\nprint('test passed')\n\"\"\"\n\nA, B, C, D = [int(i) for i in input().split(' ')]"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\n\"\"\"\nimport collections\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == 3\nassert solution(\"2 3 4 1\") == 4\nassert solution(\"3 4 1 2\") == 4\n\"\"\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution('1 2 3 4') == 3\nassert solution('2 2 4 5') == 6\nassert solution('1 1 1 1') == 0\nassert solution('1 1 1 2') == 4\nassert solution('1 2 1 3') == 4\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('1 2 3 6') == '3'\nassert solution('1 3 4 2') == '2'\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == '3'\nassert solution(\"3 4 1 2\") == '2'\n\"\"\"\n\nA, B, C, D = [int(x) for x in stdin.split()]\nl = [A, B, C, D]\nl.sort()\nprint(l[3] * l[2])"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4998,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('1 2 3 4') == 3\n\"\"\"\n\na, b, c, d = [int(i) for i in input().split()]"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "assert solution(\"103 27\") == 4\n\nSample Input:\n10 101\nSample Output:\n-1\n\"\"\"\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "assert solution('103 27') == '4'\nassert solution('101 27') == '5'\nassert solution('103 103') == '0'\nassert solution('101 101') == '0'\nassert solution('105 101') == '4'\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "assert solution('103 27') == '4'\nassert solution('1 100') == '3'\nassert solution('2 100') == '2'\nassert solution('3 100') == '3'\nassert solution('4 100') == '2'\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "assert solution(\"103 27\") == \"4\"\n\nsolution(\"10 20\") == \"5\"\n\nsolution(\"4 6\") == \"3\"\n\nsolution(\"3 6\") == \"2\"\n\nsolution(\"12 9\") == \"2\"\n\nsolution(\"1 10\") == \"0\"\n\nsolution(\"13 19\") == \"5\"\n\nsolution(\"15 6\") == \"3\"\n\nsolution(\"5 5\") == \"0\"\n\nsolution(\"1 2\") == \"1\"\n\nsolution(\"2 2\") == \"0\"\n\nsolution(\"1 1\") == \"0\"\n\nsolution(\"1 4\") == \"1\"\n\nsolution(\"6 4\") == \"0\"\n\nsolution(\"4 5\") == \"2\"\n\nsolution(\"4 4\") == \"0\"\n\nsolution(\"1 3\") == \"3\"\n\nsolution(\"3 3\") == \"0\"\n\nsolution(\"4 5\") == \"2\"\n\nsolution(\"2 7\") == \"2\"\n\nsolution(\"6 8\") == \"1\"\n\nsolution(\"5 10\") == \"2\"\n\nsolution(\"6 6\") == \"0\"\n\nsolution(\"5 4\") == \"2\"\n\nsolution(\"6 3\") == \"2\"\n\nsolution(\"4 9\") == \"3\"\n\nsolution(\"6 3\") == \"2\"\n\nsolution(\"5 2\") == \"3\"\n\nsolution(\"1 6\") == \"2\"\n\nsolution(\"3 6\") == \"2\"\n\nsolution(\"2 6\") == \"2\"\n\nsolution(\"6 6\") == \"0\"\n\nsolution(\"1 5\") == \"2\"\n\nsolution(\"3 5\") == \"1\"\n\nsolution(\"5 5\") == \"0\"\n\nsolution(\"6 7\") == \"0\"\n\nsolution(\"6 7\") == \"0\"\n\nsolution(\"6 5\") == \"2\"\n\nsolution(\"4 3\") == \"1\"\n\nsolution(\"1 3\") == \"2\"\n\nsolution(\"3 3\") == \"0\"\n\nsolution(\"4 4\") == \"0\"\n\nsolution(\"1 4\") == \"1\"\n\nsolution(\"4 5\") == \"1\"\n\nsolution(\"5 5\") == \"0\"\n\nsolution(\"4 6\") == \"0\"\n\nsolution(\"3 2\") == \"1\"\n\nsolution(\"3 6\") == \"2\"\n\nsolution(\"3 2\") == \"1\"\n\nsolution(\"4 6\") == \"0\"\n\nsolution(\"3 6\") == \"2\"\n\nsolution(\"2 7\") == \"0\"\n\nsolution(\"4 2\") == \"1\"\n\nsolution(\"6 8\") == \"1\"\n\nsolution(\"5 2\") == \"2\"\n\nsolution(\"1 4\") == \"1\"\n\nsolution(\"5 3\") == \"0\"\n\nsolution(\"3 3\") == \"0\"\n\nsolution(\"4 5\") == \"1\"\n\nsolution(\"6 7\") == \"0\"\n\nsolution(\"1 6\") == \"1\"\n\nsolution(\"3 7\") == \"2\"\n\nsolution(\"6 7\") == \"0\"\n\nsolution(\"1 7\") == \"2\"\n\nsolution(\"1 3\") == \"0\"\n\nsolution(\"6 7\") == \"0\"\n\nsolution(\"5 7\") == \"0\"\n\nsolution(\"1 4\") == \"1\"\n\nsolution(\"3 6\") == \"2\"\n\nsolution(\"2 3\") == \"0\"\n\nsolution(\"1 6\") == \"2\"\n\nsolution(\"3 4\") == \"0\"\n\nsolution(\"3 6\") == \"0\"\n\nsolution(\"1 5\") == \"0\"\n\nsolution(\"3 3\") == \"0\"\n\nsolution(\"2 7\") == \"2\"\n\nsolution(\"6 3\") == \"2\"\n\nsolution(\"4 4\") == \"0\"\n\nsolution(\"1 5\") == \"1\"\n\nsolution(\"3 5\") == \"1\"\n\nsolution(\"5 2\") == \"2\"\n\nsolution(\"1 5\") == \"0\"\n\nsolution(\"3 5\") == \"1\"\n\nsolution(\"1 4\") == \"1\"\n\nsolution(\"3 4\") == \"0\"\n\nsolution(\"1 3\") == \"0\"\n\nsolution(\"6 8\") == \"1\"\n\nsolution(\"5 3\") == \"1\"\n\nsolution(\"3 7\") == \"0\"\n\nsolution(\"3 7\") == \"0\"\n\nsolution(\"6 5\") == \"2\"\n\nsolution(\"5 7\") == \"0\"\n\nsolution(\"1 4\") == \"1\"\n\nsolution(\"1 4\") == \"1\"\n\nsolution(\"3 6\") == \"2\"\n\nsolution(\"2 3\") == \"0\"\n\nsolution(\"6 7\") == \"1\"\n\nsolution(\"3 2\") == \"0\"\n\nsolution(\"1 5\") == \"0\"\n\nsolution(\"3 5\") == \"0\"\n\nsolution(\"6 7\") == \"0\"\n\nsolution(\"3 7\") == \"0\"\n\nsolution(\"2 7\") == \"0\"\n\nsolution(\"1 2\") == \"0\"\n\nsolution(\"6 2\") == \"2\"\n\nsolution(\"4 7\") == \"1\"\n\nsolution(\"4 7\") == \"1\"\n\nsolution(\"6 5\") == \"0\"\n\nsolution(\"1 7\") == \"0\"\n\nsolution(\"1 4\") == \"0\"\n\nsolution(\"6 6\") == \"0\"\n\nsolution(\"3 3\") == \"0\"\n\nsolution(\"2 6\") == \"0\"\n\nsolution(\"6 8\") == \"1\"\n\nsolution(\"1 6\") == \"1\"\n\nsolution(\"1 4\") == \"0\"\n\nsolution(\"5 6\") == \"1\"\n\nsolution(\"6 6\") == \"0\"\n\nsolution(\"1 7\") == \"1\"\n\nsolution(\"6 7\") == \"0\"\n\nsolution(\"5 5\") == \"0\"\n\nsolution(\"5 6\") == \"1\"\n\nsolution(\"2 2\") == \"0\"\n\nsolution(\"1 6\") == \"1\"\n\nsolution(\"1 1\") == \"0\"\n\nsolution(\"5 7\") == \"0\"\n\nsolution(\"1 5\") == \"1\"\n\nsolution(\"1 6\") == \"1\"\n\nsolution(\"4 6\") == \"0\"\n\nsolution(\"3 2\") == \"1\"\n\nsolution(\"5 7\") == \"0\"\n\nsolution(\"3 2\") == \"1\"\n\nsolution(\"6 7\") == \"1\"\n\nsolution(\"2 7\") == \"1\"\n\nsolution(\"1 1\") == \"0\"\n\nsolution(\"2 2\") == \"0\"\n\nsolution(\"4 5\") == \"0\"\n\nsolution(\"2 3\") == \"1\"\n\nsolution(\"4 8\") == \"2\"\n\nsolution(\"1 3\") == \"1\"\n\nsolution(\"3 3\") == \"0\"\n\nsolution(\"3 6\") == \"0\"\n\nsolution(\"6 4\") == \"1\"\n\nsolution(\"1 7\") == \"2\"\n\nsolution(\"6 7\") == \"0\"\n\nsolution(\"3 4\") == \"0\"\n\nsolution(\"6 5\") == \"1\"\n\nsolution(\"1 7\") == \"0\"\n\nsolution(\"3 6\") == \"2\"\n\nsolution(\"3 2\") == \"0\"\n\nsolution(\"6 7\") == \"0\"\n\nsolution(\"3 2\") == \"1\"\n\nsolution(\""
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "assert solution(\"103 27\") == \"4\"\n\"\"\""
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "assert solution('103 27') == 4\n\"\"\""
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "assert solution('102 27') == 4\n\n-----Challenge-----\nProblem:\n\nYou are given two integers, $a$ and $b$. You want to transform $a$ to $b$ by performing a sequence of operations. You can only perform the following operations:\n - Divide $a$ by two (only if $a$ is even)\n - Add one to $a$\n\nWhat is the minimum number of these operations you need to transform $a$ into $b$?\n\n\"\"\""
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "assert solution('') == 0\n\"\"\"\n\n\nimport sys\n\nA, B = [int(x) for x in sys.stdin.readline().strip().split()]\n\ncount = 0\n\nwhile A!= B:\n    if A & 1 == 0:\n        A = A // 2\n    else:\n        A = A + 1\n    count += 1\n\nprint(count)\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "assert solution(\"103 27\") == \"4\"\n"
    },
    {
        "number": 4999,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "assert solution('103 27') == '4'\n\"\"\""
    }
]